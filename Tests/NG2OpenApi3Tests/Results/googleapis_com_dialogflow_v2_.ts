import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
	export interface GoogleCloudDialogflowCxV3AdvancedSettings {

		/** Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow. */
		audioExportGcsDestination?: GoogleCloudDialogflowCxV3GcsDestination;

		/** Define behaviors for DTMF (dual tone multi frequency). */
		dtmfSettings?: GoogleCloudDialogflowCxV3AdvancedSettingsDtmfSettings;

		/** Define behaviors on logging. */
		loggingSettings?: GoogleCloudDialogflowCxV3AdvancedSettingsLoggingSettings;
	}

	/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
	export interface GoogleCloudDialogflowCxV3AdvancedSettingsFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3AdvancedSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3AdvancedSettingsFormProperties>({
		});

	}


	/** Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3GcsDestination {

		/** Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation. */
		uri?: string | null;
	}

	/** Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3GcsDestinationFormProperties {

		/** Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3GcsDestinationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3GcsDestinationFormProperties>({
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Define behaviors for DTMF (dual tone multi frequency). */
	export interface GoogleCloudDialogflowCxV3AdvancedSettingsDtmfSettings {

		/** If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance). */
		enabled?: boolean | null;

		/** The digit that terminates a DTMF digit sequence. */
		finishDigit?: string | null;

		/** Max length of DTMF digits. */
		maxDigits?: number | null;
	}

	/** Define behaviors for DTMF (dual tone multi frequency). */
	export interface GoogleCloudDialogflowCxV3AdvancedSettingsDtmfSettingsFormProperties {

		/** If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance). */
		enabled: FormControl<boolean | null | undefined>,

		/** The digit that terminates a DTMF digit sequence. */
		finishDigit: FormControl<string | null | undefined>,

		/** Max length of DTMF digits. */
		maxDigits: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3AdvancedSettingsDtmfSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3AdvancedSettingsDtmfSettingsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			finishDigit: new FormControl<string | null | undefined>(undefined),
			maxDigits: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Define behaviors on logging. */
	export interface GoogleCloudDialogflowCxV3AdvancedSettingsLoggingSettings {

		/** If true, DF Interaction logging is currently enabled. */
		enableInteractionLogging?: boolean | null;

		/** If true, StackDriver logging is currently enabled. */
		enableStackdriverLogging?: boolean | null;
	}

	/** Define behaviors on logging. */
	export interface GoogleCloudDialogflowCxV3AdvancedSettingsLoggingSettingsFormProperties {

		/** If true, DF Interaction logging is currently enabled. */
		enableInteractionLogging: FormControl<boolean | null | undefined>,

		/** If true, StackDriver logging is currently enabled. */
		enableStackdriverLogging: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3AdvancedSettingsLoggingSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3AdvancedSettingsLoggingSettingsFormProperties>({
			enableInteractionLogging: new FormControl<boolean | null | undefined>(undefined),
			enableStackdriverLogging: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents the natural speech audio to be processed. */
	export interface GoogleCloudDialogflowCxV3AudioInput {

		/** The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests. */
		audio?: string | null;

		/** Instructs the speech recognizer on how to process the audio content. */
		config?: GoogleCloudDialogflowCxV3InputAudioConfig;
	}

	/** Represents the natural speech audio to be processed. */
	export interface GoogleCloudDialogflowCxV3AudioInputFormProperties {

		/** The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests. */
		audio: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3AudioInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3AudioInputFormProperties>({
			audio: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Instructs the speech recognizer on how to process the audio content. */
	export interface GoogleCloudDialogflowCxV3InputAudioConfig {

		/** Required. Audio encoding of the audio content to process. */
		audioEncoding?: GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null;

		/** Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up. */
		bargeInConfig?: GoogleCloudDialogflowCxV3BargeInConfig;

		/** Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information. */
		enableWordInfo?: boolean | null;

		/** Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models). */
		model?: string | null;

		/** Optional. Which variant of the Speech model to use. */
		modelVariant?: GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null;

		/** Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details. */
		phraseHints?: Array<string>;

		/** Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details. */
		sampleRateHertz?: number | null;

		/** Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods. */
		singleUtterance?: boolean | null;
	}

	/** Instructs the speech recognizer on how to process the audio content. */
	export interface GoogleCloudDialogflowCxV3InputAudioConfigFormProperties {

		/** Required. Audio encoding of the audio content to process. */
		audioEncoding: FormControl<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null | undefined>,

		/** Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information. */
		enableWordInfo: FormControl<boolean | null | undefined>,

		/** Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models). */
		model: FormControl<string | null | undefined>,

		/** Optional. Which variant of the Speech model to use. */
		modelVariant: FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>,

		/** Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details. */
		sampleRateHertz: FormControl<number | null | undefined>,

		/** Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods. */
		singleUtterance: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3InputAudioConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3InputAudioConfigFormProperties>({
			audioEncoding: new FormControl<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null | undefined>(undefined),
			enableWordInfo: new FormControl<boolean | null | undefined>(undefined),
			model: new FormControl<string | null | undefined>(undefined),
			modelVariant: new FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>(undefined),
			sampleRateHertz: new FormControl<number | null | undefined>(undefined),
			singleUtterance: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding { AUDIO_ENCODING_UNSPECIFIED = 0, AUDIO_ENCODING_LINEAR_16 = 1, AUDIO_ENCODING_FLAC = 2, AUDIO_ENCODING_MULAW = 3, AUDIO_ENCODING_AMR = 4, AUDIO_ENCODING_AMR_WB = 5, AUDIO_ENCODING_OGG_OPUS = 6, AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE = 7 }


	/** Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up. */
	export interface GoogleCloudDialogflowCxV3BargeInConfig {

		/** Duration that is not eligible for barge-in at the beginning of the input audio. */
		noBargeInDuration?: string | null;

		/** Total duration for the playback at the beginning of the input audio. */
		totalDuration?: string | null;
	}

	/** Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up. */
	export interface GoogleCloudDialogflowCxV3BargeInConfigFormProperties {

		/** Duration that is not eligible for barge-in at the beginning of the input audio. */
		noBargeInDuration: FormControl<string | null | undefined>,

		/** Total duration for the playback at the beginning of the input audio. */
		totalDuration: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3BargeInConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3BargeInConfigFormProperties>({
			noBargeInDuration: new FormControl<string | null | undefined>(undefined),
			totalDuration: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3InputAudioConfigModelVariant { SPEECH_MODEL_VARIANT_UNSPECIFIED = 0, USE_BEST_AVAILABLE = 1, USE_STANDARD = 2, USE_ENHANCED = 3 }


	/** Metadata returned for the TestCases.BatchRunTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3BatchRunTestCasesMetadata {

		/** The test errors. */
		errors?: Array<GoogleCloudDialogflowCxV3TestError>;
	}

	/** Metadata returned for the TestCases.BatchRunTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3BatchRunTestCasesMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3BatchRunTestCasesMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3BatchRunTestCasesMetadataFormProperties>({
		});

	}


	/** Error info for running a test. */
	export interface GoogleCloudDialogflowCxV3TestError {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		status?: GoogleRpcStatus;

		/** The test case resource name. */
		testCase?: string | null;

		/** The timestamp when the test was completed. */
		testTime?: string | null;
	}

	/** Error info for running a test. */
	export interface GoogleCloudDialogflowCxV3TestErrorFormProperties {

		/** The test case resource name. */
		testCase: FormControl<string | null | undefined>,

		/** The timestamp when the test was completed. */
		testTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TestErrorFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TestErrorFormProperties>({
			testCase: new FormControl<string | null | undefined>(undefined),
			testTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
	export interface GoogleRpcStatus {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code?: number | null;

		/** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
		details?: Array<string>;

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message?: string | null;
	}

	/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
	export interface GoogleRpcStatusFormProperties {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code: FormControl<number | null | undefined>,

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateGoogleRpcStatusFormGroup() {
		return new FormGroup<GoogleRpcStatusFormProperties>({
			code: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for TestCases.BatchRunTestCases. */
	export interface GoogleCloudDialogflowCxV3BatchRunTestCasesResponse {

		/** The test case results. The detailed conversation turns are empty in this response. */
		results?: Array<GoogleCloudDialogflowCxV3TestCaseResult>;
	}

	/** The response message for TestCases.BatchRunTestCases. */
	export interface GoogleCloudDialogflowCxV3BatchRunTestCasesResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3BatchRunTestCasesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3BatchRunTestCasesResponseFormProperties>({
		});

	}


	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3TestCaseResult {

		/** The conversation turns uttered during the test case replay in chronological order. */
		conversationTurns?: Array<GoogleCloudDialogflowCxV3ConversationTurn>;

		/** Environment where the test was run. If not set, it indicates the draft environment. */
		environment?: string | null;

		/** The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`. */
		name?: string | null;

		/** Whether the test case passed in the agent environment. */
		testResult?: GoogleCloudDialogflowCxV3TestCaseResultTestResult | null;

		/** The time that the test was run. */
		testTime?: string | null;
	}

	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3TestCaseResultFormProperties {

		/** Environment where the test was run. If not set, it indicates the draft environment. */
		environment: FormControl<string | null | undefined>,

		/** The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`. */
		name: FormControl<string | null | undefined>,

		/** Whether the test case passed in the agent environment. */
		testResult: FormControl<GoogleCloudDialogflowCxV3TestCaseResultTestResult | null | undefined>,

		/** The time that the test was run. */
		testTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TestCaseResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TestCaseResultFormProperties>({
			environment: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			testResult: new FormControl<GoogleCloudDialogflowCxV3TestCaseResultTestResult | null | undefined>(undefined),
			testTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** One interaction between a human and virtual agent. The human provides some input and the virtual agent provides a response. */
	export interface GoogleCloudDialogflowCxV3ConversationTurn {

		/** The input from the human user. */
		userInput?: GoogleCloudDialogflowCxV3ConversationTurnUserInput;

		/** The output from the virtual agent. */
		virtualAgentOutput?: GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput;
	}

	/** One interaction between a human and virtual agent. The human provides some input and the virtual agent provides a response. */
	export interface GoogleCloudDialogflowCxV3ConversationTurnFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ConversationTurnFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ConversationTurnFormProperties>({
		});

	}


	/** The input from the human user. */
	export interface GoogleCloudDialogflowCxV3ConversationTurnUserInput {

		/** Whether sentiment analysis is enabled. */
		enableSentimentAnalysis?: boolean | null;

		/** Parameters that need to be injected into the conversation during intent detection. */
		injectedParameters?: {[id: string]: any };

		/** Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client. */
		input?: GoogleCloudDialogflowCxV3QueryInput;

		/** If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled. */
		isWebhookEnabled?: boolean | null;
	}

	/** The input from the human user. */
	export interface GoogleCloudDialogflowCxV3ConversationTurnUserInputFormProperties {

		/** Whether sentiment analysis is enabled. */
		enableSentimentAnalysis: FormControl<boolean | null | undefined>,

		/** Parameters that need to be injected into the conversation during intent detection. */
		injectedParameters: FormControl<{[id: string]: any } | null | undefined>,

		/** If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled. */
		isWebhookEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ConversationTurnUserInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ConversationTurnUserInputFormProperties>({
			enableSentimentAnalysis: new FormControl<boolean | null | undefined>(undefined),
			injectedParameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			isWebhookEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client. */
	export interface GoogleCloudDialogflowCxV3QueryInput {

		/** Represents the natural speech audio to be processed. */
		audio?: GoogleCloudDialogflowCxV3AudioInput;

		/** Represents the input for dtmf event. */
		dtmf?: GoogleCloudDialogflowCxV3DtmfInput;

		/** Represents the event to trigger. */
		event?: GoogleCloudDialogflowCxV3EventInput;

		/** Represents the intent to trigger programmatically rather than as a result of natural language processing. */
		intent?: GoogleCloudDialogflowCxV3IntentInput;

		/** Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode?: string | null;

		/** Represents the natural language text to be processed. */
		text?: GoogleCloudDialogflowCxV3TextInput;
	}

	/** Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client. */
	export interface GoogleCloudDialogflowCxV3QueryInputFormProperties {

		/** Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3QueryInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3QueryInputFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the input for dtmf event. */
	export interface GoogleCloudDialogflowCxV3DtmfInput {

		/** The dtmf digits. */
		digits?: string | null;

		/** The finish digit (if any). */
		finishDigit?: string | null;
	}

	/** Represents the input for dtmf event. */
	export interface GoogleCloudDialogflowCxV3DtmfInputFormProperties {

		/** The dtmf digits. */
		digits: FormControl<string | null | undefined>,

		/** The finish digit (if any). */
		finishDigit: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3DtmfInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3DtmfInputFormProperties>({
			digits: new FormControl<string | null | undefined>(undefined),
			finishDigit: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the event to trigger. */
	export interface GoogleCloudDialogflowCxV3EventInput {

		/** Name of the event. */
		event?: string | null;
	}

	/** Represents the event to trigger. */
	export interface GoogleCloudDialogflowCxV3EventInputFormProperties {

		/** Name of the event. */
		event: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3EventInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3EventInputFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the intent to trigger programmatically rather than as a result of natural language processing. */
	export interface GoogleCloudDialogflowCxV3IntentInput {

		/** Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`. */
		intent?: string | null;
	}

	/** Represents the intent to trigger programmatically rather than as a result of natural language processing. */
	export interface GoogleCloudDialogflowCxV3IntentInputFormProperties {

		/** Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`. */
		intent: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3IntentInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3IntentInputFormProperties>({
			intent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the natural language text to be processed. */
	export interface GoogleCloudDialogflowCxV3TextInput {

		/** Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters. */
		text?: string | null;
	}

	/** Represents the natural language text to be processed. */
	export interface GoogleCloudDialogflowCxV3TextInputFormProperties {

		/** Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TextInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TextInputFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The output from the virtual agent. */
	export interface GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput {

		/** A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page). */
		currentPage?: GoogleCloudDialogflowCxV3Page;

		/** Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage. */
		diagnosticInfo?: {[id: string]: any };

		/** Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any. */
		differences?: Array<GoogleCloudDialogflowCxV3TestRunDifference>;

		/** The session parameters available to the bot at this point. */
		sessionParameters?: {[id: string]: any };

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		status?: GoogleRpcStatus;

		/** The text responses from the agent for the turn. */
		textResponses?: Array<GoogleCloudDialogflowCxV3ResponseMessageText>;

		/** An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent. */
		triggeredIntent?: GoogleCloudDialogflowCxV3Intent;
	}

	/** The output from the virtual agent. */
	export interface GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputFormProperties {

		/** Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage. */
		diagnosticInfo: FormControl<{[id: string]: any } | null | undefined>,

		/** The session parameters available to the bot at this point. */
		sessionParameters: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutputFormProperties>({
			diagnosticInfo: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			sessionParameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page). */
	export interface GoogleCloudDialogflowCxV3Page {

		/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
		advancedSettings?: GoogleCloudDialogflowCxV3AdvancedSettings;

		/** The description of the page. The maximum length is 500 characters. */
		description?: string | null;

		/** Required. The human-readable name of the page, unique within the flow. */
		displayName?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		entryFulfillment?: GoogleCloudDialogflowCxV3Fulfillment;

		/** Handlers associated with the page to handle events such as webhook errors, no match or no input. */
		eventHandlers?: Array<GoogleCloudDialogflowCxV3EventHandler>;

		/** A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session. */
		form?: GoogleCloudDialogflowCxV3Form;

		/** The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment. */
		knowledgeConnectorSettings?: GoogleCloudDialogflowCxV3KnowledgeConnectorSettings;

		/** The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`. */
		name?: string | null;

		/** Ordered list of `TransitionRouteGroups` added to the page. Transition route groups must be unique within a page. If the page links both flow-level transition route groups and agent-level transition route groups, the flow-level ones will have higher priority and will be put before the agent-level ones. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups. */
		transitionRouteGroups?: Array<string>;

		/** A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified. */
		transitionRoutes?: Array<GoogleCloudDialogflowCxV3TransitionRoute>;
	}

	/** A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page). */
	export interface GoogleCloudDialogflowCxV3PageFormProperties {

		/** The description of the page. The maximum length is 500 characters. */
		description: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the page, unique within the flow. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3PageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3PageFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
	export interface GoogleCloudDialogflowCxV3Fulfillment {

		/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
		advancedSettings?: GoogleCloudDialogflowCxV3AdvancedSettings;

		/** Conditional cases for this fulfillment. */
		conditionalCases?: Array<GoogleCloudDialogflowCxV3FulfillmentConditionalCases>;

		/** If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers. */
		enableGenerativeFallback?: boolean | null;

		/** The list of rich message responses to present to the user. */
		messages?: Array<GoogleCloudDialogflowCxV3ResponseMessage>;

		/** Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks. */
		returnPartialResponses?: boolean | null;

		/** Set parameter values before executing the webhook. */
		setParameterActions?: Array<GoogleCloudDialogflowCxV3FulfillmentSetParameterAction>;

		/** The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified. */
		tag?: string | null;

		/** The webhook to call. Format: `projects//locations//agents//webhooks/`. */
		webhook?: string | null;
	}

	/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
	export interface GoogleCloudDialogflowCxV3FulfillmentFormProperties {

		/** If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers. */
		enableGenerativeFallback: FormControl<boolean | null | undefined>,

		/** Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks. */
		returnPartialResponses: FormControl<boolean | null | undefined>,

		/** The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified. */
		tag: FormControl<string | null | undefined>,

		/** The webhook to call. Format: `projects//locations//agents//webhooks/`. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3FulfillmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FulfillmentFormProperties>({
			enableGenerativeFallback: new FormControl<boolean | null | undefined>(undefined),
			returnPartialResponses: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored. */
	export interface GoogleCloudDialogflowCxV3FulfillmentConditionalCases {

		/** A list of cascading if-else conditions. */
		cases?: Array<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase>;
	}

	/** A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored. */
	export interface GoogleCloudDialogflowCxV3FulfillmentConditionalCasesFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3FulfillmentConditionalCasesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesFormProperties>({
		});

	}


	/** Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively. */
	export interface GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase {

		/** A list of case content. */
		caseContent?: Array<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent>;

		/** The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). */
		condition?: string | null;
	}

	/** Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively. */
	export interface GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseFormProperties {

		/** The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). */
		condition: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseFormProperties>({
			condition: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The list of messages or conditional cases to activate for this case. */
	export interface GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent {

		/** A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored. */
		additionalCases?: GoogleCloudDialogflowCxV3FulfillmentConditionalCases;

		/** Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard. */
		message?: GoogleCloudDialogflowCxV3ResponseMessage;
	}

	/** The list of messages or conditional cases to activate for this case. */
	export interface GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContentFormProperties>({
		});

	}


	/** Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard. */
	export interface GoogleCloudDialogflowCxV3ResponseMessage {

		/** The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned. */
		channel?: string | null;

		/** Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue. */
		conversationSuccess?: GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess;

		/** Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user. */
		endInteraction?: GoogleCloudDialogflowCxV3ResponseMessageEndInteraction;

		/** Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped. */
		knowledgeInfoCard?: GoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCard;

		/** Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human. */
		liveAgentHandoff?: GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff;

		/** Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user. */
		mixedAudio?: GoogleCloudDialogflowCxV3ResponseMessageMixedAudio;

		/** A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message. */
		outputAudioText?: GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText;

		/** Returns a response containing a custom, platform-specific payload. */
		payload?: {[id: string]: any };

		/** Specifies an audio clip to be played by the client as part of the response. */
		playAudio?: GoogleCloudDialogflowCxV3ResponseMessagePlayAudio;

		/** Response type. */
		responseType?: GoogleCloudDialogflowCxV3ResponseMessageResponseType | null;

		/** Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint. */
		telephonyTransferCall?: GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall;

		/** The text response message. */
		text?: GoogleCloudDialogflowCxV3ResponseMessageText;
	}

	/** Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageFormProperties {

		/** The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned. */
		channel: FormControl<string | null | undefined>,

		/** Returns a response containing a custom, platform-specific payload. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** Response type. */
		responseType: FormControl<GoogleCloudDialogflowCxV3ResponseMessageResponseType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageFormProperties>({
			channel: new FormControl<string | null | undefined>(undefined),
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			responseType: new FormControl<GoogleCloudDialogflowCxV3ResponseMessageResponseType | null | undefined>(undefined),
		});

	}


	/** Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess {

		/** Custom metadata. Dialogflow doesn't impose any structure on this. */
		metadata?: {[id: string]: any };
	}

	/** Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageConversationSuccessFormProperties {

		/** Custom metadata. Dialogflow doesn't impose any structure on this. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageConversationSuccessFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageConversationSuccessFormProperties>({
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageEndInteraction {
	}

	/** Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageEndInteractionFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageEndInteractionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageEndInteractionFormProperties>({
		});

	}


	/** Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCard {
	}

	/** Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCardFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCardFormProperties>({
		});

	}


	/** Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff {

		/** Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this. */
		metadata?: {[id: string]: any };
	}

	/** Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoffFormProperties {

		/** Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoffFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoffFormProperties>({
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageMixedAudio {

		/** Segments this audio response is composed of. */
		segments?: Array<GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment>;
	}

	/** Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageMixedAudioFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageMixedAudioFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageMixedAudioFormProperties>({
		});

	}


	/** Represents one segment of audio. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment {

		/** Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request. */
		audio?: string | null;

		/** Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it. */
		uri?: string | null;
	}

	/** Represents one segment of audio. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegmentFormProperties {

		/** Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,

		/** Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request. */
		audio: FormControl<string | null | undefined>,

		/** Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegmentFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
			audio: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml). */
		ssml?: string | null;

		/** The raw text to be synthesized. */
		text?: string | null;
	}

	/** A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageOutputAudioTextFormProperties {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,

		/** The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml). */
		ssml: FormControl<string | null | undefined>,

		/** The raw text to be synthesized. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageOutputAudioTextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageOutputAudioTextFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
			ssml: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies an audio clip to be played by the client as part of the response. */
	export interface GoogleCloudDialogflowCxV3ResponseMessagePlayAudio {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it. */
		audioUri?: string | null;
	}

	/** Specifies an audio clip to be played by the client as part of the response. */
	export interface GoogleCloudDialogflowCxV3ResponseMessagePlayAudioFormProperties {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,

		/** Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it. */
		audioUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessagePlayAudioFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessagePlayAudioFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
			audioUri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3ResponseMessageResponseType { RESPONSE_TYPE_UNSPECIFIED = 0, ENTRY_PROMPT = 1, PARAMETER_PROMPT = 2, HANDLER_PROMPT = 3 }


	/** Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall {

		/** Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164). */
		phoneNumber?: string | null;
	}

	/** Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCallFormProperties {

		/** Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164). */
		phoneNumber: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCallFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCallFormProperties>({
			phoneNumber: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The text response message. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageText {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** Required. A collection of text responses. */
		text?: Array<string>;
	}

	/** The text response message. */
	export interface GoogleCloudDialogflowCxV3ResponseMessageTextFormProperties {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ResponseMessageTextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ResponseMessageTextFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Setting a parameter value. */
	export interface GoogleCloudDialogflowCxV3FulfillmentSetParameterAction {

		/** Display name of the parameter. */
		parameter?: string | null;

		/** The new value of the parameter. A null value clears the parameter. */
		value?: any;
	}

	/** Setting a parameter value. */
	export interface GoogleCloudDialogflowCxV3FulfillmentSetParameterActionFormProperties {

		/** Display name of the parameter. */
		parameter: FormControl<string | null | undefined>,

		/** The new value of the parameter. A null value clears the parameter. */
		value: FormControl<any | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3FulfillmentSetParameterActionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FulfillmentSetParameterActionFormProperties>({
			parameter: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<any | null | undefined>(undefined),
		});

	}


	/** An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3EventHandler {

		/** Required. The name of the event to handle. */
		event?: string | null;

		/** Output only. The unique identifier of this event handler. */
		name?: string | null;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		triggerFulfillment?: GoogleCloudDialogflowCxV3Fulfillment;
	}

	/** An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3EventHandlerFormProperties {

		/** Required. The name of the event to handle. */
		event: FormControl<string | null | undefined>,

		/** Output only. The unique identifier of this event handler. */
		name: FormControl<string | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3EventHandlerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3EventHandlerFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session. */
	export interface GoogleCloudDialogflowCxV3Form {

		/** Parameters to collect from the user. */
		parameters?: Array<GoogleCloudDialogflowCxV3FormParameter>;
	}

	/** A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session. */
	export interface GoogleCloudDialogflowCxV3FormFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3FormFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FormFormProperties>({
		});

	}


	/** Represents a form parameter. */
	export interface GoogleCloudDialogflowCxV3FormParameter {

		/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
		advancedSettings?: GoogleCloudDialogflowCxV3AdvancedSettings;

		/** The default value of an optional parameter. If the parameter is required, the default value will be ignored. */
		defaultValue?: any;

		/** Required. The human-readable name of the parameter, unique within the form. */
		displayName?: string | null;

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType?: string | null;

		/** Configuration for how the filling of a parameter should be handled. */
		fillBehavior?: GoogleCloudDialogflowCxV3FormParameterFillBehavior;

		/** Indicates whether the parameter represents a list of values. */
		isList?: boolean | null;

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact?: boolean | null;

		/** Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required?: boolean | null;
	}

	/** Represents a form parameter. */
	export interface GoogleCloudDialogflowCxV3FormParameterFormProperties {

		/** The default value of an optional parameter. If the parameter is required, the default value will be ignored. */
		defaultValue: FormControl<any | null | undefined>,

		/** Required. The human-readable name of the parameter, unique within the form. */
		displayName: FormControl<string | null | undefined>,

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType: FormControl<string | null | undefined>,

		/** Indicates whether the parameter represents a list of values. */
		isList: FormControl<boolean | null | undefined>,

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact: FormControl<boolean | null | undefined>,

		/** Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3FormParameterFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FormParameterFormProperties>({
			defaultValue: new FormControl<any | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			entityType: new FormControl<string | null | undefined>(undefined),
			isList: new FormControl<boolean | null | undefined>(undefined),
			redact: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration for how the filling of a parameter should be handled. */
	export interface GoogleCloudDialogflowCxV3FormParameterFillBehavior {

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		initialPromptFulfillment?: GoogleCloudDialogflowCxV3Fulfillment;

		/** The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted. */
		repromptEventHandlers?: Array<GoogleCloudDialogflowCxV3EventHandler>;
	}

	/** Configuration for how the filling of a parameter should be handled. */
	export interface GoogleCloudDialogflowCxV3FormParameterFillBehaviorFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3FormParameterFillBehaviorFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3FormParameterFillBehaviorFormProperties>({
		});

	}


	/** The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment. */
	export interface GoogleCloudDialogflowCxV3KnowledgeConnectorSettings {

		/** Optional. List of related data store connections. */
		dataStoreConnections?: Array<GoogleCloudDialogflowCxV3DataStoreConnection>;

		/** Whether Knowledge Connector is enabled or not. */
		enabled?: boolean | null;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		triggerFulfillment?: GoogleCloudDialogflowCxV3Fulfillment;
	}

	/** The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment. */
	export interface GoogleCloudDialogflowCxV3KnowledgeConnectorSettingsFormProperties {

		/** Whether Knowledge Connector is enabled or not. */
		enabled: FormControl<boolean | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3KnowledgeConnectorSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3KnowledgeConnectorSettingsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A data store connection. It represents a data store in Discovery Engine and the type of the contents it contains. */
	export interface GoogleCloudDialogflowCxV3DataStoreConnection {

		/** The full name of the referenced data store. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}` */
		dataStore?: string | null;

		/** The type of the connected data store. */
		dataStoreType?: GoogleCloudDialogflowCxV3DataStoreConnectionDataStoreType | null;
	}

	/** A data store connection. It represents a data store in Discovery Engine and the type of the contents it contains. */
	export interface GoogleCloudDialogflowCxV3DataStoreConnectionFormProperties {

		/** The full name of the referenced data store. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}` */
		dataStore: FormControl<string | null | undefined>,

		/** The type of the connected data store. */
		dataStoreType: FormControl<GoogleCloudDialogflowCxV3DataStoreConnectionDataStoreType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3DataStoreConnectionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3DataStoreConnectionFormProperties>({
			dataStore: new FormControl<string | null | undefined>(undefined),
			dataStoreType: new FormControl<GoogleCloudDialogflowCxV3DataStoreConnectionDataStoreType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3DataStoreConnectionDataStoreType { DATA_STORE_TYPE_UNSPECIFIED = 0, PUBLIC_WEB = 1, UNSTRUCTURED = 2, STRUCTURED = 3 }


	/** A transition route specifies a intent that can be matched and/or a data condition that can be evaluated during a session. When a specified transition is matched, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the transition, it will be called. * If there is a `target_page` associated with the transition, the session will transition into the specified page. * If there is a `target_flow` associated with the transition, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3TransitionRoute {

		/** The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		condition?: string | null;

		/** Optional. The description of the transition route. The maximum length is 500 characters. */
		description?: string | null;

		/** The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		intent?: string | null;

		/** Output only. The unique identifier of this transition route. */
		name?: string | null;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		triggerFulfillment?: GoogleCloudDialogflowCxV3Fulfillment;
	}

	/** A transition route specifies a intent that can be matched and/or a data condition that can be evaluated during a session. When a specified transition is matched, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the transition, it will be called. * If there is a `target_page` associated with the transition, the session will transition into the specified page. * If there is a `target_flow` associated with the transition, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3TransitionRouteFormProperties {

		/** The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		condition: FormControl<string | null | undefined>,

		/** Optional. The description of the transition route. The maximum length is 500 characters. */
		description: FormControl<string | null | undefined>,

		/** The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		intent: FormControl<string | null | undefined>,

		/** Output only. The unique identifier of this transition route. */
		name: FormControl<string | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TransitionRouteFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TransitionRouteFormProperties>({
			condition: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			intent: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The description of differences between original and replayed agent output. */
	export interface GoogleCloudDialogflowCxV3TestRunDifference {

		/** A human readable description of the diff, showing the actual output vs expected output. */
		description?: string | null;

		/** The type of diff. */
		type?: GoogleCloudDialogflowCxV3TestRunDifferenceType | null;
	}

	/** The description of differences between original and replayed agent output. */
	export interface GoogleCloudDialogflowCxV3TestRunDifferenceFormProperties {

		/** A human readable description of the diff, showing the actual output vs expected output. */
		description: FormControl<string | null | undefined>,

		/** The type of diff. */
		type: FormControl<GoogleCloudDialogflowCxV3TestRunDifferenceType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TestRunDifferenceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TestRunDifferenceFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GoogleCloudDialogflowCxV3TestRunDifferenceType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3TestRunDifferenceType { DIFF_TYPE_UNSPECIFIED = 0, INTENT = 1, PAGE = 2, PARAMETERS = 3, UTTERANCE = 4, FLOW = 5 }


	/** An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent. */
	export interface GoogleCloudDialogflowCxV3Intent {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description?: string | null;

		/** Required. The human-readable name of the intent, unique within the agent. */
		displayName?: string | null;

		/** Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event. */
		isFallback?: boolean | null;

		/** The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys.contextual" means the intent is a contextual intent. */
		labels?: {[id: string]: string };

		/** The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`. */
		name?: string | null;

		/** The collection of parameters associated with the intent. */
		parameters?: Array<GoogleCloudDialogflowCxV3IntentParameter>;

		/** The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority?: number | null;

		/** The collection of training phrases the agent is trained on to identify the intent. */
		trainingPhrases?: Array<GoogleCloudDialogflowCxV3IntentTrainingPhrase>;
	}

	/** An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent. */
	export interface GoogleCloudDialogflowCxV3IntentFormProperties {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the intent, unique within the agent. */
		displayName: FormControl<string | null | undefined>,

		/** Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event. */
		isFallback: FormControl<boolean | null | undefined>,

		/** The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys.contextual" means the intent is a contextual intent. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`. */
		name: FormControl<string | null | undefined>,

		/** The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3IntentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3IntentFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			isFallback: new FormControl<boolean | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents an intent parameter. */
	export interface GoogleCloudDialogflowCxV3IntentParameter {

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType?: string | null;

		/** Required. The unique identifier of the parameter. This field is used by training phrases to annotate their parts. */
		id?: string | null;

		/** Indicates whether the parameter represents a list of values. */
		isList?: boolean | null;

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact?: boolean | null;
	}

	/** Represents an intent parameter. */
	export interface GoogleCloudDialogflowCxV3IntentParameterFormProperties {

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType: FormControl<string | null | undefined>,

		/** Required. The unique identifier of the parameter. This field is used by training phrases to annotate their parts. */
		id: FormControl<string | null | undefined>,

		/** Indicates whether the parameter represents a list of values. */
		isList: FormControl<boolean | null | undefined>,

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3IntentParameterFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3IntentParameterFormProperties>({
			entityType: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			isList: new FormControl<boolean | null | undefined>(undefined),
			redact: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents an example that the agent is trained on to identify the intent. */
	export interface GoogleCloudDialogflowCxV3IntentTrainingPhrase {

		/** Output only. The unique identifier of the training phrase. */
		id?: string | null;

		/** Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `parameter_id` field is set. */
		parts?: Array<GoogleCloudDialogflowCxV3IntentTrainingPhrasePart>;

		/** Indicates how many times this example was added to the intent. */
		repeatCount?: number | null;
	}

	/** Represents an example that the agent is trained on to identify the intent. */
	export interface GoogleCloudDialogflowCxV3IntentTrainingPhraseFormProperties {

		/** Output only. The unique identifier of the training phrase. */
		id: FormControl<string | null | undefined>,

		/** Indicates how many times this example was added to the intent. */
		repeatCount: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3IntentTrainingPhraseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3IntentTrainingPhraseFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			repeatCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowCxV3IntentTrainingPhrasePart {

		/** The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase. */
		parameterId?: string | null;

		/** Required. The text for this part. */
		text?: string | null;
	}

	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowCxV3IntentTrainingPhrasePartFormProperties {

		/** The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase. */
		parameterId: FormControl<string | null | undefined>,

		/** Required. The text for this part. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3IntentTrainingPhrasePartFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3IntentTrainingPhrasePartFormProperties>({
			parameterId: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3TestCaseResultTestResult { TEST_RESULT_UNSPECIFIED = 0, PASSED = 1, FAILED = 2 }


	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3ContinuousTestResult {

		/** The resource name for the continuous test result. Format: `projects//locations//agents//environments//continuousTestResults/`. */
		name?: string | null;

		/** The result of this continuous test run, i.e. whether all the tests in this continuous test run pass or not. */
		result?: GoogleCloudDialogflowCxV3ContinuousTestResultResult | null;

		/** Time when the continuous testing run starts. */
		runTime?: string | null;

		/** A list of individual test case results names in this continuous test run. */
		testCaseResults?: Array<string>;
	}

	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3ContinuousTestResultFormProperties {

		/** The resource name for the continuous test result. Format: `projects//locations//agents//environments//continuousTestResults/`. */
		name: FormControl<string | null | undefined>,

		/** The result of this continuous test run, i.e. whether all the tests in this continuous test run pass or not. */
		result: FormControl<GoogleCloudDialogflowCxV3ContinuousTestResultResult | null | undefined>,

		/** Time when the continuous testing run starts. */
		runTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ContinuousTestResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ContinuousTestResultFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			result: new FormControl<GoogleCloudDialogflowCxV3ContinuousTestResultResult | null | undefined>(undefined),
			runTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3ContinuousTestResultResult { AGGREGATED_TEST_RESULT_UNSPECIFIED = 0, PASSED = 1, FAILED = 2 }


	/** This message is used to hold all the Conversation Signals data, which will be converted to JSON and exported to BigQuery. */
	export interface GoogleCloudDialogflowCxV3ConversationSignals {

		/** Collection of all signals that were extracted for a single turn of the conversation. */
		turnSignals?: GoogleCloudDialogflowCxV3TurnSignals;
	}

	/** This message is used to hold all the Conversation Signals data, which will be converted to JSON and exported to BigQuery. */
	export interface GoogleCloudDialogflowCxV3ConversationSignalsFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ConversationSignalsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ConversationSignalsFormProperties>({
		});

	}


	/** Collection of all signals that were extracted for a single turn of the conversation. */
	export interface GoogleCloudDialogflowCxV3TurnSignals {

		/** Whether agent responded with LiveAgentHandoff fulfillment. */
		agentEscalated?: boolean | null;

		/** Whether user was using DTMF input. */
		dtmfUsed?: boolean | null;

		/** Failure reasons of the turn. */
		failureReasons?: Array<string>;

		/** Whether NLU predicted NO_MATCH. */
		noMatch?: boolean | null;

		/** Whether user provided no input. */
		noUserInput?: boolean | null;

		/** Whether turn resulted in End Session page. */
		reachedEndPage?: boolean | null;

		/** Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentMagnitude?: number | null;

		/** Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentScore?: number | null;

		/** Whether user was specifically asking for a live agent. */
		userEscalated?: boolean | null;

		/** Human-readable statuses of the webhooks triggered during this turn. */
		webhookStatuses?: Array<string>;
	}

	/** Collection of all signals that were extracted for a single turn of the conversation. */
	export interface GoogleCloudDialogflowCxV3TurnSignalsFormProperties {

		/** Whether agent responded with LiveAgentHandoff fulfillment. */
		agentEscalated: FormControl<boolean | null | undefined>,

		/** Whether user was using DTMF input. */
		dtmfUsed: FormControl<boolean | null | undefined>,

		/** Whether NLU predicted NO_MATCH. */
		noMatch: FormControl<boolean | null | undefined>,

		/** Whether user provided no input. */
		noUserInput: FormControl<boolean | null | undefined>,

		/** Whether turn resulted in End Session page. */
		reachedEndPage: FormControl<boolean | null | undefined>,

		/** Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentMagnitude: FormControl<number | null | undefined>,

		/** Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentScore: FormControl<number | null | undefined>,

		/** Whether user was specifically asking for a live agent. */
		userEscalated: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TurnSignalsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TurnSignalsFormProperties>({
			agentEscalated: new FormControl<boolean | null | undefined>(undefined),
			dtmfUsed: new FormControl<boolean | null | undefined>(undefined),
			noMatch: new FormControl<boolean | null | undefined>(undefined),
			noUserInput: new FormControl<boolean | null | undefined>(undefined),
			reachedEndPage: new FormControl<boolean | null | undefined>(undefined),
			sentimentMagnitude: new FormControl<number | null | undefined>(undefined),
			sentimentScore: new FormControl<number | null | undefined>(undefined),
			userEscalated: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Metadata for CreateDocument operation. */
	export interface GoogleCloudDialogflowCxV3CreateDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata;
	}

	/** Metadata for CreateDocument operation. */
	export interface GoogleCloudDialogflowCxV3CreateDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3CreateDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3CreateDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata {

		/** Required. Output only. The current state of this operation. */
		state?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null;
	}

	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataFormProperties {

		/** Required. Output only. The current state of this operation. */
		state: FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataFormProperties>({
			state: new FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState { STATE_UNSPECIFIED = 0, PENDING = 1, RUNNING = 2, DONE = 3 }


	/** Metadata associated with the long running operation for Versions.CreateVersion. */
	export interface GoogleCloudDialogflowCxV3CreateVersionOperationMetadata {

		/** Name of the created version. Format: `projects//locations//agents//flows//versions/`. */
		version?: string | null;
	}

	/** Metadata associated with the long running operation for Versions.CreateVersion. */
	export interface GoogleCloudDialogflowCxV3CreateVersionOperationMetadataFormProperties {

		/** Name of the created version. Format: `projects//locations//agents//flows//versions/`. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3CreateVersionOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3CreateVersionOperationMetadataFormProperties>({
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for DeleteDocument operation. */
	export interface GoogleCloudDialogflowCxV3DeleteDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata;
	}

	/** Metadata for DeleteDocument operation. */
	export interface GoogleCloudDialogflowCxV3DeleteDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3DeleteDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3DeleteDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata returned for the Environments.DeployFlow long running operation. */
	export interface GoogleCloudDialogflowCxV3DeployFlowMetadata {

		/** Errors of running deployment tests. */
		testErrors?: Array<GoogleCloudDialogflowCxV3TestError>;
	}

	/** Metadata returned for the Environments.DeployFlow long running operation. */
	export interface GoogleCloudDialogflowCxV3DeployFlowMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3DeployFlowMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3DeployFlowMetadataFormProperties>({
		});

	}


	/** The response message for Environments.DeployFlow. */
	export interface GoogleCloudDialogflowCxV3DeployFlowResponse {

		/** The name of the flow version Deployment. Format: `projects//locations//agents// environments//deployments/`. */
		deployment?: string | null;

		/** Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc. */
		environment?: GoogleCloudDialogflowCxV3Environment;
	}

	/** The response message for Environments.DeployFlow. */
	export interface GoogleCloudDialogflowCxV3DeployFlowResponseFormProperties {

		/** The name of the flow version Deployment. Format: `projects//locations//agents// environments//deployments/`. */
		deployment: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3DeployFlowResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3DeployFlowResponseFormProperties>({
			deployment: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc. */
	export interface GoogleCloudDialogflowCxV3Environment {

		/** The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description?: string | null;

		/** Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters. */
		displayName?: string | null;

		/** The name of the environment. Format: `projects//locations//agents//environments/`. */
		name?: string | null;

		/** The configuration for continuous tests. */
		testCasesConfig?: GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig;

		/** Output only. Update time of this environment. */
		updateTime?: string | null;

		/** A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned. */
		versionConfigs?: Array<GoogleCloudDialogflowCxV3EnvironmentVersionConfig>;

		/** Configuration for webhooks. */
		webhookConfig?: GoogleCloudDialogflowCxV3EnvironmentWebhookConfig;
	}

	/** Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc. */
	export interface GoogleCloudDialogflowCxV3EnvironmentFormProperties {

		/** The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters. */
		displayName: FormControl<string | null | undefined>,

		/** The name of the environment. Format: `projects//locations//agents//environments/`. */
		name: FormControl<string | null | undefined>,

		/** Output only. Update time of this environment. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3EnvironmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3EnvironmentFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration for continuous tests. */
	export interface GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig {

		/** Whether to run test cases in TestCasesConfig.test_cases periodically. Default false. If set to true, run once a day. */
		enableContinuousRun?: boolean | null;

		/** Whether to run test cases in TestCasesConfig.test_cases before deploying a flow version to the environment. Default false. */
		enablePredeploymentRun?: boolean | null;

		/** A list of test case names to run. They should be under the same agent. Format of each test case name: `projects//locations/ /agents//testCases/` */
		testCases?: Array<string>;
	}

	/** The configuration for continuous tests. */
	export interface GoogleCloudDialogflowCxV3EnvironmentTestCasesConfigFormProperties {

		/** Whether to run test cases in TestCasesConfig.test_cases periodically. Default false. If set to true, run once a day. */
		enableContinuousRun: FormControl<boolean | null | undefined>,

		/** Whether to run test cases in TestCasesConfig.test_cases before deploying a flow version to the environment. Default false. */
		enablePredeploymentRun: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3EnvironmentTestCasesConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3EnvironmentTestCasesConfigFormProperties>({
			enableContinuousRun: new FormControl<boolean | null | undefined>(undefined),
			enablePredeploymentRun: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration for the version. */
	export interface GoogleCloudDialogflowCxV3EnvironmentVersionConfig {

		/** Required. Format: projects//locations//agents//flows//versions/. */
		version?: string | null;
	}

	/** Configuration for the version. */
	export interface GoogleCloudDialogflowCxV3EnvironmentVersionConfigFormProperties {

		/** Required. Format: projects//locations//agents//flows//versions/. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3EnvironmentVersionConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3EnvironmentVersionConfigFormProperties>({
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration for webhooks. */
	export interface GoogleCloudDialogflowCxV3EnvironmentWebhookConfig {

		/** The list of webhooks to override for the agent environment. The webhook must exist in the agent. You can override fields in `generic_web_service` and `service_directory`. */
		webhookOverrides?: Array<GoogleCloudDialogflowCxV3Webhook>;
	}

	/** Configuration for webhooks. */
	export interface GoogleCloudDialogflowCxV3EnvironmentWebhookConfigFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3EnvironmentWebhookConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3EnvironmentWebhookConfigFormProperties>({
		});

	}


	/** Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend. */
	export interface GoogleCloudDialogflowCxV3Webhook {

		/** Indicates whether the webhook is disabled. */
		disabled?: boolean | null;

		/** Required. The human-readable name of the webhook, unique within the agent. */
		displayName?: string | null;

		/** Represents configuration for a generic web service. */
		genericWebService?: GoogleCloudDialogflowCxV3WebhookGenericWebService;

		/** The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`. */
		name?: string | null;

		/** Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service. */
		serviceDirectory?: GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig;

		/** Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds. */
		timeout?: string | null;
	}

	/** Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend. */
	export interface GoogleCloudDialogflowCxV3WebhookFormProperties {

		/** Indicates whether the webhook is disabled. */
		disabled: FormControl<boolean | null | undefined>,

		/** Required. The human-readable name of the webhook, unique within the agent. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`. */
		name: FormControl<string | null | undefined>,

		/** Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds. */
		timeout: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookFormProperties>({
			disabled: new FormControl<boolean | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			timeout: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents configuration for a generic web service. */
	export interface GoogleCloudDialogflowCxV3WebhookGenericWebService {

		/** Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with "subject alt name". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \ -signkey example.com.key \ -out example.com.crt \ -extfile <(printf "\nsubjectAltName='DNS:www.example.com'") ``` */
		allowedCaCerts?: Array<string>;

		/** Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST. */
		httpMethod?: GoogleCloudDialogflowCxV3WebhookGenericWebServiceHttpMethod | null;

		/** Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response */
		parameterMapping?: {[id: string]: string };

		/** The password for HTTP Basic authentication. */
		password?: string | null;

		/** Optional. Defines a custom JSON object as request body to send to flexible webhook. */
		requestBody?: string | null;

		/** The HTTP request headers to send together with webhook requests. */
		requestHeaders?: {[id: string]: string };

		/** Required. The webhook URI for receiving POST requests. It must use https protocol. */
		uri?: string | null;

		/** The user name for HTTP Basic authentication. */
		username?: string | null;

		/** Optional. Type of the webhook. */
		webhookType?: GoogleCloudDialogflowCxV3WebhookGenericWebServiceWebhookType | null;
	}

	/** Represents configuration for a generic web service. */
	export interface GoogleCloudDialogflowCxV3WebhookGenericWebServiceFormProperties {

		/** Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST. */
		httpMethod: FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceHttpMethod | null | undefined>,

		/** Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response */
		parameterMapping: FormControl<{[id: string]: string } | null | undefined>,

		/** The password for HTTP Basic authentication. */
		password: FormControl<string | null | undefined>,

		/** Optional. Defines a custom JSON object as request body to send to flexible webhook. */
		requestBody: FormControl<string | null | undefined>,

		/** The HTTP request headers to send together with webhook requests. */
		requestHeaders: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. The webhook URI for receiving POST requests. It must use https protocol. */
		uri: FormControl<string | null | undefined>,

		/** The user name for HTTP Basic authentication. */
		username: FormControl<string | null | undefined>,

		/** Optional. Type of the webhook. */
		webhookType: FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceWebhookType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookGenericWebServiceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookGenericWebServiceFormProperties>({
			httpMethod: new FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceHttpMethod | null | undefined>(undefined),
			parameterMapping: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			requestBody: new FormControl<string | null | undefined>(undefined),
			requestHeaders: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
			username: new FormControl<string | null | undefined>(undefined),
			webhookType: new FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceWebhookType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3WebhookGenericWebServiceHttpMethod { HTTP_METHOD_UNSPECIFIED = 0, POST = 1, GET = 2, HEAD = 3, PUT = 4, DELETE = 5, PATCH = 6, OPTIONS = 7 }

	export enum GoogleCloudDialogflowCxV3WebhookGenericWebServiceWebhookType { WEBHOOK_TYPE_UNSPECIFIED = 0, STANDARD = 1, FLEXIBLE = 2 }


	/** Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service. */
	export interface GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig {

		/** Represents configuration for a generic web service. */
		genericWebService?: GoogleCloudDialogflowCxV3WebhookGenericWebService;

		/** Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent. */
		service?: string | null;
	}

	/** Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service. */
	export interface GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfigFormProperties {

		/** Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookServiceDirectoryConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfigFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowCxV3ExportAgentResponse {

		/** Uncompressed raw byte content for agent. This field is populated if none of `agent_uri` and `git_destination` are specified in ExportAgentRequest. */
		agentContent?: string | null;

		/** The URI to a file containing the exported agent. This field is populated if `agent_uri` is specified in ExportAgentRequest. */
		agentUri?: string | null;

		/** Commit SHA of the git push. This field is populated if `git_destination` is specified in ExportAgentRequest. */
		commitSha?: string | null;
	}

	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowCxV3ExportAgentResponseFormProperties {

		/** Uncompressed raw byte content for agent. This field is populated if none of `agent_uri` and `git_destination` are specified in ExportAgentRequest. */
		agentContent: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported agent. This field is populated if `agent_uri` is specified in ExportAgentRequest. */
		agentUri: FormControl<string | null | undefined>,

		/** Commit SHA of the git push. This field is populated if `git_destination` is specified in ExportAgentRequest. */
		commitSha: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ExportAgentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ExportAgentResponseFormProperties>({
			agentContent: new FormControl<string | null | undefined>(undefined),
			agentUri: new FormControl<string | null | undefined>(undefined),
			commitSha: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Flows.ExportFlow. */
	export interface GoogleCloudDialogflowCxV3ExportFlowResponse {

		/** Uncompressed raw byte content for flow. */
		flowContent?: string | null;

		/** The URI to a file containing the exported flow. This field is populated only if `flow_uri` is specified in ExportFlowRequest. */
		flowUri?: string | null;
	}

	/** The response message for Flows.ExportFlow. */
	export interface GoogleCloudDialogflowCxV3ExportFlowResponseFormProperties {

		/** Uncompressed raw byte content for flow. */
		flowContent: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported flow. This field is populated only if `flow_uri` is specified in ExportFlowRequest. */
		flowUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ExportFlowResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ExportFlowResponseFormProperties>({
			flowContent: new FormControl<string | null | undefined>(undefined),
			flowUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata returned for the Intents.ExportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3ExportIntentsMetadata {
	}

	/** Metadata returned for the Intents.ExportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3ExportIntentsMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ExportIntentsMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ExportIntentsMetadataFormProperties>({
		});

	}


	/** The response message for Intents.ExportIntents. */
	export interface GoogleCloudDialogflowCxV3ExportIntentsResponse {

		/** Inline destination for a Dialogflow operation that writes or exports objects (e.g. intents) outside of Dialogflow. */
		intentsContent?: GoogleCloudDialogflowCxV3InlineDestination;

		/** The URI to a file containing the exported intents. This field is populated only if `intents_uri` is specified in ExportIntentsRequest. */
		intentsUri?: string | null;
	}

	/** The response message for Intents.ExportIntents. */
	export interface GoogleCloudDialogflowCxV3ExportIntentsResponseFormProperties {

		/** The URI to a file containing the exported intents. This field is populated only if `intents_uri` is specified in ExportIntentsRequest. */
		intentsUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ExportIntentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ExportIntentsResponseFormProperties>({
			intentsUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Inline destination for a Dialogflow operation that writes or exports objects (e.g. intents) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3InlineDestination {

		/** Output only. The uncompressed byte content for the objects. Only populated in responses. */
		content?: string | null;
	}

	/** Inline destination for a Dialogflow operation that writes or exports objects (e.g. intents) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3InlineDestinationFormProperties {

		/** Output only. The uncompressed byte content for the objects. Only populated in responses. */
		content: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3InlineDestinationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3InlineDestinationFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata returned for the TestCases.ExportTestCases long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3ExportTestCasesMetadata {
	}

	/** Metadata returned for the TestCases.ExportTestCases long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3ExportTestCasesMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ExportTestCasesMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ExportTestCasesMetadataFormProperties>({
		});

	}


	/** The response message for TestCases.ExportTestCases. */
	export interface GoogleCloudDialogflowCxV3ExportTestCasesResponse {

		/** Uncompressed raw byte content for test cases. */
		content?: string | null;

		/** The URI to a file containing the exported test cases. This field is populated only if `gcs_uri` is specified in ExportTestCasesRequest. */
		gcsUri?: string | null;
	}

	/** The response message for TestCases.ExportTestCases. */
	export interface GoogleCloudDialogflowCxV3ExportTestCasesResponseFormProperties {

		/** Uncompressed raw byte content for test cases. */
		content: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported test cases. This field is populated only if `gcs_uri` is specified in ExportTestCasesRequest. */
		gcsUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ExportTestCasesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ExportTestCasesResponseFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			gcsUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for ImportDocuments operation. */
	export interface GoogleCloudDialogflowCxV3ImportDocumentsOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata;
	}

	/** Metadata for ImportDocuments operation. */
	export interface GoogleCloudDialogflowCxV3ImportDocumentsOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ImportDocumentsOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportDocumentsOperationMetadataFormProperties>({
		});

	}


	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowCxV3ImportDocumentsResponse {

		/** Includes details about skipped documents or any other warnings. */
		warnings?: Array<GoogleRpcStatus>;
	}

	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowCxV3ImportDocumentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ImportDocumentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportDocumentsResponseFormProperties>({
		});

	}


	/** The response message for Flows.ImportFlow. */
	export interface GoogleCloudDialogflowCxV3ImportFlowResponse {

		/** The unique identifier of the new flow. Format: `projects//locations//agents//flows/`. */
		flow?: string | null;
	}

	/** The response message for Flows.ImportFlow. */
	export interface GoogleCloudDialogflowCxV3ImportFlowResponseFormProperties {

		/** The unique identifier of the new flow. Format: `projects//locations//agents//flows/`. */
		flow: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3ImportFlowResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportFlowResponseFormProperties>({
			flow: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata returned for the Intents.ImportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3ImportIntentsMetadata {
	}

	/** Metadata returned for the Intents.ImportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3ImportIntentsMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ImportIntentsMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportIntentsMetadataFormProperties>({
		});

	}


	/** The response message for Intents.ImportIntents. */
	export interface GoogleCloudDialogflowCxV3ImportIntentsResponse {

		/** Conflicting resources detected during the import process. Only filled when REPORT_CONFLICT is set in the request and there are conflicts in the display names. */
		conflictingResources?: GoogleCloudDialogflowCxV3ImportIntentsResponseConflictingResources;

		/** The unique identifier of the imported intents. Format: `projects//locations//agents//intents/`. */
		intents?: Array<string>;
	}

	/** The response message for Intents.ImportIntents. */
	export interface GoogleCloudDialogflowCxV3ImportIntentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ImportIntentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportIntentsResponseFormProperties>({
		});

	}


	/** Conflicting resources detected during the import process. Only filled when REPORT_CONFLICT is set in the request and there are conflicts in the display names. */
	export interface GoogleCloudDialogflowCxV3ImportIntentsResponseConflictingResources {

		/** Display names of conflicting entities. */
		entityDisplayNames?: Array<string>;

		/** Display names of conflicting intents. */
		intentDisplayNames?: Array<string>;
	}

	/** Conflicting resources detected during the import process. Only filled when REPORT_CONFLICT is set in the request and there are conflicts in the display names. */
	export interface GoogleCloudDialogflowCxV3ImportIntentsResponseConflictingResourcesFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ImportIntentsResponseConflictingResourcesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportIntentsResponseConflictingResourcesFormProperties>({
		});

	}


	/** Metadata returned for the TestCases.ImportTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3ImportTestCasesMetadata {

		/** Errors for failed test cases. */
		errors?: Array<GoogleCloudDialogflowCxV3TestCaseError>;
	}

	/** Metadata returned for the TestCases.ImportTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3ImportTestCasesMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ImportTestCasesMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportTestCasesMetadataFormProperties>({
		});

	}


	/** Error info for importing a test. */
	export interface GoogleCloudDialogflowCxV3TestCaseError {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		status?: GoogleRpcStatus;

		/** Represents a test case. */
		testCase?: GoogleCloudDialogflowCxV3TestCase;
	}

	/** Error info for importing a test. */
	export interface GoogleCloudDialogflowCxV3TestCaseErrorFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3TestCaseErrorFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TestCaseErrorFormProperties>({
		});

	}


	/** Represents a test case. */
	export interface GoogleCloudDialogflowCxV3TestCase {

		/** Output only. When the test was created. */
		creationTime?: string | null;

		/** Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters. */
		displayName?: string | null;

		/** Represents a result from running a test case in an agent environment. */
		lastTestResult?: GoogleCloudDialogflowCxV3TestCaseResult;

		/** The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`. */
		name?: string | null;

		/** Additional freeform notes about the test case. Limit of 400 characters. */
		notes?: string | null;

		/** Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters. */
		tags?: Array<string>;

		/** The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly. */
		testCaseConversationTurns?: Array<GoogleCloudDialogflowCxV3ConversationTurn>;

		/** Represents configurations for a test case. */
		testConfig?: GoogleCloudDialogflowCxV3TestConfig;
	}

	/** Represents a test case. */
	export interface GoogleCloudDialogflowCxV3TestCaseFormProperties {

		/** Output only. When the test was created. */
		creationTime: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`. */
		name: FormControl<string | null | undefined>,

		/** Additional freeform notes about the test case. Limit of 400 characters. */
		notes: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TestCaseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TestCaseFormProperties>({
			creationTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			notes: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents configurations for a test case. */
	export interface GoogleCloudDialogflowCxV3TestConfig {

		/** Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		flow?: string | null;

		/** The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		page?: string | null;

		/** Session parameters to be compared when calculating differences. */
		trackingParameters?: Array<string>;
	}

	/** Represents configurations for a test case. */
	export interface GoogleCloudDialogflowCxV3TestConfigFormProperties {

		/** Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		flow: FormControl<string | null | undefined>,

		/** The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		page: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3TestConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3TestConfigFormProperties>({
			flow: new FormControl<string | null | undefined>(undefined),
			page: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for TestCases.ImportTestCases. */
	export interface GoogleCloudDialogflowCxV3ImportTestCasesResponse {

		/** The unique identifiers of the new test cases. Format: `projects//locations//agents//testCases/`. */
		names?: Array<string>;
	}

	/** The response message for TestCases.ImportTestCases. */
	export interface GoogleCloudDialogflowCxV3ImportTestCasesResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ImportTestCasesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ImportTestCasesResponseFormProperties>({
		});

	}


	/** Represents page information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3PageInfo {

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the current page. Format: `projects//locations//agents//flows//pages/`. */
		currentPage?: string | null;

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The display name of the current page. */
		displayName?: string | null;

		/** Represents form information. */
		formInfo?: GoogleCloudDialogflowCxV3PageInfoFormInfo;
	}

	/** Represents page information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3PageInfoFormProperties {

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the current page. Format: `projects//locations//agents//flows//pages/`. */
		currentPage: FormControl<string | null | undefined>,

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The display name of the current page. */
		displayName: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3PageInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3PageInfoFormProperties>({
			currentPage: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents form information. */
	export interface GoogleCloudDialogflowCxV3PageInfoFormInfo {

		/** Optional for both WebhookRequest and WebhookResponse. The parameters contained in the form. Note that the webhook cannot add or remove any form parameter. */
		parameterInfo?: Array<GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfo>;
	}

	/** Represents form information. */
	export interface GoogleCloudDialogflowCxV3PageInfoFormInfoFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3PageInfoFormInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3PageInfoFormInfoFormProperties>({
		});

	}


	/** Represents parameter information. */
	export interface GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfo {

		/** Always present for WebhookRequest. Required for WebhookResponse. The human-readable name of the parameter, unique within the form. This field cannot be modified by the webhook. */
		displayName?: string | null;

		/** Optional for WebhookRequest. Ignored for WebhookResponse. Indicates if the parameter value was just collected on the last conversation turn. */
		justCollected?: boolean | null;

		/** Optional for both WebhookRequest and WebhookResponse. Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required?: boolean | null;

		/** Always present for WebhookRequest. Required for WebhookResponse. The state of the parameter. This field can be set to INVALID by the webhook to invalidate the parameter; other values set by the webhook will be ignored. */
		state?: GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoState | null;

		/** Optional for both WebhookRequest and WebhookResponse. The value of the parameter. This field can be set by the webhook to change the parameter value. */
		value?: any;
	}

	/** Represents parameter information. */
	export interface GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoFormProperties {

		/** Always present for WebhookRequest. Required for WebhookResponse. The human-readable name of the parameter, unique within the form. This field cannot be modified by the webhook. */
		displayName: FormControl<string | null | undefined>,

		/** Optional for WebhookRequest. Ignored for WebhookResponse. Indicates if the parameter value was just collected on the last conversation turn. */
		justCollected: FormControl<boolean | null | undefined>,

		/** Optional for both WebhookRequest and WebhookResponse. Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required: FormControl<boolean | null | undefined>,

		/** Always present for WebhookRequest. Required for WebhookResponse. The state of the parameter. This field can be set to INVALID by the webhook to invalidate the parameter; other values set by the webhook will be ignored. */
		state: FormControl<GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoState | null | undefined>,

		/** Optional for both WebhookRequest and WebhookResponse. The value of the parameter. This field can be set by the webhook to change the parameter value. */
		value: FormControl<any | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			justCollected: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoState | null | undefined>(undefined),
			value: new FormControl<any | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoState { PARAMETER_STATE_UNSPECIFIED = 0, EMPTY = 1, INVALID = 2, FILLED = 3 }


	/** Metadata for ReloadDocument operation. */
	export interface GoogleCloudDialogflowCxV3ReloadDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata;
	}

	/** Metadata for ReloadDocument operation. */
	export interface GoogleCloudDialogflowCxV3ReloadDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3ReloadDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3ReloadDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata returned for the Environments.RunContinuousTest long running operation. */
	export interface GoogleCloudDialogflowCxV3RunContinuousTestMetadata {

		/** The test errors. */
		errors?: Array<GoogleCloudDialogflowCxV3TestError>;
	}

	/** Metadata returned for the Environments.RunContinuousTest long running operation. */
	export interface GoogleCloudDialogflowCxV3RunContinuousTestMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3RunContinuousTestMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3RunContinuousTestMetadataFormProperties>({
		});

	}


	/** The response message for Environments.RunContinuousTest. */
	export interface GoogleCloudDialogflowCxV3RunContinuousTestResponse {

		/** Represents a result from running a test case in an agent environment. */
		continuousTestResult?: GoogleCloudDialogflowCxV3ContinuousTestResult;
	}

	/** The response message for Environments.RunContinuousTest. */
	export interface GoogleCloudDialogflowCxV3RunContinuousTestResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3RunContinuousTestResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3RunContinuousTestResponseFormProperties>({
		});

	}


	/** Metadata returned for the TestCases.RunTestCase long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3RunTestCaseMetadata {
	}

	/** Metadata returned for the TestCases.RunTestCase long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3RunTestCaseMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3RunTestCaseMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3RunTestCaseMetadataFormProperties>({
		});

	}


	/** The response message for TestCases.RunTestCase. */
	export interface GoogleCloudDialogflowCxV3RunTestCaseResponse {

		/** Represents a result from running a test case in an agent environment. */
		result?: GoogleCloudDialogflowCxV3TestCaseResult;
	}

	/** The response message for TestCases.RunTestCase. */
	export interface GoogleCloudDialogflowCxV3RunTestCaseResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3RunTestCaseResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3RunTestCaseResponseFormProperties>({
		});

	}


	/** Represents session information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3SessionInfo {

		/** Optional for WebhookRequest. Optional for WebhookResponse. All parameters collected from forms and intents during the session. Parameters can be created, updated, or removed by the webhook. To remove a parameter from the session, the webhook should explicitly set the parameter value to null in WebhookResponse. The map is keyed by parameters' display names. */
		parameters?: {[id: string]: any };

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the session. This field can be used by the webhook to identify a session. Format: `projects//locations//agents//sessions/` or `projects//locations//agents//environments//sessions/` if environment is specified. */
		session?: string | null;
	}

	/** Represents session information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3SessionInfoFormProperties {

		/** Optional for WebhookRequest. Optional for WebhookResponse. All parameters collected from forms and intents during the session. Parameters can be created, updated, or removed by the webhook. To remove a parameter from the session, the webhook should explicitly set the parameter value to null in WebhookResponse. The map is keyed by parameters' display names. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the session. This field can be used by the webhook to identify a session. Format: `projects//locations//agents//sessions/` or `projects//locations//agents//environments//sessions/` if environment is specified. */
		session: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3SessionInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3SessionInfoFormProperties>({
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			session: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for UpdateDocument operation. */
	export interface GoogleCloudDialogflowCxV3UpdateDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata;
	}

	/** Metadata for UpdateDocument operation. */
	export interface GoogleCloudDialogflowCxV3UpdateDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3UpdateDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3UpdateDocumentOperationMetadataFormProperties>({
		});

	}


	/** The request message for a webhook call. The request is sent as a JSON object and the field names will be presented in camel cases. You may see undocumented fields in an actual request. These fields are used internally by Dialogflow and should be ignored. */
	export interface GoogleCloudDialogflowCxV3WebhookRequest {

		/** Always present. The unique identifier of the DetectIntentResponse that will be returned to the API caller. */
		detectIntentResponseId?: string | null;

		/** If DTMF was provided as input, this field will contain the DTMF digits. */
		dtmfDigits?: string | null;

		/** Represents fulfillment information communicated to the webhook. */
		fulfillmentInfo?: GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo;

		/** Represents intent information communicated to the webhook. */
		intentInfo?: GoogleCloudDialogflowCxV3WebhookRequestIntentInfo;

		/** The language code specified in the original request. */
		languageCode?: string | null;

		/** The list of rich message responses to present to the user. Webhook can choose to append or replace this list in WebhookResponse.fulfillment_response; */
		messages?: Array<GoogleCloudDialogflowCxV3ResponseMessage>;

		/** Represents page information communicated to and from the webhook. */
		pageInfo?: GoogleCloudDialogflowCxV3PageInfo;

		/** Custom data set in QueryParameters.payload. */
		payload?: {[id: string]: any };

		/** Represents the result of sentiment analysis. */
		sentimentAnalysisResult?: GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult;

		/** Represents session information communicated to and from the webhook. */
		sessionInfo?: GoogleCloudDialogflowCxV3SessionInfo;

		/** If natural language text was provided as input, this field will contain a copy of the text. */
		text?: string | null;

		/** If natural language speech audio was provided as input, this field will contain the transcript for the audio. */
		transcript?: string | null;

		/** If an event was provided as input, this field will contain the name of the event. */
		triggerEvent?: string | null;

		/** If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`. */
		triggerIntent?: string | null;
	}

	/** The request message for a webhook call. The request is sent as a JSON object and the field names will be presented in camel cases. You may see undocumented fields in an actual request. These fields are used internally by Dialogflow and should be ignored. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestFormProperties {

		/** Always present. The unique identifier of the DetectIntentResponse that will be returned to the API caller. */
		detectIntentResponseId: FormControl<string | null | undefined>,

		/** If DTMF was provided as input, this field will contain the DTMF digits. */
		dtmfDigits: FormControl<string | null | undefined>,

		/** The language code specified in the original request. */
		languageCode: FormControl<string | null | undefined>,

		/** Custom data set in QueryParameters.payload. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** If natural language text was provided as input, this field will contain a copy of the text. */
		text: FormControl<string | null | undefined>,

		/** If natural language speech audio was provided as input, this field will contain the transcript for the audio. */
		transcript: FormControl<string | null | undefined>,

		/** If an event was provided as input, this field will contain the name of the event. */
		triggerEvent: FormControl<string | null | undefined>,

		/** If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`. */
		triggerIntent: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookRequestFormProperties>({
			detectIntentResponseId: new FormControl<string | null | undefined>(undefined),
			dtmfDigits: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
			transcript: new FormControl<string | null | undefined>(undefined),
			triggerEvent: new FormControl<string | null | undefined>(undefined),
			triggerIntent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents fulfillment information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo {

		/** Always present. The value of the Fulfillment.tag field will be populated in this field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. */
		tag?: string | null;
	}

	/** Represents fulfillment information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfoFormProperties {

		/** Always present. The value of the Fulfillment.tag field will be populated in this field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. */
		tag: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfoFormProperties>({
			tag: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents intent information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestIntentInfo {

		/** The confidence of the matched intent. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence?: number | null;

		/** Always present. The display name of the last matched intent. */
		displayName?: string | null;

		/** Always present. The unique identifier of the last matched intent. Format: `projects//locations//agents//intents/`. */
		lastMatchedIntent?: string | null;

		/** Parameters identified as a result of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from the user's utterance. All parameters defined in the matched intent that are identified will be surfaced here. */
		parameters?: {[id: string]: GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue };
	}

	/** Represents intent information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestIntentInfoFormProperties {

		/** The confidence of the matched intent. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence: FormControl<number | null | undefined>,

		/** Always present. The display name of the last matched intent. */
		displayName: FormControl<string | null | undefined>,

		/** Always present. The unique identifier of the last matched intent. Format: `projects//locations//agents//intents/`. */
		lastMatchedIntent: FormControl<string | null | undefined>,

		/** Parameters identified as a result of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from the user's utterance. All parameters defined in the matched intent that are identified will be surfaced here. */
		parameters: FormControl<{[id: string]: GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookRequestIntentInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookRequestIntentInfoFormProperties>({
			confidence: new FormControl<number | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			lastMatchedIntent: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue } | null | undefined>(undefined),
		});

	}


	/** Represents a value for an intent parameter. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue {

		/** Always present. Original text value extracted from user utterance. */
		originalValue?: string | null;

		/** Always present. Structured value for the parameter extracted from user utterance. */
		resolvedValue?: any;
	}

	/** Represents a value for an intent parameter. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValueFormProperties {

		/** Always present. Original text value extracted from user utterance. */
		originalValue: FormControl<string | null | undefined>,

		/** Always present. Structured value for the parameter extracted from user utterance. */
		resolvedValue: FormControl<any | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValueFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValueFormProperties>({
			originalValue: new FormControl<string | null | undefined>(undefined),
			resolvedValue: new FormControl<any | null | undefined>(undefined),
		});

	}


	/** Represents the result of sentiment analysis. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude?: number | null;

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score?: number | null;
	}

	/** Represents the result of sentiment analysis. */
	export interface GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResultFormProperties {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude: FormControl<number | null | undefined>,

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResultFormProperties>({
			magnitude: new FormControl<number | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The response message for a webhook call. */
	export interface GoogleCloudDialogflowCxV3WebhookResponse {

		/** Represents a fulfillment response to the user. */
		fulfillmentResponse?: GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse;

		/** Represents page information communicated to and from the webhook. */
		pageInfo?: GoogleCloudDialogflowCxV3PageInfo;

		/** Value to append directly to QueryResult.webhook_payloads. */
		payload?: {[id: string]: any };

		/** Represents session information communicated to and from the webhook. */
		sessionInfo?: GoogleCloudDialogflowCxV3SessionInfo;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;
	}

	/** The response message for a webhook call. */
	export interface GoogleCloudDialogflowCxV3WebhookResponseFormProperties {

		/** Value to append directly to QueryResult.webhook_payloads. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookResponseFormProperties>({
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a fulfillment response to the user. */
	export interface GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse {

		/** Merge behavior for `messages`. */
		mergeBehavior?: GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseMergeBehavior | null;

		/** The list of rich message responses to present to the user. */
		messages?: Array<GoogleCloudDialogflowCxV3ResponseMessage>;
	}

	/** Represents a fulfillment response to the user. */
	export interface GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseFormProperties {

		/** Merge behavior for `messages`. */
		mergeBehavior: FormControl<GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseMergeBehavior | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseFormProperties>({
			mergeBehavior: new FormControl<GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseMergeBehavior | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseMergeBehavior { MERGE_BEHAVIOR_UNSPECIFIED = 0, APPEND = 1, REPLACE = 2 }


	/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
	export interface GoogleCloudDialogflowCxV3beta1AdvancedSettings {

		/** Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow. */
		audioExportGcsDestination?: GoogleCloudDialogflowCxV3beta1GcsDestination;

		/** Define behaviors for DTMF (dual tone multi frequency). */
		dtmfSettings?: GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings;

		/** Define behaviors on logging. */
		loggingSettings?: GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings;
	}

	/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
	export interface GoogleCloudDialogflowCxV3beta1AdvancedSettingsFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1AdvancedSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1AdvancedSettingsFormProperties>({
		});

	}


	/** Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3beta1GcsDestination {

		/** Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation. */
		uri?: string | null;
	}

	/** Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3beta1GcsDestinationFormProperties {

		/** Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1GcsDestinationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1GcsDestinationFormProperties>({
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Define behaviors for DTMF (dual tone multi frequency). */
	export interface GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings {

		/** If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance). */
		enabled?: boolean | null;

		/** The digit that terminates a DTMF digit sequence. */
		finishDigit?: string | null;

		/** Max length of DTMF digits. */
		maxDigits?: number | null;
	}

	/** Define behaviors for DTMF (dual tone multi frequency). */
	export interface GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettingsFormProperties {

		/** If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance). */
		enabled: FormControl<boolean | null | undefined>,

		/** The digit that terminates a DTMF digit sequence. */
		finishDigit: FormControl<string | null | undefined>,

		/** Max length of DTMF digits. */
		maxDigits: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettingsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			finishDigit: new FormControl<string | null | undefined>(undefined),
			maxDigits: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Define behaviors on logging. */
	export interface GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings {

		/** If true, DF Interaction logging is currently enabled. */
		enableInteractionLogging?: boolean | null;

		/** If true, StackDriver logging is currently enabled. */
		enableStackdriverLogging?: boolean | null;
	}

	/** Define behaviors on logging. */
	export interface GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettingsFormProperties {

		/** If true, DF Interaction logging is currently enabled. */
		enableInteractionLogging: FormControl<boolean | null | undefined>,

		/** If true, StackDriver logging is currently enabled. */
		enableStackdriverLogging: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettingsFormProperties>({
			enableInteractionLogging: new FormControl<boolean | null | undefined>(undefined),
			enableStackdriverLogging: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents the natural speech audio to be processed. */
	export interface GoogleCloudDialogflowCxV3beta1AudioInput {

		/** The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests. */
		audio?: string | null;

		/** Instructs the speech recognizer on how to process the audio content. */
		config?: GoogleCloudDialogflowCxV3beta1InputAudioConfig;
	}

	/** Represents the natural speech audio to be processed. */
	export interface GoogleCloudDialogflowCxV3beta1AudioInputFormProperties {

		/** The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests. */
		audio: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1AudioInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1AudioInputFormProperties>({
			audio: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Instructs the speech recognizer on how to process the audio content. */
	export interface GoogleCloudDialogflowCxV3beta1InputAudioConfig {

		/** Required. Audio encoding of the audio content to process. */
		audioEncoding?: GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null;

		/** Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up. */
		bargeInConfig?: GoogleCloudDialogflowCxV3beta1BargeInConfig;

		/** Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information. */
		enableWordInfo?: boolean | null;

		/** Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models). */
		model?: string | null;

		/** Optional. Which variant of the Speech model to use. */
		modelVariant?: GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null;

		/** Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details. */
		phraseHints?: Array<string>;

		/** Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details. */
		sampleRateHertz?: number | null;

		/** Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods. */
		singleUtterance?: boolean | null;
	}

	/** Instructs the speech recognizer on how to process the audio content. */
	export interface GoogleCloudDialogflowCxV3beta1InputAudioConfigFormProperties {

		/** Required. Audio encoding of the audio content to process. */
		audioEncoding: FormControl<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null | undefined>,

		/** Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information. */
		enableWordInfo: FormControl<boolean | null | undefined>,

		/** Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models). */
		model: FormControl<string | null | undefined>,

		/** Optional. Which variant of the Speech model to use. */
		modelVariant: FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>,

		/** Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details. */
		sampleRateHertz: FormControl<number | null | undefined>,

		/** Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods. */
		singleUtterance: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1InputAudioConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1InputAudioConfigFormProperties>({
			audioEncoding: new FormControl<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null | undefined>(undefined),
			enableWordInfo: new FormControl<boolean | null | undefined>(undefined),
			model: new FormControl<string | null | undefined>(undefined),
			modelVariant: new FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>(undefined),
			sampleRateHertz: new FormControl<number | null | undefined>(undefined),
			singleUtterance: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up. */
	export interface GoogleCloudDialogflowCxV3beta1BargeInConfig {

		/** Duration that is not eligible for barge-in at the beginning of the input audio. */
		noBargeInDuration?: string | null;

		/** Total duration for the playback at the beginning of the input audio. */
		totalDuration?: string | null;
	}

	/** Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up. */
	export interface GoogleCloudDialogflowCxV3beta1BargeInConfigFormProperties {

		/** Duration that is not eligible for barge-in at the beginning of the input audio. */
		noBargeInDuration: FormControl<string | null | undefined>,

		/** Total duration for the playback at the beginning of the input audio. */
		totalDuration: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1BargeInConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1BargeInConfigFormProperties>({
			noBargeInDuration: new FormControl<string | null | undefined>(undefined),
			totalDuration: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata returned for the TestCases.BatchRunTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1BatchRunTestCasesMetadata {

		/** The test errors. */
		errors?: Array<GoogleCloudDialogflowCxV3beta1TestError>;
	}

	/** Metadata returned for the TestCases.BatchRunTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1BatchRunTestCasesMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1BatchRunTestCasesMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1BatchRunTestCasesMetadataFormProperties>({
		});

	}


	/** Error info for running a test. */
	export interface GoogleCloudDialogflowCxV3beta1TestError {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		status?: GoogleRpcStatus;

		/** The test case resource name. */
		testCase?: string | null;

		/** The timestamp when the test was completed. */
		testTime?: string | null;
	}

	/** Error info for running a test. */
	export interface GoogleCloudDialogflowCxV3beta1TestErrorFormProperties {

		/** The test case resource name. */
		testCase: FormControl<string | null | undefined>,

		/** The timestamp when the test was completed. */
		testTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TestErrorFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TestErrorFormProperties>({
			testCase: new FormControl<string | null | undefined>(undefined),
			testTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for TestCases.BatchRunTestCases. */
	export interface GoogleCloudDialogflowCxV3beta1BatchRunTestCasesResponse {

		/** The test case results. The detailed conversation turns are empty in this response. */
		results?: Array<GoogleCloudDialogflowCxV3beta1TestCaseResult>;
	}

	/** The response message for TestCases.BatchRunTestCases. */
	export interface GoogleCloudDialogflowCxV3beta1BatchRunTestCasesResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1BatchRunTestCasesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1BatchRunTestCasesResponseFormProperties>({
		});

	}


	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3beta1TestCaseResult {

		/** The conversation turns uttered during the test case replay in chronological order. */
		conversationTurns?: Array<GoogleCloudDialogflowCxV3beta1ConversationTurn>;

		/** Environment where the test was run. If not set, it indicates the draft environment. */
		environment?: string | null;

		/** The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`. */
		name?: string | null;

		/** Whether the test case passed in the agent environment. */
		testResult?: GoogleCloudDialogflowCxV3TestCaseResultTestResult | null;

		/** The time that the test was run. */
		testTime?: string | null;
	}

	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3beta1TestCaseResultFormProperties {

		/** Environment where the test was run. If not set, it indicates the draft environment. */
		environment: FormControl<string | null | undefined>,

		/** The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`. */
		name: FormControl<string | null | undefined>,

		/** Whether the test case passed in the agent environment. */
		testResult: FormControl<GoogleCloudDialogflowCxV3TestCaseResultTestResult | null | undefined>,

		/** The time that the test was run. */
		testTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TestCaseResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TestCaseResultFormProperties>({
			environment: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			testResult: new FormControl<GoogleCloudDialogflowCxV3TestCaseResultTestResult | null | undefined>(undefined),
			testTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** One interaction between a human and virtual agent. The human provides some input and the virtual agent provides a response. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationTurn {

		/** The input from the human user. */
		userInput?: GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput;

		/** The output from the virtual agent. */
		virtualAgentOutput?: GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput;
	}

	/** One interaction between a human and virtual agent. The human provides some input and the virtual agent provides a response. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationTurnFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ConversationTurnFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ConversationTurnFormProperties>({
		});

	}


	/** The input from the human user. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput {

		/** Whether sentiment analysis is enabled. */
		enableSentimentAnalysis?: boolean | null;

		/** Parameters that need to be injected into the conversation during intent detection. */
		injectedParameters?: {[id: string]: any };

		/** Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client. */
		input?: GoogleCloudDialogflowCxV3beta1QueryInput;

		/** If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled. */
		isWebhookEnabled?: boolean | null;
	}

	/** The input from the human user. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationTurnUserInputFormProperties {

		/** Whether sentiment analysis is enabled. */
		enableSentimentAnalysis: FormControl<boolean | null | undefined>,

		/** Parameters that need to be injected into the conversation during intent detection. */
		injectedParameters: FormControl<{[id: string]: any } | null | undefined>,

		/** If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled. */
		isWebhookEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ConversationTurnUserInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ConversationTurnUserInputFormProperties>({
			enableSentimentAnalysis: new FormControl<boolean | null | undefined>(undefined),
			injectedParameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			isWebhookEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client. */
	export interface GoogleCloudDialogflowCxV3beta1QueryInput {

		/** Represents the natural speech audio to be processed. */
		audio?: GoogleCloudDialogflowCxV3beta1AudioInput;

		/** Represents the input for dtmf event. */
		dtmf?: GoogleCloudDialogflowCxV3beta1DtmfInput;

		/** Represents the event to trigger. */
		event?: GoogleCloudDialogflowCxV3beta1EventInput;

		/** Represents the intent to trigger programmatically rather than as a result of natural language processing. */
		intent?: GoogleCloudDialogflowCxV3beta1IntentInput;

		/** Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode?: string | null;

		/** Represents the natural language text to be processed. */
		text?: GoogleCloudDialogflowCxV3beta1TextInput;
	}

	/** Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client. */
	export interface GoogleCloudDialogflowCxV3beta1QueryInputFormProperties {

		/** Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1QueryInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1QueryInputFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the input for dtmf event. */
	export interface GoogleCloudDialogflowCxV3beta1DtmfInput {

		/** The dtmf digits. */
		digits?: string | null;

		/** The finish digit (if any). */
		finishDigit?: string | null;
	}

	/** Represents the input for dtmf event. */
	export interface GoogleCloudDialogflowCxV3beta1DtmfInputFormProperties {

		/** The dtmf digits. */
		digits: FormControl<string | null | undefined>,

		/** The finish digit (if any). */
		finishDigit: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1DtmfInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1DtmfInputFormProperties>({
			digits: new FormControl<string | null | undefined>(undefined),
			finishDigit: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the event to trigger. */
	export interface GoogleCloudDialogflowCxV3beta1EventInput {

		/** Name of the event. */
		event?: string | null;
	}

	/** Represents the event to trigger. */
	export interface GoogleCloudDialogflowCxV3beta1EventInputFormProperties {

		/** Name of the event. */
		event: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1EventInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1EventInputFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the intent to trigger programmatically rather than as a result of natural language processing. */
	export interface GoogleCloudDialogflowCxV3beta1IntentInput {

		/** Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`. */
		intent?: string | null;
	}

	/** Represents the intent to trigger programmatically rather than as a result of natural language processing. */
	export interface GoogleCloudDialogflowCxV3beta1IntentInputFormProperties {

		/** Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`. */
		intent: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1IntentInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1IntentInputFormProperties>({
			intent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the natural language text to be processed. */
	export interface GoogleCloudDialogflowCxV3beta1TextInput {

		/** Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters. */
		text?: string | null;
	}

	/** Represents the natural language text to be processed. */
	export interface GoogleCloudDialogflowCxV3beta1TextInputFormProperties {

		/** Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TextInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TextInputFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The output from the virtual agent. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput {

		/** A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page). */
		currentPage?: GoogleCloudDialogflowCxV3beta1Page;

		/** Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage. */
		diagnosticInfo?: {[id: string]: any };

		/** Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any. */
		differences?: Array<GoogleCloudDialogflowCxV3beta1TestRunDifference>;

		/** The session parameters available to the bot at this point. */
		sessionParameters?: {[id: string]: any };

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		status?: GoogleRpcStatus;

		/** The text responses from the agent for the turn. */
		textResponses?: Array<GoogleCloudDialogflowCxV3beta1ResponseMessageText>;

		/** An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent. */
		triggeredIntent?: GoogleCloudDialogflowCxV3beta1Intent;
	}

	/** The output from the virtual agent. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutputFormProperties {

		/** Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage. */
		diagnosticInfo: FormControl<{[id: string]: any } | null | undefined>,

		/** The session parameters available to the bot at this point. */
		sessionParameters: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutputFormProperties>({
			diagnosticInfo: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			sessionParameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page). */
	export interface GoogleCloudDialogflowCxV3beta1Page {

		/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
		advancedSettings?: GoogleCloudDialogflowCxV3beta1AdvancedSettings;

		/** The description of the page. The maximum length is 500 characters. */
		description?: string | null;

		/** Required. The human-readable name of the page, unique within the flow. */
		displayName?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		entryFulfillment?: GoogleCloudDialogflowCxV3beta1Fulfillment;

		/** Handlers associated with the page to handle events such as webhook errors, no match or no input. */
		eventHandlers?: Array<GoogleCloudDialogflowCxV3beta1EventHandler>;

		/** A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session. */
		form?: GoogleCloudDialogflowCxV3beta1Form;

		/** The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment. */
		knowledgeConnectorSettings?: GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings;

		/** The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`. */
		name?: string | null;

		/** Ordered list of `TransitionRouteGroups` added to the page. Transition route groups must be unique within a page. If the page links both flow-level transition route groups and agent-level transition route groups, the flow-level ones will have higher priority and will be put before the agent-level ones. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups. */
		transitionRouteGroups?: Array<string>;

		/** A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified. */
		transitionRoutes?: Array<GoogleCloudDialogflowCxV3beta1TransitionRoute>;
	}

	/** A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page). */
	export interface GoogleCloudDialogflowCxV3beta1PageFormProperties {

		/** The description of the page. The maximum length is 500 characters. */
		description: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the page, unique within the flow. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1PageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1PageFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
	export interface GoogleCloudDialogflowCxV3beta1Fulfillment {

		/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
		advancedSettings?: GoogleCloudDialogflowCxV3beta1AdvancedSettings;

		/** Conditional cases for this fulfillment. */
		conditionalCases?: Array<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases>;

		/** If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers. */
		enableGenerativeFallback?: boolean | null;

		/** The list of rich message responses to present to the user. */
		messages?: Array<GoogleCloudDialogflowCxV3beta1ResponseMessage>;

		/** Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks. */
		returnPartialResponses?: boolean | null;

		/** Set parameter values before executing the webhook. */
		setParameterActions?: Array<GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction>;

		/** The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified. */
		tag?: string | null;

		/** The webhook to call. Format: `projects//locations//agents//webhooks/`. */
		webhook?: string | null;
	}

	/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentFormProperties {

		/** If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers. */
		enableGenerativeFallback: FormControl<boolean | null | undefined>,

		/** Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks. */
		returnPartialResponses: FormControl<boolean | null | undefined>,

		/** The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified. */
		tag: FormControl<string | null | undefined>,

		/** The webhook to call. Format: `projects//locations//agents//webhooks/`. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FulfillmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FulfillmentFormProperties>({
			enableGenerativeFallback: new FormControl<boolean | null | undefined>(undefined),
			returnPartialResponses: new FormControl<boolean | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases {

		/** A list of cascading if-else conditions. */
		cases?: Array<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCase>;
	}

	/** A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesFormProperties>({
		});

	}


	/** Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCase {

		/** A list of case content. */
		caseContent?: Array<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContent>;

		/** The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). */
		condition?: string | null;
	}

	/** Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseFormProperties {

		/** The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). */
		condition: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseFormProperties>({
			condition: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The list of messages or conditional cases to activate for this case. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContent {

		/** A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored. */
		additionalCases?: GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases;

		/** Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard. */
		message?: GoogleCloudDialogflowCxV3beta1ResponseMessage;
	}

	/** The list of messages or conditional cases to activate for this case. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContentFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContentFormProperties>({
		});

	}


	/** Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessage {

		/** The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned. */
		channel?: string | null;

		/** Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue. */
		conversationSuccess?: GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccess;

		/** Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user. */
		endInteraction?: GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteraction;

		/** Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped. */
		knowledgeInfoCard?: GoogleCloudDialogflowCxV3beta1ResponseMessageKnowledgeInfoCard;

		/** Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human. */
		liveAgentHandoff?: GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoff;

		/** Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user. */
		mixedAudio?: GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudio;

		/** A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message. */
		outputAudioText?: GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioText;

		/** Returns a response containing a custom, platform-specific payload. */
		payload?: {[id: string]: any };

		/** Specifies an audio clip to be played by the client as part of the response. */
		playAudio?: GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudio;

		/** Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint. */
		telephonyTransferCall?: GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCall;

		/** The text response message. */
		text?: GoogleCloudDialogflowCxV3beta1ResponseMessageText;
	}

	/** Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageFormProperties {

		/** The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned. */
		channel: FormControl<string | null | undefined>,

		/** Returns a response containing a custom, platform-specific payload. */
		payload: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageFormProperties>({
			channel: new FormControl<string | null | undefined>(undefined),
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccess {

		/** Custom metadata. Dialogflow doesn't impose any structure on this. */
		metadata?: {[id: string]: any };
	}

	/** Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccessFormProperties {

		/** Custom metadata. Dialogflow doesn't impose any structure on this. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccessFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccessFormProperties>({
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteraction {
	}

	/** Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteractionFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageEndInteractionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteractionFormProperties>({
		});

	}


	/** Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageKnowledgeInfoCard {
	}

	/** Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageKnowledgeInfoCardFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageKnowledgeInfoCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageKnowledgeInfoCardFormProperties>({
		});

	}


	/** Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoff {

		/** Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this. */
		metadata?: {[id: string]: any };
	}

	/** Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoffFormProperties {

		/** Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoffFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoffFormProperties>({
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudio {

		/** Segments this audio response is composed of. */
		segments?: Array<GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegment>;
	}

	/** Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioFormProperties>({
		});

	}


	/** Represents one segment of audio. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegment {

		/** Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request. */
		audio?: string | null;

		/** Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it. */
		uri?: string | null;
	}

	/** Represents one segment of audio. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegmentFormProperties {

		/** Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,

		/** Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request. */
		audio: FormControl<string | null | undefined>,

		/** Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegmentFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
			audio: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioText {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml). */
		ssml?: string | null;

		/** The raw text to be synthesized. */
		text?: string | null;
	}

	/** A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioTextFormProperties {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,

		/** The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml). */
		ssml: FormControl<string | null | undefined>,

		/** The raw text to be synthesized. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioTextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioTextFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
			ssml: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies an audio clip to be played by the client as part of the response. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudio {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it. */
		audioUri?: string | null;
	}

	/** Specifies an audio clip to be played by the client as part of the response. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudioFormProperties {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,

		/** Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it. */
		audioUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudioFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudioFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
			audioUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCall {

		/** Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164). */
		phoneNumber?: string | null;
	}

	/** Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCallFormProperties {

		/** Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164). */
		phoneNumber: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCallFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCallFormProperties>({
			phoneNumber: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The text response message. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageText {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption?: boolean | null;

		/** Required. A collection of text responses. */
		text?: Array<string>;
	}

	/** The text response message. */
	export interface GoogleCloudDialogflowCxV3beta1ResponseMessageTextFormProperties {

		/** Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request. */
		allowPlaybackInterruption: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ResponseMessageTextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ResponseMessageTextFormProperties>({
			allowPlaybackInterruption: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Setting a parameter value. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction {

		/** Display name of the parameter. */
		parameter?: string | null;

		/** The new value of the parameter. A null value clears the parameter. */
		value?: any;
	}

	/** Setting a parameter value. */
	export interface GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionFormProperties {

		/** Display name of the parameter. */
		parameter: FormControl<string | null | undefined>,

		/** The new value of the parameter. A null value clears the parameter. */
		value: FormControl<any | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterActionFormProperties>({
			parameter: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<any | null | undefined>(undefined),
		});

	}


	/** An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3beta1EventHandler {

		/** Required. The name of the event to handle. */
		event?: string | null;

		/** Output only. The unique identifier of this event handler. */
		name?: string | null;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		triggerFulfillment?: GoogleCloudDialogflowCxV3beta1Fulfillment;
	}

	/** An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3beta1EventHandlerFormProperties {

		/** Required. The name of the event to handle. */
		event: FormControl<string | null | undefined>,

		/** Output only. The unique identifier of this event handler. */
		name: FormControl<string | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1EventHandlerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1EventHandlerFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session. */
	export interface GoogleCloudDialogflowCxV3beta1Form {

		/** Parameters to collect from the user. */
		parameters?: Array<GoogleCloudDialogflowCxV3beta1FormParameter>;
	}

	/** A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session. */
	export interface GoogleCloudDialogflowCxV3beta1FormFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FormFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FormFormProperties>({
		});

	}


	/** Represents a form parameter. */
	export interface GoogleCloudDialogflowCxV3beta1FormParameter {

		/** Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter. */
		advancedSettings?: GoogleCloudDialogflowCxV3beta1AdvancedSettings;

		/** The default value of an optional parameter. If the parameter is required, the default value will be ignored. */
		defaultValue?: any;

		/** Required. The human-readable name of the parameter, unique within the form. */
		displayName?: string | null;

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType?: string | null;

		/** Configuration for how the filling of a parameter should be handled. */
		fillBehavior?: GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior;

		/** Indicates whether the parameter represents a list of values. */
		isList?: boolean | null;

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact?: boolean | null;

		/** Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required?: boolean | null;
	}

	/** Represents a form parameter. */
	export interface GoogleCloudDialogflowCxV3beta1FormParameterFormProperties {

		/** The default value of an optional parameter. If the parameter is required, the default value will be ignored. */
		defaultValue: FormControl<any | null | undefined>,

		/** Required. The human-readable name of the parameter, unique within the form. */
		displayName: FormControl<string | null | undefined>,

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType: FormControl<string | null | undefined>,

		/** Indicates whether the parameter represents a list of values. */
		isList: FormControl<boolean | null | undefined>,

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact: FormControl<boolean | null | undefined>,

		/** Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FormParameterFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FormParameterFormProperties>({
			defaultValue: new FormControl<any | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			entityType: new FormControl<string | null | undefined>(undefined),
			isList: new FormControl<boolean | null | undefined>(undefined),
			redact: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration for how the filling of a parameter should be handled. */
	export interface GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior {

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		initialPromptFulfillment?: GoogleCloudDialogflowCxV3beta1Fulfillment;

		/** The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted. */
		repromptEventHandlers?: Array<GoogleCloudDialogflowCxV3beta1EventHandler>;
	}

	/** Configuration for how the filling of a parameter should be handled. */
	export interface GoogleCloudDialogflowCxV3beta1FormParameterFillBehaviorFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1FormParameterFillBehaviorFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1FormParameterFillBehaviorFormProperties>({
		});

	}


	/** The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment. */
	export interface GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings {

		/** Optional. List of related data store connections. */
		dataStoreConnections?: Array<GoogleCloudDialogflowCxV3beta1DataStoreConnection>;

		/** Whether Knowledge Connector is enabled or not. */
		enabled?: boolean | null;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		triggerFulfillment?: GoogleCloudDialogflowCxV3beta1Fulfillment;
	}

	/** The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment. */
	export interface GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettingsFormProperties {

		/** Whether Knowledge Connector is enabled or not. */
		enabled: FormControl<boolean | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettingsFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A data store connection. It represents a data store in Discovery Engine and the type of the contents it contains. */
	export interface GoogleCloudDialogflowCxV3beta1DataStoreConnection {

		/** The full name of the referenced data store. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}` */
		dataStore?: string | null;

		/** The type of the connected data store. */
		dataStoreType?: GoogleCloudDialogflowCxV3DataStoreConnectionDataStoreType | null;
	}

	/** A data store connection. It represents a data store in Discovery Engine and the type of the contents it contains. */
	export interface GoogleCloudDialogflowCxV3beta1DataStoreConnectionFormProperties {

		/** The full name of the referenced data store. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}` */
		dataStore: FormControl<string | null | undefined>,

		/** The type of the connected data store. */
		dataStoreType: FormControl<GoogleCloudDialogflowCxV3DataStoreConnectionDataStoreType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1DataStoreConnectionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1DataStoreConnectionFormProperties>({
			dataStore: new FormControl<string | null | undefined>(undefined),
			dataStoreType: new FormControl<GoogleCloudDialogflowCxV3DataStoreConnectionDataStoreType | null | undefined>(undefined),
		});

	}


	/** A transition route specifies a intent that can be matched and/or a data condition that can be evaluated during a session. When a specified transition is matched, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the transition, it will be called. * If there is a `target_page` associated with the transition, the session will transition into the specified page. * If there is a `target_flow` associated with the transition, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3beta1TransitionRoute {

		/** The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		condition?: string | null;

		/** Optional. The description of the transition route. The maximum length is 500 characters. */
		description?: string | null;

		/** The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		intent?: string | null;

		/** Output only. The unique identifier of this transition route. */
		name?: string | null;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;

		/** A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both. */
		triggerFulfillment?: GoogleCloudDialogflowCxV3beta1Fulfillment;
	}

	/** A transition route specifies a intent that can be matched and/or a data condition that can be evaluated during a session. When a specified transition is matched, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the transition, it will be called. * If there is a `target_page` associated with the transition, the session will transition into the specified page. * If there is a `target_flow` associated with the transition, the session will transition into the specified flow. */
	export interface GoogleCloudDialogflowCxV3beta1TransitionRouteFormProperties {

		/** The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		condition: FormControl<string | null | undefined>,

		/** Optional. The description of the transition route. The maximum length is 500 characters. */
		description: FormControl<string | null | undefined>,

		/** The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled. */
		intent: FormControl<string | null | undefined>,

		/** Output only. The unique identifier of this transition route. */
		name: FormControl<string | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TransitionRouteFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TransitionRouteFormProperties>({
			condition: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			intent: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The description of differences between original and replayed agent output. */
	export interface GoogleCloudDialogflowCxV3beta1TestRunDifference {

		/** A human readable description of the diff, showing the actual output vs expected output. */
		description?: string | null;

		/** The type of diff. */
		type?: GoogleCloudDialogflowCxV3TestRunDifferenceType | null;
	}

	/** The description of differences between original and replayed agent output. */
	export interface GoogleCloudDialogflowCxV3beta1TestRunDifferenceFormProperties {

		/** A human readable description of the diff, showing the actual output vs expected output. */
		description: FormControl<string | null | undefined>,

		/** The type of diff. */
		type: FormControl<GoogleCloudDialogflowCxV3TestRunDifferenceType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TestRunDifferenceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TestRunDifferenceFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GoogleCloudDialogflowCxV3TestRunDifferenceType | null | undefined>(undefined),
		});

	}


	/** An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent. */
	export interface GoogleCloudDialogflowCxV3beta1Intent {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description?: string | null;

		/** Required. The human-readable name of the intent, unique within the agent. */
		displayName?: string | null;

		/** Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event. */
		isFallback?: boolean | null;

		/** The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys-contextual" means the intent is a contextual intent. */
		labels?: {[id: string]: string };

		/** The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`. */
		name?: string | null;

		/** The collection of parameters associated with the intent. */
		parameters?: Array<GoogleCloudDialogflowCxV3beta1IntentParameter>;

		/** The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority?: number | null;

		/** The collection of training phrases the agent is trained on to identify the intent. */
		trainingPhrases?: Array<GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase>;
	}

	/** An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent. */
	export interface GoogleCloudDialogflowCxV3beta1IntentFormProperties {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the intent, unique within the agent. */
		displayName: FormControl<string | null | undefined>,

		/** Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event. */
		isFallback: FormControl<boolean | null | undefined>,

		/** The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys-contextual" means the intent is a contextual intent. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`. */
		name: FormControl<string | null | undefined>,

		/** The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1IntentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1IntentFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			isFallback: new FormControl<boolean | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents an intent parameter. */
	export interface GoogleCloudDialogflowCxV3beta1IntentParameter {

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType?: string | null;

		/** Required. The unique identifier of the parameter. This field is used by training phrases to annotate their parts. */
		id?: string | null;

		/** Indicates whether the parameter represents a list of values. */
		isList?: boolean | null;

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact?: boolean | null;
	}

	/** Represents an intent parameter. */
	export interface GoogleCloudDialogflowCxV3beta1IntentParameterFormProperties {

		/** Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types. */
		entityType: FormControl<string | null | undefined>,

		/** Required. The unique identifier of the parameter. This field is used by training phrases to annotate their parts. */
		id: FormControl<string | null | undefined>,

		/** Indicates whether the parameter represents a list of values. */
		isList: FormControl<boolean | null | undefined>,

		/** Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled. */
		redact: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1IntentParameterFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1IntentParameterFormProperties>({
			entityType: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			isList: new FormControl<boolean | null | undefined>(undefined),
			redact: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents an example that the agent is trained on to identify the intent. */
	export interface GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase {

		/** Output only. The unique identifier of the training phrase. */
		id?: string | null;

		/** Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `parameter_id` field is set. */
		parts?: Array<GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePart>;

		/** Indicates how many times this example was added to the intent. */
		repeatCount?: number | null;
	}

	/** Represents an example that the agent is trained on to identify the intent. */
	export interface GoogleCloudDialogflowCxV3beta1IntentTrainingPhraseFormProperties {

		/** Output only. The unique identifier of the training phrase. */
		id: FormControl<string | null | undefined>,

		/** Indicates how many times this example was added to the intent. */
		repeatCount: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1IntentTrainingPhraseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1IntentTrainingPhraseFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			repeatCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePart {

		/** The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase. */
		parameterId?: string | null;

		/** Required. The text for this part. */
		text?: string | null;
	}

	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePartFormProperties {

		/** The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase. */
		parameterId: FormControl<string | null | undefined>,

		/** Required. The text for this part. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePartFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePartFormProperties>({
			parameterId: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3beta1ContinuousTestResult {

		/** The resource name for the continuous test result. Format: `projects//locations//agents//environments//continuousTestResults/`. */
		name?: string | null;

		/** The result of this continuous test run, i.e. whether all the tests in this continuous test run pass or not. */
		result?: GoogleCloudDialogflowCxV3ContinuousTestResultResult | null;

		/** Time when the continuous testing run starts. */
		runTime?: string | null;

		/** A list of individual test case results names in this continuous test run. */
		testCaseResults?: Array<string>;
	}

	/** Represents a result from running a test case in an agent environment. */
	export interface GoogleCloudDialogflowCxV3beta1ContinuousTestResultFormProperties {

		/** The resource name for the continuous test result. Format: `projects//locations//agents//environments//continuousTestResults/`. */
		name: FormControl<string | null | undefined>,

		/** The result of this continuous test run, i.e. whether all the tests in this continuous test run pass or not. */
		result: FormControl<GoogleCloudDialogflowCxV3ContinuousTestResultResult | null | undefined>,

		/** Time when the continuous testing run starts. */
		runTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ContinuousTestResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ContinuousTestResultFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			result: new FormControl<GoogleCloudDialogflowCxV3ContinuousTestResultResult | null | undefined>(undefined),
			runTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This message is used to hold all the Conversation Signals data, which will be converted to JSON and exported to BigQuery. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationSignals {

		/** Collection of all signals that were extracted for a single turn of the conversation. */
		turnSignals?: GoogleCloudDialogflowCxV3beta1TurnSignals;
	}

	/** This message is used to hold all the Conversation Signals data, which will be converted to JSON and exported to BigQuery. */
	export interface GoogleCloudDialogflowCxV3beta1ConversationSignalsFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ConversationSignalsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ConversationSignalsFormProperties>({
		});

	}


	/** Collection of all signals that were extracted for a single turn of the conversation. */
	export interface GoogleCloudDialogflowCxV3beta1TurnSignals {

		/** Whether agent responded with LiveAgentHandoff fulfillment. */
		agentEscalated?: boolean | null;

		/** Whether user was using DTMF input. */
		dtmfUsed?: boolean | null;

		/** Failure reasons of the turn. */
		failureReasons?: Array<string>;

		/** Whether NLU predicted NO_MATCH. */
		noMatch?: boolean | null;

		/** Whether user provided no input. */
		noUserInput?: boolean | null;

		/** Whether turn resulted in End Session page. */
		reachedEndPage?: boolean | null;

		/** Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentMagnitude?: number | null;

		/** Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentScore?: number | null;

		/** Whether user was specifically asking for a live agent. */
		userEscalated?: boolean | null;

		/** Human-readable statuses of the webhooks triggered during this turn. */
		webhookStatuses?: Array<string>;
	}

	/** Collection of all signals that were extracted for a single turn of the conversation. */
	export interface GoogleCloudDialogflowCxV3beta1TurnSignalsFormProperties {

		/** Whether agent responded with LiveAgentHandoff fulfillment. */
		agentEscalated: FormControl<boolean | null | undefined>,

		/** Whether user was using DTMF input. */
		dtmfUsed: FormControl<boolean | null | undefined>,

		/** Whether NLU predicted NO_MATCH. */
		noMatch: FormControl<boolean | null | undefined>,

		/** Whether user provided no input. */
		noUserInput: FormControl<boolean | null | undefined>,

		/** Whether turn resulted in End Session page. */
		reachedEndPage: FormControl<boolean | null | undefined>,

		/** Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentMagnitude: FormControl<number | null | undefined>,

		/** Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentScore: FormControl<number | null | undefined>,

		/** Whether user was specifically asking for a live agent. */
		userEscalated: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TurnSignalsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TurnSignalsFormProperties>({
			agentEscalated: new FormControl<boolean | null | undefined>(undefined),
			dtmfUsed: new FormControl<boolean | null | undefined>(undefined),
			noMatch: new FormControl<boolean | null | undefined>(undefined),
			noUserInput: new FormControl<boolean | null | undefined>(undefined),
			reachedEndPage: new FormControl<boolean | null | undefined>(undefined),
			sentimentMagnitude: new FormControl<number | null | undefined>(undefined),
			sentimentScore: new FormControl<number | null | undefined>(undefined),
			userEscalated: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Metadata for CreateDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1CreateDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for CreateDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1CreateDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1CreateDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1CreateDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata {

		/** Required. Output only. The current state of this operation. */
		state?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null;
	}

	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadataFormProperties {

		/** Required. Output only. The current state of this operation. */
		state: FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadataFormProperties>({
			state: new FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>(undefined),
		});

	}


	/** Metadata associated with the long running operation for Versions.CreateVersion. */
	export interface GoogleCloudDialogflowCxV3beta1CreateVersionOperationMetadata {

		/** Name of the created version. Format: `projects//locations//agents//flows//versions/`. */
		version?: string | null;
	}

	/** Metadata associated with the long running operation for Versions.CreateVersion. */
	export interface GoogleCloudDialogflowCxV3beta1CreateVersionOperationMetadataFormProperties {

		/** Name of the created version. Format: `projects//locations//agents//flows//versions/`. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1CreateVersionOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1CreateVersionOperationMetadataFormProperties>({
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for DeleteDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1DeleteDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for DeleteDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1DeleteDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1DeleteDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1DeleteDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata returned for the Environments.DeployFlow long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1DeployFlowMetadata {

		/** Errors of running deployment tests. */
		testErrors?: Array<GoogleCloudDialogflowCxV3beta1TestError>;
	}

	/** Metadata returned for the Environments.DeployFlow long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1DeployFlowMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1DeployFlowMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1DeployFlowMetadataFormProperties>({
		});

	}


	/** The response message for Environments.DeployFlow. */
	export interface GoogleCloudDialogflowCxV3beta1DeployFlowResponse {

		/** The name of the flow version deployment. Format: `projects//locations//agents// environments//deployments/`. */
		deployment?: string | null;

		/** Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc. */
		environment?: GoogleCloudDialogflowCxV3beta1Environment;
	}

	/** The response message for Environments.DeployFlow. */
	export interface GoogleCloudDialogflowCxV3beta1DeployFlowResponseFormProperties {

		/** The name of the flow version deployment. Format: `projects//locations//agents// environments//deployments/`. */
		deployment: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1DeployFlowResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1DeployFlowResponseFormProperties>({
			deployment: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc. */
	export interface GoogleCloudDialogflowCxV3beta1Environment {

		/** The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description?: string | null;

		/** Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters. */
		displayName?: string | null;

		/** The name of the environment. Format: `projects//locations//agents//environments/`. */
		name?: string | null;

		/** The configuration for continuous tests. */
		testCasesConfig?: GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfig;

		/** Output only. Update time of this environment. */
		updateTime?: string | null;

		/** A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned. */
		versionConfigs?: Array<GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfig>;

		/** Configuration for webhooks. */
		webhookConfig?: GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfig;
	}

	/** Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc. */
	export interface GoogleCloudDialogflowCxV3beta1EnvironmentFormProperties {

		/** The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters. */
		displayName: FormControl<string | null | undefined>,

		/** The name of the environment. Format: `projects//locations//agents//environments/`. */
		name: FormControl<string | null | undefined>,

		/** Output only. Update time of this environment. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1EnvironmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1EnvironmentFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration for continuous tests. */
	export interface GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfig {

		/** Whether to run test cases in TestCasesConfig.test_cases periodically. Default false. If set to true, run once a day. */
		enableContinuousRun?: boolean | null;

		/** Whether to run test cases in TestCasesConfig.test_cases before deploying a flow version to the environment. Default false. */
		enablePredeploymentRun?: boolean | null;

		/** A list of test case names to run. They should be under the same agent. Format of each test case name: `projects//locations/ /agents//testCases/` */
		testCases?: Array<string>;
	}

	/** The configuration for continuous tests. */
	export interface GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfigFormProperties {

		/** Whether to run test cases in TestCasesConfig.test_cases periodically. Default false. If set to true, run once a day. */
		enableContinuousRun: FormControl<boolean | null | undefined>,

		/** Whether to run test cases in TestCasesConfig.test_cases before deploying a flow version to the environment. Default false. */
		enablePredeploymentRun: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfigFormProperties>({
			enableContinuousRun: new FormControl<boolean | null | undefined>(undefined),
			enablePredeploymentRun: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration for the version. */
	export interface GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfig {

		/** Required. Format: projects//locations//agents//flows//versions/. */
		version?: string | null;
	}

	/** Configuration for the version. */
	export interface GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfigFormProperties {

		/** Required. Format: projects//locations//agents//flows//versions/. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1EnvironmentVersionConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfigFormProperties>({
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration for webhooks. */
	export interface GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfig {

		/** The list of webhooks to override for the agent environment. The webhook must exist in the agent. You can override fields in `generic_web_service` and `service_directory`. */
		webhookOverrides?: Array<GoogleCloudDialogflowCxV3beta1Webhook>;
	}

	/** Configuration for webhooks. */
	export interface GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfigFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfigFormProperties>({
		});

	}


	/** Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend. */
	export interface GoogleCloudDialogflowCxV3beta1Webhook {

		/** Indicates whether the webhook is disabled. */
		disabled?: boolean | null;

		/** Required. The human-readable name of the webhook, unique within the agent. */
		displayName?: string | null;

		/** Represents configuration for a generic web service. */
		genericWebService?: GoogleCloudDialogflowCxV3beta1WebhookGenericWebService;

		/** The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`. */
		name?: string | null;

		/** Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service. */
		serviceDirectory?: GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfig;

		/** Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds. */
		timeout?: string | null;
	}

	/** Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookFormProperties {

		/** Indicates whether the webhook is disabled. */
		disabled: FormControl<boolean | null | undefined>,

		/** Required. The human-readable name of the webhook, unique within the agent. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`. */
		name: FormControl<string | null | undefined>,

		/** Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds. */
		timeout: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookFormProperties>({
			disabled: new FormControl<boolean | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			timeout: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents configuration for a generic web service. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookGenericWebService {

		/** Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with "subject alt name". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \ -signkey example.com.key \ -out example.com.crt \ -extfile <(printf "\nsubjectAltName='DNS:www.example.com'") ``` */
		allowedCaCerts?: Array<string>;

		/** Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST. */
		httpMethod?: GoogleCloudDialogflowCxV3WebhookGenericWebServiceHttpMethod | null;

		/** Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response */
		parameterMapping?: {[id: string]: string };

		/** The password for HTTP Basic authentication. */
		password?: string | null;

		/** Optional. Defines a custom JSON object as request body to send to flexible webhook. */
		requestBody?: string | null;

		/** The HTTP request headers to send together with webhook requests. */
		requestHeaders?: {[id: string]: string };

		/** Required. The webhook URI for receiving POST requests. It must use https protocol. */
		uri?: string | null;

		/** The user name for HTTP Basic authentication. */
		username?: string | null;

		/** Optional. Type of the webhook. */
		webhookType?: GoogleCloudDialogflowCxV3WebhookGenericWebServiceWebhookType | null;
	}

	/** Represents configuration for a generic web service. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceFormProperties {

		/** Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST. */
		httpMethod: FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceHttpMethod | null | undefined>,

		/** Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response */
		parameterMapping: FormControl<{[id: string]: string } | null | undefined>,

		/** The password for HTTP Basic authentication. */
		password: FormControl<string | null | undefined>,

		/** Optional. Defines a custom JSON object as request body to send to flexible webhook. */
		requestBody: FormControl<string | null | undefined>,

		/** The HTTP request headers to send together with webhook requests. */
		requestHeaders: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. The webhook URI for receiving POST requests. It must use https protocol. */
		uri: FormControl<string | null | undefined>,

		/** The user name for HTTP Basic authentication. */
		username: FormControl<string | null | undefined>,

		/** Optional. Type of the webhook. */
		webhookType: FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceWebhookType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookGenericWebServiceFormProperties>({
			httpMethod: new FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceHttpMethod | null | undefined>(undefined),
			parameterMapping: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			requestBody: new FormControl<string | null | undefined>(undefined),
			requestHeaders: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
			username: new FormControl<string | null | undefined>(undefined),
			webhookType: new FormControl<GoogleCloudDialogflowCxV3WebhookGenericWebServiceWebhookType | null | undefined>(undefined),
		});

	}


	/** Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfig {

		/** Represents configuration for a generic web service. */
		genericWebService?: GoogleCloudDialogflowCxV3beta1WebhookGenericWebService;

		/** Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent. */
		service?: string | null;
	}

	/** Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigFormProperties {

		/** Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfigFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowCxV3beta1ExportAgentResponse {

		/** Uncompressed raw byte content for agent. This field is populated if none of `agent_uri` and `git_destination` are specified in ExportAgentRequest. */
		agentContent?: string | null;

		/** The URI to a file containing the exported agent. This field is populated if `agent_uri` is specified in ExportAgentRequest. */
		agentUri?: string | null;

		/** Commit SHA of the git push. This field is populated if `git_destination` is specified in ExportAgentRequest. */
		commitSha?: string | null;
	}

	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowCxV3beta1ExportAgentResponseFormProperties {

		/** Uncompressed raw byte content for agent. This field is populated if none of `agent_uri` and `git_destination` are specified in ExportAgentRequest. */
		agentContent: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported agent. This field is populated if `agent_uri` is specified in ExportAgentRequest. */
		agentUri: FormControl<string | null | undefined>,

		/** Commit SHA of the git push. This field is populated if `git_destination` is specified in ExportAgentRequest. */
		commitSha: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ExportAgentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ExportAgentResponseFormProperties>({
			agentContent: new FormControl<string | null | undefined>(undefined),
			agentUri: new FormControl<string | null | undefined>(undefined),
			commitSha: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Flows.ExportFlow. */
	export interface GoogleCloudDialogflowCxV3beta1ExportFlowResponse {

		/** Uncompressed raw byte content for flow. */
		flowContent?: string | null;

		/** The URI to a file containing the exported flow. This field is populated only if `flow_uri` is specified in ExportFlowRequest. */
		flowUri?: string | null;
	}

	/** The response message for Flows.ExportFlow. */
	export interface GoogleCloudDialogflowCxV3beta1ExportFlowResponseFormProperties {

		/** Uncompressed raw byte content for flow. */
		flowContent: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported flow. This field is populated only if `flow_uri` is specified in ExportFlowRequest. */
		flowUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ExportFlowResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ExportFlowResponseFormProperties>({
			flowContent: new FormControl<string | null | undefined>(undefined),
			flowUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata returned for the Intents.ExportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1ExportIntentsMetadata {
	}

	/** Metadata returned for the Intents.ExportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1ExportIntentsMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ExportIntentsMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ExportIntentsMetadataFormProperties>({
		});

	}


	/** The response message for Intents.ExportIntents. */
	export interface GoogleCloudDialogflowCxV3beta1ExportIntentsResponse {

		/** Inline destination for a Dialogflow operation that writes or exports objects (e.g. intents) outside of Dialogflow. */
		intentsContent?: GoogleCloudDialogflowCxV3beta1InlineDestination;

		/** The URI to a file containing the exported intents. This field is populated only if `intents_uri` is specified in ExportIntentsRequest. */
		intentsUri?: string | null;
	}

	/** The response message for Intents.ExportIntents. */
	export interface GoogleCloudDialogflowCxV3beta1ExportIntentsResponseFormProperties {

		/** The URI to a file containing the exported intents. This field is populated only if `intents_uri` is specified in ExportIntentsRequest. */
		intentsUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ExportIntentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ExportIntentsResponseFormProperties>({
			intentsUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Inline destination for a Dialogflow operation that writes or exports objects (e.g. intents) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3beta1InlineDestination {

		/** Output only. The uncompressed byte content for the objects. Only populated in responses. */
		content?: string | null;
	}

	/** Inline destination for a Dialogflow operation that writes or exports objects (e.g. intents) outside of Dialogflow. */
	export interface GoogleCloudDialogflowCxV3beta1InlineDestinationFormProperties {

		/** Output only. The uncompressed byte content for the objects. Only populated in responses. */
		content: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1InlineDestinationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1InlineDestinationFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata returned for the TestCases.ExportTestCases long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3beta1ExportTestCasesMetadata {
	}

	/** Metadata returned for the TestCases.ExportTestCases long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3beta1ExportTestCasesMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ExportTestCasesMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ExportTestCasesMetadataFormProperties>({
		});

	}


	/** The response message for TestCases.ExportTestCases. */
	export interface GoogleCloudDialogflowCxV3beta1ExportTestCasesResponse {

		/** Uncompressed raw byte content for test cases. */
		content?: string | null;

		/** The URI to a file containing the exported test cases. This field is populated only if `gcs_uri` is specified in ExportTestCasesRequest. */
		gcsUri?: string | null;
	}

	/** The response message for TestCases.ExportTestCases. */
	export interface GoogleCloudDialogflowCxV3beta1ExportTestCasesResponseFormProperties {

		/** Uncompressed raw byte content for test cases. */
		content: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported test cases. This field is populated only if `gcs_uri` is specified in ExportTestCasesRequest. */
		gcsUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ExportTestCasesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ExportTestCasesResponseFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			gcsUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for ImportDocuments operation. */
	export interface GoogleCloudDialogflowCxV3beta1ImportDocumentsOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for ImportDocuments operation. */
	export interface GoogleCloudDialogflowCxV3beta1ImportDocumentsOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportDocumentsOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportDocumentsOperationMetadataFormProperties>({
		});

	}


	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowCxV3beta1ImportDocumentsResponse {

		/** Includes details about skipped documents or any other warnings. */
		warnings?: Array<GoogleRpcStatus>;
	}

	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowCxV3beta1ImportDocumentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportDocumentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportDocumentsResponseFormProperties>({
		});

	}


	/** The response message for Flows.ImportFlow. */
	export interface GoogleCloudDialogflowCxV3beta1ImportFlowResponse {

		/** The unique identifier of the new flow. Format: `projects//locations//agents//flows/`. */
		flow?: string | null;
	}

	/** The response message for Flows.ImportFlow. */
	export interface GoogleCloudDialogflowCxV3beta1ImportFlowResponseFormProperties {

		/** The unique identifier of the new flow. Format: `projects//locations//agents//flows/`. */
		flow: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportFlowResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportFlowResponseFormProperties>({
			flow: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata returned for the Intents.ImportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1ImportIntentsMetadata {
	}

	/** Metadata returned for the Intents.ImportIntents long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1ImportIntentsMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportIntentsMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportIntentsMetadataFormProperties>({
		});

	}


	/** The response message for Intents.ImportIntents. */
	export interface GoogleCloudDialogflowCxV3beta1ImportIntentsResponse {

		/** Conflicting resources detected during the import process. Only filled when REPORT_CONFLICT is set in the request and there are conflicts in the display names. */
		conflictingResources?: GoogleCloudDialogflowCxV3beta1ImportIntentsResponseConflictingResources;

		/** The unique identifier of the imported intents. Format: `projects//locations//agents//intents/`. */
		intents?: Array<string>;
	}

	/** The response message for Intents.ImportIntents. */
	export interface GoogleCloudDialogflowCxV3beta1ImportIntentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportIntentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportIntentsResponseFormProperties>({
		});

	}


	/** Conflicting resources detected during the import process. Only filled when REPORT_CONFLICT is set in the request and there are conflicts in the display names. */
	export interface GoogleCloudDialogflowCxV3beta1ImportIntentsResponseConflictingResources {

		/** Display names of conflicting entities. */
		entityDisplayNames?: Array<string>;

		/** Display names of conflicting intents. */
		intentDisplayNames?: Array<string>;
	}

	/** Conflicting resources detected during the import process. Only filled when REPORT_CONFLICT is set in the request and there are conflicts in the display names. */
	export interface GoogleCloudDialogflowCxV3beta1ImportIntentsResponseConflictingResourcesFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportIntentsResponseConflictingResourcesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportIntentsResponseConflictingResourcesFormProperties>({
		});

	}


	/** Metadata returned for the TestCases.ImportTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1ImportTestCasesMetadata {

		/** Errors for failed test cases. */
		errors?: Array<GoogleCloudDialogflowCxV3beta1TestCaseError>;
	}

	/** Metadata returned for the TestCases.ImportTestCases long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1ImportTestCasesMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportTestCasesMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportTestCasesMetadataFormProperties>({
		});

	}


	/** Error info for importing a test. */
	export interface GoogleCloudDialogflowCxV3beta1TestCaseError {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		status?: GoogleRpcStatus;

		/** Represents a test case. */
		testCase?: GoogleCloudDialogflowCxV3beta1TestCase;
	}

	/** Error info for importing a test. */
	export interface GoogleCloudDialogflowCxV3beta1TestCaseErrorFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TestCaseErrorFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TestCaseErrorFormProperties>({
		});

	}


	/** Represents a test case. */
	export interface GoogleCloudDialogflowCxV3beta1TestCase {

		/** Output only. When the test was created. */
		creationTime?: string | null;

		/** Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters. */
		displayName?: string | null;

		/** Represents a result from running a test case in an agent environment. */
		lastTestResult?: GoogleCloudDialogflowCxV3beta1TestCaseResult;

		/** The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`. */
		name?: string | null;

		/** Additional freeform notes about the test case. Limit of 400 characters. */
		notes?: string | null;

		/** Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters. */
		tags?: Array<string>;

		/** The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly. */
		testCaseConversationTurns?: Array<GoogleCloudDialogflowCxV3beta1ConversationTurn>;

		/** Represents configurations for a test case. */
		testConfig?: GoogleCloudDialogflowCxV3beta1TestConfig;
	}

	/** Represents a test case. */
	export interface GoogleCloudDialogflowCxV3beta1TestCaseFormProperties {

		/** Output only. When the test was created. */
		creationTime: FormControl<string | null | undefined>,

		/** Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`. */
		name: FormControl<string | null | undefined>,

		/** Additional freeform notes about the test case. Limit of 400 characters. */
		notes: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TestCaseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TestCaseFormProperties>({
			creationTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			notes: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents configurations for a test case. */
	export interface GoogleCloudDialogflowCxV3beta1TestConfig {

		/** Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		flow?: string | null;

		/** The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		page?: string | null;

		/** Session parameters to be compared when calculating differences. */
		trackingParameters?: Array<string>;
	}

	/** Represents configurations for a test case. */
	export interface GoogleCloudDialogflowCxV3beta1TestConfigFormProperties {

		/** Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		flow: FormControl<string | null | undefined>,

		/** The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow. */
		page: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1TestConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1TestConfigFormProperties>({
			flow: new FormControl<string | null | undefined>(undefined),
			page: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for TestCases.ImportTestCases. */
	export interface GoogleCloudDialogflowCxV3beta1ImportTestCasesResponse {

		/** The unique identifiers of the new test cases. Format: `projects//locations//agents//testCases/`. */
		names?: Array<string>;
	}

	/** The response message for TestCases.ImportTestCases. */
	export interface GoogleCloudDialogflowCxV3beta1ImportTestCasesResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ImportTestCasesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ImportTestCasesResponseFormProperties>({
		});

	}


	/** Represents page information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1PageInfo {

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the current page. Format: `projects//locations//agents//flows//pages/`. */
		currentPage?: string | null;

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The display name of the current page. */
		displayName?: string | null;

		/** Represents form information. */
		formInfo?: GoogleCloudDialogflowCxV3beta1PageInfoFormInfo;
	}

	/** Represents page information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1PageInfoFormProperties {

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the current page. Format: `projects//locations//agents//flows//pages/`. */
		currentPage: FormControl<string | null | undefined>,

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The display name of the current page. */
		displayName: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1PageInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1PageInfoFormProperties>({
			currentPage: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents form information. */
	export interface GoogleCloudDialogflowCxV3beta1PageInfoFormInfo {

		/** Optional for both WebhookRequest and WebhookResponse. The parameters contained in the form. Note that the webhook cannot add or remove any form parameter. */
		parameterInfo?: Array<GoogleCloudDialogflowCxV3beta1PageInfoFormInfoParameterInfo>;
	}

	/** Represents form information. */
	export interface GoogleCloudDialogflowCxV3beta1PageInfoFormInfoFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1PageInfoFormInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1PageInfoFormInfoFormProperties>({
		});

	}


	/** Represents parameter information. */
	export interface GoogleCloudDialogflowCxV3beta1PageInfoFormInfoParameterInfo {

		/** Always present for WebhookRequest. Required for WebhookResponse. The human-readable name of the parameter, unique within the form. This field cannot be modified by the webhook. */
		displayName?: string | null;

		/** Optional for WebhookRequest. Ignored for WebhookResponse. Indicates if the parameter value was just collected on the last conversation turn. */
		justCollected?: boolean | null;

		/** Optional for both WebhookRequest and WebhookResponse. Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required?: boolean | null;

		/** Always present for WebhookRequest. Required for WebhookResponse. The state of the parameter. This field can be set to INVALID by the webhook to invalidate the parameter; other values set by the webhook will be ignored. */
		state?: GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoState | null;

		/** Optional for both WebhookRequest and WebhookResponse. The value of the parameter. This field can be set by the webhook to change the parameter value. */
		value?: any;
	}

	/** Represents parameter information. */
	export interface GoogleCloudDialogflowCxV3beta1PageInfoFormInfoParameterInfoFormProperties {

		/** Always present for WebhookRequest. Required for WebhookResponse. The human-readable name of the parameter, unique within the form. This field cannot be modified by the webhook. */
		displayName: FormControl<string | null | undefined>,

		/** Optional for WebhookRequest. Ignored for WebhookResponse. Indicates if the parameter value was just collected on the last conversation turn. */
		justCollected: FormControl<boolean | null | undefined>,

		/** Optional for both WebhookRequest and WebhookResponse. Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes. */
		required: FormControl<boolean | null | undefined>,

		/** Always present for WebhookRequest. Required for WebhookResponse. The state of the parameter. This field can be set to INVALID by the webhook to invalidate the parameter; other values set by the webhook will be ignored. */
		state: FormControl<GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoState | null | undefined>,

		/** Optional for both WebhookRequest and WebhookResponse. The value of the parameter. This field can be set by the webhook to change the parameter value. */
		value: FormControl<any | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1PageInfoFormInfoParameterInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1PageInfoFormInfoParameterInfoFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			justCollected: new FormControl<boolean | null | undefined>(undefined),
			required: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfoState | null | undefined>(undefined),
			value: new FormControl<any | null | undefined>(undefined),
		});

	}


	/** Metadata for ReloadDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1ReloadDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for ReloadDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1ReloadDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1ReloadDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1ReloadDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata returned for the Environments.RunContinuousTest long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1RunContinuousTestMetadata {

		/** The test errors. */
		errors?: Array<GoogleCloudDialogflowCxV3beta1TestError>;
	}

	/** Metadata returned for the Environments.RunContinuousTest long running operation. */
	export interface GoogleCloudDialogflowCxV3beta1RunContinuousTestMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1RunContinuousTestMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1RunContinuousTestMetadataFormProperties>({
		});

	}


	/** The response message for Environments.RunContinuousTest. */
	export interface GoogleCloudDialogflowCxV3beta1RunContinuousTestResponse {

		/** Represents a result from running a test case in an agent environment. */
		continuousTestResult?: GoogleCloudDialogflowCxV3beta1ContinuousTestResult;
	}

	/** The response message for Environments.RunContinuousTest. */
	export interface GoogleCloudDialogflowCxV3beta1RunContinuousTestResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1RunContinuousTestResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1RunContinuousTestResponseFormProperties>({
		});

	}


	/** Metadata returned for the TestCases.RunTestCase long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3beta1RunTestCaseMetadata {
	}

	/** Metadata returned for the TestCases.RunTestCase long running operation. This message currently has no fields. */
	export interface GoogleCloudDialogflowCxV3beta1RunTestCaseMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1RunTestCaseMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1RunTestCaseMetadataFormProperties>({
		});

	}


	/** The response message for TestCases.RunTestCase. */
	export interface GoogleCloudDialogflowCxV3beta1RunTestCaseResponse {

		/** Represents a result from running a test case in an agent environment. */
		result?: GoogleCloudDialogflowCxV3beta1TestCaseResult;
	}

	/** The response message for TestCases.RunTestCase. */
	export interface GoogleCloudDialogflowCxV3beta1RunTestCaseResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1RunTestCaseResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1RunTestCaseResponseFormProperties>({
		});

	}


	/** Represents session information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1SessionInfo {

		/** Optional for WebhookRequest. Optional for WebhookResponse. All parameters collected from forms and intents during the session. Parameters can be created, updated, or removed by the webhook. To remove a parameter from the session, the webhook should explicitly set the parameter value to null in WebhookResponse. The map is keyed by parameters' display names. */
		parameters?: {[id: string]: any };

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the session. This field can be used by the webhook to identify a session. Format: `projects//locations//agents//sessions/` or `projects//locations//agents//environments//sessions/` if environment is specified. */
		session?: string | null;
	}

	/** Represents session information communicated to and from the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1SessionInfoFormProperties {

		/** Optional for WebhookRequest. Optional for WebhookResponse. All parameters collected from forms and intents during the session. Parameters can be created, updated, or removed by the webhook. To remove a parameter from the session, the webhook should explicitly set the parameter value to null in WebhookResponse. The map is keyed by parameters' display names. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,

		/** Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the session. This field can be used by the webhook to identify a session. Format: `projects//locations//agents//sessions/` or `projects//locations//agents//environments//sessions/` if environment is specified. */
		session: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1SessionInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1SessionInfoFormProperties>({
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			session: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for UpdateDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1UpdateDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for UpdateDocument operation. */
	export interface GoogleCloudDialogflowCxV3beta1UpdateDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowCxV3beta1UpdateDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1UpdateDocumentOperationMetadataFormProperties>({
		});

	}


	/** The request message for a webhook call. The request is sent as a JSON object and the field names will be presented in camel cases. You may see undocumented fields in an actual request. These fields are used internally by Dialogflow and should be ignored. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequest {

		/** Always present. The unique identifier of the DetectIntentResponse that will be returned to the API caller. */
		detectIntentResponseId?: string | null;

		/** If DTMF was provided as input, this field will contain the DTMF digits. */
		dtmfDigits?: string | null;

		/** Represents fulfillment information communicated to the webhook. */
		fulfillmentInfo?: GoogleCloudDialogflowCxV3beta1WebhookRequestFulfillmentInfo;

		/** Represents intent information communicated to the webhook. */
		intentInfo?: GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfo;

		/** The language code specified in the original request. */
		languageCode?: string | null;

		/** The list of rich message responses to present to the user. Webhook can choose to append or replace this list in WebhookResponse.fulfillment_response; */
		messages?: Array<GoogleCloudDialogflowCxV3beta1ResponseMessage>;

		/** Represents page information communicated to and from the webhook. */
		pageInfo?: GoogleCloudDialogflowCxV3beta1PageInfo;

		/** Custom data set in QueryParameters.payload. */
		payload?: {[id: string]: any };

		/** Represents the result of sentiment analysis. */
		sentimentAnalysisResult?: GoogleCloudDialogflowCxV3beta1WebhookRequestSentimentAnalysisResult;

		/** Represents session information communicated to and from the webhook. */
		sessionInfo?: GoogleCloudDialogflowCxV3beta1SessionInfo;

		/** If natural language text was provided as input, this field will contain a copy of the text. */
		text?: string | null;

		/** If natural language speech audio was provided as input, this field will contain the transcript for the audio. */
		transcript?: string | null;

		/** If an event was provided as input, this field will contain the name of the event. */
		triggerEvent?: string | null;

		/** If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`. */
		triggerIntent?: string | null;
	}

	/** The request message for a webhook call. The request is sent as a JSON object and the field names will be presented in camel cases. You may see undocumented fields in an actual request. These fields are used internally by Dialogflow and should be ignored. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestFormProperties {

		/** Always present. The unique identifier of the DetectIntentResponse that will be returned to the API caller. */
		detectIntentResponseId: FormControl<string | null | undefined>,

		/** If DTMF was provided as input, this field will contain the DTMF digits. */
		dtmfDigits: FormControl<string | null | undefined>,

		/** The language code specified in the original request. */
		languageCode: FormControl<string | null | undefined>,

		/** Custom data set in QueryParameters.payload. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** If natural language text was provided as input, this field will contain a copy of the text. */
		text: FormControl<string | null | undefined>,

		/** If natural language speech audio was provided as input, this field will contain the transcript for the audio. */
		transcript: FormControl<string | null | undefined>,

		/** If an event was provided as input, this field will contain the name of the event. */
		triggerEvent: FormControl<string | null | undefined>,

		/** If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`. */
		triggerIntent: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookRequestFormProperties>({
			detectIntentResponseId: new FormControl<string | null | undefined>(undefined),
			dtmfDigits: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
			transcript: new FormControl<string | null | undefined>(undefined),
			triggerEvent: new FormControl<string | null | undefined>(undefined),
			triggerIntent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents fulfillment information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestFulfillmentInfo {

		/** Always present. The value of the Fulfillment.tag field will be populated in this field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. */
		tag?: string | null;
	}

	/** Represents fulfillment information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestFulfillmentInfoFormProperties {

		/** Always present. The value of the Fulfillment.tag field will be populated in this field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. */
		tag: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookRequestFulfillmentInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookRequestFulfillmentInfoFormProperties>({
			tag: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents intent information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfo {

		/** The confidence of the matched intent. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence?: number | null;

		/** Always present. The display name of the last matched intent. */
		displayName?: string | null;

		/** Always present. The unique identifier of the last matched intent. Format: `projects//locations//agents//intents/`. */
		lastMatchedIntent?: string | null;

		/** Parameters identified as a result of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from the user's utterance. All parameters defined in the matched intent that are identified will be surfaced here. */
		parameters?: {[id: string]: GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValue };
	}

	/** Represents intent information communicated to the webhook. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoFormProperties {

		/** The confidence of the matched intent. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence: FormControl<number | null | undefined>,

		/** Always present. The display name of the last matched intent. */
		displayName: FormControl<string | null | undefined>,

		/** Always present. The unique identifier of the last matched intent. Format: `projects//locations//agents//intents/`. */
		lastMatchedIntent: FormControl<string | null | undefined>,

		/** Parameters identified as a result of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from the user's utterance. All parameters defined in the matched intent that are identified will be surfaced here. */
		parameters: FormControl<{[id: string]: GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValue } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoFormProperties>({
			confidence: new FormControl<number | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			lastMatchedIntent: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValue } | null | undefined>(undefined),
		});

	}


	/** Represents a value for an intent parameter. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValue {

		/** Always present. Original text value extracted from user utterance. */
		originalValue?: string | null;

		/** Always present. Structured value for the parameter extracted from user utterance. */
		resolvedValue?: any;
	}

	/** Represents a value for an intent parameter. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValueFormProperties {

		/** Always present. Original text value extracted from user utterance. */
		originalValue: FormControl<string | null | undefined>,

		/** Always present. Structured value for the parameter extracted from user utterance. */
		resolvedValue: FormControl<any | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValueFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValueFormProperties>({
			originalValue: new FormControl<string | null | undefined>(undefined),
			resolvedValue: new FormControl<any | null | undefined>(undefined),
		});

	}


	/** Represents the result of sentiment analysis. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestSentimentAnalysisResult {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude?: number | null;

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score?: number | null;
	}

	/** Represents the result of sentiment analysis. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookRequestSentimentAnalysisResultFormProperties {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude: FormControl<number | null | undefined>,

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookRequestSentimentAnalysisResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookRequestSentimentAnalysisResultFormProperties>({
			magnitude: new FormControl<number | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The response message for a webhook call. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookResponse {

		/** Represents a fulfillment response to the user. */
		fulfillmentResponse?: GoogleCloudDialogflowCxV3beta1WebhookResponseFulfillmentResponse;

		/** Represents page information communicated to and from the webhook. */
		pageInfo?: GoogleCloudDialogflowCxV3beta1PageInfo;

		/** Value to append directly to QueryResult.webhook_payloads. */
		payload?: {[id: string]: any };

		/** Represents session information communicated to and from the webhook. */
		sessionInfo?: GoogleCloudDialogflowCxV3beta1SessionInfo;

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow?: string | null;

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage?: string | null;
	}

	/** The response message for a webhook call. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookResponseFormProperties {

		/** Value to append directly to QueryResult.webhook_payloads. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** The target flow to transition to. Format: `projects//locations//agents//flows/`. */
		targetFlow: FormControl<string | null | undefined>,

		/** The target page to transition to. Format: `projects//locations//agents//flows//pages/`. */
		targetPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookResponseFormProperties>({
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			targetFlow: new FormControl<string | null | undefined>(undefined),
			targetPage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a fulfillment response to the user. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookResponseFulfillmentResponse {

		/** Merge behavior for `messages`. */
		mergeBehavior?: GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseMergeBehavior | null;

		/** The list of rich message responses to present to the user. */
		messages?: Array<GoogleCloudDialogflowCxV3beta1ResponseMessage>;
	}

	/** Represents a fulfillment response to the user. */
	export interface GoogleCloudDialogflowCxV3beta1WebhookResponseFulfillmentResponseFormProperties {

		/** Merge behavior for `messages`. */
		mergeBehavior: FormControl<GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseMergeBehavior | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowCxV3beta1WebhookResponseFulfillmentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowCxV3beta1WebhookResponseFulfillmentResponseFormProperties>({
			mergeBehavior: new FormControl<GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponseMergeBehavior | null | undefined>(undefined),
		});

	}


	/** A Dialogflow agent is a virtual agent that handles conversations with your end-users. It is a natural language understanding module that understands the nuances of human language. Dialogflow translates end-user text or audio during a conversation to structured data that your apps and services can understand. You design and build a Dialogflow agent to handle the types of conversations required for your system. For more information about agents, see the [Agent guide](https://cloud.google.com/dialogflow/docs/agents-overview).  */
	export interface GoogleCloudDialogflowV2Agent {

		/** Optional. API version displayed in Dialogflow console. If not specified, V2 API is assumed. Clients are free to query different service endpoints for different API versions. However, bots connectors and webhook calls will follow the specified API version. */
		apiVersion?: GoogleCloudDialogflowV2AgentApiVersion | null;

		/** Optional. The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted [Web Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo) integration. */
		avatarUri?: string | null;

		/** Optional. To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a fallback intent will be triggered or, if there are no fallback intents defined, no intent will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used. */
		classificationThreshold?: number | null;

		/** Required. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. This field cannot be set by the `Update` method. */
		defaultLanguageCode?: string | null;

		/** Optional. The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description?: string | null;

		/** Required. The name of this agent. */
		displayName?: string | null;

		/** Optional. Determines whether this agent should log conversation queries. */
		enableLogging?: boolean | null;

		/** Optional. Determines how intents are detected from user queries. */
		matchMode?: GoogleCloudDialogflowV2AgentMatchMode | null;

		/** Required. The project of this agent. Format: `projects/`. */
		parent?: string | null;

		/** Optional. The list of all languages supported by this agent (except for the `default_language_code`). */
		supportedLanguageCodes?: Array<string>;

		/** Optional. The agent tier. If not specified, TIER_STANDARD is assumed. */
		tier?: GoogleCloudDialogflowV2AgentTier | null;

		/** Required. The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. */
		timeZone?: string | null;
	}

	/** A Dialogflow agent is a virtual agent that handles conversations with your end-users. It is a natural language understanding module that understands the nuances of human language. Dialogflow translates end-user text or audio during a conversation to structured data that your apps and services can understand. You design and build a Dialogflow agent to handle the types of conversations required for your system. For more information about agents, see the [Agent guide](https://cloud.google.com/dialogflow/docs/agents-overview).  */
	export interface GoogleCloudDialogflowV2AgentFormProperties {

		/** Optional. API version displayed in Dialogflow console. If not specified, V2 API is assumed. Clients are free to query different service endpoints for different API versions. However, bots connectors and webhook calls will follow the specified API version. */
		apiVersion: FormControl<GoogleCloudDialogflowV2AgentApiVersion | null | undefined>,

		/** Optional. The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted [Web Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo) integration. */
		avatarUri: FormControl<string | null | undefined>,

		/** Optional. To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a fallback intent will be triggered or, if there are no fallback intents defined, no intent will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used. */
		classificationThreshold: FormControl<number | null | undefined>,

		/** Required. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. This field cannot be set by the `Update` method. */
		defaultLanguageCode: FormControl<string | null | undefined>,

		/** Optional. The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description: FormControl<string | null | undefined>,

		/** Required. The name of this agent. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Determines whether this agent should log conversation queries. */
		enableLogging: FormControl<boolean | null | undefined>,

		/** Optional. Determines how intents are detected from user queries. */
		matchMode: FormControl<GoogleCloudDialogflowV2AgentMatchMode | null | undefined>,

		/** Required. The project of this agent. Format: `projects/`. */
		parent: FormControl<string | null | undefined>,

		/** Optional. The agent tier. If not specified, TIER_STANDARD is assumed. */
		tier: FormControl<GoogleCloudDialogflowV2AgentTier | null | undefined>,

		/** Required. The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. */
		timeZone: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AgentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AgentFormProperties>({
			apiVersion: new FormControl<GoogleCloudDialogflowV2AgentApiVersion | null | undefined>(undefined),
			avatarUri: new FormControl<string | null | undefined>(undefined),
			classificationThreshold: new FormControl<number | null | undefined>(undefined),
			defaultLanguageCode: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			enableLogging: new FormControl<boolean | null | undefined>(undefined),
			matchMode: new FormControl<GoogleCloudDialogflowV2AgentMatchMode | null | undefined>(undefined),
			parent: new FormControl<string | null | undefined>(undefined),
			tier: new FormControl<GoogleCloudDialogflowV2AgentTier | null | undefined>(undefined),
			timeZone: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2AgentApiVersion { API_VERSION_UNSPECIFIED = 0, API_VERSION_V1 = 1, API_VERSION_V2 = 2, API_VERSION_V2_BETA_1 = 3 }

	export enum GoogleCloudDialogflowV2AgentMatchMode { MATCH_MODE_UNSPECIFIED = 0, MATCH_MODE_HYBRID = 1, MATCH_MODE_ML_ONLY = 2 }

	export enum GoogleCloudDialogflowV2AgentTier { TIER_UNSPECIFIED = 0, TIER_STANDARD = 1, TIER_ENTERPRISE = 2, TIER_ENTERPRISE_PLUS = 3 }


	/** Detail feedback of Agent Assist result. */
	export interface GoogleCloudDialogflowV2AgentAssistantFeedback {

		/** Optional. Whether or not the suggested answer is relevant. For example: * Query: "Can I change my mailing address?" * Suggested document says: "Items must be returned/exchanged within 60 days of the purchase date." * answer_relevance: AnswerRelevance.IRRELEVANT */
		answerRelevance?: GoogleCloudDialogflowV2AgentAssistantFeedbackAnswerRelevance | null;

		/** Optional. Whether or not the information in the document is correct. For example: * Query: "Can I return the package in 2 days once received?" * Suggested document says: "Items must be returned/exchanged within 60 days of the purchase date." * Ground truth: "No return or exchange is allowed." * [document_correctness]: INCORRECT */
		documentCorrectness?: GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentCorrectness | null;

		/** Optional. Whether or not the suggested document is efficient. For example, if the document is poorly written, hard to understand, hard to use or too long to find useful information, document_efficiency is DocumentEfficiency.INEFFICIENT. */
		documentEfficiency?: GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentEfficiency | null;

		/** Feedback for knowledge search. */
		knowledgeSearchFeedback?: GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback;

		/** Feedback for conversation summarization. */
		summarizationFeedback?: GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback;
	}

	/** Detail feedback of Agent Assist result. */
	export interface GoogleCloudDialogflowV2AgentAssistantFeedbackFormProperties {

		/** Optional. Whether or not the suggested answer is relevant. For example: * Query: "Can I change my mailing address?" * Suggested document says: "Items must be returned/exchanged within 60 days of the purchase date." * answer_relevance: AnswerRelevance.IRRELEVANT */
		answerRelevance: FormControl<GoogleCloudDialogflowV2AgentAssistantFeedbackAnswerRelevance | null | undefined>,

		/** Optional. Whether or not the information in the document is correct. For example: * Query: "Can I return the package in 2 days once received?" * Suggested document says: "Items must be returned/exchanged within 60 days of the purchase date." * Ground truth: "No return or exchange is allowed." * [document_correctness]: INCORRECT */
		documentCorrectness: FormControl<GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentCorrectness | null | undefined>,

		/** Optional. Whether or not the suggested document is efficient. For example, if the document is poorly written, hard to understand, hard to use or too long to find useful information, document_efficiency is DocumentEfficiency.INEFFICIENT. */
		documentEfficiency: FormControl<GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentEfficiency | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AgentAssistantFeedbackFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AgentAssistantFeedbackFormProperties>({
			answerRelevance: new FormControl<GoogleCloudDialogflowV2AgentAssistantFeedbackAnswerRelevance | null | undefined>(undefined),
			documentCorrectness: new FormControl<GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentCorrectness | null | undefined>(undefined),
			documentEfficiency: new FormControl<GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentEfficiency | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2AgentAssistantFeedbackAnswerRelevance { ANSWER_RELEVANCE_UNSPECIFIED = 0, IRRELEVANT = 1, RELEVANT = 2 }

	export enum GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentCorrectness { DOCUMENT_CORRECTNESS_UNSPECIFIED = 0, INCORRECT = 1, CORRECT = 2 }

	export enum GoogleCloudDialogflowV2AgentAssistantFeedbackDocumentEfficiency { DOCUMENT_EFFICIENCY_UNSPECIFIED = 0, INEFFICIENT = 1, EFFICIENT = 2 }


	/** Feedback for knowledge search. */
	export interface GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback {

		/** Whether the answer was copied by the human agent or not. If the value is set to be true, AnswerFeedback.clicked will be updated to be true. */
		answerCopied?: boolean | null;

		/** The URIs clicked by the human agent. The value is appended for each UpdateAnswerRecordRequest. If the value is not empty, AnswerFeedback.clicked will be updated to be true. */
		clickedUris?: Array<string>;
	}

	/** Feedback for knowledge search. */
	export interface GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedbackFormProperties {

		/** Whether the answer was copied by the human agent or not. If the value is set to be true, AnswerFeedback.clicked will be updated to be true. */
		answerCopied: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedbackFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedbackFormProperties>({
			answerCopied: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Feedback for conversation summarization. */
	export interface GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback {

		/** Timestamp when composing of the summary starts. */
		startTime?: string | null;

		/** Timestamp when the summary was submitted. */
		submitTime?: string | null;

		/** Text of actual submitted summary. */
		summaryText?: string | null;
	}

	/** Feedback for conversation summarization. */
	export interface GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedbackFormProperties {

		/** Timestamp when composing of the summary starts. */
		startTime: FormControl<string | null | undefined>,

		/** Timestamp when the summary was submitted. */
		submitTime: FormControl<string | null | undefined>,

		/** Text of actual submitted summary. */
		summaryText: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedbackFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedbackFormProperties>({
			startTime: new FormControl<string | null | undefined>(undefined),
			submitTime: new FormControl<string | null | undefined>(undefined),
			summaryText: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a record of a human agent assist answer. */
	export interface GoogleCloudDialogflowV2AgentAssistantRecord {

		/** Represents article answer. */
		articleSuggestionAnswer?: GoogleCloudDialogflowV2ArticleAnswer;

		/** Represents a Dialogflow assist answer. */
		dialogflowAssistAnswer?: GoogleCloudDialogflowV2DialogflowAssistAnswer;

		/** Represents answer from "frequently asked questions". */
		faqAnswer?: GoogleCloudDialogflowV2FaqAnswer;
	}

	/** Represents a record of a human agent assist answer. */
	export interface GoogleCloudDialogflowV2AgentAssistantRecordFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2AgentAssistantRecordFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AgentAssistantRecordFormProperties>({
		});

	}


	/** Represents article answer. */
	export interface GoogleCloudDialogflowV2ArticleAnswer {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** Article match confidence. The system's confidence score that this article is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence?: number | null;

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata?: {[id: string]: string };

		/** Article snippets. */
		snippets?: Array<string>;

		/** The article title. */
		title?: string | null;

		/** The article URI. */
		uri?: string | null;
	}

	/** Represents article answer. */
	export interface GoogleCloudDialogflowV2ArticleAnswerFormProperties {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,

		/** Article match confidence. The system's confidence score that this article is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence: FormControl<number | null | undefined>,

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/** The article title. */
		title: FormControl<string | null | undefined>,

		/** The article URI. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ArticleAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ArticleAnswerFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
			confidence: new FormControl<number | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a Dialogflow assist answer. */
	export interface GoogleCloudDialogflowV2DialogflowAssistAnswer {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** Represents an intent suggestion. */
		intentSuggestion?: GoogleCloudDialogflowV2IntentSuggestion;

		/** Represents the result of conversational query or event processing. */
		queryResult?: GoogleCloudDialogflowV2QueryResult;
	}

	/** Represents a Dialogflow assist answer. */
	export interface GoogleCloudDialogflowV2DialogflowAssistAnswerFormProperties {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DialogflowAssistAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DialogflowAssistAnswerFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an intent suggestion. */
	export interface GoogleCloudDialogflowV2IntentSuggestion {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description?: string | null;

		/** The display name of the intent. */
		displayName?: string | null;

		/** The unique identifier of this intent. Format: `projects//locations//agent/intents/`. */
		intentV2?: string | null;
	}

	/** Represents an intent suggestion. */
	export interface GoogleCloudDialogflowV2IntentSuggestionFormProperties {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description: FormControl<string | null | undefined>,

		/** The display name of the intent. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of this intent. Format: `projects//locations//agent/intents/`. */
		intentV2: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentSuggestionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentSuggestionFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			intentV2: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the result of conversational query or event processing. */
	export interface GoogleCloudDialogflowV2QueryResult {

		/** The action name from the matched intent. */
		action?: string | null;

		/** This field is set to: - `false` if the matched intent has required parameters and not all of the required parameter values have been collected. - `true` if all required parameter values have been collected, or if the matched intent doesn't contain any required parameters. */
		allRequiredParamsPresent?: boolean | null;

		/** Indicates whether the conversational query triggers a cancellation for slot filling. For more information, see the [cancel slot filling documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel). */
		cancelsSlotFilling?: boolean | null;

		/** Free-form diagnostic information for the associated detect intent request. The fields of this data can change without notice, so you should not write code that depends on its structure. The data may contain: - webhook call latency - webhook errors */
		diagnosticInfo?: {[id: string]: any };

		/** The collection of rich messages to present to the user. */
		fulfillmentMessages?: Array<GoogleCloudDialogflowV2IntentMessage>;

		/** The text to be pronounced to the user or shown on the screen. Note: This is a legacy field, `fulfillment_messages` should be preferred. */
		fulfillmentText?: string | null;

		/** An intent categorizes an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation. When an end-user writes or says something, referred to as an end-user expression or end-user input, Dialogflow matches the end-user input to the best intent in your agent. Matching an intent is also known as intent classification. For more information, see the [intent guide](https://cloud.google.com/dialogflow/docs/intents-overview). */
		intent?: GoogleCloudDialogflowV2Intent;

		/** The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. If there are `multiple knowledge_answers` messages, this value is set to the greatest `knowledgeAnswers.match_confidence` value in the list. */
		intentDetectionConfidence?: number | null;

		/** The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. */
		languageCode?: string | null;

		/** The collection of output contexts. If applicable, `output_contexts.parameters` contains entries with name `.original` containing the original parameter values before the query. */
		outputContexts?: Array<GoogleCloudDialogflowV2Context>;

		/** The collection of extracted parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters?: {[id: string]: any };

		/** The original conversational query text: - If natural language text was provided as input, `query_text` contains a copy of the input. - If natural language speech audio was provided as input, `query_text` contains the speech recognition result. If speech recognizer produced multiple alternatives, a particular one is picked. - If automatic spell correction is enabled, `query_text` will contain the corrected user input. */
		queryText?: string | null;

		/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
		sentimentAnalysisResult?: GoogleCloudDialogflowV2SentimentAnalysisResult;

		/** The Speech recognition confidence between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. The default of 0.0 is a sentinel value indicating that confidence was not set. This field is not guaranteed to be accurate or set. In particular this field isn't set for StreamingDetectIntent since the streaming endpoint has separate confidence estimates per portion of the audio in StreamingRecognitionResult. */
		speechRecognitionConfidence?: number | null;

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `payload` field returned in the webhook response. */
		webhookPayload?: {[id: string]: any };

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `source` field returned in the webhook response. */
		webhookSource?: string | null;
	}

	/** Represents the result of conversational query or event processing. */
	export interface GoogleCloudDialogflowV2QueryResultFormProperties {

		/** The action name from the matched intent. */
		action: FormControl<string | null | undefined>,

		/** This field is set to: - `false` if the matched intent has required parameters and not all of the required parameter values have been collected. - `true` if all required parameter values have been collected, or if the matched intent doesn't contain any required parameters. */
		allRequiredParamsPresent: FormControl<boolean | null | undefined>,

		/** Indicates whether the conversational query triggers a cancellation for slot filling. For more information, see the [cancel slot filling documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel). */
		cancelsSlotFilling: FormControl<boolean | null | undefined>,

		/** Free-form diagnostic information for the associated detect intent request. The fields of this data can change without notice, so you should not write code that depends on its structure. The data may contain: - webhook call latency - webhook errors */
		diagnosticInfo: FormControl<{[id: string]: any } | null | undefined>,

		/** The text to be pronounced to the user or shown on the screen. Note: This is a legacy field, `fulfillment_messages` should be preferred. */
		fulfillmentText: FormControl<string | null | undefined>,

		/** The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. If there are `multiple knowledge_answers` messages, this value is set to the greatest `knowledgeAnswers.match_confidence` value in the list. */
		intentDetectionConfidence: FormControl<number | null | undefined>,

		/** The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. */
		languageCode: FormControl<string | null | undefined>,

		/** The collection of extracted parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,

		/** The original conversational query text: - If natural language text was provided as input, `query_text` contains a copy of the input. - If natural language speech audio was provided as input, `query_text` contains the speech recognition result. If speech recognizer produced multiple alternatives, a particular one is picked. - If automatic spell correction is enabled, `query_text` will contain the corrected user input. */
		queryText: FormControl<string | null | undefined>,

		/** The Speech recognition confidence between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. The default of 0.0 is a sentinel value indicating that confidence was not set. This field is not guaranteed to be accurate or set. In particular this field isn't set for StreamingDetectIntent since the streaming endpoint has separate confidence estimates per portion of the audio in StreamingRecognitionResult. */
		speechRecognitionConfidence: FormControl<number | null | undefined>,

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `payload` field returned in the webhook response. */
		webhookPayload: FormControl<{[id: string]: any } | null | undefined>,

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `source` field returned in the webhook response. */
		webhookSource: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2QueryResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2QueryResultFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			allRequiredParamsPresent: new FormControl<boolean | null | undefined>(undefined),
			cancelsSlotFilling: new FormControl<boolean | null | undefined>(undefined),
			diagnosticInfo: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			fulfillmentText: new FormControl<string | null | undefined>(undefined),
			intentDetectionConfidence: new FormControl<number | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			queryText: new FormControl<string | null | undefined>(undefined),
			speechRecognitionConfidence: new FormControl<number | null | undefined>(undefined),
			webhookPayload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			webhookSource: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A rich response message. Corresponds to the intent `Response` field in the Dialogflow console. For more information, see [Rich response messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages). */
	export interface GoogleCloudDialogflowV2IntentMessage {

		/** The basic card message. Useful for displaying information. */
		basicCard?: GoogleCloudDialogflowV2IntentMessageBasicCard;

		/** Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel */
		browseCarouselCard?: GoogleCloudDialogflowV2IntentMessageBrowseCarouselCard;

		/** The card response message. */
		card?: GoogleCloudDialogflowV2IntentMessageCard;

		/** The card for presenting a carousel of options to select from. */
		carouselSelect?: GoogleCloudDialogflowV2IntentMessageCarouselSelect;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2IntentMessageImage;

		/** The suggestion chip message that allows the user to jump out to the app or website associated with this agent. */
		linkOutSuggestion?: GoogleCloudDialogflowV2IntentMessageLinkOutSuggestion;

		/** The card for presenting a list of options to select from. */
		listSelect?: GoogleCloudDialogflowV2IntentMessageListSelect;

		/** The media content card for Actions on Google. */
		mediaContent?: GoogleCloudDialogflowV2IntentMessageMediaContent;

		/** A custom platform-specific response. */
		payload?: {[id: string]: any };

		/** Optional. The platform that this message is intended for. */
		platform?: GoogleCloudDialogflowV2IntentMessagePlatform | null;

		/** The quick replies response message. */
		quickReplies?: GoogleCloudDialogflowV2IntentMessageQuickReplies;

		/** The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`. */
		simpleResponses?: GoogleCloudDialogflowV2IntentMessageSimpleResponses;

		/** The collection of suggestions. */
		suggestions?: GoogleCloudDialogflowV2IntentMessageSuggestions;

		/** Table card for Actions on Google. */
		tableCard?: GoogleCloudDialogflowV2IntentMessageTableCard;

		/** The text response message. */
		text?: GoogleCloudDialogflowV2IntentMessageText;
	}

	/** A rich response message. Corresponds to the intent `Response` field in the Dialogflow console. For more information, see [Rich response messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages). */
	export interface GoogleCloudDialogflowV2IntentMessageFormProperties {

		/** A custom platform-specific response. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** Optional. The platform that this message is intended for. */
		platform: FormControl<GoogleCloudDialogflowV2IntentMessagePlatform | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageFormProperties>({
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			platform: new FormControl<GoogleCloudDialogflowV2IntentMessagePlatform | null | undefined>(undefined),
		});

	}


	/** The basic card message. Useful for displaying information. */
	export interface GoogleCloudDialogflowV2IntentMessageBasicCard {

		/** Optional. The collection of card buttons. */
		buttons?: Array<GoogleCloudDialogflowV2IntentMessageBasicCardButton>;

		/** Required, unless image is present. The body text of the card. */
		formattedText?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2IntentMessageImage;

		/** Optional. The subtitle of the card. */
		subtitle?: string | null;

		/** Optional. The title of the card. */
		title?: string | null;
	}

	/** The basic card message. Useful for displaying information. */
	export interface GoogleCloudDialogflowV2IntentMessageBasicCardFormProperties {

		/** Required, unless image is present. The body text of the card. */
		formattedText: FormControl<string | null | undefined>,

		/** Optional. The subtitle of the card. */
		subtitle: FormControl<string | null | undefined>,

		/** Optional. The title of the card. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageBasicCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageBasicCardFormProperties>({
			formattedText: new FormControl<string | null | undefined>(undefined),
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The button object that appears at the bottom of a card. */
	export interface GoogleCloudDialogflowV2IntentMessageBasicCardButton {

		/** Opens the given URI. */
		openUriAction?: GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriAction;

		/** Required. The title of the button. */
		title?: string | null;
	}

	/** The button object that appears at the bottom of a card. */
	export interface GoogleCloudDialogflowV2IntentMessageBasicCardButtonFormProperties {

		/** Required. The title of the button. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageBasicCardButtonFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageBasicCardButtonFormProperties>({
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Opens the given URI. */
	export interface GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriAction {

		/** Required. The HTTP or HTTPS scheme URI. */
		uri?: string | null;
	}

	/** Opens the given URI. */
	export interface GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionFormProperties {

		/** Required. The HTTP or HTTPS scheme URI. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriActionFormProperties>({
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The image response message. */
	export interface GoogleCloudDialogflowV2IntentMessageImage {

		/** Optional. A text description of the image to be used for accessibility, e.g., screen readers. */
		accessibilityText?: string | null;

		/** Optional. The public URI to an image file. */
		imageUri?: string | null;
	}

	/** The image response message. */
	export interface GoogleCloudDialogflowV2IntentMessageImageFormProperties {

		/** Optional. A text description of the image to be used for accessibility, e.g., screen readers. */
		accessibilityText: FormControl<string | null | undefined>,

		/** Optional. The public URI to an image file. */
		imageUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageImageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageImageFormProperties>({
			accessibilityText: new FormControl<string | null | undefined>(undefined),
			imageUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel */
	export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCard {

		/** Optional. Settings for displaying the image. Applies to every image in items. */
		imageDisplayOptions?: GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions | null;

		/** Required. List of items in the Browse Carousel Card. Minimum of two items, maximum of ten. */
		items?: Array<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItem>;
	}

	/** Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel */
	export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardFormProperties {

		/** Optional. Settings for displaying the image. Applies to every image in items. */
		imageDisplayOptions: FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageBrowseCarouselCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardFormProperties>({
			imageDisplayOptions: new FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions { IMAGE_DISPLAY_OPTIONS_UNSPECIFIED = 0, GRAY = 1, WHITE = 2, CROPPED = 3, BLURRED_BACKGROUND = 4 }


	/** Browsing carousel tile */
	export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItem {

		/** Optional. Description of the carousel item. Maximum of four lines of text. */
		description?: string | null;

		/** Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text. */
		footer?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2IntentMessageImage;

		/** Actions on Google action to open a given url. */
		openUriAction?: GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction;

		/** Required. Title of the carousel item. Maximum of two lines of text. */
		title?: string | null;
	}

	/** Browsing carousel tile */
	export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemFormProperties {

		/** Optional. Description of the carousel item. Maximum of four lines of text. */
		description: FormControl<string | null | undefined>,

		/** Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text. */
		footer: FormControl<string | null | undefined>,

		/** Required. Title of the carousel item. Maximum of two lines of text. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			footer: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Actions on Google action to open a given url. */
	export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction {

		/** Required. URL */
		url?: string | null;

		/** Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser. */
		urlTypeHint?: GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint | null;
	}

	/** Actions on Google action to open a given url. */
	export interface GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionFormProperties {

		/** Required. URL */
		url: FormControl<string | null | undefined>,

		/** Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser. */
		urlTypeHint: FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionFormProperties>({
			url: new FormControl<string | null | undefined>(undefined),
			urlTypeHint: new FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint { URL_TYPE_HINT_UNSPECIFIED = 0, AMP_ACTION = 1, AMP_CONTENT = 2 }


	/** The card response message. */
	export interface GoogleCloudDialogflowV2IntentMessageCard {

		/** Optional. The collection of card buttons. */
		buttons?: Array<GoogleCloudDialogflowV2IntentMessageCardButton>;

		/** Optional. The public URI to an image file for the card. */
		imageUri?: string | null;

		/** Optional. The subtitle of the card. */
		subtitle?: string | null;

		/** Optional. The title of the card. */
		title?: string | null;
	}

	/** The card response message. */
	export interface GoogleCloudDialogflowV2IntentMessageCardFormProperties {

		/** Optional. The public URI to an image file for the card. */
		imageUri: FormControl<string | null | undefined>,

		/** Optional. The subtitle of the card. */
		subtitle: FormControl<string | null | undefined>,

		/** Optional. The title of the card. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageCardFormProperties>({
			imageUri: new FormControl<string | null | undefined>(undefined),
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains information about a button. */
	export interface GoogleCloudDialogflowV2IntentMessageCardButton {

		/** Optional. The text to send back to the Dialogflow API or a URI to open. */
		postback?: string | null;

		/** Optional. The text to show on the button. */
		text?: string | null;
	}

	/** Contains information about a button. */
	export interface GoogleCloudDialogflowV2IntentMessageCardButtonFormProperties {

		/** Optional. The text to send back to the Dialogflow API or a URI to open. */
		postback: FormControl<string | null | undefined>,

		/** Optional. The text to show on the button. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageCardButtonFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageCardButtonFormProperties>({
			postback: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The card for presenting a carousel of options to select from. */
	export interface GoogleCloudDialogflowV2IntentMessageCarouselSelect {

		/** Required. Carousel items. */
		items?: Array<GoogleCloudDialogflowV2IntentMessageCarouselSelectItem>;
	}

	/** The card for presenting a carousel of options to select from. */
	export interface GoogleCloudDialogflowV2IntentMessageCarouselSelectFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageCarouselSelectFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageCarouselSelectFormProperties>({
		});

	}


	/** An item in the carousel. */
	export interface GoogleCloudDialogflowV2IntentMessageCarouselSelectItem {

		/** Optional. The body text of the card. */
		description?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2IntentMessageImage;

		/** Additional info about the select item for when it is triggered in a dialog. */
		info?: GoogleCloudDialogflowV2IntentMessageSelectItemInfo;

		/** Required. Title of the carousel item. */
		title?: string | null;
	}

	/** An item in the carousel. */
	export interface GoogleCloudDialogflowV2IntentMessageCarouselSelectItemFormProperties {

		/** Optional. The body text of the card. */
		description: FormControl<string | null | undefined>,

		/** Required. Title of the carousel item. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageCarouselSelectItemFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageCarouselSelectItemFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Additional info about the select item for when it is triggered in a dialog. */
	export interface GoogleCloudDialogflowV2IntentMessageSelectItemInfo {

		/** Required. A unique key that will be sent back to the agent if this response is given. */
		key?: string | null;

		/** Optional. A list of synonyms that can also be used to trigger this item in dialog. */
		synonyms?: Array<string>;
	}

	/** Additional info about the select item for when it is triggered in a dialog. */
	export interface GoogleCloudDialogflowV2IntentMessageSelectItemInfoFormProperties {

		/** Required. A unique key that will be sent back to the agent if this response is given. */
		key: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageSelectItemInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageSelectItemInfoFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The suggestion chip message that allows the user to jump out to the app or website associated with this agent. */
	export interface GoogleCloudDialogflowV2IntentMessageLinkOutSuggestion {

		/** Required. The name of the app or site this chip is linking to. */
		destinationName?: string | null;

		/** Required. The URI of the app or site to open when the user taps the suggestion chip. */
		uri?: string | null;
	}

	/** The suggestion chip message that allows the user to jump out to the app or website associated with this agent. */
	export interface GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionFormProperties {

		/** Required. The name of the app or site this chip is linking to. */
		destinationName: FormControl<string | null | undefined>,

		/** Required. The URI of the app or site to open when the user taps the suggestion chip. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageLinkOutSuggestionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageLinkOutSuggestionFormProperties>({
			destinationName: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The card for presenting a list of options to select from. */
	export interface GoogleCloudDialogflowV2IntentMessageListSelect {

		/** Required. List items. */
		items?: Array<GoogleCloudDialogflowV2IntentMessageListSelectItem>;

		/** Optional. Subtitle of the list. */
		subtitle?: string | null;

		/** Optional. The overall title of the list. */
		title?: string | null;
	}

	/** The card for presenting a list of options to select from. */
	export interface GoogleCloudDialogflowV2IntentMessageListSelectFormProperties {

		/** Optional. Subtitle of the list. */
		subtitle: FormControl<string | null | undefined>,

		/** Optional. The overall title of the list. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageListSelectFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageListSelectFormProperties>({
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An item in the list. */
	export interface GoogleCloudDialogflowV2IntentMessageListSelectItem {

		/** Optional. The main text describing the item. */
		description?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2IntentMessageImage;

		/** Additional info about the select item for when it is triggered in a dialog. */
		info?: GoogleCloudDialogflowV2IntentMessageSelectItemInfo;

		/** Required. The title of the list item. */
		title?: string | null;
	}

	/** An item in the list. */
	export interface GoogleCloudDialogflowV2IntentMessageListSelectItemFormProperties {

		/** Optional. The main text describing the item. */
		description: FormControl<string | null | undefined>,

		/** Required. The title of the list item. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageListSelectItemFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageListSelectItemFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The media content card for Actions on Google. */
	export interface GoogleCloudDialogflowV2IntentMessageMediaContent {

		/** Required. List of media objects. */
		mediaObjects?: Array<GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObject>;

		/** Optional. What type of media is the content (ie "audio"). */
		mediaType?: GoogleCloudDialogflowV2IntentMessageMediaContentMediaType | null;
	}

	/** The media content card for Actions on Google. */
	export interface GoogleCloudDialogflowV2IntentMessageMediaContentFormProperties {

		/** Optional. What type of media is the content (ie "audio"). */
		mediaType: FormControl<GoogleCloudDialogflowV2IntentMessageMediaContentMediaType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageMediaContentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageMediaContentFormProperties>({
			mediaType: new FormControl<GoogleCloudDialogflowV2IntentMessageMediaContentMediaType | null | undefined>(undefined),
		});

	}


	/** Response media object for media content card. */
	export interface GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObject {

		/** Required. Url where the media is stored. */
		contentUrl?: string | null;

		/** Optional. Description of media card. */
		description?: string | null;

		/** The image response message. */
		icon?: GoogleCloudDialogflowV2IntentMessageImage;

		/** The image response message. */
		largeImage?: GoogleCloudDialogflowV2IntentMessageImage;

		/** Required. Name of media card. */
		name?: string | null;
	}

	/** Response media object for media content card. */
	export interface GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectFormProperties {

		/** Required. Url where the media is stored. */
		contentUrl: FormControl<string | null | undefined>,

		/** Optional. Description of media card. */
		description: FormControl<string | null | undefined>,

		/** Required. Name of media card. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObjectFormProperties>({
			contentUrl: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2IntentMessageMediaContentMediaType { RESPONSE_MEDIA_TYPE_UNSPECIFIED = 0, AUDIO = 1 }

	export enum GoogleCloudDialogflowV2IntentMessagePlatform { PLATFORM_UNSPECIFIED = 0, FACEBOOK = 1, SLACK = 2, TELEGRAM = 3, KIK = 4, SKYPE = 5, LINE = 6, VIBER = 7, ACTIONS_ON_GOOGLE = 8, GOOGLE_HANGOUTS = 9 }


	/** The quick replies response message. */
	export interface GoogleCloudDialogflowV2IntentMessageQuickReplies {

		/** Optional. The collection of quick replies. */
		quickReplies?: Array<string>;

		/** Optional. The title of the collection of quick replies. */
		title?: string | null;
	}

	/** The quick replies response message. */
	export interface GoogleCloudDialogflowV2IntentMessageQuickRepliesFormProperties {

		/** Optional. The title of the collection of quick replies. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageQuickRepliesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageQuickRepliesFormProperties>({
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`. */
	export interface GoogleCloudDialogflowV2IntentMessageSimpleResponses {

		/** Required. The list of simple responses. */
		simpleResponses?: Array<GoogleCloudDialogflowV2IntentMessageSimpleResponse>;
	}

	/** The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`. */
	export interface GoogleCloudDialogflowV2IntentMessageSimpleResponsesFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageSimpleResponsesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageSimpleResponsesFormProperties>({
		});

	}


	/** The simple response message containing speech or text. */
	export interface GoogleCloudDialogflowV2IntentMessageSimpleResponse {

		/** Optional. The text to display. */
		displayText?: string | null;

		/** One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech. */
		ssml?: string | null;

		/** One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml. */
		textToSpeech?: string | null;
	}

	/** The simple response message containing speech or text. */
	export interface GoogleCloudDialogflowV2IntentMessageSimpleResponseFormProperties {

		/** Optional. The text to display. */
		displayText: FormControl<string | null | undefined>,

		/** One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech. */
		ssml: FormControl<string | null | undefined>,

		/** One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml. */
		textToSpeech: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageSimpleResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageSimpleResponseFormProperties>({
			displayText: new FormControl<string | null | undefined>(undefined),
			ssml: new FormControl<string | null | undefined>(undefined),
			textToSpeech: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The collection of suggestions. */
	export interface GoogleCloudDialogflowV2IntentMessageSuggestions {

		/** Required. The list of suggested replies. */
		suggestions?: Array<GoogleCloudDialogflowV2IntentMessageSuggestion>;
	}

	/** The collection of suggestions. */
	export interface GoogleCloudDialogflowV2IntentMessageSuggestionsFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageSuggestionsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageSuggestionsFormProperties>({
		});

	}


	/** The suggestion chip message that the user can tap to quickly post a reply to the conversation. */
	export interface GoogleCloudDialogflowV2IntentMessageSuggestion {

		/** Required. The text shown the in the suggestion chip. */
		title?: string | null;
	}

	/** The suggestion chip message that the user can tap to quickly post a reply to the conversation. */
	export interface GoogleCloudDialogflowV2IntentMessageSuggestionFormProperties {

		/** Required. The text shown the in the suggestion chip. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageSuggestionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageSuggestionFormProperties>({
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Table card for Actions on Google. */
	export interface GoogleCloudDialogflowV2IntentMessageTableCard {

		/** Optional. List of buttons for the card. */
		buttons?: Array<GoogleCloudDialogflowV2IntentMessageBasicCardButton>;

		/** Optional. Display properties for the columns in this table. */
		columnProperties?: Array<GoogleCloudDialogflowV2IntentMessageColumnProperties>;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2IntentMessageImage;

		/** Optional. Rows in this table of data. */
		rows?: Array<GoogleCloudDialogflowV2IntentMessageTableCardRow>;

		/** Optional. Subtitle to the title. */
		subtitle?: string | null;

		/** Required. Title of the card. */
		title?: string | null;
	}

	/** Table card for Actions on Google. */
	export interface GoogleCloudDialogflowV2IntentMessageTableCardFormProperties {

		/** Optional. Subtitle to the title. */
		subtitle: FormControl<string | null | undefined>,

		/** Required. Title of the card. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageTableCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageTableCardFormProperties>({
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Column properties for TableCard. */
	export interface GoogleCloudDialogflowV2IntentMessageColumnProperties {

		/** Required. Column heading. */
		header?: string | null;

		/** Optional. Defines text alignment for all cells in this column. */
		horizontalAlignment?: GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment | null;
	}

	/** Column properties for TableCard. */
	export interface GoogleCloudDialogflowV2IntentMessageColumnPropertiesFormProperties {

		/** Required. Column heading. */
		header: FormControl<string | null | undefined>,

		/** Optional. Defines text alignment for all cells in this column. */
		horizontalAlignment: FormControl<GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageColumnPropertiesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageColumnPropertiesFormProperties>({
			header: new FormControl<string | null | undefined>(undefined),
			horizontalAlignment: new FormControl<GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment { HORIZONTAL_ALIGNMENT_UNSPECIFIED = 0, LEADING = 1, CENTER = 2, TRAILING = 3 }


	/** Row of TableCard. */
	export interface GoogleCloudDialogflowV2IntentMessageTableCardRow {

		/** Optional. List of cells that make up this row. */
		cells?: Array<GoogleCloudDialogflowV2IntentMessageTableCardCell>;

		/** Optional. Whether to add a visual divider after this row. */
		dividerAfter?: boolean | null;
	}

	/** Row of TableCard. */
	export interface GoogleCloudDialogflowV2IntentMessageTableCardRowFormProperties {

		/** Optional. Whether to add a visual divider after this row. */
		dividerAfter: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageTableCardRowFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageTableCardRowFormProperties>({
			dividerAfter: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Cell of TableCardRow. */
	export interface GoogleCloudDialogflowV2IntentMessageTableCardCell {

		/** Required. Text in this cell. */
		text?: string | null;
	}

	/** Cell of TableCardRow. */
	export interface GoogleCloudDialogflowV2IntentMessageTableCardCellFormProperties {

		/** Required. Text in this cell. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageTableCardCellFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageTableCardCellFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The text response message. */
	export interface GoogleCloudDialogflowV2IntentMessageText {

		/** Optional. The collection of the agent's responses. */
		text?: Array<string>;
	}

	/** The text response message. */
	export interface GoogleCloudDialogflowV2IntentMessageTextFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2IntentMessageTextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentMessageTextFormProperties>({
		});

	}


	/** An intent categorizes an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation. When an end-user writes or says something, referred to as an end-user expression or end-user input, Dialogflow matches the end-user input to the best intent in your agent. Matching an intent is also known as intent classification. For more information, see the [intent guide](https://cloud.google.com/dialogflow/docs/intents-overview). */
	export interface GoogleCloudDialogflowV2Intent {

		/** Optional. The name of the action associated with the intent. Note: The action name must not contain whitespaces. */
		action?: string | null;

		/** Optional. The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform). */
		defaultResponsePlatforms?: Array<GoogleCloudDialogflowV2IntentMessagePlatform>;

		/** Required. The name of this intent. */
		displayName?: string | null;

		/** Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false. */
		endInteraction?: boolean | null;

		/** Optional. The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the contexts must be present in the active user session for an event to trigger this intent. Event names are limited to 150 characters. */
		events?: Array<string>;

		/** Output only. Read-only. Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only in the output. */
		followupIntentInfo?: Array<GoogleCloudDialogflowV2IntentFollowupIntentInfo>;

		/** Optional. The list of context names required for this intent to be triggered. Format: `projects//agent/sessions/-/contexts/`. */
		inputContextNames?: Array<string>;

		/** Optional. Indicates whether this is a fallback intent. */
		isFallback?: boolean | null;

		/** Optional. Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false. */
		liveAgentHandoff?: boolean | null;

		/** Optional. The collection of rich messages corresponding to the `Response` field in the Dialogflow console. */
		messages?: Array<GoogleCloudDialogflowV2IntentMessage>;

		/** Optional. Indicates whether Machine Learning is disabled for the intent. Note: If `ml_disabled` setting is set to true, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off. */
		mlDisabled?: boolean | null;

		/** Optional. The unique identifier of this intent. Required for Intents.UpdateIntent and Intents.BatchUpdateIntents methods. Format: `projects//agent/intents/`. */
		name?: string | null;

		/** Optional. The collection of contexts that are activated when the intent is matched. Context messages in this collection should not set the parameters field. Setting the `lifespan_count` to 0 will reset the context when the intent is matched. Format: `projects//agent/sessions/-/contexts/`. */
		outputContexts?: Array<GoogleCloudDialogflowV2Context>;

		/** Optional. The collection of parameters associated with the intent. */
		parameters?: Array<GoogleCloudDialogflowV2IntentParameter>;

		/** Read-only after creation. The unique identifier of the parent intent in the chain of followup intents. You can set this field when creating an intent, for example with CreateIntent or BatchUpdateIntents, in order to make this intent a followup intent. It identifies the parent followup intent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName?: string | null;

		/** Optional. The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority?: number | null;

		/** Optional. Indicates whether to delete all contexts in the current session when this intent is matched. */
		resetContexts?: boolean | null;

		/** Output only. Read-only. The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents chain for this intent. We populate this field only in the output. Format: `projects//agent/intents/`. */
		rootFollowupIntentName?: string | null;

		/** Optional. The collection of examples that the agent is trained on. */
		trainingPhrases?: Array<GoogleCloudDialogflowV2IntentTrainingPhrase>;

		/** Optional. Indicates whether webhooks are enabled for the intent. */
		webhookState?: GoogleCloudDialogflowV2IntentWebhookState | null;
	}

	/** An intent categorizes an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation. When an end-user writes or says something, referred to as an end-user expression or end-user input, Dialogflow matches the end-user input to the best intent in your agent. Matching an intent is also known as intent classification. For more information, see the [intent guide](https://cloud.google.com/dialogflow/docs/intents-overview). */
	export interface GoogleCloudDialogflowV2IntentFormProperties {

		/** Optional. The name of the action associated with the intent. Note: The action name must not contain whitespaces. */
		action: FormControl<string | null | undefined>,

		/** Required. The name of this intent. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false. */
		endInteraction: FormControl<boolean | null | undefined>,

		/** Optional. Indicates whether this is a fallback intent. */
		isFallback: FormControl<boolean | null | undefined>,

		/** Optional. Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false. */
		liveAgentHandoff: FormControl<boolean | null | undefined>,

		/** Optional. Indicates whether Machine Learning is disabled for the intent. Note: If `ml_disabled` setting is set to true, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off. */
		mlDisabled: FormControl<boolean | null | undefined>,

		/** Optional. The unique identifier of this intent. Required for Intents.UpdateIntent and Intents.BatchUpdateIntents methods. Format: `projects//agent/intents/`. */
		name: FormControl<string | null | undefined>,

		/** Read-only after creation. The unique identifier of the parent intent in the chain of followup intents. You can set this field when creating an intent, for example with CreateIntent or BatchUpdateIntents, in order to make this intent a followup intent. It identifies the parent followup intent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName: FormControl<string | null | undefined>,

		/** Optional. The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority: FormControl<number | null | undefined>,

		/** Optional. Indicates whether to delete all contexts in the current session when this intent is matched. */
		resetContexts: FormControl<boolean | null | undefined>,

		/** Output only. Read-only. The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents chain for this intent. We populate this field only in the output. Format: `projects//agent/intents/`. */
		rootFollowupIntentName: FormControl<string | null | undefined>,

		/** Optional. Indicates whether webhooks are enabled for the intent. */
		webhookState: FormControl<GoogleCloudDialogflowV2IntentWebhookState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			endInteraction: new FormControl<boolean | null | undefined>(undefined),
			isFallback: new FormControl<boolean | null | undefined>(undefined),
			liveAgentHandoff: new FormControl<boolean | null | undefined>(undefined),
			mlDisabled: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parentFollowupIntentName: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
			resetContexts: new FormControl<boolean | null | undefined>(undefined),
			rootFollowupIntentName: new FormControl<string | null | undefined>(undefined),
			webhookState: new FormControl<GoogleCloudDialogflowV2IntentWebhookState | null | undefined>(undefined),
		});

	}


	/** Represents a single followup intent in the chain. */
	export interface GoogleCloudDialogflowV2IntentFollowupIntentInfo {

		/** The unique identifier of the followup intent. Format: `projects//agent/intents/`. */
		followupIntentName?: string | null;

		/** The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName?: string | null;
	}

	/** Represents a single followup intent in the chain. */
	export interface GoogleCloudDialogflowV2IntentFollowupIntentInfoFormProperties {

		/** The unique identifier of the followup intent. Format: `projects//agent/intents/`. */
		followupIntentName: FormControl<string | null | undefined>,

		/** The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentFollowupIntentInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentFollowupIntentInfoFormProperties>({
			followupIntentName: new FormControl<string | null | undefined>(undefined),
			parentFollowupIntentName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dialogflow contexts are similar to natural language context. If a person says to you "they are orange", you need context in order to understand what "they" is referring to. Similarly, for Dialogflow to handle an end-user expression like that, it needs to be provided with context in order to correctly match an intent. Using contexts, you can control the flow of a conversation. You can configure contexts for an intent by setting input and output contexts, which are identified by string names. When an intent is matched, any configured output contexts for that intent become active. While any contexts are active, Dialogflow is more likely to match intents that are configured with input contexts that correspond to the currently active contexts. For more information about context, see the [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview). */
	export interface GoogleCloudDialogflowV2Context {

		/** Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries. */
		lifespanCount?: number | null;

		/** Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size` */
		name?: string | null;

		/** Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters?: {[id: string]: any };
	}

	/** Dialogflow contexts are similar to natural language context. If a person says to you "they are orange", you need context in order to understand what "they" is referring to. Similarly, for Dialogflow to handle an end-user expression like that, it needs to be provided with context in order to correctly match an intent. Using contexts, you can control the flow of a conversation. You can configure contexts for an intent by setting input and output contexts, which are identified by string names. When an intent is matched, any configured output contexts for that intent become active. While any contexts are active, Dialogflow is more likely to match intents that are configured with input contexts that correspond to the currently active contexts. For more information about context, see the [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview). */
	export interface GoogleCloudDialogflowV2ContextFormProperties {

		/** Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries. */
		lifespanCount: FormControl<number | null | undefined>,

		/** Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size` */
		name: FormControl<string | null | undefined>,

		/** Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ContextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ContextFormProperties>({
			lifespanCount: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Represents intent parameters. */
	export interface GoogleCloudDialogflowV2IntentParameter {

		/** Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`. */
		defaultValue?: string | null;

		/** Required. The name of the parameter. */
		displayName?: string | null;

		/** Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided. */
		entityTypeDisplayName?: string | null;

		/** Optional. Indicates whether the parameter represents a list of values. */
		isList?: boolean | null;

		/** Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value. */
		mandatory?: boolean | null;

		/** The unique identifier of this parameter. */
		name?: string | null;

		/** Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter. */
		prompts?: Array<string>;

		/** Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`. */
		value?: string | null;
	}

	/** Represents intent parameters. */
	export interface GoogleCloudDialogflowV2IntentParameterFormProperties {

		/** Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`. */
		defaultValue: FormControl<string | null | undefined>,

		/** Required. The name of the parameter. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided. */
		entityTypeDisplayName: FormControl<string | null | undefined>,

		/** Optional. Indicates whether the parameter represents a list of values. */
		isList: FormControl<boolean | null | undefined>,

		/** Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value. */
		mandatory: FormControl<boolean | null | undefined>,

		/** The unique identifier of this parameter. */
		name: FormControl<string | null | undefined>,

		/** Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentParameterFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentParameterFormProperties>({
			defaultValue: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			entityTypeDisplayName: new FormControl<string | null | undefined>(undefined),
			isList: new FormControl<boolean | null | undefined>(undefined),
			mandatory: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an example that the agent is trained on. */
	export interface GoogleCloudDialogflowV2IntentTrainingPhrase {

		/** Output only. The unique identifier of this training phrase. */
		name?: string | null;

		/** Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set. */
		parts?: Array<GoogleCloudDialogflowV2IntentTrainingPhrasePart>;

		/** Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased. */
		timesAddedCount?: number | null;

		/** Required. The type of the training phrase. */
		type?: GoogleCloudDialogflowV2IntentTrainingPhraseType | null;
	}

	/** Represents an example that the agent is trained on. */
	export interface GoogleCloudDialogflowV2IntentTrainingPhraseFormProperties {

		/** Output only. The unique identifier of this training phrase. */
		name: FormControl<string | null | undefined>,

		/** Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased. */
		timesAddedCount: FormControl<number | null | undefined>,

		/** Required. The type of the training phrase. */
		type: FormControl<GoogleCloudDialogflowV2IntentTrainingPhraseType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentTrainingPhraseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentTrainingPhraseFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			timesAddedCount: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<GoogleCloudDialogflowV2IntentTrainingPhraseType | null | undefined>(undefined),
		});

	}


	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowV2IntentTrainingPhrasePart {

		/** Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase. */
		alias?: string | null;

		/** Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase. */
		entityType?: string | null;

		/** Required. The text for this part. */
		text?: string | null;

		/** Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true. */
		userDefined?: boolean | null;
	}

	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowV2IntentTrainingPhrasePartFormProperties {

		/** Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase. */
		alias: FormControl<string | null | undefined>,

		/** Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase. */
		entityType: FormControl<string | null | undefined>,

		/** Required. The text for this part. */
		text: FormControl<string | null | undefined>,

		/** Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true. */
		userDefined: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2IntentTrainingPhrasePartFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentTrainingPhrasePartFormProperties>({
			alias: new FormControl<string | null | undefined>(undefined),
			entityType: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
			userDefined: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2IntentTrainingPhraseType { TYPE_UNSPECIFIED = 0, EXAMPLE = 1, TEMPLATE = 2 }

	export enum GoogleCloudDialogflowV2IntentWebhookState { WEBHOOK_STATE_UNSPECIFIED = 0, WEBHOOK_STATE_ENABLED = 1, WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING = 2 }


	/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
	export interface GoogleCloudDialogflowV2SentimentAnalysisResult {

		/** The sentiment, such as positive/negative feeling or association, for a unit of analysis, such as the query text. See: https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values for how to interpret the result. */
		queryTextSentiment?: GoogleCloudDialogflowV2Sentiment;
	}

	/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
	export interface GoogleCloudDialogflowV2SentimentAnalysisResultFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2SentimentAnalysisResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SentimentAnalysisResultFormProperties>({
		});

	}


	/** The sentiment, such as positive/negative feeling or association, for a unit of analysis, such as the query text. See: https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values for how to interpret the result. */
	export interface GoogleCloudDialogflowV2Sentiment {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude?: number | null;

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score?: number | null;
	}

	/** The sentiment, such as positive/negative feeling or association, for a unit of analysis, such as the query text. See: https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values for how to interpret the result. */
	export interface GoogleCloudDialogflowV2SentimentFormProperties {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude: FormControl<number | null | undefined>,

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SentimentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SentimentFormProperties>({
			magnitude: new FormControl<number | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents answer from "frequently asked questions". */
	export interface GoogleCloudDialogflowV2FaqAnswer {

		/** The piece of text from the `source` knowledge base document. */
		answer?: string | null;

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** The system's confidence score that this Knowledge answer is a good match for this conversational query, range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence?: number | null;

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata?: {[id: string]: string };

		/** The corresponding FAQ question. */
		question?: string | null;

		/** Indicates which Knowledge Document this answer was extracted from. Format: `projects//locations//agent/knowledgeBases//documents/`. */
		source?: string | null;
	}

	/** Represents answer from "frequently asked questions". */
	export interface GoogleCloudDialogflowV2FaqAnswerFormProperties {

		/** The piece of text from the `source` knowledge base document. */
		answer: FormControl<string | null | undefined>,

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,

		/** The system's confidence score that this Knowledge answer is a good match for this conversational query, range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence: FormControl<number | null | undefined>,

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/** The corresponding FAQ question. */
		question: FormControl<string | null | undefined>,

		/** Indicates which Knowledge Document this answer was extracted from. Format: `projects//locations//agent/knowledgeBases//documents/`. */
		source: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2FaqAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2FaqAnswerFormProperties>({
			answer: new FormControl<string | null | undefined>(undefined),
			answerRecord: new FormControl<string | null | undefined>(undefined),
			confidence: new FormControl<number | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			question: new FormControl<string | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Participants.AnalyzeContent. */
	export interface GoogleCloudDialogflowV2AnalyzeContentRequest {

		/** Represents the parameters of human assist query. */
		assistQueryParams?: GoogleCloudDialogflowV2AssistQueryParameters;

		/** Additional parameters to be put into Dialogflow CX session parameters. To remove a parameter from the session, clients should explicitly set the parameter value to null. Note: this field should only be used if you are connecting to a Dialogflow CX agent. */
		cxParameters?: {[id: string]: any };

		/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
		eventInput?: GoogleCloudDialogflowV2EventInput;

		/** Represents the parameters of the conversational query. */
		queryParams?: GoogleCloudDialogflowV2QueryParameters;

		/** Instructs the speech synthesizer on how to generate the output audio content. If this audio config is supplied in a request, it overrides all existing text-to-speech settings applied to the agent. */
		replyAudioConfig?: GoogleCloudDialogflowV2OutputAudioConfig;

		/** A unique identifier for this request. Restricted to 36 ASCII characters. A random UUID is recommended. This request is only idempotent if a `request_id` is provided. */
		requestId?: string | null;

		/** Represents the selection of a suggestion. */
		suggestionInput?: GoogleCloudDialogflowV2SuggestionInput;

		/** Auxiliary proto messages. Represents the natural language text to be processed. */
		textInput?: GoogleCloudDialogflowV2TextInput;
	}

	/** The request message for Participants.AnalyzeContent. */
	export interface GoogleCloudDialogflowV2AnalyzeContentRequestFormProperties {

		/** Additional parameters to be put into Dialogflow CX session parameters. To remove a parameter from the session, clients should explicitly set the parameter value to null. Note: this field should only be used if you are connecting to a Dialogflow CX agent. */
		cxParameters: FormControl<{[id: string]: any } | null | undefined>,

		/** A unique identifier for this request. Restricted to 36 ASCII characters. A random UUID is recommended. This request is only idempotent if a `request_id` is provided. */
		requestId: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AnalyzeContentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AnalyzeContentRequestFormProperties>({
			cxParameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			requestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the parameters of human assist query. */
	export interface GoogleCloudDialogflowV2AssistQueryParameters {

		/** Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: "market" value: "US,CA" } documents_metadata_filters { key: "user" value: "agent" } ``` */
		documentsMetadataFilters?: {[id: string]: string };
	}

	/** Represents the parameters of human assist query. */
	export interface GoogleCloudDialogflowV2AssistQueryParametersFormProperties {

		/** Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: "market" value: "US,CA" } documents_metadata_filters { key: "user" value: "agent" } ``` */
		documentsMetadataFilters: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AssistQueryParametersFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AssistQueryParametersFormProperties>({
			documentsMetadataFilters: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
	export interface GoogleCloudDialogflowV2EventInput {

		/** Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request. */
		languageCode?: string | null;

		/** Required. The unique identifier of the event. */
		name?: string | null;

		/** The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters?: {[id: string]: any };
	}

	/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
	export interface GoogleCloudDialogflowV2EventInputFormProperties {

		/** Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request. */
		languageCode: FormControl<string | null | undefined>,

		/** Required. The unique identifier of the event. */
		name: FormControl<string | null | undefined>,

		/** The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EventInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EventInputFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Represents the parameters of the conversational query. */
	export interface GoogleCloudDialogflowV2QueryParameters {

		/** The collection of contexts to be activated before this query is executed. */
		contexts?: Array<GoogleCloudDialogflowV2Context>;

		/** An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges. */
		geoLocation?: GoogleTypeLatLng;

		/** This field can be used to pass custom data to your webhook. Arbitrary JSON objects are supported. If supplied, the value is used to populate the `WebhookRequest.original_detect_intent_request.payload` field sent to your webhook. */
		payload?: {[id: string]: any };

		/** The platform of the virtual agent response messages. If not empty, only emits messages from this platform in the response. Valid values are the enum names of platform. */
		platform?: string | null;

		/** Specifies whether to delete all contexts in the current session before the new ones are activated. */
		resetContexts?: boolean | null;

		/** Configures the types of sentiment analysis to perform. */
		sentimentAnalysisRequestConfig?: GoogleCloudDialogflowV2SentimentAnalysisRequestConfig;

		/** Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session of this query. */
		sessionEntityTypes?: Array<GoogleCloudDialogflowV2SessionEntityType>;

		/** The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in agent settings is used. */
		timeZone?: string | null;

		/** This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through the Dialogflow web console. The headers defined within this field will overwrite the headers configured through the Dialogflow console if there is a conflict. Header names are case-insensitive. Google's specified headers are not allowed. Including: "Host", "Content-Length", "Connection", "From", "User-Agent", "Accept-Encoding", "If-Modified-Since", "If-None-Match", "X-Forwarded-For", etc. */
		webhookHeaders?: {[id: string]: string };
	}

	/** Represents the parameters of the conversational query. */
	export interface GoogleCloudDialogflowV2QueryParametersFormProperties {

		/** This field can be used to pass custom data to your webhook. Arbitrary JSON objects are supported. If supplied, the value is used to populate the `WebhookRequest.original_detect_intent_request.payload` field sent to your webhook. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** The platform of the virtual agent response messages. If not empty, only emits messages from this platform in the response. Valid values are the enum names of platform. */
		platform: FormControl<string | null | undefined>,

		/** Specifies whether to delete all contexts in the current session before the new ones are activated. */
		resetContexts: FormControl<boolean | null | undefined>,

		/** The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in agent settings is used. */
		timeZone: FormControl<string | null | undefined>,

		/** This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through the Dialogflow web console. The headers defined within this field will overwrite the headers configured through the Dialogflow console if there is a conflict. Header names are case-insensitive. Google's specified headers are not allowed. Including: "Host", "Content-Length", "Connection", "From", "User-Agent", "Accept-Encoding", "If-Modified-Since", "If-None-Match", "X-Forwarded-For", etc. */
		webhookHeaders: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2QueryParametersFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2QueryParametersFormProperties>({
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			platform: new FormControl<string | null | undefined>(undefined),
			resetContexts: new FormControl<boolean | null | undefined>(undefined),
			timeZone: new FormControl<string | null | undefined>(undefined),
			webhookHeaders: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges. */
	export interface GoogleTypeLatLng {

		/** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
		latitude?: number | null;

		/** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
		longitude?: number | null;
	}

	/** An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges. */
	export interface GoogleTypeLatLngFormProperties {

		/** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
		longitude: FormControl<number | null | undefined>,
	}
	export function CreateGoogleTypeLatLngFormGroup() {
		return new FormGroup<GoogleTypeLatLngFormProperties>({
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Configures the types of sentiment analysis to perform. */
	export interface GoogleCloudDialogflowV2SentimentAnalysisRequestConfig {

		/** Instructs the service to perform sentiment analysis on `query_text`. If not provided, sentiment analysis is not performed on `query_text`. */
		analyzeQueryTextSentiment?: boolean | null;
	}

	/** Configures the types of sentiment analysis to perform. */
	export interface GoogleCloudDialogflowV2SentimentAnalysisRequestConfigFormProperties {

		/** Instructs the service to perform sentiment analysis on `query_text`. If not provided, sentiment analysis is not performed on `query_text`. */
		analyzeQueryTextSentiment: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SentimentAnalysisRequestConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SentimentAnalysisRequestConfigFormProperties>({
			analyzeQueryTextSentiment: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A session represents a conversation between a Dialogflow agent and an end-user. You can create special entities, called session entities, during a session. Session entities can extend or replace custom entity types and only exist during the session that they were created for. All session data, including session entities, is stored by Dialogflow for 20 minutes. For more information, see the [session entity guide](https://cloud.google.com/dialogflow/docs/entities-session). */
	export interface GoogleCloudDialogflowV2SessionEntityType {

		/** Required. The collection of entities associated with this session entity type. */
		entities?: Array<GoogleCloudDialogflowV2EntityTypeEntity>;

		/** Required. Indicates whether the additional data should override or supplement the custom entity type definition. */
		entityOverrideMode?: GoogleCloudDialogflowV2SessionEntityTypeEntityOverrideMode | null;

		/** Required. The unique identifier of this session entity type. Format: `projects//agent/sessions//entityTypes/`, or `projects//agent/environments//users//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. `` must be the display name of an existing entity type in the same agent that will be overridden or supplemented. */
		name?: string | null;
	}

	/** A session represents a conversation between a Dialogflow agent and an end-user. You can create special entities, called session entities, during a session. Session entities can extend or replace custom entity types and only exist during the session that they were created for. All session data, including session entities, is stored by Dialogflow for 20 minutes. For more information, see the [session entity guide](https://cloud.google.com/dialogflow/docs/entities-session). */
	export interface GoogleCloudDialogflowV2SessionEntityTypeFormProperties {

		/** Required. Indicates whether the additional data should override or supplement the custom entity type definition. */
		entityOverrideMode: FormControl<GoogleCloudDialogflowV2SessionEntityTypeEntityOverrideMode | null | undefined>,

		/** Required. The unique identifier of this session entity type. Format: `projects//agent/sessions//entityTypes/`, or `projects//agent/environments//users//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. `` must be the display name of an existing entity type in the same agent that will be overridden or supplemented. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SessionEntityTypeFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SessionEntityTypeFormProperties>({
			entityOverrideMode: new FormControl<GoogleCloudDialogflowV2SessionEntityTypeEntityOverrideMode | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An **entity entry** for an associated entity type. */
	export interface GoogleCloudDialogflowV2EntityTypeEntity {

		/** Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`. */
		synonyms?: Array<string>;

		/** Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases). */
		value?: string | null;
	}

	/** An **entity entry** for an associated entity type. */
	export interface GoogleCloudDialogflowV2EntityTypeEntityFormProperties {

		/** Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases). */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EntityTypeEntityFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EntityTypeEntityFormProperties>({
			value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2SessionEntityTypeEntityOverrideMode { ENTITY_OVERRIDE_MODE_UNSPECIFIED = 0, ENTITY_OVERRIDE_MODE_OVERRIDE = 1, ENTITY_OVERRIDE_MODE_SUPPLEMENT = 2 }


	/** Instructs the speech synthesizer on how to generate the output audio content. If this audio config is supplied in a request, it overrides all existing text-to-speech settings applied to the agent. */
	export interface GoogleCloudDialogflowV2OutputAudioConfig {

		/** Required. Audio encoding of the synthesized audio content. */
		audioEncoding?: GoogleCloudDialogflowV2OutputAudioConfigAudioEncoding | null;

		/** The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality). */
		sampleRateHertz?: number | null;

		/** Configuration of how speech should be synthesized. */
		synthesizeSpeechConfig?: GoogleCloudDialogflowV2SynthesizeSpeechConfig;
	}

	/** Instructs the speech synthesizer on how to generate the output audio content. If this audio config is supplied in a request, it overrides all existing text-to-speech settings applied to the agent. */
	export interface GoogleCloudDialogflowV2OutputAudioConfigFormProperties {

		/** Required. Audio encoding of the synthesized audio content. */
		audioEncoding: FormControl<GoogleCloudDialogflowV2OutputAudioConfigAudioEncoding | null | undefined>,

		/** The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality). */
		sampleRateHertz: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2OutputAudioConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2OutputAudioConfigFormProperties>({
			audioEncoding: new FormControl<GoogleCloudDialogflowV2OutputAudioConfigAudioEncoding | null | undefined>(undefined),
			sampleRateHertz: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2OutputAudioConfigAudioEncoding { OUTPUT_AUDIO_ENCODING_UNSPECIFIED = 0, OUTPUT_AUDIO_ENCODING_LINEAR_16 = 1, OUTPUT_AUDIO_ENCODING_MP3 = 2, OUTPUT_AUDIO_ENCODING_MP3_64_KBPS = 3, OUTPUT_AUDIO_ENCODING_OGG_OPUS = 4, OUTPUT_AUDIO_ENCODING_MULAW = 5 }


	/** Configuration of how speech should be synthesized. */
	export interface GoogleCloudDialogflowV2SynthesizeSpeechConfig {

		/** Optional. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. */
		effectsProfileId?: Array<string>;

		/** Optional. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch. */
		pitch?: number | null;

		/** Optional. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error. */
		speakingRate?: number | null;

		/** Description of which voice to use for speech synthesis. */
		voice?: GoogleCloudDialogflowV2VoiceSelectionParams;

		/** Optional. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. We strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that. */
		volumeGainDb?: number | null;
	}

	/** Configuration of how speech should be synthesized. */
	export interface GoogleCloudDialogflowV2SynthesizeSpeechConfigFormProperties {

		/** Optional. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch. */
		pitch: FormControl<number | null | undefined>,

		/** Optional. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error. */
		speakingRate: FormControl<number | null | undefined>,

		/** Optional. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. We strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that. */
		volumeGainDb: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SynthesizeSpeechConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SynthesizeSpeechConfigFormProperties>({
			pitch: new FormControl<number | null | undefined>(undefined),
			speakingRate: new FormControl<number | null | undefined>(undefined),
			volumeGainDb: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Description of which voice to use for speech synthesis. */
	export interface GoogleCloudDialogflowV2VoiceSelectionParams {

		/** Optional. The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and ssml_gender. */
		name?: string | null;

		/** Optional. The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement. If a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request. */
		ssmlGender?: GoogleCloudDialogflowV2VoiceSelectionParamsSsmlGender | null;
	}

	/** Description of which voice to use for speech synthesis. */
	export interface GoogleCloudDialogflowV2VoiceSelectionParamsFormProperties {

		/** Optional. The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and ssml_gender. */
		name: FormControl<string | null | undefined>,

		/** Optional. The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement. If a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request. */
		ssmlGender: FormControl<GoogleCloudDialogflowV2VoiceSelectionParamsSsmlGender | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2VoiceSelectionParamsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2VoiceSelectionParamsFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			ssmlGender: new FormControl<GoogleCloudDialogflowV2VoiceSelectionParamsSsmlGender | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2VoiceSelectionParamsSsmlGender { SSML_VOICE_GENDER_UNSPECIFIED = 0, SSML_VOICE_GENDER_MALE = 1, SSML_VOICE_GENDER_FEMALE = 2, SSML_VOICE_GENDER_NEUTRAL = 3 }


	/** Represents the selection of a suggestion. */
	export interface GoogleCloudDialogflowV2SuggestionInput {

		/** Required. The ID of a suggestion selected by the human agent. The suggestion(s) were generated in a previous call to request Dialogflow assist. The format is: `projects//locations//answerRecords/` where is an alphanumeric string. */
		answerRecord?: string | null;
	}

	/** Represents the selection of a suggestion. */
	export interface GoogleCloudDialogflowV2SuggestionInputFormProperties {

		/** Required. The ID of a suggestion selected by the human agent. The suggestion(s) were generated in a previous call to request Dialogflow assist. The format is: `projects//locations//answerRecords/` where is an alphanumeric string. */
		answerRecord: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestionInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestionInputFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Auxiliary proto messages. Represents the natural language text to be processed. */
	export interface GoogleCloudDialogflowV2TextInput {

		/** Required. The language of this conversational query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode?: string | null;

		/** Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters for virtual agent interactions. */
		text?: string | null;
	}

	/** Auxiliary proto messages. Represents the natural language text to be processed. */
	export interface GoogleCloudDialogflowV2TextInputFormProperties {

		/** Required. The language of this conversational query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode: FormControl<string | null | undefined>,

		/** Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters for virtual agent interactions. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2TextInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2TextInputFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Participants.AnalyzeContent. */
	export interface GoogleCloudDialogflowV2AnalyzeContentResponse {

		/** Represents a response from an automated agent. */
		automatedAgentReply?: GoogleCloudDialogflowV2AutomatedAgentReply;

		/** The message in the response that indicates the parameters of DTMF. */
		dtmfParameters?: GoogleCloudDialogflowV2DtmfParameters;

		/** The suggestions for end user. The order is the same as HumanAgentAssistantConfig.SuggestionConfig.feature_configs of HumanAgentAssistantConfig.end_user_suggestion_config. Same as human_agent_suggestion_results, any failure of Agent Assist features will not lead to the overall failure of an AnalyzeContent API call. Instead, the features will fail silently with the error field set in the corresponding SuggestionResult. */
		endUserSuggestionResults?: Array<GoogleCloudDialogflowV2SuggestionResult>;

		/** The suggestions for most recent human agent. The order is the same as HumanAgentAssistantConfig.SuggestionConfig.feature_configs of HumanAgentAssistantConfig.human_agent_suggestion_config. Note that any failure of Agent Assist features will not lead to the overall failure of an AnalyzeContent API call. Instead, the features will fail silently with the error field set in the corresponding SuggestionResult. */
		humanAgentSuggestionResults?: Array<GoogleCloudDialogflowV2SuggestionResult>;

		/** Represents a message posted into a conversation. */
		message?: GoogleCloudDialogflowV2Message;

		/** Represents the natural language speech audio to be played to the end user. */
		replyAudio?: GoogleCloudDialogflowV2OutputAudio;

		/** The output text content. This field is set if the automated agent responded with text to show to the user. */
		replyText?: string | null;
	}

	/** The response message for Participants.AnalyzeContent. */
	export interface GoogleCloudDialogflowV2AnalyzeContentResponseFormProperties {

		/** The output text content. This field is set if the automated agent responded with text to show to the user. */
		replyText: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AnalyzeContentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AnalyzeContentResponseFormProperties>({
			replyText: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a response from an automated agent. */
	export interface GoogleCloudDialogflowV2AutomatedAgentReply {

		/** Indicates whether the partial automated agent reply is interruptible when a later reply message arrives. e.g. if the agent specified some music as partial response, it can be cancelled. */
		allowCancellation?: boolean | null;

		/** AutomatedAgentReply type. */
		automatedAgentReplyType?: GoogleCloudDialogflowV2AutomatedAgentReplyAutomatedAgentReplyType | null;

		/** The unique identifier of the current Dialogflow CX conversation page. Format: `projects//locations//agents//flows//pages/`. */
		cxCurrentPage?: string | null;

		/** The message returned from the DetectIntent method. */
		detectIntentResponse?: GoogleCloudDialogflowV2DetectIntentResponse;
	}

	/** Represents a response from an automated agent. */
	export interface GoogleCloudDialogflowV2AutomatedAgentReplyFormProperties {

		/** Indicates whether the partial automated agent reply is interruptible when a later reply message arrives. e.g. if the agent specified some music as partial response, it can be cancelled. */
		allowCancellation: FormControl<boolean | null | undefined>,

		/** AutomatedAgentReply type. */
		automatedAgentReplyType: FormControl<GoogleCloudDialogflowV2AutomatedAgentReplyAutomatedAgentReplyType | null | undefined>,

		/** The unique identifier of the current Dialogflow CX conversation page. Format: `projects//locations//agents//flows//pages/`. */
		cxCurrentPage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AutomatedAgentReplyFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AutomatedAgentReplyFormProperties>({
			allowCancellation: new FormControl<boolean | null | undefined>(undefined),
			automatedAgentReplyType: new FormControl<GoogleCloudDialogflowV2AutomatedAgentReplyAutomatedAgentReplyType | null | undefined>(undefined),
			cxCurrentPage: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2AutomatedAgentReplyAutomatedAgentReplyType { AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED = 0, PARTIAL = 1, FINAL = 2 }


	/** The message returned from the DetectIntent method. */
	export interface GoogleCloudDialogflowV2DetectIntentResponse {

		/** The audio data bytes encoded as specified in the request. Note: The output audio is generated based on the values of default platform text responses found in the `query_result.fulfillment_messages` field. If multiple default text responses exist, they will be concatenated when generating audio. If no default platform text responses exist, the generated audio content will be empty. In some scenarios, multiple output audio fields may be present in the response structure. In these cases, only the top-most-level audio output has content. */
		outputAudio?: string | null;

		/** Instructs the speech synthesizer on how to generate the output audio content. If this audio config is supplied in a request, it overrides all existing text-to-speech settings applied to the agent. */
		outputAudioConfig?: GoogleCloudDialogflowV2OutputAudioConfig;

		/** Represents the result of conversational query or event processing. */
		queryResult?: GoogleCloudDialogflowV2QueryResult;

		/** The unique identifier of the response. It can be used to locate a response in the training example set or for reporting issues. */
		responseId?: string | null;

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		webhookStatus?: GoogleRpcStatus;
	}

	/** The message returned from the DetectIntent method. */
	export interface GoogleCloudDialogflowV2DetectIntentResponseFormProperties {

		/** The audio data bytes encoded as specified in the request. Note: The output audio is generated based on the values of default platform text responses found in the `query_result.fulfillment_messages` field. If multiple default text responses exist, they will be concatenated when generating audio. If no default platform text responses exist, the generated audio content will be empty. In some scenarios, multiple output audio fields may be present in the response structure. In these cases, only the top-most-level audio output has content. */
		outputAudio: FormControl<string | null | undefined>,

		/** The unique identifier of the response. It can be used to locate a response in the training example set or for reporting issues. */
		responseId: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DetectIntentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DetectIntentResponseFormProperties>({
			outputAudio: new FormControl<string | null | undefined>(undefined),
			responseId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The message in the response that indicates the parameters of DTMF. */
	export interface GoogleCloudDialogflowV2DtmfParameters {

		/** Indicates whether DTMF input can be handled in the next request. */
		acceptsDtmfInput?: boolean | null;
	}

	/** The message in the response that indicates the parameters of DTMF. */
	export interface GoogleCloudDialogflowV2DtmfParametersFormProperties {

		/** Indicates whether DTMF input can be handled in the next request. */
		acceptsDtmfInput: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DtmfParametersFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DtmfParametersFormProperties>({
			acceptsDtmfInput: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** One response of different type of suggestion response which is used in the response of Participants.AnalyzeContent and Participants.AnalyzeContent, as well as HumanAgentAssistantEvent. */
	export interface GoogleCloudDialogflowV2SuggestionResult {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		error?: GoogleRpcStatus;

		/** The response message for Participants.SuggestArticles. */
		suggestArticlesResponse?: GoogleCloudDialogflowV2SuggestArticlesResponse;

		/** The request message for Participants.SuggestFaqAnswers. */
		suggestFaqAnswersResponse?: GoogleCloudDialogflowV2SuggestFaqAnswersResponse;

		/** The response message for Participants.SuggestSmartReplies. */
		suggestSmartRepliesResponse?: GoogleCloudDialogflowV2SuggestSmartRepliesResponse;
	}

	/** One response of different type of suggestion response which is used in the response of Participants.AnalyzeContent and Participants.AnalyzeContent, as well as HumanAgentAssistantEvent. */
	export interface GoogleCloudDialogflowV2SuggestionResultFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2SuggestionResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestionResultFormProperties>({
		});

	}


	/** The response message for Participants.SuggestArticles. */
	export interface GoogleCloudDialogflowV2SuggestArticlesResponse {

		/** Articles ordered by score in descending order. */
		articleAnswers?: Array<GoogleCloudDialogflowV2ArticleAnswer>;

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestArticlesRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize?: number | null;

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The response message for Participants.SuggestArticles. */
	export interface GoogleCloudDialogflowV2SuggestArticlesResponseFormProperties {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestArticlesRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestArticlesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestArticlesResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Participants.SuggestFaqAnswers. */
	export interface GoogleCloudDialogflowV2SuggestFaqAnswersResponse {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestFaqAnswersRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize?: number | null;

		/** Answers extracted from FAQ documents. */
		faqAnswers?: Array<GoogleCloudDialogflowV2FaqAnswer>;

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The request message for Participants.SuggestFaqAnswers. */
	export interface GoogleCloudDialogflowV2SuggestFaqAnswersResponseFormProperties {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestFaqAnswersRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestFaqAnswersResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestFaqAnswersResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Participants.SuggestSmartReplies. */
	export interface GoogleCloudDialogflowV2SuggestSmartRepliesResponse {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestSmartRepliesRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize?: number | null;

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;

		/** Output only. Multiple reply options provided by smart reply service. The order is based on the rank of the model prediction. The maximum number of the returned replies is set in SmartReplyConfig. */
		smartReplyAnswers?: Array<GoogleCloudDialogflowV2SmartReplyAnswer>;
	}

	/** The response message for Participants.SuggestSmartReplies. */
	export interface GoogleCloudDialogflowV2SuggestSmartRepliesResponseFormProperties {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestSmartRepliesRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestSmartRepliesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestSmartRepliesResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a smart reply answer. */
	export interface GoogleCloudDialogflowV2SmartReplyAnswer {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** Smart reply confidence. The system's confidence score that this reply is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence?: number | null;

		/** The content of the reply. */
		reply?: string | null;
	}

	/** Represents a smart reply answer. */
	export interface GoogleCloudDialogflowV2SmartReplyAnswerFormProperties {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,

		/** Smart reply confidence. The system's confidence score that this reply is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence: FormControl<number | null | undefined>,

		/** The content of the reply. */
		reply: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SmartReplyAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SmartReplyAnswerFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
			confidence: new FormControl<number | null | undefined>(undefined),
			reply: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a message posted into a conversation. */
	export interface GoogleCloudDialogflowV2Message {

		/** Required. The message content. */
		content?: string | null;

		/** Output only. The time when the message was created in Contact Center AI. */
		createTime?: string | null;

		/** Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode?: string | null;

		/** Represents the result of annotation for the message. */
		messageAnnotation?: GoogleCloudDialogflowV2MessageAnnotation;

		/** Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`. */
		name?: string | null;

		/** Output only. The participant that sends this message. */
		participant?: string | null;

		/** Output only. The role of the participant. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Optional. The time when the message was sent. */
		sendTime?: string | null;

		/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
		sentimentAnalysis?: GoogleCloudDialogflowV2SentimentAnalysisResult;
	}

	/** Represents a message posted into a conversation. */
	export interface GoogleCloudDialogflowV2MessageFormProperties {

		/** Required. The message content. */
		content: FormControl<string | null | undefined>,

		/** Output only. The time when the message was created in Contact Center AI. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode: FormControl<string | null | undefined>,

		/** Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`. */
		name: FormControl<string | null | undefined>,

		/** Output only. The participant that sends this message. */
		participant: FormControl<string | null | undefined>,

		/** Output only. The role of the participant. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Optional. The time when the message was sent. */
		sendTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2MessageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2MessageFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			participant: new FormControl<string | null | undefined>(undefined),
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			sendTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the result of annotation for the message. */
	export interface GoogleCloudDialogflowV2MessageAnnotation {

		/** Indicates whether the text message contains entities. */
		containEntities?: boolean | null;

		/** The collection of annotated message parts ordered by their position in the message. You can recover the annotated message by concatenating [AnnotatedMessagePart.text]. */
		parts?: Array<GoogleCloudDialogflowV2AnnotatedMessagePart>;
	}

	/** Represents the result of annotation for the message. */
	export interface GoogleCloudDialogflowV2MessageAnnotationFormProperties {

		/** Indicates whether the text message contains entities. */
		containEntities: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2MessageAnnotationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2MessageAnnotationFormProperties>({
			containEntities: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents a part of a message possibly annotated with an entity. The part can be an entity or purely a part of the message between two entities or message start/end. */
	export interface GoogleCloudDialogflowV2AnnotatedMessagePart {

		/** The [Dialogflow system entity type](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. If this is empty, Dialogflow could not annotate the phrase part with a system entity. */
		entityType?: string | null;

		/** The [Dialogflow system entity formatted value ](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. For example for a system entity of type `@sys.unit-currency`, this may contain: { "amount": 5, "currency": "USD" } */
		formattedValue?: any;

		/** A part of a message possibly annotated with an entity. */
		text?: string | null;
	}

	/** Represents a part of a message possibly annotated with an entity. The part can be an entity or purely a part of the message between two entities or message start/end. */
	export interface GoogleCloudDialogflowV2AnnotatedMessagePartFormProperties {

		/** The [Dialogflow system entity type](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. If this is empty, Dialogflow could not annotate the phrase part with a system entity. */
		entityType: FormControl<string | null | undefined>,

		/** The [Dialogflow system entity formatted value ](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. For example for a system entity of type `@sys.unit-currency`, this may contain: { "amount": 5, "currency": "USD" } */
		formattedValue: FormControl<any | null | undefined>,

		/** A part of a message possibly annotated with an entity. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AnnotatedMessagePartFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AnnotatedMessagePartFormProperties>({
			entityType: new FormControl<string | null | undefined>(undefined),
			formattedValue: new FormControl<any | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2MessageParticipantRole { ROLE_UNSPECIFIED = 0, HUMAN_AGENT = 1, AUTOMATED_AGENT = 2, END_USER = 3 }


	/** Represents the natural language speech audio to be played to the end user. */
	export interface GoogleCloudDialogflowV2OutputAudio {

		/** The natural language speech audio. */
		audio?: string | null;

		/** Instructs the speech synthesizer on how to generate the output audio content. If this audio config is supplied in a request, it overrides all existing text-to-speech settings applied to the agent. */
		config?: GoogleCloudDialogflowV2OutputAudioConfig;
	}

	/** Represents the natural language speech audio to be played to the end user. */
	export interface GoogleCloudDialogflowV2OutputAudioFormProperties {

		/** The natural language speech audio. */
		audio: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2OutputAudioFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2OutputAudioFormProperties>({
			audio: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents feedback the customer has about the quality & correctness of a certain answer in a conversation. */
	export interface GoogleCloudDialogflowV2AnswerFeedback {

		/** Detail feedback of Agent Assist result. */
		agentAssistantDetailFeedback?: GoogleCloudDialogflowV2AgentAssistantFeedback;

		/** Time when the answer/item was clicked. */
		clickTime?: string | null;

		/** Indicates whether the answer/item was clicked by the human agent or not. Default to false. For knowledge search and knowledge assist, the answer record is considered to be clicked if the answer was copied or any URI was clicked. */
		clicked?: boolean | null;

		/** The correctness level of the specific answer. */
		correctnessLevel?: GoogleCloudDialogflowV2AnswerFeedbackCorrectnessLevel | null;

		/** Time when the answer/item was displayed. */
		displayTime?: string | null;

		/** Indicates whether the answer/item was displayed to the human agent in the agent desktop UI. Default to false. */
		displayed?: boolean | null;
	}

	/** Represents feedback the customer has about the quality & correctness of a certain answer in a conversation. */
	export interface GoogleCloudDialogflowV2AnswerFeedbackFormProperties {

		/** Time when the answer/item was clicked. */
		clickTime: FormControl<string | null | undefined>,

		/** Indicates whether the answer/item was clicked by the human agent or not. Default to false. For knowledge search and knowledge assist, the answer record is considered to be clicked if the answer was copied or any URI was clicked. */
		clicked: FormControl<boolean | null | undefined>,

		/** The correctness level of the specific answer. */
		correctnessLevel: FormControl<GoogleCloudDialogflowV2AnswerFeedbackCorrectnessLevel | null | undefined>,

		/** Time when the answer/item was displayed. */
		displayTime: FormControl<string | null | undefined>,

		/** Indicates whether the answer/item was displayed to the human agent in the agent desktop UI. Default to false. */
		displayed: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AnswerFeedbackFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AnswerFeedbackFormProperties>({
			clickTime: new FormControl<string | null | undefined>(undefined),
			clicked: new FormControl<boolean | null | undefined>(undefined),
			correctnessLevel: new FormControl<GoogleCloudDialogflowV2AnswerFeedbackCorrectnessLevel | null | undefined>(undefined),
			displayTime: new FormControl<string | null | undefined>(undefined),
			displayed: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2AnswerFeedbackCorrectnessLevel { CORRECTNESS_LEVEL_UNSPECIFIED = 0, NOT_CORRECT = 1, PARTIALLY_CORRECT = 2, FULLY_CORRECT = 3 }


	/** Answer records are records to manage answer history and feedbacks for Dialogflow. Currently, answer record includes: - human agent assistant article suggestion - human agent assistant faq article It doesn't include: - `DetectIntent` intent matching - `DetectIntent` knowledge Answer records are not related to the conversation history in the Dialogflow Console. A Record is generated even when the end-user disables conversation history in the console. Records are created when there's a human agent assistant suggestion generated. A typical workflow for customers provide feedback to an answer is: 1. For human agent assistant, customers get suggestion via ListSuggestions API. Together with the answers, AnswerRecord.name are returned to the customers. 2. The customer uses the AnswerRecord.name to call the UpdateAnswerRecord method to send feedback about a specific answer that they believe is wrong. */
	export interface GoogleCloudDialogflowV2AnswerRecord {

		/** Represents a record of a human agent assist answer. */
		agentAssistantRecord?: GoogleCloudDialogflowV2AgentAssistantRecord;

		/** Represents feedback the customer has about the quality & correctness of a certain answer in a conversation. */
		answerFeedback?: GoogleCloudDialogflowV2AnswerFeedback;

		/** The unique identifier of this answer record. Format: `projects//locations//answerRecords/`. */
		name?: string | null;
	}

	/** Answer records are records to manage answer history and feedbacks for Dialogflow. Currently, answer record includes: - human agent assistant article suggestion - human agent assistant faq article It doesn't include: - `DetectIntent` intent matching - `DetectIntent` knowledge Answer records are not related to the conversation history in the Dialogflow Console. A Record is generated even when the end-user disables conversation history in the console. Records are created when there's a human agent assistant suggestion generated. A typical workflow for customers provide feedback to an answer is: 1. For human agent assistant, customers get suggestion via ListSuggestions API. Together with the answers, AnswerRecord.name are returned to the customers. 2. The customer uses the AnswerRecord.name to call the UpdateAnswerRecord method to send feedback about a specific answer that they believe is wrong. */
	export interface GoogleCloudDialogflowV2AnswerRecordFormProperties {

		/** The unique identifier of this answer record. Format: `projects//locations//answerRecords/`. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AnswerRecordFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AnswerRecordFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for article suggestion models. */
	export interface GoogleCloudDialogflowV2ArticleSuggestionModelMetadata {

		/** Optional. Type of the article suggestion model. If not provided, model_type is used. */
		trainingModelType?: GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType | null;
	}

	/** Metadata for article suggestion models. */
	export interface GoogleCloudDialogflowV2ArticleSuggestionModelMetadataFormProperties {

		/** Optional. Type of the article suggestion model. If not provided, model_type is used. */
		trainingModelType: FormControl<GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ArticleSuggestionModelMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ArticleSuggestionModelMetadataFormProperties>({
			trainingModelType: new FormControl<GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType { MODEL_TYPE_UNSPECIFIED = 0, SMART_REPLY_DUAL_ENCODER_MODEL = 1, SMART_REPLY_BERT_MODEL = 2 }


	/** Defines the Automated Agent to connect to a conversation. */
	export interface GoogleCloudDialogflowV2AutomatedAgentConfig {

		/** Required. ID of the Dialogflow agent environment to use. This project needs to either be the same project as the conversation or you need to grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow API Service Agent` role in this project. - For ES agents, use format: `projects//locations//agent/environments/`. If environment is not specified, the default `draft` environment is used. Refer to [DetectIntentRequest](/dialogflow/docs/reference/rpc/google.cloud.dialogflow.v2#google.cloud.dialogflow.v2.DetectIntentRequest) for more details. - For CX agents, use format `projects//locations//agents//environments/`. If environment is not specified, the default `draft` environment is used. */
		agent?: string | null;

		/** Optional. Configure lifetime of the Dialogflow session. By default, a Dialogflow CX session remains active and its data is stored for 30 minutes after the last request is sent for the session. This value should be no longer than 1 day. */
		sessionTtl?: string | null;
	}

	/** Defines the Automated Agent to connect to a conversation. */
	export interface GoogleCloudDialogflowV2AutomatedAgentConfigFormProperties {

		/** Required. ID of the Dialogflow agent environment to use. This project needs to either be the same project as the conversation or you need to grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow API Service Agent` role in this project. - For ES agents, use format: `projects//locations//agent/environments/`. If environment is not specified, the default `draft` environment is used. Refer to [DetectIntentRequest](/dialogflow/docs/reference/rpc/google.cloud.dialogflow.v2#google.cloud.dialogflow.v2.DetectIntentRequest) for more details. - For CX agents, use format `projects//locations//agents//environments/`. If environment is not specified, the default `draft` environment is used. */
		agent: FormControl<string | null | undefined>,

		/** Optional. Configure lifetime of the Dialogflow session. By default, a Dialogflow CX session remains active and its data is stored for 30 minutes after the last request is sent for the session. This value should be no longer than 1 day. */
		sessionTtl: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2AutomatedAgentConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2AutomatedAgentConfigFormProperties>({
			agent: new FormControl<string | null | undefined>(undefined),
			sessionTtl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for EntityTypes.BatchCreateEntities. */
	export interface GoogleCloudDialogflowV2BatchCreateEntitiesRequest {

		/** Required. The entities to create. */
		entities?: Array<GoogleCloudDialogflowV2EntityTypeEntity>;

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode?: string | null;
	}

	/** The request message for EntityTypes.BatchCreateEntities. */
	export interface GoogleCloudDialogflowV2BatchCreateEntitiesRequestFormProperties {

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2BatchCreateEntitiesRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchCreateEntitiesRequestFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for EntityTypes.BatchDeleteEntities. */
	export interface GoogleCloudDialogflowV2BatchDeleteEntitiesRequest {

		/** Required. The reference `values` of the entities to delete. Note that these are not fully-qualified names, i.e. they don't start with `projects/`. */
		entityValues?: Array<string>;

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode?: string | null;
	}

	/** The request message for EntityTypes.BatchDeleteEntities. */
	export interface GoogleCloudDialogflowV2BatchDeleteEntitiesRequestFormProperties {

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2BatchDeleteEntitiesRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchDeleteEntitiesRequestFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for EntityTypes.BatchDeleteEntityTypes. */
	export interface GoogleCloudDialogflowV2BatchDeleteEntityTypesRequest {

		/** Required. The names entity types to delete. All names must point to the same agent as `parent`. */
		entityTypeNames?: Array<string>;
	}

	/** The request message for EntityTypes.BatchDeleteEntityTypes. */
	export interface GoogleCloudDialogflowV2BatchDeleteEntityTypesRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2BatchDeleteEntityTypesRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchDeleteEntityTypesRequestFormProperties>({
		});

	}


	/** The request message for Intents.BatchDeleteIntents. */
	export interface GoogleCloudDialogflowV2BatchDeleteIntentsRequest {

		/** Required. The collection of intents to delete. Only intent `name` must be filled in. */
		intents?: Array<GoogleCloudDialogflowV2Intent>;
	}

	/** The request message for Intents.BatchDeleteIntents. */
	export interface GoogleCloudDialogflowV2BatchDeleteIntentsRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2BatchDeleteIntentsRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchDeleteIntentsRequestFormProperties>({
		});

	}


	/** The request message for EntityTypes.BatchUpdateEntities. */
	export interface GoogleCloudDialogflowV2BatchUpdateEntitiesRequest {

		/** Required. The entities to update or create. */
		entities?: Array<GoogleCloudDialogflowV2EntityTypeEntity>;

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode?: string | null;

		/** Optional. The mask to control which fields get updated. */
		updateMask?: string | null;
	}

	/** The request message for EntityTypes.BatchUpdateEntities. */
	export interface GoogleCloudDialogflowV2BatchUpdateEntitiesRequestFormProperties {

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode: FormControl<string | null | undefined>,

		/** Optional. The mask to control which fields get updated. */
		updateMask: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2BatchUpdateEntitiesRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchUpdateEntitiesRequestFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
			updateMask: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for EntityTypes.BatchUpdateEntityTypes. */
	export interface GoogleCloudDialogflowV2BatchUpdateEntityTypesRequest {

		/** This message is a wrapper around a collection of entity types. */
		entityTypeBatchInline?: GoogleCloudDialogflowV2EntityTypeBatch;

		/** The URI to a Google Cloud Storage file containing entity types to update or create. The file format can either be a serialized proto (of EntityBatch type) or a JSON object. Note: The URI must start with "gs://". */
		entityTypeBatchUri?: string | null;

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode?: string | null;

		/** Optional. The mask to control which fields get updated. */
		updateMask?: string | null;
	}

	/** The request message for EntityTypes.BatchUpdateEntityTypes. */
	export interface GoogleCloudDialogflowV2BatchUpdateEntityTypesRequestFormProperties {

		/** The URI to a Google Cloud Storage file containing entity types to update or create. The file format can either be a serialized proto (of EntityBatch type) or a JSON object. Note: The URI must start with "gs://". */
		entityTypeBatchUri: FormControl<string | null | undefined>,

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode: FormControl<string | null | undefined>,

		/** Optional. The mask to control which fields get updated. */
		updateMask: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2BatchUpdateEntityTypesRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchUpdateEntityTypesRequestFormProperties>({
			entityTypeBatchUri: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			updateMask: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This message is a wrapper around a collection of entity types. */
	export interface GoogleCloudDialogflowV2EntityTypeBatch {

		/** A collection of entity types. */
		entityTypes?: Array<GoogleCloudDialogflowV2EntityType>;
	}

	/** This message is a wrapper around a collection of entity types. */
	export interface GoogleCloudDialogflowV2EntityTypeBatchFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2EntityTypeBatchFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EntityTypeBatchFormProperties>({
		});

	}


	/** Each intent parameter has a type, called the entity type, which dictates exactly how data from an end-user expression is extracted. Dialogflow provides predefined system entities that can match many common types of data. For example, there are system entities for matching dates, times, colors, email addresses, and so on. You can also create your own custom entities for matching custom data. For example, you could define a vegetable entity that can match the types of vegetables available for purchase with a grocery store agent. For more information, see the [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview). */
	export interface GoogleCloudDialogflowV2EntityType {

		/** Optional. Indicates whether the entity type can be automatically expanded. */
		autoExpansionMode?: GoogleCloudDialogflowV2EntityTypeAutoExpansionMode | null;

		/** Required. The name of the entity type. */
		displayName?: string | null;

		/** Optional. Enables fuzzy entity extraction during classification. */
		enableFuzzyExtraction?: boolean | null;

		/** Optional. The collection of entity entries associated with the entity type. */
		entities?: Array<GoogleCloudDialogflowV2EntityTypeEntity>;

		/** Required. Indicates the kind of entity type. */
		kind?: GoogleCloudDialogflowV2EntityTypeKind | null;

		/** The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Format: `projects//agent/entityTypes/`. */
		name?: string | null;
	}

	/** Each intent parameter has a type, called the entity type, which dictates exactly how data from an end-user expression is extracted. Dialogflow provides predefined system entities that can match many common types of data. For example, there are system entities for matching dates, times, colors, email addresses, and so on. You can also create your own custom entities for matching custom data. For example, you could define a vegetable entity that can match the types of vegetables available for purchase with a grocery store agent. For more information, see the [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview). */
	export interface GoogleCloudDialogflowV2EntityTypeFormProperties {

		/** Optional. Indicates whether the entity type can be automatically expanded. */
		autoExpansionMode: FormControl<GoogleCloudDialogflowV2EntityTypeAutoExpansionMode | null | undefined>,

		/** Required. The name of the entity type. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Enables fuzzy entity extraction during classification. */
		enableFuzzyExtraction: FormControl<boolean | null | undefined>,

		/** Required. Indicates the kind of entity type. */
		kind: FormControl<GoogleCloudDialogflowV2EntityTypeKind | null | undefined>,

		/** The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Format: `projects//agent/entityTypes/`. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EntityTypeFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EntityTypeFormProperties>({
			autoExpansionMode: new FormControl<GoogleCloudDialogflowV2EntityTypeAutoExpansionMode | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			enableFuzzyExtraction: new FormControl<boolean | null | undefined>(undefined),
			kind: new FormControl<GoogleCloudDialogflowV2EntityTypeKind | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2EntityTypeAutoExpansionMode { AUTO_EXPANSION_MODE_UNSPECIFIED = 0, AUTO_EXPANSION_MODE_DEFAULT = 1 }

	export enum GoogleCloudDialogflowV2EntityTypeKind { KIND_UNSPECIFIED = 0, KIND_MAP = 1, KIND_LIST = 2, KIND_REGEXP = 3 }


	/** The response message for EntityTypes.BatchUpdateEntityTypes. */
	export interface GoogleCloudDialogflowV2BatchUpdateEntityTypesResponse {

		/** The collection of updated or created entity types. */
		entityTypes?: Array<GoogleCloudDialogflowV2EntityType>;
	}

	/** The response message for EntityTypes.BatchUpdateEntityTypes. */
	export interface GoogleCloudDialogflowV2BatchUpdateEntityTypesResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2BatchUpdateEntityTypesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchUpdateEntityTypesResponseFormProperties>({
		});

	}

	export interface GoogleCloudDialogflowV2BatchUpdateIntentsRequest {

		/** This message is a wrapper around a collection of intents. */
		intentBatchInline?: GoogleCloudDialogflowV2IntentBatch;

		/** The URI to a Google Cloud Storage file containing intents to update or create. The file format can either be a serialized proto (of IntentBatch type) or JSON object. Note: The URI must start with "gs://". */
		intentBatchUri?: string | null;

		/** Optional. The resource view to apply to the returned intent. */
		intentView?: GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView | null;

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode?: string | null;

		/** Optional. The mask to control which fields get updated. */
		updateMask?: string | null;
	}
	export interface GoogleCloudDialogflowV2BatchUpdateIntentsRequestFormProperties {

		/** The URI to a Google Cloud Storage file containing intents to update or create. The file format can either be a serialized proto (of IntentBatch type) or JSON object. Note: The URI must start with "gs://". */
		intentBatchUri: FormControl<string | null | undefined>,

		/** Optional. The resource view to apply to the returned intent. */
		intentView: FormControl<GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView | null | undefined>,

		/** Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity). */
		languageCode: FormControl<string | null | undefined>,

		/** Optional. The mask to control which fields get updated. */
		updateMask: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2BatchUpdateIntentsRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchUpdateIntentsRequestFormProperties>({
			intentBatchUri: new FormControl<string | null | undefined>(undefined),
			intentView: new FormControl<GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			updateMask: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This message is a wrapper around a collection of intents. */
	export interface GoogleCloudDialogflowV2IntentBatch {

		/** A collection of intents. */
		intents?: Array<GoogleCloudDialogflowV2Intent>;
	}

	/** This message is a wrapper around a collection of intents. */
	export interface GoogleCloudDialogflowV2IntentBatchFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2IntentBatchFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2IntentBatchFormProperties>({
		});

	}

	export enum GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView { INTENT_VIEW_UNSPECIFIED = 0, INTENT_VIEW_FULL = 1 }


	/** The response message for Intents.BatchUpdateIntents. */
	export interface GoogleCloudDialogflowV2BatchUpdateIntentsResponse {

		/** The collection of updated or created intents. */
		intents?: Array<GoogleCloudDialogflowV2Intent>;
	}

	/** The response message for Intents.BatchUpdateIntents. */
	export interface GoogleCloudDialogflowV2BatchUpdateIntentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2BatchUpdateIntentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2BatchUpdateIntentsResponseFormProperties>({
		});

	}


	/** Metadata for a ConversationProfile.ClearSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadata {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile?: string | null;

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime?: string | null;

		/** Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Required. The type of the suggestion feature to remove. */
		suggestionFeatureType?: GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null;
	}

	/** Metadata for a ConversationProfile.ClearSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataFormProperties {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile: FormControl<string | null | undefined>,

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,

		/** Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Required. The type of the suggestion feature to remove. */
		suggestionFeatureType: FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataFormProperties>({
			conversationProfile: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			suggestionFeatureType: new FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType { TYPE_UNSPECIFIED = 0, ARTICLE_SUGGESTION = 1, FAQ = 2, SMART_REPLY = 3, KNOWLEDGE_SEARCH = 4 }


	/** The request message for ConversationProfiles.ClearFeature. */
	export interface GoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequest {

		/** Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Required. The type of the suggestion feature to remove. */
		suggestionFeatureType?: GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null;
	}

	/** The request message for ConversationProfiles.ClearFeature. */
	export interface GoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequestFormProperties {

		/** Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Required. The type of the suggestion feature to remove. */
		suggestionFeatureType: FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequestFormProperties>({
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			suggestionFeatureType: new FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>(undefined),
		});

	}


	/** The request message for Conversations.CompleteConversation. */
	export interface GoogleCloudDialogflowV2CompleteConversationRequest {
	}

	/** The request message for Conversations.CompleteConversation. */
	export interface GoogleCloudDialogflowV2CompleteConversationRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2CompleteConversationRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2CompleteConversationRequestFormProperties>({
		});

	}


	/** Represents a conversation. A conversation is an interaction between an agent, including live agents and Dialogflow agents, and a support customer. Conversations can include phone calls and text-based chat sessions. */
	export interface GoogleCloudDialogflowV2Conversation {

		/** Required. The Conversation Profile to be used to configure this Conversation. This field cannot be updated. Format: `projects//locations//conversationProfiles/`. */
		conversationProfile?: string | null;

		/** The stage of a conversation. It indicates whether the virtual agent or a human agent is handling the conversation. If the conversation is created with the conversation profile that has Dialogflow config set, defaults to ConversationStage.VIRTUAL_AGENT_STAGE; Otherwise, defaults to ConversationStage.HUMAN_ASSIST_STAGE. If the conversation is created with the conversation profile that has Dialogflow config set but explicitly sets conversation_stage to ConversationStage.HUMAN_ASSIST_STAGE, it skips ConversationStage.VIRTUAL_AGENT_STAGE stage and directly goes to ConversationStage.HUMAN_ASSIST_STAGE. */
		conversationStage?: GoogleCloudDialogflowV2ConversationConversationStage | null;

		/** Output only. The time the conversation was finished. */
		endTime?: string | null;

		/** Output only. The current state of the Conversation. */
		lifecycleState?: GoogleCloudDialogflowV2ConversationLifecycleState | null;

		/** Output only. The unique identifier of this conversation. Format: `projects//locations//conversations/`. */
		name?: string | null;

		/** Represents a phone number for telephony integration. It allows for connecting a particular conversation over telephony. */
		phoneNumber?: GoogleCloudDialogflowV2ConversationPhoneNumber;

		/** Output only. The time the conversation was started. */
		startTime?: string | null;
	}

	/** Represents a conversation. A conversation is an interaction between an agent, including live agents and Dialogflow agents, and a support customer. Conversations can include phone calls and text-based chat sessions. */
	export interface GoogleCloudDialogflowV2ConversationFormProperties {

		/** Required. The Conversation Profile to be used to configure this Conversation. This field cannot be updated. Format: `projects//locations//conversationProfiles/`. */
		conversationProfile: FormControl<string | null | undefined>,

		/** The stage of a conversation. It indicates whether the virtual agent or a human agent is handling the conversation. If the conversation is created with the conversation profile that has Dialogflow config set, defaults to ConversationStage.VIRTUAL_AGENT_STAGE; Otherwise, defaults to ConversationStage.HUMAN_ASSIST_STAGE. If the conversation is created with the conversation profile that has Dialogflow config set but explicitly sets conversation_stage to ConversationStage.HUMAN_ASSIST_STAGE, it skips ConversationStage.VIRTUAL_AGENT_STAGE stage and directly goes to ConversationStage.HUMAN_ASSIST_STAGE. */
		conversationStage: FormControl<GoogleCloudDialogflowV2ConversationConversationStage | null | undefined>,

		/** Output only. The time the conversation was finished. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. The current state of the Conversation. */
		lifecycleState: FormControl<GoogleCloudDialogflowV2ConversationLifecycleState | null | undefined>,

		/** Output only. The unique identifier of this conversation. Format: `projects//locations//conversations/`. */
		name: FormControl<string | null | undefined>,

		/** Output only. The time the conversation was started. */
		startTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationFormProperties>({
			conversationProfile: new FormControl<string | null | undefined>(undefined),
			conversationStage: new FormControl<GoogleCloudDialogflowV2ConversationConversationStage | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			lifecycleState: new FormControl<GoogleCloudDialogflowV2ConversationLifecycleState | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			startTime: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2ConversationConversationStage { CONVERSATION_STAGE_UNSPECIFIED = 0, VIRTUAL_AGENT_STAGE = 1, HUMAN_ASSIST_STAGE = 2 }

	export enum GoogleCloudDialogflowV2ConversationLifecycleState { LIFECYCLE_STATE_UNSPECIFIED = 0, IN_PROGRESS = 1, COMPLETED = 2 }


	/** Represents a phone number for telephony integration. It allows for connecting a particular conversation over telephony. */
	export interface GoogleCloudDialogflowV2ConversationPhoneNumber {

		/** Output only. The phone number to connect to this conversation. */
		phoneNumber?: string | null;
	}

	/** Represents a phone number for telephony integration. It allows for connecting a particular conversation over telephony. */
	export interface GoogleCloudDialogflowV2ConversationPhoneNumberFormProperties {

		/** Output only. The phone number to connect to this conversation. */
		phoneNumber: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationPhoneNumberFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationPhoneNumberFormProperties>({
			phoneNumber: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a conversation dataset that a user imports raw data into. The data inside ConversationDataset can not be changed after ImportConversationData finishes (and calling ImportConversationData on a dataset that already has data is not allowed). */
	export interface GoogleCloudDialogflowV2ConversationDataset {

		/** Output only. The number of conversations this conversation dataset contains. */
		conversationCount?: string | null;

		/** Represents metadata of a conversation. */
		conversationInfo?: GoogleCloudDialogflowV2ConversationInfo;

		/** Output only. Creation time of this dataset. */
		createTime?: string | null;

		/** Optional. The description of the dataset. Maximum of 10000 bytes. */
		description?: string | null;

		/** Required. The display name of the dataset. Maximum of 64 bytes. */
		displayName?: string | null;

		/** Represents the configuration of importing a set of conversation files in Google Cloud Storage. */
		inputConfig?: GoogleCloudDialogflowV2InputConfig;

		/** Output only. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/` */
		name?: string | null;
	}

	/** Represents a conversation dataset that a user imports raw data into. The data inside ConversationDataset can not be changed after ImportConversationData finishes (and calling ImportConversationData on a dataset that already has data is not allowed). */
	export interface GoogleCloudDialogflowV2ConversationDatasetFormProperties {

		/** Output only. The number of conversations this conversation dataset contains. */
		conversationCount: FormControl<string | null | undefined>,

		/** Output only. Creation time of this dataset. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. The description of the dataset. Maximum of 10000 bytes. */
		description: FormControl<string | null | undefined>,

		/** Required. The display name of the dataset. Maximum of 64 bytes. */
		displayName: FormControl<string | null | undefined>,

		/** Output only. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/` */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationDatasetFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationDatasetFormProperties>({
			conversationCount: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents metadata of a conversation. */
	export interface GoogleCloudDialogflowV2ConversationInfo {

		/** Optional. The language code of the conversation data within this dataset. See https://cloud.google.com/apis/design/standard_fields for more information. Supports all UTF-8 languages. */
		languageCode?: string | null;
	}

	/** Represents metadata of a conversation. */
	export interface GoogleCloudDialogflowV2ConversationInfoFormProperties {

		/** Optional. The language code of the conversation data within this dataset. See https://cloud.google.com/apis/design/standard_fields for more information. Supports all UTF-8 languages. */
		languageCode: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationInfoFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the configuration of importing a set of conversation files in Google Cloud Storage. */
	export interface GoogleCloudDialogflowV2InputConfig {

		/** Google Cloud Storage location for the inputs. */
		gcsSource?: GoogleCloudDialogflowV2GcsSources;
	}

	/** Represents the configuration of importing a set of conversation files in Google Cloud Storage. */
	export interface GoogleCloudDialogflowV2InputConfigFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2InputConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2InputConfigFormProperties>({
		});

	}


	/** Google Cloud Storage location for the inputs. */
	export interface GoogleCloudDialogflowV2GcsSources {

		/** Required. Google Cloud Storage URIs for the inputs. A URI is of the form: `gs://bucket/object-prefix-or-name` Whether a prefix or name is used depends on the use case. */
		uris?: Array<string>;
	}

	/** Google Cloud Storage location for the inputs. */
	export interface GoogleCloudDialogflowV2GcsSourcesFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2GcsSourcesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2GcsSourcesFormProperties>({
		});

	}


	/** Represents a notification sent to Pub/Sub subscribers for conversation lifecycle events. */
	export interface GoogleCloudDialogflowV2ConversationEvent {

		/** The unique identifier of the conversation this notification refers to. Format: `projects//conversations/`. */
		conversation?: string | null;

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		errorStatus?: GoogleRpcStatus;

		/** Represents a message posted into a conversation. */
		newMessagePayload?: GoogleCloudDialogflowV2Message;

		/** The type of the event that this notification refers to. */
		type?: GoogleCloudDialogflowV2ConversationEventType | null;
	}

	/** Represents a notification sent to Pub/Sub subscribers for conversation lifecycle events. */
	export interface GoogleCloudDialogflowV2ConversationEventFormProperties {

		/** The unique identifier of the conversation this notification refers to. Format: `projects//conversations/`. */
		conversation: FormControl<string | null | undefined>,

		/** The type of the event that this notification refers to. */
		type: FormControl<GoogleCloudDialogflowV2ConversationEventType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationEventFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationEventFormProperties>({
			conversation: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GoogleCloudDialogflowV2ConversationEventType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2ConversationEventType { TYPE_UNSPECIFIED = 0, CONVERSATION_STARTED = 1, CONVERSATION_FINISHED = 2, HUMAN_INTERVENTION_NEEDED = 3, NEW_MESSAGE = 4, UNRECOVERABLE_ERROR = 5 }


	/** Represents a conversation model. */
	export interface GoogleCloudDialogflowV2ConversationModel {

		/** Metadata for article suggestion models. */
		articleSuggestionModelMetadata?: GoogleCloudDialogflowV2ArticleSuggestionModelMetadata;

		/** Output only. Creation time of this model. */
		createTime?: string | null;

		/** Required. Datasets used to create model. */
		datasets?: Array<GoogleCloudDialogflowV2InputDataset>;

		/** Required. The display name of the model. At most 64 bytes long. */
		displayName?: string | null;

		/** Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode?: string | null;

		/** ConversationModel resource name. Format: `projects//conversationModels/` */
		name?: string | null;

		/** Metadata for smart reply models. */
		smartReplyModelMetadata?: GoogleCloudDialogflowV2SmartReplyModelMetadata;

		/** Output only. State of the model. A model can only serve prediction requests after it gets deployed. */
		state?: GoogleCloudDialogflowV2ConversationModelState | null;
	}

	/** Represents a conversation model. */
	export interface GoogleCloudDialogflowV2ConversationModelFormProperties {

		/** Output only. Creation time of this model. */
		createTime: FormControl<string | null | undefined>,

		/** Required. The display name of the model. At most 64 bytes long. */
		displayName: FormControl<string | null | undefined>,

		/** Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode: FormControl<string | null | undefined>,

		/** ConversationModel resource name. Format: `projects//conversationModels/` */
		name: FormControl<string | null | undefined>,

		/** Output only. State of the model. A model can only serve prediction requests after it gets deployed. */
		state: FormControl<GoogleCloudDialogflowV2ConversationModelState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationModelFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationModelFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowV2ConversationModelState | null | undefined>(undefined),
		});

	}


	/** InputDataset used to create model or do evaluation. NextID:5 */
	export interface GoogleCloudDialogflowV2InputDataset {

		/** Required. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/` */
		dataset?: string | null;
	}

	/** InputDataset used to create model or do evaluation. NextID:5 */
	export interface GoogleCloudDialogflowV2InputDatasetFormProperties {

		/** Required. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/` */
		dataset: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2InputDatasetFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2InputDatasetFormProperties>({
			dataset: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for smart reply models. */
	export interface GoogleCloudDialogflowV2SmartReplyModelMetadata {

		/** Optional. Type of the smart reply model. If not provided, model_type is used. */
		trainingModelType?: GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType | null;
	}

	/** Metadata for smart reply models. */
	export interface GoogleCloudDialogflowV2SmartReplyModelMetadataFormProperties {

		/** Optional. Type of the smart reply model. If not provided, model_type is used. */
		trainingModelType: FormControl<GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SmartReplyModelMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SmartReplyModelMetadataFormProperties>({
			trainingModelType: new FormControl<GoogleCloudDialogflowV2ArticleSuggestionModelMetadataTrainingModelType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2ConversationModelState { STATE_UNSPECIFIED = 0, CREATING = 1, UNDEPLOYED = 2, DEPLOYING = 3, DEPLOYED = 4, UNDEPLOYING = 5, DELETING = 6, FAILED = 7, PENDING = 8 }


	/** Represents evaluation result of a conversation model. */
	export interface GoogleCloudDialogflowV2ConversationModelEvaluation {

		/** Output only. Creation time of this model. */
		createTime?: string | null;

		/** Optional. The display name of the model evaluation. At most 64 bytes long. */
		displayName?: string | null;

		/** The configuration for model evaluation. */
		evaluationConfig?: GoogleCloudDialogflowV2EvaluationConfig;

		/** The resource name of the evaluation. Format: `projects//conversationModels//evaluations/` */
		name?: string | null;

		/** Output only. Human eval template in csv format. It tooks real-world conversations provided through input dataset, generates example suggestions for customer to verify quality of the model. For Smart Reply, the generated csv file contains columns of Context, (Suggestions,Q1,Q2)*3, Actual reply. Context contains at most 10 latest messages in the conversation prior to the current suggestion. Q1: "Would you send it as the next message of agent?" Evaluated based on whether the suggest is appropriate to be sent by agent in current context. Q2: "Does the suggestion move the conversation closer to resolution?" Evaluated based on whether the suggestion provide solutions, or answers customer's question or collect information from customer to resolve the customer's issue. Actual reply column contains the actual agent reply sent in the context. */
		rawHumanEvalTemplateCsv?: string | null;

		/** The evaluation metrics for smart reply model. */
		smartReplyMetrics?: GoogleCloudDialogflowV2SmartReplyMetrics;
	}

	/** Represents evaluation result of a conversation model. */
	export interface GoogleCloudDialogflowV2ConversationModelEvaluationFormProperties {

		/** Output only. Creation time of this model. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. The display name of the model evaluation. At most 64 bytes long. */
		displayName: FormControl<string | null | undefined>,

		/** The resource name of the evaluation. Format: `projects//conversationModels//evaluations/` */
		name: FormControl<string | null | undefined>,

		/** Output only. Human eval template in csv format. It tooks real-world conversations provided through input dataset, generates example suggestions for customer to verify quality of the model. For Smart Reply, the generated csv file contains columns of Context, (Suggestions,Q1,Q2)*3, Actual reply. Context contains at most 10 latest messages in the conversation prior to the current suggestion. Q1: "Would you send it as the next message of agent?" Evaluated based on whether the suggest is appropriate to be sent by agent in current context. Q2: "Does the suggestion move the conversation closer to resolution?" Evaluated based on whether the suggestion provide solutions, or answers customer's question or collect information from customer to resolve the customer's issue. Actual reply column contains the actual agent reply sent in the context. */
		rawHumanEvalTemplateCsv: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationModelEvaluationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationModelEvaluationFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			rawHumanEvalTemplateCsv: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration for model evaluation. */
	export interface GoogleCloudDialogflowV2EvaluationConfig {

		/** Required. Datasets used for evaluation. */
		datasets?: Array<GoogleCloudDialogflowV2InputDataset>;

		/** Smart compose specific configuration for evaluation job. */
		smartComposeConfig?: GoogleCloudDialogflowV2EvaluationConfigSmartComposeConfig;

		/** Smart reply specific configuration for evaluation job. */
		smartReplyConfig?: GoogleCloudDialogflowV2EvaluationConfigSmartReplyConfig;
	}

	/** The configuration for model evaluation. */
	export interface GoogleCloudDialogflowV2EvaluationConfigFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2EvaluationConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EvaluationConfigFormProperties>({
		});

	}


	/** Smart compose specific configuration for evaluation job. */
	export interface GoogleCloudDialogflowV2EvaluationConfigSmartComposeConfig {

		/** The allowlist document resource name. Format: `projects//knowledgeBases//documents/`. Only used for smart compose model. */
		allowlistDocument?: string | null;

		/** Required. The model to be evaluated can return multiple results with confidence score on each query. These results will be sorted by the descending order of the scores and we only keep the first max_result_count results as the final results to evaluate. */
		maxResultCount?: number | null;
	}

	/** Smart compose specific configuration for evaluation job. */
	export interface GoogleCloudDialogflowV2EvaluationConfigSmartComposeConfigFormProperties {

		/** The allowlist document resource name. Format: `projects//knowledgeBases//documents/`. Only used for smart compose model. */
		allowlistDocument: FormControl<string | null | undefined>,

		/** Required. The model to be evaluated can return multiple results with confidence score on each query. These results will be sorted by the descending order of the scores and we only keep the first max_result_count results as the final results to evaluate. */
		maxResultCount: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EvaluationConfigSmartComposeConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EvaluationConfigSmartComposeConfigFormProperties>({
			allowlistDocument: new FormControl<string | null | undefined>(undefined),
			maxResultCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Smart reply specific configuration for evaluation job. */
	export interface GoogleCloudDialogflowV2EvaluationConfigSmartReplyConfig {

		/** The allowlist document resource name. Format: `projects//knowledgeBases//documents/`. Only used for smart reply model. */
		allowlistDocument?: string | null;

		/** Required. The model to be evaluated can return multiple results with confidence score on each query. These results will be sorted by the descending order of the scores and we only keep the first max_result_count results as the final results to evaluate. */
		maxResultCount?: number | null;
	}

	/** Smart reply specific configuration for evaluation job. */
	export interface GoogleCloudDialogflowV2EvaluationConfigSmartReplyConfigFormProperties {

		/** The allowlist document resource name. Format: `projects//knowledgeBases//documents/`. Only used for smart reply model. */
		allowlistDocument: FormControl<string | null | undefined>,

		/** Required. The model to be evaluated can return multiple results with confidence score on each query. These results will be sorted by the descending order of the scores and we only keep the first max_result_count results as the final results to evaluate. */
		maxResultCount: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EvaluationConfigSmartReplyConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EvaluationConfigSmartReplyConfigFormProperties>({
			allowlistDocument: new FormControl<string | null | undefined>(undefined),
			maxResultCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The evaluation metrics for smart reply model. */
	export interface GoogleCloudDialogflowV2SmartReplyMetrics {

		/** Percentage of target participant messages in the evaluation dataset for which similar messages have appeared at least once in the allowlist. Should be [0, 1]. */
		allowlistCoverage?: number | null;

		/** Total number of conversations used to generate this metric. */
		conversationCount?: string | null;

		/** Metrics of top n smart replies, sorted by TopNMetric.n. */
		topNMetrics?: Array<GoogleCloudDialogflowV2SmartReplyMetricsTopNMetrics>;
	}

	/** The evaluation metrics for smart reply model. */
	export interface GoogleCloudDialogflowV2SmartReplyMetricsFormProperties {

		/** Percentage of target participant messages in the evaluation dataset for which similar messages have appeared at least once in the allowlist. Should be [0, 1]. */
		allowlistCoverage: FormControl<number | null | undefined>,

		/** Total number of conversations used to generate this metric. */
		conversationCount: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SmartReplyMetricsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SmartReplyMetricsFormProperties>({
			allowlistCoverage: new FormControl<number | null | undefined>(undefined),
			conversationCount: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Evaluation metrics when retrieving `n` smart replies with the model. */
	export interface GoogleCloudDialogflowV2SmartReplyMetricsTopNMetrics {

		/** Number of retrieved smart replies. For example, when `n` is 3, this evaluation contains metrics for when Dialogflow retrieves 3 smart replies with the model. */
		n?: number | null;

		/** Defined as `number of queries whose top n smart replies have at least one similar (token match similarity above the defined threshold) reply as the real reply` divided by `number of queries with at least one smart reply`. Value ranges from 0.0 to 1.0 inclusive. */
		recall?: number | null;
	}

	/** Evaluation metrics when retrieving `n` smart replies with the model. */
	export interface GoogleCloudDialogflowV2SmartReplyMetricsTopNMetricsFormProperties {

		/** Number of retrieved smart replies. For example, when `n` is 3, this evaluation contains metrics for when Dialogflow retrieves 3 smart replies with the model. */
		n: FormControl<number | null | undefined>,

		/** Defined as `number of queries whose top n smart replies have at least one similar (token match similarity above the defined threshold) reply as the real reply` divided by `number of queries with at least one smart reply`. Value ranges from 0.0 to 1.0 inclusive. */
		recall: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SmartReplyMetricsTopNMetricsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SmartReplyMetricsTopNMetricsFormProperties>({
			n: new FormControl<number | null | undefined>(undefined),
			recall: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Defines the services to connect to incoming Dialogflow conversations. */
	export interface GoogleCloudDialogflowV2ConversationProfile {

		/** Defines the Automated Agent to connect to a conversation. */
		automatedAgentConfig?: GoogleCloudDialogflowV2AutomatedAgentConfig;

		/** Output only. Create time of the conversation profile. */
		createTime?: string | null;

		/** Required. Human readable name for this profile. Max length 1024 bytes. */
		displayName?: string | null;

		/** Defines the Human Agent Assist to connect to a conversation. */
		humanAgentAssistantConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfig;

		/** Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation. Currently, this feature is not general available, please contact Google to get access. */
		humanAgentHandoffConfig?: GoogleCloudDialogflowV2HumanAgentHandoffConfig;

		/** Language code for the conversation profile. If not specified, the language is en-US. Language at ConversationProfile should be set for all non en-US languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode?: string | null;

		/** Defines logging behavior for conversation lifecycle events. */
		loggingConfig?: GoogleCloudDialogflowV2LoggingConfig;

		/** The unique identifier of this conversation profile. Format: `projects//locations//conversationProfiles/`. */
		name?: string | null;

		/** Defines notification behavior. */
		newMessageEventNotificationConfig?: GoogleCloudDialogflowV2NotificationConfig;

		/** Defines notification behavior. */
		notificationConfig?: GoogleCloudDialogflowV2NotificationConfig;

		/** Name of the CX SecuritySettings reference for the agent. Format: `projects//locations//securitySettings/`. */
		securitySettings?: string | null;

		/** Configures speech transcription for ConversationProfile. */
		sttConfig?: GoogleCloudDialogflowV2SpeechToTextConfig;

		/** The time zone of this conversational profile from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. Defaults to America/New_York. */
		timeZone?: string | null;

		/** Configuration of how speech should be synthesized. */
		ttsConfig?: GoogleCloudDialogflowV2SynthesizeSpeechConfig;

		/** Output only. Update time of the conversation profile. */
		updateTime?: string | null;
	}

	/** Defines the services to connect to incoming Dialogflow conversations. */
	export interface GoogleCloudDialogflowV2ConversationProfileFormProperties {

		/** Output only. Create time of the conversation profile. */
		createTime: FormControl<string | null | undefined>,

		/** Required. Human readable name for this profile. Max length 1024 bytes. */
		displayName: FormControl<string | null | undefined>,

		/** Language code for the conversation profile. If not specified, the language is en-US. Language at ConversationProfile should be set for all non en-US languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode: FormControl<string | null | undefined>,

		/** The unique identifier of this conversation profile. Format: `projects//locations//conversationProfiles/`. */
		name: FormControl<string | null | undefined>,

		/** Name of the CX SecuritySettings reference for the agent. Format: `projects//locations//securitySettings/`. */
		securitySettings: FormControl<string | null | undefined>,

		/** The time zone of this conversational profile from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. Defaults to America/New_York. */
		timeZone: FormControl<string | null | undefined>,

		/** Output only. Update time of the conversation profile. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ConversationProfileFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ConversationProfileFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			securitySettings: new FormControl<string | null | undefined>(undefined),
			timeZone: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the Human Agent Assist to connect to a conversation. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfig {

		/** Detail human agent assistant config. */
		endUserSuggestionConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig;

		/** Detail human agent assistant config. */
		humanAgentSuggestionConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig;

		/** Configuration for analyses to run on each conversation message. */
		messageAnalysisConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfig;

		/** Defines notification behavior. */
		notificationConfig?: GoogleCloudDialogflowV2NotificationConfig;
	}

	/** Defines the Human Agent Assist to connect to a conversation. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigFormProperties>({
		});

	}


	/** Detail human agent assistant config. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfig {

		/** Configuration of different suggestion features. One feature can have only one config. */
		featureConfigs?: Array<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfig>;

		/** If `group_suggestion_responses` is false, and there are multiple `feature_configs` in `event based suggestion` or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or `StreamingAnalyzeContentResponse`. If `group_suggestion_responses` set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse. */
		groupSuggestionResponses?: boolean | null;
	}

	/** Detail human agent assistant config. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfigFormProperties {

		/** If `group_suggestion_responses` is false, and there are multiple `feature_configs` in `event based suggestion` or StreamingAnalyzeContent, we will try to deliver suggestions to customers as soon as we get new suggestion. Different type of suggestions based on the same context will be in separate Pub/Sub event or `StreamingAnalyzeContentResponse`. If `group_suggestion_responses` set to true. All the suggestions to the same participant based on the same context will be grouped into a single Pub/Sub event or StreamingAnalyzeContentResponse. */
		groupSuggestionResponses: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionConfigFormProperties>({
			groupSuggestionResponses: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Config for suggestion features. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfig {

		/** Custom conversation models used in agent assist feature. Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY, CONVERSATION_SUMMARIZATION. */
		conversationModelConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfig;

		/** Config to process conversation. */
		conversationProcessConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfig;

		/** Optional. Disable the logging of search queries sent by human agents. It can prevent those queries from being stored at answer records. Supported features: KNOWLEDGE_SEARCH. */
		disableAgentQueryLogging?: boolean | null;

		/** Optional. Enable including conversation context during query answer generation. Supported features: KNOWLEDGE_SEARCH. */
		enableConversationAugmentedQuery?: boolean | null;

		/** Automatically iterates all participants and tries to compile suggestions. Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST, KNOWLEDGE_ASSIST. */
		enableEventBasedSuggestion?: boolean | null;

		/** Config for suggestion query. */
		queryConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig;

		/** The type of Human Agent Assistant API suggestion to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list. */
		suggestionFeature?: GoogleCloudDialogflowV2SuggestionFeature;

		/** Settings of suggestion trigger. */
		suggestionTriggerSettings?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettings;
	}

	/** Config for suggestion features. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfigFormProperties {

		/** Optional. Disable the logging of search queries sent by human agents. It can prevent those queries from being stored at answer records. Supported features: KNOWLEDGE_SEARCH. */
		disableAgentQueryLogging: FormControl<boolean | null | undefined>,

		/** Optional. Enable including conversation context during query answer generation. Supported features: KNOWLEDGE_SEARCH. */
		enableConversationAugmentedQuery: FormControl<boolean | null | undefined>,

		/** Automatically iterates all participants and tries to compile suggestions. Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST, KNOWLEDGE_ASSIST. */
		enableEventBasedSuggestion: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfigFormProperties>({
			disableAgentQueryLogging: new FormControl<boolean | null | undefined>(undefined),
			enableConversationAugmentedQuery: new FormControl<boolean | null | undefined>(undefined),
			enableEventBasedSuggestion: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Custom conversation models used in agent assist feature. Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY, CONVERSATION_SUMMARIZATION. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfig {

		/** Version of current baseline model. It will be ignored if model is set. Valid versions are: Article Suggestion baseline model: - 0.9 - 1.0 (default) Summarization baseline model: - 1.0 */
		baselineModelVersion?: string | null;

		/** Conversation model resource name. Format: `projects//conversationModels/`. */
		model?: string | null;
	}

	/** Custom conversation models used in agent assist feature. Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY, CONVERSATION_SUMMARIZATION. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfigFormProperties {

		/** Version of current baseline model. It will be ignored if model is set. Valid versions are: Article Suggestion baseline model: - 0.9 - 1.0 (default) Summarization baseline model: - 1.0 */
		baselineModelVersion: FormControl<string | null | undefined>,

		/** Conversation model resource name. Format: `projects//conversationModels/`. */
		model: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationModelConfigFormProperties>({
			baselineModelVersion: new FormControl<string | null | undefined>(undefined),
			model: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Config to process conversation. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfig {

		/** Number of recent non-small-talk sentences to use as context for article and FAQ suggestion */
		recentSentencesCount?: number | null;
	}

	/** Config to process conversation. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfigFormProperties {

		/** Number of recent non-small-talk sentences to use as context for article and FAQ suggestion */
		recentSentencesCount: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigConversationProcessConfigFormProperties>({
			recentSentencesCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Config for suggestion query. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfig {

		/** Confidence threshold of query result. Agent Assist gives each suggestion a score in the range [0.0, 1.0], based on the relevance between the suggestion and the current conversation context. A score of 0.0 has no relevance, while a score of 1.0 has high relevance. Only suggestions with a score greater than or equal to the value of this field are included in the results. For a baseline model (the default), the recommended value is in the range [0.05, 0.1]. For a custom model, there is no recommended value. Tune this value by starting from a very low value and slowly increasing until you have desired results. If this field is not set, it defaults to 0.0, which means that all suggestions are returned. Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE, KNOWLEDGE_SEARCH, KNOWLEDGE_ASSIST, ENTITY_EXTRACTION. */
		confidenceThreshold?: number | null;

		/** Settings that determine how to filter recent conversation context when generating suggestions. */
		contextFilterSettings?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettings;

		/** Dialogflow source setting. Supported feature: DIALOGFLOW_ASSIST. */
		dialogflowQuerySource?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySource;

		/** Document source settings. Supported features: SMART_REPLY, SMART_COMPOSE. */
		documentQuerySource?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySource;

		/** Knowledge base source settings. Supported features: ARTICLE_SUGGESTION, FAQ. */
		knowledgeBaseQuerySource?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySource;

		/** Maximum number of results to return. Currently, if unset, defaults to 10. And the max number is 20. */
		maxResults?: number | null;

		/** Custom sections to return when requesting a summary of a conversation. This is only supported when `baseline_model_version` == '2.0'. Supported features: CONVERSATION_SUMMARIZATION, CONVERSATION_SUMMARIZATION_VOICE. */
		sections?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSections;
	}

	/** Config for suggestion query. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigFormProperties {

		/** Confidence threshold of query result. Agent Assist gives each suggestion a score in the range [0.0, 1.0], based on the relevance between the suggestion and the current conversation context. A score of 0.0 has no relevance, while a score of 1.0 has high relevance. Only suggestions with a score greater than or equal to the value of this field are included in the results. For a baseline model (the default), the recommended value is in the range [0.05, 0.1]. For a custom model, there is no recommended value. Tune this value by starting from a very low value and slowly increasing until you have desired results. If this field is not set, it defaults to 0.0, which means that all suggestions are returned. Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE, KNOWLEDGE_SEARCH, KNOWLEDGE_ASSIST, ENTITY_EXTRACTION. */
		confidenceThreshold: FormControl<number | null | undefined>,

		/** Maximum number of results to return. Currently, if unset, defaults to 10. And the max number is 20. */
		maxResults: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigFormProperties>({
			confidenceThreshold: new FormControl<number | null | undefined>(undefined),
			maxResults: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Settings that determine how to filter recent conversation context when generating suggestions. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettings {

		/** If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped. */
		dropHandoffMessages?: boolean | null;

		/** If set to true, all messages from ivr stage are dropped. */
		dropIvrMessages?: boolean | null;

		/** If set to true, all messages from virtual agent are dropped. */
		dropVirtualAgentMessages?: boolean | null;
	}

	/** Settings that determine how to filter recent conversation context when generating suggestions. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettingsFormProperties {

		/** If set to true, the last message from virtual agent (hand off message) and the message before it (trigger message of hand off) are dropped. */
		dropHandoffMessages: FormControl<boolean | null | undefined>,

		/** If set to true, all messages from ivr stage are dropped. */
		dropIvrMessages: FormControl<boolean | null | undefined>,

		/** If set to true, all messages from virtual agent are dropped. */
		dropVirtualAgentMessages: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigContextFilterSettingsFormProperties>({
			dropHandoffMessages: new FormControl<boolean | null | undefined>(undefined),
			dropIvrMessages: new FormControl<boolean | null | undefined>(undefined),
			dropVirtualAgentMessages: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Dialogflow source setting. Supported feature: DIALOGFLOW_ASSIST. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySource {

		/** Required. The name of a Dialogflow virtual agent used for end user side intent detection and suggestion. Format: `projects//locations//agent`. When multiple agents are allowed in the same Dialogflow project. */
		agent?: string | null;

		/** The configuration used for human agent side Dialogflow assist suggestion. */
		humanAgentSideConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceHumanAgentSideConfig;
	}

	/** Dialogflow source setting. Supported feature: DIALOGFLOW_ASSIST. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceFormProperties {

		/** Required. The name of a Dialogflow virtual agent used for end user side intent detection and suggestion. Format: `projects//locations//agent`. When multiple agents are allowed in the same Dialogflow project. */
		agent: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceFormProperties>({
			agent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration used for human agent side Dialogflow assist suggestion. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceHumanAgentSideConfig {

		/** Optional. The name of a dialogflow virtual agent used for intent detection and suggestion triggered by human agent. Format: `projects//locations//agent`. */
		agent?: string | null;
	}

	/** The configuration used for human agent side Dialogflow assist suggestion. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceHumanAgentSideConfigFormProperties {

		/** Optional. The name of a dialogflow virtual agent used for intent detection and suggestion triggered by human agent. Format: `projects//locations//agent`. */
		agent: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceHumanAgentSideConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDialogflowQuerySourceHumanAgentSideConfigFormProperties>({
			agent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Document source settings. Supported features: SMART_REPLY, SMART_COMPOSE. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySource {

		/** Required. Knowledge documents to query from. Format: `projects//locations//knowledgeBases//documents/`. Currently, at most 5 documents are supported. */
		documents?: Array<string>;
	}

	/** Document source settings. Supported features: SMART_REPLY, SMART_COMPOSE. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySourceFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySourceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigDocumentQuerySourceFormProperties>({
		});

	}


	/** Knowledge base source settings. Supported features: ARTICLE_SUGGESTION, FAQ. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySource {

		/** Required. Knowledge bases to query. Format: `projects//locations//knowledgeBases/`. Currently, at most 5 knowledge bases are supported. */
		knowledgeBases?: Array<string>;
	}

	/** Knowledge base source settings. Supported features: ARTICLE_SUGGESTION, FAQ. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySourceFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySourceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigKnowledgeBaseQuerySourceFormProperties>({
		});

	}


	/** Custom sections to return when requesting a summary of a conversation. This is only supported when `baseline_model_version` == '2.0'. Supported features: CONVERSATION_SUMMARIZATION, CONVERSATION_SUMMARIZATION_VOICE. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSections {

		/** The selected sections chosen to return when requesting a summary of a conversation. A duplicate selected section will be treated as a single selected section. If section types are not provided, the default will be {SITUATION, ACTION, RESULT}. */
		sectionTypes?: Array<string>;
	}

	/** Custom sections to return when requesting a summary of a conversation. This is only supported when `baseline_model_version` == '2.0'. Supported features: CONVERSATION_SUMMARIZATION, CONVERSATION_SUMMARIZATION_VOICE. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSectionsFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSectionsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionQueryConfigSectionsFormProperties>({
		});

	}


	/** The type of Human Agent Assistant API suggestion to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list. */
	export interface GoogleCloudDialogflowV2SuggestionFeature {

		/** Type of Human Agent Assistant API feature to request. */
		type?: GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null;
	}

	/** The type of Human Agent Assistant API suggestion to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list. */
	export interface GoogleCloudDialogflowV2SuggestionFeatureFormProperties {

		/** Type of Human Agent Assistant API feature to request. */
		type: FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestionFeatureFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestionFeatureFormProperties>({
			type: new FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>(undefined),
		});

	}


	/** Settings of suggestion trigger. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettings {

		/** Do not trigger if last utterance is small talk. */
		noSmalltalk?: boolean | null;

		/** Only trigger suggestion if participant role of last utterance is END_USER. */
		onlyEndUser?: boolean | null;
	}

	/** Settings of suggestion trigger. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettingsFormProperties {

		/** Do not trigger if last utterance is small talk. */
		noSmalltalk: FormControl<boolean | null | undefined>,

		/** Only trigger suggestion if participant role of last utterance is END_USER. */
		onlyEndUser: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionTriggerSettingsFormProperties>({
			noSmalltalk: new FormControl<boolean | null | undefined>(undefined),
			onlyEndUser: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration for analyses to run on each conversation message. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfig {

		/** Enable entity extraction in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Currently, this feature is not general available, please contact Google to get access. */
		enableEntityExtraction?: boolean | null;

		/** Enable sentiment analysis in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral: https://cloud.google.com/natural-language/docs/basics#sentiment_analysis For Participants.StreamingAnalyzeContent method, result will be in StreamingAnalyzeContentResponse.message.SentimentAnalysisResult. For Participants.AnalyzeContent method, result will be in AnalyzeContentResponse.message.SentimentAnalysisResult For Conversations.ListMessages method, result will be in ListMessagesResponse.messages.SentimentAnalysisResult If Pub/Sub notification is configured, result will be in ConversationEvent.new_message_payload.SentimentAnalysisResult. */
		enableSentimentAnalysis?: boolean | null;
	}

	/** Configuration for analyses to run on each conversation message. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfigFormProperties {

		/** Enable entity extraction in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Currently, this feature is not general available, please contact Google to get access. */
		enableEntityExtraction: FormControl<boolean | null | undefined>,

		/** Enable sentiment analysis in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral: https://cloud.google.com/natural-language/docs/basics#sentiment_analysis For Participants.StreamingAnalyzeContent method, result will be in StreamingAnalyzeContentResponse.message.SentimentAnalysisResult. For Participants.AnalyzeContent method, result will be in AnalyzeContentResponse.message.SentimentAnalysisResult For Conversations.ListMessages method, result will be in ListMessagesResponse.messages.SentimentAnalysisResult If Pub/Sub notification is configured, result will be in ConversationEvent.new_message_payload.SentimentAnalysisResult. */
		enableSentimentAnalysis: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantConfigMessageAnalysisConfigFormProperties>({
			enableEntityExtraction: new FormControl<boolean | null | undefined>(undefined),
			enableSentimentAnalysis: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Defines notification behavior. */
	export interface GoogleCloudDialogflowV2NotificationConfig {

		/** Format of message. */
		messageFormat?: GoogleCloudDialogflowV2NotificationConfigMessageFormat | null;

		/** Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos. For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service Agent` role in the topic project. For chat integration to receive notification, make sure API caller has been granted the `Dialogflow Service Agent` role for the topic. Format: `projects//locations//topics/`. */
		topic?: string | null;
	}

	/** Defines notification behavior. */
	export interface GoogleCloudDialogflowV2NotificationConfigFormProperties {

		/** Format of message. */
		messageFormat: FormControl<GoogleCloudDialogflowV2NotificationConfigMessageFormat | null | undefined>,

		/** Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos. For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service Agent` role in the topic project. For chat integration to receive notification, make sure API caller has been granted the `Dialogflow Service Agent` role for the topic. Format: `projects//locations//topics/`. */
		topic: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2NotificationConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2NotificationConfigFormProperties>({
			messageFormat: new FormControl<GoogleCloudDialogflowV2NotificationConfigMessageFormat | null | undefined>(undefined),
			topic: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2NotificationConfigMessageFormat { MESSAGE_FORMAT_UNSPECIFIED = 0, PROTO = 1, JSON = 2 }


	/** Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation. Currently, this feature is not general available, please contact Google to get access. */
	export interface GoogleCloudDialogflowV2HumanAgentHandoffConfig {

		/** Configuration specific to LivePerson (https://www.liveperson.com). */
		livePersonConfig?: GoogleCloudDialogflowV2HumanAgentHandoffConfigLivePersonConfig;

		/** Configuration specific to Salesforce Live Agent. */
		salesforceLiveAgentConfig?: GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig;
	}

	/** Defines the hand off to a live agent, typically on which external agent service provider to connect to a conversation. Currently, this feature is not general available, please contact Google to get access. */
	export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentHandoffConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentHandoffConfigFormProperties>({
		});

	}


	/** Configuration specific to LivePerson (https://www.liveperson.com). */
	export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigLivePersonConfig {

		/** Required. Account number of the LivePerson account to connect. This is the account number you input at the login page. */
		accountNumber?: string | null;
	}

	/** Configuration specific to LivePerson (https://www.liveperson.com). */
	export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigLivePersonConfigFormProperties {

		/** Required. Account number of the LivePerson account to connect. This is the account number you input at the login page. */
		accountNumber: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentHandoffConfigLivePersonConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentHandoffConfigLivePersonConfigFormProperties>({
			accountNumber: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration specific to Salesforce Live Agent. */
	export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig {

		/** Required. Live Agent chat button ID. */
		buttonId?: string | null;

		/** Required. Live Agent deployment ID. */
		deploymentId?: string | null;

		/** Required. Domain of the Live Agent endpoint for this agent. You can find the endpoint URL in the `Live Agent settings` page. For example if URL has the form https://d.la4-c2-phx.salesforceliveagent.com/..., you should fill in d.la4-c2-phx.salesforceliveagent.com. */
		endpointDomain?: string | null;

		/** Required. The organization ID of the Salesforce account. */
		organizationId?: string | null;
	}

	/** Configuration specific to Salesforce Live Agent. */
	export interface GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfigFormProperties {

		/** Required. Live Agent chat button ID. */
		buttonId: FormControl<string | null | undefined>,

		/** Required. Live Agent deployment ID. */
		deploymentId: FormControl<string | null | undefined>,

		/** Required. Domain of the Live Agent endpoint for this agent. You can find the endpoint URL in the `Live Agent settings` page. For example if URL has the form https://d.la4-c2-phx.salesforceliveagent.com/..., you should fill in d.la4-c2-phx.salesforceliveagent.com. */
		endpointDomain: FormControl<string | null | undefined>,

		/** Required. The organization ID of the Salesforce account. */
		organizationId: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfigFormProperties>({
			buttonId: new FormControl<string | null | undefined>(undefined),
			deploymentId: new FormControl<string | null | undefined>(undefined),
			endpointDomain: new FormControl<string | null | undefined>(undefined),
			organizationId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines logging behavior for conversation lifecycle events. */
	export interface GoogleCloudDialogflowV2LoggingConfig {

		/** Whether to log conversation events like CONVERSATION_STARTED to Stackdriver in the conversation project as JSON format ConversationEvent protos. */
		enableStackdriverLogging?: boolean | null;
	}

	/** Defines logging behavior for conversation lifecycle events. */
	export interface GoogleCloudDialogflowV2LoggingConfigFormProperties {

		/** Whether to log conversation events like CONVERSATION_STARTED to Stackdriver in the conversation project as JSON format ConversationEvent protos. */
		enableStackdriverLogging: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2LoggingConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2LoggingConfigFormProperties>({
			enableStackdriverLogging: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configures speech transcription for ConversationProfile. */
	export interface GoogleCloudDialogflowV2SpeechToTextConfig {

		/** Which Speech model to select. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then Dialogflow auto-selects a model based on other parameters in the SpeechToTextConfig and Agent settings. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details. If you specify a model, the following models typically have the best performance: - phone_call (best for Agent Assist and telephony) - latest_short (best for Dialogflow non-telephony) - command_and_search Leave this field unspecified to use [Agent Speech settings](https://cloud.google.com/dialogflow/cx/docs/concept/agent#settings-speech) for model selection. */
		model?: string | null;

		/** The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error. */
		speechModelVariant?: GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null;

		/** Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value. */
		useTimeoutBasedEndpointing?: boolean | null;
	}

	/** Configures speech transcription for ConversationProfile. */
	export interface GoogleCloudDialogflowV2SpeechToTextConfigFormProperties {

		/** Which Speech model to select. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then Dialogflow auto-selects a model based on other parameters in the SpeechToTextConfig and Agent settings. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details. If you specify a model, the following models typically have the best performance: - phone_call (best for Agent Assist and telephony) - latest_short (best for Dialogflow non-telephony) - command_and_search Leave this field unspecified to use [Agent Speech settings](https://cloud.google.com/dialogflow/cx/docs/concept/agent#settings-speech) for model selection. */
		model: FormControl<string | null | undefined>,

		/** The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error. */
		speechModelVariant: FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>,

		/** Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value. */
		useTimeoutBasedEndpointing: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SpeechToTextConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SpeechToTextConfigFormProperties>({
			model: new FormControl<string | null | undefined>(undefined),
			speechModelVariant: new FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>(undefined),
			useTimeoutBasedEndpointing: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Metadata for ConversationDatasets. */
	export interface GoogleCloudDialogflowV2CreateConversationDatasetOperationMetadata {

		/** The resource name of the conversation dataset that will be created. Format: `projects//locations//conversationDatasets/` */
		conversationDataset?: string | null;
	}

	/** Metadata for ConversationDatasets. */
	export interface GoogleCloudDialogflowV2CreateConversationDatasetOperationMetadataFormProperties {

		/** The resource name of the conversation dataset that will be created. Format: `projects//locations//conversationDatasets/` */
		conversationDataset: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2CreateConversationDatasetOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2CreateConversationDatasetOperationMetadataFormProperties>({
			conversationDataset: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a ConversationModels.CreateConversationModelEvaluation operation. */
	export interface GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadata {

		/** The resource name of the conversation model. Format: `projects//locations//conversationModels/` */
		conversationModel?: string | null;

		/** The resource name of the conversation model. Format: `projects//locations//conversationModels//evaluations/` */
		conversationModelEvaluation?: string | null;

		/** Timestamp when the request to create conversation model was submitted. The time is measured on server side. */
		createTime?: string | null;

		/** State of CreateConversationModel operation. */
		state?: GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadataState | null;
	}

	/** Metadata for a ConversationModels.CreateConversationModelEvaluation operation. */
	export interface GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadataFormProperties {

		/** The resource name of the conversation model. Format: `projects//locations//conversationModels/` */
		conversationModel: FormControl<string | null | undefined>,

		/** The resource name of the conversation model. Format: `projects//locations//conversationModels//evaluations/` */
		conversationModelEvaluation: FormControl<string | null | undefined>,

		/** Timestamp when the request to create conversation model was submitted. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,

		/** State of CreateConversationModel operation. */
		state: FormControl<GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadataState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadataFormProperties>({
			conversationModel: new FormControl<string | null | undefined>(undefined),
			conversationModelEvaluation: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadataState | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadataState { STATE_UNSPECIFIED = 0, INITIALIZING = 1, RUNNING = 2, CANCELLED = 3, SUCCEEDED = 4, FAILED = 5 }


	/** The request message for ConversationModels.CreateConversationModelEvaluation */
	export interface GoogleCloudDialogflowV2CreateConversationModelEvaluationRequest {

		/** Represents evaluation result of a conversation model. */
		conversationModelEvaluation?: GoogleCloudDialogflowV2ConversationModelEvaluation;
	}

	/** The request message for ConversationModels.CreateConversationModelEvaluation */
	export interface GoogleCloudDialogflowV2CreateConversationModelEvaluationRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2CreateConversationModelEvaluationRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2CreateConversationModelEvaluationRequestFormProperties>({
		});

	}


	/** Metadata for a ConversationModels.CreateConversationModel operation. */
	export interface GoogleCloudDialogflowV2CreateConversationModelOperationMetadata {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel?: string | null;

		/** Timestamp when the request to create conversation model is submitted. The time is measured on server side. */
		createTime?: string | null;

		/** State of CreateConversationModel operation. */
		state?: GoogleCloudDialogflowV2CreateConversationModelOperationMetadataState | null;
	}

	/** Metadata for a ConversationModels.CreateConversationModel operation. */
	export interface GoogleCloudDialogflowV2CreateConversationModelOperationMetadataFormProperties {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel: FormControl<string | null | undefined>,

		/** Timestamp when the request to create conversation model is submitted. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,

		/** State of CreateConversationModel operation. */
		state: FormControl<GoogleCloudDialogflowV2CreateConversationModelOperationMetadataState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2CreateConversationModelOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2CreateConversationModelOperationMetadataFormProperties>({
			conversationModel: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowV2CreateConversationModelOperationMetadataState | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2CreateConversationModelOperationMetadataState { STATE_UNSPECIFIED = 0, PENDING = 1, SUCCEEDED = 2, FAILED = 3, CANCELLED = 4, CANCELLING = 5, TRAINING = 6 }


	/** Metadata for ConversationDatasets. */
	export interface GoogleCloudDialogflowV2DeleteConversationDatasetOperationMetadata {
	}

	/** Metadata for ConversationDatasets. */
	export interface GoogleCloudDialogflowV2DeleteConversationDatasetOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2DeleteConversationDatasetOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DeleteConversationDatasetOperationMetadataFormProperties>({
		});

	}


	/** Metadata for a ConversationModels.DeleteConversationModel operation. */
	export interface GoogleCloudDialogflowV2DeleteConversationModelOperationMetadata {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel?: string | null;

		/** Timestamp when delete conversation model request was created. The time is measured on server side. */
		createTime?: string | null;
	}

	/** Metadata for a ConversationModels.DeleteConversationModel operation. */
	export interface GoogleCloudDialogflowV2DeleteConversationModelOperationMetadataFormProperties {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel: FormControl<string | null | undefined>,

		/** Timestamp when delete conversation model request was created. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DeleteConversationModelOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DeleteConversationModelOperationMetadataFormProperties>({
			conversationModel: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a ConversationModels.DeployConversationModel operation. */
	export interface GoogleCloudDialogflowV2DeployConversationModelOperationMetadata {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel?: string | null;

		/** Timestamp when request to deploy conversation model was submitted. The time is measured on server side. */
		createTime?: string | null;
	}

	/** Metadata for a ConversationModels.DeployConversationModel operation. */
	export interface GoogleCloudDialogflowV2DeployConversationModelOperationMetadataFormProperties {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel: FormControl<string | null | undefined>,

		/** Timestamp when request to deploy conversation model was submitted. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DeployConversationModelOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DeployConversationModelOperationMetadataFormProperties>({
			conversationModel: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for ConversationModels.DeployConversationModel */
	export interface GoogleCloudDialogflowV2DeployConversationModelRequest {
	}

	/** The request message for ConversationModels.DeployConversationModel */
	export interface GoogleCloudDialogflowV2DeployConversationModelRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2DeployConversationModelRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DeployConversationModelRequestFormProperties>({
		});

	}


	/** The request to detect user's intent. */
	export interface GoogleCloudDialogflowV2DetectIntentRequest {

		/** The natural language speech audio to be processed. This field should be populated iff `query_input` is set to an input audio config. A single request can contain up to 1 minute of speech audio data. */
		inputAudio?: string | null;

		/** Instructs the speech synthesizer on how to generate the output audio content. If this audio config is supplied in a request, it overrides all existing text-to-speech settings applied to the agent. */
		outputAudioConfig?: GoogleCloudDialogflowV2OutputAudioConfig;

		/** Mask for output_audio_config indicating which settings in this request-level config should override speech synthesizer settings defined at agent-level. If unspecified or empty, output_audio_config replaces the agent-level config in its entirety. */
		outputAudioConfigMask?: string | null;

		/** Represents the query input. It can contain either: 1. An audio config which instructs the speech recognizer how to process the speech audio. 2. A conversational query in the form of text. 3. An event that specifies which intent to trigger. */
		queryInput?: GoogleCloudDialogflowV2QueryInput;

		/** Represents the parameters of the conversational query. */
		queryParams?: GoogleCloudDialogflowV2QueryParameters;
	}

	/** The request to detect user's intent. */
	export interface GoogleCloudDialogflowV2DetectIntentRequestFormProperties {

		/** The natural language speech audio to be processed. This field should be populated iff `query_input` is set to an input audio config. A single request can contain up to 1 minute of speech audio data. */
		inputAudio: FormControl<string | null | undefined>,

		/** Mask for output_audio_config indicating which settings in this request-level config should override speech synthesizer settings defined at agent-level. If unspecified or empty, output_audio_config replaces the agent-level config in its entirety. */
		outputAudioConfigMask: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DetectIntentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DetectIntentRequestFormProperties>({
			inputAudio: new FormControl<string | null | undefined>(undefined),
			outputAudioConfigMask: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the query input. It can contain either: 1. An audio config which instructs the speech recognizer how to process the speech audio. 2. A conversational query in the form of text. 3. An event that specifies which intent to trigger. */
	export interface GoogleCloudDialogflowV2QueryInput {

		/** Instructs the speech recognizer how to process the audio content. */
		audioConfig?: GoogleCloudDialogflowV2InputAudioConfig;

		/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
		event?: GoogleCloudDialogflowV2EventInput;

		/** Auxiliary proto messages. Represents the natural language text to be processed. */
		text?: GoogleCloudDialogflowV2TextInput;
	}

	/** Represents the query input. It can contain either: 1. An audio config which instructs the speech recognizer how to process the speech audio. 2. A conversational query in the form of text. 3. An event that specifies which intent to trigger. */
	export interface GoogleCloudDialogflowV2QueryInputFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2QueryInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2QueryInputFormProperties>({
		});

	}


	/** Instructs the speech recognizer how to process the audio content. */
	export interface GoogleCloudDialogflowV2InputAudioConfig {

		/** Required. Audio encoding of the audio content to process. */
		audioEncoding?: GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null;

		/** Only used in Participants.AnalyzeContent and Participants.StreamingAnalyzeContent. If `false` and recognition doesn't return any result, trigger `NO_SPEECH_RECOGNIZED` event to Dialogflow agent. */
		disableNoSpeechRecognizedEvent?: boolean | null;

		/** Enable automatic punctuation option at the speech backend. */
		enableAutomaticPunctuation?: boolean | null;

		/** If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information. */
		enableWordInfo?: boolean | null;

		/** Required. The language of the supplied audio. Dialogflow does not do translations. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode?: string | null;

		/** Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/es/docs/speech-models). */
		model?: string | null;

		/** Which variant of the Speech model to use. */
		modelVariant?: GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null;

		/** A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details. This field is deprecated. Please use [`speech_contexts`]() instead. If you specify both [`phrase_hints`]() and [`speech_contexts`](), Dialogflow will treat the [`phrase_hints`]() as a single additional [`SpeechContext`](). */
		phraseHints?: Array<string>;

		/** Required. Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details. */
		sampleRateHertz?: number | null;

		/** If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods. Note: When specified, InputAudioConfig.single_utterance takes precedence over StreamingDetectIntentRequest.single_utterance. */
		singleUtterance?: boolean | null;

		/** Context information to assist speech recognition. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details. */
		speechContexts?: Array<GoogleCloudDialogflowV2SpeechContext>;
	}

	/** Instructs the speech recognizer how to process the audio content. */
	export interface GoogleCloudDialogflowV2InputAudioConfigFormProperties {

		/** Required. Audio encoding of the audio content to process. */
		audioEncoding: FormControl<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null | undefined>,

		/** Only used in Participants.AnalyzeContent and Participants.StreamingAnalyzeContent. If `false` and recognition doesn't return any result, trigger `NO_SPEECH_RECOGNIZED` event to Dialogflow agent. */
		disableNoSpeechRecognizedEvent: FormControl<boolean | null | undefined>,

		/** Enable automatic punctuation option at the speech backend. */
		enableAutomaticPunctuation: FormControl<boolean | null | undefined>,

		/** If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information. */
		enableWordInfo: FormControl<boolean | null | undefined>,

		/** Required. The language of the supplied audio. Dialogflow does not do translations. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. */
		languageCode: FormControl<string | null | undefined>,

		/** Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/es/docs/speech-models). */
		model: FormControl<string | null | undefined>,

		/** Which variant of the Speech model to use. */
		modelVariant: FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>,

		/** Required. Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details. */
		sampleRateHertz: FormControl<number | null | undefined>,

		/** If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods. Note: When specified, InputAudioConfig.single_utterance takes precedence over StreamingDetectIntentRequest.single_utterance. */
		singleUtterance: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2InputAudioConfigFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2InputAudioConfigFormProperties>({
			audioEncoding: new FormControl<GoogleCloudDialogflowCxV3InputAudioConfigAudioEncoding | null | undefined>(undefined),
			disableNoSpeechRecognizedEvent: new FormControl<boolean | null | undefined>(undefined),
			enableAutomaticPunctuation: new FormControl<boolean | null | undefined>(undefined),
			enableWordInfo: new FormControl<boolean | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			model: new FormControl<string | null | undefined>(undefined),
			modelVariant: new FormControl<GoogleCloudDialogflowCxV3InputAudioConfigModelVariant | null | undefined>(undefined),
			sampleRateHertz: new FormControl<number | null | undefined>(undefined),
			singleUtterance: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Hints for the speech recognizer to help with recognition in a specific conversation state. */
	export interface GoogleCloudDialogflowV2SpeechContext {

		/** Optional. Boost for this context compared to other contexts: * If the boost is positive, Dialogflow will increase the probability that the phrases in this context are recognized over similar sounding phrases. * If the boost is unspecified or non-positive, Dialogflow will not apply any boost. Dialogflow recommends that you use boosts in the range (0, 20] and that you find a value that fits your use case with binary search. */
		boost?: number | null;

		/** Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. This list can be used to: * improve accuracy for words and phrases you expect the user to say, e.g. typical commands for your Dialogflow agent * add additional words to the speech recognizer vocabulary * ... See the [Cloud Speech documentation](https://cloud.google.com/speech-to-text/quotas) for usage limits. */
		phrases?: Array<string>;
	}

	/** Hints for the speech recognizer to help with recognition in a specific conversation state. */
	export interface GoogleCloudDialogflowV2SpeechContextFormProperties {

		/** Optional. Boost for this context compared to other contexts: * If the boost is positive, Dialogflow will increase the probability that the phrases in this context are recognized over similar sounding phrases. * If the boost is unspecified or non-positive, Dialogflow will not apply any boost. Dialogflow recommends that you use boosts in the range (0, 20] and that you find a value that fits your use case with binary search. */
		boost: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SpeechContextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SpeechContextFormProperties>({
			boost: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A knowledge document to be used by a KnowledgeBase. For more information, see the [knowledge base guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases). Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`. */
	export interface GoogleCloudDialogflowV2Document {

		/** The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above. */
		contentUri?: string | null;

		/** Required. The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails. */
		displayName?: string | null;

		/** Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors. */
		enableAutoReload?: boolean | null;

		/** Required. The knowledge type of document content. */
		knowledgeTypes?: Array<string>;

		/** The status of a reload attempt. */
		latestReloadStatus?: GoogleCloudDialogflowV2DocumentReloadStatus;

		/** Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes. */
		metadata?: {[id: string]: string };

		/** Required. The MIME type of this document. */
		mimeType?: string | null;

		/** Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`. */
		name?: string | null;

		/** The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types. */
		rawContent?: string | null;

		/** Output only. The current state of the document. */
		state?: GoogleCloudDialogflowV2DocumentState | null;
	}

	/** A knowledge document to be used by a KnowledgeBase. For more information, see the [knowledge base guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases). Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`. */
	export interface GoogleCloudDialogflowV2DocumentFormProperties {

		/** The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above. */
		contentUri: FormControl<string | null | undefined>,

		/** Required. The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors. */
		enableAutoReload: FormControl<boolean | null | undefined>,

		/** Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes. */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. The MIME type of this document. */
		mimeType: FormControl<string | null | undefined>,

		/** Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`. */
		name: FormControl<string | null | undefined>,

		/** The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types. */
		rawContent: FormControl<string | null | undefined>,

		/** Output only. The current state of the document. */
		state: FormControl<GoogleCloudDialogflowV2DocumentState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DocumentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DocumentFormProperties>({
			contentUri: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			enableAutoReload: new FormControl<boolean | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			mimeType: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			rawContent: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowV2DocumentState | null | undefined>(undefined),
		});

	}


	/** The status of a reload attempt. */
	export interface GoogleCloudDialogflowV2DocumentReloadStatus {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		status?: GoogleRpcStatus;

		/** The time of a reload attempt. This reload may have been triggered automatically or manually and may not have succeeded. */
		time?: string | null;
	}

	/** The status of a reload attempt. */
	export interface GoogleCloudDialogflowV2DocumentReloadStatusFormProperties {

		/** The time of a reload attempt. This reload may have been triggered automatically or manually and may not have succeeded. */
		time: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2DocumentReloadStatusFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2DocumentReloadStatusFormProperties>({
			time: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2DocumentState { STATE_UNSPECIFIED = 0, CREATING = 1, ACTIVE = 2, UPDATING = 3, RELOADING = 4, DELETING = 5 }


	/** You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for: - testing - development - production - etc. For more information, see the [versions and environments guide](https://cloud.google.com/dialogflow/docs/agents-versions). */
	export interface GoogleCloudDialogflowV2Environment {

		/** Optional. The agent version loaded into this environment. Supported formats: - `projects//agent/versions/` - `projects//locations//agent/versions/` */
		agentVersion?: string | null;

		/** Optional. The developer-provided description for this environment. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description?: string | null;

		/** By default, your agent responds to a matched intent with a static response. As an alternative, you can provide a more dynamic response by using fulfillment. When you enable fulfillment for an intent, Dialogflow responds to that intent by calling a service that you define. For example, if an end-user wants to schedule a haircut on Friday, your service can check your database and respond to the end-user with availability information for Friday. For more information, see the [fulfillment guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview). */
		fulfillment?: GoogleCloudDialogflowV2Fulfillment;

		/** Output only. The unique identifier of this agent environment. Supported formats: - `projects//agent/environments/` - `projects//locations//agent/environments/` The environment ID for the default environment is `-`. */
		name?: string | null;

		/** Output only. The state of this environment. This field is read-only, i.e., it cannot be set by create and update methods. */
		state?: GoogleCloudDialogflowV2EnvironmentState | null;

		/** Instructs the speech synthesizer on how to generate the output audio content. */
		textToSpeechSettings?: GoogleCloudDialogflowV2TextToSpeechSettings;

		/** Output only. The last update time of this environment. This field is read-only, i.e., it cannot be set by create and update methods. */
		updateTime?: string | null;
	}

	/** You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for: - testing - development - production - etc. For more information, see the [versions and environments guide](https://cloud.google.com/dialogflow/docs/agents-versions). */
	export interface GoogleCloudDialogflowV2EnvironmentFormProperties {

		/** Optional. The agent version loaded into this environment. Supported formats: - `projects//agent/versions/` - `projects//locations//agent/versions/` */
		agentVersion: FormControl<string | null | undefined>,

		/** Optional. The developer-provided description for this environment. The maximum length is 500 characters. If exceeded, the request is rejected. */
		description: FormControl<string | null | undefined>,

		/** Output only. The unique identifier of this agent environment. Supported formats: - `projects//agent/environments/` - `projects//locations//agent/environments/` The environment ID for the default environment is `-`. */
		name: FormControl<string | null | undefined>,

		/** Output only. The state of this environment. This field is read-only, i.e., it cannot be set by create and update methods. */
		state: FormControl<GoogleCloudDialogflowV2EnvironmentState | null | undefined>,

		/** Output only. The last update time of this environment. This field is read-only, i.e., it cannot be set by create and update methods. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EnvironmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EnvironmentFormProperties>({
			agentVersion: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowV2EnvironmentState | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** By default, your agent responds to a matched intent with a static response. As an alternative, you can provide a more dynamic response by using fulfillment. When you enable fulfillment for an intent, Dialogflow responds to that intent by calling a service that you define. For example, if an end-user wants to schedule a haircut on Friday, your service can check your database and respond to the end-user with availability information for Friday. For more information, see the [fulfillment guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview). */
	export interface GoogleCloudDialogflowV2Fulfillment {

		/** Optional. The human-readable name of the fulfillment, unique within the agent. This field is not used for Fulfillment in an Environment. */
		displayName?: string | null;

		/** Optional. Whether fulfillment is enabled. */
		enabled?: boolean | null;

		/** Optional. The field defines whether the fulfillment is enabled for certain features. */
		features?: Array<GoogleCloudDialogflowV2FulfillmentFeature>;

		/** Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers. More information could be found at: https://cloud.google.com/dialogflow/docs/fulfillment-configure. */
		genericWebService?: GoogleCloudDialogflowV2FulfillmentGenericWebService;

		/** Required. The unique identifier of the fulfillment. Supported formats: - `projects//agent/fulfillment` - `projects//locations//agent/fulfillment` This field is not used for Fulfillment in an Environment. */
		name?: string | null;
	}

	/** By default, your agent responds to a matched intent with a static response. As an alternative, you can provide a more dynamic response by using fulfillment. When you enable fulfillment for an intent, Dialogflow responds to that intent by calling a service that you define. For example, if an end-user wants to schedule a haircut on Friday, your service can check your database and respond to the end-user with availability information for Friday. For more information, see the [fulfillment guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview). */
	export interface GoogleCloudDialogflowV2FulfillmentFormProperties {

		/** Optional. The human-readable name of the fulfillment, unique within the agent. This field is not used for Fulfillment in an Environment. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Whether fulfillment is enabled. */
		enabled: FormControl<boolean | null | undefined>,

		/** Required. The unique identifier of the fulfillment. Supported formats: - `projects//agent/fulfillment` - `projects//locations//agent/fulfillment` This field is not used for Fulfillment in an Environment. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2FulfillmentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2FulfillmentFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Whether fulfillment is enabled for the specific feature. */
	export interface GoogleCloudDialogflowV2FulfillmentFeature {

		/** The type of the feature that enabled for fulfillment. */
		type?: GoogleCloudDialogflowV2FulfillmentFeatureType | null;
	}

	/** Whether fulfillment is enabled for the specific feature. */
	export interface GoogleCloudDialogflowV2FulfillmentFeatureFormProperties {

		/** The type of the feature that enabled for fulfillment. */
		type: FormControl<GoogleCloudDialogflowV2FulfillmentFeatureType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2FulfillmentFeatureFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2FulfillmentFeatureFormProperties>({
			type: new FormControl<GoogleCloudDialogflowV2FulfillmentFeatureType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2FulfillmentFeatureType { TYPE_UNSPECIFIED = 0, SMALLTALK = 1 }


	/** Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers. More information could be found at: https://cloud.google.com/dialogflow/docs/fulfillment-configure. */
	export interface GoogleCloudDialogflowV2FulfillmentGenericWebService {

		/** Optional. Indicates if generic web service is created through Cloud Functions integration. Defaults to false. is_cloud_function is deprecated. Cloud functions can be configured by its uri as a regular web service now. */
		isCloudFunction?: boolean | null;

		/** Optional. The password for HTTP Basic authentication. */
		password?: string | null;

		/** Optional. The HTTP request headers to send together with fulfillment requests. */
		requestHeaders?: {[id: string]: string };

		/** Required. The fulfillment URI for receiving POST requests. It must use https protocol. */
		uri?: string | null;

		/** Optional. The user name for HTTP Basic authentication. */
		username?: string | null;
	}

	/** Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers. More information could be found at: https://cloud.google.com/dialogflow/docs/fulfillment-configure. */
	export interface GoogleCloudDialogflowV2FulfillmentGenericWebServiceFormProperties {

		/** Optional. Indicates if generic web service is created through Cloud Functions integration. Defaults to false. is_cloud_function is deprecated. Cloud functions can be configured by its uri as a regular web service now. */
		isCloudFunction: FormControl<boolean | null | undefined>,

		/** Optional. The password for HTTP Basic authentication. */
		password: FormControl<string | null | undefined>,

		/** Optional. The HTTP request headers to send together with fulfillment requests. */
		requestHeaders: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. The fulfillment URI for receiving POST requests. It must use https protocol. */
		uri: FormControl<string | null | undefined>,

		/** Optional. The user name for HTTP Basic authentication. */
		username: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2FulfillmentGenericWebServiceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2FulfillmentGenericWebServiceFormProperties>({
			isCloudFunction: new FormControl<boolean | null | undefined>(undefined),
			password: new FormControl<string | null | undefined>(undefined),
			requestHeaders: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
			username: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2EnvironmentState { STATE_UNSPECIFIED = 0, STOPPED = 1, LOADING = 2, RUNNING = 3 }


	/** Instructs the speech synthesizer on how to generate the output audio content. */
	export interface GoogleCloudDialogflowV2TextToSpeechSettings {

		/** Optional. Indicates whether text to speech is enabled. Even when this field is false, other settings in this proto are still retained. */
		enableTextToSpeech?: boolean | null;

		/** Required. Audio encoding of the synthesized audio content. */
		outputAudioEncoding?: GoogleCloudDialogflowV2OutputAudioConfigAudioEncoding | null;

		/** Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality). */
		sampleRateHertz?: number | null;

		/** Optional. Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/docs/reference/language) to SynthesizeSpeechConfig. */
		synthesizeSpeechConfigs?: {[id: string]: GoogleCloudDialogflowV2SynthesizeSpeechConfig };
	}

	/** Instructs the speech synthesizer on how to generate the output audio content. */
	export interface GoogleCloudDialogflowV2TextToSpeechSettingsFormProperties {

		/** Optional. Indicates whether text to speech is enabled. Even when this field is false, other settings in this proto are still retained. */
		enableTextToSpeech: FormControl<boolean | null | undefined>,

		/** Required. Audio encoding of the synthesized audio content. */
		outputAudioEncoding: FormControl<GoogleCloudDialogflowV2OutputAudioConfigAudioEncoding | null | undefined>,

		/** Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality). */
		sampleRateHertz: FormControl<number | null | undefined>,

		/** Optional. Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/docs/reference/language) to SynthesizeSpeechConfig. */
		synthesizeSpeechConfigs: FormControl<{[id: string]: GoogleCloudDialogflowV2SynthesizeSpeechConfig } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2TextToSpeechSettingsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2TextToSpeechSettingsFormProperties>({
			enableTextToSpeech: new FormControl<boolean | null | undefined>(undefined),
			outputAudioEncoding: new FormControl<GoogleCloudDialogflowV2OutputAudioConfigAudioEncoding | null | undefined>(undefined),
			sampleRateHertz: new FormControl<number | null | undefined>(undefined),
			synthesizeSpeechConfigs: new FormControl<{[id: string]: GoogleCloudDialogflowV2SynthesizeSpeechConfig } | null | undefined>(undefined),
		});

	}


	/** The response message for Environments.GetEnvironmentHistory. */
	export interface GoogleCloudDialogflowV2EnvironmentHistory {

		/** Output only. The list of agent environments. There will be a maximum number of items returned based on the page_size field in the request. */
		entries?: Array<GoogleCloudDialogflowV2EnvironmentHistoryEntry>;

		/** Output only. Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** Output only. The name of the environment this history is for. Supported formats: - `projects//agent/environments/` - `projects//locations//agent/environments/` The environment ID for the default environment is `-`. */
		parent?: string | null;
	}

	/** The response message for Environments.GetEnvironmentHistory. */
	export interface GoogleCloudDialogflowV2EnvironmentHistoryFormProperties {

		/** Output only. Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,

		/** Output only. The name of the environment this history is for. Supported formats: - `projects//agent/environments/` - `projects//locations//agent/environments/` The environment ID for the default environment is `-`. */
		parent: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EnvironmentHistoryFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EnvironmentHistoryFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
			parent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an environment history entry. */
	export interface GoogleCloudDialogflowV2EnvironmentHistoryEntry {

		/** The agent version loaded into this environment history entry. */
		agentVersion?: string | null;

		/** The creation time of this environment history entry. */
		createTime?: string | null;

		/** The developer-provided description for this environment history entry. */
		description?: string | null;
	}

	/** Represents an environment history entry. */
	export interface GoogleCloudDialogflowV2EnvironmentHistoryEntryFormProperties {

		/** The agent version loaded into this environment history entry. */
		agentVersion: FormControl<string | null | undefined>,

		/** The creation time of this environment history entry. */
		createTime: FormControl<string | null | undefined>,

		/** The developer-provided description for this environment history entry. */
		description: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2EnvironmentHistoryEntryFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2EnvironmentHistoryEntryFormProperties>({
			agentVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowV2ExportAgentRequest {

		/** Required. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the agent to. The format of this URI must be `gs:///`. If left unspecified, the serialized agent is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller's behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage). */
		agentUri?: string | null;
	}

	/** The request message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowV2ExportAgentRequestFormProperties {

		/** Required. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the agent to. The format of this URI must be `gs:///`. If left unspecified, the serialized agent is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller's behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage). */
		agentUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ExportAgentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ExportAgentRequestFormProperties>({
			agentUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowV2ExportAgentResponse {

		/** Zip compressed raw byte content for agent. */
		agentContent?: string | null;

		/** The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in `ExportAgentRequest`. */
		agentUri?: string | null;
	}

	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowV2ExportAgentResponseFormProperties {

		/** Zip compressed raw byte content for agent. */
		agentContent: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in `ExportAgentRequest`. */
		agentUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ExportAgentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ExportAgentResponseFormProperties>({
			agentContent: new FormControl<string | null | undefined>(undefined),
			agentUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Request message for Documents.ExportDocument. */
	export interface GoogleCloudDialogflowV2ExportDocumentRequest {

		/** When enabled, export the full content of the document including empirical probability. */
		exportFullContent?: boolean | null;

		/** Google Cloud Storage location for the output. */
		gcsDestination?: GoogleCloudDialogflowV2GcsDestination;

		/** When enabled, export the smart messaging allowlist document for partial update. */
		smartMessagingPartialUpdate?: boolean | null;
	}

	/** Request message for Documents.ExportDocument. */
	export interface GoogleCloudDialogflowV2ExportDocumentRequestFormProperties {

		/** When enabled, export the full content of the document including empirical probability. */
		exportFullContent: FormControl<boolean | null | undefined>,

		/** When enabled, export the smart messaging allowlist document for partial update. */
		smartMessagingPartialUpdate: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ExportDocumentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ExportDocumentRequestFormProperties>({
			exportFullContent: new FormControl<boolean | null | undefined>(undefined),
			smartMessagingPartialUpdate: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Google Cloud Storage location for the output. */
	export interface GoogleCloudDialogflowV2GcsDestination {

		/** The Google Cloud Storage URIs for the output. A URI is of the form: `gs://bucket/object-prefix-or-name` Whether a prefix or name is used depends on the use case. The requesting user must have "write-permission" to the bucket. */
		uri?: string | null;
	}

	/** Google Cloud Storage location for the output. */
	export interface GoogleCloudDialogflowV2GcsDestinationFormProperties {

		/** The Google Cloud Storage URIs for the output. A URI is of the form: `gs://bucket/object-prefix-or-name` Whether a prefix or name is used depends on the use case. The requesting user must have "write-permission" to the bucket. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2GcsDestinationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2GcsDestinationFormProperties>({
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata related to the Export Data Operations (e.g. ExportDocument). */
	export interface GoogleCloudDialogflowV2ExportOperationMetadata {

		/** Google Cloud Storage location for the output. */
		exportedGcsDestination?: GoogleCloudDialogflowV2GcsDestination;
	}

	/** Metadata related to the Export Data Operations (e.g. ExportDocument). */
	export interface GoogleCloudDialogflowV2ExportOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2ExportOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ExportOperationMetadataFormProperties>({
		});

	}


	/** The request message for Conversations.GenerateStatelessSummary. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryRequest {

		/** Defines the services to connect to incoming Dialogflow conversations. */
		conversationProfile?: GoogleCloudDialogflowV2ConversationProfile;

		/** The name of the latest conversation message used as context for generating a Summary. If empty, the latest message of the conversation will be used. The format is specific to the user and the names of the messages provided. */
		latestMessage?: string | null;

		/** Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 500 and at most 1000. */
		maxContextSize?: number | null;

		/** The minimum amount of information required to generate a Summary without having a Conversation resource created. */
		statelessConversation?: GoogleCloudDialogflowV2GenerateStatelessSummaryRequestMinimalConversation;
	}

	/** The request message for Conversations.GenerateStatelessSummary. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryRequestFormProperties {

		/** The name of the latest conversation message used as context for generating a Summary. If empty, the latest message of the conversation will be used. The format is specific to the user and the names of the messages provided. */
		latestMessage: FormControl<string | null | undefined>,

		/** Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 500 and at most 1000. */
		maxContextSize: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2GenerateStatelessSummaryRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2GenerateStatelessSummaryRequestFormProperties>({
			latestMessage: new FormControl<string | null | undefined>(undefined),
			maxContextSize: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The minimum amount of information required to generate a Summary without having a Conversation resource created. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryRequestMinimalConversation {

		/** Required. The messages that the Summary will be generated from. It is expected that this message content is already redacted and does not contain any PII. Required fields: {content, language_code, participant, participant_role} Optional fields: {send_time} If send_time is not provided, then the messages must be provided in chronological order. */
		messages?: Array<GoogleCloudDialogflowV2Message>;
	}

	/** The minimum amount of information required to generate a Summary without having a Conversation resource created. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryRequestMinimalConversationFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2GenerateStatelessSummaryRequestMinimalConversationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2GenerateStatelessSummaryRequestMinimalConversationFormProperties>({
		});

	}


	/** The response message for Conversations.GenerateStatelessSummary. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryResponse {

		/** Number of messages prior to and including last_conversation_message used to compile the suggestion. It may be smaller than the GenerateStatelessSummaryRequest.context_size field in the request if there weren't that many messages in the conversation. */
		contextSize?: number | null;

		/** The name of the latest conversation message used as context for compiling suggestion. The format is specific to the user and the names of the messages provided. */
		latestMessage?: string | null;

		/** Generated summary for a conversation. */
		summary?: GoogleCloudDialogflowV2GenerateStatelessSummaryResponseSummary;
	}

	/** The response message for Conversations.GenerateStatelessSummary. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryResponseFormProperties {

		/** Number of messages prior to and including last_conversation_message used to compile the suggestion. It may be smaller than the GenerateStatelessSummaryRequest.context_size field in the request if there weren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used as context for compiling suggestion. The format is specific to the user and the names of the messages provided. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2GenerateStatelessSummaryResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2GenerateStatelessSummaryResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Generated summary for a conversation. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryResponseSummary {

		/** The baseline model version used to generate this summary. It is empty if a baseline model was not used to generate this summary. */
		baselineModelVersion?: string | null;

		/** The summary content that is concatenated into one string. */
		text?: string | null;

		/** The summary content that is divided into sections. The key is the section's name and the value is the section's content. There is no specific format for the key or value. */
		textSections?: {[id: string]: string };
	}

	/** Generated summary for a conversation. */
	export interface GoogleCloudDialogflowV2GenerateStatelessSummaryResponseSummaryFormProperties {

		/** The baseline model version used to generate this summary. It is empty if a baseline model was not used to generate this summary. */
		baselineModelVersion: FormControl<string | null | undefined>,

		/** The summary content that is concatenated into one string. */
		text: FormControl<string | null | undefined>,

		/** The summary content that is divided into sections. The key is the section's name and the value is the section's content. There is no specific format for the key or value. */
		textSections: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2GenerateStatelessSummaryResponseSummaryFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2GenerateStatelessSummaryResponseSummaryFormProperties>({
			baselineModelVersion: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
			textSections: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** Represents a notification sent to Cloud Pub/Sub subscribers for human agent assistant events in a specific conversation. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantEvent {

		/** The conversation this notification refers to. Format: `projects//conversations/`. */
		conversation?: string | null;

		/** The participant that the suggestion is compiled for. Format: `projects//conversations//participants/`. It will not be set in legacy workflow. */
		participant?: string | null;

		/** The suggestion results payload that this notification refers to. */
		suggestionResults?: Array<GoogleCloudDialogflowV2SuggestionResult>;
	}

	/** Represents a notification sent to Cloud Pub/Sub subscribers for human agent assistant events in a specific conversation. */
	export interface GoogleCloudDialogflowV2HumanAgentAssistantEventFormProperties {

		/** The conversation this notification refers to. Format: `projects//conversations/`. */
		conversation: FormControl<string | null | undefined>,

		/** The participant that the suggestion is compiled for. Format: `projects//conversations//participants/`. It will not be set in legacy workflow. */
		participant: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2HumanAgentAssistantEventFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2HumanAgentAssistantEventFormProperties>({
			conversation: new FormControl<string | null | undefined>(undefined),
			participant: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Agents.ImportAgent. */
	export interface GoogleCloudDialogflowV2ImportAgentRequest {

		/** Zip compressed raw byte content for agent. */
		agentContent?: string | null;

		/** The URI to a Google Cloud Storage file containing the agent to import. Note: The URI must start with "gs://". Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage). */
		agentUri?: string | null;
	}

	/** The request message for Agents.ImportAgent. */
	export interface GoogleCloudDialogflowV2ImportAgentRequestFormProperties {

		/** Zip compressed raw byte content for agent. */
		agentContent: FormControl<string | null | undefined>,

		/** The URI to a Google Cloud Storage file containing the agent to import. Note: The URI must start with "gs://". Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage). */
		agentUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ImportAgentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ImportAgentRequestFormProperties>({
			agentContent: new FormControl<string | null | undefined>(undefined),
			agentUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a ConversationDatasets.ImportConversationData operation. */
	export interface GoogleCloudDialogflowV2ImportConversationDataOperationMetadata {

		/** The resource name of the imported conversation dataset. Format: `projects//locations//conversationDatasets/` */
		conversationDataset?: string | null;

		/** Timestamp when import conversation data request was created. The time is measured on server side. */
		createTime?: string | null;

		/** Partial failures are failures that don't fail the whole long running operation, e.g. single files that couldn't be read. */
		partialFailures?: Array<GoogleRpcStatus>;
	}

	/** Metadata for a ConversationDatasets.ImportConversationData operation. */
	export interface GoogleCloudDialogflowV2ImportConversationDataOperationMetadataFormProperties {

		/** The resource name of the imported conversation dataset. Format: `projects//locations//conversationDatasets/` */
		conversationDataset: FormControl<string | null | undefined>,

		/** Timestamp when import conversation data request was created. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ImportConversationDataOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ImportConversationDataOperationMetadataFormProperties>({
			conversationDataset: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response used for ConversationDatasets.ImportConversationData long running operation. */
	export interface GoogleCloudDialogflowV2ImportConversationDataOperationResponse {

		/** The resource name of the imported conversation dataset. Format: `projects//locations//conversationDatasets/` */
		conversationDataset?: string | null;

		/** Number of conversations imported successfully. */
		importCount?: number | null;
	}

	/** Response used for ConversationDatasets.ImportConversationData long running operation. */
	export interface GoogleCloudDialogflowV2ImportConversationDataOperationResponseFormProperties {

		/** The resource name of the imported conversation dataset. Format: `projects//locations//conversationDatasets/` */
		conversationDataset: FormControl<string | null | undefined>,

		/** Number of conversations imported successfully. */
		importCount: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ImportConversationDataOperationResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ImportConversationDataOperationResponseFormProperties>({
			conversationDataset: new FormControl<string | null | undefined>(undefined),
			importCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The request message for ConversationDatasets.ImportConversationData. */
	export interface GoogleCloudDialogflowV2ImportConversationDataRequest {

		/** Represents the configuration of importing a set of conversation files in Google Cloud Storage. */
		inputConfig?: GoogleCloudDialogflowV2InputConfig;
	}

	/** The request message for ConversationDatasets.ImportConversationData. */
	export interface GoogleCloudDialogflowV2ImportConversationDataRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2ImportConversationDataRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ImportConversationDataRequestFormProperties>({
		});

	}


	/** The template used for importing documents. */
	export interface GoogleCloudDialogflowV2ImportDocumentTemplate {

		/** Required. The knowledge type of document content. */
		knowledgeTypes?: Array<string>;

		/** Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes. */
		metadata?: {[id: string]: string };

		/** Required. The MIME type of the document. */
		mimeType?: string | null;
	}

	/** The template used for importing documents. */
	export interface GoogleCloudDialogflowV2ImportDocumentTemplateFormProperties {

		/** Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes. */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. The MIME type of the document. */
		mimeType: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ImportDocumentTemplateFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ImportDocumentTemplateFormProperties>({
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			mimeType: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Request message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV2ImportDocumentsRequest {

		/** The template used for importing documents. */
		documentTemplate?: GoogleCloudDialogflowV2ImportDocumentTemplate;

		/** Google Cloud Storage location for the inputs. */
		gcsSource?: GoogleCloudDialogflowV2GcsSources;

		/** Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI. */
		importGcsCustomMetadata?: boolean | null;
	}

	/** Request message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV2ImportDocumentsRequestFormProperties {

		/** Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI. */
		importGcsCustomMetadata: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ImportDocumentsRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ImportDocumentsRequestFormProperties>({
			importGcsCustomMetadata: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV2ImportDocumentsResponse {

		/** Includes details about skipped documents or any other warnings. */
		warnings?: Array<GoogleRpcStatus>;
	}

	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV2ImportDocumentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2ImportDocumentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ImportDocumentsResponseFormProperties>({
		});

	}


	/** A knowledge base represents a collection of knowledge documents that you provide to Dialogflow. Your knowledge documents contain information that may be useful during conversations with end-users. Some Dialogflow features use knowledge bases when looking for a response to an end-user input. For more information, see the [knowledge base guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases). Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`. */
	export interface GoogleCloudDialogflowV2KnowledgeBase {

		/** Required. The display name of the knowledge base. The name must be 1024 bytes or less; otherwise, the creation request fails. */
		displayName?: string | null;

		/** Language which represents the KnowledgeBase. When the KnowledgeBase is created/updated, expect this to be present for non en-us languages. When unspecified, the default language code en-us applies. */
		languageCode?: string | null;

		/** The knowledge base resource name. The name must be empty when creating a knowledge base. Format: `projects//locations//knowledgeBases/`. */
		name?: string | null;
	}

	/** A knowledge base represents a collection of knowledge documents that you provide to Dialogflow. Your knowledge documents contain information that may be useful during conversations with end-users. Some Dialogflow features use knowledge bases when looking for a response to an end-user input. For more information, see the [knowledge base guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases). Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`. */
	export interface GoogleCloudDialogflowV2KnowledgeBaseFormProperties {

		/** Required. The display name of the knowledge base. The name must be 1024 bytes or less; otherwise, the creation request fails. */
		displayName: FormControl<string | null | undefined>,

		/** Language which represents the KnowledgeBase. When the KnowledgeBase is created/updated, expect this to be present for non en-us languages. When unspecified, the default language code en-us applies. */
		languageCode: FormControl<string | null | undefined>,

		/** The knowledge base resource name. The name must be empty when creating a knowledge base. Format: `projects//locations//knowledgeBases/`. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2KnowledgeBaseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2KnowledgeBaseFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowV2KnowledgeOperationMetadata {

		/** Metadata related to the Export Data Operations (e.g. ExportDocument). */
		exportOperationMetadata?: GoogleCloudDialogflowV2ExportOperationMetadata;

		/** The name of the knowledge base interacted with during the operation. */
		knowledgeBase?: string | null;

		/** Output only. The current state of this operation. */
		state?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null;
	}

	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowV2KnowledgeOperationMetadataFormProperties {

		/** The name of the knowledge base interacted with during the operation. */
		knowledgeBase: FormControl<string | null | undefined>,

		/** Output only. The current state of this operation. */
		state: FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2KnowledgeOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2KnowledgeOperationMetadataFormProperties>({
			knowledgeBase: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>(undefined),
		});

	}


	/** Response message for AnswerRecords.ListAnswerRecords. */
	export interface GoogleCloudDialogflowV2ListAnswerRecordsResponse {

		/** The list of answer records. */
		answerRecords?: Array<GoogleCloudDialogflowV2AnswerRecord>;

		/** A token to retrieve next page of results. Or empty if there are no more results. Pass this value in the ListAnswerRecordsRequest.page_token field in the subsequent call to `ListAnswerRecords` method to retrieve the next page of results. */
		nextPageToken?: string | null;
	}

	/** Response message for AnswerRecords.ListAnswerRecords. */
	export interface GoogleCloudDialogflowV2ListAnswerRecordsResponseFormProperties {

		/** A token to retrieve next page of results. Or empty if there are no more results. Pass this value in the ListAnswerRecordsRequest.page_token field in the subsequent call to `ListAnswerRecords` method to retrieve the next page of results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListAnswerRecordsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListAnswerRecordsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Contexts.ListContexts. */
	export interface GoogleCloudDialogflowV2ListContextsResponse {

		/** The list of contexts. There will be a maximum number of items returned based on the page_size field in the request. */
		contexts?: Array<GoogleCloudDialogflowV2Context>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for Contexts.ListContexts. */
	export interface GoogleCloudDialogflowV2ListContextsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListContextsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListContextsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for ConversationDatasets.ListConversationDatasets. */
	export interface GoogleCloudDialogflowV2ListConversationDatasetsResponse {

		/** The list of datasets to return. */
		conversationDatasets?: Array<GoogleCloudDialogflowV2ConversationDataset>;

		/** The token to use to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for ConversationDatasets.ListConversationDatasets. */
	export interface GoogleCloudDialogflowV2ListConversationDatasetsResponseFormProperties {

		/** The token to use to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListConversationDatasetsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListConversationDatasetsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for ConversationModels.ListConversationModelEvaluations */
	export interface GoogleCloudDialogflowV2ListConversationModelEvaluationsResponse {

		/** The list of evaluations to return. */
		conversationModelEvaluations?: Array<GoogleCloudDialogflowV2ConversationModelEvaluation>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for ConversationModels.ListConversationModelEvaluations */
	export interface GoogleCloudDialogflowV2ListConversationModelEvaluationsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListConversationModelEvaluationsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListConversationModelEvaluationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for ConversationModels.ListConversationModels */
	export interface GoogleCloudDialogflowV2ListConversationModelsResponse {

		/** The list of models to return. */
		conversationModels?: Array<GoogleCloudDialogflowV2ConversationModel>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for ConversationModels.ListConversationModels */
	export interface GoogleCloudDialogflowV2ListConversationModelsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListConversationModelsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListConversationModelsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for ConversationProfiles.ListConversationProfiles. */
	export interface GoogleCloudDialogflowV2ListConversationProfilesResponse {

		/** The list of project conversation profiles. There is a maximum number of items returned based on the page_size field in the request. */
		conversationProfiles?: Array<GoogleCloudDialogflowV2ConversationProfile>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for ConversationProfiles.ListConversationProfiles. */
	export interface GoogleCloudDialogflowV2ListConversationProfilesResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListConversationProfilesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListConversationProfilesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Conversations.ListConversations. */
	export interface GoogleCloudDialogflowV2ListConversationsResponse {

		/** The list of conversations. There will be a maximum number of items returned based on the page_size field in the request. */
		conversations?: Array<GoogleCloudDialogflowV2Conversation>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for Conversations.ListConversations. */
	export interface GoogleCloudDialogflowV2ListConversationsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListConversationsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListConversationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for Documents.ListDocuments. */
	export interface GoogleCloudDialogflowV2ListDocumentsResponse {

		/** The list of documents. */
		documents?: Array<GoogleCloudDialogflowV2Document>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** Response message for Documents.ListDocuments. */
	export interface GoogleCloudDialogflowV2ListDocumentsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListDocumentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListDocumentsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for EntityTypes.ListEntityTypes. */
	export interface GoogleCloudDialogflowV2ListEntityTypesResponse {

		/** The list of agent entity types. There will be a maximum number of items returned based on the page_size field in the request. */
		entityTypes?: Array<GoogleCloudDialogflowV2EntityType>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for EntityTypes.ListEntityTypes. */
	export interface GoogleCloudDialogflowV2ListEntityTypesResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListEntityTypesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListEntityTypesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Environments.ListEnvironments. */
	export interface GoogleCloudDialogflowV2ListEnvironmentsResponse {

		/** The list of agent environments. There will be a maximum number of items returned based on the page_size field in the request. */
		environments?: Array<GoogleCloudDialogflowV2Environment>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for Environments.ListEnvironments. */
	export interface GoogleCloudDialogflowV2ListEnvironmentsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListEnvironmentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListEnvironmentsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Intents.ListIntents. */
	export interface GoogleCloudDialogflowV2ListIntentsResponse {

		/** The list of agent intents. There will be a maximum number of items returned based on the page_size field in the request. */
		intents?: Array<GoogleCloudDialogflowV2Intent>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for Intents.ListIntents. */
	export interface GoogleCloudDialogflowV2ListIntentsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListIntentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListIntentsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for KnowledgeBases.ListKnowledgeBases. */
	export interface GoogleCloudDialogflowV2ListKnowledgeBasesResponse {

		/** The list of knowledge bases. */
		knowledgeBases?: Array<GoogleCloudDialogflowV2KnowledgeBase>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** Response message for KnowledgeBases.ListKnowledgeBases. */
	export interface GoogleCloudDialogflowV2ListKnowledgeBasesResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListKnowledgeBasesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListKnowledgeBasesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Conversations.ListMessages. */
	export interface GoogleCloudDialogflowV2ListMessagesResponse {

		/** The list of messages. There will be a maximum number of items returned based on the page_size field in the request. `messages` is sorted by `create_time` in descending order. */
		messages?: Array<GoogleCloudDialogflowV2Message>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for Conversations.ListMessages. */
	export interface GoogleCloudDialogflowV2ListMessagesResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListMessagesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListMessagesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Participants.ListParticipants. */
	export interface GoogleCloudDialogflowV2ListParticipantsResponse {

		/** Token to retrieve the next page of results or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** The list of participants. There is a maximum number of items returned based on the page_size field in the request. */
		participants?: Array<GoogleCloudDialogflowV2Participant>;
	}

	/** The response message for Participants.ListParticipants. */
	export interface GoogleCloudDialogflowV2ListParticipantsResponseFormProperties {

		/** Token to retrieve the next page of results or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListParticipantsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListParticipantsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a conversation participant (human agent, virtual agent, end-user). */
	export interface GoogleCloudDialogflowV2Participant {

		/** Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: "market" value: "US,CA" } documents_metadata_filters { key: "user" value: "agent" } ``` */
		documentsMetadataFilters?: {[id: string]: string };

		/** Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`. */
		name?: string | null;

		/** Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow returns an error if you try to add a user id for a non-END_USER participant. Dialogflow uses this user id for billing and measurement purposes. For example, Dialogflow determines whether a user in one conversation returned in a later conversation. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters. */
		obfuscatedExternalUserId?: string | null;

		/** Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable. */
		role?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Optional. Label applied to streams representing this participant in SIPREC XML metadata and SDP. This is used to assign transcriptions from that media stream to this participant. This field can be updated. */
		sipRecordingMediaLabel?: string | null;
	}

	/** Represents a conversation participant (human agent, virtual agent, end-user). */
	export interface GoogleCloudDialogflowV2ParticipantFormProperties {

		/** Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: "market" value: "US,CA" } documents_metadata_filters { key: "user" value: "agent" } ``` */
		documentsMetadataFilters: FormControl<{[id: string]: string } | null | undefined>,

		/** Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`. */
		name: FormControl<string | null | undefined>,

		/** Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow returns an error if you try to add a user id for a non-END_USER participant. Dialogflow uses this user id for billing and measurement purposes. For example, Dialogflow determines whether a user in one conversation returned in a later conversation. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters. */
		obfuscatedExternalUserId: FormControl<string | null | undefined>,

		/** Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable. */
		role: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Optional. Label applied to streams representing this participant in SIPREC XML metadata and SDP. This is used to assign transcriptions from that media stream to this participant. This field can be updated. */
		sipRecordingMediaLabel: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ParticipantFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ParticipantFormProperties>({
			documentsMetadataFilters: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			obfuscatedExternalUserId: new FormControl<string | null | undefined>(undefined),
			role: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			sipRecordingMediaLabel: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for SessionEntityTypes.ListSessionEntityTypes. */
	export interface GoogleCloudDialogflowV2ListSessionEntityTypesResponse {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** The list of session entity types. There will be a maximum number of items returned based on the page_size field in the request. */
		sessionEntityTypes?: Array<GoogleCloudDialogflowV2SessionEntityType>;
	}

	/** The response message for SessionEntityTypes.ListSessionEntityTypes. */
	export interface GoogleCloudDialogflowV2ListSessionEntityTypesResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListSessionEntityTypesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListSessionEntityTypesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Versions.ListVersions. */
	export interface GoogleCloudDialogflowV2ListVersionsResponse {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** The list of agent versions. There will be a maximum number of items returned based on the page_size field in the request. */
		versions?: Array<GoogleCloudDialogflowV2Version>;
	}

	/** The response message for Versions.ListVersions. */
	export interface GoogleCloudDialogflowV2ListVersionsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ListVersionsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ListVersionsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for: - testing - development - production - etc. For more information, see the [versions and environments guide](https://cloud.google.com/dialogflow/docs/agents-versions). */
	export interface GoogleCloudDialogflowV2Version {

		/** Output only. The creation time of this version. This field is read-only, i.e., it cannot be set by create and update methods. */
		createTime?: string | null;

		/** Optional. The developer-provided description of this version. */
		description?: string | null;

		/** Output only. The unique identifier of this agent version. Supported formats: - `projects//agent/versions/` - `projects//locations//agent/versions/` */
		name?: string | null;

		/** Output only. The status of this version. This field is read-only and cannot be set by create and update methods. */
		status?: GoogleCloudDialogflowV2VersionStatus | null;

		/** Output only. The sequential number of this version. This field is read-only which means it cannot be set by create and update methods. */
		versionNumber?: number | null;
	}

	/** You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for: - testing - development - production - etc. For more information, see the [versions and environments guide](https://cloud.google.com/dialogflow/docs/agents-versions). */
	export interface GoogleCloudDialogflowV2VersionFormProperties {

		/** Output only. The creation time of this version. This field is read-only, i.e., it cannot be set by create and update methods. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. The developer-provided description of this version. */
		description: FormControl<string | null | undefined>,

		/** Output only. The unique identifier of this agent version. Supported formats: - `projects//agent/versions/` - `projects//locations//agent/versions/` */
		name: FormControl<string | null | undefined>,

		/** Output only. The status of this version. This field is read-only and cannot be set by create and update methods. */
		status: FormControl<GoogleCloudDialogflowV2VersionStatus | null | undefined>,

		/** Output only. The sequential number of this version. This field is read-only which means it cannot be set by create and update methods. */
		versionNumber: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2VersionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2VersionFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<GoogleCloudDialogflowV2VersionStatus | null | undefined>(undefined),
			versionNumber: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2VersionStatus { VERSION_STATUS_UNSPECIFIED = 0, IN_PROGRESS = 1, READY = 2, FAILED = 3 }


	/** Represents the contents of the original request that was passed to the `[Streaming]DetectIntent` call. */
	export interface GoogleCloudDialogflowV2OriginalDetectIntentRequest {

		/** Optional. This field is set to the value of the `QueryParameters.payload` field passed in the request. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: { "telephony": { "caller_id": "+18558363987" } } Note: The caller ID field (`caller_id`) will be redacted for Trial Edition agents and populated with the caller ID in [E.164 format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents. */
		payload?: {[id: string]: any };

		/** The source of this request, e.g., `google`, `facebook`, `slack`. It is set by Dialogflow-owned servers. */
		source?: string | null;

		/** Optional. The version of the protocol used for this request. This field is AoG-specific. */
		version?: string | null;
	}

	/** Represents the contents of the original request that was passed to the `[Streaming]DetectIntent` call. */
	export interface GoogleCloudDialogflowV2OriginalDetectIntentRequestFormProperties {

		/** Optional. This field is set to the value of the `QueryParameters.payload` field passed in the request. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: { "telephony": { "caller_id": "+18558363987" } } Note: The caller ID field (`caller_id`) will be redacted for Trial Edition agents and populated with the caller ID in [E.164 format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** The source of this request, e.g., `google`, `facebook`, `slack`. It is set by Dialogflow-owned servers. */
		source: FormControl<string | null | undefined>,

		/** Optional. The version of the protocol used for this request. This field is AoG-specific. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2OriginalDetectIntentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2OriginalDetectIntentRequestFormProperties>({
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Request message for Documents.ReloadDocument. */
	export interface GoogleCloudDialogflowV2ReloadDocumentRequest {

		/** Optional. The path of gcs source file for reloading document content. For now, only gcs uri is supported. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. */
		contentUri?: string | null;

		/** Optional. Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI. */
		importGcsCustomMetadata?: boolean | null;

		/** Optional. When enabled, the reload request is to apply partial update to the smart messaging allowlist. */
		smartMessagingPartialUpdate?: boolean | null;
	}

	/** Request message for Documents.ReloadDocument. */
	export interface GoogleCloudDialogflowV2ReloadDocumentRequestFormProperties {

		/** Optional. The path of gcs source file for reloading document content. For now, only gcs uri is supported. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. */
		contentUri: FormControl<string | null | undefined>,

		/** Optional. Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI. */
		importGcsCustomMetadata: FormControl<boolean | null | undefined>,

		/** Optional. When enabled, the reload request is to apply partial update to the smart messaging allowlist. */
		smartMessagingPartialUpdate: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ReloadDocumentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ReloadDocumentRequestFormProperties>({
			contentUri: new FormControl<string | null | undefined>(undefined),
			importGcsCustomMetadata: new FormControl<boolean | null | undefined>(undefined),
			smartMessagingPartialUpdate: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The request message for Agents.RestoreAgent. */
	export interface GoogleCloudDialogflowV2RestoreAgentRequest {

		/** Zip compressed raw byte content for agent. */
		agentContent?: string | null;

		/** The URI to a Google Cloud Storage file containing the agent to restore. Note: The URI must start with "gs://". Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage). */
		agentUri?: string | null;
	}

	/** The request message for Agents.RestoreAgent. */
	export interface GoogleCloudDialogflowV2RestoreAgentRequestFormProperties {

		/** Zip compressed raw byte content for agent. */
		agentContent: FormControl<string | null | undefined>,

		/** The URI to a Google Cloud Storage file containing the agent to restore. Note: The URI must start with "gs://". Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage). */
		agentUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2RestoreAgentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2RestoreAgentRequestFormProperties>({
			agentContent: new FormControl<string | null | undefined>(undefined),
			agentUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Agents.SearchAgents. */
	export interface GoogleCloudDialogflowV2SearchAgentsResponse {

		/** The list of agents. There will be a maximum number of items returned based on the page_size field in the request. */
		agents?: Array<GoogleCloudDialogflowV2Agent>;

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;
	}

	/** The response message for Agents.SearchAgents. */
	export interface GoogleCloudDialogflowV2SearchAgentsResponseFormProperties {

		/** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SearchAgentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SearchAgentsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a SearchKnowledge answer. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeAnswer {

		/** The piece of text from the knowledge base documents that answers the search query */
		answer?: string | null;

		/** The name of the answer record. Format: `projects//locations//answer Records/` */
		answerRecord?: string | null;

		/** All sources used to generate the answer. */
		answerSources?: Array<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource>;

		/** The type of the answer. */
		answerType?: GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerType | null;
	}

	/** Represents a SearchKnowledge answer. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeAnswerFormProperties {

		/** The piece of text from the knowledge base documents that answers the search query */
		answer: FormControl<string | null | undefined>,

		/** The name of the answer record. Format: `projects//locations//answer Records/` */
		answerRecord: FormControl<string | null | undefined>,

		/** The type of the answer. */
		answerType: FormControl<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SearchKnowledgeAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SearchKnowledgeAnswerFormProperties>({
			answer: new FormControl<string | null | undefined>(undefined),
			answerRecord: new FormControl<string | null | undefined>(undefined),
			answerType: new FormControl<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerType | null | undefined>(undefined),
		});

	}


	/** The sources of the answers. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource {

		/** The relevant snippet of the article. */
		snippet?: string | null;

		/** The title of the article. */
		title?: string | null;

		/** The URI of the article. */
		uri?: string | null;
	}

	/** The sources of the answers. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSourceFormProperties {

		/** The relevant snippet of the article. */
		snippet: FormControl<string | null | undefined>,

		/** The title of the article. */
		title: FormControl<string | null | undefined>,

		/** The URI of the article. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSourceFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSourceFormProperties>({
			snippet: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerType { ANSWER_TYPE_UNSPECIFIED = 0, FAQ = 1, GENERATIVE = 2, INTENT = 3 }


	/** The request message for Conversations.SearchKnowledge. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeRequest {

		/** The conversation (between human agent and end user) where the search request is triggered. Format: `projects//locations//conversations/`. */
		conversation?: string | null;

		/** Required. The conversation profile used to configure the search. Format: `projects//locations//conversationProfiles/`. */
		conversationProfile?: string | null;

		/** The name of the latest conversation message when the request is triggered. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;

		/** The parent resource contains the conversation profile Format: 'projects/' or `projects//locations/`. */
		parent?: string | null;

		/** Auxiliary proto messages. Represents the natural language text to be processed. */
		query?: GoogleCloudDialogflowV2TextInput;

		/** The ID of the search session. The session_id can be combined with Dialogflow V3 Agent ID retrieved from conversation profile or on its own to identify a search session. The search history of the same session will impact the search result. It's up to the API caller to choose an appropriate `Session ID`. It can be a random number or some type of session identifiers (preferably hashed). The length must not exceed 36 characters. */
		sessionId?: string | null;
	}

	/** The request message for Conversations.SearchKnowledge. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeRequestFormProperties {

		/** The conversation (between human agent and end user) where the search request is triggered. Format: `projects//locations//conversations/`. */
		conversation: FormControl<string | null | undefined>,

		/** Required. The conversation profile used to configure the search. Format: `projects//locations//conversationProfiles/`. */
		conversationProfile: FormControl<string | null | undefined>,

		/** The name of the latest conversation message when the request is triggered. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,

		/** The parent resource contains the conversation profile Format: 'projects/' or `projects//locations/`. */
		parent: FormControl<string | null | undefined>,

		/** The ID of the search session. The session_id can be combined with Dialogflow V3 Agent ID retrieved from conversation profile or on its own to identify a search session. The search history of the same session will impact the search result. It's up to the API caller to choose an appropriate `Session ID`. It can be a random number or some type of session identifiers (preferably hashed). The length must not exceed 36 characters. */
		sessionId: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SearchKnowledgeRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SearchKnowledgeRequestFormProperties>({
			conversation: new FormControl<string | null | undefined>(undefined),
			conversationProfile: new FormControl<string | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
			parent: new FormControl<string | null | undefined>(undefined),
			sessionId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Conversations.SearchKnowledge. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeResponse {

		/** Most relevant snippets extracted from articles in the given knowledge base, ordered by confidence. */
		answers?: Array<GoogleCloudDialogflowV2SearchKnowledgeAnswer>;

		/** The rewritten query used to search knowledge. */
		rewrittenQuery?: string | null;
	}

	/** The response message for Conversations.SearchKnowledge. */
	export interface GoogleCloudDialogflowV2SearchKnowledgeResponseFormProperties {

		/** The rewritten query used to search knowledge. */
		rewrittenQuery: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SearchKnowledgeResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SearchKnowledgeResponseFormProperties>({
			rewrittenQuery: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a ConversationProfile.SetSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2SetSuggestionFeatureConfigOperationMetadata {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile?: string | null;

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime?: string | null;

		/** Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Required. The type of the suggestion feature to add or update. */
		suggestionFeatureType?: GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null;
	}

	/** Metadata for a ConversationProfile.SetSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2SetSuggestionFeatureConfigOperationMetadataFormProperties {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile: FormControl<string | null | undefined>,

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,

		/** Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Required. The type of the suggestion feature to add or update. */
		suggestionFeatureType: FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SetSuggestionFeatureConfigOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SetSuggestionFeatureConfigOperationMetadataFormProperties>({
			conversationProfile: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			suggestionFeatureType: new FormControl<GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>(undefined),
		});

	}


	/** The request message for ConversationProfiles.SetSuggestionFeature. */
	export interface GoogleCloudDialogflowV2SetSuggestionFeatureConfigRequest {

		/** Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Config for suggestion features. */
		suggestionFeatureConfig?: GoogleCloudDialogflowV2HumanAgentAssistantConfigSuggestionFeatureConfig;
	}

	/** The request message for ConversationProfiles.SetSuggestionFeature. */
	export interface GoogleCloudDialogflowV2SetSuggestionFeatureConfigRequestFormProperties {

		/** Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SetSuggestionFeatureConfigRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SetSuggestionFeatureConfigRequestFormProperties>({
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
		});

	}


	/** The request message for Participants.SuggestArticles. */
	export interface GoogleCloudDialogflowV2SuggestArticlesRequest {

		/** Represents the parameters of human assist query. */
		assistQueryParams?: GoogleCloudDialogflowV2AssistQueryParameters;

		/** Optional. Max number of messages prior to and including latest_message to use as context when compiling the suggestion. By default 20 and at most 50. */
		contextSize?: number | null;

		/** Optional. The name of the latest conversation message to compile suggestion for. If empty, it will be the latest message of the conversation. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The request message for Participants.SuggestArticles. */
	export interface GoogleCloudDialogflowV2SuggestArticlesRequestFormProperties {

		/** Optional. Max number of messages prior to and including latest_message to use as context when compiling the suggestion. By default 20 and at most 50. */
		contextSize: FormControl<number | null | undefined>,

		/** Optional. The name of the latest conversation message to compile suggestion for. If empty, it will be the latest message of the conversation. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestArticlesRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestArticlesRequestFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Conversations.SuggestConversationSummary. */
	export interface GoogleCloudDialogflowV2SuggestConversationSummaryRequest {

		/** Represents the parameters of human assist query. */
		assistQueryParams?: GoogleCloudDialogflowV2AssistQueryParameters;

		/** Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 500 and at most 1000. */
		contextSize?: number | null;

		/** The name of the latest conversation message used as context for compiling suggestion. If empty, the latest message of the conversation will be used. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The request message for Conversations.SuggestConversationSummary. */
	export interface GoogleCloudDialogflowV2SuggestConversationSummaryRequestFormProperties {

		/** Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 500 and at most 1000. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used as context for compiling suggestion. If empty, the latest message of the conversation will be used. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestConversationSummaryRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestConversationSummaryRequestFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Conversations.SuggestConversationSummary. */
	export interface GoogleCloudDialogflowV2SuggestConversationSummaryResponse {

		/** Number of messages prior to and including last_conversation_message used to compile the suggestion. It may be smaller than the SuggestSummaryRequest.context_size field in the request if there weren't that many messages in the conversation. */
		contextSize?: number | null;

		/** The name of the latest conversation message used as context for compiling suggestion. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;

		/** Generated summary for a conversation. */
		summary?: GoogleCloudDialogflowV2SuggestConversationSummaryResponseSummary;
	}

	/** The response message for Conversations.SuggestConversationSummary. */
	export interface GoogleCloudDialogflowV2SuggestConversationSummaryResponseFormProperties {

		/** Number of messages prior to and including last_conversation_message used to compile the suggestion. It may be smaller than the SuggestSummaryRequest.context_size field in the request if there weren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used as context for compiling suggestion. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestConversationSummaryResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestConversationSummaryResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Generated summary for a conversation. */
	export interface GoogleCloudDialogflowV2SuggestConversationSummaryResponseSummary {

		/** The name of the answer record. Format: "projects//answerRecords/" */
		answerRecord?: string | null;

		/** The baseline model version used to generate this summary. It is empty if a baseline model was not used to generate this summary. */
		baselineModelVersion?: string | null;

		/** The summary content that is concatenated into one string. */
		text?: string | null;

		/** The summary content that is divided into sections. The key is the section's name and the value is the section's content. There is no specific format for the key or value. */
		textSections?: {[id: string]: string };
	}

	/** Generated summary for a conversation. */
	export interface GoogleCloudDialogflowV2SuggestConversationSummaryResponseSummaryFormProperties {

		/** The name of the answer record. Format: "projects//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,

		/** The baseline model version used to generate this summary. It is empty if a baseline model was not used to generate this summary. */
		baselineModelVersion: FormControl<string | null | undefined>,

		/** The summary content that is concatenated into one string. */
		text: FormControl<string | null | undefined>,

		/** The summary content that is divided into sections. The key is the section's name and the value is the section's content. There is no specific format for the key or value. */
		textSections: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestConversationSummaryResponseSummaryFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestConversationSummaryResponseSummaryFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
			baselineModelVersion: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
			textSections: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** The request message for Participants.SuggestFaqAnswers. */
	export interface GoogleCloudDialogflowV2SuggestFaqAnswersRequest {

		/** Represents the parameters of human assist query. */
		assistQueryParams?: GoogleCloudDialogflowV2AssistQueryParameters;

		/** Optional. Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 20 and at most 50. */
		contextSize?: number | null;

		/** Optional. The name of the latest conversation message to compile suggestion for. If empty, it will be the latest message of the conversation. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The request message for Participants.SuggestFaqAnswers. */
	export interface GoogleCloudDialogflowV2SuggestFaqAnswersRequestFormProperties {

		/** Optional. Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 20 and at most 50. */
		contextSize: FormControl<number | null | undefined>,

		/** Optional. The name of the latest conversation message to compile suggestion for. If empty, it will be the latest message of the conversation. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestFaqAnswersRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestFaqAnswersRequestFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Participants.SuggestSmartReplies. */
	export interface GoogleCloudDialogflowV2SuggestSmartRepliesRequest {

		/** Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 20 and at most 50. */
		contextSize?: number | null;

		/** Auxiliary proto messages. Represents the natural language text to be processed. */
		currentTextInput?: GoogleCloudDialogflowV2TextInput;

		/** The name of the latest conversation message to compile suggestion for. If empty, it will be the latest message of the conversation. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The request message for Participants.SuggestSmartReplies. */
	export interface GoogleCloudDialogflowV2SuggestSmartRepliesRequestFormProperties {

		/** Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 20 and at most 50. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message to compile suggestion for. If empty, it will be the latest message of the conversation. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2SuggestSmartRepliesRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2SuggestSmartRepliesRequestFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Agents.TrainAgent. */
	export interface GoogleCloudDialogflowV2TrainAgentRequest {
	}

	/** The request message for Agents.TrainAgent. */
	export interface GoogleCloudDialogflowV2TrainAgentRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2TrainAgentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2TrainAgentRequestFormProperties>({
		});

	}


	/** Metadata for a ConversationModels.UndeployConversationModel operation. */
	export interface GoogleCloudDialogflowV2UndeployConversationModelOperationMetadata {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel?: string | null;

		/** Timestamp when the request to undeploy conversation model was submitted. The time is measured on server side. */
		createTime?: string | null;
	}

	/** Metadata for a ConversationModels.UndeployConversationModel operation. */
	export interface GoogleCloudDialogflowV2UndeployConversationModelOperationMetadataFormProperties {

		/** The resource name of the conversation model. Format: `projects//conversationModels/` */
		conversationModel: FormControl<string | null | undefined>,

		/** Timestamp when the request to undeploy conversation model was submitted. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2UndeployConversationModelOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2UndeployConversationModelOperationMetadataFormProperties>({
			conversationModel: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for ConversationModels.UndeployConversationModel */
	export interface GoogleCloudDialogflowV2UndeployConversationModelRequest {
	}

	/** The request message for ConversationModels.UndeployConversationModel */
	export interface GoogleCloudDialogflowV2UndeployConversationModelRequestFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2UndeployConversationModelRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2UndeployConversationModelRequestFormProperties>({
		});

	}


	/** Represents a single validation error. */
	export interface GoogleCloudDialogflowV2ValidationError {

		/** The names of the entries that the error is associated with. Format: - `projects//agent`, if the error is associated with the entire agent. - `projects//agent/intents/`, if the error is associated with certain intents. - `projects//agent/intents//trainingPhrases/`, if the error is associated with certain intent training phrases. - `projects//agent/intents//parameters/`, if the error is associated with certain intent parameters. - `projects//agent/entities/`, if the error is associated with certain entities. */
		entries?: Array<string>;

		/** The detailed error message. */
		errorMessage?: string | null;

		/** The severity of the error. */
		severity?: GoogleCloudDialogflowV2ValidationErrorSeverity | null;
	}

	/** Represents a single validation error. */
	export interface GoogleCloudDialogflowV2ValidationErrorFormProperties {

		/** The detailed error message. */
		errorMessage: FormControl<string | null | undefined>,

		/** The severity of the error. */
		severity: FormControl<GoogleCloudDialogflowV2ValidationErrorSeverity | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2ValidationErrorFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ValidationErrorFormProperties>({
			errorMessage: new FormControl<string | null | undefined>(undefined),
			severity: new FormControl<GoogleCloudDialogflowV2ValidationErrorSeverity | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2ValidationErrorSeverity { SEVERITY_UNSPECIFIED = 0, INFO = 1, WARNING = 2, ERROR = 3, CRITICAL = 4 }


	/** Represents the output of agent validation. */
	export interface GoogleCloudDialogflowV2ValidationResult {

		/** Contains all validation errors. */
		validationErrors?: Array<GoogleCloudDialogflowV2ValidationError>;
	}

	/** Represents the output of agent validation. */
	export interface GoogleCloudDialogflowV2ValidationResultFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2ValidationResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2ValidationResultFormProperties>({
		});

	}


	/** The request message for a webhook call. */
	export interface GoogleCloudDialogflowV2WebhookRequest {

		/** Represents the contents of the original request that was passed to the `[Streaming]DetectIntent` call. */
		originalDetectIntentRequest?: GoogleCloudDialogflowV2OriginalDetectIntentRequest;

		/** Represents the result of conversational query or event processing. */
		queryResult?: GoogleCloudDialogflowV2QueryResult;

		/** The unique identifier of the response. Contains the same value as `[Streaming]DetectIntentResponse.response_id`. */
		responseId?: string | null;

		/** The unique identifier of detectIntent request session. Can be used to identify end-user inside webhook implementation. Format: `projects//agent/sessions/`, or `projects//agent/environments//users//sessions/`. */
		session?: string | null;
	}

	/** The request message for a webhook call. */
	export interface GoogleCloudDialogflowV2WebhookRequestFormProperties {

		/** The unique identifier of the response. Contains the same value as `[Streaming]DetectIntentResponse.response_id`. */
		responseId: FormControl<string | null | undefined>,

		/** The unique identifier of detectIntent request session. Can be used to identify end-user inside webhook implementation. Format: `projects//agent/sessions/`, or `projects//agent/environments//users//sessions/`. */
		session: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2WebhookRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2WebhookRequestFormProperties>({
			responseId: new FormControl<string | null | undefined>(undefined),
			session: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for a webhook call. This response is validated by the Dialogflow server. If validation fails, an error will be returned in the QueryResult.diagnostic_info field. Setting JSON fields to an empty value with the wrong type is a common error. To avoid this error: - Use `""` for empty strings - Use `{}` or `null` for empty objects - Use `[]` or `null` for empty arrays For more information, see the [Protocol Buffers Language Guide](https://developers.google.com/protocol-buffers/docs/proto3#json). */
	export interface GoogleCloudDialogflowV2WebhookResponse {

		/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
		followupEventInput?: GoogleCloudDialogflowV2EventInput;

		/** Optional. The rich response messages intended for the end-user. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_messages sent to the integration or API caller. */
		fulfillmentMessages?: Array<GoogleCloudDialogflowV2IntentMessage>;

		/** Optional. The text response message intended for the end-user. It is recommended to use `fulfillment_messages.text.text[0]` instead. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_text sent to the integration or API caller. */
		fulfillmentText?: string | null;

		/** Optional. The collection of output contexts that will overwrite currently active contexts for the session and reset their lifespans. When provided, Dialogflow uses this field to populate QueryResult.output_contexts sent to the integration or API caller. */
		outputContexts?: Array<GoogleCloudDialogflowV2Context>;

		/** Optional. This field can be used to pass custom data from your webhook to the integration or API caller. Arbitrary JSON objects are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_payload sent to the integration or API caller. This field is also used by the [Google Assistant integration](https://cloud.google.com/dialogflow/docs/integrations/aog) for rich response messages. See the format definition at [Google Assistant Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json) */
		payload?: {[id: string]: any };

		/** Optional. Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session. Setting this data from a webhook overwrites the session entity types that have been set using `detectIntent`, `streamingDetectIntent` or SessionEntityType management methods. */
		sessionEntityTypes?: Array<GoogleCloudDialogflowV2SessionEntityType>;

		/** Optional. A custom field used to identify the webhook source. Arbitrary strings are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_source sent to the integration or API caller. */
		source?: string | null;
	}

	/** The response message for a webhook call. This response is validated by the Dialogflow server. If validation fails, an error will be returned in the QueryResult.diagnostic_info field. Setting JSON fields to an empty value with the wrong type is a common error. To avoid this error: - Use `""` for empty strings - Use `{}` or `null` for empty objects - Use `[]` or `null` for empty arrays For more information, see the [Protocol Buffers Language Guide](https://developers.google.com/protocol-buffers/docs/proto3#json). */
	export interface GoogleCloudDialogflowV2WebhookResponseFormProperties {

		/** Optional. The text response message intended for the end-user. It is recommended to use `fulfillment_messages.text.text[0]` instead. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_text sent to the integration or API caller. */
		fulfillmentText: FormControl<string | null | undefined>,

		/** Optional. This field can be used to pass custom data from your webhook to the integration or API caller. Arbitrary JSON objects are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_payload sent to the integration or API caller. This field is also used by the [Google Assistant integration](https://cloud.google.com/dialogflow/docs/integrations/aog) for rich response messages. See the format definition at [Google Assistant Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json) */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** Optional. A custom field used to identify the webhook source. Arbitrary strings are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_source sent to the integration or API caller. */
		source: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2WebhookResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2WebhookResponseFormProperties>({
			fulfillmentText: new FormControl<string | null | undefined>(undefined),
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a part of a message possibly annotated with an entity. The part can be an entity or purely a part of the message between two entities or message start/end. */
	export interface GoogleCloudDialogflowV2beta1AnnotatedMessagePart {

		/** Optional. The [Dialogflow system entity type](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. If this is empty, Dialogflow could not annotate the phrase part with a system entity. */
		entityType?: string | null;

		/** Optional. The [Dialogflow system entity formatted value ](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. For example for a system entity of type `@sys.unit-currency`, this may contain: { "amount": 5, "currency": "USD" } */
		formattedValue?: any;

		/** Required. A part of a message possibly annotated with an entity. */
		text?: string | null;
	}

	/** Represents a part of a message possibly annotated with an entity. The part can be an entity or purely a part of the message between two entities or message start/end. */
	export interface GoogleCloudDialogflowV2beta1AnnotatedMessagePartFormProperties {

		/** Optional. The [Dialogflow system entity type](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. If this is empty, Dialogflow could not annotate the phrase part with a system entity. */
		entityType: FormControl<string | null | undefined>,

		/** Optional. The [Dialogflow system entity formatted value ](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. For example for a system entity of type `@sys.unit-currency`, this may contain: { "amount": 5, "currency": "USD" } */
		formattedValue: FormControl<any | null | undefined>,

		/** Required. A part of a message possibly annotated with an entity. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1AnnotatedMessagePartFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1AnnotatedMessagePartFormProperties>({
			entityType: new FormControl<string | null | undefined>(undefined),
			formattedValue: new FormControl<any | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents article answer. */
	export interface GoogleCloudDialogflowV2beta1ArticleAnswer {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata?: {[id: string]: string };

		/** Output only. Article snippets. */
		snippets?: Array<string>;

		/** The article title. */
		title?: string | null;

		/** The article URI. */
		uri?: string | null;
	}

	/** Represents article answer. */
	export interface GoogleCloudDialogflowV2beta1ArticleAnswerFormProperties {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/** The article title. */
		title: FormControl<string | null | undefined>,

		/** The article URI. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1ArticleAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1ArticleAnswerFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for EntityTypes.BatchUpdateEntityTypes. */
	export interface GoogleCloudDialogflowV2beta1BatchUpdateEntityTypesResponse {

		/** The collection of updated or created entity types. */
		entityTypes?: Array<GoogleCloudDialogflowV2beta1EntityType>;
	}

	/** The response message for EntityTypes.BatchUpdateEntityTypes. */
	export interface GoogleCloudDialogflowV2beta1BatchUpdateEntityTypesResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1BatchUpdateEntityTypesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1BatchUpdateEntityTypesResponseFormProperties>({
		});

	}


	/** Each intent parameter has a type, called the entity type, which dictates exactly how data from an end-user expression is extracted. Dialogflow provides predefined system entities that can match many common types of data. For example, there are system entities for matching dates, times, colors, email addresses, and so on. You can also create your own custom entities for matching custom data. For example, you could define a vegetable entity that can match the types of vegetables available for purchase with a grocery store agent. For more information, see the [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview). */
	export interface GoogleCloudDialogflowV2beta1EntityType {

		/** Optional. Indicates whether the entity type can be automatically expanded. */
		autoExpansionMode?: GoogleCloudDialogflowV2EntityTypeAutoExpansionMode | null;

		/** Required. The name of the entity type. */
		displayName?: string | null;

		/** Optional. Enables fuzzy entity extraction during classification. */
		enableFuzzyExtraction?: boolean | null;

		/** Optional. The collection of entity entries associated with the entity type. */
		entities?: Array<GoogleCloudDialogflowV2beta1EntityTypeEntity>;

		/** Required. Indicates the kind of entity type. */
		kind?: GoogleCloudDialogflowV2EntityTypeKind | null;

		/** The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Supported formats: - `projects//agent/entityTypes/` - `projects//locations//agent/entityTypes/` */
		name?: string | null;
	}

	/** Each intent parameter has a type, called the entity type, which dictates exactly how data from an end-user expression is extracted. Dialogflow provides predefined system entities that can match many common types of data. For example, there are system entities for matching dates, times, colors, email addresses, and so on. You can also create your own custom entities for matching custom data. For example, you could define a vegetable entity that can match the types of vegetables available for purchase with a grocery store agent. For more information, see the [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview). */
	export interface GoogleCloudDialogflowV2beta1EntityTypeFormProperties {

		/** Optional. Indicates whether the entity type can be automatically expanded. */
		autoExpansionMode: FormControl<GoogleCloudDialogflowV2EntityTypeAutoExpansionMode | null | undefined>,

		/** Required. The name of the entity type. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Enables fuzzy entity extraction during classification. */
		enableFuzzyExtraction: FormControl<boolean | null | undefined>,

		/** Required. Indicates the kind of entity type. */
		kind: FormControl<GoogleCloudDialogflowV2EntityTypeKind | null | undefined>,

		/** The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Supported formats: - `projects//agent/entityTypes/` - `projects//locations//agent/entityTypes/` */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1EntityTypeFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1EntityTypeFormProperties>({
			autoExpansionMode: new FormControl<GoogleCloudDialogflowV2EntityTypeAutoExpansionMode | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			enableFuzzyExtraction: new FormControl<boolean | null | undefined>(undefined),
			kind: new FormControl<GoogleCloudDialogflowV2EntityTypeKind | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An **entity entry** for an associated entity type. */
	export interface GoogleCloudDialogflowV2beta1EntityTypeEntity {

		/** Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`. */
		synonyms?: Array<string>;

		/** Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases). */
		value?: string | null;
	}

	/** An **entity entry** for an associated entity type. */
	export interface GoogleCloudDialogflowV2beta1EntityTypeEntityFormProperties {

		/** Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases). */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1EntityTypeEntityFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1EntityTypeEntityFormProperties>({
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Intents.BatchUpdateIntents. */
	export interface GoogleCloudDialogflowV2beta1BatchUpdateIntentsResponse {

		/** The collection of updated or created intents. */
		intents?: Array<GoogleCloudDialogflowV2beta1Intent>;
	}

	/** The response message for Intents.BatchUpdateIntents. */
	export interface GoogleCloudDialogflowV2beta1BatchUpdateIntentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1BatchUpdateIntentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1BatchUpdateIntentsResponseFormProperties>({
		});

	}


	/** An intent categorizes an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation. When an end-user writes or says something, referred to as an end-user expression or end-user input, Dialogflow matches the end-user input to the best intent in your agent. Matching an intent is also known as intent classification. For more information, see the [intent guide](https://cloud.google.com/dialogflow/docs/intents-overview). */
	export interface GoogleCloudDialogflowV2beta1Intent {

		/** Optional. The name of the action associated with the intent. Note: The action name must not contain whitespaces. */
		action?: string | null;

		/** Optional. The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform). */
		defaultResponsePlatforms?: Array<string>;

		/** Required. The name of this intent. */
		displayName?: string | null;

		/** Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false. */
		endInteraction?: boolean | null;

		/** Optional. The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the contexts must be present in the active user session for an event to trigger this intent. Event names are limited to 150 characters. */
		events?: Array<string>;

		/** Output only. Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only in the output. */
		followupIntentInfo?: Array<GoogleCloudDialogflowV2beta1IntentFollowupIntentInfo>;

		/** Optional. The list of context names required for this intent to be triggered. Formats: - `projects//agent/sessions/-/contexts/` - `projects//locations//agent/sessions/-/contexts/` */
		inputContextNames?: Array<string>;

		/** Optional. Indicates whether this is a fallback intent. */
		isFallback?: boolean | null;

		/** Optional. Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false. */
		liveAgentHandoff?: boolean | null;

		/** Optional. The collection of rich messages corresponding to the `Response` field in the Dialogflow console. */
		messages?: Array<GoogleCloudDialogflowV2beta1IntentMessage>;

		/** Optional. Indicates whether Machine Learning is disabled for the intent. Note: If `ml_disabled` setting is set to true, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off. */
		mlDisabled?: boolean | null;

		/** Optional. Indicates whether Machine Learning is enabled for the intent. Note: If `ml_enabled` setting is set to false, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off. DEPRECATED! Please use `ml_disabled` field instead. NOTE: If both `ml_enabled` and `ml_disabled` are either not set or false, then the default value is determined as follows: - Before April 15th, 2018 the default is: ml_enabled = false / ml_disabled = true. - After April 15th, 2018 the default is: ml_enabled = true / ml_disabled = false. */
		mlEnabled?: boolean | null;

		/** Optional. The unique identifier of this intent. Required for Intents.UpdateIntent and Intents.BatchUpdateIntents methods. Supported formats: - `projects//agent/intents/` - `projects//locations//agent/intents/` */
		name?: string | null;

		/** Optional. The collection of contexts that are activated when the intent is matched. Context messages in this collection should not set the parameters field. Setting the `lifespan_count` to 0 will reset the context when the intent is matched. Format: `projects//agent/sessions/-/contexts/`. */
		outputContexts?: Array<GoogleCloudDialogflowV2beta1Context>;

		/** Optional. The collection of parameters associated with the intent. */
		parameters?: Array<GoogleCloudDialogflowV2beta1IntentParameter>;

		/** Optional. The unique identifier of the parent intent in the chain of followup intents. You can set this field when creating an intent, for example with CreateIntent or BatchUpdateIntents, in order to make this intent a followup intent. It identifies the parent followup intent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName?: string | null;

		/** Optional. The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority?: number | null;

		/** Optional. Indicates whether to delete all contexts in the current session when this intent is matched. */
		resetContexts?: boolean | null;

		/** Output only. The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents chain for this intent. Format: `projects//agent/intents/`. */
		rootFollowupIntentName?: string | null;

		/** Optional. The collection of examples that the agent is trained on. */
		trainingPhrases?: Array<GoogleCloudDialogflowV2beta1IntentTrainingPhrase>;

		/** Optional. Indicates whether webhooks are enabled for the intent. */
		webhookState?: GoogleCloudDialogflowV2IntentWebhookState | null;
	}

	/** An intent categorizes an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation. When an end-user writes or says something, referred to as an end-user expression or end-user input, Dialogflow matches the end-user input to the best intent in your agent. Matching an intent is also known as intent classification. For more information, see the [intent guide](https://cloud.google.com/dialogflow/docs/intents-overview). */
	export interface GoogleCloudDialogflowV2beta1IntentFormProperties {

		/** Optional. The name of the action associated with the intent. Note: The action name must not contain whitespaces. */
		action: FormControl<string | null | undefined>,

		/** Required. The name of this intent. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false. */
		endInteraction: FormControl<boolean | null | undefined>,

		/** Optional. Indicates whether this is a fallback intent. */
		isFallback: FormControl<boolean | null | undefined>,

		/** Optional. Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false. */
		liveAgentHandoff: FormControl<boolean | null | undefined>,

		/** Optional. Indicates whether Machine Learning is disabled for the intent. Note: If `ml_disabled` setting is set to true, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off. */
		mlDisabled: FormControl<boolean | null | undefined>,

		/** Optional. Indicates whether Machine Learning is enabled for the intent. Note: If `ml_enabled` setting is set to false, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off. DEPRECATED! Please use `ml_disabled` field instead. NOTE: If both `ml_enabled` and `ml_disabled` are either not set or false, then the default value is determined as follows: - Before April 15th, 2018 the default is: ml_enabled = false / ml_disabled = true. - After April 15th, 2018 the default is: ml_enabled = true / ml_disabled = false. */
		mlEnabled: FormControl<boolean | null | undefined>,

		/** Optional. The unique identifier of this intent. Required for Intents.UpdateIntent and Intents.BatchUpdateIntents methods. Supported formats: - `projects//agent/intents/` - `projects//locations//agent/intents/` */
		name: FormControl<string | null | undefined>,

		/** Optional. The unique identifier of the parent intent in the chain of followup intents. You can set this field when creating an intent, for example with CreateIntent or BatchUpdateIntents, in order to make this intent a followup intent. It identifies the parent followup intent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName: FormControl<string | null | undefined>,

		/** Optional. The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests. */
		priority: FormControl<number | null | undefined>,

		/** Optional. Indicates whether to delete all contexts in the current session when this intent is matched. */
		resetContexts: FormControl<boolean | null | undefined>,

		/** Output only. The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents chain for this intent. Format: `projects//agent/intents/`. */
		rootFollowupIntentName: FormControl<string | null | undefined>,

		/** Optional. Indicates whether webhooks are enabled for the intent. */
		webhookState: FormControl<GoogleCloudDialogflowV2IntentWebhookState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			endInteraction: new FormControl<boolean | null | undefined>(undefined),
			isFallback: new FormControl<boolean | null | undefined>(undefined),
			liveAgentHandoff: new FormControl<boolean | null | undefined>(undefined),
			mlDisabled: new FormControl<boolean | null | undefined>(undefined),
			mlEnabled: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parentFollowupIntentName: new FormControl<string | null | undefined>(undefined),
			priority: new FormControl<number | null | undefined>(undefined),
			resetContexts: new FormControl<boolean | null | undefined>(undefined),
			rootFollowupIntentName: new FormControl<string | null | undefined>(undefined),
			webhookState: new FormControl<GoogleCloudDialogflowV2IntentWebhookState | null | undefined>(undefined),
		});

	}


	/** Represents a single followup intent in the chain. */
	export interface GoogleCloudDialogflowV2beta1IntentFollowupIntentInfo {

		/** The unique identifier of the followup intent. Format: `projects//agent/intents/`. */
		followupIntentName?: string | null;

		/** The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName?: string | null;
	}

	/** Represents a single followup intent in the chain. */
	export interface GoogleCloudDialogflowV2beta1IntentFollowupIntentInfoFormProperties {

		/** The unique identifier of the followup intent. Format: `projects//agent/intents/`. */
		followupIntentName: FormControl<string | null | undefined>,

		/** The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`. */
		parentFollowupIntentName: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentFollowupIntentInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentFollowupIntentInfoFormProperties>({
			followupIntentName: new FormControl<string | null | undefined>(undefined),
			parentFollowupIntentName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Corresponds to the `Response` field in the Dialogflow console. */
	export interface GoogleCloudDialogflowV2beta1IntentMessage {

		/** The basic card message. Useful for displaying information. */
		basicCard?: GoogleCloudDialogflowV2beta1IntentMessageBasicCard;

		/** Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel */
		browseCarouselCard?: GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCard;

		/** The card response message. */
		card?: GoogleCloudDialogflowV2beta1IntentMessageCard;

		/** The card for presenting a carousel of options to select from. */
		carouselSelect?: GoogleCloudDialogflowV2beta1IntentMessageCarouselSelect;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** The suggestion chip message that allows the user to jump out to the app or website associated with this agent. */
		linkOutSuggestion?: GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestion;

		/** The card for presenting a list of options to select from. */
		listSelect?: GoogleCloudDialogflowV2beta1IntentMessageListSelect;

		/** The media content card for Actions on Google. */
		mediaContent?: GoogleCloudDialogflowV2beta1IntentMessageMediaContent;

		/** A custom platform-specific response. */
		payload?: {[id: string]: any };

		/** Optional. The platform that this message is intended for. */
		platform?: GoogleCloudDialogflowV2beta1IntentMessagePlatform | null;

		/** The quick replies response message. */
		quickReplies?: GoogleCloudDialogflowV2beta1IntentMessageQuickReplies;

		/** Carousel Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. If you want to show a single card with more control over the layout, please use RbmStandaloneCard instead. */
		rbmCarouselRichCard?: GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard;

		/** Standalone Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. You can group multiple rich cards into one using RbmCarouselCard but carousel cards will give you less control over the card layout. */
		rbmStandaloneRichCard?: GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCard;

		/** Rich Business Messaging (RBM) text response with suggestions. */
		rbmText?: GoogleCloudDialogflowV2beta1IntentMessageRbmText;

		/** The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`. */
		simpleResponses?: GoogleCloudDialogflowV2beta1IntentMessageSimpleResponses;

		/** The collection of suggestions. */
		suggestions?: GoogleCloudDialogflowV2beta1IntentMessageSuggestions;

		/** Table card for Actions on Google. */
		tableCard?: GoogleCloudDialogflowV2beta1IntentMessageTableCard;

		/** Plays audio from a file in Telephony Gateway. */
		telephonyPlayAudio?: GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudio;

		/** Synthesizes speech and plays back the synthesized audio to the caller in Telephony Gateway. Telephony Gateway takes the synthesizer settings from `DetectIntentResponse.output_audio_config` which can either be set at request-level or can come from the agent-level synthesizer config. */
		telephonySynthesizeSpeech?: GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeech;

		/** Transfers the call in Telephony Gateway. */
		telephonyTransferCall?: GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCall;

		/** The text response message. */
		text?: GoogleCloudDialogflowV2beta1IntentMessageText;
	}

	/** Corresponds to the `Response` field in the Dialogflow console. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageFormProperties {

		/** A custom platform-specific response. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** Optional. The platform that this message is intended for. */
		platform: FormControl<GoogleCloudDialogflowV2beta1IntentMessagePlatform | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageFormProperties>({
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			platform: new FormControl<GoogleCloudDialogflowV2beta1IntentMessagePlatform | null | undefined>(undefined),
		});

	}


	/** The basic card message. Useful for displaying information. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCard {

		/** Optional. The collection of card buttons. */
		buttons?: Array<GoogleCloudDialogflowV2beta1IntentMessageBasicCardButton>;

		/** Required, unless image is present. The body text of the card. */
		formattedText?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** Optional. The subtitle of the card. */
		subtitle?: string | null;

		/** Optional. The title of the card. */
		title?: string | null;
	}

	/** The basic card message. Useful for displaying information. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardFormProperties {

		/** Required, unless image is present. The body text of the card. */
		formattedText: FormControl<string | null | undefined>,

		/** Optional. The subtitle of the card. */
		subtitle: FormControl<string | null | undefined>,

		/** Optional. The title of the card. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageBasicCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageBasicCardFormProperties>({
			formattedText: new FormControl<string | null | undefined>(undefined),
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The button object that appears at the bottom of a card. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardButton {

		/** Opens the given URI. */
		openUriAction?: GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriAction;

		/** Required. The title of the button. */
		title?: string | null;
	}

	/** The button object that appears at the bottom of a card. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonFormProperties {

		/** Required. The title of the button. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonFormProperties>({
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Opens the given URI. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriAction {

		/** Required. The HTTP or HTTPS scheme URI. */
		uri?: string | null;
	}

	/** Opens the given URI. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriActionFormProperties {

		/** Required. The HTTP or HTTPS scheme URI. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriActionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriActionFormProperties>({
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The image response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageImage {

		/** A text description of the image to be used for accessibility, e.g., screen readers. Required if image_uri is set for CarouselSelect. */
		accessibilityText?: string | null;

		/** Optional. The public URI to an image file. */
		imageUri?: string | null;
	}

	/** The image response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageImageFormProperties {

		/** A text description of the image to be used for accessibility, e.g., screen readers. Required if image_uri is set for CarouselSelect. */
		accessibilityText: FormControl<string | null | undefined>,

		/** Optional. The public URI to an image file. */
		imageUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageImageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageImageFormProperties>({
			accessibilityText: new FormControl<string | null | undefined>(undefined),
			imageUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCard {

		/** Optional. Settings for displaying the image. Applies to every image in items. */
		imageDisplayOptions?: GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions | null;

		/** Required. List of items in the Browse Carousel Card. Minimum of two items, maximum of ten. */
		items?: Array<GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItem>;
	}

	/** Browse Carousel Card for Actions on Google. https://developers.google.com/actions/assistant/responses#browsing_carousel */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardFormProperties {

		/** Optional. Settings for displaying the image. Applies to every image in items. */
		imageDisplayOptions: FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardFormProperties>({
			imageDisplayOptions: new FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardImageDisplayOptions | null | undefined>(undefined),
		});

	}


	/** Browsing carousel tile */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItem {

		/** Optional. Description of the carousel item. Maximum of four lines of text. */
		description?: string | null;

		/** Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text. */
		footer?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** Actions on Google action to open a given url. */
		openUriAction?: GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction;

		/** Required. Title of the carousel item. Maximum of two lines of text. */
		title?: string | null;
	}

	/** Browsing carousel tile */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemFormProperties {

		/** Optional. Description of the carousel item. Maximum of four lines of text. */
		description: FormControl<string | null | undefined>,

		/** Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text. */
		footer: FormControl<string | null | undefined>,

		/** Required. Title of the carousel item. Maximum of two lines of text. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			footer: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Actions on Google action to open a given url. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction {

		/** Required. URL */
		url?: string | null;

		/** Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser. */
		urlTypeHint?: GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint | null;
	}

	/** Actions on Google action to open a given url. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionFormProperties {

		/** Required. URL */
		url: FormControl<string | null | undefined>,

		/** Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser. */
		urlTypeHint: FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionFormProperties>({
			url: new FormControl<string | null | undefined>(undefined),
			urlTypeHint: new FormControl<GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlActionUrlTypeHint | null | undefined>(undefined),
		});

	}


	/** The card response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCard {

		/** Optional. The collection of card buttons. */
		buttons?: Array<GoogleCloudDialogflowV2beta1IntentMessageCardButton>;

		/** Optional. The public URI to an image file for the card. */
		imageUri?: string | null;

		/** Optional. The subtitle of the card. */
		subtitle?: string | null;

		/** Optional. The title of the card. */
		title?: string | null;
	}

	/** The card response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCardFormProperties {

		/** Optional. The public URI to an image file for the card. */
		imageUri: FormControl<string | null | undefined>,

		/** Optional. The subtitle of the card. */
		subtitle: FormControl<string | null | undefined>,

		/** Optional. The title of the card. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageCardFormProperties>({
			imageUri: new FormControl<string | null | undefined>(undefined),
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Optional. Contains information about a button. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCardButton {

		/** Optional. The text to send back to the Dialogflow API or a URI to open. */
		postback?: string | null;

		/** Optional. The text to show on the button. */
		text?: string | null;
	}

	/** Optional. Contains information about a button. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCardButtonFormProperties {

		/** Optional. The text to send back to the Dialogflow API or a URI to open. */
		postback: FormControl<string | null | undefined>,

		/** Optional. The text to show on the button. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageCardButtonFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageCardButtonFormProperties>({
			postback: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The card for presenting a carousel of options to select from. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCarouselSelect {

		/** Required. Carousel items. */
		items?: Array<GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItem>;
	}

	/** The card for presenting a carousel of options to select from. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageCarouselSelectFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectFormProperties>({
		});

	}


	/** An item in the carousel. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItem {

		/** Optional. The body text of the card. */
		description?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** Additional info about the select item for when it is triggered in a dialog. */
		info?: GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfo;

		/** Required. Title of the carousel item. */
		title?: string | null;
	}

	/** An item in the carousel. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItemFormProperties {

		/** Optional. The body text of the card. */
		description: FormControl<string | null | undefined>,

		/** Required. Title of the carousel item. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItemFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItemFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Additional info about the select item for when it is triggered in a dialog. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfo {

		/** Required. A unique key that will be sent back to the agent if this response is given. */
		key?: string | null;

		/** Optional. A list of synonyms that can also be used to trigger this item in dialog. */
		synonyms?: Array<string>;
	}

	/** Additional info about the select item for when it is triggered in a dialog. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfoFormProperties {

		/** Required. A unique key that will be sent back to the agent if this response is given. */
		key: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageSelectItemInfoFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfoFormProperties>({
			key: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The suggestion chip message that allows the user to jump out to the app or website associated with this agent. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestion {

		/** Required. The name of the app or site this chip is linking to. */
		destinationName?: string | null;

		/** Required. The URI of the app or site to open when the user taps the suggestion chip. */
		uri?: string | null;
	}

	/** The suggestion chip message that allows the user to jump out to the app or website associated with this agent. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestionFormProperties {

		/** Required. The name of the app or site this chip is linking to. */
		destinationName: FormControl<string | null | undefined>,

		/** Required. The URI of the app or site to open when the user taps the suggestion chip. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestionFormProperties>({
			destinationName: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The card for presenting a list of options to select from. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageListSelect {

		/** Required. List items. */
		items?: Array<GoogleCloudDialogflowV2beta1IntentMessageListSelectItem>;

		/** Optional. Subtitle of the list. */
		subtitle?: string | null;

		/** Optional. The overall title of the list. */
		title?: string | null;
	}

	/** The card for presenting a list of options to select from. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageListSelectFormProperties {

		/** Optional. Subtitle of the list. */
		subtitle: FormControl<string | null | undefined>,

		/** Optional. The overall title of the list. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageListSelectFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageListSelectFormProperties>({
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An item in the list. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageListSelectItem {

		/** Optional. The main text describing the item. */
		description?: string | null;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** Additional info about the select item for when it is triggered in a dialog. */
		info?: GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfo;

		/** Required. The title of the list item. */
		title?: string | null;
	}

	/** An item in the list. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageListSelectItemFormProperties {

		/** Optional. The main text describing the item. */
		description: FormControl<string | null | undefined>,

		/** Required. The title of the list item. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageListSelectItemFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageListSelectItemFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The media content card for Actions on Google. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageMediaContent {

		/** Required. List of media objects. */
		mediaObjects?: Array<GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObject>;

		/** Optional. What type of media is the content (ie "audio"). */
		mediaType?: GoogleCloudDialogflowV2IntentMessageMediaContentMediaType | null;
	}

	/** The media content card for Actions on Google. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageMediaContentFormProperties {

		/** Optional. What type of media is the content (ie "audio"). */
		mediaType: FormControl<GoogleCloudDialogflowV2IntentMessageMediaContentMediaType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageMediaContentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageMediaContentFormProperties>({
			mediaType: new FormControl<GoogleCloudDialogflowV2IntentMessageMediaContentMediaType | null | undefined>(undefined),
		});

	}


	/** Response media object for media content card. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObject {

		/** Required. Url where the media is stored. */
		contentUrl?: string | null;

		/** Optional. Description of media card. */
		description?: string | null;

		/** The image response message. */
		icon?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** The image response message. */
		largeImage?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** Required. Name of media card. */
		name?: string | null;
	}

	/** Response media object for media content card. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectFormProperties {

		/** Required. Url where the media is stored. */
		contentUrl: FormControl<string | null | undefined>,

		/** Optional. Description of media card. */
		description: FormControl<string | null | undefined>,

		/** Required. Name of media card. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObjectFormProperties>({
			contentUrl: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2beta1IntentMessagePlatform { PLATFORM_UNSPECIFIED = 0, FACEBOOK = 1, SLACK = 2, TELEGRAM = 3, KIK = 4, SKYPE = 5, LINE = 6, VIBER = 7, ACTIONS_ON_GOOGLE = 8, TELEPHONY = 9, GOOGLE_HANGOUTS = 10 }


	/** The quick replies response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageQuickReplies {

		/** Optional. The collection of quick replies. */
		quickReplies?: Array<string>;

		/** Optional. The title of the collection of quick replies. */
		title?: string | null;
	}

	/** The quick replies response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageQuickRepliesFormProperties {

		/** Optional. The title of the collection of quick replies. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageQuickRepliesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageQuickRepliesFormProperties>({
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Carousel Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. If you want to show a single card with more control over the layout, please use RbmStandaloneCard instead. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard {

		/** Required. The cards in the carousel. A carousel must have at least 2 cards and at most 10. */
		cardContents?: Array<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent>;

		/** Required. The width of the cards in the carousel. */
		cardWidth?: GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardCardWidth | null;
	}

	/** Carousel Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. If you want to show a single card with more control over the layout, please use RbmStandaloneCard instead. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardFormProperties {

		/** Required. The width of the cards in the carousel. */
		cardWidth: FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardCardWidth | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardFormProperties>({
			cardWidth: new FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardCardWidth | null | undefined>(undefined),
		});

	}


	/** Rich Business Messaging (RBM) Card content */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent {

		/** Optional. Description of the card (at most 2000 bytes). At least one of the title, description or media must be set. */
		description?: string | null;

		/** Rich Business Messaging (RBM) Media displayed in Cards The following media-types are currently supported: Image Types * image/jpeg * image/jpg' * image/gif * image/png Video Types * video/h263 * video/m4v * video/mp4 * video/mpeg * video/mpeg4 * video/webm */
		media?: GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMedia;

		/** Optional. List of suggestions to include in the card. */
		suggestions?: Array<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestion>;

		/** Optional. Title of the card (at most 200 bytes). At least one of the title, description or media must be set. */
		title?: string | null;
	}

	/** Rich Business Messaging (RBM) Card content */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentFormProperties {

		/** Optional. Description of the card (at most 2000 bytes). At least one of the title, description or media must be set. */
		description: FormControl<string | null | undefined>,

		/** Optional. Title of the card (at most 200 bytes). At least one of the title, description or media must be set. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmCardContentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Rich Business Messaging (RBM) Media displayed in Cards The following media-types are currently supported: Image Types * image/jpeg * image/jpg' * image/gif * image/png Video Types * video/h263 * video/m4v * video/mp4 * video/mpeg * video/mpeg4 * video/webm */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMedia {

		/** Required. Publicly reachable URI of the file. The RBM platform determines the MIME type of the file from the content-type field in the HTTP headers when the platform fetches the file. The content-type field must be present and accurate in the HTTP response from the URL. */
		fileUri?: string | null;

		/** Required for cards with vertical orientation. The height of the media within a rich card with a vertical layout. For a standalone card with horizontal layout, height is not customizable, and this field is ignored. */
		height?: GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaHeight | null;

		/** Optional. Publicly reachable URI of the thumbnail.If you don't provide a thumbnail URI, the RBM platform displays a blank placeholder thumbnail until the user's device downloads the file. Depending on the user's setting, the file may not download automatically and may require the user to tap a download button. */
		thumbnailUri?: string | null;
	}

	/** Rich Business Messaging (RBM) Media displayed in Cards The following media-types are currently supported: Image Types * image/jpeg * image/jpg' * image/gif * image/png Video Types * video/h263 * video/m4v * video/mp4 * video/mpeg * video/mpeg4 * video/webm */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaFormProperties {

		/** Required. Publicly reachable URI of the file. The RBM platform determines the MIME type of the file from the content-type field in the HTTP headers when the platform fetches the file. The content-type field must be present and accurate in the HTTP response from the URL. */
		fileUri: FormControl<string | null | undefined>,

		/** Required for cards with vertical orientation. The height of the media within a rich card with a vertical layout. For a standalone card with horizontal layout, height is not customizable, and this field is ignored. */
		height: FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaHeight | null | undefined>,

		/** Optional. Publicly reachable URI of the thumbnail.If you don't provide a thumbnail URI, the RBM platform displays a blank placeholder thumbnail until the user's device downloads the file. Depending on the user's setting, the file may not download automatically and may require the user to tap a download button. */
		thumbnailUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaFormProperties>({
			fileUri: new FormControl<string | null | undefined>(undefined),
			height: new FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaHeight | null | undefined>(undefined),
			thumbnailUri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMediaHeight { HEIGHT_UNSPECIFIED = 0, SHORT = 1, MEDIUM = 2, TALL = 3 }


	/** Rich Business Messaging (RBM) suggestion. Suggestions allow user to easily select/click a predefined response or perform an action (like opening a web uri). */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestion {

		/** Rich Business Messaging (RBM) suggested client-side action that the user can choose from the card. */
		action?: GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedAction;

		/** Rich Business Messaging (RBM) suggested reply that the user can click instead of typing in their own response. */
		reply?: GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReply;
	}

	/** Rich Business Messaging (RBM) suggestion. Suggestions allow user to easily select/click a predefined response or perform an action (like opening a web uri). */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestionFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmSuggestionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestionFormProperties>({
		});

	}


	/** Rich Business Messaging (RBM) suggested client-side action that the user can choose from the card. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedAction {

		/** Opens the user's default dialer app with the specified phone number but does not dial automatically. */
		dial?: GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDial;

		/** Opens the user's default web browser app to the specified uri If the user has an app installed that is registered as the default handler for the URL, then this app will be opened instead, and its icon will be used in the suggested action UI. */
		openUrl?: GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUri;

		/** Opaque payload that the Dialogflow receives in a user event when the user taps the suggested action. This data will be also forwarded to webhook to allow performing custom business logic. */
		postbackData?: string | null;

		/** Opens the device's location chooser so the user can pick a location to send back to the agent. */
		shareLocation?: GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocation;

		/** Text to display alongside the action. */
		text?: string | null;
	}

	/** Rich Business Messaging (RBM) suggested client-side action that the user can choose from the card. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionFormProperties {

		/** Opaque payload that the Dialogflow receives in a user event when the user taps the suggested action. This data will be also forwarded to webhook to allow performing custom business logic. */
		postbackData: FormControl<string | null | undefined>,

		/** Text to display alongside the action. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionFormProperties>({
			postbackData: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Opens the user's default dialer app with the specified phone number but does not dial automatically. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDial {

		/** Required. The phone number to fill in the default dialer app. This field should be in [E.164](https://en.wikipedia.org/wiki/E.164) format. An example of a correctly formatted phone number: +15556767888. */
		phoneNumber?: string | null;
	}

	/** Opens the user's default dialer app with the specified phone number but does not dial automatically. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDialFormProperties {

		/** Required. The phone number to fill in the default dialer app. This field should be in [E.164](https://en.wikipedia.org/wiki/E.164) format. An example of a correctly formatted phone number: +15556767888. */
		phoneNumber: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDialFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDialFormProperties>({
			phoneNumber: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Opens the user's default web browser app to the specified uri If the user has an app installed that is registered as the default handler for the URL, then this app will be opened instead, and its icon will be used in the suggested action UI. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUri {

		/** Required. The uri to open on the user device */
		uri?: string | null;
	}

	/** Opens the user's default web browser app to the specified uri If the user has an app installed that is registered as the default handler for the URL, then this app will be opened instead, and its icon will be used in the suggested action UI. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUriFormProperties {

		/** Required. The uri to open on the user device */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUriFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUriFormProperties>({
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Opens the device's location chooser so the user can pick a location to send back to the agent. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocation {
	}

	/** Opens the device's location chooser so the user can pick a location to send back to the agent. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocationFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocationFormProperties>({
		});

	}


	/** Rich Business Messaging (RBM) suggested reply that the user can click instead of typing in their own response. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReply {

		/** Opaque payload that the Dialogflow receives in a user event when the user taps the suggested reply. This data will be also forwarded to webhook to allow performing custom business logic. */
		postbackData?: string | null;

		/** Suggested reply text. */
		text?: string | null;
	}

	/** Rich Business Messaging (RBM) suggested reply that the user can click instead of typing in their own response. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReplyFormProperties {

		/** Opaque payload that the Dialogflow receives in a user event when the user taps the suggested reply. This data will be also forwarded to webhook to allow performing custom business logic. */
		postbackData: FormControl<string | null | undefined>,

		/** Suggested reply text. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReplyFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReplyFormProperties>({
			postbackData: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCardCardWidth { CARD_WIDTH_UNSPECIFIED = 0, SMALL = 1, MEDIUM = 2 }


	/** Standalone Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. You can group multiple rich cards into one using RbmCarouselCard but carousel cards will give you less control over the card layout. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCard {

		/** Rich Business Messaging (RBM) Card content */
		cardContent?: GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent;

		/** Required. Orientation of the card. */
		cardOrientation?: GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardCardOrientation | null;

		/** Required if orientation is horizontal. Image preview alignment for standalone cards with horizontal layout. */
		thumbnailImageAlignment?: GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardThumbnailImageAlignment | null;
	}

	/** Standalone Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. You can group multiple rich cards into one using RbmCarouselCard but carousel cards will give you less control over the card layout. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardFormProperties {

		/** Required. Orientation of the card. */
		cardOrientation: FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardCardOrientation | null | undefined>,

		/** Required if orientation is horizontal. Image preview alignment for standalone cards with horizontal layout. */
		thumbnailImageAlignment: FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardThumbnailImageAlignment | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardFormProperties>({
			cardOrientation: new FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardCardOrientation | null | undefined>(undefined),
			thumbnailImageAlignment: new FormControl<GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardThumbnailImageAlignment | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardCardOrientation { CARD_ORIENTATION_UNSPECIFIED = 0, HORIZONTAL = 1, VERTICAL = 2 }

	export enum GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCardThumbnailImageAlignment { THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED = 0, LEFT = 1, RIGHT = 2 }


	/** Rich Business Messaging (RBM) text response with suggestions. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmText {

		/** Optional. One or more suggestions to show to the user. */
		rbmSuggestion?: Array<GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestion>;

		/** Required. Text sent and displayed to the user. */
		text?: string | null;
	}

	/** Rich Business Messaging (RBM) text response with suggestions. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageRbmTextFormProperties {

		/** Required. Text sent and displayed to the user. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageRbmTextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageRbmTextFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSimpleResponses {

		/** Required. The list of simple responses. */
		simpleResponses?: Array<GoogleCloudDialogflowV2beta1IntentMessageSimpleResponse>;
	}

	/** The collection of simple response candidates. This message in `QueryResult.fulfillment_messages` and `WebhookResponse.fulfillment_messages` should contain only one `SimpleResponse`. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSimpleResponsesFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageSimpleResponsesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageSimpleResponsesFormProperties>({
		});

	}


	/** The simple response message containing speech or text. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSimpleResponse {

		/** Optional. The text to display. */
		displayText?: string | null;

		/** One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech. */
		ssml?: string | null;

		/** One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml. */
		textToSpeech?: string | null;
	}

	/** The simple response message containing speech or text. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSimpleResponseFormProperties {

		/** Optional. The text to display. */
		displayText: FormControl<string | null | undefined>,

		/** One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech. */
		ssml: FormControl<string | null | undefined>,

		/** One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml. */
		textToSpeech: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageSimpleResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageSimpleResponseFormProperties>({
			displayText: new FormControl<string | null | undefined>(undefined),
			ssml: new FormControl<string | null | undefined>(undefined),
			textToSpeech: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The collection of suggestions. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSuggestions {

		/** Required. The list of suggested replies. */
		suggestions?: Array<GoogleCloudDialogflowV2beta1IntentMessageSuggestion>;
	}

	/** The collection of suggestions. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSuggestionsFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageSuggestionsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageSuggestionsFormProperties>({
		});

	}


	/** The suggestion chip message that the user can tap to quickly post a reply to the conversation. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSuggestion {

		/** Required. The text shown the in the suggestion chip. */
		title?: string | null;
	}

	/** The suggestion chip message that the user can tap to quickly post a reply to the conversation. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageSuggestionFormProperties {

		/** Required. The text shown the in the suggestion chip. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageSuggestionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageSuggestionFormProperties>({
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Table card for Actions on Google. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTableCard {

		/** Optional. List of buttons for the card. */
		buttons?: Array<GoogleCloudDialogflowV2beta1IntentMessageBasicCardButton>;

		/** Optional. Display properties for the columns in this table. */
		columnProperties?: Array<GoogleCloudDialogflowV2beta1IntentMessageColumnProperties>;

		/** The image response message. */
		image?: GoogleCloudDialogflowV2beta1IntentMessageImage;

		/** Optional. Rows in this table of data. */
		rows?: Array<GoogleCloudDialogflowV2beta1IntentMessageTableCardRow>;

		/** Optional. Subtitle to the title. */
		subtitle?: string | null;

		/** Required. Title of the card. */
		title?: string | null;
	}

	/** Table card for Actions on Google. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardFormProperties {

		/** Optional. Subtitle to the title. */
		subtitle: FormControl<string | null | undefined>,

		/** Required. Title of the card. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageTableCardFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageTableCardFormProperties>({
			subtitle: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Column properties for TableCard. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageColumnProperties {

		/** Required. Column heading. */
		header?: string | null;

		/** Optional. Defines text alignment for all cells in this column. */
		horizontalAlignment?: GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment | null;
	}

	/** Column properties for TableCard. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageColumnPropertiesFormProperties {

		/** Required. Column heading. */
		header: FormControl<string | null | undefined>,

		/** Optional. Defines text alignment for all cells in this column. */
		horizontalAlignment: FormControl<GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageColumnPropertiesFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageColumnPropertiesFormProperties>({
			header: new FormControl<string | null | undefined>(undefined),
			horizontalAlignment: new FormControl<GoogleCloudDialogflowV2IntentMessageColumnPropertiesHorizontalAlignment | null | undefined>(undefined),
		});

	}


	/** Row of TableCard. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardRow {

		/** Optional. List of cells that make up this row. */
		cells?: Array<GoogleCloudDialogflowV2beta1IntentMessageTableCardCell>;

		/** Optional. Whether to add a visual divider after this row. */
		dividerAfter?: boolean | null;
	}

	/** Row of TableCard. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardRowFormProperties {

		/** Optional. Whether to add a visual divider after this row. */
		dividerAfter: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageTableCardRowFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageTableCardRowFormProperties>({
			dividerAfter: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Cell of TableCardRow. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardCell {

		/** Required. Text in this cell. */
		text?: string | null;
	}

	/** Cell of TableCardRow. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTableCardCellFormProperties {

		/** Required. Text in this cell. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageTableCardCellFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageTableCardCellFormProperties>({
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Plays audio from a file in Telephony Gateway. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudio {

		/** Required. URI to a Google Cloud Storage object containing the audio to play, e.g., "gs://bucket/object". The object must contain a single channel (mono) of linear PCM audio (2 bytes / sample) at 8kHz. This object must be readable by the `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` service account where is the number of the Telephony Gateway project (usually the same as the Dialogflow agent project). If the Google Cloud Storage bucket is in the Telephony Gateway project, this permission is added by default when enabling the Dialogflow V2 API. For audio from other sources, consider using the `TelephonySynthesizeSpeech` message with SSML. */
		audioUri?: string | null;
	}

	/** Plays audio from a file in Telephony Gateway. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudioFormProperties {

		/** Required. URI to a Google Cloud Storage object containing the audio to play, e.g., "gs://bucket/object". The object must contain a single channel (mono) of linear PCM audio (2 bytes / sample) at 8kHz. This object must be readable by the `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` service account where is the number of the Telephony Gateway project (usually the same as the Dialogflow agent project). If the Google Cloud Storage bucket is in the Telephony Gateway project, this permission is added by default when enabling the Dialogflow V2 API. For audio from other sources, consider using the `TelephonySynthesizeSpeech` message with SSML. */
		audioUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudioFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudioFormProperties>({
			audioUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Synthesizes speech and plays back the synthesized audio to the caller in Telephony Gateway. Telephony Gateway takes the synthesizer settings from `DetectIntentResponse.output_audio_config` which can either be set at request-level or can come from the agent-level synthesizer config. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeech {

		/** The SSML to be synthesized. For more information, see [SSML](https://developers.google.com/actions/reference/ssml). */
		ssml?: string | null;

		/** The raw text to be synthesized. */
		text?: string | null;
	}

	/** Synthesizes speech and plays back the synthesized audio to the caller in Telephony Gateway. Telephony Gateway takes the synthesizer settings from `DetectIntentResponse.output_audio_config` which can either be set at request-level or can come from the agent-level synthesizer config. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeechFormProperties {

		/** The SSML to be synthesized. For more information, see [SSML](https://developers.google.com/actions/reference/ssml). */
		ssml: FormControl<string | null | undefined>,

		/** The raw text to be synthesized. */
		text: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeechFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeechFormProperties>({
			ssml: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Transfers the call in Telephony Gateway. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCall {

		/** Required. The phone number to transfer the call to in [E.164 format](https://en.wikipedia.org/wiki/E.164). We currently only allow transferring to US numbers (+1xxxyyyzzzz). */
		phoneNumber?: string | null;
	}

	/** Transfers the call in Telephony Gateway. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCallFormProperties {

		/** Required. The phone number to transfer the call to in [E.164 format](https://en.wikipedia.org/wiki/E.164). We currently only allow transferring to US numbers (+1xxxyyyzzzz). */
		phoneNumber: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCallFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCallFormProperties>({
			phoneNumber: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The text response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageText {

		/** Optional. The collection of the agent's responses. */
		text?: Array<string>;
	}

	/** The text response message. */
	export interface GoogleCloudDialogflowV2beta1IntentMessageTextFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentMessageTextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentMessageTextFormProperties>({
		});

	}


	/** Dialogflow contexts are similar to natural language context. If a person says to you "they are orange", you need context in order to understand what "they" is referring to. Similarly, for Dialogflow to handle an end-user expression like that, it needs to be provided with context in order to correctly match an intent. Using contexts, you can control the flow of a conversation. You can configure contexts for an intent by setting input and output contexts, which are identified by string names. When an intent is matched, any configured output contexts for that intent become active. While any contexts are active, Dialogflow is more likely to match intents that are configured with input contexts that correspond to the currently active contexts. For more information about context, see the [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview). */
	export interface GoogleCloudDialogflowV2beta1Context {

		/** Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries. */
		lifespanCount?: number | null;

		/** Required. The unique identifier of the context. Supported formats: - `projects//agent/sessions//contexts/`, - `projects//locations//agent/sessions//contexts/`, - `projects//agent/environments//users//sessions//contexts/`, - `projects//locations//agent/environments//users//sessions//contexts/`, The `Context ID` is always converted to lowercase, may only contain characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size` */
		name?: string | null;

		/** Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters?: {[id: string]: any };
	}

	/** Dialogflow contexts are similar to natural language context. If a person says to you "they are orange", you need context in order to understand what "they" is referring to. Similarly, for Dialogflow to handle an end-user expression like that, it needs to be provided with context in order to correctly match an intent. Using contexts, you can control the flow of a conversation. You can configure contexts for an intent by setting input and output contexts, which are identified by string names. When an intent is matched, any configured output contexts for that intent become active. While any contexts are active, Dialogflow is more likely to match intents that are configured with input contexts that correspond to the currently active contexts. For more information about context, see the [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview). */
	export interface GoogleCloudDialogflowV2beta1ContextFormProperties {

		/** Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries. */
		lifespanCount: FormControl<number | null | undefined>,

		/** Required. The unique identifier of the context. Supported formats: - `projects//agent/sessions//contexts/`, - `projects//locations//agent/sessions//contexts/`, - `projects//agent/environments//users//sessions//contexts/`, - `projects//locations//agent/environments//users//sessions//contexts/`, The `Context ID` is always converted to lowercase, may only contain characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size` */
		name: FormControl<string | null | undefined>,

		/** Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1ContextFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1ContextFormProperties>({
			lifespanCount: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** Represents intent parameters. */
	export interface GoogleCloudDialogflowV2beta1IntentParameter {

		/** Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`. */
		defaultValue?: string | null;

		/** Required. The name of the parameter. */
		displayName?: string | null;

		/** Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided. */
		entityTypeDisplayName?: string | null;

		/** Optional. Indicates whether the parameter represents a list of values. */
		isList?: boolean | null;

		/** Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value. */
		mandatory?: boolean | null;

		/** The unique identifier of this parameter. */
		name?: string | null;

		/** Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter. */
		prompts?: Array<string>;

		/** Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`. */
		value?: string | null;
	}

	/** Represents intent parameters. */
	export interface GoogleCloudDialogflowV2beta1IntentParameterFormProperties {

		/** Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`. */
		defaultValue: FormControl<string | null | undefined>,

		/** Required. The name of the parameter. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided. */
		entityTypeDisplayName: FormControl<string | null | undefined>,

		/** Optional. Indicates whether the parameter represents a list of values. */
		isList: FormControl<boolean | null | undefined>,

		/** Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value. */
		mandatory: FormControl<boolean | null | undefined>,

		/** The unique identifier of this parameter. */
		name: FormControl<string | null | undefined>,

		/** Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentParameterFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentParameterFormProperties>({
			defaultValue: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			entityTypeDisplayName: new FormControl<string | null | undefined>(undefined),
			isList: new FormControl<boolean | null | undefined>(undefined),
			mandatory: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an example that the agent is trained on. */
	export interface GoogleCloudDialogflowV2beta1IntentTrainingPhrase {

		/** Output only. The unique identifier of this training phrase. */
		name?: string | null;

		/** Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set. */
		parts?: Array<GoogleCloudDialogflowV2beta1IntentTrainingPhrasePart>;

		/** Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased. */
		timesAddedCount?: number | null;

		/** Required. The type of the training phrase. */
		type?: GoogleCloudDialogflowV2IntentTrainingPhraseType | null;
	}

	/** Represents an example that the agent is trained on. */
	export interface GoogleCloudDialogflowV2beta1IntentTrainingPhraseFormProperties {

		/** Output only. The unique identifier of this training phrase. */
		name: FormControl<string | null | undefined>,

		/** Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased. */
		timesAddedCount: FormControl<number | null | undefined>,

		/** Required. The type of the training phrase. */
		type: FormControl<GoogleCloudDialogflowV2IntentTrainingPhraseType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentTrainingPhraseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentTrainingPhraseFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			timesAddedCount: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<GoogleCloudDialogflowV2IntentTrainingPhraseType | null | undefined>(undefined),
		});

	}


	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowV2beta1IntentTrainingPhrasePart {

		/** Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase. */
		alias?: string | null;

		/** Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase. */
		entityType?: string | null;

		/** Required. The text for this part. */
		text?: string | null;

		/** Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true. */
		userDefined?: boolean | null;
	}

	/** Represents a part of a training phrase. */
	export interface GoogleCloudDialogflowV2beta1IntentTrainingPhrasePartFormProperties {

		/** Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase. */
		alias: FormControl<string | null | undefined>,

		/** Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase. */
		entityType: FormControl<string | null | undefined>,

		/** Required. The text for this part. */
		text: FormControl<string | null | undefined>,

		/** Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true. */
		userDefined: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentTrainingPhrasePartFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentTrainingPhrasePartFormProperties>({
			alias: new FormControl<string | null | undefined>(undefined),
			entityType: new FormControl<string | null | undefined>(undefined),
			text: new FormControl<string | null | undefined>(undefined),
			userDefined: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Metadata for a ConversationProfile.ClearSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadata {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile?: string | null;

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime?: string | null;

		/** Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Required. The type of the suggestion feature to remove. */
		suggestionFeatureType?: GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null;
	}

	/** Metadata for a ConversationProfile.ClearSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataFormProperties {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile: FormControl<string | null | undefined>,

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,

		/** Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Required. The type of the suggestion feature to remove. */
		suggestionFeatureType: FormControl<GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataFormProperties>({
			conversationProfile: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			suggestionFeatureType: new FormControl<GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType { TYPE_UNSPECIFIED = 0, ARTICLE_SUGGESTION = 1, FAQ = 2, SMART_REPLY = 3, DIALOGFLOW_ASSIST = 4, CONVERSATION_SUMMARIZATION = 5, KNOWLEDGE_SEARCH = 6 }


	/** Represents a notification sent to Pub/Sub subscribers for conversation lifecycle events. */
	export interface GoogleCloudDialogflowV2beta1ConversationEvent {

		/** Required. The unique identifier of the conversation this notification refers to. Format: `projects//conversations/`. */
		conversation?: string | null;

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		errorStatus?: GoogleRpcStatus;

		/** Represents a message posted into a conversation. */
		newMessagePayload?: GoogleCloudDialogflowV2beta1Message;

		/** Required. The type of the event that this notification refers to. */
		type?: GoogleCloudDialogflowV2ConversationEventType | null;
	}

	/** Represents a notification sent to Pub/Sub subscribers for conversation lifecycle events. */
	export interface GoogleCloudDialogflowV2beta1ConversationEventFormProperties {

		/** Required. The unique identifier of the conversation this notification refers to. Format: `projects//conversations/`. */
		conversation: FormControl<string | null | undefined>,

		/** Required. The type of the event that this notification refers to. */
		type: FormControl<GoogleCloudDialogflowV2ConversationEventType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1ConversationEventFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1ConversationEventFormProperties>({
			conversation: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GoogleCloudDialogflowV2ConversationEventType | null | undefined>(undefined),
		});

	}


	/** Represents a message posted into a conversation. */
	export interface GoogleCloudDialogflowV2beta1Message {

		/** Required. The message content. */
		content?: string | null;

		/** Output only. The time when the message was created in Contact Center AI. */
		createTime?: string | null;

		/** Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode?: string | null;

		/** Represents the result of annotation for the message. */
		messageAnnotation?: GoogleCloudDialogflowV2beta1MessageAnnotation;

		/** Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`. */
		name?: string | null;

		/** Output only. The participant that sends this message. */
		participant?: string | null;

		/** Output only. The role of the participant. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Optional. The time when the message was sent. */
		sendTime?: string | null;

		/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
		sentimentAnalysis?: GoogleCloudDialogflowV2beta1SentimentAnalysisResult;
	}

	/** Represents a message posted into a conversation. */
	export interface GoogleCloudDialogflowV2beta1MessageFormProperties {

		/** Required. The message content. */
		content: FormControl<string | null | undefined>,

		/** Output only. The time when the message was created in Contact Center AI. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". */
		languageCode: FormControl<string | null | undefined>,

		/** Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`. */
		name: FormControl<string | null | undefined>,

		/** Output only. The participant that sends this message. */
		participant: FormControl<string | null | undefined>,

		/** Output only. The role of the participant. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Optional. The time when the message was sent. */
		sendTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1MessageFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1MessageFormProperties>({
			content: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			participant: new FormControl<string | null | undefined>(undefined),
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			sendTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the result of annotation for the message. */
	export interface GoogleCloudDialogflowV2beta1MessageAnnotation {

		/** Required. Indicates whether the text message contains entities. */
		containEntities?: boolean | null;

		/** Optional. The collection of annotated message parts ordered by their position in the message. You can recover the annotated message by concatenating [AnnotatedMessagePart.text]. */
		parts?: Array<GoogleCloudDialogflowV2beta1AnnotatedMessagePart>;
	}

	/** Represents the result of annotation for the message. */
	export interface GoogleCloudDialogflowV2beta1MessageAnnotationFormProperties {

		/** Required. Indicates whether the text message contains entities. */
		containEntities: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1MessageAnnotationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1MessageAnnotationFormProperties>({
			containEntities: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
	export interface GoogleCloudDialogflowV2beta1SentimentAnalysisResult {

		/** The sentiment, such as positive/negative feeling or association, for a unit of analysis, such as the query text. See: https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values for how to interpret the result. */
		queryTextSentiment?: GoogleCloudDialogflowV2beta1Sentiment;
	}

	/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
	export interface GoogleCloudDialogflowV2beta1SentimentAnalysisResultFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1SentimentAnalysisResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SentimentAnalysisResultFormProperties>({
		});

	}


	/** The sentiment, such as positive/negative feeling or association, for a unit of analysis, such as the query text. See: https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values for how to interpret the result. */
	export interface GoogleCloudDialogflowV2beta1Sentiment {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude?: number | null;

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score?: number | null;
	}

	/** The sentiment, such as positive/negative feeling or association, for a unit of analysis, such as the query text. See: https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values for how to interpret the result. */
	export interface GoogleCloudDialogflowV2beta1SentimentFormProperties {

		/** A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative). */
		magnitude: FormControl<number | null | undefined>,

		/** Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment). */
		score: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SentimentFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SentimentFormProperties>({
			magnitude: new FormControl<number | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a Dialogflow assist answer. */
	export interface GoogleCloudDialogflowV2beta1DialogflowAssistAnswer {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** Represents an intent suggestion. */
		intentSuggestion?: GoogleCloudDialogflowV2beta1IntentSuggestion;

		/** Represents the result of conversational query or event processing. */
		queryResult?: GoogleCloudDialogflowV2beta1QueryResult;
	}

	/** Represents a Dialogflow assist answer. */
	export interface GoogleCloudDialogflowV2beta1DialogflowAssistAnswerFormProperties {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1DialogflowAssistAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1DialogflowAssistAnswerFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents an intent suggestion. */
	export interface GoogleCloudDialogflowV2beta1IntentSuggestion {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description?: string | null;

		/** The display name of the intent. */
		displayName?: string | null;

		/** The unique identifier of this intent. Format: `projects//locations//agent/intents/`. */
		intentV2?: string | null;
	}

	/** Represents an intent suggestion. */
	export interface GoogleCloudDialogflowV2beta1IntentSuggestionFormProperties {

		/** Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters. */
		description: FormControl<string | null | undefined>,

		/** The display name of the intent. */
		displayName: FormControl<string | null | undefined>,

		/** The unique identifier of this intent. Format: `projects//locations//agent/intents/`. */
		intentV2: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1IntentSuggestionFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1IntentSuggestionFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			intentV2: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the result of conversational query or event processing. */
	export interface GoogleCloudDialogflowV2beta1QueryResult {

		/** The action name from the matched intent. */
		action?: string | null;

		/** This field is set to: - `false` if the matched intent has required parameters and not all of the required parameter values have been collected. - `true` if all required parameter values have been collected, or if the matched intent doesn't contain any required parameters. */
		allRequiredParamsPresent?: boolean | null;

		/** Indicates whether the conversational query triggers a cancellation for slot filling. For more information, see the [cancel slot filling documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel). */
		cancelsSlotFilling?: boolean | null;

		/** Free-form diagnostic information for the associated detect intent request. The fields of this data can change without notice, so you should not write code that depends on its structure. The data may contain: - webhook call latency - webhook errors */
		diagnosticInfo?: {[id: string]: any };

		/** The collection of rich messages to present to the user. */
		fulfillmentMessages?: Array<GoogleCloudDialogflowV2beta1IntentMessage>;

		/** The text to be pronounced to the user or shown on the screen. Note: This is a legacy field, `fulfillment_messages` should be preferred. */
		fulfillmentText?: string | null;

		/** An intent categorizes an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation. When an end-user writes or says something, referred to as an end-user expression or end-user input, Dialogflow matches the end-user input to the best intent in your agent. Matching an intent is also known as intent classification. For more information, see the [intent guide](https://cloud.google.com/dialogflow/docs/intents-overview). */
		intent?: GoogleCloudDialogflowV2beta1Intent;

		/** The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. If there are `multiple knowledge_answers` messages, this value is set to the greatest `knowledgeAnswers.match_confidence` value in the list. */
		intentDetectionConfidence?: number | null;

		/** Represents the result of querying a Knowledge base. */
		knowledgeAnswers?: GoogleCloudDialogflowV2beta1KnowledgeAnswers;

		/** The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. */
		languageCode?: string | null;

		/** The collection of output contexts. If applicable, `output_contexts.parameters` contains entries with name `.original` containing the original parameter values before the query. */
		outputContexts?: Array<GoogleCloudDialogflowV2beta1Context>;

		/** The collection of extracted parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters?: {[id: string]: any };

		/** The original conversational query text: - If natural language text was provided as input, `query_text` contains a copy of the input. - If natural language speech audio was provided as input, `query_text` contains the speech recognition result. If speech recognizer produced multiple alternatives, a particular one is picked. - If automatic spell correction is enabled, `query_text` will contain the corrected user input. */
		queryText?: string | null;

		/** The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. For Participants.DetectIntent, it needs to be configured in DetectIntentRequest.query_params. For Participants.StreamingDetectIntent, it needs to be configured in StreamingDetectIntentRequest.query_params. And for Participants.AnalyzeContent and Participants.StreamingAnalyzeContent, it needs to be configured in ConversationProfile.human_agent_assistant_config */
		sentimentAnalysisResult?: GoogleCloudDialogflowV2beta1SentimentAnalysisResult;

		/** The Speech recognition confidence between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. The default of 0.0 is a sentinel value indicating that confidence was not set. This field is not guaranteed to be accurate or set. In particular this field isn't set for StreamingDetectIntent since the streaming endpoint has separate confidence estimates per portion of the audio in StreamingRecognitionResult. */
		speechRecognitionConfidence?: number | null;

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `payload` field returned in the webhook response. */
		webhookPayload?: {[id: string]: any };

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `source` field returned in the webhook response. */
		webhookSource?: string | null;
	}

	/** Represents the result of conversational query or event processing. */
	export interface GoogleCloudDialogflowV2beta1QueryResultFormProperties {

		/** The action name from the matched intent. */
		action: FormControl<string | null | undefined>,

		/** This field is set to: - `false` if the matched intent has required parameters and not all of the required parameter values have been collected. - `true` if all required parameter values have been collected, or if the matched intent doesn't contain any required parameters. */
		allRequiredParamsPresent: FormControl<boolean | null | undefined>,

		/** Indicates whether the conversational query triggers a cancellation for slot filling. For more information, see the [cancel slot filling documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel). */
		cancelsSlotFilling: FormControl<boolean | null | undefined>,

		/** Free-form diagnostic information for the associated detect intent request. The fields of this data can change without notice, so you should not write code that depends on its structure. The data may contain: - webhook call latency - webhook errors */
		diagnosticInfo: FormControl<{[id: string]: any } | null | undefined>,

		/** The text to be pronounced to the user or shown on the screen. Note: This is a legacy field, `fulfillment_messages` should be preferred. */
		fulfillmentText: FormControl<string | null | undefined>,

		/** The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. If there are `multiple knowledge_answers` messages, this value is set to the greatest `knowledgeAnswers.match_confidence` value in the list. */
		intentDetectionConfidence: FormControl<number | null | undefined>,

		/** The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. */
		languageCode: FormControl<string | null | undefined>,

		/** The collection of extracted parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,

		/** The original conversational query text: - If natural language text was provided as input, `query_text` contains a copy of the input. - If natural language speech audio was provided as input, `query_text` contains the speech recognition result. If speech recognizer produced multiple alternatives, a particular one is picked. - If automatic spell correction is enabled, `query_text` will contain the corrected user input. */
		queryText: FormControl<string | null | undefined>,

		/** The Speech recognition confidence between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. The default of 0.0 is a sentinel value indicating that confidence was not set. This field is not guaranteed to be accurate or set. In particular this field isn't set for StreamingDetectIntent since the streaming endpoint has separate confidence estimates per portion of the audio in StreamingRecognitionResult. */
		speechRecognitionConfidence: FormControl<number | null | undefined>,

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `payload` field returned in the webhook response. */
		webhookPayload: FormControl<{[id: string]: any } | null | undefined>,

		/** If the query was fulfilled by a webhook call, this field is set to the value of the `source` field returned in the webhook response. */
		webhookSource: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1QueryResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1QueryResultFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			allRequiredParamsPresent: new FormControl<boolean | null | undefined>(undefined),
			cancelsSlotFilling: new FormControl<boolean | null | undefined>(undefined),
			diagnosticInfo: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			fulfillmentText: new FormControl<string | null | undefined>(undefined),
			intentDetectionConfidence: new FormControl<number | null | undefined>(undefined),
			languageCode: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			queryText: new FormControl<string | null | undefined>(undefined),
			speechRecognitionConfidence: new FormControl<number | null | undefined>(undefined),
			webhookPayload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			webhookSource: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the result of querying a Knowledge base. */
	export interface GoogleCloudDialogflowV2beta1KnowledgeAnswers {

		/** A list of answers from Knowledge Connector. */
		answers?: Array<GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswer>;
	}

	/** Represents the result of querying a Knowledge base. */
	export interface GoogleCloudDialogflowV2beta1KnowledgeAnswersFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1KnowledgeAnswersFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1KnowledgeAnswersFormProperties>({
		});

	}


	/** An answer from Knowledge Connector. */
	export interface GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswer {

		/** The piece of text from the `source` knowledge base document that answers this conversational query. */
		answer?: string | null;

		/** The corresponding FAQ question if the answer was extracted from a FAQ Document, empty otherwise. */
		faqQuestion?: string | null;

		/** The system's confidence score that this Knowledge answer is a good match for this conversational query. The range is from 0.0 (completely uncertain) to 1.0 (completely certain). Note: The confidence score is likely to vary somewhat (possibly even for identical requests), as the underlying model is under constant improvement. It may be deprecated in the future. We recommend using `match_confidence_level` which should be generally more stable. */
		matchConfidence?: number | null;

		/** The system's confidence level that this knowledge answer is a good match for this conversational query. NOTE: The confidence level for a given `` pair may change without notice, as it depends on models that are constantly being improved. However, it will change less frequently than the confidence score below, and should be preferred for referencing the quality of an answer. */
		matchConfidenceLevel?: GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswerMatchConfidenceLevel | null;

		/** Indicates which Knowledge Document this answer was extracted from. Format: `projects//knowledgeBases//documents/`. */
		source?: string | null;
	}

	/** An answer from Knowledge Connector. */
	export interface GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswerFormProperties {

		/** The piece of text from the `source` knowledge base document that answers this conversational query. */
		answer: FormControl<string | null | undefined>,

		/** The corresponding FAQ question if the answer was extracted from a FAQ Document, empty otherwise. */
		faqQuestion: FormControl<string | null | undefined>,

		/** The system's confidence score that this Knowledge answer is a good match for this conversational query. The range is from 0.0 (completely uncertain) to 1.0 (completely certain). Note: The confidence score is likely to vary somewhat (possibly even for identical requests), as the underlying model is under constant improvement. It may be deprecated in the future. We recommend using `match_confidence_level` which should be generally more stable. */
		matchConfidence: FormControl<number | null | undefined>,

		/** The system's confidence level that this knowledge answer is a good match for this conversational query. NOTE: The confidence level for a given `` pair may change without notice, as it depends on models that are constantly being improved. However, it will change less frequently than the confidence score below, and should be preferred for referencing the quality of an answer. */
		matchConfidenceLevel: FormControl<GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswerMatchConfidenceLevel | null | undefined>,

		/** Indicates which Knowledge Document this answer was extracted from. Format: `projects//knowledgeBases//documents/`. */
		source: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1KnowledgeAnswersAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswerFormProperties>({
			answer: new FormControl<string | null | undefined>(undefined),
			faqQuestion: new FormControl<string | null | undefined>(undefined),
			matchConfidence: new FormControl<number | null | undefined>(undefined),
			matchConfidenceLevel: new FormControl<GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswerMatchConfidenceLevel | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswerMatchConfidenceLevel { MATCH_CONFIDENCE_LEVEL_UNSPECIFIED = 0, LOW = 1, MEDIUM = 2, HIGH = 3 }


	/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
	export interface GoogleCloudDialogflowV2beta1EventInput {

		/** Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request. */
		languageCode?: string | null;

		/** Required. The unique identifier of the event. */
		name?: string | null;

		/** The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters?: {[id: string]: any };
	}

	/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
	export interface GoogleCloudDialogflowV2beta1EventInputFormProperties {

		/** Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request. */
		languageCode: FormControl<string | null | undefined>,

		/** Required. The unique identifier of the event. */
		name: FormControl<string | null | undefined>,

		/** The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value. */
		parameters: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1EventInputFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1EventInputFormProperties>({
			languageCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			parameters: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowV2beta1ExportAgentResponse {

		/** Zip compressed raw byte content for agent. */
		agentContent?: string | null;

		/** The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in `ExportAgentRequest`. */
		agentUri?: string | null;
	}

	/** The response message for Agents.ExportAgent. */
	export interface GoogleCloudDialogflowV2beta1ExportAgentResponseFormProperties {

		/** Zip compressed raw byte content for agent. */
		agentContent: FormControl<string | null | undefined>,

		/** The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in `ExportAgentRequest`. */
		agentUri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1ExportAgentResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1ExportAgentResponseFormProperties>({
			agentContent: new FormControl<string | null | undefined>(undefined),
			agentUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata related to the Export Data Operations (e.g. ExportDocument). */
	export interface GoogleCloudDialogflowV2beta1ExportOperationMetadata {

		/** Google Cloud Storage location for the output. */
		exportedGcsDestination?: GoogleCloudDialogflowV2beta1GcsDestination;
	}

	/** Metadata related to the Export Data Operations (e.g. ExportDocument). */
	export interface GoogleCloudDialogflowV2beta1ExportOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1ExportOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1ExportOperationMetadataFormProperties>({
		});

	}


	/** Google Cloud Storage location for the output. */
	export interface GoogleCloudDialogflowV2beta1GcsDestination {

		/** Required. The Google Cloud Storage URIs for the output. A URI is of the form: `gs://bucket/object-prefix-or-name` Whether a prefix or name is used depends on the use case. The requesting user must have "write-permission" to the bucket. */
		uri?: string | null;
	}

	/** Google Cloud Storage location for the output. */
	export interface GoogleCloudDialogflowV2beta1GcsDestinationFormProperties {

		/** Required. The Google Cloud Storage URIs for the output. A URI is of the form: `gs://bucket/object-prefix-or-name` Whether a prefix or name is used depends on the use case. The requesting user must have "write-permission" to the bucket. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1GcsDestinationFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1GcsDestinationFormProperties>({
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents answer from "frequently asked questions". */
	export interface GoogleCloudDialogflowV2beta1FaqAnswer {

		/** The piece of text from the `source` knowledge base document. */
		answer?: string | null;

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** The system's confidence score that this Knowledge answer is a good match for this conversational query, range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence?: number | null;

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata?: {[id: string]: string };

		/** The corresponding FAQ question. */
		question?: string | null;

		/** Indicates which Knowledge Document this answer was extracted from. Format: `projects//locations//agent/knowledgeBases//documents/`. */
		source?: string | null;
	}

	/** Represents answer from "frequently asked questions". */
	export interface GoogleCloudDialogflowV2beta1FaqAnswerFormProperties {

		/** The piece of text from the `source` knowledge base document. */
		answer: FormControl<string | null | undefined>,

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,

		/** The system's confidence score that this Knowledge answer is a good match for this conversational query, range from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence: FormControl<number | null | undefined>,

		/** A map that contains metadata about the answer and the document from which it originates. */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/** The corresponding FAQ question. */
		question: FormControl<string | null | undefined>,

		/** Indicates which Knowledge Document this answer was extracted from. Format: `projects//locations//agent/knowledgeBases//documents/`. */
		source: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1FaqAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1FaqAnswerFormProperties>({
			answer: new FormControl<string | null | undefined>(undefined),
			answerRecord: new FormControl<string | null | undefined>(undefined),
			confidence: new FormControl<number | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			question: new FormControl<string | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Output only. Represents a notification sent to Pub/Sub subscribers for agent assistant events in a specific conversation. */
	export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantEvent {

		/** The conversation this notification refers to. Format: `projects//conversations/`. */
		conversation?: string | null;

		/** The participant that the suggestion is compiled for. And This field is used to call Participants.ListSuggestions API. Format: `projects//conversations//participants/`. It will not be set in legacy workflow. HumanAgentAssistantConfig.name for more information. */
		participant?: string | null;

		/** The suggestion results payload that this notification refers to. It will only be set when HumanAgentAssistantConfig.SuggestionConfig.group_suggestion_responses sets to true. */
		suggestionResults?: Array<GoogleCloudDialogflowV2beta1SuggestionResult>;
	}

	/** Output only. Represents a notification sent to Pub/Sub subscribers for agent assistant events in a specific conversation. */
	export interface GoogleCloudDialogflowV2beta1HumanAgentAssistantEventFormProperties {

		/** The conversation this notification refers to. Format: `projects//conversations/`. */
		conversation: FormControl<string | null | undefined>,

		/** The participant that the suggestion is compiled for. And This field is used to call Participants.ListSuggestions API. Format: `projects//conversations//participants/`. It will not be set in legacy workflow. HumanAgentAssistantConfig.name for more information. */
		participant: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1HumanAgentAssistantEventFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1HumanAgentAssistantEventFormProperties>({
			conversation: new FormControl<string | null | undefined>(undefined),
			participant: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** One response of different type of suggestion response which is used in the response of Participants.AnalyzeContent and Participants.AnalyzeContent, as well as HumanAgentAssistantEvent. */
	export interface GoogleCloudDialogflowV2beta1SuggestionResult {

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		error?: GoogleRpcStatus;

		/** The response message for Participants.SuggestArticles. */
		suggestArticlesResponse?: GoogleCloudDialogflowV2beta1SuggestArticlesResponse;

		/** The response message for Participants.SuggestDialogflowAssists. */
		suggestDialogflowAssistsResponse?: GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse;

		/** The response message for Participants.SuggestDialogflowAssists. */
		suggestEntityExtractionResponse?: GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse;

		/** The request message for Participants.SuggestFaqAnswers. */
		suggestFaqAnswersResponse?: GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse;

		/** The response message for Participants.SuggestSmartReplies. */
		suggestSmartRepliesResponse?: GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse;
	}

	/** One response of different type of suggestion response which is used in the response of Participants.AnalyzeContent and Participants.AnalyzeContent, as well as HumanAgentAssistantEvent. */
	export interface GoogleCloudDialogflowV2beta1SuggestionResultFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1SuggestionResultFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SuggestionResultFormProperties>({
		});

	}


	/** The response message for Participants.SuggestArticles. */
	export interface GoogleCloudDialogflowV2beta1SuggestArticlesResponse {

		/** Output only. Articles ordered by score in descending order. */
		articleAnswers?: Array<GoogleCloudDialogflowV2beta1ArticleAnswer>;

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestArticlesResponse.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize?: number | null;

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The response message for Participants.SuggestArticles. */
	export interface GoogleCloudDialogflowV2beta1SuggestArticlesResponseFormProperties {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestArticlesResponse.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SuggestArticlesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SuggestArticlesResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Participants.SuggestDialogflowAssists. */
	export interface GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponse {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestDialogflowAssistsRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize?: number | null;

		/** Output only. Multiple reply options provided by Dialogflow assist service. The order is based on the rank of the model prediction. */
		dialogflowAssistAnswers?: Array<GoogleCloudDialogflowV2beta1DialogflowAssistAnswer>;

		/** The name of the latest conversation message used to suggest answer. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The response message for Participants.SuggestDialogflowAssists. */
	export interface GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponseFormProperties {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestDialogflowAssistsRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used to suggest answer. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SuggestDialogflowAssistsResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request message for Participants.SuggestFaqAnswers. */
	export interface GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestFaqAnswersRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize?: number | null;

		/** Output only. Answers extracted from FAQ documents. */
		faqAnswers?: Array<GoogleCloudDialogflowV2beta1FaqAnswer>;

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;
	}

	/** The request message for Participants.SuggestFaqAnswers. */
	export interface GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponseFormProperties {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestFaqAnswersRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SuggestFaqAnswersResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Participants.SuggestSmartReplies. */
	export interface GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestSmartRepliesRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize?: number | null;

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage?: string | null;

		/** Output only. Multiple reply options provided by smart reply service. The order is based on the rank of the model prediction. The maximum number of the returned replies is set in SmartReplyConfig. */
		smartReplyAnswers?: Array<GoogleCloudDialogflowV2beta1SmartReplyAnswer>;
	}

	/** The response message for Participants.SuggestSmartReplies. */
	export interface GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponseFormProperties {

		/** Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestSmartRepliesRequest.context_size field in the request if there aren't that many messages in the conversation. */
		contextSize: FormControl<number | null | undefined>,

		/** The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`. */
		latestMessage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SuggestSmartRepliesResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponseFormProperties>({
			contextSize: new FormControl<number | null | undefined>(undefined),
			latestMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a smart reply answer. */
	export interface GoogleCloudDialogflowV2beta1SmartReplyAnswer {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord?: string | null;

		/** Smart reply confidence. The system's confidence score that this reply is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence?: number | null;

		/** The content of the reply. */
		reply?: string | null;
	}

	/** Represents a smart reply answer. */
	export interface GoogleCloudDialogflowV2beta1SmartReplyAnswerFormProperties {

		/** The name of answer record, in the format of "projects//locations//answerRecords/" */
		answerRecord: FormControl<string | null | undefined>,

		/** Smart reply confidence. The system's confidence score that this reply is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain). */
		confidence: FormControl<number | null | undefined>,

		/** The content of the reply. */
		reply: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SmartReplyAnswerFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SmartReplyAnswerFormProperties>({
			answerRecord: new FormControl<string | null | undefined>(undefined),
			confidence: new FormControl<number | null | undefined>(undefined),
			reply: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV2beta1ImportDocumentsResponse {

		/** Includes details about skipped documents or any other warnings. */
		warnings?: Array<GoogleRpcStatus>;
	}

	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV2beta1ImportDocumentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowV2beta1ImportDocumentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1ImportDocumentsResponseFormProperties>({
		});

	}


	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata {

		/** Metadata related to the Export Data Operations (e.g. ExportDocument). */
		exportOperationMetadata?: GoogleCloudDialogflowV2beta1ExportOperationMetadata;

		/** The name of the knowledge base interacted with during the operation. */
		knowledgeBase?: string | null;

		/** Required. Output only. The current state of this operation. */
		state?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null;
	}

	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowV2beta1KnowledgeOperationMetadataFormProperties {

		/** The name of the knowledge base interacted with during the operation. */
		knowledgeBase: FormControl<string | null | undefined>,

		/** Required. Output only. The current state of this operation. */
		state: FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1KnowledgeOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1KnowledgeOperationMetadataFormProperties>({
			knowledgeBase: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>(undefined),
		});

	}


	/** Represents the contents of the original request that was passed to the `[Streaming]DetectIntent` call. */
	export interface GoogleCloudDialogflowV2beta1OriginalDetectIntentRequest {

		/** Optional. This field is set to the value of the `QueryParameters.payload` field passed in the request. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: { "telephony": { "caller_id": "+18558363987" } } Note: The caller ID field (`caller_id`) will be redacted for Trial Edition agents and populated with the caller ID in [E.164 format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents. */
		payload?: {[id: string]: any };

		/** The source of this request, e.g., `google`, `facebook`, `slack`. It is set by Dialogflow-owned servers. */
		source?: string | null;

		/** Optional. The version of the protocol used for this request. This field is AoG-specific. */
		version?: string | null;
	}

	/** Represents the contents of the original request that was passed to the `[Streaming]DetectIntent` call. */
	export interface GoogleCloudDialogflowV2beta1OriginalDetectIntentRequestFormProperties {

		/** Optional. This field is set to the value of the `QueryParameters.payload` field passed in the request. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: { "telephony": { "caller_id": "+18558363987" } } Note: The caller ID field (`caller_id`) will be redacted for Trial Edition agents and populated with the caller ID in [E.164 format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents. */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** The source of this request, e.g., `google`, `facebook`, `slack`. It is set by Dialogflow-owned servers. */
		source: FormControl<string | null | undefined>,

		/** Optional. The version of the protocol used for this request. This field is AoG-specific. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1OriginalDetectIntentRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1OriginalDetectIntentRequestFormProperties>({
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A session represents a conversation between a Dialogflow agent and an end-user. You can create special entities, called session entities, during a session. Session entities can extend or replace custom entity types and only exist during the session that they were created for. All session data, including session entities, is stored by Dialogflow for 20 minutes. For more information, see the [session entity guide](https://cloud.google.com/dialogflow/docs/entities-session). */
	export interface GoogleCloudDialogflowV2beta1SessionEntityType {

		/** Required. The collection of entities associated with this session entity type. */
		entities?: Array<GoogleCloudDialogflowV2beta1EntityTypeEntity>;

		/** Required. Indicates whether the additional data should override or supplement the custom entity type definition. */
		entityOverrideMode?: GoogleCloudDialogflowV2SessionEntityTypeEntityOverrideMode | null;

		/** Required. The unique identifier of this session entity type. Supported formats: - `projects//agent/sessions//entityTypes/` - `projects//locations//agent/sessions//entityTypes/` - `projects//agent/environments//users//sessions//entityTypes/` - `projects//locations//agent/environments/ /users//sessions//entityTypes/` If `Location ID` is not specified we assume default 'us' location. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. `` must be the display name of an existing entity type in the same agent that will be overridden or supplemented. */
		name?: string | null;
	}

	/** A session represents a conversation between a Dialogflow agent and an end-user. You can create special entities, called session entities, during a session. Session entities can extend or replace custom entity types and only exist during the session that they were created for. All session data, including session entities, is stored by Dialogflow for 20 minutes. For more information, see the [session entity guide](https://cloud.google.com/dialogflow/docs/entities-session). */
	export interface GoogleCloudDialogflowV2beta1SessionEntityTypeFormProperties {

		/** Required. Indicates whether the additional data should override or supplement the custom entity type definition. */
		entityOverrideMode: FormControl<GoogleCloudDialogflowV2SessionEntityTypeEntityOverrideMode | null | undefined>,

		/** Required. The unique identifier of this session entity type. Supported formats: - `projects//agent/sessions//entityTypes/` - `projects//locations//agent/sessions//entityTypes/` - `projects//agent/environments//users//sessions//entityTypes/` - `projects//locations//agent/environments/ /users//sessions//entityTypes/` If `Location ID` is not specified we assume default 'us' location. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. `` must be the display name of an existing entity type in the same agent that will be overridden or supplemented. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SessionEntityTypeFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SessionEntityTypeFormProperties>({
			entityOverrideMode: new FormControl<GoogleCloudDialogflowV2SessionEntityTypeEntityOverrideMode | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a ConversationProfile.SetSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigOperationMetadata {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile?: string | null;

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime?: string | null;

		/** Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole?: GoogleCloudDialogflowV2MessageParticipantRole | null;

		/** Required. The type of the suggestion feature to add or update. */
		suggestionFeatureType?: GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null;
	}

	/** Metadata for a ConversationProfile.SetSuggestionFeatureConfig operation. */
	export interface GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigOperationMetadataFormProperties {

		/** The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/` */
		conversationProfile: FormControl<string | null | undefined>,

		/** Timestamp whe the request was created. The time is measured on server side. */
		createTime: FormControl<string | null | undefined>,

		/** Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used. */
		participantRole: FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>,

		/** Required. The type of the suggestion feature to add or update. */
		suggestionFeatureType: FormControl<GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigOperationMetadataFormProperties>({
			conversationProfile: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			participantRole: new FormControl<GoogleCloudDialogflowV2MessageParticipantRole | null | undefined>(undefined),
			suggestionFeatureType: new FormControl<GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadataSuggestionFeatureType | null | undefined>(undefined),
		});

	}


	/** The request message for a webhook call. */
	export interface GoogleCloudDialogflowV2beta1WebhookRequest {

		/** Alternative query results from KnowledgeService. */
		alternativeQueryResults?: Array<GoogleCloudDialogflowV2beta1QueryResult>;

		/** Represents the contents of the original request that was passed to the `[Streaming]DetectIntent` call. */
		originalDetectIntentRequest?: GoogleCloudDialogflowV2beta1OriginalDetectIntentRequest;

		/** Represents the result of conversational query or event processing. */
		queryResult?: GoogleCloudDialogflowV2beta1QueryResult;

		/** The unique identifier of the response. Contains the same value as `[Streaming]DetectIntentResponse.response_id`. */
		responseId?: string | null;

		/** The unique identifier of detectIntent request session. Can be used to identify end-user inside webhook implementation. Supported formats: - `projects//agent/sessions/, - `projects//locations//agent/sessions/`, - `projects//agent/environments//users//sessions/`, - `projects//locations//agent/environments//users//sessions/`, */
		session?: string | null;
	}

	/** The request message for a webhook call. */
	export interface GoogleCloudDialogflowV2beta1WebhookRequestFormProperties {

		/** The unique identifier of the response. Contains the same value as `[Streaming]DetectIntentResponse.response_id`. */
		responseId: FormControl<string | null | undefined>,

		/** The unique identifier of detectIntent request session. Can be used to identify end-user inside webhook implementation. Supported formats: - `projects//agent/sessions/, - `projects//locations//agent/sessions/`, - `projects//agent/environments//users//sessions/`, - `projects//locations//agent/environments//users//sessions/`, */
		session: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1WebhookRequestFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1WebhookRequestFormProperties>({
			responseId: new FormControl<string | null | undefined>(undefined),
			session: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for a webhook call. This response is validated by the Dialogflow server. If validation fails, an error will be returned in the QueryResult.diagnostic_info field. Setting JSON fields to an empty value with the wrong type is a common error. To avoid this error: - Use `""` for empty strings - Use `{}` or `null` for empty objects - Use `[]` or `null` for empty arrays For more information, see the [Protocol Buffers Language Guide](https://developers.google.com/protocol-buffers/docs/proto3#json). */
	export interface GoogleCloudDialogflowV2beta1WebhookResponse {

		/** Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false. */
		endInteraction?: boolean | null;

		/** Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `"Hello #welcome_event.name! What can I do for you today?"`. */
		followupEventInput?: GoogleCloudDialogflowV2beta1EventInput;

		/** Optional. The rich response messages intended for the end-user. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_messages sent to the integration or API caller. */
		fulfillmentMessages?: Array<GoogleCloudDialogflowV2beta1IntentMessage>;

		/** Optional. The text response message intended for the end-user. It is recommended to use `fulfillment_messages.text.text[0]` instead. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_text sent to the integration or API caller. */
		fulfillmentText?: string | null;

		/** Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false. */
		liveAgentHandoff?: boolean | null;

		/** Optional. The collection of output contexts that will overwrite currently active contexts for the session and reset their lifespans. When provided, Dialogflow uses this field to populate QueryResult.output_contexts sent to the integration or API caller. */
		outputContexts?: Array<GoogleCloudDialogflowV2beta1Context>;

		/** Optional. This field can be used to pass custom data from your webhook to the integration or API caller. Arbitrary JSON objects are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_payload sent to the integration or API caller. This field is also used by the [Google Assistant integration](https://cloud.google.com/dialogflow/docs/integrations/aog) for rich response messages. See the format definition at [Google Assistant Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json) */
		payload?: {[id: string]: any };

		/** Optional. Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session. Setting this data from a webhook overwrites the session entity types that have been set using `detectIntent`, `streamingDetectIntent` or SessionEntityType management methods. */
		sessionEntityTypes?: Array<GoogleCloudDialogflowV2beta1SessionEntityType>;

		/** Optional. A custom field used to identify the webhook source. Arbitrary strings are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_source sent to the integration or API caller. */
		source?: string | null;
	}

	/** The response message for a webhook call. This response is validated by the Dialogflow server. If validation fails, an error will be returned in the QueryResult.diagnostic_info field. Setting JSON fields to an empty value with the wrong type is a common error. To avoid this error: - Use `""` for empty strings - Use `{}` or `null` for empty objects - Use `[]` or `null` for empty arrays For more information, see the [Protocol Buffers Language Guide](https://developers.google.com/protocol-buffers/docs/proto3#json). */
	export interface GoogleCloudDialogflowV2beta1WebhookResponseFormProperties {

		/** Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false. */
		endInteraction: FormControl<boolean | null | undefined>,

		/** Optional. The text response message intended for the end-user. It is recommended to use `fulfillment_messages.text.text[0]` instead. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_text sent to the integration or API caller. */
		fulfillmentText: FormControl<string | null | undefined>,

		/** Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false. */
		liveAgentHandoff: FormControl<boolean | null | undefined>,

		/** Optional. This field can be used to pass custom data from your webhook to the integration or API caller. Arbitrary JSON objects are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_payload sent to the integration or API caller. This field is also used by the [Google Assistant integration](https://cloud.google.com/dialogflow/docs/integrations/aog) for rich response messages. See the format definition at [Google Assistant Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json) */
		payload: FormControl<{[id: string]: any } | null | undefined>,

		/** Optional. A custom field used to identify the webhook source. Arbitrary strings are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_source sent to the integration or API caller. */
		source: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV2beta1WebhookResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV2beta1WebhookResponseFormProperties>({
			endInteraction: new FormControl<boolean | null | undefined>(undefined),
			fulfillmentText: new FormControl<string | null | undefined>(undefined),
			liveAgentHandoff: new FormControl<boolean | null | undefined>(undefined),
			payload: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			source: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This message is used to hold all the Conversation Signals data, which will be converted to JSON and exported to BigQuery. */
	export interface GoogleCloudDialogflowV3alpha1ConversationSignals {

		/** Collection of all signals that were extracted for a single turn of the conversation. */
		turnSignals?: GoogleCloudDialogflowV3alpha1TurnSignals;
	}

	/** This message is used to hold all the Conversation Signals data, which will be converted to JSON and exported to BigQuery. */
	export interface GoogleCloudDialogflowV3alpha1ConversationSignalsFormProperties {
	}
	export function CreateGoogleCloudDialogflowV3alpha1ConversationSignalsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1ConversationSignalsFormProperties>({
		});

	}


	/** Collection of all signals that were extracted for a single turn of the conversation. */
	export interface GoogleCloudDialogflowV3alpha1TurnSignals {

		/** Whether agent responded with LiveAgentHandoff fulfillment. */
		agentEscalated?: boolean | null;

		/** Whether user was using DTMF input. */
		dtmfUsed?: boolean | null;

		/** Failure reasons of the turn. */
		failureReasons?: Array<string>;

		/** Whether NLU predicted NO_MATCH. */
		noMatch?: boolean | null;

		/** Whether user provided no input. */
		noUserInput?: boolean | null;

		/** Whether turn resulted in End Session page. */
		reachedEndPage?: boolean | null;

		/** Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentMagnitude?: number | null;

		/** Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentScore?: number | null;

		/** Whether agent has triggered the event corresponding to user abandoning the conversation. */
		triggeredAbandonmentEvent?: boolean | null;

		/** Whether user was specifically asking for a live agent. */
		userEscalated?: boolean | null;

		/** Human-readable statuses of the webhooks triggered during this turn. */
		webhookStatuses?: Array<string>;
	}

	/** Collection of all signals that were extracted for a single turn of the conversation. */
	export interface GoogleCloudDialogflowV3alpha1TurnSignalsFormProperties {

		/** Whether agent responded with LiveAgentHandoff fulfillment. */
		agentEscalated: FormControl<boolean | null | undefined>,

		/** Whether user was using DTMF input. */
		dtmfUsed: FormControl<boolean | null | undefined>,

		/** Whether NLU predicted NO_MATCH. */
		noMatch: FormControl<boolean | null | undefined>,

		/** Whether user provided no input. */
		noUserInput: FormControl<boolean | null | undefined>,

		/** Whether turn resulted in End Session page. */
		reachedEndPage: FormControl<boolean | null | undefined>,

		/** Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentMagnitude: FormControl<number | null | undefined>,

		/** Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled. */
		sentimentScore: FormControl<number | null | undefined>,

		/** Whether agent has triggered the event corresponding to user abandoning the conversation. */
		triggeredAbandonmentEvent: FormControl<boolean | null | undefined>,

		/** Whether user was specifically asking for a live agent. */
		userEscalated: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV3alpha1TurnSignalsFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1TurnSignalsFormProperties>({
			agentEscalated: new FormControl<boolean | null | undefined>(undefined),
			dtmfUsed: new FormControl<boolean | null | undefined>(undefined),
			noMatch: new FormControl<boolean | null | undefined>(undefined),
			noUserInput: new FormControl<boolean | null | undefined>(undefined),
			reachedEndPage: new FormControl<boolean | null | undefined>(undefined),
			sentimentMagnitude: new FormControl<number | null | undefined>(undefined),
			sentimentScore: new FormControl<number | null | undefined>(undefined),
			triggeredAbandonmentEvent: new FormControl<boolean | null | undefined>(undefined),
			userEscalated: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Metadata for CreateDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1CreateDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for CreateDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1CreateDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV3alpha1CreateDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1CreateDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata {

		/** Required. Output only. The current state of this operation. */
		state?: GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null;
	}

	/** Metadata in google::longrunning::Operation for Knowledge operations. */
	export interface GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadataFormProperties {

		/** Required. Output only. The current state of this operation. */
		state: FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>,
	}
	export function CreateGoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadataFormProperties>({
			state: new FormControl<GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadataState | null | undefined>(undefined),
		});

	}


	/** Metadata for DeleteDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1DeleteDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for DeleteDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1DeleteDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV3alpha1DeleteDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1DeleteDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata for ImportDocuments operation. */
	export interface GoogleCloudDialogflowV3alpha1ImportDocumentsOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for ImportDocuments operation. */
	export interface GoogleCloudDialogflowV3alpha1ImportDocumentsOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV3alpha1ImportDocumentsOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1ImportDocumentsOperationMetadataFormProperties>({
		});

	}


	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV3alpha1ImportDocumentsResponse {

		/** Includes details about skipped documents or any other warnings. */
		warnings?: Array<GoogleRpcStatus>;
	}

	/** Response message for Documents.ImportDocuments. */
	export interface GoogleCloudDialogflowV3alpha1ImportDocumentsResponseFormProperties {
	}
	export function CreateGoogleCloudDialogflowV3alpha1ImportDocumentsResponseFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1ImportDocumentsResponseFormProperties>({
		});

	}


	/** Metadata for ReloadDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1ReloadDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for ReloadDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1ReloadDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV3alpha1ReloadDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1ReloadDocumentOperationMetadataFormProperties>({
		});

	}


	/** Metadata for UpdateDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1UpdateDocumentOperationMetadata {

		/** Metadata in google::longrunning::Operation for Knowledge operations. */
		genericMetadata?: GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata;
	}

	/** Metadata for UpdateDocument operation. */
	export interface GoogleCloudDialogflowV3alpha1UpdateDocumentOperationMetadataFormProperties {
	}
	export function CreateGoogleCloudDialogflowV3alpha1UpdateDocumentOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudDialogflowV3alpha1UpdateDocumentOperationMetadataFormProperties>({
		});

	}


	/** The response message for Locations.ListLocations. */
	export interface GoogleCloudLocationListLocationsResponse {

		/** A list of locations that matches the specified filter in the request. */
		locations?: Array<GoogleCloudLocationLocation>;

		/** The standard List next-page token. */
		nextPageToken?: string | null;
	}

	/** The response message for Locations.ListLocations. */
	export interface GoogleCloudLocationListLocationsResponseFormProperties {

		/** The standard List next-page token. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudLocationListLocationsResponseFormGroup() {
		return new FormGroup<GoogleCloudLocationListLocationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A resource that represents a Google Cloud location. */
	export interface GoogleCloudLocationLocation {

		/** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
		displayName?: string | null;

		/** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
		labels?: {[id: string]: string };

		/** The canonical id for this location. For example: `"us-east1"`. */
		locationId?: string | null;

		/** Service-specific metadata. For example the available capacity at the given location. */
		metadata?: {[id: string]: any };

		/** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
		name?: string | null;
	}

	/** A resource that represents a Google Cloud location. */
	export interface GoogleCloudLocationLocationFormProperties {

		/** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
		displayName: FormControl<string | null | undefined>,

		/** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** The canonical id for this location. For example: `"us-east1"`. */
		locationId: FormControl<string | null | undefined>,

		/** Service-specific metadata. For example the available capacity at the given location. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,

		/** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudLocationLocationFormGroup() {
		return new FormGroup<GoogleCloudLocationLocationFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			locationId: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Operations.ListOperations. */
	export interface GoogleLongrunningListOperationsResponse {

		/** The standard List next-page token. */
		nextPageToken?: string | null;

		/** A list of operations that matches the specified filter in the request. */
		operations?: Array<GoogleLongrunningOperation>;
	}

	/** The response message for Operations.ListOperations. */
	export interface GoogleLongrunningListOperationsResponseFormProperties {

		/** The standard List next-page token. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleLongrunningListOperationsResponseFormGroup() {
		return new FormGroup<GoogleLongrunningListOperationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This resource represents a long-running operation that is the result of a network API call. */
	export interface GoogleLongrunningOperation {

		/** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
		done?: boolean | null;

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		error?: GoogleRpcStatus;

		/** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata?: {[id: string]: any };

		/** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
		name?: string | null;

		/** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
		response?: {[id: string]: any };
	}

	/** This resource represents a long-running operation that is the result of a network API call. */
	export interface GoogleLongrunningOperationFormProperties {

		/** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
		done: FormControl<boolean | null | undefined>,

		/** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,

		/** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
		name: FormControl<string | null | undefined>,

		/** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
		response: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleLongrunningOperationFormGroup() {
		return new FormGroup<GoogleLongrunningOperationFormProperties>({
			done: new FormControl<boolean | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } */
	export interface GoogleProtobufEmpty {
	}

	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } */
	export interface GoogleProtobufEmptyFormProperties {
	}
	export function CreateGoogleProtobufEmptyFormGroup() {
		return new FormGroup<GoogleProtobufEmptyFormProperties>({
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Clears a suggestion feature from a conversation profile for the given participant role. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ClearSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile
		 * Post v2/{conversationProfile}:clearSuggestionFeatureConfig
		 * @param {string} conversationProfile Required. The Conversation Profile to add or update the suggestion feature config. Format: `projects//locations//conversationProfiles/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfig(conversationProfile: string, requestBody: GoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (conversationProfile == null ? '' : encodeURIComponent(conversationProfile)) + ':clearSuggestionFeatureConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds or updates a suggestion feature in a conversation profile. If the conversation profile contains the type of suggestion feature for the participant role, it will update it. Otherwise it will insert the suggestion feature. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: SetSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile If a long running operation to add or update suggestion feature config for the same conversation profile, participant role and suggestion feature type exists, please cancel the existing long running operation before sending such request, otherwise the request will be rejected.
		 * Post v2/{conversationProfile}:setSuggestionFeatureConfig
		 * @param {string} conversationProfile Required. The Conversation Profile to add or update the suggestion feature config. Format: `projects//locations//conversationProfiles/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfig(conversationProfile: string, requestBody: GoogleCloudDialogflowV2SetSuggestionFeatureConfigRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (conversationProfile == null ? '' : encodeURIComponent(conversationProfile)) + ':setSuggestionFeatureConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get answers for the given query based on knowledge documents.
		 * Post v2/{conversation}/suggestions:searchKnowledge
		 * @param {string} conversation The conversation (between human agent and end user) where the search request is triggered. Format: `projects//locations//conversations/`.
		 * @return {GoogleCloudDialogflowV2SearchKnowledgeResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_suggestions_searchKnowledge(conversation: string, requestBody: GoogleCloudDialogflowV2SearchKnowledgeRequest): Observable<GoogleCloudDialogflowV2SearchKnowledgeResponse> {
			return this.http.post<GoogleCloudDialogflowV2SearchKnowledgeResponse>(this.baseUri + 'v2/' + (conversation == null ? '' : encodeURIComponent(conversation)) + '/suggestions:searchKnowledge', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Suggests summary for a conversation based on specific historical messages. The range of the messages to be used for summary can be specified in the request.
		 * Post v2/{conversation}/suggestions:suggestConversationSummary
		 * @param {string} conversation Required. The conversation to fetch suggestion for. Format: `projects//locations//conversations/`.
		 * @return {GoogleCloudDialogflowV2SuggestConversationSummaryResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_suggestions_suggestConversationSummary(conversation: string, requestBody: GoogleCloudDialogflowV2SuggestConversationSummaryRequest): Observable<GoogleCloudDialogflowV2SuggestConversationSummaryResponse> {
			return this.http.post<GoogleCloudDialogflowV2SuggestConversationSummaryResponse>(this.baseUri + 'v2/' + (conversation == null ? '' : encodeURIComponent(conversation)) + '/suggestions:suggestConversationSummary', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
		 * Delete v2/{name}
		 * @param {string} name Required. The name of the document to delete. Format: `projects//locations//knowledgeBases//documents/`.
		 * @param {boolean} force Optional. Force deletes the knowledge base. When set to true, any documents in the knowledge base are also deleted.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_documents_delete(name: string, force: boolean | null | undefined): Observable<GoogleLongrunningOperation> {
			return this.http.delete<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '&force=' + force, {});
		}

		/**
		 * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		 * Get v2/{name}
		 * @param {string} name The name of the operation resource.
		 * @param {GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView} intentView Optional. The resource view to apply to the returned intent.
		 * @param {string} languageCode Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_operations_get(name: string, intentView: GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView | null | undefined, languageCode: string | null | undefined): Observable<GoogleLongrunningOperation> {
			return this.http.get<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '&intentView=' + intentView + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)), {});
		}

		/**
		 * Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document
		 * Patch v2/{name}
		 * @param {string} name Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
		 * @param {GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView} updateMask Optional. Not specified means `update all`. Currently, only `display_name` can be updated, an InvalidArgument will be returned for attempting to update other fields.
		 * @param {string} languageCode Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_documents_patch(name: string, updateMask: GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView | null | undefined, languageCode: string | null | undefined, requestBody: GoogleCloudDialogflowV2Document): Observable<GoogleLongrunningOperation> {
			return this.http.patch<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '&updateMask=' + updateMask + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists information about the supported locations for this service.
		 * Get v2/{name}/locations
		 * @param {string} name The resource that owns the locations collection, if applicable.
		 * @param {string} filter A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
		 * @param {number} pageSize The maximum number of results to return. If not set, the service selects a default.
		 * @param {string} pageToken A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.
		 * @return {GoogleCloudLocationListLocationsResponse} Successful response
		 */
		Dialogflow_projects_locations_list(name: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudLocationListLocationsResponse> {
			return this.http.get<GoogleCloudLocationListLocationsResponse>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '/locations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		 * Get v2/{name}/operations
		 * @param {string} name The name of the operation's parent resource.
		 * @param {string} filter The standard list filter.
		 * @param {number} pageSize The standard list page size.
		 * @param {string} pageToken The standard list page token.
		 * @return {GoogleLongrunningListOperationsResponse} Successful response
		 */
		Dialogflow_projects_operations_list(name: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleLongrunningListOperationsResponse> {
			return this.http.get<GoogleLongrunningListOperationsResponse>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		 * Post v2/{name}:cancel
		 * @param {string} name The name of the operation resource to be cancelled.
		 * @return {GoogleProtobufEmpty} Successful response
		 */
		Dialogflow_projects_operations_cancel(name: string): Observable<GoogleProtobufEmpty> {
			return this.http.post<GoogleProtobufEmpty>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + ':cancel', null, {});
		}

		/**
		 * Completes the specified conversation. Finished conversations are purged from the database after 30 days.
		 * Post v2/{name}:complete
		 * @param {string} name Required. Resource identifier of the conversation to close. Format: `projects//locations//conversations/`.
		 * @return {GoogleCloudDialogflowV2Conversation} Successful response
		 */
		Dialogflow_projects_locations_conversations_complete(name: string, requestBody: GoogleCloudDialogflowV2CompleteConversationRequest): Observable<GoogleCloudDialogflowV2Conversation> {
			return this.http.post<GoogleCloudDialogflowV2Conversation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + ':complete', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deploys a model. If a model is already deployed, deploying it has no effect. A model can only serve prediction requests after it gets deployed. For article suggestion, custom model will not be used unless it is deployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
		 * Post v2/{name}:deploy
		 * @param {string} name Required. The conversation model to deploy. Format: `projects//conversationModels/`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationModels_deploy(name: string, requestBody: GoogleCloudDialogflowV2DeployConversationModelRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + ':deploy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Exports a smart messaging candidate document into the specified destination. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document
		 * Post v2/{name}:export
		 * @param {string} name Required. The name of the document to export. Format: `projects//locations//knowledgeBases//documents/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_documents_export(name: string, requestBody: GoogleCloudDialogflowV2ExportDocumentRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + ':export', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Import data into the specified conversation dataset. Note that it is not allowed to import data to a conversation dataset that already has data in it. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportConversationDataOperationMetadata - `response`: ImportConversationDataOperationResponse
		 * Post v2/{name}:importConversationData
		 * @param {string} name Required. Dataset resource name. Format: `projects//locations//conversationDatasets/`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationDatasets_importConversationData(name: string, requestBody: GoogleCloudDialogflowV2ImportConversationDataRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + ':importConversationData', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.
		 * Post v2/{name}:reload
		 * @param {string} name Required. The name of the document to reload. Format: `projects//locations//knowledgeBases//documents/`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_documents_reload(name: string, requestBody: GoogleCloudDialogflowV2ReloadDocumentRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + ':reload', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Undeploys a model. If the model is not deployed this method has no effect. If the model is currently being used: - For article suggestion, article suggestion will fallback to the default model if model is undeployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: UndeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
		 * Post v2/{name}:undeploy
		 * @param {string} name Required. The conversation model to undeploy. Format: `projects//conversationModels/`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationModels_undeploy(name: string, requestBody: GoogleCloudDialogflowV2UndeployConversationModelRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + ':undeploy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified agent.
		 * Delete v2/{parent}/agent
		 * @param {string} parent Required. The project that the agent to delete is associated with. Format: `projects/`.
		 * @return {GoogleProtobufEmpty} Successful response
		 */
		Dialogflow_projects_locations_deleteAgent(parent: string): Observable<GoogleProtobufEmpty> {
			return this.http.delete<GoogleProtobufEmpty>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent', {});
		}

		/**
		 * Retrieves the specified agent.
		 * Get v2/{parent}/agent
		 * @param {string} parent Required. The project that the agent to fetch is associated with. Format: `projects/`.
		 * @return {GoogleCloudDialogflowV2Agent} Successful response
		 */
		Dialogflow_projects_locations_getAgent(parent: string): Observable<GoogleCloudDialogflowV2Agent> {
			return this.http.get<GoogleCloudDialogflowV2Agent>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent', {});
		}

		/**
		 * Creates/updates the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/agent
		 * @param {string} parent Required. The project of this agent. Format: `projects/`.
		 * @param {string} updateMask Optional. The mask to control which fields get updated.
		 * @return {GoogleCloudDialogflowV2Agent} Successful response
		 */
		Dialogflow_projects_locations_setAgent(parent: string, updateMask: string | null | undefined, requestBody: GoogleCloudDialogflowV2Agent): Observable<GoogleCloudDialogflowV2Agent> {
			return this.http.post<GoogleCloudDialogflowV2Agent>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed.
		 * Get v2/{parent}/agent/validationResult
		 * @param {string} parent Required. The project that the agent is associated with. Format: `projects/`.
		 * @param {string} languageCode Optional. The language for which you want a validation result. If not specified, the agent's default language is used. [Many languages](https://cloud.google.com/dialogflow/docs/reference/language) are supported. Note: languages must be enabled in the agent before they can be used.
		 * @return {GoogleCloudDialogflowV2ValidationResult} Successful response
		 */
		Dialogflow_projects_locations_agent_getValidationResult(parent: string, languageCode: string | null | undefined): Observable<GoogleCloudDialogflowV2ValidationResult> {
			return this.http.get<GoogleCloudDialogflowV2ValidationResult>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent/validationResult&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)), {});
		}

		/**
		 * Exports the specified agent to a ZIP file. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse
		 * Post v2/{parent}/agent:export
		 * @param {string} parent Required. The project that the agent to export is associated with. Format: `projects/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_export(parent: string, requestBody: GoogleCloudDialogflowV2ExportAgentRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent:export', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when importing is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/agent:import
		 * @param {string} parent Required. The project that the agent to import is associated with. Format: `projects/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_import(parent: string, requestBody: GoogleCloudDialogflowV2ImportAgentRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent:import', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore, the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when restoring is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/agent:restore
		 * @param {string} parent Required. The project that the agent to restore is associated with. Format: `projects/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_restore(parent: string, requestBody: GoogleCloudDialogflowV2RestoreAgentRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent:restore', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to. One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
		 * Get v2/{parent}/agent:search
		 * @param {string} parent Required. The project to list agents from. Format: `projects/`.
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2SearchAgentsResponse} Successful response
		 */
		Dialogflow_projects_locations_agent_search(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2SearchAgentsResponse> {
			return this.http.get<GoogleCloudDialogflowV2SearchAgentsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent:search&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Trains the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/agent:train
		 * @param {string} parent Required. The project that the agent to train is associated with. Format: `projects/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_train(parent: string, requestBody: GoogleCloudDialogflowV2TrainAgentRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/agent:train', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all answer records in the specified project in reverse chronological order.
		 * Get v2/{parent}/answerRecords
		 * @param {string} parent Required. The project to list all answer records for in reverse chronological order. Format: `projects//locations/`.
		 * @param {string} filter Optional. Filters to restrict results to specific answer records. Marked deprecated as it hasn't been, and isn't currently, supported. For more information about filtering, see [API Filtering](https://aip.dev/160).
		 * @param {number} pageSize Optional. The maximum number of records to return in a single page. The server may return fewer records than this. If unspecified, we use 10. The maximum is 100.
		 * @param {string} pageToken Optional. The ListAnswerRecordsResponse.next_page_token value returned from a previous list request used to continue listing on the next page.
		 * @return {GoogleCloudDialogflowV2ListAnswerRecordsResponse} Successful response
		 */
		Dialogflow_projects_locations_answerRecords_list(parent: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListAnswerRecordsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListAnswerRecordsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/answerRecords&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Deletes all active contexts in the specified session.
		 * Delete v2/{parent}/contexts
		 * @param {string} parent Required. The name of the session to delete all contexts from. Format: `projects//agent/sessions/` or `projects//agent/environments//users//sessions/`. If `Environment ID` is not specified we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user.
		 * @return {GoogleProtobufEmpty} Successful response
		 */
		Dialogflow_projects_locations_agent_sessions_deleteContexts(parent: string): Observable<GoogleProtobufEmpty> {
			return this.http.delete<GoogleProtobufEmpty>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/contexts', {});
		}

		/**
		 * Returns the list of all contexts in the specified session.
		 * Get v2/{parent}/contexts
		 * @param {string} parent Required. The session to list all contexts from. Format: `projects//agent/sessions/` or `projects//agent/environments//users//sessions/`. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user.
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListContextsResponse} Successful response
		 */
		Dialogflow_projects_locations_agent_sessions_contexts_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListContextsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListContextsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/contexts&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a context. If the specified context already exists, overrides the context.
		 * Post v2/{parent}/contexts
		 * @param {string} parent Required. The session to create a context for. Format: `projects//agent/sessions/` or `projects//agent/environments//users//sessions/`. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user.
		 * @return {GoogleCloudDialogflowV2Context} Successful response
		 */
		Dialogflow_projects_locations_agent_sessions_contexts_create(parent: string, requestBody: GoogleCloudDialogflowV2Context): Observable<GoogleCloudDialogflowV2Context> {
			return this.http.post<GoogleCloudDialogflowV2Context>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/contexts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all conversation datasets in the specified project and location.
		 * Get v2/{parent}/conversationDatasets
		 * @param {string} parent Required. The project and location name to list all conversation datasets for. Format: `projects//locations/`
		 * @param {number} pageSize Optional. Maximum number of conversation datasets to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListConversationDatasetsResponse} Successful response
		 */
		Dialogflow_projects_locations_conversationDatasets_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListConversationDatasetsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListConversationDatasetsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversationDatasets&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a new conversation dataset. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateConversationDatasetOperationMetadata - `response`: ConversationDataset
		 * Post v2/{parent}/conversationDatasets
		 * @param {string} parent Required. The project to create conversation dataset for. Format: `projects//locations/`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationDatasets_create(parent: string, requestBody: GoogleCloudDialogflowV2ConversationDataset): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversationDatasets', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists conversation models.
		 * Get v2/{parent}/conversationModels
		 * @param {string} parent Required. The project to list all conversation models for. Format: `projects/`
		 * @param {number} pageSize Optional. Maximum number of conversation models to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListConversationModelsResponse} Successful response
		 */
		Dialogflow_projects_locations_conversationModels_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListConversationModelsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListConversationModelsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversationModels&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a model. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateConversationModelOperationMetadata - `response`: ConversationModel
		 * Post v2/{parent}/conversationModels
		 * @param {string} parent The project to create conversation model for. Format: `projects/`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationModels_create(parent: string, requestBody: GoogleCloudDialogflowV2ConversationModel): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversationModels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all conversation profiles in the specified project.
		 * Get v2/{parent}/conversationProfiles
		 * @param {string} parent Required. The project to list all conversation profiles from. Format: `projects//locations/`.
		 * @param {number} pageSize The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListConversationProfilesResponse} Successful response
		 */
		Dialogflow_projects_locations_conversationProfiles_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListConversationProfilesResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListConversationProfilesResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversationProfiles&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a conversation profile in the specified project. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API.
		 * Post v2/{parent}/conversationProfiles
		 * @param {string} parent Required. The project to create a conversation profile for. Format: `projects//locations/`.
		 * @return {GoogleCloudDialogflowV2ConversationProfile} Successful response
		 */
		Dialogflow_projects_locations_conversationProfiles_create(parent: string, requestBody: GoogleCloudDialogflowV2ConversationProfile): Observable<GoogleCloudDialogflowV2ConversationProfile> {
			return this.http.post<GoogleCloudDialogflowV2ConversationProfile>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversationProfiles', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all conversations in the specified project.
		 * Get v2/{parent}/conversations
		 * @param {string} parent Required. The project from which to list all conversation. Format: `projects//locations/`.
		 * @param {string} filter A filter expression that filters conversations listed in the response. In general, the expression must specify the field name, a comparison operator, and the value to use for filtering: - The value must be a string, a number, or a boolean. - The comparison operator must be either `=`,`!=`, `>`, or `<`. - To filter on multiple expressions, separate the expressions with `AND` or `OR` (omitting both implies `AND`). - For clarity, expressions can be enclosed in parentheses. Only `lifecycle_state` can be filtered on in this way. For example, the following expression only returns `COMPLETED` conversations: `lifecycle_state = "COMPLETED"` For more information about filtering, see [API Filtering](https://aip.dev/160).
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListConversationsResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_list(parent: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListConversationsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListConversationsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a new conversation. Conversations are auto-completed after 24 hours. Conversation Lifecycle: There are two stages during a conversation: Automated Agent Stage and Assist Stage. For Automated Agent Stage, there will be a dialogflow agent responding to user queries. For Assist Stage, there's no dialogflow agent responding to user queries. But we will provide suggestions which are generated from conversation. If Conversation.conversation_profile is configured for a dialogflow agent, conversation will start from `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And during `Automated Agent Stage`, once an Intent with Intent.live_agent_handoff is triggered, conversation will transfer to Assist Stage.
		 * Post v2/{parent}/conversations
		 * @param {string} parent Required. Resource identifier of the project creating the conversation. Format: `projects//locations/`.
		 * @param {string} conversationId Optional. Identifier of the conversation. Generally it's auto generated by Google. Only set it if you cannot wait for the response to return a auto-generated one to you. The conversation ID must be compliant with the regression fomula `a-zA-Z*` with the characters length in range of [3,64]. If the field is provided, the caller is resposible for 1. the uniqueness of the ID, otherwise the request will be rejected. 2. the consistency for whether to use custom ID or not under a project to better ensure uniqueness.
		 * @return {GoogleCloudDialogflowV2Conversation} Successful response
		 */
		Dialogflow_projects_locations_conversations_create(parent: string, conversationId: string | null | undefined, requestBody: GoogleCloudDialogflowV2Conversation): Observable<GoogleCloudDialogflowV2Conversation> {
			return this.http.post<GoogleCloudDialogflowV2Conversation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/conversations&conversationId=' + (conversationId == null ? '' : encodeURIComponent(conversationId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all documents of the knowledge base.
		 * Get v2/{parent}/documents
		 * @param {string} parent Required. The knowledge base to list all documents for. Format: `projects//locations//knowledgeBases/`.
		 * @param {string} filter The filter expression used to filter documents returned by the list method. The expression has the following syntax: [AND ] ... The following fields and operators are supported: * knowledge_types with has(:) operator * display_name with has(:) operator * state with equals(=) operator Examples: * "knowledge_types:FAQ" matches documents with FAQ knowledge type. * "display_name:customer" matches documents whose display name contains "customer". * "state=ACTIVE" matches documents with ACTIVE state. * "knowledge_types:FAQ AND state=ACTIVE" matches all active FAQ documents. For more information about filtering, see [API Filtering](https://aip.dev/160).
		 * @param {number} pageSize The maximum number of items to return in a single page. By default 10 and at most 100.
		 * @param {string} pageToken The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListDocumentsResponse} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_documents_list(parent: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListDocumentsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListDocumentsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/documents&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document
		 * Post v2/{parent}/documents
		 * @param {string} parent Required. The knowledge base to create a document for. Format: `projects//locations//knowledgeBases/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_documents_create(parent: string, requestBody: GoogleCloudDialogflowV2Document): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/documents', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates documents by importing data from external sources. Dialogflow supports up to 350 documents in each request. If you try to import more, Dialogflow will return an error. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: ImportDocumentsResponse
		 * Post v2/{parent}/documents:import
		 * @param {string} parent Required. The knowledge base to import documents into. Format: `projects//locations//knowledgeBases/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_documents_import(parent: string, requestBody: GoogleCloudDialogflowV2ImportDocumentsRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/documents:import', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates multiple new entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/entities:batchCreate
		 * @param {string} parent Required. The name of the entity type to create entities in. Format: `projects//agent/entityTypes/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_entityTypes_entities_batchCreate(parent: string, requestBody: GoogleCloudDialogflowV2BatchCreateEntitiesRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/entities:batchCreate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/entities:batchDelete
		 * @param {string} parent Required. The name of the entity type to delete entries for. Format: `projects//agent/entityTypes/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_entityTypes_entities_batchDelete(parent: string, requestBody: GoogleCloudDialogflowV2BatchDeleteEntitiesRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/entities:batchDelete', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/entities:batchUpdate
		 * @param {string} parent Required. The name of the entity type to update or create entities in. Format: `projects//agent/entityTypes/`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_entityTypes_entities_batchUpdate(parent: string, requestBody: GoogleCloudDialogflowV2BatchUpdateEntitiesRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/entities:batchUpdate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.
		 * Get v2/{parent}/entityTypes
		 * @param {string} parent Required. The session to list all session entity types from. Format: `projects//agent/sessions/` or `projects//agent/environments//users// sessions/`. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user.
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListSessionEntityTypesResponse} Successful response
		 */
		Dialogflow_projects_locations_agent_sessions_entityTypes_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListSessionEntityTypesResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListSessionEntityTypesResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/entityTypes&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.
		 * Post v2/{parent}/entityTypes
		 * @param {string} parent Required. The session to create a session entity type for. Format: `projects//agent/sessions/` or `projects//agent/environments//users// sessions/`. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user.
		 * @param {string} languageCode Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
		 * @return {GoogleCloudDialogflowV2SessionEntityType} Successful response
		 */
		Dialogflow_projects_locations_agent_sessions_entityTypes_create(parent: string, languageCode: string | null | undefined, requestBody: GoogleCloudDialogflowV2SessionEntityType): Observable<GoogleCloudDialogflowV2SessionEntityType> {
			return this.http.post<GoogleCloudDialogflowV2SessionEntityType>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/entityTypes&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/entityTypes:batchDelete
		 * @param {string} parent Required. The name of the agent to delete all entities types for. Format: `projects//agent`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_entityTypes_batchDelete(parent: string, requestBody: GoogleCloudDialogflowV2BatchDeleteEntityTypesRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/entityTypes:batchDelete', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates/Creates multiple entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateEntityTypesResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/entityTypes:batchUpdate
		 * @param {string} parent Required. The name of the agent to update or create entity types in. Format: `projects//agent`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_entityTypes_batchUpdate(parent: string, requestBody: GoogleCloudDialogflowV2BatchUpdateEntityTypesRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/entityTypes:batchUpdate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all non-default environments of the specified agent.
		 * Get v2/{parent}/environments
		 * @param {string} parent Required. The agent to list all environments from. Format: - `projects//agent` - `projects//locations//agent`
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListEnvironmentsResponse} Successful response
		 */
		Dialogflow_projects_locations_agent_environments_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListEnvironmentsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListEnvironmentsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/environments&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates an agent environment.
		 * Post v2/{parent}/environments
		 * @param {string} parent Required. The agent to create an environment for. Supported formats: - `projects//agent` - `projects//locations//agent`
		 * @param {string} environmentId Required. The unique id of the new environment.
		 * @return {GoogleCloudDialogflowV2Environment} Successful response
		 */
		Dialogflow_projects_locations_agent_environments_create(parent: string, environmentId: string | null | undefined, requestBody: GoogleCloudDialogflowV2Environment): Observable<GoogleCloudDialogflowV2Environment> {
			return this.http.post<GoogleCloudDialogflowV2Environment>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/environments&environmentId=' + (environmentId == null ? '' : encodeURIComponent(environmentId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists evaluations of a conversation model.
		 * Get v2/{parent}/evaluations
		 * @param {string} parent Required. The conversation model resource name. Format: `projects//conversationModels/`
		 * @param {number} pageSize Optional. Maximum number of evaluations to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListConversationModelEvaluationsResponse} Successful response
		 */
		Dialogflow_projects_locations_conversationModels_evaluations_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListConversationModelEvaluationsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListConversationModelEvaluationsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/evaluations&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates evaluation of a conversation model.
		 * Post v2/{parent}/evaluations
		 * @param {string} parent Required. The conversation model resource name. Format: `projects//locations//conversationModels/`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_conversationModels_evaluations_create(parent: string, requestBody: GoogleCloudDialogflowV2CreateConversationModelEvaluationRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/evaluations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the history of the specified environment.
		 * Get v2/{parent}/history
		 * @param {string} parent Required. The name of the environment to retrieve history for. Supported formats: - `projects//agent/environments/` - `projects//locations//agent/environments/` The environment ID for the default environment is `-`.
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2EnvironmentHistory} Successful response
		 */
		Dialogflow_projects_locations_agent_environments_getHistory(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2EnvironmentHistory> {
			return this.http.get<GoogleCloudDialogflowV2EnvironmentHistory>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/history&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Returns the list of all intents in the specified agent.
		 * Get v2/{parent}/intents
		 * @param {string} parent Required. The agent to list all intents from. Format: `projects//agent` or `projects//locations//agent`. Alternatively, you can specify the environment to list intents for. Format: `projects//agent/environments/` or `projects//locations//agent/environments/`. Note: training phrases of the intents will not be returned for non-draft environment.
		 * @param {GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView} intentView Optional. The resource view to apply to the returned intent.
		 * @param {string} languageCode Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListIntentsResponse} Successful response
		 */
		Dialogflow_projects_locations_agent_intents_list(parent: string, intentView: GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView | null | undefined, languageCode: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListIntentsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListIntentsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/intents&intentView=' + intentView + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates an intent in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/intents
		 * @param {string} parent Required. The agent to create a intent for. Format: `projects//agent`.
		 * @param {GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView} intentView Optional. The resource view to apply to the returned intent.
		 * @param {string} languageCode Optional. The language used to access language-specific data. If not specified, the agent's default language is used. For more information, see [Multilingual intent and entity data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
		 * @return {GoogleCloudDialogflowV2Intent} Successful response
		 */
		Dialogflow_projects_locations_agent_intents_create(parent: string, intentView: GoogleCloudDialogflowV2BatchUpdateIntentsRequestIntentView | null | undefined, languageCode: string | null | undefined, requestBody: GoogleCloudDialogflowV2Intent): Observable<GoogleCloudDialogflowV2Intent> {
			return this.http.post<GoogleCloudDialogflowV2Intent>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/intents&intentView=' + intentView + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/intents:batchDelete
		 * @param {string} parent Required. The name of the agent to delete all entities types for. Format: `projects//agent`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_intents_batchDelete(parent: string, requestBody: GoogleCloudDialogflowV2BatchDeleteIntentsRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/intents:batchDelete', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates/Creates multiple intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateIntentsResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
		 * Post v2/{parent}/intents:batchUpdate
		 * @param {string} parent Required. The name of the agent to update or create intents in. Format: `projects//agent`.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Dialogflow_projects_locations_agent_intents_batchUpdate(parent: string, requestBody: GoogleCloudDialogflowV2BatchUpdateIntentsRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/intents:batchUpdate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all knowledge bases of the specified agent.
		 * Get v2/{parent}/knowledgeBases
		 * @param {string} parent Required. The project to list of knowledge bases for. Format: `projects//locations/`.
		 * @param {string} filter The filter expression used to filter knowledge bases returned by the list method. The expression has the following syntax: [AND ] ... The following fields and operators are supported: * display_name with has(:) operator * language_code with equals(=) operator Examples: * 'language_code=en-us' matches knowledge bases with en-us language code. * 'display_name:articles' matches knowledge bases whose display name contains "articles". * 'display_name:"Best Articles"' matches knowledge bases whose display name contains "Best Articles". * 'language_code=en-gb AND display_name=articles' matches all knowledge bases whose display name contains "articles" and whose language code is "en-gb". Note: An empty filter string (i.e. "") is a no-op and will result in no filtering. For more information about filtering, see [API Filtering](https://aip.dev/160).
		 * @param {number} pageSize The maximum number of items to return in a single page. By default 10 and at most 100.
		 * @param {string} pageToken The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListKnowledgeBasesResponse} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_list(parent: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListKnowledgeBasesResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListKnowledgeBasesResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/knowledgeBases&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a knowledge base.
		 * Post v2/{parent}/knowledgeBases
		 * @param {string} parent Required. The project to create a knowledge base for. Format: `projects//locations/`.
		 * @return {GoogleCloudDialogflowV2KnowledgeBase} Successful response
		 */
		Dialogflow_projects_locations_knowledgeBases_create(parent: string, requestBody: GoogleCloudDialogflowV2KnowledgeBase): Observable<GoogleCloudDialogflowV2KnowledgeBase> {
			return this.http.post<GoogleCloudDialogflowV2KnowledgeBase>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/knowledgeBases', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists messages that belong to a given conversation. `messages` are ordered by `create_time` in descending order. To fetch updates without duplication, send request with filter `create_time_epoch_microseconds > [first item's create_time of previous request]` and empty page_token.
		 * Get v2/{parent}/messages
		 * @param {string} parent Required. The name of the conversation to list messages for. Format: `projects//locations//conversations/`
		 * @param {string} filter Optional. Filter on message fields. Currently predicates on `create_time` and `create_time_epoch_microseconds` are supported. `create_time` only support milliseconds accuracy. E.g., `create_time_epoch_microseconds > 1551790877964485` or `create_time > 2017-01-15T01:30:15.01Z`. For more information about filtering, see [API Filtering](https://aip.dev/160).
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListMessagesResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_messages_list(parent: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListMessagesResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListMessagesResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/messages&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Returns the list of all participants in the specified conversation.
		 * Get v2/{parent}/participants
		 * @param {string} parent Required. The conversation to list all participants from. Format: `projects//locations//conversations/`.
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListParticipantsResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_participants_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListParticipantsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListParticipantsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/participants&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a new participant in a conversation.
		 * Post v2/{parent}/participants
		 * @param {string} parent Required. Resource identifier of the conversation adding the participant. Format: `projects//locations//conversations/`.
		 * @return {GoogleCloudDialogflowV2Participant} Successful response
		 */
		Dialogflow_projects_locations_conversations_participants_create(parent: string, requestBody: GoogleCloudDialogflowV2Participant): Observable<GoogleCloudDialogflowV2Participant> {
			return this.http.post<GoogleCloudDialogflowV2Participant>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/participants', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Generates and returns a summary for a conversation that does not have a resource created for it.
		 * Post v2/{parent}/suggestions:generateStatelessSummary
		 * @param {string} parent Required. The parent resource to charge for the Summary's generation. Format: `projects//locations/`.
		 * @return {GoogleCloudDialogflowV2GenerateStatelessSummaryResponse} Successful response
		 */
		Dialogflow_projects_suggestions_generateStatelessSummary(parent: string, requestBody: GoogleCloudDialogflowV2GenerateStatelessSummaryRequest): Observable<GoogleCloudDialogflowV2GenerateStatelessSummaryResponse> {
			return this.http.post<GoogleCloudDialogflowV2GenerateStatelessSummaryResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/suggestions:generateStatelessSummary', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get answers for the given query based on knowledge documents.
		 * Post v2/{parent}/suggestions:searchKnowledge
		 * @param {string} parent The parent resource contains the conversation profile Format: 'projects/' or `projects//locations/`.
		 * @return {GoogleCloudDialogflowV2SearchKnowledgeResponse} Successful response
		 */
		Dialogflow_projects_suggestions_searchKnowledge(parent: string, requestBody: GoogleCloudDialogflowV2SearchKnowledgeRequest): Observable<GoogleCloudDialogflowV2SearchKnowledgeResponse> {
			return this.http.post<GoogleCloudDialogflowV2SearchKnowledgeResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/suggestions:searchKnowledge', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets suggested articles for a participant based on specific historical messages.
		 * Post v2/{parent}/suggestions:suggestArticles
		 * @param {string} parent Required. The name of the participant to fetch suggestion for. Format: `projects//locations//conversations//participants/`.
		 * @return {GoogleCloudDialogflowV2SuggestArticlesResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_participants_suggestions_suggestArticles(parent: string, requestBody: GoogleCloudDialogflowV2SuggestArticlesRequest): Observable<GoogleCloudDialogflowV2SuggestArticlesResponse> {
			return this.http.post<GoogleCloudDialogflowV2SuggestArticlesResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/suggestions:suggestArticles', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets suggested faq answers for a participant based on specific historical messages.
		 * Post v2/{parent}/suggestions:suggestFaqAnswers
		 * @param {string} parent Required. The name of the participant to fetch suggestion for. Format: `projects//locations//conversations//participants/`.
		 * @return {GoogleCloudDialogflowV2SuggestFaqAnswersResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswers(parent: string, requestBody: GoogleCloudDialogflowV2SuggestFaqAnswersRequest): Observable<GoogleCloudDialogflowV2SuggestFaqAnswersResponse> {
			return this.http.post<GoogleCloudDialogflowV2SuggestFaqAnswersResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/suggestions:suggestFaqAnswers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets smart replies for a participant based on specific historical messages.
		 * Post v2/{parent}/suggestions:suggestSmartReplies
		 * @param {string} parent Required. The name of the participant to fetch suggestion for. Format: `projects//locations//conversations//participants/`.
		 * @return {GoogleCloudDialogflowV2SuggestSmartRepliesResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartReplies(parent: string, requestBody: GoogleCloudDialogflowV2SuggestSmartRepliesRequest): Observable<GoogleCloudDialogflowV2SuggestSmartRepliesResponse> {
			return this.http.post<GoogleCloudDialogflowV2SuggestSmartRepliesResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/suggestions:suggestSmartReplies', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all versions of the specified agent.
		 * Get v2/{parent}/versions
		 * @param {string} parent Required. The agent to list all versions from. Supported formats: - `projects//agent` - `projects//locations//agent`
		 * @param {number} pageSize Optional. The maximum number of items to return in a single page. By default 100 and at most 1000.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous list request.
		 * @return {GoogleCloudDialogflowV2ListVersionsResponse} Successful response
		 */
		Dialogflow_projects_locations_agent_versions_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudDialogflowV2ListVersionsResponse> {
			return this.http.get<GoogleCloudDialogflowV2ListVersionsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/versions&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates an agent version. The new version points to the agent instance in the "default" environment.
		 * Post v2/{parent}/versions
		 * @param {string} parent Required. The agent to create a version for. Supported formats: - `projects//agent` - `projects//locations//agent`
		 * @return {GoogleCloudDialogflowV2Version} Successful response
		 */
		Dialogflow_projects_locations_agent_versions_create(parent: string, requestBody: GoogleCloudDialogflowV2Version): Observable<GoogleCloudDialogflowV2Version> {
			return this.http.post<GoogleCloudDialogflowV2Version>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/versions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds a text (chat, for example), or audio (phone recording, for example) message from a participant into the conversation. Note: Always use agent versions for production traffic sent to virtual agents. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
		 * Post v2/{participant}:analyzeContent
		 * @param {string} participant Required. The name of the participant this text comes from. Format: `projects//locations//conversations//participants/`.
		 * @return {GoogleCloudDialogflowV2AnalyzeContentResponse} Successful response
		 */
		Dialogflow_projects_locations_conversations_participants_analyzeContent(participant: string, requestBody: GoogleCloudDialogflowV2AnalyzeContentRequest): Observable<GoogleCloudDialogflowV2AnalyzeContentResponse> {
			return this.http.post<GoogleCloudDialogflowV2AnalyzeContentResponse>(this.baseUri + 'v2/' + (participant == null ? '' : encodeURIComponent(participant)) + ':analyzeContent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
		 * Post v2/{session}:detectIntent
		 * @param {string} session Required. The name of the session this query is sent to. Format: `projects//agent/sessions/`, or `projects//agent/environments//users//sessions/`. If `Environment ID` is not specified, we assume default 'draft' environment (`Environment ID` might be referred to as environment name at some places). If `User ID` is not specified, we are using "-". It's up to the API caller to choose an appropriate `Session ID` and `User Id`. They can be a random number or some type of user and session identifiers (preferably hashed). The length of the `Session ID` and `User ID` must not exceed 36 characters. For more information, see the [API interactions guide](https://cloud.google.com/dialogflow/docs/api-overview). Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
		 * @return {GoogleCloudDialogflowV2DetectIntentResponse} Successful response
		 */
		Dialogflow_projects_locations_agent_sessions_detectIntent(session: string, requestBody: GoogleCloudDialogflowV2DetectIntentRequest): Observable<GoogleCloudDialogflowV2DetectIntentResponse> {
			return this.http.post<GoogleCloudDialogflowV2DetectIntentResponse>(this.baseUri + 'v2/' + (session == null ? '' : encodeURIComponent(session)) + ':detectIntent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

}

