import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`. */
	export interface ACHDetails {

		/**
		 * The last few digits of the bank account number.
		 * Max length: 4
		 * Min length: 1
		 */
		account_number_suffix?: string | null;

		/**
		 * The type of the bank account performing the transfer. The account type can be `CHECKING`,
		 * `SAVINGS`, or `UNKNOWN`.
		 * Max length: 50
		 */
		account_type?: string | null;

		/**
		 * The routing number for the bank account.
		 * Max length: 50
		 */
		routing_number?: string | null;
	}

	/** ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`. */
	export interface ACHDetailsFormProperties {

		/**
		 * The last few digits of the bank account number.
		 * Max length: 4
		 * Min length: 1
		 */
		account_number_suffix: FormControl<string | null | undefined>,

		/**
		 * The type of the bank account performing the transfer. The account type can be `CHECKING`,
		 * `SAVINGS`, or `UNKNOWN`.
		 * Max length: 50
		 */
		account_type: FormControl<string | null | undefined>,

		/**
		 * The routing number for the bank account.
		 * Max length: 50
		 */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreateACHDetailsFormGroup() {
		return new FormGroup<ACHDetailsFormProperties>({
			account_number_suffix: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(4)]),
			account_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
		});

	}


	/** Defines the request parameters for the `AcceptDispute` endpoint. */
	export interface AcceptDisputeRequest {
	}

	/** Defines the request parameters for the `AcceptDispute` endpoint. */
	export interface AcceptDisputeRequestFormProperties {
	}
	export function CreateAcceptDisputeRequestFormGroup() {
		return new FormGroup<AcceptDisputeRequestFormProperties>({
		});

	}


	/** Defines the fields in an `AcceptDispute` response. */
	export interface AcceptDisputeResponse {

		/** Represents a dispute a cardholder initiated with their bank. */
		dispute?: Dispute;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Defines the fields in an `AcceptDispute` response. */
	export interface AcceptDisputeResponseFormProperties {
	}
	export function CreateAcceptDisputeResponseFormGroup() {
		return new FormGroup<AcceptDisputeResponseFormProperties>({
		});

	}


	/** Represents a dispute a cardholder initiated with their bank. */
	export interface Dispute {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * The ID of the dispute in the card brand system, generated by the card brand.
		 * Max length: 40
		 * Min length: 1
		 */
		brand_dispute_id?: string | null;

		/** The card brand used in the disputed payment. */
		card_brand?: string | null;

		/**
		 * The timestamp when the dispute was created, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		created_at?: string | null;

		/**
		 * The unique ID for this `Dispute`, generated by Square.
		 * Max length: 40
		 * Min length: 1
		 */
		dispute_id?: string | null;

		/** The payment the cardholder disputed. */
		disputed_payment?: DisputedPayment;

		/**
		 * The time when the next action is due, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		due_at?: string | null;

		/** The IDs of the evidence associated with the dispute. */
		evidence_ids?: Array<string>;

		/**
		 * The unique ID for this `Dispute`, generated by Square.
		 * Max length: 40
		 * Min length: 1
		 */
		id?: string | null;

		/**
		 * The ID of the location where the dispute originated.
		 * Max length: 40
		 * Min length: 1
		 */
		location_id?: string | null;

		/** The dispute reason why the cardholder initiated the dispute with their bank. */
		reason?: string | null;

		/**
		 * The timestamp when the dispute was reported, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		reported_at?: string | null;

		/**
		 * The timestamp when the dispute was reported, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		reported_date?: string | null;

		/** The current state of this dispute. */
		state?: string | null;

		/**
		 * The timestamp when the dispute was last updated, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		updated_at?: string | null;

		/** The current version of the `Dispute`. */
		version?: number | null;
	}

	/** Represents a dispute a cardholder initiated with their bank. */
	export interface DisputeFormProperties {

		/**
		 * The ID of the dispute in the card brand system, generated by the card brand.
		 * Max length: 40
		 * Min length: 1
		 */
		brand_dispute_id: FormControl<string | null | undefined>,

		/** The card brand used in the disputed payment. */
		card_brand: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the dispute was created, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The unique ID for this `Dispute`, generated by Square.
		 * Max length: 40
		 * Min length: 1
		 */
		dispute_id: FormControl<string | null | undefined>,

		/**
		 * The time when the next action is due, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		due_at: FormControl<string | null | undefined>,

		/**
		 * The unique ID for this `Dispute`, generated by Square.
		 * Max length: 40
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the location where the dispute originated.
		 * Max length: 40
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,

		/** The dispute reason why the cardholder initiated the dispute with their bank. */
		reason: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the dispute was reported, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		reported_at: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the dispute was reported, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		reported_date: FormControl<string | null | undefined>,

		/** The current state of this dispute. */
		state: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the dispute was last updated, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		updated_at: FormControl<string | null | undefined>,

		/** The current version of the `Dispute`. */
		version: FormControl<number | null | undefined>,
	}
	export function CreateDisputeFormGroup() {
		return new FormGroup<DisputeFormProperties>({
			brand_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			card_brand: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			due_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			reason: new FormControl<string | null | undefined>(undefined),
			reported_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			reported_date: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			state: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Represents an amount of money. `Money` fields can be signed or unsigned.
	 * Fields that do not explicitly define whether they are signed or unsigned are
	 * considered unsigned and can only hold positive amounts. For signed fields, the
	 * sign of the value indicates the purpose of the money transfer. See
	 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	 * for more information.
	 */
	export interface Money {

		/**
		 * The amount of money, in the smallest denomination of the currency
		 * indicated by `currency`. For example, when `currency` is `USD`, `amount` is
		 * in cents. Monetary amounts can be positive or negative. See the specific
		 * field description to determine the meaning of the sign in a particular case.
		 */
		amount?: number | null;

		/**
		 * The type of currency, in __ISO 4217 format__. For example, the currency
		 * code for US dollars is `USD`.
		 * See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
		 */
		currency?: string | null;
	}

	/**
	 * Represents an amount of money. `Money` fields can be signed or unsigned.
	 * Fields that do not explicitly define whether they are signed or unsigned are
	 * considered unsigned and can only hold positive amounts. For signed fields, the
	 * sign of the value indicates the purpose of the money transfer. See
	 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	 * for more information.
	 */
	export interface MoneyFormProperties {

		/**
		 * The amount of money, in the smallest denomination of the currency
		 * indicated by `currency`. For example, when `currency` is `USD`, `amount` is
		 * in cents. Monetary amounts can be positive or negative. See the specific
		 * field description to determine the meaning of the sign in a particular case.
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The type of currency, in __ISO 4217 format__. For example, the currency
		 * code for US dollars is `USD`.
		 * See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
		 */
		currency: FormControl<string | null | undefined>,
	}
	export function CreateMoneyFormGroup() {
		return new FormGroup<MoneyFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			currency: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The payment the cardholder disputed. */
	export interface DisputedPayment {

		/**
		 * Square-generated unique ID of the payment being disputed.
		 * Max length: 192
		 * Min length: 1
		 */
		payment_id?: string | null;
	}

	/** The payment the cardholder disputed. */
	export interface DisputedPaymentFormProperties {

		/**
		 * Square-generated unique ID of the payment being disputed.
		 * Max length: 192
		 * Min length: 1
		 */
		payment_id: FormControl<string | null | undefined>,
	}
	export function CreateDisputedPaymentFormGroup() {
		return new FormGroup<DisputedPaymentFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(192)]),
		});

	}


	/**
	 * Represents an error encountered during a request to the Connect API.
	 * See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.
	 */
	export interface Error {

		/**
		 * The high-level category for the error.
		 * Required
		 */
		category: string;

		/**
		 * The specific code of the error.
		 * Required
		 */
		code: string;

		/** A human-readable description of the error for debugging purposes. */
		detail?: string | null;

		/**
		 * The name of the field provided in the original request (if any) that
		 * the error pertains to.
		 */
		field?: string | null;
	}

	/**
	 * Represents an error encountered during a request to the Connect API.
	 * See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.
	 */
	export interface ErrorFormProperties {

		/**
		 * The high-level category for the error.
		 * Required
		 */
		category: FormControl<string | null | undefined>,

		/**
		 * The specific code of the error.
		 * Required
		 */
		code: FormControl<string | null | undefined>,

		/** A human-readable description of the error for debugging purposes. */
		detail: FormControl<string | null | undefined>,

		/**
		 * The name of the field provided in the original request (if any) that
		 * the error pertains to.
		 */
		field: FormControl<string | null | undefined>,
	}
	export function CreateErrorFormGroup() {
		return new FormGroup<ErrorFormProperties>({
			category: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			detail: new FormControl<string | null | undefined>(undefined),
			field: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request to accumulate points for a purchase. */
	export interface AccumulateLoyaltyPointsRequest {

		/**
		 * Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
		 * Required
		 */
		accumulate_points: LoyaltyEventAccumulatePoints;

		/**
		 * A unique string that identifies the `AccumulateLoyaltyPoints` request.
		 * Keys can be any valid string but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.
		 * Required
		 */
		location_id: string;
	}

	/** A request to accumulate points for a purchase. */
	export interface AccumulateLoyaltyPointsRequestFormProperties {

		/**
		 * A unique string that identifies the `AccumulateLoyaltyPoints` request.
		 * Keys can be any valid string but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.
		 * Required
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateAccumulateLoyaltyPointsRequestFormGroup() {
		return new FormGroup<AccumulateLoyaltyPointsRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */
	export interface LoyaltyEventAccumulatePoints {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Max length: 36
		 */
		loyalty_program_id?: string | null;

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the buyer accumulated the points.
		 * This field is returned only if the Orders API is used to process orders.
		 */
		order_id?: string | null;

		/**
		 * The number of points accumulated by the event.
		 * Minimum: 1
		 */
		points?: number | null;
	}

	/** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */
	export interface LoyaltyEventAccumulatePointsFormProperties {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Max length: 36
		 */
		loyalty_program_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the buyer accumulated the points.
		 * This field is returned only if the Orders API is used to process orders.
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The number of points accumulated by the event.
		 * Minimum: 1
		 */
		points: FormControl<number | null | undefined>,
	}
	export function CreateLoyaltyEventAccumulatePointsFormGroup() {
		return new FormGroup<LoyaltyEventAccumulatePointsFormProperties>({
			loyalty_program_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
			order_id: new FormControl<string | null | undefined>(undefined),
			points: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
		});

	}


	/** A response containing the resulting loyalty event. */
	export interface AccumulateLoyaltyPointsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Provides information about a loyalty event.
		 * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
		 */
		event?: LoyaltyEvent;
	}

	/** A response containing the resulting loyalty event. */
	export interface AccumulateLoyaltyPointsResponseFormProperties {
	}
	export function CreateAccumulateLoyaltyPointsResponseFormGroup() {
		return new FormGroup<AccumulateLoyaltyPointsResponseFormProperties>({
		});

	}


	/**
	 * Provides information about a loyalty event. 
	 * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
	 */
	export interface LoyaltyEvent {

		/** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */
		accumulate_points?: LoyaltyEventAccumulatePoints;

		/** Provides metadata when the event `type` is `ADJUST_POINTS`. */
		adjust_points?: LoyaltyEventAdjustPoints;

		/** Provides metadata when the event `type` is `CREATE_REWARD`. */
		create_reward?: LoyaltyEventCreateReward;

		/**
		 * The timestamp when the event was created, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		created_at: string;

		/** Provides metadata when the event `type` is `DELETE_REWARD`. */
		delete_reward?: LoyaltyEventDeleteReward;

		/** Provides metadata when the event `type` is `EXPIRE_POINTS`. */
		expire_points?: LoyaltyEventExpirePoints;

		/**
		 * The Square-assigned ID of the loyalty event.
		 * Required
		 * Min length: 1
		 */
		id: string;

		/** The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred. */
		location_id?: string | null;

		/**
		 * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_account_id: string;

		/** Provides metadata when the event `type` is `OTHER`. */
		other_event?: LoyaltyEventOther;

		/** Provides metadata when the event `type` is `REDEEM_REWARD`. */
		redeem_reward?: LoyaltyEventRedeemReward;

		/**
		 * Defines whether the event was generated by the Square Point of Sale.
		 * Required
		 */
		source: string;

		/**
		 * The type of the loyalty event.
		 * Required
		 */
		type: string;
	}

	/**
	 * Provides information about a loyalty event. 
	 * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
	 */
	export interface LoyaltyEventFormProperties {

		/**
		 * The timestamp when the event was created, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the loyalty event.
		 * Required
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/** The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred. */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_account_id: FormControl<string | null | undefined>,

		/**
		 * Defines whether the event was generated by the Square Point of Sale.
		 * Required
		 */
		source: FormControl<string | null | undefined>,

		/**
		 * The type of the loyalty event.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyEventFormGroup() {
		return new FormGroup<LoyaltyEventFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			loyalty_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Provides metadata when the event `type` is `ADJUST_POINTS`. */
	export interface LoyaltyEventAdjustPoints {

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Max length: 36
		 */
		loyalty_program_id?: string | null;

		/**
		 * The number of points added or removed.
		 * Required
		 */
		points: number;

		/** The reason for the adjustment of points. */
		reason?: string | null;
	}

	/** Provides metadata when the event `type` is `ADJUST_POINTS`. */
	export interface LoyaltyEventAdjustPointsFormProperties {

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Max length: 36
		 */
		loyalty_program_id: FormControl<string | null | undefined>,

		/**
		 * The number of points added or removed.
		 * Required
		 */
		points: FormControl<number | null | undefined>,

		/** The reason for the adjustment of points. */
		reason: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyEventAdjustPointsFormGroup() {
		return new FormGroup<LoyaltyEventAdjustPointsFormProperties>({
			loyalty_program_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
			points: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides metadata when the event `type` is `CREATE_REWARD`. */
	export interface LoyaltyEventCreateReward {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: string;

		/**
		 * The loyalty points used to create the reward.
		 * Required
		 * Maximum: 0
		 */
		points: number;

		/**
		 * The Square-assigned ID of the created [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		 * This field is returned only if the event source is `LOYALTY_API`.
		 * Max length: 36
		 */
		reward_id?: string | null;
	}

	/** Provides metadata when the event `type` is `CREATE_REWARD`. */
	export interface LoyaltyEventCreateRewardFormProperties {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: FormControl<string | null | undefined>,

		/**
		 * The loyalty points used to create the reward.
		 * Required
		 * Maximum: 0
		 */
		points: FormControl<number | null | undefined>,

		/**
		 * The Square-assigned ID of the created [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		 * This field is returned only if the event source is `LOYALTY_API`.
		 * Max length: 36
		 */
		reward_id: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyEventCreateRewardFormGroup() {
		return new FormGroup<LoyaltyEventCreateRewardFormProperties>({
			loyalty_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			points: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.max(0)]),
			reward_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
		});

	}


	/** Provides metadata when the event `type` is `DELETE_REWARD`. */
	export interface LoyaltyEventDeleteReward {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: string;

		/**
		 * The number of points returned to the loyalty account.
		 * Required
		 * Minimum: 0
		 */
		points: number;

		/**
		 * The ID of the deleted [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		 * This field is returned only if the event source is `LOYALTY_API`.
		 * Max length: 36
		 */
		reward_id?: string | null;
	}

	/** Provides metadata when the event `type` is `DELETE_REWARD`. */
	export interface LoyaltyEventDeleteRewardFormProperties {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: FormControl<string | null | undefined>,

		/**
		 * The number of points returned to the loyalty account.
		 * Required
		 * Minimum: 0
		 */
		points: FormControl<number | null | undefined>,

		/**
		 * The ID of the deleted [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		 * This field is returned only if the event source is `LOYALTY_API`.
		 * Max length: 36
		 */
		reward_id: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyEventDeleteRewardFormGroup() {
		return new FormGroup<LoyaltyEventDeleteRewardFormProperties>({
			loyalty_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			points: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			reward_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
		});

	}


	/** Provides metadata when the event `type` is `EXPIRE_POINTS`. */
	export interface LoyaltyEventExpirePoints {

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: string;

		/**
		 * The number of points expired.
		 * Required
		 * Maximum: 0
		 */
		points: number;
	}

	/** Provides metadata when the event `type` is `EXPIRE_POINTS`. */
	export interface LoyaltyEventExpirePointsFormProperties {

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: FormControl<string | null | undefined>,

		/**
		 * The number of points expired.
		 * Required
		 * Maximum: 0
		 */
		points: FormControl<number | null | undefined>,
	}
	export function CreateLoyaltyEventExpirePointsFormGroup() {
		return new FormGroup<LoyaltyEventExpirePointsFormProperties>({
			loyalty_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			points: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.max(0)]),
		});

	}


	/** Provides metadata when the event `type` is `OTHER`. */
	export interface LoyaltyEventOther {

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: string;

		/**
		 * The number of points added or removed.
		 * Required
		 */
		points: number;
	}

	/** Provides metadata when the event `type` is `OTHER`. */
	export interface LoyaltyEventOtherFormProperties {

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: FormControl<string | null | undefined>,

		/**
		 * The number of points added or removed.
		 * Required
		 */
		points: FormControl<number | null | undefined>,
	}
	export function CreateLoyaltyEventOtherFormGroup() {
		return new FormGroup<LoyaltyEventOtherFormProperties>({
			loyalty_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			points: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Provides metadata when the event `type` is `REDEEM_REWARD`. */
	export interface LoyaltyEventRedeemReward {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: string;

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that redeemed the reward.
		 * This field is returned only if the Orders API is used to process orders.
		 */
		order_id?: string | null;

		/**
		 * The ID of the redeemed [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		 * This field is returned only if the event source is `LOYALTY_API`.
		 * Max length: 36
		 */
		reward_id?: string | null;
	}

	/** Provides metadata when the event `type` is `REDEEM_REWARD`. */
	export interface LoyaltyEventRedeemRewardFormProperties {

		/**
		 * The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_program_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that redeemed the reward.
		 * This field is returned only if the Orders API is used to process orders.
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the redeemed [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
		 * This field is returned only if the event source is `LOYALTY_API`.
		 * Max length: 36
		 */
		reward_id: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyEventRedeemRewardFormGroup() {
		return new FormGroup<LoyaltyEventRedeemRewardFormProperties>({
			loyalty_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			order_id: new FormControl<string | null | undefined>(undefined),
			reward_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
		});

	}

	export enum ActionCancelReason { BUYER_CANCELED = 'BUYER_CANCELED', SELLER_CANCELED = 'SELLER_CANCELED', TIMED_OUT = 'TIMED_OUT' }


	/**
	 * Defines the fields that are included in the request body of
	 * a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
	 */
	export interface AddGroupToCustomerRequest {
	}

	/**
	 * Defines the fields that are included in the request body of
	 * a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
	 */
	export interface AddGroupToCustomerRequestFormProperties {
	}
	export function CreateAddGroupToCustomerRequestFormGroup() {
		return new FormGroup<AddGroupToCustomerRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
	 */
	export interface AddGroupToCustomerResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
	 */
	export interface AddGroupToCustomerResponseFormProperties {
	}
	export function CreateAddGroupToCustomerResponseFormGroup() {
		return new FormGroup<AddGroupToCustomerResponseFormProperties>({
		});

	}


	/** Represents an additional recipient (other than the merchant) receiving a portion of this tender. */
	export interface AdditionalRecipient {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * The description of the additional recipient.
		 * Max length: 100
		 */
		description?: string | null;

		/**
		 * The location ID for a recipient (other than the merchant) receiving a portion of this tender.
		 * Required
		 * Max length: 50
		 * Min length: 1
		 */
		location_id: string;

		/**
		 * The unique ID for this [AdditionalRecipientReceivable](https://developer.squareup.com/reference/square_2021-08-18/objects/AdditionalRecipientReceivable), assigned by the server.
		 * Max length: 192
		 */
		receivable_id?: string | null;
	}

	/** Represents an additional recipient (other than the merchant) receiving a portion of this tender. */
	export interface AdditionalRecipientFormProperties {

		/**
		 * The description of the additional recipient.
		 * Max length: 100
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The location ID for a recipient (other than the merchant) receiving a portion of this tender.
		 * Required
		 * Max length: 50
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The unique ID for this [AdditionalRecipientReceivable](https://developer.squareup.com/reference/square_2021-08-18/objects/AdditionalRecipientReceivable), assigned by the server.
		 * Max length: 192
		 */
		receivable_id: FormControl<string | null | undefined>,
	}
	export function CreateAdditionalRecipientFormGroup() {
		return new FormGroup<AdditionalRecipientFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]),
			receivable_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
		});

	}


	/**
	 * Represents a postal address in a country. The address format is based 
	 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
	 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
	 * This format has dedicated fields for four address components: postal code, 
	 * locality (city), administrative district (state, prefecture, or province), and 
	 * sublocality (town or village). These components have dedicated fields in the 
	 * `Address` object because software sometimes behaves differently based on them. 
	 * For example, sales tax software may charge different amounts of sales tax 
	 * based on the postal code, and some software is only available in 
	 * certain states due to compliance reasons.
	 * For the remaining address components, the `Address` type provides the 
	 * `address_line_1` and `address_line_2` fields for free-form data entry. 
	 * These fields are free-form because the remaining address components have 
	 * too many variations around the world and typical software does not parse 
	 * these components. These fields enable users to enter anything they want. 
	 * Note that, in the current implementation, all other `Address` type fields are blank. 
	 * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
	 * `administrative_district_level_2`, `administrative_district_level_3`, 
	 * `first_name`, `last_name`, and `organization`. 
	 * When it comes to localization, the seller's language preferences 
	 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
	 * are ignored for addresses. Even though Square products (such as Square Point of Sale 
	 * and the Seller Dashboard) mostly use a seller's language preference in 
	 * communication, when it comes to addresses, they will use English for a US address, 
	 * Japanese for an address in Japan, and so on.
	 */
	export interface Address {

		/**
		 * The first line of the address.
		 * Fields that start with `address_line` provide the address's most specific
		 * details, like street number, street name, and building name. They do *not*
		 * provide less specific details like city, state/province, or country (these
		 * details are provided in other fields).
		 */
		address_line_1?: string | null;

		/** The second line of the address, if any. */
		address_line_2?: string | null;

		/** The third line of the address, if any. */
		address_line_3?: string | null;

		/**
		 * A civil entity within the address's country. In the US, this
		 * is the state.
		 */
		administrative_district_level_1?: string | null;

		/**
		 * A civil entity within the address's `administrative_district_level_1`.
		 * In the US, this is the county.
		 */
		administrative_district_level_2?: string | null;

		/**
		 * A civil entity within the address's `administrative_district_level_2`,
		 * if any.
		 */
		administrative_district_level_3?: string | null;

		/** The address's country, in ISO 3166-1-alpha-2 format. */
		country?: string | null;

		/** Optional first name when it's representing recipient. */
		first_name?: string | null;

		/** Optional last name when it's representing recipient. */
		last_name?: string | null;

		/** The city or town of the address. */
		locality?: string | null;

		/** Optional organization name when it's representing recipient. */
		organization?: string | null;

		/** The address's postal code. */
		postal_code?: string | null;

		/** A civil region within the address's `locality`, if any. */
		sublocality?: string | null;

		/** A civil region within the address's `sublocality`, if any. */
		sublocality_2?: string | null;

		/** A civil region within the address's `sublocality_2`, if any. */
		sublocality_3?: string | null;
	}

	/**
	 * Represents a postal address in a country. The address format is based 
	 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
	 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
	 * This format has dedicated fields for four address components: postal code, 
	 * locality (city), administrative district (state, prefecture, or province), and 
	 * sublocality (town or village). These components have dedicated fields in the 
	 * `Address` object because software sometimes behaves differently based on them. 
	 * For example, sales tax software may charge different amounts of sales tax 
	 * based on the postal code, and some software is only available in 
	 * certain states due to compliance reasons.
	 * For the remaining address components, the `Address` type provides the 
	 * `address_line_1` and `address_line_2` fields for free-form data entry. 
	 * These fields are free-form because the remaining address components have 
	 * too many variations around the world and typical software does not parse 
	 * these components. These fields enable users to enter anything they want. 
	 * Note that, in the current implementation, all other `Address` type fields are blank. 
	 * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
	 * `administrative_district_level_2`, `administrative_district_level_3`, 
	 * `first_name`, `last_name`, and `organization`. 
	 * When it comes to localization, the seller's language preferences 
	 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
	 * are ignored for addresses. Even though Square products (such as Square Point of Sale 
	 * and the Seller Dashboard) mostly use a seller's language preference in 
	 * communication, when it comes to addresses, they will use English for a US address, 
	 * Japanese for an address in Japan, and so on.
	 */
	export interface AddressFormProperties {

		/**
		 * The first line of the address.
		 * Fields that start with `address_line` provide the address's most specific
		 * details, like street number, street name, and building name. They do *not*
		 * provide less specific details like city, state/province, or country (these
		 * details are provided in other fields).
		 */
		address_line_1: FormControl<string | null | undefined>,

		/** The second line of the address, if any. */
		address_line_2: FormControl<string | null | undefined>,

		/** The third line of the address, if any. */
		address_line_3: FormControl<string | null | undefined>,

		/**
		 * A civil entity within the address's country. In the US, this
		 * is the state.
		 */
		administrative_district_level_1: FormControl<string | null | undefined>,

		/**
		 * A civil entity within the address's `administrative_district_level_1`.
		 * In the US, this is the county.
		 */
		administrative_district_level_2: FormControl<string | null | undefined>,

		/**
		 * A civil entity within the address's `administrative_district_level_2`,
		 * if any.
		 */
		administrative_district_level_3: FormControl<string | null | undefined>,

		/** The address's country, in ISO 3166-1-alpha-2 format. */
		country: FormControl<string | null | undefined>,

		/** Optional first name when it's representing recipient. */
		first_name: FormControl<string | null | undefined>,

		/** Optional last name when it's representing recipient. */
		last_name: FormControl<string | null | undefined>,

		/** The city or town of the address. */
		locality: FormControl<string | null | undefined>,

		/** Optional organization name when it's representing recipient. */
		organization: FormControl<string | null | undefined>,

		/** The address's postal code. */
		postal_code: FormControl<string | null | undefined>,

		/** A civil region within the address's `locality`, if any. */
		sublocality: FormControl<string | null | undefined>,

		/** A civil region within the address's `sublocality`, if any. */
		sublocality_2: FormControl<string | null | undefined>,

		/** A civil region within the address's `sublocality_2`, if any. */
		sublocality_3: FormControl<string | null | undefined>,
	}
	export function CreateAddressFormGroup() {
		return new FormGroup<AddressFormProperties>({
			address_line_1: new FormControl<string | null | undefined>(undefined),
			address_line_2: new FormControl<string | null | undefined>(undefined),
			address_line_3: new FormControl<string | null | undefined>(undefined),
			administrative_district_level_1: new FormControl<string | null | undefined>(undefined),
			administrative_district_level_2: new FormControl<string | null | undefined>(undefined),
			administrative_district_level_3: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			locality: new FormControl<string | null | undefined>(undefined),
			organization: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			sublocality: new FormControl<string | null | undefined>(undefined),
			sublocality_2: new FormControl<string | null | undefined>(undefined),
			sublocality_3: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request to adjust (add or subtract) points manually. */
	export interface AdjustLoyaltyPointsRequest {

		/**
		 * Provides metadata when the event `type` is `ADJUST_POINTS`.
		 * Required
		 */
		adjust_points: LoyaltyEventAdjustPoints;

		/**
		 * A unique string that identifies this `AdjustLoyaltyPoints` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;
	}

	/** A request to adjust (add or subtract) points manually. */
	export interface AdjustLoyaltyPointsRequestFormProperties {

		/**
		 * A unique string that identifies this `AdjustLoyaltyPoints` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateAdjustLoyaltyPointsRequestFormGroup() {
		return new FormGroup<AdjustLoyaltyPointsRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
		});

	}


	/**
	 * A response that includes the loyalty event that 
	 * resulted from the successful API call.
	 */
	export interface AdjustLoyaltyPointsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Provides information about a loyalty event.
		 * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
		 */
		event?: LoyaltyEvent;
	}

	/**
	 * A response that includes the loyalty event that 
	 * resulted from the successful API call.
	 */
	export interface AdjustLoyaltyPointsResponseFormProperties {
	}
	export function CreateAdjustLoyaltyPointsResponseFormGroup() {
		return new FormGroup<AdjustLoyaltyPointsResponseFormProperties>({
		});

	}


	/** Defines an appointment segment of a booking. */
	export interface AppointmentSegment {

		/**
		 * The time span in minutes of an appointment segment.
		 * Required
		 * Minimum: 0
		 * Maximum: 1500
		 */
		duration_minutes: number;

		/**
		 * The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) object representing the service booked in this segment.
		 * Required
		 * Min length: 1
		 */
		service_variation_id: string;

		/**
		 * The current version of the item variation representing the service booked in this segment.
		 * Required
		 */
		service_variation_version: number;

		/**
		 * The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object representing the team member booked in this segment.
		 * Required
		 * Min length: 1
		 */
		team_member_id: string;
	}

	/** Defines an appointment segment of a booking. */
	export interface AppointmentSegmentFormProperties {

		/**
		 * The time span in minutes of an appointment segment.
		 * Required
		 * Minimum: 0
		 * Maximum: 1500
		 */
		duration_minutes: FormControl<number | null | undefined>,

		/**
		 * The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) object representing the service booked in this segment.
		 * Required
		 * Min length: 1
		 */
		service_variation_id: FormControl<string | null | undefined>,

		/**
		 * The current version of the item variation representing the service booked in this segment.
		 * Required
		 */
		service_variation_version: FormControl<number | null | undefined>,

		/**
		 * The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object representing the team member booked in this segment.
		 * Required
		 * Min length: 1
		 */
		team_member_id: FormControl<string | null | undefined>,
	}
	export function CreateAppointmentSegmentFormGroup() {
		return new FormGroup<AppointmentSegmentFormProperties>({
			duration_minutes: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(1500)]),
			service_variation_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			service_variation_version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			team_member_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Describes a slot available for booking, encapsulating appointment segments, the location and starting time. */
	export interface Availability {

		/** The list of appointment segments available for booking */
		appointment_segments?: Array<AppointmentSegment>;

		/** The ID of the location available for booking. */
		location_id?: string | null;

		/** The RFC 3339 timestamp specifying the beginning time of the slot available for booking. */
		start_at?: string | null;
	}

	/** Describes a slot available for booking, encapsulating appointment segments, the location and starting time. */
	export interface AvailabilityFormProperties {

		/** The ID of the location available for booking. */
		location_id: FormControl<string | null | undefined>,

		/** The RFC 3339 timestamp specifying the beginning time of the slot available for booking. */
		start_at: FormControl<string | null | undefined>,
	}
	export function CreateAvailabilityFormGroup() {
		return new FormGroup<AvailabilityFormProperties>({
			location_id: new FormControl<string | null | undefined>(undefined),
			start_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a bank account. For more information about 
	 * linking a bank account to a Square account, see 
	 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
	 */
	export interface BankAccount {

		/**
		 * The last few digits of the account number.
		 * Required
		 * Min length: 1
		 */
		account_number_suffix: string;

		/**
		 * The financial purpose of the associated bank account.
		 * Required
		 */
		account_type: string;

		/**
		 * Read only. Name of actual financial institution.
		 * For example "Bank of America".
		 * Max length: 100
		 */
		bank_name?: string | null;

		/**
		 * The ISO 3166 Alpha-2 country code where the bank account is based.
		 * Required
		 */
		country: string;

		/**
		 * Indicates whether it is possible for Square to send money to this bank account.
		 * Required
		 */
		creditable: boolean;

		/**
		 * The 3-character ISO 4217 currency code indicating the operating
		 * currency of the bank account. For example, the currency code for US dollars
		 * is `USD`.
		 * Required
		 */
		currency: string;

		/**
		 * Reference identifier that will be displayed to UK bank account owners
		 * when collecting direct debit authorization. Only required for UK bank accounts.
		 */
		debit_mandate_reference_id?: string | null;

		/**
		 * Indicates whether it is possible for Square to take money from this
		 * bank account.
		 * Required
		 */
		debitable: boolean;

		/**
		 * A Square-assigned, unique identifier for the bank account based on the
		 * account information. The account fingerprint can be used to compare account
		 * entries and determine if the they represent the same real-world bank account.
		 */
		fingerprint?: string | null;

		/**
		 * Name of the account holder. This name must match the name
		 * on the targeted bank account record.
		 * Required
		 * Min length: 1
		 */
		holder_name: string;

		/**
		 * The unique, Square-issued identifier for the bank account.
		 * Required
		 * Max length: 30
		 * Min length: 1
		 */
		id: string;

		/** The location to which the bank account belongs. */
		location_id?: string | null;

		/**
		 * Primary identifier for the bank. For more information, see
		 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		 * Required
		 * Max length: 40
		 */
		primary_bank_identification_number: string;

		/**
		 * Client-provided identifier for linking the banking account to an entity
		 * in a third-party system (for example, a bank account number or a user identifier).
		 */
		reference_id?: string | null;

		/**
		 * Secondary identifier for the bank. For more information, see
		 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		 * Max length: 40
		 */
		secondary_bank_identification_number?: string | null;

		/**
		 * Read-only. The current verification status of this BankAccount object.
		 * Required
		 */
		status: string;

		/** The current version of the `BankAccount`. */
		version?: number | null;
	}

	/**
	 * Represents a bank account. For more information about 
	 * linking a bank account to a Square account, see 
	 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
	 */
	export interface BankAccountFormProperties {

		/**
		 * The last few digits of the account number.
		 * Required
		 * Min length: 1
		 */
		account_number_suffix: FormControl<string | null | undefined>,

		/**
		 * The financial purpose of the associated bank account.
		 * Required
		 */
		account_type: FormControl<string | null | undefined>,

		/**
		 * Read only. Name of actual financial institution.
		 * For example "Bank of America".
		 * Max length: 100
		 */
		bank_name: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166 Alpha-2 country code where the bank account is based.
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * Indicates whether it is possible for Square to send money to this bank account.
		 * Required
		 */
		creditable: FormControl<boolean | null | undefined>,

		/**
		 * The 3-character ISO 4217 currency code indicating the operating
		 * currency of the bank account. For example, the currency code for US dollars
		 * is `USD`.
		 * Required
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * Reference identifier that will be displayed to UK bank account owners
		 * when collecting direct debit authorization. Only required for UK bank accounts.
		 */
		debit_mandate_reference_id: FormControl<string | null | undefined>,

		/**
		 * Indicates whether it is possible for Square to take money from this
		 * bank account.
		 * Required
		 */
		debitable: FormControl<boolean | null | undefined>,

		/**
		 * A Square-assigned, unique identifier for the bank account based on the
		 * account information. The account fingerprint can be used to compare account
		 * entries and determine if the they represent the same real-world bank account.
		 */
		fingerprint: FormControl<string | null | undefined>,

		/**
		 * Name of the account holder. This name must match the name
		 * on the targeted bank account record.
		 * Required
		 * Min length: 1
		 */
		holder_name: FormControl<string | null | undefined>,

		/**
		 * The unique, Square-issued identifier for the bank account.
		 * Required
		 * Max length: 30
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/** The location to which the bank account belongs. */
		location_id: FormControl<string | null | undefined>,

		/**
		 * Primary identifier for the bank. For more information, see
		 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		 * Required
		 * Max length: 40
		 */
		primary_bank_identification_number: FormControl<string | null | undefined>,

		/**
		 * Client-provided identifier for linking the banking account to an entity
		 * in a third-party system (for example, a bank account number or a user identifier).
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * Secondary identifier for the bank. For more information, see
		 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		 * Max length: 40
		 */
		secondary_bank_identification_number: FormControl<string | null | undefined>,

		/**
		 * Read-only. The current verification status of this BankAccount object.
		 * Required
		 */
		status: FormControl<string | null | undefined>,

		/** The current version of the `BankAccount`. */
		version: FormControl<number | null | undefined>,
	}
	export function CreateBankAccountFormGroup() {
		return new FormGroup<BankAccountFormProperties>({
			account_number_suffix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			account_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bank_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			creditable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debit_mandate_reference_id: new FormControl<string | null | undefined>(undefined),
			debitable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			fingerprint: new FormControl<string | null | undefined>(undefined),
			holder_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(30)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			primary_bank_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(40)]),
			reference_id: new FormControl<string | null | undefined>(undefined),
			secondary_bank_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Additional details about BANK_ACCOUNT type payments. */
	export interface BankAccountPaymentDetails {

		/**
		 * The ownership type of the bank account performing the transfer.
		 * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
		 * Max length: 50
		 */
		account_ownership_type?: string | null;

		/** ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`. */
		ach_details?: ACHDetails;

		/**
		 * The name of the bank associated with the bank account.
		 * Max length: 100
		 */
		bank_name?: string | null;

		/**
		 * The two-letter ISO code representing the country the bank account is located in.
		 * Max length: 2
		 * Min length: 2
		 */
		country?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Uniquely identifies the bank account for this seller and can be used
		 * to determine if payments are from the same bank account.
		 * Max length: 255
		 */
		fingerprint?: string | null;

		/**
		 * The statement description as sent to the bank.
		 * Max length: 1000
		 */
		statement_description?: string | null;

		/**
		 * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
		 * Max length: 50
		 */
		transfer_type?: string | null;
	}

	/** Additional details about BANK_ACCOUNT type payments. */
	export interface BankAccountPaymentDetailsFormProperties {

		/**
		 * The ownership type of the bank account performing the transfer.
		 * The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
		 * Max length: 50
		 */
		account_ownership_type: FormControl<string | null | undefined>,

		/**
		 * The name of the bank associated with the bank account.
		 * Max length: 100
		 */
		bank_name: FormControl<string | null | undefined>,

		/**
		 * The two-letter ISO code representing the country the bank account is located in.
		 * Max length: 2
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * Uniquely identifies the bank account for this seller and can be used
		 * to determine if payments are from the same bank account.
		 * Max length: 255
		 */
		fingerprint: FormControl<string | null | undefined>,

		/**
		 * The statement description as sent to the bank.
		 * Max length: 1000
		 */
		statement_description: FormControl<string | null | undefined>,

		/**
		 * The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
		 * Max length: 50
		 */
		transfer_type: FormControl<string | null | undefined>,
	}
	export function CreateBankAccountPaymentDetailsFormGroup() {
		return new FormGroup<BankAccountPaymentDetailsFormProperties>({
			account_ownership_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			bank_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(2)]),
			fingerprint: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			statement_description: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			transfer_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
		});

	}


	/** Indicates the current verification status of a `BankAccount` object. */
	export enum BankAccountStatus { VERIFICATION_IN_PROGRESS = 'VERIFICATION_IN_PROGRESS', VERIFIED = 'VERIFIED', DISABLED = 'DISABLED' }


	/** Indicates the financial purpose of the bank account. */
	export enum BankAccountType { CHECKING = 'CHECKING', SAVINGS = 'SAVINGS', INVESTMENT = 'INVESTMENT', OTHER = 'OTHER', BUSINESS_CHECKING = 'BUSINESS_CHECKING' }

	export interface BatchChangeInventoryRequest {

		/**
		 * The set of physical counts and inventory adjustments to be made.
		 * Changes are applied based on the client-supplied timestamp and may be sent
		 * out of order.
		 */
		changes?: Array<InventoryChange>;

		/**
		 * A client-supplied, universally unique identifier (UUID) for the
		 * request.
		 * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the
		 * [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more
		 * information.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * Indicates whether the current physical count should be ignored if
		 * the quantity is unchanged since the last physical count. Default: `true`.
		 */
		ignore_unchanged_counts?: boolean | null;
	}
	export interface BatchChangeInventoryRequestFormProperties {

		/**
		 * A client-supplied, universally unique identifier (UUID) for the
		 * request.
		 * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the
		 * [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more
		 * information.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * Indicates whether the current physical count should be ignored if
		 * the quantity is unchanged since the last physical count. Default: `true`.
		 */
		ignore_unchanged_counts: FormControl<boolean | null | undefined>,
	}
	export function CreateBatchChangeInventoryRequestFormGroup() {
		return new FormGroup<BatchChangeInventoryRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			ignore_unchanged_counts: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a single physical count, inventory, adjustment, or transfer
	 * that is part of the history of inventory changes for a particular
	 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
	 */
	export interface InventoryChange {

		/**
		 * Represents a change in state or quantity of product inventory at a
		 * particular time and location.
		 */
		adjustment?: InventoryAdjustment;

		/**
		 * Represents the unit used to measure a `CatalogItemVariation` and
		 * specifies the precision for decimal quantities.
		 */
		measurement_unit?: CatalogMeasurementUnit;

		/** The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change. */
		measurement_unit_id?: string | null;

		/**
		 * Represents the quantity of an item variation that is physically present
		 * at a specific location, verified by a seller or a seller's employee. For example,
		 * a physical count might come from an employee counting the item variations on
		 * hand or from syncing with an external system.
		 */
		physical_count?: InventoryPhysicalCount;

		/**
		 * Represents the transfer of a quantity of product inventory at a
		 * particular time from one location to another.
		 */
		transfer?: InventoryTransfer;

		/**
		 * Indicates how the inventory change is applied. See
		 * [InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.
		 */
		type?: string | null;
	}

	/**
	 * Represents a single physical count, inventory, adjustment, or transfer
	 * that is part of the history of inventory changes for a particular
	 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
	 */
	export interface InventoryChangeFormProperties {

		/** The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change. */
		measurement_unit_id: FormControl<string | null | undefined>,

		/**
		 * Indicates how the inventory change is applied. See
		 * [InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateInventoryChangeFormGroup() {
		return new FormGroup<InventoryChangeFormProperties>({
			measurement_unit_id: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a change in state or quantity of product inventory at a
	 * particular time and location.
	 */
	export interface InventoryAdjustment {
		adjustment_group?: InventoryAdjustmentGroup;

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id?: string | null;

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type?: string | null;

		/**
		 * An RFC 3339-formatted timestamp that indicates when the inventory adjustment is received.
		 * Max length: 34
		 */
		created_at?: string | null;

		/**
		 * The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		 * inventory adjustment.
		 * Max length: 100
		 */
		employee_id?: string | null;

		/**
		 * The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
		 * of items before the adjustment.
		 */
		from_state?: string | null;

		/**
		 * The Square-generated ID of the goods receipt that caused the
		 * adjustment. Only relevant for state transitions from the Square for Retail
		 * app.
		 * Max length: 100
		 */
		goods_receipt_id?: string | null;

		/**
		 * A unique ID generated by Square for the
		 * `InventoryAdjustment`.
		 * Max length: 100
		 */
		id?: string | null;

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items is being tracked.
		 * Max length: 100
		 */
		location_id?: string | null;

		/**
		 * A client-generated RFC 3339-formatted timestamp that indicates when
		 * the inventory adjustment took place. For inventory adjustment updates, the `occurred_at`
		 * timestamp cannot be older than 24 hours or in the future relative to the
		 * time of the request.
		 * Max length: 34
		 */
		occurred_at?: string | null;

		/**
		 * The Square-generated ID of the purchase order that caused the
		 * adjustment. Only relevant for state transitions from the Square for Retail
		 * app.
		 * Max length: 100
		 */
		purchase_order_id?: string | null;

		/**
		 * The number of items affected by the adjustment as a decimal string.
		 * Can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity?: string | null;

		/**
		 * An optional ID provided by the application to tie the
		 * `InventoryAdjustment` to an external
		 * system.
		 * Max length: 255
		 */
		reference_id?: string | null;

		/**
		 * The Square-generated ID of the [Refund][#type-refund] that
		 * caused the adjustment. Only relevant for refund-related state
		 * transitions.
		 * Max length: 255
		 */
		refund_id?: string | null;

		/** Provides information about the application used to generate a change. */
		source?: SourceApplication;

		/**
		 * The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
		 * of items after the adjustment.
		 */
		to_state?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_price_money?: Money;

		/**
		 * The Square-generated ID of the [Transaction][#type-transaction] that
		 * caused the adjustment. Only relevant for payment-related state
		 * transitions.
		 * Max length: 255
		 */
		transaction_id?: string | null;
	}

	/**
	 * Represents a change in state or quantity of product inventory at a
	 * particular time and location.
	 */
	export interface InventoryAdjustmentFormProperties {

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type: FormControl<string | null | undefined>,

		/**
		 * An RFC 3339-formatted timestamp that indicates when the inventory adjustment is received.
		 * Max length: 34
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		 * inventory adjustment.
		 * Max length: 100
		 */
		employee_id: FormControl<string | null | undefined>,

		/**
		 * The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
		 * of items before the adjustment.
		 */
		from_state: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the goods receipt that caused the
		 * adjustment. Only relevant for state transitions from the Square for Retail
		 * app.
		 * Max length: 100
		 */
		goods_receipt_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID generated by Square for the
		 * `InventoryAdjustment`.
		 * Max length: 100
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items is being tracked.
		 * Max length: 100
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * A client-generated RFC 3339-formatted timestamp that indicates when
		 * the inventory adjustment took place. For inventory adjustment updates, the `occurred_at`
		 * timestamp cannot be older than 24 hours or in the future relative to the
		 * time of the request.
		 * Max length: 34
		 */
		occurred_at: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the purchase order that caused the
		 * adjustment. Only relevant for state transitions from the Square for Retail
		 * app.
		 * Max length: 100
		 */
		purchase_order_id: FormControl<string | null | undefined>,

		/**
		 * The number of items affected by the adjustment as a decimal string.
		 * Can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity: FormControl<string | null | undefined>,

		/**
		 * An optional ID provided by the application to tie the
		 * `InventoryAdjustment` to an external
		 * system.
		 * Max length: 255
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Refund][#type-refund] that
		 * caused the adjustment. Only relevant for refund-related state
		 * transitions.
		 * Max length: 255
		 */
		refund_id: FormControl<string | null | undefined>,

		/**
		 * The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
		 * of items after the adjustment.
		 */
		to_state: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Transaction][#type-transaction] that
		 * caused the adjustment. Only relevant for payment-related state
		 * transitions.
		 * Max length: 255
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInventoryAdjustmentFormGroup() {
		return new FormGroup<InventoryAdjustmentFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			catalog_object_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(14)]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(34)]),
			employee_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			from_state: new FormControl<string | null | undefined>(undefined),
			goods_receipt_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			occurred_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(34)]),
			purchase_order_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			quantity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(26)]),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			refund_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			to_state: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}

	export interface InventoryAdjustmentGroup {

		/**
		 * Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
		 * there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`.
		 * Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.
		 */
		from_state?: string | null;

		/**
		 * A unique ID generated by Square for the
		 * `InventoryAdjustmentGroup`.
		 * Max length: 100
		 */
		id?: string | null;

		/**
		 * The inventory adjustment of the composed variation.
		 * Max length: 100
		 */
		root_adjustment_id?: string | null;

		/**
		 * Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
		 * the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`.
		 * Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
		 */
		to_state?: string | null;
	}
	export interface InventoryAdjustmentGroupFormProperties {

		/**
		 * Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
		 * there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`.
		 * Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.
		 */
		from_state: FormControl<string | null | undefined>,

		/**
		 * A unique ID generated by Square for the
		 * `InventoryAdjustmentGroup`.
		 * Max length: 100
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The inventory adjustment of the composed variation.
		 * Max length: 100
		 */
		root_adjustment_id: FormControl<string | null | undefined>,

		/**
		 * Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
		 * the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`.
		 * Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
		 */
		to_state: FormControl<string | null | undefined>,
	}
	export function CreateInventoryAdjustmentGroupFormGroup() {
		return new FormGroup<InventoryAdjustmentGroupFormProperties>({
			from_state: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			root_adjustment_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			to_state: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides information about the application used to generate a change. */
	export interface SourceApplication {

		/**
		 * Read-only Square ID assigned to the application. Only used for
		 * [Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type `EXTERNAL_API`.
		 */
		application_id?: string | null;

		/**
		 * Read-only display name assigned to the application
		 * (e.g. `"Custom Application"`, `"Square POS 4.74 for Android"`).
		 */
		name?: string | null;

		/** Read-only [Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type for the application. */
		product?: string | null;
	}

	/** Provides information about the application used to generate a change. */
	export interface SourceApplicationFormProperties {

		/**
		 * Read-only Square ID assigned to the application. Only used for
		 * [Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type `EXTERNAL_API`.
		 */
		application_id: FormControl<string | null | undefined>,

		/**
		 * Read-only display name assigned to the application
		 * (e.g. `"Custom Application"`, `"Square POS 4.74 for Android"`).
		 */
		name: FormControl<string | null | undefined>,

		/** Read-only [Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type for the application. */
		product: FormControl<string | null | undefined>,
	}
	export function CreateSourceApplicationFormGroup() {
		return new FormGroup<SourceApplicationFormProperties>({
			application_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			product: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents the unit used to measure a `CatalogItemVariation` and
	 * specifies the precision for decimal quantities.
	 */
	export interface CatalogMeasurementUnit {

		/**
		 * Represents a unit of measurement to use with a quantity, such as ounces
		 * or inches. Exactly one of the following fields are required: `custom_unit`,
		 * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
		 */
		measurement_unit?: MeasurementUnit;

		/**
		 * An integer between 0 and 5 that represents the maximum number of
		 * positions allowed after the decimal in quantities measured with this unit.
		 * For example:
		 * - if the precision is 0, the quantity can be 1, 2, 3, etc.
		 * - if the precision is 1, the quantity can be 0.1, 0.2, etc.
		 * - if the precision is 2, the quantity can be 0.01, 0.12, etc.
		 * Default: 3
		 */
		precision?: number | null;
	}

	/**
	 * Represents the unit used to measure a `CatalogItemVariation` and
	 * specifies the precision for decimal quantities.
	 */
	export interface CatalogMeasurementUnitFormProperties {

		/**
		 * An integer between 0 and 5 that represents the maximum number of
		 * positions allowed after the decimal in quantities measured with this unit.
		 * For example:
		 * - if the precision is 0, the quantity can be 1, 2, 3, etc.
		 * - if the precision is 1, the quantity can be 0.1, 0.2, etc.
		 * - if the precision is 2, the quantity can be 0.01, 0.12, etc.
		 * Default: 3
		 */
		precision: FormControl<number | null | undefined>,
	}
	export function CreateCatalogMeasurementUnitFormGroup() {
		return new FormGroup<CatalogMeasurementUnitFormProperties>({
			precision: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a unit of measurement to use with a quantity, such as ounces
	 * or inches. Exactly one of the following fields are required: `custom_unit`,
	 * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
	 */
	export interface MeasurementUnit {

		/** Represents a standard area unit. */
		area_unit?: string | null;

		/** The information needed to define a custom unit, provided by the seller. */
		custom_unit?: MeasurementUnitCustom;

		/** Reserved for API integrations that lack the ability to specify a real measurement unit */
		generic_unit?: string | null;

		/** Represents a standard length unit. */
		length_unit?: string | null;

		/** Represents a standard unit of time. */
		time_unit?: string | null;

		/** Represents the type of the measurement unit. */
		type?: string | null;

		/** Represents a standard volume unit. */
		volume_unit?: string | null;

		/** Represents a standard unit of weight or mass. */
		weight_unit?: string | null;
	}

	/**
	 * Represents a unit of measurement to use with a quantity, such as ounces
	 * or inches. Exactly one of the following fields are required: `custom_unit`,
	 * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
	 */
	export interface MeasurementUnitFormProperties {

		/** Represents a standard area unit. */
		area_unit: FormControl<string | null | undefined>,

		/** Reserved for API integrations that lack the ability to specify a real measurement unit */
		generic_unit: FormControl<string | null | undefined>,

		/** Represents a standard length unit. */
		length_unit: FormControl<string | null | undefined>,

		/** Represents a standard unit of time. */
		time_unit: FormControl<string | null | undefined>,

		/** Represents the type of the measurement unit. */
		type: FormControl<string | null | undefined>,

		/** Represents a standard volume unit. */
		volume_unit: FormControl<string | null | undefined>,

		/** Represents a standard unit of weight or mass. */
		weight_unit: FormControl<string | null | undefined>,
	}
	export function CreateMeasurementUnitFormGroup() {
		return new FormGroup<MeasurementUnitFormProperties>({
			area_unit: new FormControl<string | null | undefined>(undefined),
			generic_unit: new FormControl<string | null | undefined>(undefined),
			length_unit: new FormControl<string | null | undefined>(undefined),
			time_unit: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			volume_unit: new FormControl<string | null | undefined>(undefined),
			weight_unit: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The information needed to define a custom unit, provided by the seller. */
	export interface MeasurementUnitCustom {

		/**
		 * The abbreviation of the custom unit, such as "bsh" (bushel). This appears
		 * in the cart for the Point of Sale app, and in reports.
		 * Required
		 */
		abbreviation: string;

		/**
		 * The name of the custom unit, for example "bushel".
		 * Required
		 */
		name: string;
	}

	/** The information needed to define a custom unit, provided by the seller. */
	export interface MeasurementUnitCustomFormProperties {

		/**
		 * The abbreviation of the custom unit, such as "bsh" (bushel). This appears
		 * in the cart for the Point of Sale app, and in reports.
		 * Required
		 */
		abbreviation: FormControl<string | null | undefined>,

		/**
		 * The name of the custom unit, for example "bushel".
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateMeasurementUnitCustomFormGroup() {
		return new FormGroup<MeasurementUnitCustomFormProperties>({
			abbreviation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Represents the quantity of an item variation that is physically present
	 * at a specific location, verified by a seller or a seller's employee. For example,
	 * a physical count might come from an employee counting the item variations on
	 * hand or from syncing with an external system.
	 */
	export interface InventoryPhysicalCount {

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id?: string | null;

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type?: string | null;

		/**
		 * An RFC 3339-formatted timestamp that indicates when the physical count is received.
		 * Max length: 34
		 */
		created_at?: string | null;

		/**
		 * The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		 * physical count.
		 * Max length: 100
		 */
		employee_id?: string | null;

		/**
		 * A unique Square-generated ID for the
		 * [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount).
		 * Max length: 100
		 */
		id?: string | null;

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items is being tracked.
		 * Max length: 100
		 */
		location_id?: string | null;

		/**
		 * A client-generated RFC 3339-formatted timestamp that indicates when
		 * the physical count was examined. For physical count updates, the `occurred_at`
		 * timestamp cannot be older than 24 hours or in the future relative to the
		 * time of the request.
		 * Max length: 34
		 */
		occurred_at?: string | null;

		/**
		 * The number of items affected by the physical count as a decimal string.
		 * The number can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity?: string | null;

		/**
		 * An optional ID provided by the application to tie the
		 * [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to an external
		 * system.
		 * Max length: 255
		 */
		reference_id?: string | null;

		/** Provides information about the application used to generate a change. */
		source?: SourceApplication;

		/**
		 * The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
		 * quantity of items.
		 */
		state?: string | null;
	}

	/**
	 * Represents the quantity of an item variation that is physically present
	 * at a specific location, verified by a seller or a seller's employee. For example,
	 * a physical count might come from an employee counting the item variations on
	 * hand or from syncing with an external system.
	 */
	export interface InventoryPhysicalCountFormProperties {

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type: FormControl<string | null | undefined>,

		/**
		 * An RFC 3339-formatted timestamp that indicates when the physical count is received.
		 * Max length: 34
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		 * physical count.
		 * Max length: 100
		 */
		employee_id: FormControl<string | null | undefined>,

		/**
		 * A unique Square-generated ID for the
		 * [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount).
		 * Max length: 100
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items is being tracked.
		 * Max length: 100
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * A client-generated RFC 3339-formatted timestamp that indicates when
		 * the physical count was examined. For physical count updates, the `occurred_at`
		 * timestamp cannot be older than 24 hours or in the future relative to the
		 * time of the request.
		 * Max length: 34
		 */
		occurred_at: FormControl<string | null | undefined>,

		/**
		 * The number of items affected by the physical count as a decimal string.
		 * The number can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity: FormControl<string | null | undefined>,

		/**
		 * An optional ID provided by the application to tie the
		 * [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to an external
		 * system.
		 * Max length: 255
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
		 * quantity of items.
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateInventoryPhysicalCountFormGroup() {
		return new FormGroup<InventoryPhysicalCountFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			catalog_object_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(14)]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(34)]),
			employee_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			occurred_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(34)]),
			quantity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(26)]),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents the transfer of a quantity of product inventory at a
	 * particular time from one location to another.
	 */
	export interface InventoryTransfer {

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id?: string | null;

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type?: string | null;

		/**
		 * An RFC 3339-formatted timestamp that indicates when Square
		 * received the transfer request.
		 * Max length: 34
		 */
		created_at?: string | null;

		/**
		 * The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		 * inventory transfer.
		 * Max length: 100
		 */
		employee_id?: string | null;

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items was tracked before the transfer.
		 * Max length: 100
		 */
		from_location_id?: string | null;

		/**
		 * A unique ID generated by Square for the
		 * `InventoryTransfer`.
		 * Max length: 100
		 */
		id?: string | null;

		/**
		 * A client-generated RFC 3339-formatted timestamp that indicates when
		 * the transfer took place. For write actions, the `occurred_at` timestamp
		 * cannot be older than 24 hours or in the future relative to the time of the
		 * request.
		 * Max length: 34
		 */
		occurred_at?: string | null;

		/**
		 * The number of items affected by the transfer as a decimal string.
		 * Can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity?: string | null;

		/**
		 * An optional ID provided by the application to tie the
		 * `InventoryTransfer` to an external system.
		 * Max length: 255
		 */
		reference_id?: string | null;

		/** Provides information about the application used to generate a change. */
		source?: SourceApplication;

		/**
		 * The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the quantity of
		 * items being transferred.
		 */
		state?: string | null;

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items was tracked after the transfer.
		 * Max length: 100
		 */
		to_location_id?: string | null;
	}

	/**
	 * Represents the transfer of a quantity of product inventory at a
	 * particular time from one location to another.
	 */
	export interface InventoryTransferFormProperties {

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type: FormControl<string | null | undefined>,

		/**
		 * An RFC 3339-formatted timestamp that indicates when Square
		 * received the transfer request.
		 * Max length: 34
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
		 * inventory transfer.
		 * Max length: 100
		 */
		employee_id: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items was tracked before the transfer.
		 * Max length: 100
		 */
		from_location_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID generated by Square for the
		 * `InventoryTransfer`.
		 * Max length: 100
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A client-generated RFC 3339-formatted timestamp that indicates when
		 * the transfer took place. For write actions, the `occurred_at` timestamp
		 * cannot be older than 24 hours or in the future relative to the time of the
		 * request.
		 * Max length: 34
		 */
		occurred_at: FormControl<string | null | undefined>,

		/**
		 * The number of items affected by the transfer as a decimal string.
		 * Can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity: FormControl<string | null | undefined>,

		/**
		 * An optional ID provided by the application to tie the
		 * `InventoryTransfer` to an external system.
		 * Max length: 255
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the quantity of
		 * items being transferred.
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items was tracked after the transfer.
		 * Max length: 100
		 */
		to_location_id: FormControl<string | null | undefined>,
	}
	export function CreateInventoryTransferFormGroup() {
		return new FormGroup<InventoryTransferFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			catalog_object_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(14)]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(34)]),
			employee_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			from_location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			occurred_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(34)]),
			quantity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(26)]),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			state: new FormControl<string | null | undefined>(undefined),
			to_location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
		});

	}

	export interface BatchChangeInventoryResponse {

		/** Changes created for the request. */
		changes?: Array<InventoryChange>;

		/** The current counts for all objects referenced in the request. */
		counts?: Array<InventoryCount>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface BatchChangeInventoryResponseFormProperties {
	}
	export function CreateBatchChangeInventoryResponseFormGroup() {
		return new FormGroup<BatchChangeInventoryResponseFormProperties>({
		});

	}


	/**
	 * Represents Square-estimated quantity of items in a particular state at a
	 * particular seller location based on the known history of physical counts and
	 * inventory adjustments.
	 */
	export interface InventoryCount {

		/**
		 * An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting
		 * the estimated count is received.
		 * Max length: 34
		 */
		calculated_at?: string | null;

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id?: string | null;

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type?: string | null;

		/**
		 * Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of
		 * any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory),
		 * [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes),
		 * [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and
		 * [RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).
		 */
		is_estimated?: boolean | null;

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items is being tracked.
		 * Max length: 100
		 */
		location_id?: string | null;

		/**
		 * The number of items affected by the estimated count as a decimal string.
		 * Can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity?: string | null;

		/**
		 * The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
		 * quantity of items.
		 */
		state?: string | null;
	}

	/**
	 * Represents Square-estimated quantity of items in a particular state at a
	 * particular seller location based on the known history of physical counts and
	 * inventory adjustments.
	 */
	export interface InventoryCountFormProperties {

		/**
		 * An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting
		 * the estimated count is received.
		 * Max length: 34
		 */
		calculated_at: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
		 * Max length: 100
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/**
		 * The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
		 * supported for the `ITEM_VARIATION` type.
		 * Max length: 14
		 */
		catalog_object_type: FormControl<string | null | undefined>,

		/**
		 * Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of
		 * any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory),
		 * [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes),
		 * [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and
		 * [RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).
		 */
		is_estimated: FormControl<boolean | null | undefined>,

		/**
		 * The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
		 * quantity of items is being tracked.
		 * Max length: 100
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The number of items affected by the estimated count as a decimal string.
		 * Can support up to 5 digits after the decimal point.
		 * Max length: 26
		 */
		quantity: FormControl<string | null | undefined>,

		/**
		 * The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
		 * quantity of items.
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateInventoryCountFormGroup() {
		return new FormGroup<InventoryCountFormProperties>({
			calculated_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(34)]),
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			catalog_object_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(14)]),
			is_estimated: new FormControl<boolean | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			quantity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(26)]),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BatchDeleteCatalogObjectsRequest {

		/**
		 * The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects
		 * in the graph that depend on that object will be deleted as well (for example, deleting a
		 * CatalogItem will delete its CatalogItemVariation.
		 */
		object_ids?: Array<string>;
	}
	export interface BatchDeleteCatalogObjectsRequestFormProperties {
	}
	export function CreateBatchDeleteCatalogObjectsRequestFormGroup() {
		return new FormGroup<BatchDeleteCatalogObjectsRequestFormProperties>({
		});

	}

	export interface BatchDeleteCatalogObjectsResponse {

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z". */
		deleted_at?: string | null;

		/** The IDs of all CatalogObjects deleted by this request. */
		deleted_object_ids?: Array<string>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface BatchDeleteCatalogObjectsResponseFormProperties {

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z". */
		deleted_at: FormControl<string | null | undefined>,
	}
	export function CreateBatchDeleteCatalogObjectsResponseFormGroup() {
		return new FormGroup<BatchDeleteCatalogObjectsResponseFormProperties>({
			deleted_at: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BatchRetrieveCatalogObjectsRequest {

		/**
		 * The specific version of the catalog objects to be included in the response.
		 * This allows you to retrieve historical versions of objects. The specified version value is matched against
		 * the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
		 */
		catalog_version?: number | null;

		/**
		 * If `true`, the response will include additional objects that are related to the
		 * requested objects, as follows:
		 * If the `objects` field of the response contains a CatalogItem, its associated
		 * CatalogCategory objects, CatalogTax objects, CatalogImage objects and
		 * CatalogModifierLists will be returned in the `related_objects` field of the
		 * response. If the `objects` field of the response contains a CatalogItemVariation,
		 * its parent CatalogItem will be returned in the `related_objects` field of
		 * the response.
		 */
		include_related_objects?: boolean | null;

		/**
		 * The IDs of the CatalogObjects to be retrieved.
		 * Required
		 */
		object_ids: Array<string>;
	}
	export interface BatchRetrieveCatalogObjectsRequestFormProperties {

		/**
		 * The specific version of the catalog objects to be included in the response.
		 * This allows you to retrieve historical versions of objects. The specified version value is matched against
		 * the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
		 */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * If `true`, the response will include additional objects that are related to the
		 * requested objects, as follows:
		 * If the `objects` field of the response contains a CatalogItem, its associated
		 * CatalogCategory objects, CatalogTax objects, CatalogImage objects and
		 * CatalogModifierLists will be returned in the `related_objects` field of the
		 * response. If the `objects` field of the response contains a CatalogItemVariation,
		 * its parent CatalogItem will be returned in the `related_objects` field of
		 * the response.
		 */
		include_related_objects: FormControl<boolean | null | undefined>,
	}
	export function CreateBatchRetrieveCatalogObjectsRequestFormGroup() {
		return new FormGroup<BatchRetrieveCatalogObjectsRequestFormProperties>({
			catalog_version: new FormControl<number | null | undefined>(undefined),
			include_related_objects: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface BatchRetrieveCatalogObjectsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** A list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s returned. */
		objects?: Array<CatalogObject>;

		/** A list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s referenced by the object in the `objects` field. */
		related_objects?: Array<CatalogObject>;
	}
	export interface BatchRetrieveCatalogObjectsResponseFormProperties {
	}
	export function CreateBatchRetrieveCatalogObjectsResponseFormGroup() {
		return new FormGroup<BatchRetrieveCatalogObjectsResponseFormProperties>({
		});

	}


	/**
	 * The wrapper object for the Catalog entries of a given object type.
	 * The type of a particular `CatalogObject` is determined by the value of the
	 * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
	 * For example, the following list shows some instances of `CatalogObject` of a given `type` and
	 * their corresponding data attribute that can be set:
	 * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
	 * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
	 * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
	 * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
	 * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
	 * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
	 * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
	 * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
	 * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
	 * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
	 * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
	 * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
	 * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
	 * For a more detailed discussion of the Catalog data model, please see the
	 * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
	 */
	export interface CatalogObject {

		/**
		 * A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
		 * This can include locations that are deactivated.
		 */
		absent_at_location_ids?: Array<string>;

		/**
		 * The Connect v1 IDs for this object at each location where it is present, where they
		 * differ from the object's Connect V2 ID. The field will only be present for objects that
		 * have been created or modified by legacy APIs.
		 */
		catalog_v1_ids?: Array<CatalogV1Id>;

		/** A category to which a `CatalogItem` instance belongs. */
		category_data?: CatalogCategory;

		/**
		 * Contains information defining a custom attribute. Custom attributes are
		 * intended to store additional information about a catalog object or to associate a
		 * catalog object with an entity in another system. Do not use custom attributes
		 * to store any sensitive information (personally identifiable information, card details, etc.).
		 * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
		 */
		custom_attribute_definition_data?: CatalogCustomAttributeDefinition;

		/**
		 * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair
		 * is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute
		 * value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition)
		 * object defined by the application making the request.
		 * If the `CatalogCustomAttributeDefinition` object is
		 * defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by
		 * the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of
		 * `"cocoa_brand"` and the defining application ID is `"abcd1234"`, the key in the map is `"abcd1234:cocoa_brand"`
		 * if the application making the request is different from the application defining the custom attribute definition.
		 * Otherwise, the key used in the map is simply `"cocoa_brand"`.
		 * Application-defined custom attributes that are set at a global (location-independent) level.
		 * Custom attribute values are intended to store additional information about a catalog object
		 * or associations with an entity in another system. Do not use custom attributes
		 * to store any sensitive information (personally identifiable information, card details, etc.).
		 */
		custom_attribute_values?: {[id: string]: CatalogCustomAttributeValue };

		/** A discount applicable to items. */
		discount_data?: CatalogDiscount;

		/**
		 * An identifier to reference this object in the catalog. When a new `CatalogObject`
		 * is inserted, the client should set the id to a temporary identifier starting with
		 * a "`#`" character. Other objects being inserted or updated within the same request
		 * may use this identifier to refer to the new object.
		 * When the server receives the new object, it will supply a unique identifier that
		 * replaces the temporary identifier for all future references.
		 * Required
		 * Min length: 1
		 */
		id: string;

		/**
		 * An image file to use in Square catalogs. It can be associated with catalog
		 * items, item variations, and categories.
		 */
		image_data?: CatalogImage;

		/** Identifies the `CatalogImage` attached to this `CatalogObject`. */
		image_id?: string | null;

		/**
		 * If `true`, the object has been deleted from the database. Must be `false` for new objects
		 * being inserted. When deleted, the `updated_at` field will equal the deletion time.
		 */
		is_deleted?: boolean | null;

		/** A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog. */
		item_data?: CatalogItem;

		/** A group of variations for a `CatalogItem`. */
		item_option_data?: CatalogItemOption;

		/**
		 * An enumerated value that can link a
		 * `CatalogItemVariation` to an item option as one of
		 * its item option values.
		 */
		item_option_value_data?: CatalogItemOptionValue;

		/**
		 * An item variation (i.e., product) in the Catalog object model. Each item
		 * may have a maximum of 250 item variations.
		 */
		item_variation_data?: CatalogItemVariation;

		/**
		 * Represents the unit used to measure a `CatalogItemVariation` and
		 * specifies the precision for decimal quantities.
		 */
		measurement_unit_data?: CatalogMeasurementUnit;

		/** A modifier applicable to items at the time of sale. */
		modifier_data?: CatalogModifier;

		/**
		 * A list of modifiers applicable to items at the time of sale.
		 * For example, a "Condiments" modifier list applicable to a "Hot Dog" item
		 * may contain "Ketchup", "Mustard", and "Relish" modifiers.
		 * Use the `selection_type` field to specify whether or not multiple selections from
		 * the modifier list are allowed.
		 */
		modifier_list_data?: CatalogModifierList;

		/**
		 * If `true`, this object is present at all locations (including future locations), except where specified in
		 * the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
		 * except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
		 */
		present_at_all_locations?: boolean | null;

		/**
		 * A list of locations where the object is present, even if `present_at_all_locations` is `false`.
		 * This can include locations that are deactivated.
		 */
		present_at_location_ids?: Array<string>;

		/**
		 * Defines how discounts are automatically applied to a set of items that match the pricing rule
		 * during the active time period.
		 */
		pricing_rule_data?: CatalogPricingRule;

		/**
		 * Represents a collection of catalog objects for the purpose of applying a
		 * `PricingRule`. Including a catalog object will include all of its subtypes.
		 * For example, including a category in a product set will include all of its
		 * items and associated item variations in the product set. Including an item in
		 * a product set will also include its item variations.
		 */
		product_set_data?: CatalogProductSet;

		/** A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts. */
		quick_amounts_settings_data?: CatalogQuickAmountsSettings;

		/**
		 * Describes a subscription plan. For more information, see
		 * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
		 */
		subscription_plan_data?: CatalogSubscriptionPlan;

		/** A tax applicable to an item. */
		tax_data?: CatalogTax;

		/** Represents a time period - either a single period or a repeating period. */
		time_period_data?: CatalogTimePeriod;

		/**
		 * The type of this object. Each object type has expected
		 * properties expressed in a structured format within its corresponding `*_data` field below.
		 * Required
		 */
		type: string;

		/**
		 * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `"2016-08-15T23:59:33.123Z"`
		 * would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
		 */
		updated_at?: string | null;

		/**
		 * The version of the object. When updating an object, the version supplied
		 * must match the version in the database, otherwise the write will be rejected as conflicting.
		 */
		version?: number | null;
	}

	/**
	 * The wrapper object for the Catalog entries of a given object type.
	 * The type of a particular `CatalogObject` is determined by the value of the
	 * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
	 * For example, the following list shows some instances of `CatalogObject` of a given `type` and
	 * their corresponding data attribute that can be set:
	 * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
	 * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
	 * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
	 * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
	 * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
	 * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
	 * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
	 * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
	 * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
	 * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
	 * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
	 * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
	 * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
	 * For a more detailed discussion of the Catalog data model, please see the
	 * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
	 */
	export interface CatalogObjectFormProperties {

		/**
		 * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair
		 * is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute
		 * value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition)
		 * object defined by the application making the request.
		 * If the `CatalogCustomAttributeDefinition` object is
		 * defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by
		 * the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of
		 * `"cocoa_brand"` and the defining application ID is `"abcd1234"`, the key in the map is `"abcd1234:cocoa_brand"`
		 * if the application making the request is different from the application defining the custom attribute definition.
		 * Otherwise, the key used in the map is simply `"cocoa_brand"`.
		 * Application-defined custom attributes that are set at a global (location-independent) level.
		 * Custom attribute values are intended to store additional information about a catalog object
		 * or associations with an entity in another system. Do not use custom attributes
		 * to store any sensitive information (personally identifiable information, card details, etc.).
		 */
		custom_attribute_values: FormControl<{[id: string]: CatalogCustomAttributeValue } | null | undefined>,

		/**
		 * An identifier to reference this object in the catalog. When a new `CatalogObject`
		 * is inserted, the client should set the id to a temporary identifier starting with
		 * a "`#`" character. Other objects being inserted or updated within the same request
		 * may use this identifier to refer to the new object.
		 * When the server receives the new object, it will supply a unique identifier that
		 * replaces the temporary identifier for all future references.
		 * Required
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/** Identifies the `CatalogImage` attached to this `CatalogObject`. */
		image_id: FormControl<string | null | undefined>,

		/**
		 * If `true`, the object has been deleted from the database. Must be `false` for new objects
		 * being inserted. When deleted, the `updated_at` field will equal the deletion time.
		 */
		is_deleted: FormControl<boolean | null | undefined>,

		/**
		 * If `true`, this object is present at all locations (including future locations), except where specified in
		 * the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
		 * except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
		 */
		present_at_all_locations: FormControl<boolean | null | undefined>,

		/**
		 * The type of this object. Each object type has expected
		 * properties expressed in a structured format within its corresponding `*_data` field below.
		 * Required
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `"2016-08-15T23:59:33.123Z"`
		 * would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
		 */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * The version of the object. When updating an object, the version supplied
		 * must match the version in the database, otherwise the write will be rejected as conflicting.
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateCatalogObjectFormGroup() {
		return new FormGroup<CatalogObjectFormProperties>({
			custom_attribute_values: new FormControl<{[id: string]: CatalogCustomAttributeValue } | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			image_id: new FormControl<string | null | undefined>(undefined),
			is_deleted: new FormControl<boolean | null | undefined>(undefined),
			present_at_all_locations: new FormControl<boolean | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A Square API V1 identifier of an item, including the object ID and its associated location ID. */
	export interface CatalogV1Id {

		/** The ID for an object used in the Square API V1, if the object ID differs from the Square API V2 object ID. */
		catalog_v1_id?: string | null;

		/** The ID of the `Location` this Connect V1 ID is associated with. */
		location_id?: string | null;
	}

	/** A Square API V1 identifier of an item, including the object ID and its associated location ID. */
	export interface CatalogV1IdFormProperties {

		/** The ID for an object used in the Square API V1, if the object ID differs from the Square API V2 object ID. */
		catalog_v1_id: FormControl<string | null | undefined>,

		/** The ID of the `Location` this Connect V1 ID is associated with. */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateCatalogV1IdFormGroup() {
		return new FormGroup<CatalogV1IdFormProperties>({
			catalog_v1_id: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A category to which a `CatalogItem` instance belongs. */
	export interface CatalogCategory {

		/**
		 * The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name?: string | null;
	}

	/** A category to which a `CatalogItem` instance belongs. */
	export interface CatalogCategoryFormProperties {

		/**
		 * The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCatalogCategoryFormGroup() {
		return new FormGroup<CatalogCategoryFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}


	/**
	 * Contains information defining a custom attribute. Custom attributes are
	 * intended to store additional information about a catalog object or to associate a
	 * catalog object with an entity in another system. Do not use custom attributes
	 * to store any sensitive information (personally identifiable information, card details, etc.).
	 * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
	 */
	export interface CatalogCustomAttributeDefinition {

		/**
		 * The set of Catalog Object Types that this Custom Attribute may be applied to.
		 * Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.
		 * Required
		 */
		allowed_object_types: Array<string>;

		/**
		 * The visibility of a custom attribute to applications other than the application
		 * that created the attribute.
		 */
		app_visibility?: string | null;

		/**
		 * __Read-only.__ The number of custom attributes that reference this
		 * custom attribute definition. Set by the server in response to a ListCatalog
		 * request with `include_counts` set to `true`.  If the actual count is greater
		 * than 100, `custom_attribute_usage_count` will be set to `100`.
		 */
		custom_attribute_usage_count?: number | null;

		/**
		 * Seller-oriented description of the meaning of this Custom Attribute,
		 * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
		 * Max length: 255
		 */
		description?: string | null;

		/**
		 * The name of the desired custom attribute key that can be used to access
		 * the custom attribute value on catalog objects. Cannot be modified after the
		 * custom attribute definition has been created.
		 * Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.
		 * Max length: 60
		 * Min length: 1
		 */
		key?: string | null;

		/**
		 * The name of this definition for API and seller-facing UI purposes.
		 * The name must be unique within the (merchant, application) pair. Required.
		 * May not be empty and may not exceed 255 characters. Can be modified after creation.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;
		number_config?: CatalogCustomAttributeDefinitionNumberConfig;

		/** Configuration associated with `SELECTION`-type custom attribute definitions. */
		selection_config?: CatalogCustomAttributeDefinitionSelectionConfig;

		/**
		 * The visibility of a custom attribute in seller-facing UIs (including Square Point
		 * of Sale applications and Square Dashboard). May be modified.
		 */
		seller_visibility?: string | null;

		/** Provides information about the application used to generate a change. */
		source_application?: SourceApplication;

		/** Configuration associated with Custom Attribute Definitions of type `STRING`. */
		string_config?: CatalogCustomAttributeDefinitionStringConfig;

		/**
		 * The type of this custom attribute. Cannot be modified after creation.
		 * Required.
		 * Required
		 */
		type: string;
	}

	/**
	 * Contains information defining a custom attribute. Custom attributes are
	 * intended to store additional information about a catalog object or to associate a
	 * catalog object with an entity in another system. Do not use custom attributes
	 * to store any sensitive information (personally identifiable information, card details, etc.).
	 * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
	 */
	export interface CatalogCustomAttributeDefinitionFormProperties {

		/**
		 * The visibility of a custom attribute to applications other than the application
		 * that created the attribute.
		 */
		app_visibility: FormControl<string | null | undefined>,

		/**
		 * __Read-only.__ The number of custom attributes that reference this
		 * custom attribute definition. Set by the server in response to a ListCatalog
		 * request with `include_counts` set to `true`.  If the actual count is greater
		 * than 100, `custom_attribute_usage_count` will be set to `100`.
		 */
		custom_attribute_usage_count: FormControl<number | null | undefined>,

		/**
		 * Seller-oriented description of the meaning of this Custom Attribute,
		 * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
		 * Max length: 255
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The name of the desired custom attribute key that can be used to access
		 * the custom attribute value on catalog objects. Cannot be modified after the
		 * custom attribute definition has been created.
		 * Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.
		 * Max length: 60
		 * Min length: 1
		 */
		key: FormControl<string | null | undefined>,

		/**
		 * The name of this definition for API and seller-facing UI purposes.
		 * The name must be unique within the (merchant, application) pair. Required.
		 * May not be empty and may not exceed 255 characters. Can be modified after creation.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The visibility of a custom attribute in seller-facing UIs (including Square Point
		 * of Sale applications and Square Dashboard). May be modified.
		 */
		seller_visibility: FormControl<string | null | undefined>,

		/**
		 * The type of this custom attribute. Cannot be modified after creation.
		 * Required.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateCatalogCustomAttributeDefinitionFormGroup() {
		return new FormGroup<CatalogCustomAttributeDefinitionFormProperties>({
			app_visibility: new FormControl<string | null | undefined>(undefined),
			custom_attribute_usage_count: new FormControl<number | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			key: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(60), Validators.pattern('^[a-zA-Z0-9_-]*$')]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			seller_visibility: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CatalogCustomAttributeDefinitionNumberConfig {

		/**
		 * An integer between 0 and 5 that represents the maximum number of
		 * positions allowed after the decimal in number custom attribute values
		 * For example:
		 * - if the precision is 0, the quantity can be 1, 2, 3, etc.
		 * - if the precision is 1, the quantity can be 0.1, 0.2, etc.
		 * - if the precision is 2, the quantity can be 0.01, 0.12, etc.
		 * Default: 5
		 * Minimum: 0
		 * Maximum: 5
		 */
		precision?: number | null;
	}
	export interface CatalogCustomAttributeDefinitionNumberConfigFormProperties {

		/**
		 * An integer between 0 and 5 that represents the maximum number of
		 * positions allowed after the decimal in number custom attribute values
		 * For example:
		 * - if the precision is 0, the quantity can be 1, 2, 3, etc.
		 * - if the precision is 1, the quantity can be 0.1, 0.2, etc.
		 * - if the precision is 2, the quantity can be 0.01, 0.12, etc.
		 * Default: 5
		 * Minimum: 0
		 * Maximum: 5
		 */
		precision: FormControl<number | null | undefined>,
	}
	export function CreateCatalogCustomAttributeDefinitionNumberConfigFormGroup() {
		return new FormGroup<CatalogCustomAttributeDefinitionNumberConfigFormProperties>({
			precision: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(5)]),
		});

	}


	/** Configuration associated with `SELECTION`-type custom attribute definitions. */
	export interface CatalogCustomAttributeDefinitionSelectionConfig {

		/**
		 * The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100
		 * selections can be defined. Can be modified.
		 */
		allowed_selections?: Array<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>;

		/**
		 * The maximum number of selections that can be set. The maximum value for this
		 * attribute is 100. The default value is 1. The value can be modified, but changing the value will not
		 * affect existing custom attribute values on objects. Clients need to
		 * handle custom attributes with more selected values than allowed by this limit.
		 * Maximum: 100
		 */
		max_allowed_selections?: number | null;
	}

	/** Configuration associated with `SELECTION`-type custom attribute definitions. */
	export interface CatalogCustomAttributeDefinitionSelectionConfigFormProperties {

		/**
		 * The maximum number of selections that can be set. The maximum value for this
		 * attribute is 100. The default value is 1. The value can be modified, but changing the value will not
		 * affect existing custom attribute values on objects. Clients need to
		 * handle custom attributes with more selected values than allowed by this limit.
		 * Maximum: 100
		 */
		max_allowed_selections: FormControl<number | null | undefined>,
	}
	export function CreateCatalogCustomAttributeDefinitionSelectionConfigFormGroup() {
		return new FormGroup<CatalogCustomAttributeDefinitionSelectionConfigFormProperties>({
			max_allowed_selections: new FormControl<number | null | undefined>(undefined, [Validators.max(100)]),
		});

	}


	/** A named selection for this `SELECTION`-type custom attribute definition. */
	export interface CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection {

		/**
		 * Selection name, unique within `allowed_selections`.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: string;

		/** Unique ID set by Square. */
		uid?: string | null;
	}

	/** A named selection for this `SELECTION`-type custom attribute definition. */
	export interface CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionFormProperties {

		/**
		 * Selection name, unique within `allowed_selections`.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/** Unique ID set by Square. */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateCatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionFormGroup() {
		return new FormGroup<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			uid: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration associated with Custom Attribute Definitions of type `STRING`. */
	export interface CatalogCustomAttributeDefinitionStringConfig {

		/**
		 * If true, each Custom Attribute instance associated with this Custom Attribute
		 * Definition must have a unique value within the seller's catalog. For
		 * example, this may be used for a value like a SKU that should not be
		 * duplicated within a seller's catalog. May not be modified after the
		 * definition has been created.
		 */
		enforce_uniqueness?: boolean | null;
	}

	/** Configuration associated with Custom Attribute Definitions of type `STRING`. */
	export interface CatalogCustomAttributeDefinitionStringConfigFormProperties {

		/**
		 * If true, each Custom Attribute instance associated with this Custom Attribute
		 * Definition must have a unique value within the seller's catalog. For
		 * example, this may be used for a value like a SKU that should not be
		 * duplicated within a seller's catalog. May not be modified after the
		 * definition has been created.
		 */
		enforce_uniqueness: FormControl<boolean | null | undefined>,
	}
	export function CreateCatalogCustomAttributeDefinitionStringConfigFormGroup() {
		return new FormGroup<CatalogCustomAttributeDefinitionStringConfigFormProperties>({
			enforce_uniqueness: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * An instance of a custom attribute. Custom attributes can be defined and
	 * added to `ITEM` and `ITEM_VARIATION` type catalog objects.
	 * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).
	 */
	export interface CatalogCustomAttributeValue {

		/** A `true` or `false` value. Populated if `type` = `BOOLEAN`. */
		boolean_value?: boolean | null;

		/** __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to. */
		custom_attribute_definition_id?: string | null;

		/** __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`. */
		key?: string | null;

		/** The name of the custom attribute. */
		name?: string | null;

		/**
		 * Populated if `type` = `NUMBER`. Contains a string
		 * representation of a decimal number, using a `.` as the decimal separator.
		 */
		number_value?: string | null;

		/** One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`. */
		selection_uid_values?: Array<string>;

		/** The string value of the custom attribute.  Populated if `type` = `STRING`. */
		string_value?: string | null;

		/** __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`. */
		type?: string | null;
	}

	/**
	 * An instance of a custom attribute. Custom attributes can be defined and
	 * added to `ITEM` and `ITEM_VARIATION` type catalog objects.
	 * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).
	 */
	export interface CatalogCustomAttributeValueFormProperties {

		/** A `true` or `false` value. Populated if `type` = `BOOLEAN`. */
		boolean_value: FormControl<boolean | null | undefined>,

		/** __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to. */
		custom_attribute_definition_id: FormControl<string | null | undefined>,

		/** __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`. */
		key: FormControl<string | null | undefined>,

		/** The name of the custom attribute. */
		name: FormControl<string | null | undefined>,

		/**
		 * Populated if `type` = `NUMBER`. Contains a string
		 * representation of a decimal number, using a `.` as the decimal separator.
		 */
		number_value: FormControl<string | null | undefined>,

		/** The string value of the custom attribute.  Populated if `type` = `STRING`. */
		string_value: FormControl<string | null | undefined>,

		/** __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateCatalogCustomAttributeValueFormGroup() {
		return new FormGroup<CatalogCustomAttributeValueFormProperties>({
			boolean_value: new FormControl<boolean | null | undefined>(undefined),
			custom_attribute_definition_id: new FormControl<string | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			number_value: new FormControl<string | null | undefined>(undefined),
			string_value: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A discount applicable to items. */
	export interface CatalogDiscount {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/** Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. */
		discount_type?: string | null;

		/** The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code. */
		label_color?: string | null;

		/**
		 * Indicates whether this discount should reduce the price used to calculate tax.
		 * Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must
		 * be calculated based on an item's price, ignoring a particular discount. For example,
		 * in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a
		 * customer pays but does not reduce the sale price used to calculate how much sales tax is
		 * due. In this case, the discount representing that manufacturer coupon should have
		 * `DO_NOT_MODIFY_TAX_BASIS` for this field.
		 * If you are unsure whether you need to use this field, consult your tax professional.
		 */
		modify_tax_basis?: string | null;

		/**
		 * The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal
		 * separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`
		 * is `VARIABLE_PERCENTAGE`.
		 * Do not use this field for amount-based or variable discounts.
		 */
		percentage?: string | null;

		/**
		 * Indicates whether a mobile staff member needs to enter their PIN to apply the
		 * discount to a payment in the Square Point of Sale app.
		 */
		pin_required?: boolean | null;
	}

	/** A discount applicable to items. */
	export interface CatalogDiscountFormProperties {

		/** Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. */
		discount_type: FormControl<string | null | undefined>,

		/** The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code. */
		label_color: FormControl<string | null | undefined>,

		/**
		 * Indicates whether this discount should reduce the price used to calculate tax.
		 * Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must
		 * be calculated based on an item's price, ignoring a particular discount. For example,
		 * in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a
		 * customer pays but does not reduce the sale price used to calculate how much sales tax is
		 * due. In this case, the discount representing that manufacturer coupon should have
		 * `DO_NOT_MODIFY_TAX_BASIS` for this field.
		 * If you are unsure whether you need to use this field, consult your tax professional.
		 */
		modify_tax_basis: FormControl<string | null | undefined>,

		/**
		 * The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal
		 * separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`
		 * is `VARIABLE_PERCENTAGE`.
		 * Do not use this field for amount-based or variable discounts.
		 */
		percentage: FormControl<string | null | undefined>,

		/**
		 * Indicates whether a mobile staff member needs to enter their PIN to apply the
		 * discount to a payment in the Square Point of Sale app.
		 */
		pin_required: FormControl<boolean | null | undefined>,
	}
	export function CreateCatalogDiscountFormGroup() {
		return new FormGroup<CatalogDiscountFormProperties>({
			discount_type: new FormControl<string | null | undefined>(undefined),
			label_color: new FormControl<string | null | undefined>(undefined),
			modify_tax_basis: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined),
			pin_required: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * An image file to use in Square catalogs. It can be associated with catalog
	 * items, item variations, and categories.
	 */
	export interface CatalogImage {

		/**
		 * A caption that describes what is shown in the image. Displayed in the
		 * Square Online Store. This is a searchable attribute for use in applicable query filters
		 * using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		 */
		caption?: string | null;

		/**
		 * The internal name to identify this image in calls to the Square API.
		 * This is a searchable attribute for use in applicable query filters
		 * using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		 * It is not unique and should not be shown in a buyer facing context.
		 */
		name?: string | null;

		/**
		 * The URL of this image, generated by Square after an image is uploaded
		 * using the [CreateCatalogImage](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/create-catalog-image) endpoint.
		 */
		url?: string | null;
	}

	/**
	 * An image file to use in Square catalogs. It can be associated with catalog
	 * items, item variations, and categories.
	 */
	export interface CatalogImageFormProperties {

		/**
		 * A caption that describes what is shown in the image. Displayed in the
		 * Square Online Store. This is a searchable attribute for use in applicable query filters
		 * using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		 */
		caption: FormControl<string | null | undefined>,

		/**
		 * The internal name to identify this image in calls to the Square API.
		 * This is a searchable attribute for use in applicable query filters
		 * using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		 * It is not unique and should not be shown in a buyer facing context.
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The URL of this image, generated by Square after an image is uploaded
		 * using the [CreateCatalogImage](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/create-catalog-image) endpoint.
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCatalogImageFormGroup() {
		return new FormGroup<CatalogImageFormProperties>({
			caption: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog. */
	export interface CatalogItem {

		/**
		 * The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.
		 * This attribute is searchable, and its value length is of Unicode code points.
		 * Max length: 24
		 */
		abbreviation?: string | null;

		/** If `true`, the item can be added to electronically fulfilled orders from the merchant's online store. */
		available_electronically?: boolean | null;

		/** If `true`, the item can be added to pickup orders from the merchant's online store. */
		available_for_pickup?: boolean | null;

		/** If `true`, the item can be added to shipping orders from the merchant's online store. */
		available_online?: boolean | null;

		/** The ID of the item's category, if any. */
		category_id?: string | null;

		/**
		 * The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 4096
		 */
		description?: string | null;

		/**
		 * List of item options IDs for this item. Used to manage and group item
		 * variations in a specified order.
		 * Maximum: 6 item options.
		 */
		item_options?: Array<CatalogItemOptionForItem>;

		/** The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code. */
		label_color?: string | null;

		/**
		 * A set of `CatalogItemModifierListInfo` objects
		 * representing the modifier lists that apply to this item, along with the overrides and min
		 * and max limits that are specific to this item. Modifier lists
		 * may also be added to or deleted from an item using `UpdateItemModifierLists`.
		 */
		modifier_list_info?: Array<CatalogItemModifierListInfo>;

		/**
		 * The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.
		 * Max length: 512
		 */
		name?: string | null;

		/**
		 * The product type of the item. May not be changed once an item has been created.
		 * Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product
		 * types are read-only.
		 */
		product_type?: string | null;

		/**
		 * If `false`, the Square Point of Sale app will present the `CatalogItem`'s
		 * details screen immediately, allowing the merchant to choose `CatalogModifier`s
		 * before adding the item to the cart.  This is the default behavior.
		 * If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
		 * modifiers, and merchants can edit modifiers by drilling down onto the item's details.
		 * Third-party clients are encouraged to implement similar behaviors.
		 */
		skip_modifier_screen?: boolean | null;

		/**
		 * A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.
		 * It is currently supported for sellers of the Japanese locale only.
		 */
		sort_name?: string | null;

		/**
		 * A set of IDs indicating the taxes enabled for
		 * this item. When updating an item, any taxes listed here will be added to the item.
		 * Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.
		 */
		tax_ids?: Array<string>;

		/**
		 * A list of [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects for this item. An item must have
		 * at least one variation.
		 */
		variations?: Array<CatalogObject>;
	}

	/** A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog. */
	export interface CatalogItemFormProperties {

		/**
		 * The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.
		 * This attribute is searchable, and its value length is of Unicode code points.
		 * Max length: 24
		 */
		abbreviation: FormControl<string | null | undefined>,

		/** If `true`, the item can be added to electronically fulfilled orders from the merchant's online store. */
		available_electronically: FormControl<boolean | null | undefined>,

		/** If `true`, the item can be added to pickup orders from the merchant's online store. */
		available_for_pickup: FormControl<boolean | null | undefined>,

		/** If `true`, the item can be added to shipping orders from the merchant's online store. */
		available_online: FormControl<boolean | null | undefined>,

		/** The ID of the item's category, if any. */
		category_id: FormControl<string | null | undefined>,

		/**
		 * The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 4096
		 */
		description: FormControl<string | null | undefined>,

		/** The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code. */
		label_color: FormControl<string | null | undefined>,

		/**
		 * The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.
		 * Max length: 512
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The product type of the item. May not be changed once an item has been created.
		 * Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product
		 * types are read-only.
		 */
		product_type: FormControl<string | null | undefined>,

		/**
		 * If `false`, the Square Point of Sale app will present the `CatalogItem`'s
		 * details screen immediately, allowing the merchant to choose `CatalogModifier`s
		 * before adding the item to the cart.  This is the default behavior.
		 * If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
		 * modifiers, and merchants can edit modifiers by drilling down onto the item's details.
		 * Third-party clients are encouraged to implement similar behaviors.
		 */
		skip_modifier_screen: FormControl<boolean | null | undefined>,

		/**
		 * A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.
		 * It is currently supported for sellers of the Japanese locale only.
		 */
		sort_name: FormControl<string | null | undefined>,
	}
	export function CreateCatalogItemFormGroup() {
		return new FormGroup<CatalogItemFormProperties>({
			abbreviation: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(24)]),
			available_electronically: new FormControl<boolean | null | undefined>(undefined),
			available_for_pickup: new FormControl<boolean | null | undefined>(undefined),
			available_online: new FormControl<boolean | null | undefined>(undefined),
			category_id: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(4096)]),
			label_color: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(512)]),
			product_type: new FormControl<string | null | undefined>(undefined),
			skip_modifier_screen: new FormControl<boolean | null | undefined>(undefined),
			sort_name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 *  An option that can be assigned to an item.
	 * For example, a t-shirt item may offer a color option or a size option.
	 */
	export interface CatalogItemOptionForItem {

		/** The unique id of the item option, used to form the dimensions of the item option matrix in a specified order. */
		item_option_id?: string | null;
	}

	/**
	 *  An option that can be assigned to an item.
	 * For example, a t-shirt item may offer a color option or a size option.
	 */
	export interface CatalogItemOptionForItemFormProperties {

		/** The unique id of the item option, used to form the dimensions of the item option matrix in a specified order. */
		item_option_id: FormControl<string | null | undefined>,
	}
	export function CreateCatalogItemOptionForItemFormGroup() {
		return new FormGroup<CatalogItemOptionForItemFormProperties>({
			item_option_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Options to control the properties of a `CatalogModifierList` applied to a `CatalogItem` instance. */
	export interface CatalogItemModifierListInfo {

		/** If `true`, enable this `CatalogModifierList`. The default value is `true`. */
		enabled?: boolean | null;

		/** If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`. */
		max_selected_modifiers?: number | null;

		/** If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`. */
		min_selected_modifiers?: number | null;

		/**
		 * The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.
		 * Required
		 * Min length: 1
		 */
		modifier_list_id: string;

		/** A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default. */
		modifier_overrides?: Array<CatalogModifierOverride>;
	}

	/** Options to control the properties of a `CatalogModifierList` applied to a `CatalogItem` instance. */
	export interface CatalogItemModifierListInfoFormProperties {

		/** If `true`, enable this `CatalogModifierList`. The default value is `true`. */
		enabled: FormControl<boolean | null | undefined>,

		/** If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`. */
		max_selected_modifiers: FormControl<number | null | undefined>,

		/** If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`. */
		min_selected_modifiers: FormControl<number | null | undefined>,

		/**
		 * The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.
		 * Required
		 * Min length: 1
		 */
		modifier_list_id: FormControl<string | null | undefined>,
	}
	export function CreateCatalogItemModifierListInfoFormGroup() {
		return new FormGroup<CatalogItemModifierListInfoFormProperties>({
			enabled: new FormControl<boolean | null | undefined>(undefined),
			max_selected_modifiers: new FormControl<number | null | undefined>(undefined),
			min_selected_modifiers: new FormControl<number | null | undefined>(undefined),
			modifier_list_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Options to control how to override the default behavior of the specified modifier. */
	export interface CatalogModifierOverride {

		/**
		 * The ID of the `CatalogModifier` whose default behavior is being overridden.
		 * Required
		 * Min length: 1
		 */
		modifier_id: string;

		/** If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`. */
		on_by_default?: boolean | null;
	}

	/** Options to control how to override the default behavior of the specified modifier. */
	export interface CatalogModifierOverrideFormProperties {

		/**
		 * The ID of the `CatalogModifier` whose default behavior is being overridden.
		 * Required
		 * Min length: 1
		 */
		modifier_id: FormControl<string | null | undefined>,

		/** If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`. */
		on_by_default: FormControl<boolean | null | undefined>,
	}
	export function CreateCatalogModifierOverrideFormGroup() {
		return new FormGroup<CatalogModifierOverrideFormProperties>({
			modifier_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			on_by_default: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A group of variations for a `CatalogItem`. */
	export interface CatalogItemOption {

		/**
		 * The item option's human-readable description. Displayed in the Square
		 * Point of Sale app for the seller and in the Online Store or on receipts for
		 * the buyer. This is a searchable attribute for use in applicable query filters.
		 */
		description?: string | null;

		/** The item option's display name for the customer. This is a searchable attribute for use in applicable query filters. */
		display_name?: string | null;

		/**
		 * The item option's display name for the seller. Must be unique across
		 * all item options. This is a searchable attribute for use in applicable query filters.
		 */
		name?: string | null;

		/** If true, display colors for entries in `values` when present. */
		show_colors?: boolean | null;

		/**
		 * A list of CatalogObjects containing the
		 * `CatalogItemOptionValue`s for this item.
		 */
		values?: Array<CatalogObject>;
	}

	/** A group of variations for a `CatalogItem`. */
	export interface CatalogItemOptionFormProperties {

		/**
		 * The item option's human-readable description. Displayed in the Square
		 * Point of Sale app for the seller and in the Online Store or on receipts for
		 * the buyer. This is a searchable attribute for use in applicable query filters.
		 */
		description: FormControl<string | null | undefined>,

		/** The item option's display name for the customer. This is a searchable attribute for use in applicable query filters. */
		display_name: FormControl<string | null | undefined>,

		/**
		 * The item option's display name for the seller. Must be unique across
		 * all item options. This is a searchable attribute for use in applicable query filters.
		 */
		name: FormControl<string | null | undefined>,

		/** If true, display colors for entries in `values` when present. */
		show_colors: FormControl<boolean | null | undefined>,
	}
	export function CreateCatalogItemOptionFormGroup() {
		return new FormGroup<CatalogItemOptionFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			display_name: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			show_colors: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * An enumerated value that can link a
	 * `CatalogItemVariation` to an item option as one of
	 * its item option values.
	 */
	export interface CatalogItemOptionValue {

		/**
		 * The HTML-supported hex color for the item option (e.g., "#ff8d4e85").
		 * Only displayed if `show_colors` is enabled on the parent `ItemOption`. When
		 * left unset, `color` defaults to white ("#ffffff") when `show_colors` is
		 * enabled on the parent `ItemOption`.
		 */
		color?: string | null;

		/** A human-readable description for the option value. This is a searchable attribute for use in applicable query filters. */
		description?: string | null;

		/** Unique ID of the associated item option. */
		item_option_id?: string | null;

		/** Name of this item option value. This is a searchable attribute for use in applicable query filters. */
		name?: string | null;

		/** Determines where this option value appears in a list of option values. */
		ordinal?: number | null;
	}

	/**
	 * An enumerated value that can link a
	 * `CatalogItemVariation` to an item option as one of
	 * its item option values.
	 */
	export interface CatalogItemOptionValueFormProperties {

		/**
		 * The HTML-supported hex color for the item option (e.g., "#ff8d4e85").
		 * Only displayed if `show_colors` is enabled on the parent `ItemOption`. When
		 * left unset, `color` defaults to white ("#ffffff") when `show_colors` is
		 * enabled on the parent `ItemOption`.
		 */
		color: FormControl<string | null | undefined>,

		/** A human-readable description for the option value. This is a searchable attribute for use in applicable query filters. */
		description: FormControl<string | null | undefined>,

		/** Unique ID of the associated item option. */
		item_option_id: FormControl<string | null | undefined>,

		/** Name of this item option value. This is a searchable attribute for use in applicable query filters. */
		name: FormControl<string | null | undefined>,

		/** Determines where this option value appears in a list of option values. */
		ordinal: FormControl<number | null | undefined>,
	}
	export function CreateCatalogItemOptionValueFormGroup() {
		return new FormGroup<CatalogItemOptionValueFormProperties>({
			color: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			item_option_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			ordinal: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * An item variation (i.e., product) in the Catalog object model. Each item
	 * may have a maximum of 250 item variations.
	 */
	export interface CatalogItemVariation {

		/**
		 * If the `CatalogItem` that owns this item variation is of type
		 * `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.
		 */
		available_for_booking?: boolean | null;

		/**
		 * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		 * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		 * This value is always an integer.
		 */
		inventory_alert_threshold?: number | null;

		/**
		 * Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
		 * to its `inventory_alert_threshold`.
		 */
		inventory_alert_type?: string | null;

		/** The ID of the `CatalogItem` associated with this item variation. */
		item_id?: string | null;

		/**
		 * List of item option values associated with this item variation. Listed
		 * in the same order as the item options of the parent item.
		 */
		item_option_values?: Array<CatalogItemOptionValueForItemVariation>;

		/** Per-location price and inventory overrides. */
		location_overrides?: Array<ItemVariationLocationOverrides>;

		/**
		 * ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity
		 * sold of this item variation. If left unset, the item will be sold in
		 * whole quantities.
		 */
		measurement_unit_id?: string | null;

		/**
		 * The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal
		 * for each item variation within a parent `CatalogItem` is set according to the item variations's
		 * position. On reads, the value is not guaranteed to be sequential or unique.
		 */
		ordinal?: number | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		price_money?: Money;

		/**
		 * Indicates whether the item variation's price is fixed or determined at the time
		 * of sale.
		 */
		pricing_type?: string | null;

		/**
		 * If the `CatalogItem` that owns this item variation is of type
		 * `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For
		 * example, a 30 minute appointment would have the value `1800000`, which is equal to
		 * 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
		 */
		service_duration?: number | null;

		/** The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters. */
		sku?: string | null;

		/**
		 * Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE).
		 * For backward compatibility missing values will be interpreted as TRUE.
		 */
		stockable?: boolean | null;

		/**
		 * Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		 * and a non-stockable sell-by or receive-by `CatalogItemVariation` that
		 * share the same underlying stock.
		 */
		stockable_conversion?: CatalogStockConversion;

		/**
		 * Tokens of employees that can perform the service represented by this variation. Only valid for
		 * variations of type `APPOINTMENTS_SERVICE`.
		 */
		team_member_ids?: Array<string>;

		/** If `true`, inventory tracking is active for the variation. */
		track_inventory?: boolean | null;

		/**
		 * The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.
		 * The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard,
		 * Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned
		 * to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps
		 * unless it is updated to fit the expected format.
		 */
		upc?: string | null;

		/**
		 * Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.
		 * Max length: 255
		 */
		user_data?: string | null;
	}

	/**
	 * An item variation (i.e., product) in the Catalog object model. Each item
	 * may have a maximum of 250 item variations.
	 */
	export interface CatalogItemVariationFormProperties {

		/**
		 * If the `CatalogItem` that owns this item variation is of type
		 * `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.
		 */
		available_for_booking: FormControl<boolean | null | undefined>,

		/**
		 * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		 * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		 * This value is always an integer.
		 */
		inventory_alert_threshold: FormControl<number | null | undefined>,

		/**
		 * Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
		 * to its `inventory_alert_threshold`.
		 */
		inventory_alert_type: FormControl<string | null | undefined>,

		/** The ID of the `CatalogItem` associated with this item variation. */
		item_id: FormControl<string | null | undefined>,

		/**
		 * ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity
		 * sold of this item variation. If left unset, the item will be sold in
		 * whole quantities.
		 */
		measurement_unit_id: FormControl<string | null | undefined>,

		/**
		 * The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal
		 * for each item variation within a parent `CatalogItem` is set according to the item variations's
		 * position. On reads, the value is not guaranteed to be sequential or unique.
		 */
		ordinal: FormControl<number | null | undefined>,

		/**
		 * Indicates whether the item variation's price is fixed or determined at the time
		 * of sale.
		 */
		pricing_type: FormControl<string | null | undefined>,

		/**
		 * If the `CatalogItem` that owns this item variation is of type
		 * `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For
		 * example, a 30 minute appointment would have the value `1800000`, which is equal to
		 * 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
		 */
		service_duration: FormControl<number | null | undefined>,

		/** The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters. */
		sku: FormControl<string | null | undefined>,

		/**
		 * Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE).
		 * For backward compatibility missing values will be interpreted as TRUE.
		 */
		stockable: FormControl<boolean | null | undefined>,

		/** If `true`, inventory tracking is active for the variation. */
		track_inventory: FormControl<boolean | null | undefined>,

		/**
		 * The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.
		 * The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard,
		 * Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned
		 * to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps
		 * unless it is updated to fit the expected format.
		 */
		upc: FormControl<string | null | undefined>,

		/**
		 * Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.
		 * Max length: 255
		 */
		user_data: FormControl<string | null | undefined>,
	}
	export function CreateCatalogItemVariationFormGroup() {
		return new FormGroup<CatalogItemVariationFormProperties>({
			available_for_booking: new FormControl<boolean | null | undefined>(undefined),
			inventory_alert_threshold: new FormControl<number | null | undefined>(undefined),
			inventory_alert_type: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			measurement_unit_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ordinal: new FormControl<number | null | undefined>(undefined),
			pricing_type: new FormControl<string | null | undefined>(undefined),
			service_duration: new FormControl<number | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
			stockable: new FormControl<boolean | null | undefined>(undefined),
			track_inventory: new FormControl<boolean | null | undefined>(undefined),
			upc: new FormControl<string | null | undefined>(undefined),
			user_data: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}


	/**
	 * A `CatalogItemOptionValue` links an item variation to an item option as
	 * an item option value. For example, a t-shirt item may offer a color option and
	 * a size option. An item option value would represent each variation of t-shirt:
	 * For example, "Color:Red, Size:Small" or "Color:Blue, Size:Medium".
	 */
	export interface CatalogItemOptionValueForItemVariation {

		/** The unique id of an item option. */
		item_option_id?: string | null;

		/** The unique id of the selected value for the item option. */
		item_option_value_id?: string | null;
	}

	/**
	 * A `CatalogItemOptionValue` links an item variation to an item option as
	 * an item option value. For example, a t-shirt item may offer a color option and
	 * a size option. An item option value would represent each variation of t-shirt:
	 * For example, "Color:Red, Size:Small" or "Color:Blue, Size:Medium".
	 */
	export interface CatalogItemOptionValueForItemVariationFormProperties {

		/** The unique id of an item option. */
		item_option_id: FormControl<string | null | undefined>,

		/** The unique id of the selected value for the item option. */
		item_option_value_id: FormControl<string | null | undefined>,
	}
	export function CreateCatalogItemOptionValueForItemVariationFormGroup() {
		return new FormGroup<CatalogItemOptionValueForItemVariationFormProperties>({
			item_option_id: new FormControl<string | null | undefined>(undefined),
			item_option_value_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`. */
	export interface ItemVariationLocationOverrides {

		/**
		 * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		 * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		 * This value is always an integer.
		 */
		inventory_alert_threshold?: number | null;

		/**
		 * Indicates whether the `CatalogItemVariation` displays an alert when its inventory
		 * quantity is less than or equal to its `inventory_alert_threshold`.
		 */
		inventory_alert_type?: string | null;

		/** The ID of the `Location`. This can include locations that are deactivated. */
		location_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		price_money?: Money;

		/** The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`. */
		pricing_type?: string | null;

		/** If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`. */
		track_inventory?: boolean | null;
	}

	/** Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`. */
	export interface ItemVariationLocationOverridesFormProperties {

		/**
		 * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
		 * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
		 * This value is always an integer.
		 */
		inventory_alert_threshold: FormControl<number | null | undefined>,

		/**
		 * Indicates whether the `CatalogItemVariation` displays an alert when its inventory
		 * quantity is less than or equal to its `inventory_alert_threshold`.
		 */
		inventory_alert_type: FormControl<string | null | undefined>,

		/** The ID of the `Location`. This can include locations that are deactivated. */
		location_id: FormControl<string | null | undefined>,

		/** The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`. */
		pricing_type: FormControl<string | null | undefined>,

		/** If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`. */
		track_inventory: FormControl<boolean | null | undefined>,
	}
	export function CreateItemVariationLocationOverridesFormGroup() {
		return new FormGroup<ItemVariationLocationOverridesFormProperties>({
			inventory_alert_threshold: new FormControl<number | null | undefined>(undefined),
			inventory_alert_type: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			pricing_type: new FormControl<string | null | undefined>(undefined),
			track_inventory: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
	 * and a non-stockable sell-by or receive-by `CatalogItemVariation` that
	 * share the same underlying stock.
	 */
	export interface CatalogStockConversion {

		/**
		 * The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		 * in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together
		 * define the conversion ratio between stockable item variation and the non-stockable item variation.
		 * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
		 * and up to 5 digits after the decimal point.
		 * Required
		 * Max length: 16
		 * Min length: 1
		 */
		nonstockable_quantity: string;

		/**
		 * References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		 * for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`
		 * defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`.
		 * This immutable field must reference a stockable `CatalogItemVariation`
		 * that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`
		 * Required
		 * Min length: 1
		 */
		stockable_item_variation_id: string;

		/**
		 * The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)
		 * equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)
		 * as defined by this stock conversion.  It accepts a decimal number in a string format that can take
		 * up to 10 digits before the decimal point and up to 5 digits after the decimal point.
		 * Required
		 * Max length: 16
		 * Min length: 1
		 */
		stockable_quantity: string;
	}

	/**
	 * Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
	 * and a non-stockable sell-by or receive-by `CatalogItemVariation` that
	 * share the same underlying stock.
	 */
	export interface CatalogStockConversionFormProperties {

		/**
		 * The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		 * in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together
		 * define the conversion ratio between stockable item variation and the non-stockable item variation.
		 * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
		 * and up to 5 digits after the decimal point.
		 * Required
		 * Max length: 16
		 * Min length: 1
		 */
		nonstockable_quantity: FormControl<string | null | undefined>,

		/**
		 * References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		 * for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`
		 * defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`.
		 * This immutable field must reference a stockable `CatalogItemVariation`
		 * that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`
		 * Required
		 * Min length: 1
		 */
		stockable_item_variation_id: FormControl<string | null | undefined>,

		/**
		 * The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)
		 * equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)
		 * as defined by this stock conversion.  It accepts a decimal number in a string format that can take
		 * up to 10 digits before the decimal point and up to 5 digits after the decimal point.
		 * Required
		 * Max length: 16
		 * Min length: 1
		 */
		stockable_quantity: FormControl<string | null | undefined>,
	}
	export function CreateCatalogStockConversionFormGroup() {
		return new FormGroup<CatalogStockConversionFormProperties>({
			nonstockable_quantity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(16)]),
			stockable_item_variation_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			stockable_quantity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(16)]),
		});

	}


	/** A modifier applicable to items at the time of sale. */
	export interface CatalogModifier {

		/** The ID of the `CatalogModifierList` associated with this modifier. */
		modifier_list_id?: string | null;

		/**
		 * The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name?: string | null;

		/** Determines where this `CatalogModifier` appears in the `CatalogModifierList`. */
		ordinal?: number | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		price_money?: Money;
	}

	/** A modifier applicable to items at the time of sale. */
	export interface CatalogModifierFormProperties {

		/** The ID of the `CatalogModifierList` associated with this modifier. */
		modifier_list_id: FormControl<string | null | undefined>,

		/**
		 * The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/** Determines where this `CatalogModifier` appears in the `CatalogModifierList`. */
		ordinal: FormControl<number | null | undefined>,
	}
	export function CreateCatalogModifierFormGroup() {
		return new FormGroup<CatalogModifierFormProperties>({
			modifier_list_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ordinal: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * A list of modifiers applicable to items at the time of sale.
	 * For example, a "Condiments" modifier list applicable to a "Hot Dog" item
	 * may contain "Ketchup", "Mustard", and "Relish" modifiers.
	 * Use the `selection_type` field to specify whether or not multiple selections from
	 * the modifier list are allowed.
	 */
	export interface CatalogModifierList {

		/**
		 * The options included in the `CatalogModifierList`.
		 * You must include at least one `CatalogModifier`.
		 * Each CatalogObject must have type `MODIFIER` and contain
		 * `CatalogModifier` data.
		 */
		modifiers?: Array<CatalogObject>;

		/**
		 * The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name?: string | null;

		/** Determines where this modifier list appears in a list of `CatalogModifierList` values. */
		ordinal?: number | null;

		/**
		 * Indicates whether multiple options from the modifier list
		 * can be applied to a single `CatalogItem`.
		 */
		selection_type?: string | null;
	}

	/**
	 * A list of modifiers applicable to items at the time of sale.
	 * For example, a "Condiments" modifier list applicable to a "Hot Dog" item
	 * may contain "Ketchup", "Mustard", and "Relish" modifiers.
	 * Use the `selection_type` field to specify whether or not multiple selections from
	 * the modifier list are allowed.
	 */
	export interface CatalogModifierListFormProperties {

		/**
		 * The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/** Determines where this modifier list appears in a list of `CatalogModifierList` values. */
		ordinal: FormControl<number | null | undefined>,

		/**
		 * Indicates whether multiple options from the modifier list
		 * can be applied to a single `CatalogItem`.
		 */
		selection_type: FormControl<string | null | undefined>,
	}
	export function CreateCatalogModifierListFormGroup() {
		return new FormGroup<CatalogModifierListFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ordinal: new FormControl<number | null | undefined>(undefined),
			selection_type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines how discounts are automatically applied to a set of items that match the pricing rule
	 * during the active time period.
	 */
	export interface CatalogPricingRule {

		/**
		 * __Deprecated__: Please use the `exclude_products_id` field to apply
		 * an exclude set instead. Exclude sets allow better control over quantity
		 * ranges and offer more flexibility for which matched items receive a discount.
		 * `CatalogProductSet` to apply the pricing to.
		 * An apply rule matches within the subset of the cart that fits the match rules (the match set).
		 * An apply rule can only match once in the match set.
		 * If not supplied, the pricing will be applied to all products in the match set.
		 * Other products retain their base price, or a price generated by other rules.
		 */
		apply_products_id?: string | null;

		/**
		 * A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule.
		 * Notice that a group ID is generated by the Customers API.
		 * If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer
		 * has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount
		 * applies only to matched products sold to customers belonging to the specified customer groups.
		 */
		customer_group_ids_any?: Array<string>;

		/**
		 * Unique ID for the `CatalogDiscount` to take off
		 * the price of all matched items.
		 */
		discount_id?: string | null;

		/**
		 * `CatalogProductSet` to exclude from the pricing rule.
		 * An exclude rule matches within the subset of the cart that fits the match rules (the match set).
		 * An exclude rule can only match once in the match set.
		 * If not supplied, the pricing will be applied to all products in the match set.
		 * Other products retain their base price, or a price generated by other rules.
		 */
		exclude_products_id?: string | null;

		/**
		 * If an `exclude_products_id` was given, controls which subset of matched
		 * products is excluded from any discounts.
		 * Default value: `LEAST_EXPENSIVE`
		 */
		exclude_strategy?: string | null;

		/**
		 * Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule
		 * matches within the entire cart, and can match multiple times. This field will always be set.
		 */
		match_products_id?: string | null;

		/**
		 * User-defined name for the pricing rule. For example, "Buy one get one
		 * free" or "10% off".
		 */
		name?: string | null;

		/**
		 * A list of unique IDs for the catalog time periods when
		 * this pricing rule is in effect. If left unset, the pricing rule is always
		 * in effect.
		 */
		time_period_ids?: Array<string>;

		/** Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD). */
		valid_from_date?: string | null;

		/**
		 * Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format
		 * (HH:MM:SS). Partial seconds will be truncated.
		 */
		valid_from_local_time?: string | null;

		/** Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD). */
		valid_until_date?: string | null;

		/**
		 * Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format
		 * (HH:MM:SS). Partial seconds will be truncated.
		 */
		valid_until_local_time?: string | null;
	}

	/**
	 * Defines how discounts are automatically applied to a set of items that match the pricing rule
	 * during the active time period.
	 */
	export interface CatalogPricingRuleFormProperties {

		/**
		 * __Deprecated__: Please use the `exclude_products_id` field to apply
		 * an exclude set instead. Exclude sets allow better control over quantity
		 * ranges and offer more flexibility for which matched items receive a discount.
		 * `CatalogProductSet` to apply the pricing to.
		 * An apply rule matches within the subset of the cart that fits the match rules (the match set).
		 * An apply rule can only match once in the match set.
		 * If not supplied, the pricing will be applied to all products in the match set.
		 * Other products retain their base price, or a price generated by other rules.
		 */
		apply_products_id: FormControl<string | null | undefined>,

		/**
		 * Unique ID for the `CatalogDiscount` to take off
		 * the price of all matched items.
		 */
		discount_id: FormControl<string | null | undefined>,

		/**
		 * `CatalogProductSet` to exclude from the pricing rule.
		 * An exclude rule matches within the subset of the cart that fits the match rules (the match set).
		 * An exclude rule can only match once in the match set.
		 * If not supplied, the pricing will be applied to all products in the match set.
		 * Other products retain their base price, or a price generated by other rules.
		 */
		exclude_products_id: FormControl<string | null | undefined>,

		/**
		 * If an `exclude_products_id` was given, controls which subset of matched
		 * products is excluded from any discounts.
		 * Default value: `LEAST_EXPENSIVE`
		 */
		exclude_strategy: FormControl<string | null | undefined>,

		/**
		 * Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule
		 * matches within the entire cart, and can match multiple times. This field will always be set.
		 */
		match_products_id: FormControl<string | null | undefined>,

		/**
		 * User-defined name for the pricing rule. For example, "Buy one get one
		 * free" or "10% off".
		 */
		name: FormControl<string | null | undefined>,

		/** Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD). */
		valid_from_date: FormControl<string | null | undefined>,

		/**
		 * Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format
		 * (HH:MM:SS). Partial seconds will be truncated.
		 */
		valid_from_local_time: FormControl<string | null | undefined>,

		/** Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD). */
		valid_until_date: FormControl<string | null | undefined>,

		/**
		 * Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format
		 * (HH:MM:SS). Partial seconds will be truncated.
		 */
		valid_until_local_time: FormControl<string | null | undefined>,
	}
	export function CreateCatalogPricingRuleFormGroup() {
		return new FormGroup<CatalogPricingRuleFormProperties>({
			apply_products_id: new FormControl<string | null | undefined>(undefined),
			discount_id: new FormControl<string | null | undefined>(undefined),
			exclude_products_id: new FormControl<string | null | undefined>(undefined),
			exclude_strategy: new FormControl<string | null | undefined>(undefined),
			match_products_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			valid_from_date: new FormControl<string | null | undefined>(undefined),
			valid_from_local_time: new FormControl<string | null | undefined>(undefined),
			valid_until_date: new FormControl<string | null | undefined>(undefined),
			valid_until_local_time: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a collection of catalog objects for the purpose of applying a
	 * `PricingRule`. Including a catalog object will include all of its subtypes.
	 * For example, including a category in a product set will include all of its
	 * items and associated item variations in the product set. Including an item in
	 * a product set will also include its item variations.
	 */
	export interface CatalogProductSet {

		/**
		 * If set to `true`, the product set will include every item in the catalog.
		 * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
		 */
		all_products?: boolean | null;

		/**
		 * User-defined name for the product set. For example, "Clearance Items"
		 * or "Winter Sale Items".
		 */
		name?: string | null;

		/**
		 * Unique IDs for any `CatalogObject` included in this product set.
		 * All objects in this set must be included in an order for a pricing rule to apply.
		 * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
		 * Max: 500 catalog object IDs.
		 */
		product_ids_all?: Array<string>;

		/**
		 * Unique IDs for any `CatalogObject` included in this product set. Any
		 * number of these catalog objects can be in an order for a pricing rule to apply.
		 * This can be used with `product_ids_all` in a parent `CatalogProductSet` to
		 * match groups of products for a bulk discount, such as a discount for an
		 * entree and side combo.
		 * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
		 * Max: 500 catalog object IDs.
		 */
		product_ids_any?: Array<string>;

		/**
		 * If set, there must be exactly this many items from `products_any` or `products_all`
		 * in the cart for the discount to apply.
		 * Cannot be combined with either `quantity_min` or `quantity_max`.
		 */
		quantity_exact?: number | null;

		/**
		 * If set, the pricing rule will apply to a maximum of this many items from
		 * `products_any` or `products_all`.
		 */
		quantity_max?: number | null;

		/**
		 * If set, there must be at least this many items from `products_any` or `products_all`
		 * in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if
		 * `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.
		 */
		quantity_min?: number | null;
	}

	/**
	 * Represents a collection of catalog objects for the purpose of applying a
	 * `PricingRule`. Including a catalog object will include all of its subtypes.
	 * For example, including a category in a product set will include all of its
	 * items and associated item variations in the product set. Including an item in
	 * a product set will also include its item variations.
	 */
	export interface CatalogProductSetFormProperties {

		/**
		 * If set to `true`, the product set will include every item in the catalog.
		 * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
		 */
		all_products: FormControl<boolean | null | undefined>,

		/**
		 * User-defined name for the product set. For example, "Clearance Items"
		 * or "Winter Sale Items".
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * If set, there must be exactly this many items from `products_any` or `products_all`
		 * in the cart for the discount to apply.
		 * Cannot be combined with either `quantity_min` or `quantity_max`.
		 */
		quantity_exact: FormControl<number | null | undefined>,

		/**
		 * If set, the pricing rule will apply to a maximum of this many items from
		 * `products_any` or `products_all`.
		 */
		quantity_max: FormControl<number | null | undefined>,

		/**
		 * If set, there must be at least this many items from `products_any` or `products_all`
		 * in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if
		 * `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.
		 */
		quantity_min: FormControl<number | null | undefined>,
	}
	export function CreateCatalogProductSetFormGroup() {
		return new FormGroup<CatalogProductSetFormProperties>({
			all_products: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			quantity_exact: new FormControl<number | null | undefined>(undefined),
			quantity_max: new FormControl<number | null | undefined>(undefined),
			quantity_min: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts. */
	export interface CatalogQuickAmountsSettings {

		/** Represents a set of Quick Amounts at this location. */
		amounts?: Array<CatalogQuickAmount>;

		/**
		 * Represents location's eligibility for auto amounts
		 * The boolean should be consistent with whether there are AUTO amounts in the `amounts`.
		 */
		eligible_for_auto_amounts?: boolean | null;

		/**
		 * Represents the option seller currently uses on Quick Amounts.
		 * Required
		 */
		option: string;
	}

	/** A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts. */
	export interface CatalogQuickAmountsSettingsFormProperties {

		/**
		 * Represents location's eligibility for auto amounts
		 * The boolean should be consistent with whether there are AUTO amounts in the `amounts`.
		 */
		eligible_for_auto_amounts: FormControl<boolean | null | undefined>,

		/**
		 * Represents the option seller currently uses on Quick Amounts.
		 * Required
		 */
		option: FormControl<string | null | undefined>,
	}
	export function CreateCatalogQuickAmountsSettingsFormGroup() {
		return new FormGroup<CatalogQuickAmountsSettingsFormProperties>({
			eligible_for_auto_amounts: new FormControl<boolean | null | undefined>(undefined),
			option: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents a Quick Amount in the Catalog. */
	export interface CatalogQuickAmount {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount: Money;

		/** The order in which this Quick Amount should be displayed. */
		ordinal?: number | null;

		/**
		 * Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].
		 * MANUAL type amount will always have score = 100.
		 */
		score?: number | null;

		/**
		 * Represents the type of the Quick Amount.
		 * Required
		 */
		type: string;
	}

	/** Represents a Quick Amount in the Catalog. */
	export interface CatalogQuickAmountFormProperties {

		/** The order in which this Quick Amount should be displayed. */
		ordinal: FormControl<number | null | undefined>,

		/**
		 * Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].
		 * MANUAL type amount will always have score = 100.
		 */
		score: FormControl<number | null | undefined>,

		/**
		 * Represents the type of the Quick Amount.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateCatalogQuickAmountFormGroup() {
		return new FormGroup<CatalogQuickAmountFormProperties>({
			ordinal: new FormControl<number | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Describes a subscription plan. For more information, see
	 * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
	 */
	export interface CatalogSubscriptionPlan {

		/**
		 * The name of the plan.
		 * Required
		 */
		name: string;

		/**
		 * A list of SubscriptionPhase containing the [SubscriptionPhase](https://developer.squareup.com/reference/square_2021-08-18/objects/SubscriptionPhase) for this plan.
		 * Required
		 */
		phases: Array<SubscriptionPhase>;
	}

	/**
	 * Describes a subscription plan. For more information, see
	 * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
	 */
	export interface CatalogSubscriptionPlanFormProperties {

		/**
		 * The name of the plan.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCatalogSubscriptionPlanFormGroup() {
		return new FormGroup<CatalogSubscriptionPlanFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Describes a phase in a subscription plan. For more information, see
	 * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
	 */
	export interface SubscriptionPhase {

		/**
		 * The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.
		 * Required
		 */
		cadence: string;

		/** The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created. */
		ordinal?: number | null;

		/** The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created. */
		periods?: number | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		recurring_price_money: Money;

		/** The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created. */
		uid?: string | null;
	}

	/**
	 * Describes a phase in a subscription plan. For more information, see
	 * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
	 */
	export interface SubscriptionPhaseFormProperties {

		/**
		 * The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.
		 * Required
		 */
		cadence: FormControl<string | null | undefined>,

		/** The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created. */
		ordinal: FormControl<number | null | undefined>,

		/** The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created. */
		periods: FormControl<number | null | undefined>,

		/** The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created. */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateSubscriptionPhaseFormGroup() {
		return new FormGroup<SubscriptionPhaseFormProperties>({
			cadence: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ordinal: new FormControl<number | null | undefined>(undefined),
			periods: new FormControl<number | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A tax applicable to an item. */
	export interface CatalogTax {

		/**
		 * If `true`, the fee applies to custom amounts entered into the Square Point of Sale
		 * app that are not associated with a particular `CatalogItem`.
		 */
		applies_to_custom_amounts?: boolean | null;

		/** Whether the tax is calculated based on a payment's subtotal or total. */
		calculation_phase?: string | null;

		/** A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`). */
		enabled?: boolean | null;

		/** Whether the tax is `ADDITIVE` or `INCLUSIVE`. */
		inclusion_type?: string | null;

		/**
		 * The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
		 * A value of `7.5` corresponds to 7.5%.
		 */
		percentage?: string | null;
	}

	/** A tax applicable to an item. */
	export interface CatalogTaxFormProperties {

		/**
		 * If `true`, the fee applies to custom amounts entered into the Square Point of Sale
		 * app that are not associated with a particular `CatalogItem`.
		 */
		applies_to_custom_amounts: FormControl<boolean | null | undefined>,

		/** Whether the tax is calculated based on a payment's subtotal or total. */
		calculation_phase: FormControl<string | null | undefined>,

		/** A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`). */
		enabled: FormControl<boolean | null | undefined>,

		/** Whether the tax is `ADDITIVE` or `INCLUSIVE`. */
		inclusion_type: FormControl<string | null | undefined>,

		/**
		 * The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
		 * A value of `7.5` corresponds to 7.5%.
		 */
		percentage: FormControl<string | null | undefined>,
	}
	export function CreateCatalogTaxFormGroup() {
		return new FormGroup<CatalogTaxFormProperties>({
			applies_to_custom_amounts: new FormControl<boolean | null | undefined>(undefined),
			calculation_phase: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			inclusion_type: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a time period - either a single period or a repeating period. */
	export interface CatalogTimePeriod {

		/**
		 * An iCalendar (RFC 5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which
		 * specifies the name, timing, duration and recurrence of this time period.
		 * Example:
		 * ```
		 * DTSTART:20190707T180000
		 * DURATION:P2H
		 * RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR
		 * ```
		 * Only `SUMMARY`, `DTSTART`, `DURATION` and `RRULE` fields are supported.
		 * `DTSTART` must be in local (unzoned) time format. Note that while `BEGIN:VEVENT`
		 * and `END:VEVENT` is not required in the request. The response will always
		 * include them.
		 */
		event?: string | null;
	}

	/** Represents a time period - either a single period or a repeating period. */
	export interface CatalogTimePeriodFormProperties {

		/**
		 * An iCalendar (RFC 5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which
		 * specifies the name, timing, duration and recurrence of this time period.
		 * Example:
		 * ```
		 * DTSTART:20190707T180000
		 * DURATION:P2H
		 * RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR
		 * ```
		 * Only `SUMMARY`, `DTSTART`, `DURATION` and `RRULE` fields are supported.
		 * `DTSTART` must be in local (unzoned) time format. Note that while `BEGIN:VEVENT`
		 * and `END:VEVENT` is not required in the request. The response will always
		 * include them.
		 */
		event: FormControl<string | null | undefined>,
	}
	export function CreateCatalogTimePeriodFormGroup() {
		return new FormGroup<CatalogTimePeriodFormProperties>({
			event: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BatchRetrieveInventoryChangesRequest {

		/**
		 * The filter to return results by `CatalogObject` ID.
		 * The filter is only applicable when set. The default value is null.
		 */
		catalog_object_ids?: Array<string>;

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/**
		 * The filter to return results by `Location` ID.
		 * The filter is only applicable when set. The default value is null.
		 */
		location_ids?: Array<string>;

		/**
		 * The filter to return `ADJUSTMENT` query results by
		 * `InventoryState`. This filter is only applied when set.
		 * The default value is null.
		 */
		states?: Array<string>;

		/**
		 * The filter to return results by `InventoryChangeType` values other than `TRANSFER`.
		 * The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`.
		 */
		types?: Array<string>;

		/**
		 * The filter to return results with their `calculated_at` value
		 * after the given time as specified in an RFC 3339 timestamp.
		 * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		 */
		updated_after?: string | null;

		/**
		 * The filter to return results with their `created_at` or `calculated_at` value
		 * strictly before the given time as specified in an RFC 3339 timestamp.
		 * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		 */
		updated_before?: string | null;
	}
	export interface BatchRetrieveInventoryChangesRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The filter to return results with their `calculated_at` value
		 * after the given time as specified in an RFC 3339 timestamp.
		 * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		 */
		updated_after: FormControl<string | null | undefined>,

		/**
		 * The filter to return results with their `created_at` or `calculated_at` value
		 * strictly before the given time as specified in an RFC 3339 timestamp.
		 * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		 */
		updated_before: FormControl<string | null | undefined>,
	}
	export function CreateBatchRetrieveInventoryChangesRequestFormGroup() {
		return new FormGroup<BatchRetrieveInventoryChangesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			updated_after: new FormControl<string | null | undefined>(undefined),
			updated_before: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BatchRetrieveInventoryChangesResponse {

		/**
		 * The current calculated inventory changes for the requested objects
		 * and locations.
		 */
		changes?: Array<InventoryChange>;

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface BatchRetrieveInventoryChangesResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateBatchRetrieveInventoryChangesResponseFormGroup() {
		return new FormGroup<BatchRetrieveInventoryChangesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BatchRetrieveInventoryCountsRequest {

		/**
		 * The filter to return results by `CatalogObject` ID.
		 * The filter is applicable only when set.  The default is null.
		 */
		catalog_object_ids?: Array<string>;

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/**
		 * The filter to return results by `Location` ID.
		 * This filter is applicable only when set. The default is null.
		 */
		location_ids?: Array<string>;

		/**
		 * The filter to return results by `InventoryState`. The filter is only applicable when set.
		 * Ignored are untracked states of `NONE`, `SOLD`, and `UNLINKED_RETURN`.
		 * The default is null.
		 */
		states?: Array<string>;

		/**
		 * The filter to return results with their `calculated_at` value
		 * after the given time as specified in an RFC 3339 timestamp.
		 * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		 */
		updated_after?: string | null;
	}
	export interface BatchRetrieveInventoryCountsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The filter to return results with their `calculated_at` value
		 * after the given time as specified in an RFC 3339 timestamp.
		 * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
		 */
		updated_after: FormControl<string | null | undefined>,
	}
	export function CreateBatchRetrieveInventoryCountsRequestFormGroup() {
		return new FormGroup<BatchRetrieveInventoryCountsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			updated_after: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface BatchRetrieveInventoryCountsResponse {

		/**
		 * The current calculated inventory counts for the requested objects
		 * and locations.
		 */
		counts?: Array<InventoryCount>;

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface BatchRetrieveInventoryCountsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateBatchRetrieveInventoryCountsResponseFormGroup() {
		return new FormGroup<BatchRetrieveInventoryCountsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in requests to the
	 * `BatchRetrieveOrders` endpoint.
	 */
	export interface BatchRetrieveOrdersRequest {

		/**
		 * The ID of the location for these orders. This field is optional: omit it to retrieve
		 * orders within the scope of the current authorization's merchant ID.
		 */
		location_id?: string | null;

		/**
		 * The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
		 * Required
		 */
		order_ids: Array<string>;
	}

	/**
	 * Defines the fields that are included in requests to the
	 * `BatchRetrieveOrders` endpoint.
	 */
	export interface BatchRetrieveOrdersRequestFormProperties {

		/**
		 * The ID of the location for these orders. This field is optional: omit it to retrieve
		 * orders within the scope of the current authorization's merchant ID.
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateBatchRetrieveOrdersRequestFormGroup() {
		return new FormGroup<BatchRetrieveOrdersRequestFormProperties>({
			location_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `BatchRetrieveOrders` endpoint.
	 */
	export interface BatchRetrieveOrdersResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The requested orders. This will omit any requested orders that do not exist. */
		orders?: Array<Order>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `BatchRetrieveOrders` endpoint.
	 */
	export interface BatchRetrieveOrdersResponseFormProperties {
	}
	export function CreateBatchRetrieveOrdersResponseFormGroup() {
		return new FormGroup<BatchRetrieveOrdersResponseFormProperties>({
		});

	}


	/**
	 * Contains all information related to a single order to process with Square,
	 * including line items that specify the products to purchase. `Order` objects also
	 * include information about any associated tenders, refunds, and returns.
	 * All Connect V2 Transactions have all been converted to Orders including all associated
	 * itemization data.
	 */
	export interface Order {

		/** The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z"). */
		closed_at?: string | null;

		/** The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z"). */
		created_at?: string | null;

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
		 * __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
		 * to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the
		 * `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the
		 * creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
		 * Max length: 191
		 */
		customer_id?: string | null;

		/**
		 * The list of all discounts associated with the order.
		 * Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
		 * an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
		 * For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
		 * for every line item.
		 * __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
		 * `line_items.discounts` field results in an error. Use `line_items.applied_discounts`
		 * instead.
		 */
		discounts?: Array<OrderLineItemDiscount>;

		/**
		 * Details about order fulfillment.
		 * Orders can only be created with at most one fulfillment. However, orders returned
		 * by the API might contain multiple fulfillments.
		 */
		fulfillments?: Array<OrderFulfillment>;

		/** The order's unique ID. */
		id?: string | null;

		/** The line items included in the order. */
		line_items?: Array<OrderLineItem>;

		/**
		 * The ID of the seller location that this order is associated with.
		 * Required
		 * Min length: 1
		 */
		location_id: string;

		/**
		 * Application-defined data attached to this order. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata?: {[id: string]: string };

		/** A collection of various money amounts. */
		net_amounts?: OrderMoneyAmounts;

		/**
		 * Pricing options for an order. The options affect how the order's price is calculated.
		 * They can be used, for example, to apply automatic price adjustments that are based on preconfigured
		 * [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
		 */
		pricing_options?: OrderPricingOptions;

		/**
		 * A client-specified ID to associate an entity in another system
		 * with this order.
		 * Max length: 40
		 */
		reference_id?: string | null;

		/** The refunds that are part of this order. */
		refunds?: Array<Refund>;

		/** A collection of various money amounts. */
		return_amounts?: OrderMoneyAmounts;

		/**
		 * A collection of items from sale orders being returned in this one. Normally part of an
		 * itemized return or exchange. There is exactly one `Return` object per sale `Order` being
		 * referenced.
		 */
		returns?: Array<OrderReturn>;

		/** A set-like list of Rewards that have been added to the Order. */
		rewards?: Array<OrderReward>;

		/**
		 * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
		 * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
		 */
		rounding_adjustment?: OrderRoundingAdjustment;

		/** A list of service charges applied to the order. */
		service_charges?: Array<OrderServiceCharge>;

		/** Represents the origination details of an order. */
		source?: OrderSource;

		/** The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`. */
		state?: string | null;

		/**
		 * The list of all taxes associated with the order.
		 * Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
		 * `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
		 * with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
		 * On reads, each tax in the list includes the total amount of that tax applied to the order.
		 * __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
		 * `line_items.taxes` field results in an error. Use `line_items.applied_taxes`
		 * instead.
		 */
		taxes?: Array<OrderLineItemTax>;

		/** The tenders that were used to pay for the order. */
		tenders?: Array<Tender>;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_discount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_service_charge_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_tax_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_tip_money?: Money;

		/** The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z"). */
		updated_at?: string | null;

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
		 */
		version?: number | null;
	}

	/**
	 * Contains all information related to a single order to process with Square,
	 * including line items that specify the products to purchase. `Order` objects also
	 * include information about any associated tenders, refunds, and returns.
	 * All Connect V2 Transactions have all been converted to Orders including all associated
	 * itemization data.
	 */
	export interface OrderFormProperties {

		/** The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z"). */
		closed_at: FormControl<string | null | undefined>,

		/** The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z"). */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
		 * __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
		 * to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the
		 * `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the
		 * creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
		 * Max length: 191
		 */
		customer_id: FormControl<string | null | undefined>,

		/** The order's unique ID. */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the seller location that this order is associated with.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * Application-defined data attached to this order. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * A client-specified ID to associate an entity in another system
		 * with this order.
		 * Max length: 40
		 */
		reference_id: FormControl<string | null | undefined>,

		/** The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`. */
		state: FormControl<string | null | undefined>,

		/** The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z"). */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateOrderFormGroup() {
		return new FormGroup<OrderFormProperties>({
			closed_at: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(191)]),
			id: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
			state: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a discount that applies to one or more line items in an
	 * order.
	 * Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.
	 * The amount distributed to each line item is relative to the
	 * amount contributed by the item to the order subtotal.
	 */
	export interface OrderLineItemDiscount {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this discount references. */
		catalog_version?: number | null;

		/**
		 * Application-defined data attached to this discount. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata?: {[id: string]: string };

		/**
		 * The discount's name.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The percentage of the discount, as a string representation of a decimal number.
		 * A value of `7.25` corresponds to a percentage of 7.25%.
		 * `percentage` is not set for amount-based discounts.
		 * Max length: 10
		 */
		percentage?: string | null;

		/**
		 * The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied
		 * automatically to this discount. The specification and application of the discounts, to
		 * which a `pricing_rule_id` is assigned, are completely controlled by the corresponding
		 * pricing rule.
		 */
		pricing_rule_id?: string | null;

		/**
		 * The reward IDs corresponding to this discount. The application and
		 * specification of discounts that have `reward_ids` are completely controlled by the backing
		 * criteria corresponding to the reward tiers of the rewards that are added to the order
		 * through the Loyalty API. To manually unapply discounts that are the result of added rewards,
		 * the rewards must be removed from the order through the Loyalty API.
		 */
		reward_ids?: Array<string>;

		/**
		 * Indicates the level at which the discount applies. For `ORDER` scoped discounts,
		 * Square generates references in `applied_discounts` on all order line items that do
		 * not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items
		 * with a discount reference in their `applied_discounts` field.
		 * This field is immutable. To change the scope of a discount, you must delete
		 * the discount and re-add it as a new discount.
		 */
		scope?: string | null;

		/**
		 * The type of the discount.
		 * Discounts that do not reference a catalog object ID must have a type of
		 * `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		 */
		type?: string | null;

		/**
		 * A unique ID that identifies the discount only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * Represents a discount that applies to one or more line items in an
	 * order.
	 * Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.
	 * The amount distributed to each line item is relative to the
	 * amount contributed by the item to the order subtotal.
	 */
	export interface OrderLineItemDiscountFormProperties {

		/**
		 * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this discount references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * Application-defined data attached to this discount. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * The discount's name.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The percentage of the discount, as a string representation of a decimal number.
		 * A value of `7.25` corresponds to a percentage of 7.25%.
		 * `percentage` is not set for amount-based discounts.
		 * Max length: 10
		 */
		percentage: FormControl<string | null | undefined>,

		/**
		 * The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied
		 * automatically to this discount. The specification and application of the discounts, to
		 * which a `pricing_rule_id` is assigned, are completely controlled by the corresponding
		 * pricing rule.
		 */
		pricing_rule_id: FormControl<string | null | undefined>,

		/**
		 * Indicates the level at which the discount applies. For `ORDER` scoped discounts,
		 * Square generates references in `applied_discounts` on all order line items that do
		 * not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items
		 * with a discount reference in their `applied_discounts` field.
		 * This field is immutable. To change the scope of a discount, you must delete
		 * the discount and re-add it as a new discount.
		 */
		scope: FormControl<string | null | undefined>,

		/**
		 * The type of the discount.
		 * Discounts that do not reference a catalog object ID must have a type of
		 * `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the discount only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemDiscountFormGroup() {
		return new FormGroup<OrderLineItemDiscountFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			pricing_rule_id: new FormControl<string | null | undefined>(undefined),
			scope: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/** Contains details about how to fulfill this order. */
	export interface OrderFulfillment {

		/**
		 * Application-defined data attached to this fulfillment. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata?: {[id: string]: string };

		/** Contains details necessary to fulfill a pickup order. */
		pickup_details?: OrderFulfillmentPickupDetails;

		/** Contains the details necessary to fulfill a shipment order. */
		shipment_details?: OrderFulfillmentShipmentDetails;

		/** The state of the fulfillment. */
		state?: string | null;

		/** The type of the fulfillment. */
		type?: string | null;

		/**
		 * A unique ID that identifies the fulfillment only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/** Contains details about how to fulfill this order. */
	export interface OrderFulfillmentFormProperties {

		/**
		 * Application-defined data attached to this fulfillment. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/** The state of the fulfillment. */
		state: FormControl<string | null | undefined>,

		/** The type of the fulfillment. */
		type: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the fulfillment only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderFulfillmentFormGroup() {
		return new FormGroup<OrderFulfillmentFormProperties>({
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/** Contains details necessary to fulfill a pickup order. */
	export interface OrderFulfillmentPickupDetails {

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was accepted. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		accepted_at?: string | null;

		/**
		 * The duration of time after which an open and accepted pickup fulfillment
		 * is automatically moved to the `COMPLETED` state. The duration must be in RFC 3339
		 * format (for example, "P1W3D").
		 * If not set, this pickup fulfillment remains accepted until it is canceled or completed.
		 */
		auto_complete_duration?: string | null;

		/**
		 * A description of why the pickup was canceled. The maximum length: 100 characters.
		 * Max length: 100
		 */
		cancel_reason?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		canceled_at?: string | null;

		/** Specific details for curbside pickup. */
		curbside_pickup_details?: OrderFulfillmentPickupDetailsCurbsidePickupDetails;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		expired_at?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
		 * If `expires_at` is not set, this pickup fulfillment is automatically accepted when
		 * placed.
		 */
		expires_at?: string | null;

		/** If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup. */
		is_curbside_pickup?: boolean | null;

		/**
		 * A note meant to provide additional instructions about the pickup
		 * fulfillment displayed in the Square Point of Sale application and set by the API.
		 * Max length: 500
		 */
		note?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		picked_up_at?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
		 * "2016-09-04T23:59:33.123Z".
		 * For fulfillments with the schedule type `ASAP`, this is automatically set
		 * to the current time plus the expected duration to prepare the fulfillment.
		 */
		pickup_at?: string | null;

		/**
		 * The window of time in which the order should be picked up after the `pickup_at` timestamp.
		 * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
		 * informational guideline for merchants.
		 */
		pickup_window_duration?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		placed_at?: string | null;

		/**
		 * The duration of time it takes to prepare this fulfillment.
		 * The duration must be in RFC 3339 format (for example, "P1W3D").
		 */
		prep_time_duration?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		ready_at?: string | null;

		/** Contains information about the recipient of a fulfillment. */
		recipient?: OrderFulfillmentRecipient;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		rejected_at?: string | null;

		/** The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`. */
		schedule_type?: string | null;
	}

	/** Contains details necessary to fulfill a pickup order. */
	export interface OrderFulfillmentPickupDetailsFormProperties {

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was accepted. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		accepted_at: FormControl<string | null | undefined>,

		/**
		 * The duration of time after which an open and accepted pickup fulfillment
		 * is automatically moved to the `COMPLETED` state. The duration must be in RFC 3339
		 * format (for example, "P1W3D").
		 * If not set, this pickup fulfillment remains accepted until it is canceled or completed.
		 */
		auto_complete_duration: FormControl<string | null | undefined>,

		/**
		 * A description of why the pickup was canceled. The maximum length: 100 characters.
		 * Max length: 100
		 */
		cancel_reason: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		canceled_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		expired_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
		 * If `expires_at` is not set, this pickup fulfillment is automatically accepted when
		 * placed.
		 */
		expires_at: FormControl<string | null | undefined>,

		/** If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup. */
		is_curbside_pickup: FormControl<boolean | null | undefined>,

		/**
		 * A note meant to provide additional instructions about the pickup
		 * fulfillment displayed in the Square Point of Sale application and set by the API.
		 * Max length: 500
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		picked_up_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
		 * "2016-09-04T23:59:33.123Z".
		 * For fulfillments with the schedule type `ASAP`, this is automatically set
		 * to the current time plus the expected duration to prepare the fulfillment.
		 */
		pickup_at: FormControl<string | null | undefined>,

		/**
		 * The window of time in which the order should be picked up after the `pickup_at` timestamp.
		 * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
		 * informational guideline for merchants.
		 */
		pickup_window_duration: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		placed_at: FormControl<string | null | undefined>,

		/**
		 * The duration of time it takes to prepare this fulfillment.
		 * The duration must be in RFC 3339 format (for example, "P1W3D").
		 */
		prep_time_duration: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		ready_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		rejected_at: FormControl<string | null | undefined>,

		/** The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`. */
		schedule_type: FormControl<string | null | undefined>,
	}
	export function CreateOrderFulfillmentPickupDetailsFormGroup() {
		return new FormGroup<OrderFulfillmentPickupDetailsFormProperties>({
			accepted_at: new FormControl<string | null | undefined>(undefined),
			auto_complete_duration: new FormControl<string | null | undefined>(undefined),
			cancel_reason: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			canceled_at: new FormControl<string | null | undefined>(undefined),
			expired_at: new FormControl<string | null | undefined>(undefined),
			expires_at: new FormControl<string | null | undefined>(undefined),
			is_curbside_pickup: new FormControl<boolean | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(500)]),
			picked_up_at: new FormControl<string | null | undefined>(undefined),
			pickup_at: new FormControl<string | null | undefined>(undefined),
			pickup_window_duration: new FormControl<string | null | undefined>(undefined),
			placed_at: new FormControl<string | null | undefined>(undefined),
			prep_time_duration: new FormControl<string | null | undefined>(undefined),
			ready_at: new FormControl<string | null | undefined>(undefined),
			rejected_at: new FormControl<string | null | undefined>(undefined),
			schedule_type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specific details for curbside pickup. */
	export interface OrderFulfillmentPickupDetailsCurbsidePickupDetails {

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		buyer_arrived_at?: string | null;

		/**
		 * Specific details for curbside pickup, such as parking number and vehicle model.
		 * Max length: 250
		 */
		curbside_details?: string | null;
	}

	/** Specific details for curbside pickup. */
	export interface OrderFulfillmentPickupDetailsCurbsidePickupDetailsFormProperties {

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		buyer_arrived_at: FormControl<string | null | undefined>,

		/**
		 * Specific details for curbside pickup, such as parking number and vehicle model.
		 * Max length: 250
		 */
		curbside_details: FormControl<string | null | undefined>,
	}
	export function CreateOrderFulfillmentPickupDetailsCurbsidePickupDetailsFormGroup() {
		return new FormGroup<OrderFulfillmentPickupDetailsCurbsidePickupDetailsFormProperties>({
			buyer_arrived_at: new FormControl<string | null | undefined>(undefined),
			curbside_details: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(250)]),
		});

	}


	/** Contains information about the recipient of a fulfillment. */
	export interface OrderFulfillmentRecipient {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		address?: Address;

		/**
		 * The customer ID of the customer associated with the fulfillment.
		 * If `customer_id` is provided, the fulfillment recipient's `display_name`,
		 * `email_address`, and `phone_number` are automatically populated from the
		 * targeted customer profile. If these fields are set in the request, the request
		 * values overrides the information from the customer profile. If the
		 * targeted customer profile does not contain the necessary information and
		 * these fields are left unset, the request results in an error.
		 * Max length: 191
		 */
		customer_id?: string | null;

		/**
		 * The display name of the fulfillment recipient.
		 * If provided, the display name overrides the value pulled from the customer profile indicated by `customer_id`.
		 * Max length: 255
		 */
		display_name?: string | null;

		/**
		 * The email address of the fulfillment recipient.
		 * If provided, the email address overrides the value pulled from the customer profile indicated by `customer_id`.
		 * Max length: 255
		 */
		email_address?: string | null;

		/**
		 * The phone number of the fulfillment recipient.
		 * If provided, the phone number overrides the value pulled from the customer profile indicated by `customer_id`.
		 * Max length: 17
		 */
		phone_number?: string | null;
	}

	/** Contains information about the recipient of a fulfillment. */
	export interface OrderFulfillmentRecipientFormProperties {

		/**
		 * The customer ID of the customer associated with the fulfillment.
		 * If `customer_id` is provided, the fulfillment recipient's `display_name`,
		 * `email_address`, and `phone_number` are automatically populated from the
		 * targeted customer profile. If these fields are set in the request, the request
		 * values overrides the information from the customer profile. If the
		 * targeted customer profile does not contain the necessary information and
		 * these fields are left unset, the request results in an error.
		 * Max length: 191
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * The display name of the fulfillment recipient.
		 * If provided, the display name overrides the value pulled from the customer profile indicated by `customer_id`.
		 * Max length: 255
		 */
		display_name: FormControl<string | null | undefined>,

		/**
		 * The email address of the fulfillment recipient.
		 * If provided, the email address overrides the value pulled from the customer profile indicated by `customer_id`.
		 * Max length: 255
		 */
		email_address: FormControl<string | null | undefined>,

		/**
		 * The phone number of the fulfillment recipient.
		 * If provided, the phone number overrides the value pulled from the customer profile indicated by `customer_id`.
		 * Max length: 17
		 */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateOrderFulfillmentRecipientFormGroup() {
		return new FormGroup<OrderFulfillmentRecipientFormProperties>({
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(191)]),
			display_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			phone_number: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(17)]),
		});

	}


	/** Contains the details necessary to fulfill a shipment order. */
	export interface OrderFulfillmentShipmentDetails {

		/**
		 * A description of why the shipment was canceled.
		 * Max length: 100
		 */
		cancel_reason?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating the shipment was canceled.
		 * The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		canceled_at?: string | null;

		/**
		 * The shipping carrier being used to ship this fulfillment (such as UPS, FedEx, or USPS).
		 * Max length: 50
		 */
		carrier?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the shipment is expected to be delivered to the shipping carrier.
		 * The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		expected_shipped_at?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the shipment failed to be completed. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		failed_at?: string | null;

		/**
		 * A description of why the shipment failed to be completed.
		 * Max length: 100
		 */
		failure_reason?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment was moved to the `RESERVED` state, which  indicates that preparation
		 * of this shipment has begun. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		in_progress_at?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment was moved to the `PREPARED` state, which indicates that the
		 * fulfillment is packaged. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		packaged_at?: string | null;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the shipment was requested. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		placed_at?: string | null;

		/** Contains information about the recipient of a fulfillment. */
		recipient?: OrderFulfillmentRecipient;

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment was moved to the `COMPLETED` state, which indicates that
		 * the fulfillment has been given to the shipping carrier. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		shipped_at?: string | null;

		/**
		 * A note with additional information for the shipping carrier.
		 * Max length: 500
		 */
		shipping_note?: string | null;

		/**
		 * A description of the type of shipping product purchased from the carrier
		 * (such as First Class, Priority, or Express).
		 * Max length: 50
		 */
		shipping_type?: string | null;

		/**
		 * The reference number provided by the carrier to track the shipment's progress.
		 * Max length: 100
		 */
		tracking_number?: string | null;

		/**
		 * A link to the tracking webpage on the carrier's website.
		 * Max length: 2000
		 */
		tracking_url?: string | null;
	}

	/** Contains the details necessary to fulfill a shipment order. */
	export interface OrderFulfillmentShipmentDetailsFormProperties {

		/**
		 * A description of why the shipment was canceled.
		 * Max length: 100
		 */
		cancel_reason: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating the shipment was canceled.
		 * The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		canceled_at: FormControl<string | null | undefined>,

		/**
		 * The shipping carrier being used to ship this fulfillment (such as UPS, FedEx, or USPS).
		 * Max length: 50
		 */
		carrier: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the shipment is expected to be delivered to the shipping carrier.
		 * The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		expected_shipped_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the shipment failed to be completed. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		failed_at: FormControl<string | null | undefined>,

		/**
		 * A description of why the shipment failed to be completed.
		 * Max length: 100
		 */
		failure_reason: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment was moved to the `RESERVED` state, which  indicates that preparation
		 * of this shipment has begun. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		in_progress_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment was moved to the `PREPARED` state, which indicates that the
		 * fulfillment is packaged. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
		 */
		packaged_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when the shipment was requested. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		placed_at: FormControl<string | null | undefined>,

		/**
		 * The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * indicating when this fulfillment was moved to the `COMPLETED` state, which indicates that
		 * the fulfillment has been given to the shipping carrier. The timestamp must be in RFC 3339 format
		 * (for example, "2016-09-04T23:59:33.123Z").
		 */
		shipped_at: FormControl<string | null | undefined>,

		/**
		 * A note with additional information for the shipping carrier.
		 * Max length: 500
		 */
		shipping_note: FormControl<string | null | undefined>,

		/**
		 * A description of the type of shipping product purchased from the carrier
		 * (such as First Class, Priority, or Express).
		 * Max length: 50
		 */
		shipping_type: FormControl<string | null | undefined>,

		/**
		 * The reference number provided by the carrier to track the shipment's progress.
		 * Max length: 100
		 */
		tracking_number: FormControl<string | null | undefined>,

		/**
		 * A link to the tracking webpage on the carrier's website.
		 * Max length: 2000
		 */
		tracking_url: FormControl<string | null | undefined>,
	}
	export function CreateOrderFulfillmentShipmentDetailsFormGroup() {
		return new FormGroup<OrderFulfillmentShipmentDetailsFormProperties>({
			cancel_reason: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			canceled_at: new FormControl<string | null | undefined>(undefined),
			carrier: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expected_shipped_at: new FormControl<string | null | undefined>(undefined),
			failed_at: new FormControl<string | null | undefined>(undefined),
			failure_reason: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			in_progress_at: new FormControl<string | null | undefined>(undefined),
			packaged_at: new FormControl<string | null | undefined>(undefined),
			placed_at: new FormControl<string | null | undefined>(undefined),
			shipped_at: new FormControl<string | null | undefined>(undefined),
			shipping_note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(500)]),
			shipping_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			tracking_number: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			tracking_url: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2000)]),
		});

	}


	/**
	 * Represents a line item in an order. Each line item describes a different
	 * product to purchase, with its own quantity and price details.
	 */
	export interface OrderLineItem {

		/**
		 * The list of references to discounts applied to this line item. Each
		 * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
		 * `OrderLineItemDiscounts` applied to the line item. On reads, the amount
		 * applied is populated.
		 * An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
		 * `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
		 * for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
		 * line items.
		 * To change the amount of a discount, modify the referenced top-level discount.
		 */
		applied_discounts?: Array<OrderLineItemAppliedDiscount>;

		/**
		 * The list of references to taxes applied to this line item. Each
		 * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
		 * top-level `OrderLineItemTax` applied to the line item. On reads, the
		 * amount applied is populated.
		 * An `OrderLineItemAppliedTax` is automatically created on every line
		 * item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
		 * records for `LINE_ITEM` scoped taxes must be added in requests for the tax
		 * to apply to any line items.
		 * To change the amount of a tax, modify the referenced top-level tax.
		 */
		applied_taxes?: Array<OrderLineItemAppliedTax>;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		base_price_money?: Money;

		/**
		 * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this line item references. */
		catalog_version?: number | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		gross_sales_money?: Money;

		/**
		 * The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
		 * activation or reloading of a gift card.
		 */
		item_type?: string | null;

		/**
		 * Application-defined data attached to this line item. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata?: {[id: string]: string };

		/** The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item. */
		modifiers?: Array<OrderLineItemModifier>;

		/**
		 * The name of the line item.
		 * Max length: 512
		 */
		name?: string | null;

		/**
		 * The note of the line item.
		 * Max length: 2000
		 */
		note?: string | null;

		/**
		 * Describes pricing adjustments that are blocked from manual and
		 * automatic application to a line item. For more information, see
		 * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
		 */
		pricing_blocklists?: OrderLineItemPricingBlocklists;

		/**
		 * The quantity purchased, formatted as a decimal number.
		 * For example, `"3"`.
		 * Line items with a quantity of `"0"` are automatically removed
		 * when paying for or otherwise completing the order.
		 * Line items with a `quantity_unit` can have non-integer quantities.
		 * For example, `"1.70000"`.
		 * Required
		 * Max length: 12
		 * Min length: 1
		 */
		quantity: string;

		/**
		 * Contains the measurement unit for a quantity and a precision that
		 * specifies the number of digits after the decimal point for decimal quantities.
		 */
		quantity_unit?: OrderQuantityUnit;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_discount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_tax_money?: Money;

		/**
		 * A unique ID that identifies the line item only within this order.
		 * Max length: 60
		 */
		uid?: string | null;

		/**
		 * The name of the variation applied to this line item.
		 * Max length: 255
		 */
		variation_name?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		variation_total_price_money?: Money;
	}

	/**
	 * Represents a line item in an order. Each line item describes a different
	 * product to purchase, with its own quantity and price details.
	 */
	export interface OrderLineItemFormProperties {

		/**
		 * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this line item references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
		 * activation or reloading of a gift card.
		 */
		item_type: FormControl<string | null | undefined>,

		/**
		 * Application-defined data attached to this line item. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * The name of the line item.
		 * Max length: 512
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The note of the line item.
		 * Max length: 2000
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The quantity purchased, formatted as a decimal number.
		 * For example, `"3"`.
		 * Line items with a quantity of `"0"` are automatically removed
		 * when paying for or otherwise completing the order.
		 * Line items with a `quantity_unit` can have non-integer quantities.
		 * For example, `"1.70000"`.
		 * Required
		 * Max length: 12
		 * Min length: 1
		 */
		quantity: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the line item only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,

		/**
		 * The name of the variation applied to this line item.
		 * Max length: 255
		 */
		variation_name: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemFormGroup() {
		return new FormGroup<OrderLineItemFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			item_type: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(512)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2000)]),
			quantity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(12)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			variation_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}


	/**
	 * Represents an applied portion of a discount to a line item in an order.
	 * Order scoped discounts have automatically applied discounts present for each line item.
	 * Line-item scoped discounts must have applied discounts added manually for any applicable line
	 * items. The corresponding applied money is automatically computed based on participating
	 * line items.
	 */
	export interface OrderLineItemAppliedDiscount {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * The `uid` of the discount that the applied discount represents. It must
		 * reference a discount present in the `order.discounts` field.
		 * This field is immutable. To change which discounts apply to a line item,
		 * you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
		 * Required
		 * Max length: 60
		 * Min length: 1
		 */
		discount_uid: string;

		/**
		 * A unique ID that identifies the applied discount only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * Represents an applied portion of a discount to a line item in an order.
	 * Order scoped discounts have automatically applied discounts present for each line item.
	 * Line-item scoped discounts must have applied discounts added manually for any applicable line
	 * items. The corresponding applied money is automatically computed based on participating
	 * line items.
	 */
	export interface OrderLineItemAppliedDiscountFormProperties {

		/**
		 * The `uid` of the discount that the applied discount represents. It must
		 * reference a discount present in the `order.discounts` field.
		 * This field is immutable. To change which discounts apply to a line item,
		 * you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
		 * Required
		 * Max length: 60
		 * Min length: 1
		 */
		discount_uid: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the applied discount only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemAppliedDiscountFormGroup() {
		return new FormGroup<OrderLineItemAppliedDiscountFormProperties>({
			discount_uid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(60)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * Represents an applied portion of a tax to a line item in an order.
	 * Order-scoped taxes automatically include the applied taxes in each line item.
	 * Line item taxes must be referenced from any applicable line items.
	 * The corresponding applied money is automatically computed, based on the
	 * set of participating line items.
	 */
	export interface OrderLineItemAppliedTax {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * The `uid` of the tax for which this applied tax represents. It must reference
		 * a tax present in the `order.taxes` field.
		 * This field is immutable. To change which taxes apply to a line item, delete and add a new
		 * `OrderLineItemAppliedTax`.
		 * Required
		 * Max length: 60
		 * Min length: 1
		 */
		tax_uid: string;

		/**
		 * A unique ID that identifies the applied tax only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * Represents an applied portion of a tax to a line item in an order.
	 * Order-scoped taxes automatically include the applied taxes in each line item.
	 * Line item taxes must be referenced from any applicable line items.
	 * The corresponding applied money is automatically computed, based on the
	 * set of participating line items.
	 */
	export interface OrderLineItemAppliedTaxFormProperties {

		/**
		 * The `uid` of the tax for which this applied tax represents. It must reference
		 * a tax present in the `order.taxes` field.
		 * This field is immutable. To change which taxes apply to a line item, delete and add a new
		 * `OrderLineItemAppliedTax`.
		 * Required
		 * Max length: 60
		 * Min length: 1
		 */
		tax_uid: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the applied tax only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemAppliedTaxFormGroup() {
		return new FormGroup<OrderLineItemAppliedTaxFormProperties>({
			tax_uid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(60)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/** A [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier). */
	export interface OrderLineItemModifier {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		base_price_money?: Money;

		/**
		 * The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this modifier references. */
		catalog_version?: number | null;

		/**
		 * The name of the item modifier.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_price_money?: Money;

		/**
		 * A unique ID that identifies the modifier only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/** A [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier). */
	export interface OrderLineItemModifierFormProperties {

		/**
		 * The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this modifier references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The name of the item modifier.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the modifier only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemModifierFormGroup() {
		return new FormGroup<OrderLineItemModifierFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * Describes pricing adjustments that are blocked from manual and 
	 * automatic application to a line item. For more information, see 
	 * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
	 */
	export interface OrderLineItemPricingBlocklists {

		/**
		 * A list of discounts blocked from applying to the line item.
		 * Discounts can be blocked by the `discount_uid` (for ad hoc discounts) or
		 * the `discount_catalog_object_id` (for catalog discounts).
		 */
		blocked_discounts?: Array<OrderLineItemPricingBlocklistsBlockedDiscount>;

		/**
		 * A list of taxes blocked from applying to the line item.
		 * Taxes can be blocked by the `tax_uid` (for ad hoc taxes) or
		 * the `tax_catalog_object_id` (for catalog taxes).
		 */
		blocked_taxes?: Array<OrderLineItemPricingBlocklistsBlockedTax>;
	}

	/**
	 * Describes pricing adjustments that are blocked from manual and 
	 * automatic application to a line item. For more information, see 
	 * [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
	 */
	export interface OrderLineItemPricingBlocklistsFormProperties {
	}
	export function CreateOrderLineItemPricingBlocklistsFormGroup() {
		return new FormGroup<OrderLineItemPricingBlocklistsFormProperties>({
		});

	}


	/**
	 * A discount to block from applying to a line item. The discount must be 
	 * identified by either `discount_uid` or `discount_catalog_object_id`, but not both.
	 */
	export interface OrderLineItemPricingBlocklistsBlockedDiscount {

		/**
		 * The `catalog_object_id` of the discount that should be blocked.
		 * Use this field to block catalog discounts. For ad hoc discounts, use the
		 * `discount_uid` field.
		 * Max length: 192
		 */
		discount_catalog_object_id?: string | null;

		/**
		 * The `uid` of the discount that should be blocked. Use this field to block
		 * ad hoc discounts. For catalog discounts, use the `discount_catalog_object_id` field.
		 * Max length: 60
		 */
		discount_uid?: string | null;

		/**
		 * A unique ID of the `BlockedDiscount` within the order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * A discount to block from applying to a line item. The discount must be 
	 * identified by either `discount_uid` or `discount_catalog_object_id`, but not both.
	 */
	export interface OrderLineItemPricingBlocklistsBlockedDiscountFormProperties {

		/**
		 * The `catalog_object_id` of the discount that should be blocked.
		 * Use this field to block catalog discounts. For ad hoc discounts, use the
		 * `discount_uid` field.
		 * Max length: 192
		 */
		discount_catalog_object_id: FormControl<string | null | undefined>,

		/**
		 * The `uid` of the discount that should be blocked. Use this field to block
		 * ad hoc discounts. For catalog discounts, use the `discount_catalog_object_id` field.
		 * Max length: 60
		 */
		discount_uid: FormControl<string | null | undefined>,

		/**
		 * A unique ID of the `BlockedDiscount` within the order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemPricingBlocklistsBlockedDiscountFormGroup() {
		return new FormGroup<OrderLineItemPricingBlocklistsBlockedDiscountFormProperties>({
			discount_catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			discount_uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * A tax to block from applying to a line item. The tax must be 
	 * identified by either `tax_uid` or `tax_catalog_object_id`, but not both.
	 */
	export interface OrderLineItemPricingBlocklistsBlockedTax {

		/**
		 * The `catalog_object_id` of the tax that should be blocked.
		 * Use this field to block catalog taxes. For ad hoc taxes, use the
		 * `tax_uid` field.
		 * Max length: 192
		 */
		tax_catalog_object_id?: string | null;

		/**
		 * The `uid` of the tax that should be blocked. Use this field to block
		 * ad hoc taxes. For catalog, taxes use the `tax_catalog_object_id` field.
		 * Max length: 60
		 */
		tax_uid?: string | null;

		/**
		 * A unique ID of the `BlockedTax` within the order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * A tax to block from applying to a line item. The tax must be 
	 * identified by either `tax_uid` or `tax_catalog_object_id`, but not both.
	 */
	export interface OrderLineItemPricingBlocklistsBlockedTaxFormProperties {

		/**
		 * The `catalog_object_id` of the tax that should be blocked.
		 * Use this field to block catalog taxes. For ad hoc taxes, use the
		 * `tax_uid` field.
		 * Max length: 192
		 */
		tax_catalog_object_id: FormControl<string | null | undefined>,

		/**
		 * The `uid` of the tax that should be blocked. Use this field to block
		 * ad hoc taxes. For catalog, taxes use the `tax_catalog_object_id` field.
		 * Max length: 60
		 */
		tax_uid: FormControl<string | null | undefined>,

		/**
		 * A unique ID of the `BlockedTax` within the order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemPricingBlocklistsBlockedTaxFormGroup() {
		return new FormGroup<OrderLineItemPricingBlocklistsBlockedTaxFormProperties>({
			tax_catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			tax_uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * Contains the measurement unit for a quantity and a precision that
	 * specifies the number of digits after the decimal point for decimal quantities.
	 */
	export interface OrderQuantityUnit {

		/**
		 * The version of the catalog object that this measurement unit references.
		 * This field is set when this is a catalog-backed measurement unit.
		 */
		catalog_version?: number | null;

		/**
		 * Represents a unit of measurement to use with a quantity, such as ounces
		 * or inches. Exactly one of the following fields are required: `custom_unit`,
		 * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
		 */
		measurement_unit?: MeasurementUnit;

		/**
		 * For non-integer quantities, represents the number of digits after the decimal point that are
		 * recorded for this quantity.
		 * For example, a precision of 1 allows quantities such as `"1.0"` and `"1.1"`, but not `"1.01"`.
		 * Min: 0. Max: 5.
		 */
		precision?: number | null;
	}

	/**
	 * Contains the measurement unit for a quantity and a precision that
	 * specifies the number of digits after the decimal point for decimal quantities.
	 */
	export interface OrderQuantityUnitFormProperties {

		/**
		 * The version of the catalog object that this measurement unit references.
		 * This field is set when this is a catalog-backed measurement unit.
		 */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * For non-integer quantities, represents the number of digits after the decimal point that are
		 * recorded for this quantity.
		 * For example, a precision of 1 allows quantities such as `"1.0"` and `"1.1"`, but not `"1.01"`.
		 * Min: 0. Max: 5.
		 */
		precision: FormControl<number | null | undefined>,
	}
	export function CreateOrderQuantityUnitFormGroup() {
		return new FormGroup<OrderQuantityUnitFormProperties>({
			catalog_version: new FormControl<number | null | undefined>(undefined),
			precision: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A collection of various money amounts. */
	export interface OrderMoneyAmounts {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		discount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		service_charge_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		tax_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		tip_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_money?: Money;
	}

	/** A collection of various money amounts. */
	export interface OrderMoneyAmountsFormProperties {
	}
	export function CreateOrderMoneyAmountsFormGroup() {
		return new FormGroup<OrderMoneyAmountsFormProperties>({
		});

	}


	/**
	 * Pricing options for an order. The options affect how the order's price is calculated.
	 * They can be used, for example, to apply automatic price adjustments that are based on preconfigured
	 * [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
	 */
	export interface OrderPricingOptions {

		/**
		 * The option to determine whether pricing rule-based
		 * discounts are automatically applied to an order.
		 */
		auto_apply_discounts?: boolean | null;

		/**
		 * The option to determine whether rule-based taxes are automatically
		 * applied to an order when the criteria of the corresponding rules are met.
		 */
		auto_apply_taxes?: boolean | null;
	}

	/**
	 * Pricing options for an order. The options affect how the order's price is calculated.
	 * They can be used, for example, to apply automatic price adjustments that are based on preconfigured
	 * [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
	 */
	export interface OrderPricingOptionsFormProperties {

		/**
		 * The option to determine whether pricing rule-based
		 * discounts are automatically applied to an order.
		 */
		auto_apply_discounts: FormControl<boolean | null | undefined>,

		/**
		 * The option to determine whether rule-based taxes are automatically
		 * applied to an order when the criteria of the corresponding rules are met.
		 */
		auto_apply_taxes: FormControl<boolean | null | undefined>,
	}
	export function CreateOrderPricingOptionsFormGroup() {
		return new FormGroup<OrderPricingOptionsFormProperties>({
			auto_apply_discounts: new FormControl<boolean | null | undefined>(undefined),
			auto_apply_taxes: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents a refund processed for a Square transaction. */
	export interface Refund {

		/**
		 * Additional recipients (other than the merchant) receiving a portion of this refund.
		 * For example, fees assessed on a refund of a purchase by a third party integration.
		 */
		additional_recipients?: Array<AdditionalRecipient>;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * The timestamp for when the refund was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at?: string | null;

		/**
		 * The refund's unique ID.
		 * Required
		 * Max length: 255
		 */
		id: string;

		/**
		 * The ID of the refund's associated location.
		 * Required
		 * Max length: 50
		 */
		location_id: string;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		processing_fee_money?: Money;

		/**
		 * The reason for the refund being issued.
		 * Required
		 * Max length: 192
		 */
		reason: string;

		/**
		 * The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,
		 * or `FAILED`).
		 * Required
		 */
		status: string;

		/**
		 * The ID of the refunded tender.
		 * Required
		 * Max length: 192
		 */
		tender_id: string;

		/**
		 * The ID of the transaction that the refunded tender is part of.
		 * Required
		 * Max length: 192
		 */
		transaction_id: string;
	}

	/** Represents a refund processed for a Square transaction. */
	export interface RefundFormProperties {

		/**
		 * The timestamp for when the refund was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The refund's unique ID.
		 * Required
		 * Max length: 255
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the refund's associated location.
		 * Required
		 * Max length: 50
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The reason for the refund being issued.
		 * Required
		 * Max length: 192
		 */
		reason: FormControl<string | null | undefined>,

		/**
		 * The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,
		 * or `FAILED`).
		 * Required
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * The ID of the refunded tender.
		 * Required
		 * Max length: 192
		 */
		tender_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the transaction that the refunded tender is part of.
		 * Required
		 * Max length: 192
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateRefundFormGroup() {
		return new FormGroup<RefundFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(192)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tender_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(192)]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(192)]),
		});

	}


	/** The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order. */
	export interface OrderReturn {

		/** A collection of various money amounts. */
		return_amounts?: OrderMoneyAmounts;

		/**
		 * A collection of references to discounts being returned for an order, including the total
		 * applied discount amount to be returned. The discounts must reference a top-level discount ID
		 * from the source order.
		 */
		return_discounts?: Array<OrderReturnDiscount>;

		/** A collection of line items that are being returned. */
		return_line_items?: Array<OrderReturnLineItem>;

		/** A collection of service charges that are being returned. */
		return_service_charges?: Array<OrderReturnServiceCharge>;

		/**
		 * A collection of references to taxes being returned for an order, including the total
		 * applied tax amount to be returned. The taxes must reference a top-level tax ID from the source
		 * order.
		 */
		return_taxes?: Array<OrderReturnTax>;

		/**
		 * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
		 * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
		 */
		rounding_adjustment?: OrderRoundingAdjustment;

		/**
		 * An order that contains the original sale of these return line items. This is unset
		 * for unlinked returns.
		 */
		source_order_id?: string | null;

		/**
		 * A unique ID that identifies the return only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/** The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order. */
	export interface OrderReturnFormProperties {

		/**
		 * An order that contains the original sale of these return line items. This is unset
		 * for unlinked returns.
		 */
		source_order_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the return only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderReturnFormGroup() {
		return new FormGroup<OrderReturnFormProperties>({
			source_order_id: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * Represents a discount being returned that applies to one or more return line items in an
	 * order.
	 * Fixed-amount, order-scoped discounts are distributed across all non-zero return line item totals.
	 * The amount distributed to each return line item is relative to that item’s contribution to the
	 * order subtotal.
	 */
	export interface OrderReturnDiscount {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this discount references. */
		catalog_version?: number | null;

		/**
		 * The discount's name.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The percentage of the tax, as a string representation of a decimal number.
		 * A value of `"7.25"` corresponds to a percentage of 7.25%.
		 * `percentage` is not set for amount-based discounts.
		 * Max length: 10
		 */
		percentage?: string | null;

		/**
		 * Indicates the level at which the `OrderReturnDiscount` applies. For `ORDER` scoped
		 * discounts, the server generates references in `applied_discounts` on all
		 * `OrderReturnLineItem`s. For `LINE_ITEM` scoped discounts, the discount is only applied to
		 * `OrderReturnLineItem`s with references in their `applied_discounts` field.
		 */
		scope?: string | null;

		/**
		 * The discount `uid` from the order that contains the original application of this discount.
		 * Max length: 60
		 */
		source_discount_uid?: string | null;

		/**
		 * The type of the discount. If it is created by the API, it is `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		 * Discounts that do not reference a catalog object ID must have a type of
		 * `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		 */
		type?: string | null;

		/**
		 * A unique ID that identifies the returned discount only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * Represents a discount being returned that applies to one or more return line items in an
	 * order.
	 * Fixed-amount, order-scoped discounts are distributed across all non-zero return line item totals.
	 * The amount distributed to each return line item is relative to that item’s contribution to the
	 * order subtotal.
	 */
	export interface OrderReturnDiscountFormProperties {

		/**
		 * The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this discount references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The discount's name.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The percentage of the tax, as a string representation of a decimal number.
		 * A value of `"7.25"` corresponds to a percentage of 7.25%.
		 * `percentage` is not set for amount-based discounts.
		 * Max length: 10
		 */
		percentage: FormControl<string | null | undefined>,

		/**
		 * Indicates the level at which the `OrderReturnDiscount` applies. For `ORDER` scoped
		 * discounts, the server generates references in `applied_discounts` on all
		 * `OrderReturnLineItem`s. For `LINE_ITEM` scoped discounts, the discount is only applied to
		 * `OrderReturnLineItem`s with references in their `applied_discounts` field.
		 */
		scope: FormControl<string | null | undefined>,

		/**
		 * The discount `uid` from the order that contains the original application of this discount.
		 * Max length: 60
		 */
		source_discount_uid: FormControl<string | null | undefined>,

		/**
		 * The type of the discount. If it is created by the API, it is `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		 * Discounts that do not reference a catalog object ID must have a type of
		 * `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the returned discount only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderReturnDiscountFormGroup() {
		return new FormGroup<OrderReturnDiscountFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			scope: new FormControl<string | null | undefined>(undefined),
			source_discount_uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			type: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/** The line item being returned in an order. */
	export interface OrderReturnLineItem {

		/**
		 * The list of references to `OrderReturnDiscount` entities applied to the return line item. Each
		 * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
		 * `OrderReturnDiscount` applied to the return line item. On reads, the applied amount
		 * is populated.
		 */
		applied_discounts?: Array<OrderLineItemAppliedDiscount>;

		/**
		 * The list of references to `OrderReturnTax` entities applied to the return line item. Each
		 * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
		 * `OrderReturnTax` applied to the return line item. On reads, the applied amount
		 * is populated.
		 */
		applied_taxes?: Array<OrderLineItemAppliedTax>;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		base_price_money?: Money;

		/**
		 * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this line item references. */
		catalog_version?: number | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		gross_return_money?: Money;

		/**
		 * The type of line item: an itemized return, a non-itemized return (custom amount),
		 * or the return of an unactivated gift card sale.
		 */
		item_type?: string | null;

		/**
		 * The name of the line item.
		 * Max length: 512
		 */
		name?: string | null;

		/**
		 * The note of the return line item.
		 * Max length: 2000
		 */
		note?: string | null;

		/**
		 * The quantity returned, formatted as a decimal number.
		 * For example, `"3"`.
		 * Line items with a `quantity_unit` can have non-integer quantities.
		 * For example, `"1.70000"`.
		 * Required
		 * Max length: 12
		 * Min length: 1
		 */
		quantity: string;

		/**
		 * Contains the measurement unit for a quantity and a precision that
		 * specifies the number of digits after the decimal point for decimal quantities.
		 */
		quantity_unit?: OrderQuantityUnit;

		/** The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item. */
		return_modifiers?: Array<OrderReturnLineItemModifier>;

		/**
		 * The `uid` of the line item in the original sale order.
		 * Max length: 60
		 */
		source_line_item_uid?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_discount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_tax_money?: Money;

		/**
		 * A unique ID for this return line-item entry.
		 * Max length: 60
		 */
		uid?: string | null;

		/**
		 * The name of the variation applied to this return line item.
		 * Max length: 255
		 */
		variation_name?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		variation_total_price_money?: Money;
	}

	/** The line item being returned in an order. */
	export interface OrderReturnLineItemFormProperties {

		/**
		 * The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this line item references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The type of line item: an itemized return, a non-itemized return (custom amount),
		 * or the return of an unactivated gift card sale.
		 */
		item_type: FormControl<string | null | undefined>,

		/**
		 * The name of the line item.
		 * Max length: 512
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The note of the return line item.
		 * Max length: 2000
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The quantity returned, formatted as a decimal number.
		 * For example, `"3"`.
		 * Line items with a `quantity_unit` can have non-integer quantities.
		 * For example, `"1.70000"`.
		 * Required
		 * Max length: 12
		 * Min length: 1
		 */
		quantity: FormControl<string | null | undefined>,

		/**
		 * The `uid` of the line item in the original sale order.
		 * Max length: 60
		 */
		source_line_item_uid: FormControl<string | null | undefined>,

		/**
		 * A unique ID for this return line-item entry.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,

		/**
		 * The name of the variation applied to this return line item.
		 * Max length: 255
		 */
		variation_name: FormControl<string | null | undefined>,
	}
	export function CreateOrderReturnLineItemFormGroup() {
		return new FormGroup<OrderReturnLineItemFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			item_type: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(512)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2000)]),
			quantity: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(12)]),
			source_line_item_uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			variation_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}


	/** A line item modifier being returned. */
	export interface OrderReturnLineItemModifier {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		base_price_money?: Money;

		/**
		 * The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this line item modifier references. */
		catalog_version?: number | null;

		/**
		 * The name of the item modifier.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The modifier `uid` from the order's line item that contains the
		 * original sale of this line item modifier.
		 * Max length: 60
		 */
		source_modifier_uid?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_price_money?: Money;

		/**
		 * A unique ID that identifies the return modifier only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/** A line item modifier being returned. */
	export interface OrderReturnLineItemModifierFormProperties {

		/**
		 * The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this line item modifier references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The name of the item modifier.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The modifier `uid` from the order's line item that contains the
		 * original sale of this line item modifier.
		 * Max length: 60
		 */
		source_modifier_uid: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the return modifier only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderReturnLineItemModifierFormGroup() {
		return new FormGroup<OrderReturnLineItemModifierFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			source_modifier_uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/** Represents the service charge applied to the original order. */
	export interface OrderReturnServiceCharge {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * The list of references to `OrderReturnTax` entities applied to the
		 * `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`
		 * that references the `uid` of a top-level `OrderReturnTax` that is being
		 * applied to the `OrderReturnServiceCharge`. On reads, the applied amount is
		 * populated.
		 */
		applied_taxes?: Array<OrderLineItemAppliedTax>;

		/** The calculation phase after which to apply the service charge. */
		calculation_phase?: string | null;

		/**
		 * The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this service charge references. */
		catalog_version?: number | null;

		/**
		 * The name of the service charge.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The percentage of the service charge, as a string representation of
		 * a decimal number. For example, a value of `"7.25"` corresponds to a
		 * percentage of 7.25%.
		 * Either `percentage` or `amount_money` should be set, but not both.
		 * Max length: 10
		 */
		percentage?: string | null;

		/**
		 * The service charge `uid` from the order containing the original
		 * service charge. `source_service_charge_uid` is `null` for
		 * unlinked returns.
		 * Max length: 60
		 */
		source_service_charge_uid?: string | null;

		/**
		 * Indicates whether the surcharge can be taxed. Service charges
		 * calculated in the `TOTAL_PHASE` cannot be marked as taxable.
		 */
		taxable?: boolean | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_tax_money?: Money;

		/**
		 * A unique ID that identifies the return service charge only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/** Represents the service charge applied to the original order. */
	export interface OrderReturnServiceChargeFormProperties {

		/** The calculation phase after which to apply the service charge. */
		calculation_phase: FormControl<string | null | undefined>,

		/**
		 * The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this service charge references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The name of the service charge.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The percentage of the service charge, as a string representation of
		 * a decimal number. For example, a value of `"7.25"` corresponds to a
		 * percentage of 7.25%.
		 * Either `percentage` or `amount_money` should be set, but not both.
		 * Max length: 10
		 */
		percentage: FormControl<string | null | undefined>,

		/**
		 * The service charge `uid` from the order containing the original
		 * service charge. `source_service_charge_uid` is `null` for
		 * unlinked returns.
		 * Max length: 60
		 */
		source_service_charge_uid: FormControl<string | null | undefined>,

		/**
		 * Indicates whether the surcharge can be taxed. Service charges
		 * calculated in the `TOTAL_PHASE` cannot be marked as taxable.
		 */
		taxable: FormControl<boolean | null | undefined>,

		/**
		 * A unique ID that identifies the return service charge only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderReturnServiceChargeFormGroup() {
		return new FormGroup<OrderReturnServiceChargeFormProperties>({
			calculation_phase: new FormControl<string | null | undefined>(undefined),
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			source_service_charge_uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			taxable: new FormControl<boolean | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * Represents a tax being returned that applies to one or more return line items in an order.
	 * Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.
	 * The amount distributed to each return line item is relative to that item’s contribution to the
	 * order subtotal.
	 */
	export interface OrderReturnTax {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this tax references. */
		catalog_version?: number | null;

		/**
		 * The tax's name.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The percentage of the tax, as a string representation of a decimal number.
		 * For example, a value of `"7.25"` corresponds to a percentage of 7.25%.
		 * Max length: 10
		 */
		percentage?: string | null;

		/**
		 * Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped
		 * taxes, Square generates references in `applied_taxes` on all
		 * `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax is only applied to
		 * `OrderReturnLineItem`s with references in their `applied_discounts` field.
		 */
		scope?: string | null;

		/**
		 * The tax `uid` from the order that contains the original tax charge.
		 * Max length: 60
		 */
		source_tax_uid?: string | null;

		/** Indicates the calculation method used to apply the tax. */
		type?: string | null;

		/**
		 * A unique ID that identifies the returned tax only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * Represents a tax being returned that applies to one or more return line items in an order.
	 * Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.
	 * The amount distributed to each return line item is relative to that item’s contribution to the
	 * order subtotal.
	 */
	export interface OrderReturnTaxFormProperties {

		/**
		 * The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this tax references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The tax's name.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The percentage of the tax, as a string representation of a decimal number.
		 * For example, a value of `"7.25"` corresponds to a percentage of 7.25%.
		 * Max length: 10
		 */
		percentage: FormControl<string | null | undefined>,

		/**
		 * Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped
		 * taxes, Square generates references in `applied_taxes` on all
		 * `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax is only applied to
		 * `OrderReturnLineItem`s with references in their `applied_discounts` field.
		 */
		scope: FormControl<string | null | undefined>,

		/**
		 * The tax `uid` from the order that contains the original tax charge.
		 * Max length: 60
		 */
		source_tax_uid: FormControl<string | null | undefined>,

		/** Indicates the calculation method used to apply the tax. */
		type: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the returned tax only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderReturnTaxFormGroup() {
		return new FormGroup<OrderReturnTaxFormProperties>({
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			scope: new FormControl<string | null | undefined>(undefined),
			source_tax_uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			type: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
	 * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
	 */
	export interface OrderRoundingAdjustment {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/** The name of the rounding adjustment from the original sale order. */
		name?: string | null;

		/**
		 * A unique ID that identifies the rounding adjustment only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * A rounding adjustment of the money being returned. Commonly used to apply cash rounding
	 * when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
	 */
	export interface OrderRoundingAdjustmentFormProperties {

		/** The name of the rounding adjustment from the original sale order. */
		name: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the rounding adjustment only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderRoundingAdjustmentFormGroup() {
		return new FormGroup<OrderRoundingAdjustmentFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/**
	 * Represents a reward that can be applied to an order if the necessary
	 * reward tier criteria are met. Rewards are created through the Loyalty API.
	 */
	export interface OrderReward {

		/**
		 * The identifier of the reward.
		 * Required
		 * Min length: 1
		 */
		id: string;

		/**
		 * The identifier of the reward tier corresponding to this reward.
		 * Required
		 * Min length: 1
		 */
		reward_tier_id: string;
	}

	/**
	 * Represents a reward that can be applied to an order if the necessary
	 * reward tier criteria are met. Rewards are created through the Loyalty API.
	 */
	export interface OrderRewardFormProperties {

		/**
		 * The identifier of the reward.
		 * Required
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the reward tier corresponding to this reward.
		 * Required
		 * Min length: 1
		 */
		reward_tier_id: FormControl<string | null | undefined>,
	}
	export function CreateOrderRewardFormGroup() {
		return new FormGroup<OrderRewardFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			reward_tier_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Represents a service charge applied to an order. */
	export interface OrderServiceCharge {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * The list of references to the taxes applied to this service charge. Each
		 * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
		 * `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied
		 * is populated.
		 * An `OrderLineItemAppliedTax` is automatically created on every taxable service charge
		 * for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records
		 * for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable
		 * service charge. Taxable service charges have the `taxable` field set to `true` and calculated
		 * in the `SUBTOTAL_PHASE`.
		 * To change the amount of a tax, modify the referenced top-level tax.
		 */
		applied_taxes?: Array<OrderLineItemAppliedTax>;

		/** The calculation phase at which to apply the service charge. */
		calculation_phase?: string | null;

		/**
		 * The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this service charge references. */
		catalog_version?: number | null;

		/**
		 * Application-defined data attached to this service charge. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata?: {[id: string]: string };

		/**
		 * The name of the service charge.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The service charge percentage as a string representation of a
		 * decimal number. For example, `"7.25"` indicates a service charge of 7.25%.
		 * Exactly 1 of `percentage` or `amount_money` should be set.
		 * Max length: 10
		 */
		percentage?: string | null;

		/**
		 * Indicates whether the service charge can be taxed. If set to `true`,
		 * order-level taxes automatically apply to the service charge. Note that
		 * service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
		 */
		taxable?: boolean | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_tax_money?: Money;

		/** The type of the service charge. */
		type?: string | null;

		/**
		 * A unique ID that identifies the service charge only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/** Represents a service charge applied to an order. */
	export interface OrderServiceChargeFormProperties {

		/** The calculation phase at which to apply the service charge. */
		calculation_phase: FormControl<string | null | undefined>,

		/**
		 * The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this service charge references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * Application-defined data attached to this service charge. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * The name of the service charge.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The service charge percentage as a string representation of a
		 * decimal number. For example, `"7.25"` indicates a service charge of 7.25%.
		 * Exactly 1 of `percentage` or `amount_money` should be set.
		 * Max length: 10
		 */
		percentage: FormControl<string | null | undefined>,

		/**
		 * Indicates whether the service charge can be taxed. If set to `true`,
		 * order-level taxes automatically apply to the service charge. Note that
		 * service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
		 */
		taxable: FormControl<boolean | null | undefined>,

		/** The type of the service charge. */
		type: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the service charge only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderServiceChargeFormGroup() {
		return new FormGroup<OrderServiceChargeFormProperties>({
			calculation_phase: new FormControl<string | null | undefined>(undefined),
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			taxable: new FormControl<boolean | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/** Represents the origination details of an order. */
	export interface OrderSource {

		/**
		 * The name used to identify the place (physical or digital) that an order originates.
		 * If unset, the name defaults to the name of the application that created the order.
		 */
		name?: string | null;
	}

	/** Represents the origination details of an order. */
	export interface OrderSourceFormProperties {

		/**
		 * The name used to identify the place (physical or digital) that an order originates.
		 * If unset, the name defaults to the name of the application that created the order.
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateOrderSourceFormGroup() {
		return new FormGroup<OrderSourceFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a tax that applies to one or more line item in the order.
	 * Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.
	 * The amount distributed to each line item is relative to the amount the item
	 * contributes to the order subtotal.
	 */
	export interface OrderLineItemTax {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		applied_money?: Money;

		/**
		 * Determines whether the tax was automatically applied to the order based on
		 * the catalog configuration. For an example, see
		 * [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).
		 */
		auto_applied?: boolean | null;

		/**
		 * The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
		 * Max length: 192
		 */
		catalog_object_id?: string | null;

		/** The version of the catalog object that this tax references. */
		catalog_version?: number | null;

		/**
		 * Application-defined data attached to this tax. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata?: {[id: string]: string };

		/**
		 * The tax's name.
		 * Max length: 255
		 */
		name?: string | null;

		/**
		 * The percentage of the tax, as a string representation of a decimal
		 * number. For example, a value of `"7.25"` corresponds to a percentage of
		 * 7.25%.
		 * Max length: 10
		 */
		percentage?: string | null;

		/**
		 * Indicates the level at which the tax applies. For `ORDER` scoped taxes,
		 * Square generates references in `applied_taxes` on all order line items that do
		 * not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items
		 * with references in their `applied_taxes` field.
		 * This field is immutable. To change the scope, you must delete the tax and
		 * re-add it as a new tax.
		 */
		scope?: string | null;

		/** Indicates the calculation method used to apply the tax. */
		type?: string | null;

		/**
		 * A unique ID that identifies the tax only within this order.
		 * Max length: 60
		 */
		uid?: string | null;
	}

	/**
	 * Represents a tax that applies to one or more line item in the order.
	 * Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.
	 * The amount distributed to each line item is relative to the amount the item
	 * contributes to the order subtotal.
	 */
	export interface OrderLineItemTaxFormProperties {

		/**
		 * Determines whether the tax was automatically applied to the order based on
		 * the catalog configuration. For an example, see
		 * [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).
		 */
		auto_applied: FormControl<boolean | null | undefined>,

		/**
		 * The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
		 * Max length: 192
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/** The version of the catalog object that this tax references. */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * Application-defined data attached to this tax. Metadata fields are intended
		 * to store descriptive references or associations with an entity in another system or store brief
		 * information about the object. Square does not process this field; it only stores and returns it
		 * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
		 * identifiable information or card details).
		 * Keys written by applications must be 60 characters or less and must be in the character set
		 * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
		 * with a namespace, separated from the key with a ':' character.
		 * Values have a maximum length of 255 characters.
		 * An application can have up to 10 entries per metadata field.
		 * Entries written by applications are private and can only be read or modified by the same
		 * application.
		 * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
		 */
		metadata: FormControl<{[id: string]: string } | null | undefined>,

		/**
		 * The tax's name.
		 * Max length: 255
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The percentage of the tax, as a string representation of a decimal
		 * number. For example, a value of `"7.25"` corresponds to a percentage of
		 * 7.25%.
		 * Max length: 10
		 */
		percentage: FormControl<string | null | undefined>,

		/**
		 * Indicates the level at which the tax applies. For `ORDER` scoped taxes,
		 * Square generates references in `applied_taxes` on all order line items that do
		 * not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items
		 * with references in their `applied_taxes` field.
		 * This field is immutable. To change the scope, you must delete the tax and
		 * re-add it as a new tax.
		 */
		scope: FormControl<string | null | undefined>,

		/** Indicates the calculation method used to apply the tax. */
		type: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the tax only within this order.
		 * Max length: 60
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateOrderLineItemTaxFormGroup() {
		return new FormGroup<OrderLineItemTaxFormProperties>({
			auto_applied: new FormControl<boolean | null | undefined>(undefined),
			catalog_object_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			catalog_version: new FormControl<number | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			percentage: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			scope: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
		});

	}


	/** Represents a tender (i.e., a method of payment) used in a Square transaction. */
	export interface Tender {

		/**
		 * Additional recipients (other than the merchant) receiving a portion of this tender.
		 * For example, fees assessed on the purchase by a third party integration.
		 */
		additional_recipients?: Array<AdditionalRecipient>;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/** Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD` */
		card_details?: TenderCardDetails;

		/** Represents the details of a tender with `type` `CASH`. */
		cash_details?: TenderCashDetails;

		/**
		 * The timestamp for when the tender was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at?: string | null;

		/**
		 * If the tender is associated with a customer or represents a customer's card on file,
		 * this is the ID of the associated customer.
		 * Max length: 191
		 */
		customer_id?: string | null;

		/**
		 * The tender's unique ID.
		 * Max length: 192
		 */
		id?: string | null;

		/**
		 * The ID of the transaction's associated location.
		 * Max length: 50
		 */
		location_id?: string | null;

		/**
		 * An optional note associated with the tender at the time of payment.
		 * Max length: 500
		 */
		note?: string | null;

		/**
		 * The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender.
		 * This value is only present for payments created with the v2 Payments API.
		 * Max length: 192
		 */
		payment_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		processing_fee_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		tip_money?: Money;

		/**
		 * The ID of the tender's associated transaction.
		 * Max length: 192
		 */
		transaction_id?: string | null;

		/**
		 * The type of tender, such as `CARD` or `CASH`.
		 * Required
		 */
		type: string;
	}

	/** Represents a tender (i.e., a method of payment) used in a Square transaction. */
	export interface TenderFormProperties {

		/**
		 * The timestamp for when the tender was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * If the tender is associated with a customer or represents a customer's card on file,
		 * this is the ID of the associated customer.
		 * Max length: 191
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * The tender's unique ID.
		 * Max length: 192
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the transaction's associated location.
		 * Max length: 50
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * An optional note associated with the tender at the time of payment.
		 * Max length: 500
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender.
		 * This value is only present for payments created with the v2 Payments API.
		 * Max length: 192
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the tender's associated transaction.
		 * Max length: 192
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The type of tender, such as `CARD` or `CASH`.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateTenderFormGroup() {
		return new FormGroup<TenderFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(191)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(500)]),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD` */
	export interface TenderCardDetails {

		/**
		 * Represents the payment details of a card to be used for payments. These
		 * details are determined by the payment token generated by Web Payments SDK.
		 */
		card?: Card;

		/** The method used to enter the card's details for the transaction. */
		entry_method?: string | null;

		/**
		 * The credit card payment's current state (such as `AUTHORIZED` or
		 * `CAPTURED`). See [TenderCardDetailsStatus](https://developer.squareup.com/reference/square_2021-08-18/objects/TenderCardDetailsStatus)
		 * for possible values.
		 */
		status?: string | null;
	}

	/** Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD` */
	export interface TenderCardDetailsFormProperties {

		/** The method used to enter the card's details for the transaction. */
		entry_method: FormControl<string | null | undefined>,

		/**
		 * The credit card payment's current state (such as `AUTHORIZED` or
		 * `CAPTURED`). See [TenderCardDetailsStatus](https://developer.squareup.com/reference/square_2021-08-18/objects/TenderCardDetailsStatus)
		 * for possible values.
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateTenderCardDetailsFormGroup() {
		return new FormGroup<TenderCardDetailsFormProperties>({
			entry_method: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents the payment details of a card to be used for payments. These
	 * details are determined by the payment token generated by Web Payments SDK.
	 */
	export interface Card {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		billing_address?: Address;

		/**
		 * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
		 * returns this field.
		 * Max length: 6
		 */
		bin?: string | null;

		/** The card's brand. */
		card_brand?: string | null;

		/**
		 * The type of the card.
		 * The Card object includes this field only in response to Payments API calls.
		 */
		card_type?: string | null;

		/**
		 * The name of the cardholder.
		 * Max length: 96
		 */
		cardholder_name?: string | null;

		/** The ID of a customer created using the Customers API to be associated with the card. */
		customer_id?: string | null;

		/** Indicates whether or not a card can be used for payments. */
		enabled?: boolean | null;

		/** The expiration month of the associated card as an integer between 1 and 12. */
		exp_month?: number | null;

		/** The four-digit year of the card's expiration date. */
		exp_year?: number | null;

		/**
		 * __Not currently set.__ Intended as a Square-assigned identifier, based
		 * on the card number, to identify the card across multiple locations within a
		 * single application.
		 * Max length: 255
		 */
		fingerprint?: string | null;

		/**
		 * Unique ID for this card. Generated by Square.
		 * Max length: 64
		 */
		id?: string | null;

		/**
		 * The last 4 digits of the card number.
		 * Max length: 4
		 */
		last_4?: string | null;

		/**
		 * Indicates whether the Card is prepaid or not.
		 * The Card object includes this field only in response to Payments API calls.
		 */
		prepaid_type?: string | null;

		/**
		 * An optional user-defined reference ID that associates this card with
		 * another entity in an external system. For example, a customer ID from an
		 * external customer management system.
		 * Max length: 128
		 */
		reference_id?: string | null;

		/**
		 * Current version number of the card. Increments with each card update. Requests to update an
		 * existing Card object will be rejected unless the version in the request matches the current
		 * version for the Card.
		 */
		version?: number | null;
	}

	/**
	 * Represents the payment details of a card to be used for payments. These
	 * details are determined by the payment token generated by Web Payments SDK.
	 */
	export interface CardFormProperties {

		/**
		 * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
		 * returns this field.
		 * Max length: 6
		 */
		bin: FormControl<string | null | undefined>,

		/** The card's brand. */
		card_brand: FormControl<string | null | undefined>,

		/**
		 * The type of the card.
		 * The Card object includes this field only in response to Payments API calls.
		 */
		card_type: FormControl<string | null | undefined>,

		/**
		 * The name of the cardholder.
		 * Max length: 96
		 */
		cardholder_name: FormControl<string | null | undefined>,

		/** The ID of a customer created using the Customers API to be associated with the card. */
		customer_id: FormControl<string | null | undefined>,

		/** Indicates whether or not a card can be used for payments. */
		enabled: FormControl<boolean | null | undefined>,

		/** The expiration month of the associated card as an integer between 1 and 12. */
		exp_month: FormControl<number | null | undefined>,

		/** The four-digit year of the card's expiration date. */
		exp_year: FormControl<number | null | undefined>,

		/**
		 * __Not currently set.__ Intended as a Square-assigned identifier, based
		 * on the card number, to identify the card across multiple locations within a
		 * single application.
		 * Max length: 255
		 */
		fingerprint: FormControl<string | null | undefined>,

		/**
		 * Unique ID for this card. Generated by Square.
		 * Max length: 64
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The last 4 digits of the card number.
		 * Max length: 4
		 */
		last_4: FormControl<string | null | undefined>,

		/**
		 * Indicates whether the Card is prepaid or not.
		 * The Card object includes this field only in response to Payments API calls.
		 */
		prepaid_type: FormControl<string | null | undefined>,

		/**
		 * An optional user-defined reference ID that associates this card with
		 * another entity in an external system. For example, a customer ID from an
		 * external customer management system.
		 * Max length: 128
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * Current version number of the card. Increments with each card update. Requests to update an
		 * existing Card object will be rejected unless the version in the request matches the current
		 * version for the Card.
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateCardFormGroup() {
		return new FormGroup<CardFormProperties>({
			bin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(6)]),
			card_brand: new FormControl<string | null | undefined>(undefined),
			card_type: new FormControl<string | null | undefined>(undefined),
			cardholder_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(96)]),
			customer_id: new FormControl<string | null | undefined>(undefined),
			enabled: new FormControl<boolean | null | undefined>(undefined),
			exp_month: new FormControl<number | null | undefined>(undefined),
			exp_year: new FormControl<number | null | undefined>(undefined),
			fingerprint: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(64)]),
			last_4: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(4)]),
			prepaid_type: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(128)]),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents the details of a tender with `type` `CASH`. */
	export interface TenderCashDetails {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		buyer_tendered_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		change_back_money?: Money;
	}

	/** Represents the details of a tender with `type` `CASH`. */
	export interface TenderCashDetailsFormProperties {
	}
	export function CreateTenderCashDetailsFormGroup() {
		return new FormGroup<TenderCashDetailsFormProperties>({
		});

	}

	export interface BatchUpsertCatalogObjectsRequest {

		/**
		 * A batch of CatalogObjects to be inserted/updated atomically.
		 * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
		 * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
		 * in one batch will not affect other batches within the same request.
		 * For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its
		 * `is_deleted` field must not be set to `true`.
		 * To modify an existing object, supply its ID. To create a new object, use an ID starting
		 * with `#`. These IDs may be used to create relationships between an object and attributes of
		 * other objects that reference it. For example, you can create a CatalogItem with
		 * ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to
		 * `#ABC` in order to associate the CatalogItemVariation with its parent
		 * CatalogItem.
		 * Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.
		 * Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
		 * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
		 * be inserted or updated.
		 * Required
		 */
		batches: Array<CatalogObjectBatch>;

		/**
		 * A value you specify that uniquely identifies this
		 * request among all your requests. A common way to create
		 * a valid idempotency key is to use a Universally unique
		 * identifier (UUID).
		 * If you're unsure whether a particular request was successful,
		 * you can reattempt it with the same idempotency key without
		 * worrying about creating duplicate objects.
		 * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: string;
	}
	export interface BatchUpsertCatalogObjectsRequestFormProperties {

		/**
		 * A value you specify that uniquely identifies this
		 * request among all your requests. A common way to create
		 * a valid idempotency key is to use a Universally unique
		 * identifier (UUID).
		 * If you're unsure whether a particular request was successful,
		 * you can reattempt it with the same idempotency key without
		 * worrying about creating duplicate objects.
		 * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateBatchUpsertCatalogObjectsRequestFormGroup() {
		return new FormGroup<BatchUpsertCatalogObjectsRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A batch of catalog objects. */
	export interface CatalogObjectBatch {

		/**
		 * A list of CatalogObjects belonging to this batch.
		 * Required
		 */
		objects: Array<CatalogObject>;
	}

	/** A batch of catalog objects. */
	export interface CatalogObjectBatchFormProperties {
	}
	export function CreateCatalogObjectBatchFormGroup() {
		return new FormGroup<CatalogObjectBatchFormProperties>({
		});

	}

	export interface BatchUpsertCatalogObjectsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The mapping between client and server IDs for this upsert. */
		id_mappings?: Array<CatalogIdMapping>;

		/** The created successfully created CatalogObjects. */
		objects?: Array<CatalogObject>;

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z". */
		updated_at?: string | null;
	}
	export interface BatchUpsertCatalogObjectsResponseFormProperties {

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z". */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateBatchUpsertCatalogObjectsResponseFormGroup() {
		return new FormGroup<BatchUpsertCatalogObjectsResponseFormProperties>({
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A mapping between a temporary client-supplied ID and a permanent server-generated ID.
	 * When calling [UpsertCatalogObject](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/upsert-catalog-object) or
	 * [BatchUpsertCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-upsert-catalog-objects) to
	 * create a [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance, you can supply
	 * a temporary ID for the to-be-created object, especially when the object is to be referenced
	 * elsewhere in the same request body. This temporary ID can be any string unique within
	 * the call, but must be prefixed by "#".
	 * After the request is submitted and the object created, a permanent server-generated ID is assigned
	 * to the new object. The permanent ID is unique across the Square catalog.
	 */
	export interface CatalogIdMapping {

		/** The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`. */
		client_object_id?: string | null;

		/** The permanent ID for the CatalogObject created by the server. */
		object_id?: string | null;
	}

	/**
	 * A mapping between a temporary client-supplied ID and a permanent server-generated ID.
	 * When calling [UpsertCatalogObject](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/upsert-catalog-object) or
	 * [BatchUpsertCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-upsert-catalog-objects) to
	 * create a [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance, you can supply
	 * a temporary ID for the to-be-created object, especially when the object is to be referenced
	 * elsewhere in the same request body. This temporary ID can be any string unique within
	 * the call, but must be prefixed by "#".
	 * After the request is submitted and the object created, a permanent server-generated ID is assigned
	 * to the new object. The permanent ID is unique across the Square catalog.
	 */
	export interface CatalogIdMappingFormProperties {

		/** The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`. */
		client_object_id: FormControl<string | null | undefined>,

		/** The permanent ID for the CatalogObject created by the server. */
		object_id: FormControl<string | null | undefined>,
	}
	export function CreateCatalogIdMappingFormGroup() {
		return new FormGroup<CatalogIdMappingFormProperties>({
			client_object_id: new FormControl<string | null | undefined>(undefined),
			object_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
	 * at a given location to a requesting customer in one or more appointment segments.
	 */
	export interface Booking {

		/** A list of appointment segments for this booking. */
		appointment_segments?: Array<AppointmentSegment>;

		/** The timestamp specifying the creation time of this booking, in RFC 3339 format. */
		created_at?: string | null;

		/** The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking */
		customer_id?: string | null;

		/**
		 * The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
		 * Max length: 4096
		 */
		customer_note?: string | null;

		/** A unique ID of this object representing a booking. */
		id?: string | null;

		/** The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided. */
		location_id?: string | null;

		/**
		 * The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
		 * This field should not be visible to customers.
		 * Max length: 4096
		 */
		seller_note?: string | null;

		/** The timestamp specifying the starting time of this booking, in RFC 3339 format. */
		start_at?: string | null;

		/** The status of the booking, describing where the booking stands with respect to the booking state machine. */
		status?: string | null;

		/** The timestamp specifying the most recent update time of this booking, in RFC 3339 format. */
		updated_at?: string | null;

		/**
		 * The revision number for the booking used for optimistic concurrency.
		 * Minimum: 0
		 */
		version?: number | null;
	}

	/**
	 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
	 * at a given location to a requesting customer in one or more appointment segments.
	 */
	export interface BookingFormProperties {

		/** The timestamp specifying the creation time of this booking, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
		 * Max length: 4096
		 */
		customer_note: FormControl<string | null | undefined>,

		/** A unique ID of this object representing a booking. */
		id: FormControl<string | null | undefined>,

		/** The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided. */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
		 * This field should not be visible to customers.
		 * Max length: 4096
		 */
		seller_note: FormControl<string | null | undefined>,

		/** The timestamp specifying the starting time of this booking, in RFC 3339 format. */
		start_at: FormControl<string | null | undefined>,

		/** The status of the booking, describing where the booking stands with respect to the booking state machine. */
		status: FormControl<string | null | undefined>,

		/** The timestamp specifying the most recent update time of this booking, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * The revision number for the booking used for optimistic concurrency.
		 * Minimum: 0
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateBookingFormGroup() {
		return new FormGroup<BookingFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			customer_id: new FormControl<string | null | undefined>(undefined),
			customer_note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(4096)]),
			id: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			seller_note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(4096)]),
			start_at: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
		});

	}


	/** Supported booking statuses. */
	export enum BookingStatus { PENDING = 'PENDING', CANCELLED_BY_CUSTOMER = 'CANCELLED_BY_CUSTOMER', CANCELLED_BY_SELLER = 'CANCELLED_BY_SELLER', DECLINED = 'DECLINED', ACCEPTED = 'ACCEPTED', NO_SHOW = 'NO_SHOW' }


	/** A record of an employee's break during a shift. */
	export interface Break {

		/**
		 * The `BreakType` that this `Break` was templated on.
		 * Required
		 * Min length: 1
		 */
		break_type_id: string;

		/**
		 * RFC 3339; follows the same timezone information as `Shift`. Precision up to
		 * the minute is respected; seconds are truncated.
		 */
		end_at?: string | null;

		/**
		 * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
		 * the break.
		 * Required
		 * Min length: 1
		 */
		expected_duration: string;

		/** The UUID for this object. */
		id?: string | null;

		/**
		 * Whether this break counts towards time worked for compensation
		 * purposes.
		 * Required
		 */
		is_paid: boolean;

		/**
		 * A human-readable name.
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * RFC 3339; follows the same timezone information as `Shift`. Precision up to
		 * the minute is respected; seconds are truncated.
		 * Required
		 * Min length: 1
		 */
		start_at: string;
	}

	/** A record of an employee's break during a shift. */
	export interface BreakFormProperties {

		/**
		 * The `BreakType` that this `Break` was templated on.
		 * Required
		 * Min length: 1
		 */
		break_type_id: FormControl<string | null | undefined>,

		/**
		 * RFC 3339; follows the same timezone information as `Shift`. Precision up to
		 * the minute is respected; seconds are truncated.
		 */
		end_at: FormControl<string | null | undefined>,

		/**
		 * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
		 * the break.
		 * Required
		 * Min length: 1
		 */
		expected_duration: FormControl<string | null | undefined>,

		/** The UUID for this object. */
		id: FormControl<string | null | undefined>,

		/**
		 * Whether this break counts towards time worked for compensation
		 * purposes.
		 * Required
		 */
		is_paid: FormControl<boolean | null | undefined>,

		/**
		 * A human-readable name.
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * RFC 3339; follows the same timezone information as `Shift`. Precision up to
		 * the minute is respected; seconds are truncated.
		 * Required
		 * Min length: 1
		 */
		start_at: FormControl<string | null | undefined>,
	}
	export function CreateBreakFormGroup() {
		return new FormGroup<BreakFormProperties>({
			break_type_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			end_at: new FormControl<string | null | undefined>(undefined),
			expected_duration: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined),
			is_paid: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			start_at: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/**
	 * A defined break template that sets an expectation for possible `Break`
	 * instances on a `Shift`.
	 */
	export interface BreakType {

		/**
		 * A human-readable name for this type of break. The name is displayed to
		 * employees in Square products.
		 * Required
		 * Min length: 1
		 */
		break_name: string;

		/** A read-only timestamp in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
		 * this break. Precision less than minutes is truncated.
		 * Required
		 * Min length: 1
		 */
		expected_duration: string;

		/**
		 * The UUID for this object.
		 * Max length: 255
		 */
		id?: string | null;

		/**
		 * Whether this break counts towards time worked for compensation
		 * purposes.
		 * Required
		 */
		is_paid: boolean;

		/**
		 * The ID of the business location this type of break applies to.
		 * Required
		 * Min length: 1
		 */
		location_id: string;

		/** A read-only timestamp in RFC 3339 format. */
		updated_at?: string | null;

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If a value is not
		 * provided, Square's servers execute a "blind" write; potentially
		 * overwriting another writer's data.
		 */
		version?: number | null;
	}

	/**
	 * A defined break template that sets an expectation for possible `Break`
	 * instances on a `Shift`.
	 */
	export interface BreakTypeFormProperties {

		/**
		 * A human-readable name for this type of break. The name is displayed to
		 * employees in Square products.
		 * Required
		 * Min length: 1
		 */
		break_name: FormControl<string | null | undefined>,

		/** A read-only timestamp in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
		 * this break. Precision less than minutes is truncated.
		 * Required
		 * Min length: 1
		 */
		expected_duration: FormControl<string | null | undefined>,

		/**
		 * The UUID for this object.
		 * Max length: 255
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Whether this break counts towards time worked for compensation
		 * purposes.
		 * Required
		 */
		is_paid: FormControl<boolean | null | undefined>,

		/**
		 * The ID of the business location this type of break applies to.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,

		/** A read-only timestamp in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If a value is not
		 * provided, Square's servers execute a "blind" write; potentially
		 * overwriting another writer's data.
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateBreakTypeFormGroup() {
		return new FormGroup<BreakTypeFormProperties>({
			break_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			created_at: new FormControl<string | null | undefined>(undefined),
			expected_duration: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			is_paid: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a bulk create request for `TeamMember` objects. */
	export interface BulkCreateTeamMembersRequest {

		/**
		 * The data used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
		 * Required
		 */
		team_members: {[id: string]: CreateTeamMemberRequest };
	}

	/** Represents a bulk create request for `TeamMember` objects. */
	export interface BulkCreateTeamMembersRequestFormProperties {

		/**
		 * The data used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
		 * Required
		 */
		team_members: FormControl<{[id: string]: CreateTeamMemberRequest } | null | undefined>,
	}
	export function CreateBulkCreateTeamMembersRequestFormGroup() {
		return new FormGroup<BulkCreateTeamMembersRequestFormProperties>({
			team_members: new FormControl<{[id: string]: CreateTeamMemberRequest } | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents a create request for a `TeamMember` object. */
	export interface CreateTeamMemberRequest {

		/**
		 * A unique string that identifies this `CreateTeamMember` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * The minimum length is 1 and the maximum length is 45.
		 */
		idempotency_key?: string | null;

		/** A record representing an individual team member for a business. */
		team_member?: TeamMember;
	}

	/** Represents a create request for a `TeamMember` object. */
	export interface CreateTeamMemberRequestFormProperties {

		/**
		 * A unique string that identifies this `CreateTeamMember` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * The minimum length is 1 and the maximum length is 45.
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateTeamMemberRequestFormGroup() {
		return new FormGroup<CreateTeamMemberRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A record representing an individual team member for a business. */
	export interface TeamMember {

		/** An object that represents a team member's assignment to locations. */
		assigned_locations?: TeamMemberAssignedLocations;

		/**
		 * The timestamp, in RFC 3339 format, describing when the team member was created.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		created_at?: string | null;

		/** The email address associated with the team member. */
		email_address?: string | null;

		/** The family name (that is, the last name) associated with the team member. */
		family_name?: string | null;

		/** The given name (that is, the first name) associated with the team member. */
		given_name?: string | null;

		/** The unique ID for the team member. */
		id?: string | null;

		/** Whether the team member is the owner of the Square account. */
		is_owner?: boolean | null;

		/**
		 * The team member's phone number, in E.164 format. For example:
		 * +14155552671 - the country code is 1 for US
		 * +551155256325 - the country code is 55 for BR
		 */
		phone_number?: string | null;

		/** A second ID used to associate the team member with an entity in another system. */
		reference_id?: string | null;

		/** Describes the status of the team member. */
		status?: string | null;

		/**
		 * The timestamp, in RFC 3339 format, describing when the team member was last updated.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		updated_at?: string | null;
	}

	/** A record representing an individual team member for a business. */
	export interface TeamMemberFormProperties {

		/**
		 * The timestamp, in RFC 3339 format, describing when the team member was created.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		created_at: FormControl<string | null | undefined>,

		/** The email address associated with the team member. */
		email_address: FormControl<string | null | undefined>,

		/** The family name (that is, the last name) associated with the team member. */
		family_name: FormControl<string | null | undefined>,

		/** The given name (that is, the first name) associated with the team member. */
		given_name: FormControl<string | null | undefined>,

		/** The unique ID for the team member. */
		id: FormControl<string | null | undefined>,

		/** Whether the team member is the owner of the Square account. */
		is_owner: FormControl<boolean | null | undefined>,

		/**
		 * The team member's phone number, in E.164 format. For example:
		 * +14155552671 - the country code is 1 for US
		 * +551155256325 - the country code is 55 for BR
		 */
		phone_number: FormControl<string | null | undefined>,

		/** A second ID used to associate the team member with an entity in another system. */
		reference_id: FormControl<string | null | undefined>,

		/** Describes the status of the team member. */
		status: FormControl<string | null | undefined>,

		/**
		 * The timestamp, in RFC 3339 format, describing when the team member was last updated.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberFormGroup() {
		return new FormGroup<TeamMemberFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_owner: new FormControl<boolean | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An object that represents a team member's assignment to locations. */
	export interface TeamMemberAssignedLocations {

		/** The current assignment type of the team member. */
		assignment_type?: string | null;

		/** The locations that the team member is assigned to. */
		location_ids?: Array<string>;
	}

	/** An object that represents a team member's assignment to locations. */
	export interface TeamMemberAssignedLocationsFormProperties {

		/** The current assignment type of the team member. */
		assignment_type: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberAssignedLocationsFormGroup() {
		return new FormGroup<TeamMemberAssignedLocationsFormProperties>({
			assignment_type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a response from a bulk create request containing the created `TeamMember` objects or error messages. */
	export interface BulkCreateTeamMembersResponse {

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`. */
		team_members?: {[id: string]: CreateTeamMemberResponse };
	}

	/** Represents a response from a bulk create request containing the created `TeamMember` objects or error messages. */
	export interface BulkCreateTeamMembersResponseFormProperties {

		/** The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`. */
		team_members: FormControl<{[id: string]: CreateTeamMemberResponse } | null | undefined>,
	}
	export function CreateBulkCreateTeamMembersResponseFormGroup() {
		return new FormGroup<BulkCreateTeamMembersResponseFormProperties>({
			team_members: new FormControl<{[id: string]: CreateTeamMemberResponse } | null | undefined>(undefined),
		});

	}


	/** Represents a response from a create request containing the created `TeamMember` object or error messages. */
	export interface CreateTeamMemberResponse {

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** A record representing an individual team member for a business. */
		team_member?: TeamMember;
	}

	/** Represents a response from a create request containing the created `TeamMember` object or error messages. */
	export interface CreateTeamMemberResponseFormProperties {
	}
	export function CreateCreateTeamMemberResponseFormGroup() {
		return new FormGroup<CreateTeamMemberResponseFormProperties>({
		});

	}


	/** Represents a bulk update request for `TeamMember` objects. */
	export interface BulkUpdateTeamMembersRequest {

		/**
		 * The data used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
		 * Required
		 */
		team_members: {[id: string]: UpdateTeamMemberRequest };
	}

	/** Represents a bulk update request for `TeamMember` objects. */
	export interface BulkUpdateTeamMembersRequestFormProperties {

		/**
		 * The data used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
		 * Required
		 */
		team_members: FormControl<{[id: string]: UpdateTeamMemberRequest } | null | undefined>,
	}
	export function CreateBulkUpdateTeamMembersRequestFormGroup() {
		return new FormGroup<BulkUpdateTeamMembersRequestFormProperties>({
			team_members: new FormControl<{[id: string]: UpdateTeamMemberRequest } | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents an update request for a `TeamMember` object. */
	export interface UpdateTeamMemberRequest {

		/** A record representing an individual team member for a business. */
		team_member?: TeamMember;
	}

	/** Represents an update request for a `TeamMember` object. */
	export interface UpdateTeamMemberRequestFormProperties {
	}
	export function CreateUpdateTeamMemberRequestFormGroup() {
		return new FormGroup<UpdateTeamMemberRequestFormProperties>({
		});

	}


	/** Represents a response from a bulk update request containing the updated `TeamMember` objects or error messages. */
	export interface BulkUpdateTeamMembersResponse {

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`. */
		team_members?: {[id: string]: UpdateTeamMemberResponse };
	}

	/** Represents a response from a bulk update request containing the updated `TeamMember` objects or error messages. */
	export interface BulkUpdateTeamMembersResponseFormProperties {

		/** The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`. */
		team_members: FormControl<{[id: string]: UpdateTeamMemberResponse } | null | undefined>,
	}
	export function CreateBulkUpdateTeamMembersResponseFormGroup() {
		return new FormGroup<BulkUpdateTeamMembersResponseFormProperties>({
			team_members: new FormControl<{[id: string]: UpdateTeamMemberResponse } | null | undefined>(undefined),
		});

	}


	/** Represents a response from an update request containing the updated `TeamMember` object or error messages. */
	export interface UpdateTeamMemberResponse {

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** A record representing an individual team member for a business. */
		team_member?: TeamMember;
	}

	/** Represents a response from an update request containing the updated `TeamMember` object or error messages. */
	export interface UpdateTeamMemberResponseFormProperties {
	}
	export function CreateUpdateTeamMemberResponseFormGroup() {
		return new FormGroup<UpdateTeamMemberResponseFormProperties>({
		});

	}


	/** The service appointment settings, including where and how the service is provided. */
	export interface BusinessAppointmentSettings {

		/** The time unit of the service duration for bookings. */
		alignment_time?: string | null;

		/**
		 * Indicates whether a customer can choose from all available time slots and have a staff member assigned
		 * automatically (`true`) or not (`false`).
		 */
		any_team_member_booking_enabled?: boolean | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		cancellation_fee_money?: Money;

		/** The cancellation policy adopted by the seller. */
		cancellation_policy?: string | null;

		/** The free-form text of the seller's cancellation policy. */
		cancellation_policy_text?: string | null;

		/** The cut-off time in seconds for allowing clients to cancel or reschedule an appointment. */
		cancellation_window_seconds?: number | null;

		/** Types of the location allowed for bookings. */
		location_types?: Array<string>;

		/** The maximum number of daily appointments per team member or per location. */
		max_appointments_per_day_limit?: number | null;

		/**
		 * Indicates whether the daily appointment limit applies to team members or to
		 * business locations.
		 */
		max_appointments_per_day_limit_type?: string | null;

		/** The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time. */
		max_booking_lead_time_seconds?: number | null;

		/** The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time. */
		min_booking_lead_time_seconds?: number | null;

		/** Indicates whether a customer can book multiple services in a single online booking. */
		multiple_service_booking_enabled?: boolean | null;

		/** Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`). */
		skip_booking_flow_staff_selection?: boolean | null;
	}

	/** The service appointment settings, including where and how the service is provided. */
	export interface BusinessAppointmentSettingsFormProperties {

		/** The time unit of the service duration for bookings. */
		alignment_time: FormControl<string | null | undefined>,

		/**
		 * Indicates whether a customer can choose from all available time slots and have a staff member assigned
		 * automatically (`true`) or not (`false`).
		 */
		any_team_member_booking_enabled: FormControl<boolean | null | undefined>,

		/** The cancellation policy adopted by the seller. */
		cancellation_policy: FormControl<string | null | undefined>,

		/** The free-form text of the seller's cancellation policy. */
		cancellation_policy_text: FormControl<string | null | undefined>,

		/** The cut-off time in seconds for allowing clients to cancel or reschedule an appointment. */
		cancellation_window_seconds: FormControl<number | null | undefined>,

		/** The maximum number of daily appointments per team member or per location. */
		max_appointments_per_day_limit: FormControl<number | null | undefined>,

		/**
		 * Indicates whether the daily appointment limit applies to team members or to
		 * business locations.
		 */
		max_appointments_per_day_limit_type: FormControl<string | null | undefined>,

		/** The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time. */
		max_booking_lead_time_seconds: FormControl<number | null | undefined>,

		/** The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time. */
		min_booking_lead_time_seconds: FormControl<number | null | undefined>,

		/** Indicates whether a customer can book multiple services in a single online booking. */
		multiple_service_booking_enabled: FormControl<boolean | null | undefined>,

		/** Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`). */
		skip_booking_flow_staff_selection: FormControl<boolean | null | undefined>,
	}
	export function CreateBusinessAppointmentSettingsFormGroup() {
		return new FormGroup<BusinessAppointmentSettingsFormProperties>({
			alignment_time: new FormControl<string | null | undefined>(undefined),
			any_team_member_booking_enabled: new FormControl<boolean | null | undefined>(undefined),
			cancellation_policy: new FormControl<string | null | undefined>(undefined),
			cancellation_policy_text: new FormControl<string | null | undefined>(undefined),
			cancellation_window_seconds: new FormControl<number | null | undefined>(undefined),
			max_appointments_per_day_limit: new FormControl<number | null | undefined>(undefined),
			max_appointments_per_day_limit_type: new FormControl<string | null | undefined>(undefined),
			max_booking_lead_time_seconds: new FormControl<number | null | undefined>(undefined),
			min_booking_lead_time_seconds: new FormControl<number | null | undefined>(undefined),
			multiple_service_booking_enabled: new FormControl<boolean | null | undefined>(undefined),
			skip_booking_flow_staff_selection: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Time units of a service duration for bookings. */
	export enum BusinessAppointmentSettingsAlignmentTime { SERVICE_DURATION = 'SERVICE_DURATION', QUARTER_HOURLY = 'QUARTER_HOURLY', HALF_HOURLY = 'HALF_HOURLY', HOURLY = 'HOURLY' }


	/** Types of location where service is provided. */
	export enum BusinessAppointmentSettingsBookingLocationType { BUSINESS_LOCATION = 'BUSINESS_LOCATION', CUSTOMER_LOCATION = 'CUSTOMER_LOCATION', PHONE = 'PHONE' }


	/** The category of the seller’s cancellation policy. */
	export enum BusinessAppointmentSettingsCancellationPolicy { CANCELLATION_TREATED_AS_NO_SHOW = 'CANCELLATION_TREATED_AS_NO_SHOW', CUSTOM_POLICY = 'CUSTOM_POLICY' }


	/** Types of daily appointment limits. */
	export enum BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType { PER_TEAM_MEMBER = 'PER_TEAM_MEMBER', PER_LOCATION = 'PER_LOCATION' }

	export interface BusinessBookingProfile {

		/** Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`). */
		allow_user_cancel?: boolean | null;

		/** Indicates whether the seller is open for booking. */
		booking_enabled?: boolean | null;

		/** The policy for the seller to automatically accept booking requests (`ACCEPT_ALL`) or not (`REQUIRES_ACCEPTANCE`). */
		booking_policy?: string | null;

		/** The service appointment settings, including where and how the service is provided. */
		business_appointment_settings?: BusinessAppointmentSettings;

		/** The RFC 3339 timestamp specifying the booking's creation time. */
		created_at?: string | null;

		/**
		 * The choice of customer's time zone information of a booking.
		 * The Square online booking site and all notifications to customers uses either the seller location’s time zone
		 * or the time zone the customer chooses at booking.
		 */
		customer_timezone_choice?: string | null;

		/** The ID of the seller, obtainable using the Merchants API. */
		seller_id?: string | null;
	}
	export interface BusinessBookingProfileFormProperties {

		/** Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`). */
		allow_user_cancel: FormControl<boolean | null | undefined>,

		/** Indicates whether the seller is open for booking. */
		booking_enabled: FormControl<boolean | null | undefined>,

		/** The policy for the seller to automatically accept booking requests (`ACCEPT_ALL`) or not (`REQUIRES_ACCEPTANCE`). */
		booking_policy: FormControl<string | null | undefined>,

		/** The RFC 3339 timestamp specifying the booking's creation time. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The choice of customer's time zone information of a booking.
		 * The Square online booking site and all notifications to customers uses either the seller location’s time zone
		 * or the time zone the customer chooses at booking.
		 */
		customer_timezone_choice: FormControl<string | null | undefined>,

		/** The ID of the seller, obtainable using the Merchants API. */
		seller_id: FormControl<string | null | undefined>,
	}
	export function CreateBusinessBookingProfileFormGroup() {
		return new FormGroup<BusinessBookingProfileFormProperties>({
			allow_user_cancel: new FormControl<boolean | null | undefined>(undefined),
			booking_enabled: new FormControl<boolean | null | undefined>(undefined),
			booking_policy: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			customer_timezone_choice: new FormControl<string | null | undefined>(undefined),
			seller_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Policies for accepting bookings. */
	export enum BusinessBookingProfileBookingPolicy { ACCEPT_ALL = 'ACCEPT_ALL', REQUIRES_ACCEPTANCE = 'REQUIRES_ACCEPTANCE' }


	/** Choices of customer-facing time zone used for bookings. */
	export enum BusinessBookingProfileCustomerTimezoneChoice { BUSINESS_LOCATION_TIMEZONE = 'BUSINESS_LOCATION_TIMEZONE', CUSTOMER_CHOICE = 'CUSTOMER_CHOICE' }


	/** Represents the hours of operation for a business location. */
	export interface BusinessHours {

		/**
		 * The list of time periods during which the business is open. There may be at most 10
		 * periods per day.
		 */
		periods?: Array<BusinessHoursPeriod>;
	}

	/** Represents the hours of operation for a business location. */
	export interface BusinessHoursFormProperties {
	}
	export function CreateBusinessHoursFormGroup() {
		return new FormGroup<BusinessHoursFormProperties>({
		});

	}


	/** Represents a period of time during which a business location is open. */
	export interface BusinessHoursPeriod {

		/** The day of week for this time period. */
		day_of_week?: string | null;

		/**
		 * The end time of a business hours period, specified in local time using partial-time
		 * RFC 3339 format.
		 */
		end_local_time?: string | null;

		/**
		 * The start time of a business hours period, specified in local time using partial-time
		 * RFC 3339 format.
		 */
		start_local_time?: string | null;
	}

	/** Represents a period of time during which a business location is open. */
	export interface BusinessHoursPeriodFormProperties {

		/** The day of week for this time period. */
		day_of_week: FormControl<string | null | undefined>,

		/**
		 * The end time of a business hours period, specified in local time using partial-time
		 * RFC 3339 format.
		 */
		end_local_time: FormControl<string | null | undefined>,

		/**
		 * The start time of a business hours period, specified in local time using partial-time
		 * RFC 3339 format.
		 */
		start_local_time: FormControl<string | null | undefined>,
	}
	export function CreateBusinessHoursPeriodFormGroup() {
		return new FormGroup<BusinessHoursPeriodFormProperties>({
			day_of_week: new FormControl<string | null | undefined>(undefined),
			end_local_time: new FormControl<string | null | undefined>(undefined),
			start_local_time: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A request to calculate the points that a buyer can earn from 
	 * a specified purchase.
	 */
	export interface CalculateLoyaltyPointsRequest {

		/**
		 * The [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) ID for which to calculate the points.
		 * Specify this field if your application uses the Orders API to process orders.
		 * Otherwise, specify the `transaction_amount_money`.
		 */
		order_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		transaction_amount_money?: Money;
	}

	/**
	 * A request to calculate the points that a buyer can earn from 
	 * a specified purchase.
	 */
	export interface CalculateLoyaltyPointsRequestFormProperties {

		/**
		 * The [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) ID for which to calculate the points.
		 * Specify this field if your application uses the Orders API to process orders.
		 * Otherwise, specify the `transaction_amount_money`.
		 */
		order_id: FormControl<string | null | undefined>,
	}
	export function CreateCalculateLoyaltyPointsRequestFormGroup() {
		return new FormGroup<CalculateLoyaltyPointsRequestFormProperties>({
			order_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A response that includes the points that the buyer can earn from 
	 * a specified purchase.
	 */
	export interface CalculateLoyaltyPointsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * The points that the buyer can earn from a specified purchase.
		 * Minimum: 0
		 */
		points?: number | null;
	}

	/**
	 * A response that includes the points that the buyer can earn from 
	 * a specified purchase.
	 */
	export interface CalculateLoyaltyPointsResponseFormProperties {

		/**
		 * The points that the buyer can earn from a specified purchase.
		 * Minimum: 0
		 */
		points: FormControl<number | null | undefined>,
	}
	export function CreateCalculateLoyaltyPointsResponseFormGroup() {
		return new FormGroup<CalculateLoyaltyPointsResponseFormProperties>({
			points: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
		});

	}

	export interface CalculateOrderRequest {

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 * Required
		 */
		order: Order;

		/**
		 * Identifies one or more loyalty reward tiers to apply during the order calculation.
		 * The discounts defined by the reward tiers are added to the order only to preview the
		 * effect of applying the specified rewards. The rewards do not correspond to actual
		 * redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are
		 * random strings used only to reference the reward tier.
		 */
		proposed_rewards?: Array<OrderReward>;
	}
	export interface CalculateOrderRequestFormProperties {
	}
	export function CreateCalculateOrderRequestFormGroup() {
		return new FormGroup<CalculateOrderRequestFormProperties>({
		});

	}

	export interface CalculateOrderResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;
	}
	export interface CalculateOrderResponseFormProperties {
	}
	export function CreateCalculateOrderResponseFormGroup() {
		return new FormGroup<CalculateOrderResponseFormProperties>({
		});

	}

	export interface CancelBookingRequest {

		/**
		 * The revision number for the booking used for optimistic concurrency.
		 * Minimum: 0
		 */
		booking_version?: number | null;

		/**
		 * A unique key to make this request an idempotent operation.
		 * Max length: 255
		 */
		idempotency_key?: string | null;
	}
	export interface CancelBookingRequestFormProperties {

		/**
		 * The revision number for the booking used for optimistic concurrency.
		 * Minimum: 0
		 */
		booking_version: FormControl<number | null | undefined>,

		/**
		 * A unique key to make this request an idempotent operation.
		 * Max length: 255
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCancelBookingRequestFormGroup() {
		return new FormGroup<CancelBookingRequestFormProperties>({
			booking_version: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}

	export interface CancelBookingResponse {

		/**
		 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		 * at a given location to a requesting customer in one or more appointment segments.
		 */
		booking?: Booking;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface CancelBookingResponseFormProperties {
	}
	export function CreateCancelBookingResponseFormGroup() {
		return new FormGroup<CancelBookingResponseFormProperties>({
		});

	}


	/** Describes a `CancelInvoice` request. */
	export interface CancelInvoiceRequest {

		/**
		 * The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to cancel.
		 * If you do not know the version, you can call
		 * [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
		 * Required
		 */
		version: number;
	}

	/** Describes a `CancelInvoice` request. */
	export interface CancelInvoiceRequestFormProperties {

		/**
		 * The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to cancel.
		 * If you do not know the version, you can call
		 * [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
		 * Required
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateCancelInvoiceRequestFormGroup() {
		return new FormGroup<CancelInvoiceRequestFormProperties>({
			version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The response returned by the `CancelInvoice` request. */
	export interface CancelInvoiceResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Stores information about an invoice. You use the Invoices API to create and manage
		 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		 */
		invoice?: Invoice;
	}

	/** The response returned by the `CancelInvoice` request. */
	export interface CancelInvoiceResponseFormProperties {
	}
	export function CreateCancelInvoiceResponseFormGroup() {
		return new FormGroup<CancelInvoiceResponseFormProperties>({
		});

	}


	/**
	 * Stores information about an invoice. You use the Invoices API to create and manage
	 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
	 */
	export interface Invoice {

		/** The payment methods that customers can use to pay an invoice on the Square-hosted invoice page. */
		accepted_payment_methods?: InvoiceAcceptedPaymentMethods;

		/** The timestamp when the invoice was created, in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers
		 * on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see
		 * [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
		 * Adding custom fields to an invoice requires an
		 * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
		 * Max: 2 custom fields
		 */
		custom_fields?: Array<InvoiceCustomField>;
		delivery_method?: Invoice_delivery_methodInvoiceDeliveryMethod;

		/**
		 * The description of the invoice. This is visible to the customer receiving the invoice.
		 * Max length: 65536
		 * Min length: 1
		 */
		description?: string | null;

		/** The Square-assigned ID of the invoice. */
		id?: string | null;

		/**
		 * A user-friendly invoice number. The value is unique within a location.
		 * If not provided when creating an invoice, Square assigns a value.
		 * It increments from 1 and padded with zeros making it 7 characters long
		 * (for example, 0000001 and 0000002).
		 * Max length: 191
		 * Min length: 1
		 */
		invoice_number?: string | null;

		/**
		 * The ID of the location that this invoice is associated with.
		 * If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
		 * Max length: 255
		 * Min length: 1
		 */
		location_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		next_payment_amount_money?: Money;

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created.
		 * This field is required when creating an invoice, and the order must be in the `OPEN` state.
		 * To view the line items and other information for the associated order, call the
		 * [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.
		 * Max length: 255
		 * Min length: 1
		 */
		order_id?: string | null;

		/**
		 * The payment schedule for the invoice, represented by one or more payment requests that
		 * define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:
		 * - One balance
		 * - One deposit with one balance
		 * - 2–12 installments
		 * - One deposit with 2–12 installments
		 * This field is required when creating an invoice. It must contain at least one payment request.
		 * All payment requests for the invoice must equal the total order amount. For more information, see
		 * [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
		 * Adding `INSTALLMENT` payment requests to an invoice requires an
		 * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
		 */
		payment_requests?: Array<InvoicePaymentRequest>;

		/** Provides customer data that Square uses to deliver an invoice. */
		primary_recipient?: InvoiceRecipient;

		/**
		 * The URL of the Square-hosted invoice page.
		 * After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice
		 * page and returns the page URL in the response.
		 */
		public_url?: string | null;

		/**
		 * The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
		 * After the invoice is published, Square processes the invoice on the specified date,
		 * according to the delivery method and payment request settings.
		 * If the field is not set, Square processes the invoice immediately after it is published.
		 */
		scheduled_at?: string | null;

		/** The status of the invoice. */
		status?: string | null;

		/**
		 * The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice.
		 * This field is present only on subscription billing invoices.
		 */
		subscription_id?: string | null;

		/**
		 * The time zone used to interpret calendar dates on the invoice, such as `due_date`.
		 * When an invoice is created, this field is set to the `timezone` specified for the seller
		 * location. The value cannot be changed.
		 * For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\_Angeles
		 * becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC timestamp
		 * of 2021-03-10T08:00:00Z).
		 */
		timezone?: string | null;

		/**
		 * The title of the invoice.
		 * Max length: 255
		 * Min length: 1
		 */
		title?: string | null;

		/** The timestamp when the invoice was last updated, in RFC 3339 format. */
		updated_at?: string | null;

		/** The Square-assigned version number, which is incremented each time an update is committed to the invoice. */
		version?: number | null;
	}

	/**
	 * Stores information about an invoice. You use the Invoices API to create and manage
	 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
	 */
	export interface InvoiceFormProperties {

		/** The timestamp when the invoice was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The description of the invoice. This is visible to the customer receiving the invoice.
		 * Max length: 65536
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The Square-assigned ID of the invoice. */
		id: FormControl<string | null | undefined>,

		/**
		 * A user-friendly invoice number. The value is unique within a location.
		 * If not provided when creating an invoice, Square assigns a value.
		 * It increments from 1 and padded with zeros making it 7 characters long
		 * (for example, 0000001 and 0000002).
		 * Max length: 191
		 * Min length: 1
		 */
		invoice_number: FormControl<string | null | undefined>,

		/**
		 * The ID of the location that this invoice is associated with.
		 * If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
		 * Max length: 255
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created.
		 * This field is required when creating an invoice, and the order must be in the `OPEN` state.
		 * To view the line items and other information for the associated order, call the
		 * [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.
		 * Max length: 255
		 * Min length: 1
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The URL of the Square-hosted invoice page.
		 * After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice
		 * page and returns the page URL in the response.
		 */
		public_url: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
		 * After the invoice is published, Square processes the invoice on the specified date,
		 * according to the delivery method and payment request settings.
		 * If the field is not set, Square processes the invoice immediately after it is published.
		 */
		scheduled_at: FormControl<string | null | undefined>,

		/** The status of the invoice. */
		status: FormControl<string | null | undefined>,

		/**
		 * The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice.
		 * This field is present only on subscription billing invoices.
		 */
		subscription_id: FormControl<string | null | undefined>,

		/**
		 * The time zone used to interpret calendar dates on the invoice, such as `due_date`.
		 * When an invoice is created, this field is set to the `timezone` specified for the seller
		 * location. The value cannot be changed.
		 * For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\_Angeles
		 * becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC timestamp
		 * of 2021-03-10T08:00:00Z).
		 */
		timezone: FormControl<string | null | undefined>,

		/**
		 * The title of the invoice.
		 * Max length: 255
		 * Min length: 1
		 */
		title: FormControl<string | null | undefined>,

		/** The timestamp when the invoice was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,

		/** The Square-assigned version number, which is incremented each time an update is committed to the invoice. */
		version: FormControl<number | null | undefined>,
	}
	export function CreateInvoiceFormGroup() {
		return new FormGroup<InvoiceFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(65536)]),
			id: new FormControl<string | null | undefined>(undefined),
			invoice_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(191)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(255)]),
			order_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(255)]),
			public_url: new FormControl<string | null | undefined>(undefined),
			scheduled_at: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			subscription_id: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(255)]),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The payment methods that customers can use to pay an invoice on the Square-hosted invoice page. */
	export interface InvoiceAcceptedPaymentMethods {

		/**
		 * Indicates whether bank transfer payments are accepted. The default value is `false`.
		 * This option is allowed only for invoices that have a single payment request of type `BALANCE`.
		 */
		bank_account?: boolean | null;

		/** Indicates whether credit card or debit card payments are accepted. The default value is `false`. */
		card?: boolean | null;

		/** Indicates whether Square gift card payments are accepted. The default value is `false`. */
		square_gift_card?: boolean | null;
	}

	/** The payment methods that customers can use to pay an invoice on the Square-hosted invoice page. */
	export interface InvoiceAcceptedPaymentMethodsFormProperties {

		/**
		 * Indicates whether bank transfer payments are accepted. The default value is `false`.
		 * This option is allowed only for invoices that have a single payment request of type `BALANCE`.
		 */
		bank_account: FormControl<boolean | null | undefined>,

		/** Indicates whether credit card or debit card payments are accepted. The default value is `false`. */
		card: FormControl<boolean | null | undefined>,

		/** Indicates whether Square gift card payments are accepted. The default value is `false`. */
		square_gift_card: FormControl<boolean | null | undefined>,
	}
	export function CreateInvoiceAcceptedPaymentMethodsFormGroup() {
		return new FormGroup<InvoiceAcceptedPaymentMethodsFormProperties>({
			bank_account: new FormControl<boolean | null | undefined>(undefined),
			card: new FormControl<boolean | null | undefined>(undefined),
			square_gift_card: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * An additional seller-defined and customer-facing field to include on the invoice. For more information, 
	 * see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
	 * Adding custom fields to an invoice requires an 
	 * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	 */
	export interface InvoiceCustomField {

		/**
		 * The label or title of the custom field. This field is required for a custom field.
		 * Max length: 30
		 */
		label?: string | null;

		/** The location of the custom field on the invoice. This field is required for a custom field. */
		placement?: string | null;

		/**
		 * The text of the custom field. If omitted, only the label is rendered.
		 * Max length: 2000
		 */
		value?: string | null;
	}

	/**
	 * An additional seller-defined and customer-facing field to include on the invoice. For more information, 
	 * see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
	 * Adding custom fields to an invoice requires an 
	 * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	 */
	export interface InvoiceCustomFieldFormProperties {

		/**
		 * The label or title of the custom field. This field is required for a custom field.
		 * Max length: 30
		 */
		label: FormControl<string | null | undefined>,

		/** The location of the custom field on the invoice. This field is required for a custom field. */
		placement: FormControl<string | null | undefined>,

		/**
		 * The text of the custom field. If omitted, only the label is rendered.
		 * Max length: 2000
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateInvoiceCustomFieldFormGroup() {
		return new FormGroup<InvoiceCustomFieldFormProperties>({
			label: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(30)]),
			placement: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2000)]),
		});

	}


	/**
	 * Represents a payment request for an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice). Invoices can specify a maximum
	 * of 13 payment requests, with up to 12 `INSTALLMENT` request types. For more information, 
	 * see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
	 * Adding `INSTALLMENT` payment requests to an invoice requires an 
	 * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	 */
	export interface InvoicePaymentRequest {

		/**
		 * The payment method for an automatic payment.
		 * The default value is `NONE`.
		 */
		automatic_payment_source?: string | null;

		/**
		 * The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer,
		 * call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the `customer_id` of the invoice recipient.
		 * Max length: 255
		 * Min length: 1
		 */
		card_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		computed_amount_money?: Money;

		/**
		 * The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field
		 * is required to create a payment request.
		 * After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone`
		 * of America/Los\_Angeles becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC
		 * timestamp of 2021-03-10T08:00:00Z).
		 */
		due_date?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		fixed_amount_requested_money?: Money;

		/**
		 * Specifies the amount for the payment request in percentage:
		 * - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount.
		 * - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less
		 * the deposit, if requested. The sum of the `percentage_requested` in all installment
		 * payment requests must be equal to 100.
		 * You cannot specify this when the payment `request_type` is `BALANCE` or when the
		 * payment request specifies the `fixed_amount_requested_money` field.
		 */
		percentage_requested?: string | null;

		/** A list of one or more reminders to send for the payment request. */
		reminders?: Array<InvoicePaymentReminder>;

		/**
		 * Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the
		 * `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
		 * One of the following is required when creating an invoice:
		 * - (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the
		 * `automatic_payment_source` field of the payment request is also required.
		 * - This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.
		 */
		request_method?: string | null;

		/**
		 * Identifies the payment request type. This type defines how the payment request amount is determined.
		 * This field is required to create a payment request.
		 */
		request_type?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		rounding_adjustment_included_money?: Money;

		/**
		 * If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)
		 * provides a place for the customer to pay a tip.
		 * This field is allowed only on the final payment request
		 * and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.
		 */
		tipping_enabled?: boolean | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_completed_amount_money?: Money;

		/**
		 * The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).
		 * Max length: 255
		 * Min length: 1
		 */
		uid?: string | null;
	}

	/**
	 * Represents a payment request for an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice). Invoices can specify a maximum
	 * of 13 payment requests, with up to 12 `INSTALLMENT` request types. For more information, 
	 * see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
	 * Adding `INSTALLMENT` payment requests to an invoice requires an 
	 * [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	 */
	export interface InvoicePaymentRequestFormProperties {

		/**
		 * The payment method for an automatic payment.
		 * The default value is `NONE`.
		 */
		automatic_payment_source: FormControl<string | null | undefined>,

		/**
		 * The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer,
		 * call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the `customer_id` of the invoice recipient.
		 * Max length: 255
		 * Min length: 1
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field
		 * is required to create a payment request.
		 * After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone`
		 * of America/Los\_Angeles becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC
		 * timestamp of 2021-03-10T08:00:00Z).
		 */
		due_date: FormControl<string | null | undefined>,

		/**
		 * Specifies the amount for the payment request in percentage:
		 * - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount.
		 * - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less
		 * the deposit, if requested. The sum of the `percentage_requested` in all installment
		 * payment requests must be equal to 100.
		 * You cannot specify this when the payment `request_type` is `BALANCE` or when the
		 * payment request specifies the `fixed_amount_requested_money` field.
		 */
		percentage_requested: FormControl<string | null | undefined>,

		/**
		 * Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the
		 * `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
		 * One of the following is required when creating an invoice:
		 * - (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the
		 * `automatic_payment_source` field of the payment request is also required.
		 * - This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.
		 */
		request_method: FormControl<string | null | undefined>,

		/**
		 * Identifies the payment request type. This type defines how the payment request amount is determined.
		 * This field is required to create a payment request.
		 */
		request_type: FormControl<string | null | undefined>,

		/**
		 * If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)
		 * provides a place for the customer to pay a tip.
		 * This field is allowed only on the final payment request
		 * and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.
		 */
		tipping_enabled: FormControl<boolean | null | undefined>,

		/**
		 * The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).
		 * Max length: 255
		 * Min length: 1
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateInvoicePaymentRequestFormGroup() {
		return new FormGroup<InvoicePaymentRequestFormProperties>({
			automatic_payment_source: new FormControl<string | null | undefined>(undefined),
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(255)]),
			due_date: new FormControl<string | null | undefined>(undefined),
			percentage_requested: new FormControl<string | null | undefined>(undefined),
			request_method: new FormControl<string | null | undefined>(undefined),
			request_type: new FormControl<string | null | undefined>(undefined),
			tipping_enabled: new FormControl<boolean | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(255)]),
		});

	}


	/**
	 * Describes a payment request reminder (automatic notification) that Square sends
	 * to the customer. You configure a reminder relative to the payment request
	 * `due_date`.
	 */
	export interface InvoicePaymentReminder {

		/**
		 * The reminder message.
		 * Max length: 1000
		 * Min length: 1
		 */
		message?: string | null;

		/**
		 * The number of days before (a negative number) or after (a positive number)
		 * the payment request `due_date` when the reminder is sent. For example, -3 indicates that
		 * the reminder should be sent 3 days before the payment request `due_date`.
		 * Minimum: -32767
		 * Maximum: 32767
		 */
		relative_scheduled_days?: number | null;

		/** If sent, the timestamp when the reminder was sent, in RFC 3339 format. */
		sent_at?: string | null;

		/** The status of the reminder. */
		status?: string | null;

		/**
		 * A Square-assigned ID that uniquely identifies the reminder within the
		 * `InvoicePaymentRequest`.
		 */
		uid?: string | null;
	}

	/**
	 * Describes a payment request reminder (automatic notification) that Square sends
	 * to the customer. You configure a reminder relative to the payment request
	 * `due_date`.
	 */
	export interface InvoicePaymentReminderFormProperties {

		/**
		 * The reminder message.
		 * Max length: 1000
		 * Min length: 1
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * The number of days before (a negative number) or after (a positive number)
		 * the payment request `due_date` when the reminder is sent. For example, -3 indicates that
		 * the reminder should be sent 3 days before the payment request `due_date`.
		 * Minimum: -32767
		 * Maximum: 32767
		 */
		relative_scheduled_days: FormControl<number | null | undefined>,

		/** If sent, the timestamp when the reminder was sent, in RFC 3339 format. */
		sent_at: FormControl<string | null | undefined>,

		/** The status of the reminder. */
		status: FormControl<string | null | undefined>,

		/**
		 * A Square-assigned ID that uniquely identifies the reminder within the
		 * `InvoicePaymentRequest`.
		 */
		uid: FormControl<string | null | undefined>,
	}
	export function CreateInvoicePaymentReminderFormGroup() {
		return new FormGroup<InvoicePaymentReminderFormProperties>({
			message: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(1000)]),
			relative_scheduled_days: new FormControl<number | null | undefined>(undefined, [Validators.min(-32767), Validators.max(32767)]),
			sent_at: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides customer data that Square uses to deliver an invoice. */
	export interface InvoiceRecipient {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		address?: Address;

		/** The name of the recipient's company. */
		company_name?: string | null;

		/**
		 * The ID of the customer. This is the customer profile ID that
		 * you provide when creating a draft invoice.
		 * Max length: 255
		 * Min length: 1
		 */
		customer_id?: string | null;

		/** The recipient's email address. */
		email_address?: string | null;

		/** The recipient's family (that is, last) name. */
		family_name?: string | null;

		/** The recipient's given (that is, first) name. */
		given_name?: string | null;

		/** The recipient's phone number. */
		phone_number?: string | null;
	}

	/** Provides customer data that Square uses to deliver an invoice. */
	export interface InvoiceRecipientFormProperties {

		/** The name of the recipient's company. */
		company_name: FormControl<string | null | undefined>,

		/**
		 * The ID of the customer. This is the customer profile ID that
		 * you provide when creating a draft invoice.
		 * Max length: 255
		 * Min length: 1
		 */
		customer_id: FormControl<string | null | undefined>,

		/** The recipient's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The recipient's family (that is, last) name. */
		family_name: FormControl<string | null | undefined>,

		/** The recipient's given (that is, first) name. */
		given_name: FormControl<string | null | undefined>,

		/** The recipient's phone number. */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateInvoiceRecipientFormGroup() {
		return new FormGroup<InvoiceRecipientFormProperties>({
			company_name: new FormControl<string | null | undefined>(undefined),
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(255)]),
			email_address: new FormControl<string | null | undefined>(undefined),
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Describes a request to cancel a payment using 
	 * [CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
	 */
	export interface CancelPaymentByIdempotencyKeyRequest {

		/**
		 * The `idempotency_key` identifying the payment to be canceled.
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: string;
	}

	/**
	 * Describes a request to cancel a payment using 
	 * [CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
	 */
	export interface CancelPaymentByIdempotencyKeyRequestFormProperties {

		/**
		 * The `idempotency_key` identifying the payment to be canceled.
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCancelPaymentByIdempotencyKeyRequestFormGroup() {
		return new FormGroup<CancelPaymentByIdempotencyKeyRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(45)]),
		});

	}


	/**
	 * Defines the response returned by 
	 * [CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
	 * On success, `errors` is empty.
	 */
	export interface CancelPaymentByIdempotencyKeyResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the response returned by 
	 * [CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
	 * On success, `errors` is empty.
	 */
	export interface CancelPaymentByIdempotencyKeyResponseFormProperties {
	}
	export function CreateCancelPaymentByIdempotencyKeyResponseFormGroup() {
		return new FormGroup<CancelPaymentByIdempotencyKeyResponseFormProperties>({
		});

	}


	/**
	 * Describes the request to cancel (void) a payment using 
	 * [CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment). 
	 * You can only cancel a payment that is approved (not completed).
	 * For more information, see 
	 * [Delayed capture of a payment](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
	 */
	export interface CancelPaymentRequest {
	}

	/**
	 * Describes the request to cancel (void) a payment using 
	 * [CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment). 
	 * You can only cancel a payment that is approved (not completed).
	 * For more information, see 
	 * [Delayed capture of a payment](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
	 */
	export interface CancelPaymentRequestFormProperties {
	}
	export function CreateCancelPaymentRequestFormGroup() {
		return new FormGroup<CancelPaymentRequestFormProperties>({
		});

	}


	/** Defines the response returned by [CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment). */
	export interface CancelPaymentResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** Represents a payment processed by the Square API. */
		payment?: Payment;
	}

	/** Defines the response returned by [CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment). */
	export interface CancelPaymentResponseFormProperties {
	}
	export function CreateCancelPaymentResponseFormGroup() {
		return new FormGroup<CancelPaymentResponseFormProperties>({
		});

	}


	/** Represents a payment processed by the Square API. */
	export interface Payment {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		app_fee_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		approved_money?: Money;

		/** Additional details about BANK_ACCOUNT type payments. */
		bank_account_details?: BankAccountPaymentDetails;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		billing_address?: Address;

		/**
		 * The buyer's email address.
		 * Max length: 255
		 */
		buyer_email_address?: string | null;

		/**
		 * Actions that can be performed on this payment:
		 * - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
		 * - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
		 * - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
		 * - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
		 */
		capabilities?: Array<string>;

		/** Reflects the current status of a card payment. Contains only non-confidential information. */
		card_details?: CardPaymentDetails;

		/**
		 * Stores details about a cash payment. Contains only non-confidential information. For more information, see
		 * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
		 */
		cash_details?: CashPaymentDetails;

		/**
		 * The timestamp of when the payment was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at?: string | null;

		/**
		 * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
		 * Max length: 191
		 */
		customer_id?: string | null;

		/**
		 * The action to be applied to the payment when the `delay_duration` has elapsed. This field
		 * is read-only.
		 * Current values include `CANCEL`.
		 */
		delay_action?: string | null;

		/**
		 * The duration of time after the payment's creation when Square automatically applies the
		 * `delay_action` to the payment. This automatic `delay_action` applies only to payments that
		 * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
		 * time period.
		 * This field is specified as a time duration, in RFC 3339 format.
		 * Notes:
		 * This feature is only supported for card payments.
		 * Default:
		 * - Card-present payments: "PT36H" (36 hours) from the creation time.
		 * - Card-not-present payments: "P7D" (7 days) from the creation time.
		 */
		delay_duration?: string | null;

		/**
		 * The read-only timestamp of when the `delay_action` is automatically applied,
		 * in RFC 3339 format.
		 * Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
		 * fields. The `created_at` field is generated by Square and might not exactly match the
		 * time on your local machine.
		 */
		delayed_until?: string | null;

		/**
		 * An optional ID of the employee associated with taking the payment.
		 * Max length: 192
		 */
		employee_id?: string | null;

		/**
		 * Stores details about an external payment. Contains only non-confidential information.
		 * For more information, see
		 * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
		 */
		external_details?: ExternalPaymentDetails;

		/**
		 * A unique ID for the payment.
		 * Max length: 192
		 */
		id?: string | null;

		/**
		 * The ID of the location associated with the payment.
		 * Max length: 50
		 */
		location_id?: string | null;

		/**
		 * An optional note to include when creating a payment.
		 * Max length: 500
		 */
		note?: string | null;

		/**
		 * The ID of the order associated with the payment.
		 * Max length: 192
		 */
		order_id?: string | null;

		/** The processing fees and fee adjustments assessed by Square for this payment. */
		processing_fee?: Array<ProcessingFee>;

		/**
		 * The payment's receipt number.
		 * The field is missing if a payment is canceled.
		 * Max length: 4
		 */
		receipt_number?: string | null;

		/**
		 * The URL for the payment's receipt.
		 * The field is only populated for COMPLETED payments.
		 * Max length: 255
		 */
		receipt_url?: string | null;

		/**
		 * An optional ID that associates the payment with an entity in
		 * another system.
		 * Max length: 40
		 */
		reference_id?: string | null;

		/** A list of `refund_id`s identifying refunds for the payment. */
		refund_ids?: Array<string>;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		refunded_money?: Money;

		/**
		 * Represents fraud risk information for the associated payment.
		 * When you take a payment through Square's Payments API (using the `CreatePayment`
		 * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
		 * can use this information to determine the course of action (for example,
		 * provide the goods/services or refund the payment).
		 */
		risk_evaluation?: RiskEvaluation;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		shipping_address?: Address;

		/**
		 * The source type for this payment.
		 * Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
		 * Max length: 50
		 */
		source_type?: string | null;

		/**
		 * Additional payment information that gets added to the customer's card statement
		 * as part of the statement description.
		 * Note that the `statement_description_identifier` might get truncated on the statement description
		 * to fit the required information including the Square identifier (SQ *) and the name of the
		 * seller taking the payment.
		 */
		statement_description_identifier?: string | null;

		/**
		 * Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
		 * Max length: 50
		 */
		status?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		tip_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		total_money?: Money;

		/**
		 * The timestamp of when the payment was last updated, in RFC 3339 format.
		 * Max length: 32
		 */
		updated_at?: string | null;

		/**
		 * Used for optimistic concurrency. This opaque token identifies a specific version of the
		 * `Payment` object.
		 */
		version_token?: string | null;

		/** Additional details about `WALLET` type payments. Contains only non-confidential information. */
		wallet_details?: DigitalWalletDetails;
	}

	/** Represents a payment processed by the Square API. */
	export interface PaymentFormProperties {

		/**
		 * The buyer's email address.
		 * Max length: 255
		 */
		buyer_email_address: FormControl<string | null | undefined>,

		/**
		 * The timestamp of when the payment was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
		 * Max length: 191
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * The action to be applied to the payment when the `delay_duration` has elapsed. This field
		 * is read-only.
		 * Current values include `CANCEL`.
		 */
		delay_action: FormControl<string | null | undefined>,

		/**
		 * The duration of time after the payment's creation when Square automatically applies the
		 * `delay_action` to the payment. This automatic `delay_action` applies only to payments that
		 * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
		 * time period.
		 * This field is specified as a time duration, in RFC 3339 format.
		 * Notes:
		 * This feature is only supported for card payments.
		 * Default:
		 * - Card-present payments: "PT36H" (36 hours) from the creation time.
		 * - Card-not-present payments: "P7D" (7 days) from the creation time.
		 */
		delay_duration: FormControl<string | null | undefined>,

		/**
		 * The read-only timestamp of when the `delay_action` is automatically applied,
		 * in RFC 3339 format.
		 * Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
		 * fields. The `created_at` field is generated by Square and might not exactly match the
		 * time on your local machine.
		 */
		delayed_until: FormControl<string | null | undefined>,

		/**
		 * An optional ID of the employee associated with taking the payment.
		 * Max length: 192
		 */
		employee_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID for the payment.
		 * Max length: 192
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the location associated with the payment.
		 * Max length: 50
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * An optional note to include when creating a payment.
		 * Max length: 500
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The ID of the order associated with the payment.
		 * Max length: 192
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The payment's receipt number.
		 * The field is missing if a payment is canceled.
		 * Max length: 4
		 */
		receipt_number: FormControl<string | null | undefined>,

		/**
		 * The URL for the payment's receipt.
		 * The field is only populated for COMPLETED payments.
		 * Max length: 255
		 */
		receipt_url: FormControl<string | null | undefined>,

		/**
		 * An optional ID that associates the payment with an entity in
		 * another system.
		 * Max length: 40
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * The source type for this payment.
		 * Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
		 * Max length: 50
		 */
		source_type: FormControl<string | null | undefined>,

		/**
		 * Additional payment information that gets added to the customer's card statement
		 * as part of the statement description.
		 * Note that the `statement_description_identifier` might get truncated on the statement description
		 * to fit the required information including the Square identifier (SQ *) and the name of the
		 * seller taking the payment.
		 */
		statement_description_identifier: FormControl<string | null | undefined>,

		/**
		 * Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
		 * Max length: 50
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * The timestamp of when the payment was last updated, in RFC 3339 format.
		 * Max length: 32
		 */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * Used for optimistic concurrency. This opaque token identifies a specific version of the
		 * `Payment` object.
		 */
		version_token: FormControl<string | null | undefined>,
	}
	export function CreatePaymentFormGroup() {
		return new FormGroup<PaymentFormProperties>({
			buyer_email_address: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(191)]),
			delay_action: new FormControl<string | null | undefined>(undefined),
			delay_duration: new FormControl<string | null | undefined>(undefined),
			delayed_until: new FormControl<string | null | undefined>(undefined),
			employee_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(500)]),
			order_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			receipt_number: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(4)]),
			receipt_url: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
			source_type: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			statement_description_identifier: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			updated_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			version_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Reflects the current status of a card payment. Contains only non-confidential information. */
	export interface CardPaymentDetails {

		/**
		 * For EMV payments, the cryptogram generated for the payment.
		 * Max length: 16
		 */
		application_cryptogram?: string | null;

		/**
		 * For EMV payments, the application ID identifies the EMV application used for the payment.
		 * Max length: 32
		 */
		application_identifier?: string | null;

		/**
		 * For EMV payments, the human-readable name of the EMV application used for the payment.
		 * Max length: 16
		 */
		application_name?: string | null;

		/**
		 * The status code returned by the card issuer that describes the payment's
		 * authorization status.
		 * Max length: 10
		 */
		auth_result_code?: string | null;

		/**
		 * The status code returned from the Address Verification System (AVS) check. The code can be
		 * `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
		 * Max length: 50
		 */
		avs_status?: string | null;

		/**
		 * Represents the payment details of a card to be used for payments. These
		 * details are determined by the payment token generated by Web Payments SDK.
		 */
		card?: Card;

		/** The timeline for card payments. */
		card_payment_timeline?: CardPaymentTimeline;

		/**
		 * The status code returned from the Card Verification Value (CVV) check. The code can be
		 * `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
		 * Max length: 50
		 */
		cvv_status?: string | null;

		/** Details about the device that took the payment. */
		device_details?: DeviceDetails;

		/**
		 * The method used to enter the card's details for the payment. The method can be
		 * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
		 * Max length: 50
		 */
		entry_method?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Whether the card must be physically present for the payment to
		 * be refunded.  If set to `true`, the card must be present.
		 */
		refund_requires_card_presence?: boolean | null;

		/**
		 * The statement description sent to the card networks.
		 * Note: The actual statement description varies and is likely to be truncated and appended with
		 * additional information on a per issuer basis.
		 * Max length: 50
		 */
		statement_description?: string | null;

		/**
		 * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
		 * FAILED.
		 * Max length: 50
		 */
		status?: string | null;

		/**
		 * For EMV payments, the method used to verify the cardholder's identity. The method can be
		 * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
		 * Max length: 50
		 */
		verification_method?: string | null;

		/**
		 * For EMV payments, the results of the cardholder verification. The result can be
		 * `SUCCESS`, `FAILURE`, or `UNKNOWN`.
		 * Max length: 50
		 */
		verification_results?: string | null;
	}

	/** Reflects the current status of a card payment. Contains only non-confidential information. */
	export interface CardPaymentDetailsFormProperties {

		/**
		 * For EMV payments, the cryptogram generated for the payment.
		 * Max length: 16
		 */
		application_cryptogram: FormControl<string | null | undefined>,

		/**
		 * For EMV payments, the application ID identifies the EMV application used for the payment.
		 * Max length: 32
		 */
		application_identifier: FormControl<string | null | undefined>,

		/**
		 * For EMV payments, the human-readable name of the EMV application used for the payment.
		 * Max length: 16
		 */
		application_name: FormControl<string | null | undefined>,

		/**
		 * The status code returned by the card issuer that describes the payment's
		 * authorization status.
		 * Max length: 10
		 */
		auth_result_code: FormControl<string | null | undefined>,

		/**
		 * The status code returned from the Address Verification System (AVS) check. The code can be
		 * `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
		 * Max length: 50
		 */
		avs_status: FormControl<string | null | undefined>,

		/**
		 * The status code returned from the Card Verification Value (CVV) check. The code can be
		 * `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
		 * Max length: 50
		 */
		cvv_status: FormControl<string | null | undefined>,

		/**
		 * The method used to enter the card's details for the payment. The method can be
		 * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
		 * Max length: 50
		 */
		entry_method: FormControl<string | null | undefined>,

		/**
		 * Whether the card must be physically present for the payment to
		 * be refunded.  If set to `true`, the card must be present.
		 */
		refund_requires_card_presence: FormControl<boolean | null | undefined>,

		/**
		 * The statement description sent to the card networks.
		 * Note: The actual statement description varies and is likely to be truncated and appended with
		 * additional information on a per issuer basis.
		 * Max length: 50
		 */
		statement_description: FormControl<string | null | undefined>,

		/**
		 * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
		 * FAILED.
		 * Max length: 50
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * For EMV payments, the method used to verify the cardholder's identity. The method can be
		 * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
		 * Max length: 50
		 */
		verification_method: FormControl<string | null | undefined>,

		/**
		 * For EMV payments, the results of the cardholder verification. The result can be
		 * `SUCCESS`, `FAILURE`, or `UNKNOWN`.
		 * Max length: 50
		 */
		verification_results: FormControl<string | null | undefined>,
	}
	export function CreateCardPaymentDetailsFormGroup() {
		return new FormGroup<CardPaymentDetailsFormProperties>({
			application_cryptogram: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(16)]),
			application_identifier: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			application_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(16)]),
			auth_result_code: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			avs_status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			cvv_status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			entry_method: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			refund_requires_card_presence: new FormControl<boolean | null | undefined>(undefined),
			statement_description: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			verification_method: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			verification_results: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
		});

	}


	/** The timeline for card payments. */
	export interface CardPaymentTimeline {

		/** The timestamp when the payment was authorized, in RFC 3339 format. */
		authorized_at?: string | null;

		/** The timestamp when the payment was captured, in RFC 3339 format. */
		captured_at?: string | null;

		/** The timestamp when the payment was voided, in RFC 3339 format. */
		voided_at?: string | null;
	}

	/** The timeline for card payments. */
	export interface CardPaymentTimelineFormProperties {

		/** The timestamp when the payment was authorized, in RFC 3339 format. */
		authorized_at: FormControl<string | null | undefined>,

		/** The timestamp when the payment was captured, in RFC 3339 format. */
		captured_at: FormControl<string | null | undefined>,

		/** The timestamp when the payment was voided, in RFC 3339 format. */
		voided_at: FormControl<string | null | undefined>,
	}
	export function CreateCardPaymentTimelineFormGroup() {
		return new FormGroup<CardPaymentTimelineFormProperties>({
			authorized_at: new FormControl<string | null | undefined>(undefined),
			captured_at: new FormControl<string | null | undefined>(undefined),
			voided_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details about the device that took the payment. */
	export interface DeviceDetails {

		/**
		 * The Square-issued ID of the device.
		 * Max length: 255
		 */
		device_id?: string | null;

		/**
		 * The Square-issued installation ID for the device.
		 * Max length: 255
		 */
		device_installation_id?: string | null;

		/**
		 * The name of the device set by the seller.
		 * Max length: 255
		 */
		device_name?: string | null;
	}

	/** Details about the device that took the payment. */
	export interface DeviceDetailsFormProperties {

		/**
		 * The Square-issued ID of the device.
		 * Max length: 255
		 */
		device_id: FormControl<string | null | undefined>,

		/**
		 * The Square-issued installation ID for the device.
		 * Max length: 255
		 */
		device_installation_id: FormControl<string | null | undefined>,

		/**
		 * The name of the device set by the seller.
		 * Max length: 255
		 */
		device_name: FormControl<string | null | undefined>,
	}
	export function CreateDeviceDetailsFormGroup() {
		return new FormGroup<DeviceDetailsFormProperties>({
			device_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			device_installation_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			device_name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}


	/**
	 * Stores details about a cash payment. Contains only non-confidential information. For more information, see 
	 * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
	 */
	export interface CashPaymentDetails {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		buyer_supplied_money: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		change_back_money?: Money;
	}

	/**
	 * Stores details about a cash payment. Contains only non-confidential information. For more information, see 
	 * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
	 */
	export interface CashPaymentDetailsFormProperties {
	}
	export function CreateCashPaymentDetailsFormGroup() {
		return new FormGroup<CashPaymentDetailsFormProperties>({
		});

	}


	/**
	 * Stores details about an external payment. Contains only non-confidential information.
	 * For more information, see 
	 * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
	 */
	export interface ExternalPaymentDetails {

		/**
		 * A description of the external payment source. For example,
		 * "Food Delivery Service".
		 * Required
		 * Max length: 255
		 */
		source: string;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		source_fee_money?: Money;

		/**
		 * An ID to associate the payment to its originating source.
		 * Max length: 255
		 */
		source_id?: string | null;

		/**
		 * The type of external payment the seller received. It can be one of the following:
		 * - CHECK - Paid using a physical check.
		 * - BANK_TRANSFER - Paid using external bank transfer.
		 * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
		 * - CRYPTO - Paid using a crypto currency.
		 * - SQUARE_CASH - Paid using Square Cash App.
		 * - SOCIAL - Paid using peer-to-peer payment applications.
		 * - EXTERNAL - A third-party application gathered this payment outside of Square.
		 * - EMONEY - Paid using an E-money provider.
		 * - CARD - A credit or debit card that Square does not support.
		 * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
		 * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
		 * - OTHER - A type not listed here.
		 * Required
		 * Max length: 50
		 */
		type: string;
	}

	/**
	 * Stores details about an external payment. Contains only non-confidential information.
	 * For more information, see 
	 * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
	 */
	export interface ExternalPaymentDetailsFormProperties {

		/**
		 * A description of the external payment source. For example,
		 * "Food Delivery Service".
		 * Required
		 * Max length: 255
		 */
		source: FormControl<string | null | undefined>,

		/**
		 * An ID to associate the payment to its originating source.
		 * Max length: 255
		 */
		source_id: FormControl<string | null | undefined>,

		/**
		 * The type of external payment the seller received. It can be one of the following:
		 * - CHECK - Paid using a physical check.
		 * - BANK_TRANSFER - Paid using external bank transfer.
		 * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
		 * - CRYPTO - Paid using a crypto currency.
		 * - SQUARE_CASH - Paid using Square Cash App.
		 * - SOCIAL - Paid using peer-to-peer payment applications.
		 * - EXTERNAL - A third-party application gathered this payment outside of Square.
		 * - EMONEY - Paid using an E-money provider.
		 * - CARD - A credit or debit card that Square does not support.
		 * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
		 * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
		 * - OTHER - A type not listed here.
		 * Required
		 * Max length: 50
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateExternalPaymentDetailsFormGroup() {
		return new FormGroup<ExternalPaymentDetailsFormProperties>({
			source: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			source_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
		});

	}


	/** Represents the Square processing fee. */
	export interface ProcessingFee {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/** The timestamp of when the fee takes effect, in RFC 3339 format. */
		effective_at?: string | null;

		/** The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`. */
		type?: string | null;
	}

	/** Represents the Square processing fee. */
	export interface ProcessingFeeFormProperties {

		/** The timestamp of when the fee takes effect, in RFC 3339 format. */
		effective_at: FormControl<string | null | undefined>,

		/** The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateProcessingFeeFormGroup() {
		return new FormGroup<ProcessingFeeFormProperties>({
			effective_at: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents fraud risk information for the associated payment.
	 * When you take a payment through Square's Payments API (using the `CreatePayment`
	 * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
	 * can use this information to determine the course of action (for example,
	 * provide the goods/services or refund the payment).
	 */
	export interface RiskEvaluation {

		/** The timestamp when payment risk was evaluated, in RFC 3339 format. */
		created_at?: string | null;

		/** The risk level associated with the payment */
		risk_level?: string | null;
	}

	/**
	 * Represents fraud risk information for the associated payment.
	 * When you take a payment through Square's Payments API (using the `CreatePayment`
	 * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
	 * can use this information to determine the course of action (for example,
	 * provide the goods/services or refund the payment).
	 */
	export interface RiskEvaluationFormProperties {

		/** The timestamp when payment risk was evaluated, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The risk level associated with the payment */
		risk_level: FormControl<string | null | undefined>,
	}
	export function CreateRiskEvaluationFormGroup() {
		return new FormGroup<RiskEvaluationFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			risk_level: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Additional details about `WALLET` type payments. Contains only non-confidential information. */
	export interface DigitalWalletDetails {

		/**
		 * The status of the `WALLET` payment. The status can be `AUTHORIZED`, `CAPTURED`, `VOIDED`, or
		 * `FAILED`.
		 * Max length: 50
		 */
		status?: string | null;
	}

	/** Additional details about `WALLET` type payments. Contains only non-confidential information. */
	export interface DigitalWalletDetailsFormProperties {

		/**
		 * The status of the `WALLET` payment. The status can be `AUTHORIZED`, `CAPTURED`, `VOIDED`, or
		 * `FAILED`.
		 * Max length: 50
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateDigitalWalletDetailsFormGroup() {
		return new FormGroup<DigitalWalletDetailsFormProperties>({
			status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
		});

	}


	/**
	 * Defines parameters in a
	 * [CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) endpoint request.
	 */
	export interface CancelSubscriptionRequest {
	}

	/**
	 * Defines parameters in a
	 * [CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) endpoint request.
	 */
	export interface CancelSubscriptionRequestFormProperties {
	}
	export function CreateCancelSubscriptionRequestFormGroup() {
		return new FormGroup<CancelSubscriptionRequestFormProperties>({
		});

	}


	/**
	 * Defines fields that are included in a
	 * [CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) response.
	 */
	export interface CancelSubscriptionResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a customer subscription to a subscription plan.
		 * For an overview of the `Subscription` type, see
		 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		 */
		subscription?: Subscription;
	}

	/**
	 * Defines fields that are included in a
	 * [CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) response.
	 */
	export interface CancelSubscriptionResponseFormProperties {
	}
	export function CreateCancelSubscriptionResponseFormGroup() {
		return new FormGroup<CancelSubscriptionResponseFormProperties>({
		});

	}


	/**
	 * Represents a customer subscription to a subscription plan.
	 * For an overview of the `Subscription` type, see
	 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
	 */
	export interface Subscription {

		/**
		 * The subscription cancellation date, in YYYY-MM-DD format (for
		 * example, 2013-01-15). On this date, the subscription status changes
		 * to `CANCELED` and the subscription billing stops.
		 * If you don't set this field, the subscription plan dictates if and
		 * when subscription ends.
		 * You cannot update this field, you can only clear it.
		 */
		canceled_date?: string | null;

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card)
		 * that is charged for the subscription.
		 */
		card_id?: string | null;

		/**
		 * The date up to which the customer is invoiced for the
		 * subscription, in YYYY-MM-DD format (for example, 2013-01-15).
		 * After the invoice is sent for a given billing period,
		 * this date will be the last day of the billing period.
		 * For example,
		 * suppose for the month of May a customer gets an invoice
		 * (or charged the card) on May 1. For the monthly billing scenario,
		 * this date is then set to May 31.
		 */
		charged_through_date?: string | null;

		/** The timestamp when the subscription was created, in RFC 3339 format. */
		created_at?: string | null;

		/** The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile. */
		customer_id?: string | null;

		/**
		 * The Square-assigned ID of the subscription.
		 * Max length: 255
		 */
		id?: string | null;

		/**
		 * The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the
		 * subscription, listed in order when the invoices were created
		 * (oldest invoices appear first).
		 */
		invoice_ids?: Array<string>;

		/** The ID of the location associated with the subscription. */
		location_id?: string | null;

		/** The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan). */
		plan_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		price_override_money?: Money;

		/**
		 * The start date of the subscription, in YYYY-MM-DD format (for example,
		 * 2013-01-15).
		 */
		start_date?: string | null;

		/** The current status of the subscription. */
		status?: string | null;

		/**
		 * The tax amount applied when billing the subscription. The
		 * percentage is expressed in decimal form, using a `'.'` as the decimal
		 * separator and without a `'%'` sign. For example, a value of `7.5`
		 * corresponds to 7.5%.
		 */
		tax_percentage?: string | null;

		/**
		 * Timezone that will be used in date calculations for the subscription.
		 * Defaults to the timezone of the location based on `location_id`.
		 * Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
		 */
		timezone?: string | null;

		/**
		 * The version of the object. When updating an object, the version
		 * supplied must match the version in the database, otherwise the write will
		 * be rejected as conflicting.
		 */
		version?: number | null;
	}

	/**
	 * Represents a customer subscription to a subscription plan.
	 * For an overview of the `Subscription` type, see
	 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
	 */
	export interface SubscriptionFormProperties {

		/**
		 * The subscription cancellation date, in YYYY-MM-DD format (for
		 * example, 2013-01-15). On this date, the subscription status changes
		 * to `CANCELED` and the subscription billing stops.
		 * If you don't set this field, the subscription plan dictates if and
		 * when subscription ends.
		 * You cannot update this field, you can only clear it.
		 */
		canceled_date: FormControl<string | null | undefined>,

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card)
		 * that is charged for the subscription.
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The date up to which the customer is invoiced for the
		 * subscription, in YYYY-MM-DD format (for example, 2013-01-15).
		 * After the invoice is sent for a given billing period,
		 * this date will be the last day of the billing period.
		 * For example,
		 * suppose for the month of May a customer gets an invoice
		 * (or charged the card) on May 1. For the monthly billing scenario,
		 * this date is then set to May 31.
		 */
		charged_through_date: FormControl<string | null | undefined>,

		/** The timestamp when the subscription was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile. */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the subscription.
		 * Max length: 255
		 */
		id: FormControl<string | null | undefined>,

		/** The ID of the location associated with the subscription. */
		location_id: FormControl<string | null | undefined>,

		/** The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan). */
		plan_id: FormControl<string | null | undefined>,

		/**
		 * The start date of the subscription, in YYYY-MM-DD format (for example,
		 * 2013-01-15).
		 */
		start_date: FormControl<string | null | undefined>,

		/** The current status of the subscription. */
		status: FormControl<string | null | undefined>,

		/**
		 * The tax amount applied when billing the subscription. The
		 * percentage is expressed in decimal form, using a `'.'` as the decimal
		 * separator and without a `'%'` sign. For example, a value of `7.5`
		 * corresponds to 7.5%.
		 */
		tax_percentage: FormControl<string | null | undefined>,

		/**
		 * Timezone that will be used in date calculations for the subscription.
		 * Defaults to the timezone of the location based on `location_id`.
		 * Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
		 */
		timezone: FormControl<string | null | undefined>,

		/**
		 * The version of the object. When updating an object, the version
		 * supplied must match the version in the database, otherwise the write will
		 * be rejected as conflicting.
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateSubscriptionFormGroup() {
		return new FormGroup<SubscriptionFormProperties>({
			canceled_date: new FormControl<string | null | undefined>(undefined),
			card_id: new FormControl<string | null | undefined>(undefined),
			charged_through_date: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			customer_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			plan_id: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			tax_percentage: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CancelTerminalCheckoutRequest {
	}
	export interface CancelTerminalCheckoutRequestFormProperties {
	}
	export function CreateCancelTerminalCheckoutRequestFormGroup() {
		return new FormGroup<CancelTerminalCheckoutRequestFormProperties>({
		});

	}

	export interface CancelTerminalCheckoutResponse {
		checkout?: TerminalCheckout;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}
	export interface CancelTerminalCheckoutResponseFormProperties {
	}
	export function CreateCancelTerminalCheckoutResponseFormGroup() {
		return new FormGroup<CancelTerminalCheckoutResponseFormProperties>({
		});

	}

	export interface TerminalCheckout {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/** The ID of the application that created the checkout. */
		app_id?: string | null;

		/** Present if the status is `CANCELED`. */
		cancel_reason?: string | null;

		/** The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp. */
		created_at?: string | null;

		/**
		 * An RFC 3339 duration, after which the checkout is automatically canceled.
		 * A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
		 * of `TIMED_OUT`.
		 * Default: 5 minutes from creation
		 * Maximum: 5 minutes
		 */
		deadline_duration?: string | null;

		/** Required */
		device_options: DeviceCheckoutOptions;

		/**
		 * A unique ID for this `TerminalCheckout`.
		 * Max length: 255
		 * Min length: 10
		 */
		id?: string | null;

		/** The location of the device where the `TerminalCheckout` was directed. */
		location_id?: string | null;

		/**
		 * An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
		 * Max length: 250
		 */
		note?: string | null;

		/** A list of IDs for payments created by this `TerminalCheckout`. */
		payment_ids?: Array<string>;

		/** The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`. */
		payment_type?: string | null;

		/**
		 * An optional user-defined reference ID that can be used to associate
		 * this `TerminalCheckout` to another entity in an external system. For example, an order
		 * ID generated by a third-party shopping cart. The ID is also associated with any payments
		 * used to complete the checkout.
		 * Max length: 40
		 */
		reference_id?: string | null;

		/**
		 * The status of the `TerminalCheckout`.
		 * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
		 */
		status?: string | null;

		/** The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp. */
		updated_at?: string | null;
	}
	export interface TerminalCheckoutFormProperties {

		/** The ID of the application that created the checkout. */
		app_id: FormControl<string | null | undefined>,

		/** Present if the status is `CANCELED`. */
		cancel_reason: FormControl<string | null | undefined>,

		/** The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * An RFC 3339 duration, after which the checkout is automatically canceled.
		 * A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
		 * of `TIMED_OUT`.
		 * Default: 5 minutes from creation
		 * Maximum: 5 minutes
		 */
		deadline_duration: FormControl<string | null | undefined>,

		/**
		 * A unique ID for this `TerminalCheckout`.
		 * Max length: 255
		 * Min length: 10
		 */
		id: FormControl<string | null | undefined>,

		/** The location of the device where the `TerminalCheckout` was directed. */
		location_id: FormControl<string | null | undefined>,

		/**
		 * An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
		 * Max length: 250
		 */
		note: FormControl<string | null | undefined>,

		/** The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`. */
		payment_type: FormControl<string | null | undefined>,

		/**
		 * An optional user-defined reference ID that can be used to associate
		 * this `TerminalCheckout` to another entity in an external system. For example, an order
		 * ID generated by a third-party shopping cart. The ID is also associated with any payments
		 * used to complete the checkout.
		 * Max length: 40
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * The status of the `TerminalCheckout`.
		 * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
		 */
		status: FormControl<string | null | undefined>,

		/** The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateTerminalCheckoutFormGroup() {
		return new FormGroup<TerminalCheckoutFormProperties>({
			app_id: new FormControl<string | null | undefined>(undefined),
			cancel_reason: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			deadline_duration: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(10), Validators.maxLength(255)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(250)]),
			payment_type: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
			status: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeviceCheckoutOptions {

		/**
		 * The unique ID of the device intended for this `TerminalCheckout`.
		 * A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint.
		 * Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.
		 * Required
		 */
		device_id: string;

		/** Instructs the device to skip the receipt screen. Defaults to false. */
		skip_receipt_screen?: boolean | null;
		tip_settings?: TipSettings;
	}
	export interface DeviceCheckoutOptionsFormProperties {

		/**
		 * The unique ID of the device intended for this `TerminalCheckout`.
		 * A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint.
		 * Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.
		 * Required
		 */
		device_id: FormControl<string | null | undefined>,

		/** Instructs the device to skip the receipt screen. Defaults to false. */
		skip_receipt_screen: FormControl<boolean | null | undefined>,
	}
	export function CreateDeviceCheckoutOptionsFormGroup() {
		return new FormGroup<DeviceCheckoutOptionsFormProperties>({
			device_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			skip_receipt_screen: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface TipSettings {

		/** Indicates whether tipping is enabled for this checkout. Defaults to false. */
		allow_tipping?: boolean | null;

		/** Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false. */
		custom_tip_field?: boolean | null;

		/**
		 * Indicates whether tip options should be presented on the screen before presenting
		 * the signature screen during card payment. Defaults to false.
		 */
		separate_tip_screen?: boolean | null;

		/**
		 * Enables the "Smart Tip Amounts" behavior.
		 * Exact tipping options depend on the region in which the Square seller is active.
		 * For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.
		 * For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.
		 * If set to true, the `tip_percentages` settings is ignored.
		 * Defaults to false.
		 * To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).
		 */
		smart_tipping?: boolean | null;

		/**
		 * A list of tip percentages that should be presented during the checkout flow, specified as
		 * up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.
		 */
		tip_percentages?: Array<number>;
	}
	export interface TipSettingsFormProperties {

		/** Indicates whether tipping is enabled for this checkout. Defaults to false. */
		allow_tipping: FormControl<boolean | null | undefined>,

		/** Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false. */
		custom_tip_field: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether tip options should be presented on the screen before presenting
		 * the signature screen during card payment. Defaults to false.
		 */
		separate_tip_screen: FormControl<boolean | null | undefined>,

		/**
		 * Enables the "Smart Tip Amounts" behavior.
		 * Exact tipping options depend on the region in which the Square seller is active.
		 * For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.
		 * For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.
		 * If set to true, the `tip_percentages` settings is ignored.
		 * Defaults to false.
		 * To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).
		 */
		smart_tipping: FormControl<boolean | null | undefined>,
	}
	export function CreateTipSettingsFormGroup() {
		return new FormGroup<TipSettingsFormProperties>({
			allow_tipping: new FormControl<boolean | null | undefined>(undefined),
			custom_tip_field: new FormControl<boolean | null | undefined>(undefined),
			separate_tip_screen: new FormControl<boolean | null | undefined>(undefined),
			smart_tipping: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface CancelTerminalRefundRequest {
	}
	export interface CancelTerminalRefundRequestFormProperties {
	}
	export function CreateCancelTerminalRefundRequestFormGroup() {
		return new FormGroup<CancelTerminalRefundRequestFormProperties>({
		});

	}

	export interface CancelTerminalRefundResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
		refund?: TerminalRefund;
	}
	export interface CancelTerminalRefundResponseFormProperties {
	}
	export function CreateCancelTerminalRefundResponseFormGroup() {
		return new FormGroup<CancelTerminalRefundResponseFormProperties>({
		});

	}

	export interface TerminalRefund {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/** The ID of the application that created the refund. */
		app_id?: string | null;

		/** Present if the status is `CANCELED`. */
		cancel_reason?: string | null;

		/** The time when the `TerminalRefund` was created, as an RFC 3339 timestamp. */
		created_at?: string | null;

		/**
		 * The RFC 3339 duration, after which the refund is automatically canceled.
		 * A `TerminalRefund` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
		 * of `TIMED_OUT`.
		 * Default: 5 minutes from creation.
		 * Maximum: 5 minutes
		 */
		deadline_duration?: string | null;

		/**
		 * The unique ID of the device intended for this `TerminalRefund`.
		 * The Id can be retrieved from /v2/devices api.
		 */
		device_id?: string | null;

		/**
		 * A unique ID for this `TerminalRefund`.
		 * Max length: 255
		 * Min length: 10
		 */
		id?: string | null;

		/** The location of the device where the `TerminalRefund` was directed. */
		location_id?: string | null;

		/** The reference to the Square order ID for the payment identified by the `payment_id`. */
		order_id?: string | null;

		/**
		 * The unique ID of the payment being refunded.
		 * Required
		 * Min length: 1
		 */
		payment_id: string;

		/**
		 * A description of the reason for the refund.
		 * Note: maximum 192 characters
		 * Max length: 192
		 */
		reason?: string | null;

		/** The reference to the payment refund created by completing this `TerminalRefund`. */
		refund_id?: string | null;

		/**
		 * The status of the `TerminalRefund`.
		 * Options: `PENDING`, `IN_PROGRESS`, `CANCELED`, or `COMPLETED`.
		 */
		status?: string | null;

		/** The time when the `TerminalRefund` was last updated, as an RFC 3339 timestamp. */
		updated_at?: string | null;
	}
	export interface TerminalRefundFormProperties {

		/** The ID of the application that created the refund. */
		app_id: FormControl<string | null | undefined>,

		/** Present if the status is `CANCELED`. */
		cancel_reason: FormControl<string | null | undefined>,

		/** The time when the `TerminalRefund` was created, as an RFC 3339 timestamp. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The RFC 3339 duration, after which the refund is automatically canceled.
		 * A `TerminalRefund` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
		 * of `TIMED_OUT`.
		 * Default: 5 minutes from creation.
		 * Maximum: 5 minutes
		 */
		deadline_duration: FormControl<string | null | undefined>,

		/**
		 * The unique ID of the device intended for this `TerminalRefund`.
		 * The Id can be retrieved from /v2/devices api.
		 */
		device_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID for this `TerminalRefund`.
		 * Max length: 255
		 * Min length: 10
		 */
		id: FormControl<string | null | undefined>,

		/** The location of the device where the `TerminalRefund` was directed. */
		location_id: FormControl<string | null | undefined>,

		/** The reference to the Square order ID for the payment identified by the `payment_id`. */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The unique ID of the payment being refunded.
		 * Required
		 * Min length: 1
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A description of the reason for the refund.
		 * Note: maximum 192 characters
		 * Max length: 192
		 */
		reason: FormControl<string | null | undefined>,

		/** The reference to the payment refund created by completing this `TerminalRefund`. */
		refund_id: FormControl<string | null | undefined>,

		/**
		 * The status of the `TerminalRefund`.
		 * Options: `PENDING`, `IN_PROGRESS`, `CANCELED`, or `COMPLETED`.
		 */
		status: FormControl<string | null | undefined>,

		/** The time when the `TerminalRefund` was last updated, as an RFC 3339 timestamp. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateTerminalRefundFormGroup() {
		return new FormGroup<TerminalRefundFormProperties>({
			app_id: new FormControl<string | null | undefined>(undefined),
			cancel_reason: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			deadline_duration: new FormControl<string | null | undefined>(undefined),
			device_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(10), Validators.maxLength(255)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			order_id: new FormControl<string | null | undefined>(undefined),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			refund_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CaptureTransactionRequest {
	}
	export interface CaptureTransactionRequestFormProperties {
	}
	export function CreateCaptureTransactionRequestFormGroup() {
		return new FormGroup<CaptureTransactionRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint.
	 */
	export interface CaptureTransactionResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint.
	 */
	export interface CaptureTransactionResponseFormProperties {
	}
	export function CreateCaptureTransactionResponseFormGroup() {
		return new FormGroup<CaptureTransactionResponseFormProperties>({
		});

	}


	/** Indicates a card's brand, such as `VISA` or `MASTERCARD`. */
	export enum CardBrand { OTHER_BRAND = 'OTHER_BRAND', VISA = 'VISA', MASTERCARD = 'MASTERCARD', AMERICAN_EXPRESS = 'AMERICAN_EXPRESS', DISCOVER = 'DISCOVER', DISCOVER_DINERS = 'DISCOVER_DINERS', JCB = 'JCB', CHINA_UNIONPAY = 'CHINA_UNIONPAY', SQUARE_GIFT_CARD = 'SQUARE_GIFT_CARD', SQUARE_CAPITAL_CARD = 'SQUARE_CAPITAL_CARD', INTERAC = 'INTERAC', EFTPOS = 'EFTPOS', FELICA = 'FELICA', EBT = 'EBT' }


	/** Indicates a card's prepaid type, such as `NOT_PREPAID` or `PREPAID`. */
	export enum CardPrepaidType { UNKNOWN_PREPAID_TYPE = 'UNKNOWN_PREPAID_TYPE', NOT_PREPAID = 'NOT_PREPAID', PREPAID = 'PREPAID' }

	export enum CardSquareProduct { UNKNOWN_SQUARE_PRODUCT = 'UNKNOWN_SQUARE_PRODUCT', CONNECT_API = 'CONNECT_API', DASHBOARD = 'DASHBOARD', REGISTER_CLIENT = 'REGISTER_CLIENT', BUYER_DASHBOARD = 'BUYER_DASHBOARD', WEB = 'WEB', INVOICES = 'INVOICES', GIFT_CARD = 'GIFT_CARD', VIRTUAL_TERMINAL = 'VIRTUAL_TERMINAL', READER_SDK = 'READER_SDK' }


	/** Indicates a card's type, such as `CREDIT` or `DEBIT`. */
	export enum CardType { UNKNOWN_CARD_TYPE = 'UNKNOWN_CARD_TYPE', CREDIT = 'CREDIT', DEBIT = 'DEBIT' }

	export interface CashDrawerDevice {

		/** The device Square-issued ID */
		id?: string | null;

		/** The device merchant-specified name. */
		name?: string | null;
	}
	export interface CashDrawerDeviceFormProperties {

		/** The device Square-issued ID */
		id: FormControl<string | null | undefined>,

		/** The device merchant-specified name. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCashDrawerDeviceFormGroup() {
		return new FormGroup<CashDrawerDeviceFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The types of events on a CashDrawerShift.
	 * Each event type represents an employee action on the actual cash drawer
	 * represented by a CashDrawerShift.
	 */
	export enum CashDrawerEventType { NO_SALE = 'NO_SALE', CASH_TENDER_PAYMENT = 'CASH_TENDER_PAYMENT', OTHER_TENDER_PAYMENT = 'OTHER_TENDER_PAYMENT', CASH_TENDER_CANCELLED_PAYMENT = 'CASH_TENDER_CANCELLED_PAYMENT', OTHER_TENDER_CANCELLED_PAYMENT = 'OTHER_TENDER_CANCELLED_PAYMENT', CASH_TENDER_REFUND = 'CASH_TENDER_REFUND', OTHER_TENDER_REFUND = 'OTHER_TENDER_REFUND', PAID_IN = 'PAID_IN', PAID_OUT = 'PAID_OUT' }


	/**
	 * This model gives the details of a cash drawer shift.
	 * The cash_payment_money, cash_refund_money, cash_paid_in_money,
	 * and cash_paid_out_money fields are all computed by summing their respective
	 * event types.
	 */
	export interface CashDrawerShift {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		cash_paid_in_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		cash_paid_out_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		cash_payment_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		cash_refunds_money?: Money;

		/** The time when the shift was closed, in ISO 8601 format. */
		closed_at?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		closed_cash_money?: Money;

		/**
		 * The ID of the employee that closed the cash drawer shift by auditing
		 * the cash drawer contents.
		 */
		closing_employee_id?: string | null;

		/** The free-form text description of a cash drawer by an employee. */
		description?: string | null;
		device?: CashDrawerDevice;

		/**
		 * The IDs of all employees that were logged into Square Point of Sale at any
		 * point while the cash drawer shift was open.
		 */
		employee_ids?: Array<string>;

		/** The time when the shift ended, in ISO 8601 format. */
		ended_at?: string | null;

		/** The ID of the employee that ended the cash drawer shift. */
		ending_employee_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		expected_cash_money?: Money;

		/** The shift unique ID. */
		id?: string | null;

		/** The time when the shift began, in ISO 8601 format. */
		opened_at?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		opened_cash_money?: Money;

		/** The ID of the employee that started the cash drawer shift. */
		opening_employee_id?: string | null;

		/** The shift current state. */
		state?: string | null;
	}

	/**
	 * This model gives the details of a cash drawer shift.
	 * The cash_payment_money, cash_refund_money, cash_paid_in_money,
	 * and cash_paid_out_money fields are all computed by summing their respective
	 * event types.
	 */
	export interface CashDrawerShiftFormProperties {

		/** The time when the shift was closed, in ISO 8601 format. */
		closed_at: FormControl<string | null | undefined>,

		/**
		 * The ID of the employee that closed the cash drawer shift by auditing
		 * the cash drawer contents.
		 */
		closing_employee_id: FormControl<string | null | undefined>,

		/** The free-form text description of a cash drawer by an employee. */
		description: FormControl<string | null | undefined>,

		/** The time when the shift ended, in ISO 8601 format. */
		ended_at: FormControl<string | null | undefined>,

		/** The ID of the employee that ended the cash drawer shift. */
		ending_employee_id: FormControl<string | null | undefined>,

		/** The shift unique ID. */
		id: FormControl<string | null | undefined>,

		/** The time when the shift began, in ISO 8601 format. */
		opened_at: FormControl<string | null | undefined>,

		/** The ID of the employee that started the cash drawer shift. */
		opening_employee_id: FormControl<string | null | undefined>,

		/** The shift current state. */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCashDrawerShiftFormGroup() {
		return new FormGroup<CashDrawerShiftFormProperties>({
			closed_at: new FormControl<string | null | undefined>(undefined),
			closing_employee_id: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			ended_at: new FormControl<string | null | undefined>(undefined),
			ending_employee_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			opened_at: new FormControl<string | null | undefined>(undefined),
			opening_employee_id: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CashDrawerShiftEvent {

		/** The event time in ISO 8601 format. */
		created_at?: string | null;

		/**
		 * An optional description of the event, entered by the employee that
		 * created the event.
		 */
		description?: string | null;

		/** The ID of the employee that created the event. */
		employee_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		event_money?: Money;

		/** The type of cash drawer shift event. */
		event_type?: string | null;

		/** The unique ID of the event. */
		id?: string | null;
	}
	export interface CashDrawerShiftEventFormProperties {

		/** The event time in ISO 8601 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * An optional description of the event, entered by the employee that
		 * created the event.
		 */
		description: FormControl<string | null | undefined>,

		/** The ID of the employee that created the event. */
		employee_id: FormControl<string | null | undefined>,

		/** The type of cash drawer shift event. */
		event_type: FormControl<string | null | undefined>,

		/** The unique ID of the event. */
		id: FormControl<string | null | undefined>,
	}
	export function CreateCashDrawerShiftEventFormGroup() {
		return new FormGroup<CashDrawerShiftEventFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			employee_id: new FormControl<string | null | undefined>(undefined),
			event_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The current state of a cash drawer shift. */
	export enum CashDrawerShiftState { OPEN = 'OPEN', ENDED = 'ENDED', CLOSED = 'CLOSED' }


	/**
	 * The summary of a closed cash drawer shift.
	 * This model contains only the money counted to start a cash drawer shift, counted
	 * at the end of the shift, and the amount that should be in the drawer at shift
	 * end based on summing all cash drawer shift events.
	 */
	export interface CashDrawerShiftSummary {

		/** The shift close time in ISO 8601 format. */
		closed_at?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		closed_cash_money?: Money;

		/** An employee free-text description of a cash drawer shift. */
		description?: string | null;

		/** The shift end time in ISO 8601 format. */
		ended_at?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		expected_cash_money?: Money;

		/** The shift unique ID. */
		id?: string | null;

		/** The shift start time in ISO 8601 format. */
		opened_at?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		opened_cash_money?: Money;

		/** The shift current state. */
		state?: string | null;
	}

	/**
	 * The summary of a closed cash drawer shift.
	 * This model contains only the money counted to start a cash drawer shift, counted
	 * at the end of the shift, and the amount that should be in the drawer at shift
	 * end based on summing all cash drawer shift events.
	 */
	export interface CashDrawerShiftSummaryFormProperties {

		/** The shift close time in ISO 8601 format. */
		closed_at: FormControl<string | null | undefined>,

		/** An employee free-text description of a cash drawer shift. */
		description: FormControl<string | null | undefined>,

		/** The shift end time in ISO 8601 format. */
		ended_at: FormControl<string | null | undefined>,

		/** The shift unique ID. */
		id: FormControl<string | null | undefined>,

		/** The shift start time in ISO 8601 format. */
		opened_at: FormControl<string | null | undefined>,

		/** The shift current state. */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCashDrawerShiftSummaryFormGroup() {
		return new FormGroup<CashDrawerShiftSummaryFormProperties>({
			closed_at: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			ended_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			opened_at: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the visibility of a custom attribute to applications other than their
	 * creating application.
	 */
	export enum CatalogCustomAttributeDefinitionAppVisibility { APP_VISIBILITY_HIDDEN = 'APP_VISIBILITY_HIDDEN', APP_VISIBILITY_READ_ONLY = 'APP_VISIBILITY_READ_ONLY', APP_VISIBILITY_READ_WRITE_VALUES = 'APP_VISIBILITY_READ_WRITE_VALUES' }


	/**
	 * Defines the visibility of a custom attribute to sellers in Square
	 * client applications, Square APIs or in Square UIs (including Square Point
	 * of Sale applications and Square Dashboard).
	 */
	export enum CatalogCustomAttributeDefinitionSellerVisibility { SELLER_VISIBILITY_HIDDEN = 'SELLER_VISIBILITY_HIDDEN', SELLER_VISIBILITY_READ_WRITE_VALUES = 'SELLER_VISIBILITY_READ_WRITE_VALUES' }


	/** Defines the possible types for a custom attribute. */
	export enum CatalogCustomAttributeDefinitionType { STRING = 'STRING', BOOLEAN = 'BOOLEAN', NUMBER = 'NUMBER', SELECTION = 'SELECTION' }

	export enum CatalogDiscountModifyTaxBasis { MODIFY_TAX_BASIS = 'MODIFY_TAX_BASIS', DO_NOT_MODIFY_TAX_BASIS = 'DO_NOT_MODIFY_TAX_BASIS' }


	/** How to apply a CatalogDiscount to a CatalogItem. */
	export enum CatalogDiscountType { FIXED_PERCENTAGE = 'FIXED_PERCENTAGE', FIXED_AMOUNT = 'FIXED_AMOUNT', VARIABLE_PERCENTAGE = 'VARIABLE_PERCENTAGE', VARIABLE_AMOUNT = 'VARIABLE_AMOUNT' }

	export interface CatalogInfoRequest {
	}
	export interface CatalogInfoRequestFormProperties {
	}
	export function CreateCatalogInfoRequestFormGroup() {
		return new FormGroup<CatalogInfoRequestFormProperties>({
		});

	}

	export interface CatalogInfoResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
		limits?: CatalogInfoResponseLimits;

		/** Group of standard measurement units. */
		standard_unit_description_group?: StandardUnitDescriptionGroup;
	}
	export interface CatalogInfoResponseFormProperties {
	}
	export function CreateCatalogInfoResponseFormGroup() {
		return new FormGroup<CatalogInfoResponseFormProperties>({
		});

	}

	export interface CatalogInfoResponseLimits {

		/**
		 * The maximum number of object IDs that may be included in a single
		 * `/v2/catalog/batch-delete` request.
		 */
		batch_delete_max_object_ids?: number | null;

		/**
		 * The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`
		 * request.
		 */
		batch_retrieve_max_object_ids?: number | null;

		/**
		 * The maximum number of objects that may appear within a single batch in a
		 * `/v2/catalog/batch-upsert` request.
		 */
		batch_upsert_max_objects_per_batch?: number | null;

		/**
		 * The maximum number of objects that may appear across all batches in a
		 * `/v2/catalog/batch-upsert` request.
		 */
		batch_upsert_max_total_objects?: number | null;

		/**
		 * The maximum number of results that may be returned in a page of a
		 * `/v2/catalog/search` response.
		 */
		search_max_page_limit?: number | null;

		/**
		 * The maximum number of item IDs that may be included in a single
		 * `/v2/catalog/update-item-modifier-lists` request.
		 */
		update_item_modifier_lists_max_item_ids?: number | null;

		/**
		 * The maximum number of modifier list IDs to be disabled that may be included in
		 * a single `/v2/catalog/update-item-modifier-lists` request.
		 */
		update_item_modifier_lists_max_modifier_lists_to_disable?: number | null;

		/**
		 * The maximum number of modifier list IDs to be enabled that may be included in
		 * a single `/v2/catalog/update-item-modifier-lists` request.
		 */
		update_item_modifier_lists_max_modifier_lists_to_enable?: number | null;

		/**
		 * The maximum number of item IDs that may be included in a single
		 * `/v2/catalog/update-item-taxes` request.
		 */
		update_item_taxes_max_item_ids?: number | null;

		/**
		 * The maximum number of tax IDs to be disabled that may be included in a single
		 * `/v2/catalog/update-item-taxes` request.
		 */
		update_item_taxes_max_taxes_to_disable?: number | null;

		/**
		 * The maximum number of tax IDs to be enabled that may be included in a single
		 * `/v2/catalog/update-item-taxes` request.
		 */
		update_item_taxes_max_taxes_to_enable?: number | null;
	}
	export interface CatalogInfoResponseLimitsFormProperties {

		/**
		 * The maximum number of object IDs that may be included in a single
		 * `/v2/catalog/batch-delete` request.
		 */
		batch_delete_max_object_ids: FormControl<number | null | undefined>,

		/**
		 * The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`
		 * request.
		 */
		batch_retrieve_max_object_ids: FormControl<number | null | undefined>,

		/**
		 * The maximum number of objects that may appear within a single batch in a
		 * `/v2/catalog/batch-upsert` request.
		 */
		batch_upsert_max_objects_per_batch: FormControl<number | null | undefined>,

		/**
		 * The maximum number of objects that may appear across all batches in a
		 * `/v2/catalog/batch-upsert` request.
		 */
		batch_upsert_max_total_objects: FormControl<number | null | undefined>,

		/**
		 * The maximum number of results that may be returned in a page of a
		 * `/v2/catalog/search` response.
		 */
		search_max_page_limit: FormControl<number | null | undefined>,

		/**
		 * The maximum number of item IDs that may be included in a single
		 * `/v2/catalog/update-item-modifier-lists` request.
		 */
		update_item_modifier_lists_max_item_ids: FormControl<number | null | undefined>,

		/**
		 * The maximum number of modifier list IDs to be disabled that may be included in
		 * a single `/v2/catalog/update-item-modifier-lists` request.
		 */
		update_item_modifier_lists_max_modifier_lists_to_disable: FormControl<number | null | undefined>,

		/**
		 * The maximum number of modifier list IDs to be enabled that may be included in
		 * a single `/v2/catalog/update-item-modifier-lists` request.
		 */
		update_item_modifier_lists_max_modifier_lists_to_enable: FormControl<number | null | undefined>,

		/**
		 * The maximum number of item IDs that may be included in a single
		 * `/v2/catalog/update-item-taxes` request.
		 */
		update_item_taxes_max_item_ids: FormControl<number | null | undefined>,

		/**
		 * The maximum number of tax IDs to be disabled that may be included in a single
		 * `/v2/catalog/update-item-taxes` request.
		 */
		update_item_taxes_max_taxes_to_disable: FormControl<number | null | undefined>,

		/**
		 * The maximum number of tax IDs to be enabled that may be included in a single
		 * `/v2/catalog/update-item-taxes` request.
		 */
		update_item_taxes_max_taxes_to_enable: FormControl<number | null | undefined>,
	}
	export function CreateCatalogInfoResponseLimitsFormGroup() {
		return new FormGroup<CatalogInfoResponseLimitsFormProperties>({
			batch_delete_max_object_ids: new FormControl<number | null | undefined>(undefined),
			batch_retrieve_max_object_ids: new FormControl<number | null | undefined>(undefined),
			batch_upsert_max_objects_per_batch: new FormControl<number | null | undefined>(undefined),
			batch_upsert_max_total_objects: new FormControl<number | null | undefined>(undefined),
			search_max_page_limit: new FormControl<number | null | undefined>(undefined),
			update_item_modifier_lists_max_item_ids: new FormControl<number | null | undefined>(undefined),
			update_item_modifier_lists_max_modifier_lists_to_disable: new FormControl<number | null | undefined>(undefined),
			update_item_modifier_lists_max_modifier_lists_to_enable: new FormControl<number | null | undefined>(undefined),
			update_item_taxes_max_item_ids: new FormControl<number | null | undefined>(undefined),
			update_item_taxes_max_taxes_to_disable: new FormControl<number | null | undefined>(undefined),
			update_item_taxes_max_taxes_to_enable: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Group of standard measurement units. */
	export interface StandardUnitDescriptionGroup {

		/** IETF language tag. */
		language_code?: string | null;

		/** List of standard (non-custom) measurement units in this description group. */
		standard_unit_descriptions?: Array<StandardUnitDescription>;
	}

	/** Group of standard measurement units. */
	export interface StandardUnitDescriptionGroupFormProperties {

		/** IETF language tag. */
		language_code: FormControl<string | null | undefined>,
	}
	export function CreateStandardUnitDescriptionGroupFormGroup() {
		return new FormGroup<StandardUnitDescriptionGroupFormProperties>({
			language_code: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains the name and abbreviation for standard measurement unit. */
	export interface StandardUnitDescription {

		/** UI display abbreviation for the measurement unit. For example, 'lb'. */
		abbreviation?: string | null;

		/** UI display name of the measurement unit. For example, 'Pound'. */
		name?: string | null;

		/**
		 * Represents a unit of measurement to use with a quantity, such as ounces
		 * or inches. Exactly one of the following fields are required: `custom_unit`,
		 * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
		 */
		unit?: MeasurementUnit;
	}

	/** Contains the name and abbreviation for standard measurement unit. */
	export interface StandardUnitDescriptionFormProperties {

		/** UI display abbreviation for the measurement unit. For example, 'lb'. */
		abbreviation: FormControl<string | null | undefined>,

		/** UI display name of the measurement unit. For example, 'Pound'. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateStandardUnitDescriptionFormGroup() {
		return new FormGroup<StandardUnitDescriptionFormProperties>({
			abbreviation: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items. */
	export enum CatalogItemProductType { REGULAR = 'REGULAR', GIFT_CARD = 'GIFT_CARD', APPOINTMENTS_SERVICE = 'APPOINTMENTS_SERVICE' }


	/** Indicates whether a CatalogModifierList supports multiple selections. */
	export enum CatalogModifierListSelectionType { SINGLE = 'SINGLE', MULTIPLE = 'MULTIPLE' }


	/**
	 * A reference to a Catalog object at a specific version. In general this is
	 * used as an entry point into a graph of catalog objects, where the objects exist
	 * at a specific version.
	 */
	export interface CatalogObjectReference {

		/** The version of the object. */
		catalog_version?: number | null;

		/** The ID of the referenced object. */
		object_id?: string | null;
	}

	/**
	 * A reference to a Catalog object at a specific version. In general this is
	 * used as an entry point into a graph of catalog objects, where the objects exist
	 * at a specific version.
	 */
	export interface CatalogObjectReferenceFormProperties {

		/** The version of the object. */
		catalog_version: FormControl<number | null | undefined>,

		/** The ID of the referenced object. */
		object_id: FormControl<string | null | undefined>,
	}
	export function CreateCatalogObjectReferenceFormGroup() {
		return new FormGroup<CatalogObjectReferenceFormProperties>({
			catalog_version: new FormControl<number | null | undefined>(undefined),
			object_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Possible types of CatalogObjects returned from the Catalog, each
	 * containing type-specific properties in the `*_data` field corresponding to the object type.
	 */
	export enum CatalogObjectType { ITEM = 'ITEM', IMAGE = 'IMAGE', CATEGORY = 'CATEGORY', ITEM_VARIATION = 'ITEM_VARIATION', TAX = 'TAX', DISCOUNT = 'DISCOUNT', MODIFIER_LIST = 'MODIFIER_LIST', MODIFIER = 'MODIFIER', PRICING_RULE = 'PRICING_RULE', PRODUCT_SET = 'PRODUCT_SET', TIME_PERIOD = 'TIME_PERIOD', MEASUREMENT_UNIT = 'MEASUREMENT_UNIT', SUBSCRIPTION_PLAN = 'SUBSCRIPTION_PLAN', ITEM_OPTION = 'ITEM_OPTION', ITEM_OPTION_VAL = 'ITEM_OPTION_VAL', CUSTOM_ATTRIBUTE_DEFINITION = 'CUSTOM_ATTRIBUTE_DEFINITION', QUICK_AMOUNTS_SETTINGS = 'QUICK_AMOUNTS_SETTINGS' }


	/** Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale. */
	export enum CatalogPricingType { FIXED_PRICING = 'FIXED_PRICING', VARIABLE_PRICING = 'VARIABLE_PRICING' }


	/**
	 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
	 * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
	 * Any combination of the following types may be used together:
	 * - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
	 * - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
	 * - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
	 * - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
	 * - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
	 * All other query types cannot be combined with any others.
	 * When a query filter is based on an attribute, the attribute must be searchable.
	 * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
	 * * Searchable attribute and objects queryable by searchable attributes **
	 * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
	 * - `description`: `CatalogItem`, `CatalogItemOptionValue`
	 * - `abbreviation`: `CatalogItem`
	 * - `upc`: `CatalogItemVariation`
	 * - `sku`: `CatalogItemVariation`
	 * - `caption`: `CatalogImage`
	 * - `display_name`: `CatalogItemOption`
	 * For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
	 * the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
	 */
	export interface CatalogQuery {

		/** The query filter to return the search result by exact match of the specified attribute name and value. */
		exact_query?: CatalogQueryExact;

		/** The query filter to return the item variations containing the specified item option value IDs. */
		item_variations_for_item_option_values_query?: CatalogQueryItemVariationsForItemOptionValues;

		/** The query filter to return the items containing the specified item option IDs. */
		items_for_item_options_query?: CatalogQueryItemsForItemOptions;

		/** The query filter to return the items containing the specified modifier list IDs. */
		items_for_modifier_list_query?: CatalogQueryItemsForModifierList;

		/** The query filter to return the items containing the specified tax IDs. */
		items_for_tax_query?: CatalogQueryItemsForTax;

		/** The query filter to return the search result whose named attribute values are prefixed by the specified attribute value. */
		prefix_query?: CatalogQueryPrefix;

		/** The query filter to return the search result whose named attribute values fall between the specified range. */
		range_query?: CatalogQueryRange;

		/**
		 * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
		 * the `attribute_values`.
		 */
		set_query?: CatalogQuerySet;

		/** The query expression to specify the key to sort search results. */
		sorted_attribute_query?: CatalogQuerySortedAttribute;

		/** The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case. */
		text_query?: CatalogQueryText;
	}

	/**
	 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
	 * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
	 * Any combination of the following types may be used together:
	 * - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
	 * - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
	 * - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
	 * - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
	 * - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
	 * All other query types cannot be combined with any others.
	 * When a query filter is based on an attribute, the attribute must be searchable.
	 * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
	 * * Searchable attribute and objects queryable by searchable attributes **
	 * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
	 * - `description`: `CatalogItem`, `CatalogItemOptionValue`
	 * - `abbreviation`: `CatalogItem`
	 * - `upc`: `CatalogItemVariation`
	 * - `sku`: `CatalogItemVariation`
	 * - `caption`: `CatalogImage`
	 * - `display_name`: `CatalogItemOption`
	 * For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
	 * the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
	 */
	export interface CatalogQueryFormProperties {
	}
	export function CreateCatalogQueryFormGroup() {
		return new FormGroup<CatalogQueryFormProperties>({
		});

	}


	/** The query filter to return the search result by exact match of the specified attribute name and value. */
	export interface CatalogQueryExact {

		/**
		 * The name of the attribute to be searched. Matching of the attribute name is exact.
		 * Required
		 * Min length: 1
		 */
		attribute_name: string;

		/**
		 * The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.
		 * For example, if a specified value of "sma", objects with the named attribute value of "Small", "small" are both matched.
		 * Required
		 */
		attribute_value: string;
	}

	/** The query filter to return the search result by exact match of the specified attribute name and value. */
	export interface CatalogQueryExactFormProperties {

		/**
		 * The name of the attribute to be searched. Matching of the attribute name is exact.
		 * Required
		 * Min length: 1
		 */
		attribute_name: FormControl<string | null | undefined>,

		/**
		 * The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.
		 * For example, if a specified value of "sma", objects with the named attribute value of "Small", "small" are both matched.
		 * Required
		 */
		attribute_value: FormControl<string | null | undefined>,
	}
	export function CreateCatalogQueryExactFormGroup() {
		return new FormGroup<CatalogQueryExactFormProperties>({
			attribute_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			attribute_value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The query filter to return the item variations containing the specified item option value IDs. */
	export interface CatalogQueryItemVariationsForItemOptionValues {

		/**
		 * A set of `CatalogItemOptionValue` IDs to be used to find associated
		 * `CatalogItemVariation`s. All ItemVariations that contain all of the given
		 * Item Option Values (in any order) will be returned.
		 */
		item_option_value_ids?: Array<string>;
	}

	/** The query filter to return the item variations containing the specified item option value IDs. */
	export interface CatalogQueryItemVariationsForItemOptionValuesFormProperties {
	}
	export function CreateCatalogQueryItemVariationsForItemOptionValuesFormGroup() {
		return new FormGroup<CatalogQueryItemVariationsForItemOptionValuesFormProperties>({
		});

	}


	/** The query filter to return the items containing the specified item option IDs. */
	export interface CatalogQueryItemsForItemOptions {

		/**
		 * A set of `CatalogItemOption` IDs to be used to find associated
		 * `CatalogItem`s. All Items that contain all of the given Item Options (in any order)
		 * will be returned.
		 */
		item_option_ids?: Array<string>;
	}

	/** The query filter to return the items containing the specified item option IDs. */
	export interface CatalogQueryItemsForItemOptionsFormProperties {
	}
	export function CreateCatalogQueryItemsForItemOptionsFormGroup() {
		return new FormGroup<CatalogQueryItemsForItemOptionsFormProperties>({
		});

	}


	/** The query filter to return the items containing the specified modifier list IDs. */
	export interface CatalogQueryItemsForModifierList {

		/**
		 * A set of `CatalogModifierList` IDs to be used to find associated `CatalogItem`s.
		 * Required
		 */
		modifier_list_ids: Array<string>;
	}

	/** The query filter to return the items containing the specified modifier list IDs. */
	export interface CatalogQueryItemsForModifierListFormProperties {
	}
	export function CreateCatalogQueryItemsForModifierListFormGroup() {
		return new FormGroup<CatalogQueryItemsForModifierListFormProperties>({
		});

	}


	/** The query filter to return the items containing the specified tax IDs. */
	export interface CatalogQueryItemsForTax {

		/**
		 * A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.
		 * Required
		 */
		tax_ids: Array<string>;
	}

	/** The query filter to return the items containing the specified tax IDs. */
	export interface CatalogQueryItemsForTaxFormProperties {
	}
	export function CreateCatalogQueryItemsForTaxFormGroup() {
		return new FormGroup<CatalogQueryItemsForTaxFormProperties>({
		});

	}


	/** The query filter to return the search result whose named attribute values are prefixed by the specified attribute value. */
	export interface CatalogQueryPrefix {

		/**
		 * The name of the attribute to be searched.
		 * Required
		 * Min length: 1
		 */
		attribute_name: string;

		/**
		 * The desired prefix of the search attribute value.
		 * Required
		 * Min length: 1
		 */
		attribute_prefix: string;
	}

	/** The query filter to return the search result whose named attribute values are prefixed by the specified attribute value. */
	export interface CatalogQueryPrefixFormProperties {

		/**
		 * The name of the attribute to be searched.
		 * Required
		 * Min length: 1
		 */
		attribute_name: FormControl<string | null | undefined>,

		/**
		 * The desired prefix of the search attribute value.
		 * Required
		 * Min length: 1
		 */
		attribute_prefix: FormControl<string | null | undefined>,
	}
	export function CreateCatalogQueryPrefixFormGroup() {
		return new FormGroup<CatalogQueryPrefixFormProperties>({
			attribute_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			attribute_prefix: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** The query filter to return the search result whose named attribute values fall between the specified range. */
	export interface CatalogQueryRange {

		/** The desired maximum value for the search attribute (inclusive). */
		attribute_max_value?: number | null;

		/** The desired minimum value for the search attribute (inclusive). */
		attribute_min_value?: number | null;

		/**
		 * The name of the attribute to be searched.
		 * Required
		 * Min length: 1
		 */
		attribute_name: string;
	}

	/** The query filter to return the search result whose named attribute values fall between the specified range. */
	export interface CatalogQueryRangeFormProperties {

		/** The desired maximum value for the search attribute (inclusive). */
		attribute_max_value: FormControl<number | null | undefined>,

		/** The desired minimum value for the search attribute (inclusive). */
		attribute_min_value: FormControl<number | null | undefined>,

		/**
		 * The name of the attribute to be searched.
		 * Required
		 * Min length: 1
		 */
		attribute_name: FormControl<string | null | undefined>,
	}
	export function CreateCatalogQueryRangeFormGroup() {
		return new FormGroup<CatalogQueryRangeFormProperties>({
			attribute_max_value: new FormControl<number | null | undefined>(undefined),
			attribute_min_value: new FormControl<number | null | undefined>(undefined),
			attribute_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/**
	 * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
	 * the `attribute_values`.
	 */
	export interface CatalogQuerySet {

		/**
		 * The name of the attribute to be searched. Matching of the attribute name is exact.
		 * Required
		 * Min length: 1
		 */
		attribute_name: string;

		/**
		 * The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
		 * A maximum of 250 values may be searched in a request.
		 * Required
		 */
		attribute_values: Array<string>;
	}

	/**
	 * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
	 * the `attribute_values`.
	 */
	export interface CatalogQuerySetFormProperties {

		/**
		 * The name of the attribute to be searched. Matching of the attribute name is exact.
		 * Required
		 * Min length: 1
		 */
		attribute_name: FormControl<string | null | undefined>,
	}
	export function CreateCatalogQuerySetFormGroup() {
		return new FormGroup<CatalogQuerySetFormProperties>({
			attribute_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** The query expression to specify the key to sort search results. */
	export interface CatalogQuerySortedAttribute {

		/**
		 * The attribute whose value is used as the sort key.
		 * Required
		 * Min length: 1
		 */
		attribute_name: string;

		/**
		 * The first attribute value to be returned by the query. Ascending sorts will return only
		 * objects with this value or greater, while descending sorts will return only objects with this value
		 * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
		 */
		initial_attribute_value?: string | null;

		/** The desired sort order, `"ASC"` (ascending) or `"DESC"` (descending). */
		sort_order?: string | null;
	}

	/** The query expression to specify the key to sort search results. */
	export interface CatalogQuerySortedAttributeFormProperties {

		/**
		 * The attribute whose value is used as the sort key.
		 * Required
		 * Min length: 1
		 */
		attribute_name: FormControl<string | null | undefined>,

		/**
		 * The first attribute value to be returned by the query. Ascending sorts will return only
		 * objects with this value or greater, while descending sorts will return only objects with this value
		 * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
		 */
		initial_attribute_value: FormControl<string | null | undefined>,

		/** The desired sort order, `"ASC"` (ascending) or `"DESC"` (descending). */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateCatalogQuerySortedAttributeFormGroup() {
		return new FormGroup<CatalogQuerySortedAttributeFormProperties>({
			attribute_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			initial_attribute_value: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case. */
	export interface CatalogQueryText {

		/**
		 * A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored.
		 * Required
		 */
		keywords: Array<string>;
	}

	/** The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case. */
	export interface CatalogQueryTextFormProperties {
	}
	export function CreateCatalogQueryTextFormGroup() {
		return new FormGroup<CatalogQueryTextFormProperties>({
		});

	}


	/** Determines the type of a specific Quick Amount. */
	export enum CatalogQuickAmountType { QUICK_AMOUNT_TYPE_MANUAL = 'QUICK_AMOUNT_TYPE_MANUAL', QUICK_AMOUNT_TYPE_AUTO = 'QUICK_AMOUNT_TYPE_AUTO' }


	/** Determines a seller's option on Quick Amounts feature. */
	export enum CatalogQuickAmountsSettingsOption { DISABLED = 'DISABLED', MANUAL = 'MANUAL', AUTO = 'AUTO' }


	/**
	 * Defines the parameters that can be included in the body of
	 * a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
	 * Deprecated - recommend using [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment)
	 */
	export interface ChargeRequest {

		/**
		 * The basic primitive of multi-party transaction. The value is optional.
		 * The transaction facilitated by you can be split from here.
		 * If you provide this value, the `amount_money` value in your additional_recipients
		 * must not be more than 90% of the `amount_money` value in the charge request.
		 * The `location_id` must be the valid location of the app owner merchant.
		 * This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
		 * This field is currently not supported in sandbox.
		 */
		additional_recipients?: Array<AdditionalRecipient>;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		billing_address?: Address;

		/**
		 * The buyer's email address, if available. This value is optional,
		 * but this transaction is ineligible for chargeback protection if it is not
		 * provided.
		 */
		buyer_email_address?: string | null;

		/**
		 * A payment token generated from the [Card.tokenize()](https://developer.squareup.com/reference/sdks/web/payments/objects/Card#Card.tokenize) that represents the card
		 * to charge.
		 * The application that provides a payment token to this endpoint must be the
		 * _same application_ that generated the payment token with the Web Payments SDK.
		 * Otherwise, the nonce is invalid.
		 * Do not provide a value for this field if you provide a value for
		 * `customer_card_id`.
		 * Max length: 192
		 */
		card_nonce?: string | null;

		/**
		 * The ID of the customer card on file to charge. Do
		 * not provide a value for this field if you provide a value for `card_nonce`.
		 * If you provide this value, you _must_ also provide a value for
		 * `customer_id`.
		 * Max length: 192
		 */
		customer_card_id?: string | null;

		/**
		 * The ID of the customer to associate this transaction with. This field
		 * is required if you provide a value for `customer_card_id`, and optional
		 * otherwise.
		 * Max length: 50
		 */
		customer_id?: string | null;

		/**
		 * If `true`, the request will only perform an Auth on the provided
		 * card. You can then later perform either a Capture (with the
		 * [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint) or a Void
		 * (with the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint).
		 * Default value: `false`
		 */
		delay_capture?: boolean | null;

		/**
		 * A value you specify that uniquely identifies this
		 * transaction among transactions you've created.
		 * If you're unsure whether a particular transaction succeeded,
		 * you can reattempt it with the same idempotency key without
		 * worrying about double-charging the buyer.
		 * See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * An optional note to associate with the transaction.
		 * This value cannot exceed 60 characters.
		 * Max length: 60
		 */
		note?: string | null;

		/**
		 * The ID of the order to associate with this transaction.
		 * If you provide this value, the `amount_money` value of your request must
		 * __exactly match__ the value of the order's `total_money` field.
		 * Max length: 192
		 */
		order_id?: string | null;

		/**
		 * An optional ID you can associate with the transaction for your own
		 * purposes (such as to associate the transaction with an entity ID in your
		 * own database).
		 * This value cannot exceed 40 characters.
		 * Max length: 40
		 */
		reference_id?: string | null;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		shipping_address?: Address;

		/**
		 * A token generated by SqPaymentForm's verifyBuyer() that represents
		 * customer's device info and 3ds challenge result.
		 */
		verification_token?: string | null;
	}

	/**
	 * Defines the parameters that can be included in the body of
	 * a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
	 * Deprecated - recommend using [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment)
	 */
	export interface ChargeRequestFormProperties {

		/**
		 * The buyer's email address, if available. This value is optional,
		 * but this transaction is ineligible for chargeback protection if it is not
		 * provided.
		 */
		buyer_email_address: FormControl<string | null | undefined>,

		/**
		 * A payment token generated from the [Card.tokenize()](https://developer.squareup.com/reference/sdks/web/payments/objects/Card#Card.tokenize) that represents the card
		 * to charge.
		 * The application that provides a payment token to this endpoint must be the
		 * _same application_ that generated the payment token with the Web Payments SDK.
		 * Otherwise, the nonce is invalid.
		 * Do not provide a value for this field if you provide a value for
		 * `customer_card_id`.
		 * Max length: 192
		 */
		card_nonce: FormControl<string | null | undefined>,

		/**
		 * The ID of the customer card on file to charge. Do
		 * not provide a value for this field if you provide a value for `card_nonce`.
		 * If you provide this value, you _must_ also provide a value for
		 * `customer_id`.
		 * Max length: 192
		 */
		customer_card_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the customer to associate this transaction with. This field
		 * is required if you provide a value for `customer_card_id`, and optional
		 * otherwise.
		 * Max length: 50
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * If `true`, the request will only perform an Auth on the provided
		 * card. You can then later perform either a Capture (with the
		 * [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint) or a Void
		 * (with the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint).
		 * Default value: `false`
		 */
		delay_capture: FormControl<boolean | null | undefined>,

		/**
		 * A value you specify that uniquely identifies this
		 * transaction among transactions you've created.
		 * If you're unsure whether a particular transaction succeeded,
		 * you can reattempt it with the same idempotency key without
		 * worrying about double-charging the buyer.
		 * See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * An optional note to associate with the transaction.
		 * This value cannot exceed 60 characters.
		 * Max length: 60
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The ID of the order to associate with this transaction.
		 * If you provide this value, the `amount_money` value of your request must
		 * __exactly match__ the value of the order's `total_money` field.
		 * Max length: 192
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * An optional ID you can associate with the transaction for your own
		 * purposes (such as to associate the transaction with an entity ID in your
		 * own database).
		 * This value cannot exceed 40 characters.
		 * Max length: 40
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * A token generated by SqPaymentForm's verifyBuyer() that represents
		 * customer's device info and 3ds challenge result.
		 */
		verification_token: FormControl<string | null | undefined>,
	}
	export function CreateChargeRequestFormGroup() {
		return new FormGroup<ChargeRequestFormProperties>({
			buyer_email_address: new FormControl<string | null | undefined>(undefined),
			card_nonce: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			customer_card_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			delay_capture: new FormControl<boolean | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(192)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			order_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
			verification_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents an additional recipient (other than the merchant) entitled to a portion of the tender.
	 * Support is currently limited to USD, CAD and GBP currencies
	 */
	export interface ChargeRequestAdditionalRecipient {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * The description of the additional recipient.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		description: string;

		/**
		 * The location ID for a recipient (other than the merchant) receiving a portion of the tender.
		 * Required
		 * Max length: 50
		 * Min length: 1
		 */
		location_id: string;
	}

	/**
	 * Represents an additional recipient (other than the merchant) entitled to a portion of the tender.
	 * Support is currently limited to USD, CAD and GBP currencies
	 */
	export interface ChargeRequestAdditionalRecipientFormProperties {

		/**
		 * The description of the additional recipient.
		 * Required
		 * Max length: 100
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The location ID for a recipient (other than the merchant) receiving a portion of the tender.
		 * Required
		 * Max length: 50
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateChargeRequestAdditionalRecipientFormGroup() {
		return new FormGroup<ChargeRequestAdditionalRecipientFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(100)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
	 * One of `errors` or `transaction` is present in a given response (never both).
	 */
	export interface ChargeResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a transaction processed with Square, either with the
		 * Connect API or with Square Point of Sale.
		 * The `tenders` field of this object lists all methods of payment used to pay in
		 * the transaction.
		 */
		transaction?: Transaction;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
	 * One of `errors` or `transaction` is present in a given response (never both).
	 */
	export interface ChargeResponseFormProperties {
	}
	export function CreateChargeResponseFormGroup() {
		return new FormGroup<ChargeResponseFormProperties>({
		});

	}


	/**
	 * Represents a transaction processed with Square, either with the
	 * Connect API or with Square Point of Sale.
	 * The `tenders` field of this object lists all methods of payment used to pay in
	 * the transaction.
	 */
	export interface Transaction {

		/**
		 * If the transaction was created in the Square Point of Sale app, this value
		 * is the ID generated for the transaction by Square Point of Sale.
		 * This ID has no relationship to the transaction's canonical `id`, which is
		 * generated by Square's backend servers. This value is generated for bookkeeping
		 * purposes, in case the transaction cannot immediately be completed (for example,
		 * if the transaction is processed in offline mode).
		 * It is not currently possible with the Connect API to perform a transaction
		 * lookup by this value.
		 * Max length: 192
		 */
		client_id?: string | null;

		/**
		 * The timestamp for when the transaction was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at?: string | null;

		/**
		 * The transaction's unique ID, issued by Square payments servers.
		 * Max length: 192
		 */
		id?: string | null;

		/**
		 * The ID of the transaction's associated location.
		 * Max length: 50
		 */
		location_id?: string | null;

		/**
		 * The order_id is an identifier for the order associated with this transaction, if any.
		 * Max length: 192
		 */
		order_id?: string | null;

		/** The Square product that processed the transaction. */
		product?: string | null;

		/**
		 * If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
		 * endpoint, this value is the same as the value provided for the `reference_id`
		 * parameter in the request to that endpoint. Otherwise, it is not set.
		 * Max length: 40
		 */
		reference_id?: string | null;

		/** Refunds that have been applied to any tender in the transaction. */
		refunds?: Array<Refund>;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		shipping_address?: Address;

		/** The tenders used to pay in the transaction. */
		tenders?: Array<Tender>;
	}

	/**
	 * Represents a transaction processed with Square, either with the
	 * Connect API or with Square Point of Sale.
	 * The `tenders` field of this object lists all methods of payment used to pay in
	 * the transaction.
	 */
	export interface TransactionFormProperties {

		/**
		 * If the transaction was created in the Square Point of Sale app, this value
		 * is the ID generated for the transaction by Square Point of Sale.
		 * This ID has no relationship to the transaction's canonical `id`, which is
		 * generated by Square's backend servers. This value is generated for bookkeeping
		 * purposes, in case the transaction cannot immediately be completed (for example,
		 * if the transaction is processed in offline mode).
		 * It is not currently possible with the Connect API to perform a transaction
		 * lookup by this value.
		 * Max length: 192
		 */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The timestamp for when the transaction was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The transaction's unique ID, issued by Square payments servers.
		 * Max length: 192
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the transaction's associated location.
		 * Max length: 50
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The order_id is an identifier for the order associated with this transaction, if any.
		 * Max length: 192
		 */
		order_id: FormControl<string | null | undefined>,

		/** The Square product that processed the transaction. */
		product: FormControl<string | null | undefined>,

		/**
		 * If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
		 * endpoint, this value is the same as the value provided for the `reference_id`
		 * parameter in the request to that endpoint. Otherwise, it is not set.
		 * Max length: 40
		 */
		reference_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionFormGroup() {
		return new FormGroup<TransactionFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			order_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			product: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
		});

	}

	export interface CheckAppointmentsOnboardedRequest {
	}
	export interface CheckAppointmentsOnboardedRequestFormProperties {
	}
	export function CreateCheckAppointmentsOnboardedRequestFormGroup() {
		return new FormGroup<CheckAppointmentsOnboardedRequestFormProperties>({
		});

	}


	/**
	 * Square Checkout lets merchants accept online payments for supported
	 * payment types using a checkout workflow hosted on squareup.com.
	 */
	export interface Checkout {

		/**
		 * Additional recipients (other than the merchant) receiving a portion of this checkout.
		 * For example, fees assessed on the purchase by a third party integration.
		 */
		additional_recipients?: Array<AdditionalRecipient>;

		/**
		 * If `true`, Square Checkout will collect shipping information on your
		 * behalf and store that information with the transaction information in your
		 * Square Dashboard.
		 * Default: `false`.
		 */
		ask_for_shipping_address?: boolean | null;

		/**
		 * The URL that the buyer's browser should be redirected to after the
		 * checkout is completed.
		 */
		checkout_page_url?: string | null;

		/** The time when the checkout was created, in RFC 3339 format. */
		created_at?: string | null;

		/** ID generated by Square Checkout when a new checkout is requested. */
		id?: string | null;

		/**
		 * The email address to display on the Square Checkout confirmation page
		 * and confirmation email that the buyer can use to contact the merchant.
		 * If this value is not set, the confirmation page and email will display the
		 * primary email address associated with the merchant's Square account.
		 * Default: none; only exists if explicitly set.
		 */
		merchant_support_email?: string | null;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;

		/**
		 * If provided, the buyer's email is pre-populated on the checkout page
		 * as an editable text field.
		 * Default: none; only exists if explicitly set.
		 */
		pre_populate_buyer_email?: string | null;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		pre_populate_shipping_address?: Address;

		/**
		 * The URL to redirect to after checkout is completed with `checkoutId`,
		 * Square's `orderId`, `transactionId`, and `referenceId` appended as URL
		 * parameters. For example, if the provided redirect_url is
		 * `http://www.example.com/order-complete`, a successful transaction redirects
		 * the customer to:
		 * <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
		 * If you do not provide a redirect URL, Square Checkout will display an order
		 * confirmation page on your behalf; however Square strongly recommends that
		 * you provide a redirect URL so you can verify the transaction results and
		 * finalize the order through your existing/normal confirmation workflow.
		 */
		redirect_url?: string | null;
	}

	/**
	 * Square Checkout lets merchants accept online payments for supported
	 * payment types using a checkout workflow hosted on squareup.com.
	 */
	export interface CheckoutFormProperties {

		/**
		 * If `true`, Square Checkout will collect shipping information on your
		 * behalf and store that information with the transaction information in your
		 * Square Dashboard.
		 * Default: `false`.
		 */
		ask_for_shipping_address: FormControl<boolean | null | undefined>,

		/**
		 * The URL that the buyer's browser should be redirected to after the
		 * checkout is completed.
		 */
		checkout_page_url: FormControl<string | null | undefined>,

		/** The time when the checkout was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** ID generated by Square Checkout when a new checkout is requested. */
		id: FormControl<string | null | undefined>,

		/**
		 * The email address to display on the Square Checkout confirmation page
		 * and confirmation email that the buyer can use to contact the merchant.
		 * If this value is not set, the confirmation page and email will display the
		 * primary email address associated with the merchant's Square account.
		 * Default: none; only exists if explicitly set.
		 */
		merchant_support_email: FormControl<string | null | undefined>,

		/**
		 * If provided, the buyer's email is pre-populated on the checkout page
		 * as an editable text field.
		 * Default: none; only exists if explicitly set.
		 */
		pre_populate_buyer_email: FormControl<string | null | undefined>,

		/**
		 * The URL to redirect to after checkout is completed with `checkoutId`,
		 * Square's `orderId`, `transactionId`, and `referenceId` appended as URL
		 * parameters. For example, if the provided redirect_url is
		 * `http://www.example.com/order-complete`, a successful transaction redirects
		 * the customer to:
		 * <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
		 * If you do not provide a redirect URL, Square Checkout will display an order
		 * confirmation page on your behalf; however Square strongly recommends that
		 * you provide a redirect URL so you can verify the transaction results and
		 * finalize the order through your existing/normal confirmation workflow.
		 */
		redirect_url: FormControl<string | null | undefined>,
	}
	export function CreateCheckoutFormGroup() {
		return new FormGroup<CheckoutFormProperties>({
			ask_for_shipping_address: new FormControl<boolean | null | undefined>(undefined),
			checkout_page_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			merchant_support_email: new FormControl<string | null | undefined>(undefined),
			pre_populate_buyer_email: new FormControl<string | null | undefined>(undefined),
			redirect_url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum CheckoutOptionsPaymentType { CARD_PRESENT = 'CARD_PRESENT', MANUAL_CARD_ENTRY = 'MANUAL_CARD_ENTRY', FELICA_ID = 'FELICA_ID', FELICA_QUICPAY = 'FELICA_QUICPAY', FELICA_TRANSPORTATION_GROUP = 'FELICA_TRANSPORTATION_GROUP', FELICA_ALL = 'FELICA_ALL' }


	/**
	 * Describes a request to complete (capture) a payment using 
	 * [CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment).
	 * By default, payments are set to `autocomplete` immediately after they are created.
	 * To complete payments manually, set `autocomplete` to `false`.
	 */
	export interface CompletePaymentRequest {
	}

	/**
	 * Describes a request to complete (capture) a payment using 
	 * [CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment).
	 * By default, payments are set to `autocomplete` immediately after they are created.
	 * To complete payments manually, set `autocomplete` to `false`.
	 */
	export interface CompletePaymentRequestFormProperties {
	}
	export function CreateCompletePaymentRequestFormGroup() {
		return new FormGroup<CompletePaymentRequestFormProperties>({
		});

	}


	/** Defines the response returned by[CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment). */
	export interface CompletePaymentResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** Represents a payment processed by the Square API. */
		payment?: Payment;
	}

	/** Defines the response returned by[CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment). */
	export interface CompletePaymentResponseFormProperties {
	}
	export function CreateCompletePaymentResponseFormGroup() {
		return new FormGroup<CompletePaymentResponseFormProperties>({
		});

	}


	/** Latitude and longitude coordinates. */
	export interface Coordinates {

		/** The latitude of the coordinate expressed in degrees. */
		latitude?: number | null;

		/** The longitude of the coordinate expressed in degrees. */
		longitude?: number | null;
	}

	/** Latitude and longitude coordinates. */
	export interface CoordinatesFormProperties {

		/** The latitude of the coordinate expressed in degrees. */
		latitude: FormControl<number | null | undefined>,

		/** The longitude of the coordinate expressed in degrees. */
		longitude: FormControl<number | null | undefined>,
	}
	export function CreateCoordinatesFormGroup() {
		return new FormGroup<CoordinatesFormProperties>({
			latitude: new FormControl<number | null | undefined>(undefined),
			longitude: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Indicates the country associated with another entity, such as a business.
	 * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
	 */
	export enum Country { ZZ = 'ZZ', AD = 'AD', AE = 'AE', AF = 'AF', AG = 'AG', AI = 'AI', AL = 'AL', AM = 'AM', AO = 'AO', AQ = 'AQ', AR = 'AR', AS = 'AS', AT = 'AT', AU = 'AU', AW = 'AW', AX = 'AX', AZ = 'AZ', BA = 'BA', BB = 'BB', BD = 'BD', BE = 'BE', BF = 'BF', BG = 'BG', BH = 'BH', BI = 'BI', BJ = 'BJ', BL = 'BL', BM = 'BM', BN = 'BN', BO = 'BO', BQ = 'BQ', BR = 'BR', BS = 'BS', BT = 'BT', BV = 'BV', BW = 'BW', BY = 'BY', BZ = 'BZ', CA = 'CA', CC = 'CC', CD = 'CD', CF = 'CF', CG = 'CG', CH = 'CH', CI = 'CI', CK = 'CK', CL = 'CL', CM = 'CM', CN = 'CN', CO = 'CO', CR = 'CR', CU = 'CU', CV = 'CV', CW = 'CW', CX = 'CX', CY = 'CY', CZ = 'CZ', DE = 'DE', DJ = 'DJ', DK = 'DK', DM = 'DM', DO = 'DO', DZ = 'DZ', EC = 'EC', EE = 'EE', EG = 'EG', EH = 'EH', ER = 'ER', ES = 'ES', ET = 'ET', FI = 'FI', FJ = 'FJ', FK = 'FK', FM = 'FM', FO = 'FO', FR = 'FR', GA = 'GA', GB = 'GB', GD = 'GD', GE = 'GE', GF = 'GF', GG = 'GG', GH = 'GH', GI = 'GI', GL = 'GL', GM = 'GM', GN = 'GN', GP = 'GP', GQ = 'GQ', GR = 'GR', GS = 'GS', GT = 'GT', GU = 'GU', GW = 'GW', GY = 'GY', HK = 'HK', HM = 'HM', HN = 'HN', HR = 'HR', HT = 'HT', HU = 'HU', ID = 'ID', IE = 'IE', IL = 'IL', IM = 'IM', IN = 'IN', IO = 'IO', IQ = 'IQ', IR = 'IR', IS = 'IS', IT = 'IT', JE = 'JE', JM = 'JM', JO = 'JO', JP = 'JP', KE = 'KE', KG = 'KG', KH = 'KH', KI = 'KI', KM = 'KM', KN = 'KN', KP = 'KP', KR = 'KR', KW = 'KW', KY = 'KY', KZ = 'KZ', LA = 'LA', LB = 'LB', LC = 'LC', LI = 'LI', LK = 'LK', LR = 'LR', LS = 'LS', LT = 'LT', LU = 'LU', LV = 'LV', LY = 'LY', MA = 'MA', MC = 'MC', MD = 'MD', ME = 'ME', MF = 'MF', MG = 'MG', MH = 'MH', MK = 'MK', ML = 'ML', MM = 'MM', MN = 'MN', MO = 'MO', MP = 'MP', MQ = 'MQ', MR = 'MR', MS = 'MS', MT = 'MT', MU = 'MU', MV = 'MV', MW = 'MW', MX = 'MX', MY = 'MY', MZ = 'MZ', NA = 'NA', NC = 'NC', NE = 'NE', NF = 'NF', NG = 'NG', NI = 'NI', NL = 'NL', NO = 'NO', NP = 'NP', NR = 'NR', NU = 'NU', NZ = 'NZ', OM = 'OM', PA = 'PA', PE = 'PE', PF = 'PF', PG = 'PG', PH = 'PH', PK = 'PK', PL = 'PL', PM = 'PM', PN = 'PN', PR = 'PR', PS = 'PS', PT = 'PT', PW = 'PW', PY = 'PY', QA = 'QA', RE = 'RE', RO = 'RO', RS = 'RS', RU = 'RU', RW = 'RW', SA = 'SA', SB = 'SB', SC = 'SC', SD = 'SD', SE = 'SE', SG = 'SG', SH = 'SH', SI = 'SI', SJ = 'SJ', SK = 'SK', SL = 'SL', SM = 'SM', SN = 'SN', SO = 'SO', SR = 'SR', SS = 'SS', ST = 'ST', SV = 'SV', SX = 'SX', SY = 'SY', SZ = 'SZ', TC = 'TC', TD = 'TD', TF = 'TF', TG = 'TG', TH = 'TH', TJ = 'TJ', TK = 'TK', TL = 'TL', TM = 'TM', TN = 'TN', TO = 'TO', TR = 'TR', TT = 'TT', TV = 'TV', TW = 'TW', TZ = 'TZ', UA = 'UA', UG = 'UG', UM = 'UM', US = 'US', UY = 'UY', UZ = 'UZ', VA = 'VA', VC = 'VC', VE = 'VE', VG = 'VG', VI = 'VI', VN = 'VN', VU = 'VU', WF = 'WF', WS = 'WS', YE = 'YE', YT = 'YT', ZA = 'ZA', ZM = 'ZM', ZW = 'ZW' }

	export interface CreateBookingRequest {

		/**
		 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		 * at a given location to a requesting customer in one or more appointment segments.
		 * Required
		 */
		booking: Booking;

		/**
		 * A unique key to make this request an idempotent operation.
		 * Max length: 255
		 */
		idempotency_key?: string | null;
	}
	export interface CreateBookingRequestFormProperties {

		/**
		 * A unique key to make this request an idempotent operation.
		 * Max length: 255
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateBookingRequestFormGroup() {
		return new FormGroup<CreateBookingRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}

	export interface CreateBookingResponse {

		/**
		 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		 * at a given location to a requesting customer in one or more appointment segments.
		 */
		booking?: Booking;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface CreateBookingResponseFormProperties {
	}
	export function CreateCreateBookingResponseFormGroup() {
		return new FormGroup<CreateBookingResponseFormProperties>({
		});

	}


	/** A request to create a new `BreakType`. */
	export interface CreateBreakTypeRequest {

		/**
		 * A defined break template that sets an expectation for possible `Break`
		 * instances on a `Shift`.
		 * Required
		 */
		break_type: BreakType;

		/**
		 * A unique string value to ensure the idempotency of the operation.
		 * Max length: 128
		 */
		idempotency_key?: string | null;
	}

	/** A request to create a new `BreakType`. */
	export interface CreateBreakTypeRequestFormProperties {

		/**
		 * A unique string value to ensure the idempotency of the operation.
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateBreakTypeRequestFormGroup() {
		return new FormGroup<CreateBreakTypeRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(128)]),
		});

	}


	/**
	 * The response to the request to create a `BreakType`. The response contains
	 * the created `BreakType` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface CreateBreakTypeResponse {

		/**
		 * A defined break template that sets an expectation for possible `Break`
		 * instances on a `Shift`.
		 */
		break_type?: BreakType;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * The response to the request to create a `BreakType`. The response contains
	 * the created `BreakType` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface CreateBreakTypeResponseFormProperties {
	}
	export function CreateCreateBreakTypeResponseFormGroup() {
		return new FormGroup<CreateBreakTypeResponseFormProperties>({
		});

	}


	/**
	 * Creates a card from the source (nonce, payment id, etc). Accessible via
	 * HTTP requests at POST https://connect.squareup.com/v2/cards
	 */
	export interface CreateCardRequest {

		/**
		 * Represents the payment details of a card to be used for payments. These
		 * details are determined by the payment token generated by Web Payments SDK.
		 * Required
		 */
		card: Card;

		/**
		 * A unique string that identifies this CreateCard request. Keys can be
		 * any valid string and must be unique for every request.
		 * Max: 45 characters
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
		 * Required
		 * Max length: 16384
		 * Min length: 1
		 */
		source_id: string;

		/**
		 * An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		 * Verification tokens encapsulate customer device information and 3-D Secure
		 * challenge results to indicate that Square has verified the buyer identity.
		 * See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
		 */
		verification_token?: string | null;
	}

	/**
	 * Creates a card from the source (nonce, payment id, etc). Accessible via
	 * HTTP requests at POST https://connect.squareup.com/v2/cards
	 */
	export interface CreateCardRequestFormProperties {

		/**
		 * A unique string that identifies this CreateCard request. Keys can be
		 * any valid string and must be unique for every request.
		 * Max: 45 characters
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
		 * Required
		 * Max length: 16384
		 * Min length: 1
		 */
		source_id: FormControl<string | null | undefined>,

		/**
		 * An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		 * Verification tokens encapsulate customer device information and 3-D Secure
		 * challenge results to indicate that Square has verified the buyer identity.
		 * See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
		 */
		verification_token: FormControl<string | null | undefined>,
	}
	export function CreateCreateCardRequestFormGroup() {
		return new FormGroup<CreateCardRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			source_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(16384)]),
			verification_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CreateCard](#endpoint-cards-createcard) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface CreateCardResponse {

		/**
		 * Represents the payment details of a card to be used for payments. These
		 * details are determined by the payment token generated by Web Payments SDK.
		 */
		card?: Card;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CreateCard](#endpoint-cards-createcard) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface CreateCardResponseFormProperties {
	}
	export function CreateCreateCardResponseFormGroup() {
		return new FormGroup<CreateCardResponseFormProperties>({
		});

	}


	/**
	 * Defines the parameters that can be included in the body of
	 * a request to the `CreateCheckout` endpoint.
	 */
	export interface CreateCheckoutRequest {

		/**
		 * The basic primitive of a multi-party transaction. The value is optional.
		 * The transaction facilitated by you can be split from here.
		 * If you provide this value, the `amount_money` value in your `additional_recipients` field
		 * cannot be more than 90% of the `total_money` calculated by Square for your order.
		 * The `location_id` must be a valid seller location where the checkout is occurring.
		 * This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
		 * This field is currently not supported in the Square Sandbox.
		 */
		additional_recipients?: Array<ChargeRequestAdditionalRecipient>;

		/**
		 * If `true`, Square Checkout collects shipping information on your behalf and stores
		 * that information with the transaction information in the Square Seller Dashboard.
		 * Default: `false`.
		 */
		ask_for_shipping_address?: boolean | null;

		/**
		 * A unique string that identifies this checkout among others you have created. It can be
		 * any valid string but must be unique for every order sent to Square Checkout for a given location ID.
		 * The idempotency key is used to avoid processing the same order more than once. If you are
		 * unsure whether a particular checkout was created successfully, you can attempt it again with
		 * the same idempotency key and all the same other parameters without worrying about creating duplicates.
		 * You should use a random number/string generator native to the language
		 * you are working in to generate strings for your idempotency keys.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The email address to display on the Square Checkout confirmation page
		 * and confirmation email that the buyer can use to contact the seller.
		 * If this value is not set, the confirmation page and email display the
		 * primary email address associated with the seller's Square account.
		 * Default: none; only exists if explicitly set.
		 * Max length: 254
		 */
		merchant_support_email?: string | null;

		/**
		 * An optional note to associate with the `checkout` object.
		 * This value cannot exceed 60 characters.
		 * Max length: 60
		 */
		note?: string | null;

		/** Required */
		order: CreateOrderRequest;

		/**
		 * If provided, the buyer's email is prepopulated on the checkout page
		 * as an editable text field.
		 * Default: none; only exists if explicitly set.
		 * Max length: 254
		 */
		pre_populate_buyer_email?: string | null;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		pre_populate_shipping_address?: Address;

		/**
		 * The URL to redirect to after the checkout is completed with `checkoutId`,
		 * `transactionId`, and `referenceId` appended as URL parameters. For example,
		 * if the provided redirect URL is `http://www.example.com/order-complete`, a
		 * successful transaction redirects the customer to:
		 * <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
		 * If you do not provide a redirect URL, Square Checkout displays an order
		 * confirmation page on your behalf; however, it is strongly recommended that
		 * you provide a redirect URL so you can verify the transaction results and
		 * finalize the order through your existing/normal confirmation workflow.
		 * Default: none; only exists if explicitly set.
		 * Max length: 800
		 */
		redirect_url?: string | null;
	}

	/**
	 * Defines the parameters that can be included in the body of
	 * a request to the `CreateCheckout` endpoint.
	 */
	export interface CreateCheckoutRequestFormProperties {

		/**
		 * If `true`, Square Checkout collects shipping information on your behalf and stores
		 * that information with the transaction information in the Square Seller Dashboard.
		 * Default: `false`.
		 */
		ask_for_shipping_address: FormControl<boolean | null | undefined>,

		/**
		 * A unique string that identifies this checkout among others you have created. It can be
		 * any valid string but must be unique for every order sent to Square Checkout for a given location ID.
		 * The idempotency key is used to avoid processing the same order more than once. If you are
		 * unsure whether a particular checkout was created successfully, you can attempt it again with
		 * the same idempotency key and all the same other parameters without worrying about creating duplicates.
		 * You should use a random number/string generator native to the language
		 * you are working in to generate strings for your idempotency keys.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The email address to display on the Square Checkout confirmation page
		 * and confirmation email that the buyer can use to contact the seller.
		 * If this value is not set, the confirmation page and email display the
		 * primary email address associated with the seller's Square account.
		 * Default: none; only exists if explicitly set.
		 * Max length: 254
		 */
		merchant_support_email: FormControl<string | null | undefined>,

		/**
		 * An optional note to associate with the `checkout` object.
		 * This value cannot exceed 60 characters.
		 * Max length: 60
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * If provided, the buyer's email is prepopulated on the checkout page
		 * as an editable text field.
		 * Default: none; only exists if explicitly set.
		 * Max length: 254
		 */
		pre_populate_buyer_email: FormControl<string | null | undefined>,

		/**
		 * The URL to redirect to after the checkout is completed with `checkoutId`,
		 * `transactionId`, and `referenceId` appended as URL parameters. For example,
		 * if the provided redirect URL is `http://www.example.com/order-complete`, a
		 * successful transaction redirects the customer to:
		 * <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
		 * If you do not provide a redirect URL, Square Checkout displays an order
		 * confirmation page on your behalf; however, it is strongly recommended that
		 * you provide a redirect URL so you can verify the transaction results and
		 * finalize the order through your existing/normal confirmation workflow.
		 * Default: none; only exists if explicitly set.
		 * Max length: 800
		 */
		redirect_url: FormControl<string | null | undefined>,
	}
	export function CreateCreateCheckoutRequestFormGroup() {
		return new FormGroup<CreateCheckoutRequestFormProperties>({
			ask_for_shipping_address: new FormControl<boolean | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(192)]),
			merchant_support_email: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(254)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(60)]),
			pre_populate_buyer_email: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(254)]),
			redirect_url: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(800)]),
		});

	}

	export interface CreateOrderRequest {

		/**
		 * A value you specify that uniquely identifies this
		 * order among orders you have created.
		 * If you are unsure whether a particular order was created successfully,
		 * you can try it again with the same idempotency key without
		 * worrying about creating duplicate orders.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * Max length: 192
		 */
		idempotency_key?: string | null;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;
	}
	export interface CreateOrderRequestFormProperties {

		/**
		 * A value you specify that uniquely identifies this
		 * order among orders you have created.
		 * If you are unsure whether a particular order was created successfully,
		 * you can try it again with the same idempotency key without
		 * worrying about creating duplicate orders.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * Max length: 192
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateOrderRequestFormGroup() {
		return new FormGroup<CreateOrderRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateCheckout` endpoint.
	 */
	export interface CreateCheckoutResponse {

		/**
		 * Square Checkout lets merchants accept online payments for supported
		 * payment types using a checkout workflow hosted on squareup.com.
		 */
		checkout?: Checkout;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateCheckout` endpoint.
	 */
	export interface CreateCheckoutResponseFormProperties {
	}
	export function CreateCreateCheckoutResponseFormGroup() {
		return new FormGroup<CreateCheckoutResponseFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the request body of a request
	 * to the `CreateCustomerCard` endpoint.
	 */
	export interface CreateCustomerCardRequest {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		billing_address?: Address;

		/**
		 * A card nonce representing the credit card to link to the customer.
		 * Card nonces are generated by the Square payment form when customers enter
		 * their card information. For more information, see
		 * [Walkthrough: Integrate Square Payments in a Website](https://developer.squareup.com/docs/web-payments/take-card-payment).
		 * __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay)
		 * cannot be used to create a customer card.
		 * Required
		 */
		card_nonce: string;

		/** The full name printed on the credit card. */
		cardholder_name?: string | null;

		/**
		 * An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		 * Verification tokens encapsulate customer device information and 3-D Secure
		 * challenge results to indicate that Square has verified the buyer identity.
		 */
		verification_token?: string | null;
	}

	/**
	 * Defines the fields that are included in the request body of a request
	 * to the `CreateCustomerCard` endpoint.
	 */
	export interface CreateCustomerCardRequestFormProperties {

		/**
		 * A card nonce representing the credit card to link to the customer.
		 * Card nonces are generated by the Square payment form when customers enter
		 * their card information. For more information, see
		 * [Walkthrough: Integrate Square Payments in a Website](https://developer.squareup.com/docs/web-payments/take-card-payment).
		 * __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay)
		 * cannot be used to create a customer card.
		 * Required
		 */
		card_nonce: FormControl<string | null | undefined>,

		/** The full name printed on the credit card. */
		cardholder_name: FormControl<string | null | undefined>,

		/**
		 * An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		 * Verification tokens encapsulate customer device information and 3-D Secure
		 * challenge results to indicate that Square has verified the buyer identity.
		 */
		verification_token: FormControl<string | null | undefined>,
	}
	export function CreateCreateCustomerCardRequestFormGroup() {
		return new FormGroup<CreateCustomerCardRequestFormProperties>({
			card_nonce: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cardholder_name: new FormControl<string | null | undefined>(undefined),
			verification_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateCustomerCard` endpoint.
	 * Either `errors` or `card` is present in a given response (never both).
	 */
	export interface CreateCustomerCardResponse {

		/**
		 * Represents the payment details of a card to be used for payments. These
		 * details are determined by the payment token generated by Web Payments SDK.
		 */
		card?: Card;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateCustomerCard` endpoint.
	 * Either `errors` or `card` is present in a given response (never both).
	 */
	export interface CreateCustomerCardResponseFormProperties {
	}
	export function CreateCreateCustomerCardResponseFormGroup() {
		return new FormGroup<CreateCustomerCardResponseFormProperties>({
		});

	}


	/**
	 * Defines the body parameters that can be included in a request to the
	 * [CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
	 */
	export interface CreateCustomerGroupRequest {

		/**
		 * Represents a group of customer profiles.
		 * Customer groups can be created, be modified, and have their membership defined using
		 * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		 * Required
		 */
		group: CustomerGroup;

		/** The idempotency key for the request. For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency). */
		idempotency_key?: string | null;
	}

	/**
	 * Defines the body parameters that can be included in a request to the
	 * [CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
	 */
	export interface CreateCustomerGroupRequestFormProperties {

		/** The idempotency key for the request. For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency). */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateCustomerGroupRequestFormGroup() {
		return new FormGroup<CreateCustomerGroupRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a group of customer profiles. 
	 * Customer groups can be created, be modified, and have their membership defined using 
	 * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
	 */
	export interface CustomerGroup {

		/** The timestamp when the customer group was created, in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * A unique Square-generated ID for the customer group.
		 * Max length: 255
		 */
		id?: string | null;

		/**
		 * The name of the customer group.
		 * Required
		 */
		name: string;

		/** The timestamp when the customer group was last updated, in RFC 3339 format. */
		updated_at?: string | null;
	}

	/**
	 * Represents a group of customer profiles. 
	 * Customer groups can be created, be modified, and have their membership defined using 
	 * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
	 */
	export interface CustomerGroupFormProperties {

		/** The timestamp when the customer group was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * A unique Square-generated ID for the customer group.
		 * Max length: 255
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The name of the customer group.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The timestamp when the customer group was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateCustomerGroupFormGroup() {
		return new FormGroup<CustomerGroupFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
	 * Either `errors` or `group` is present in a given response (never both).
	 */
	export interface CreateCustomerGroupResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a group of customer profiles.
		 * Customer groups can be created, be modified, and have their membership defined using
		 * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		 */
		group?: CustomerGroup;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
	 * Either `errors` or `group` is present in a given response (never both).
	 */
	export interface CreateCustomerGroupResponseFormProperties {
	}
	export function CreateCreateCustomerGroupResponseFormGroup() {
		return new FormGroup<CreateCustomerGroupResponseFormProperties>({
		});

	}


	/**
	 * Defines the body parameters that can be included in a request to the
	 * `CreateCustomer` endpoint.
	 */
	export interface CreateCustomerRequest {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		address?: Address;

		/**
		 * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		 * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		 * You can also specify this value in `YYYY-MM-DD` format.
		 */
		birthday?: string | null;

		/** A business name associated with the customer profile. */
		company_name?: string | null;

		/** The email address associated with the customer profile. */
		email_address?: string | null;

		/** The family name (that is, the last name) associated with the customer profile. */
		family_name?: string | null;

		/** The given name (that is, the first name) associated with the customer profile. */
		given_name?: string | null;

		/**
		 * The idempotency key for the request.	For more information, see
		 * [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 */
		idempotency_key?: string | null;

		/** A nickname for the customer profile. */
		nickname?: string | null;

		/** A custom note associated with the customer profile. */
		note?: string | null;

		/** The 11-digit phone number associated with the customer profile. */
		phone_number?: string | null;

		/**
		 * An optional second ID used to associate the customer profile with an
		 * entity in another system.
		 */
		reference_id?: string | null;
	}

	/**
	 * Defines the body parameters that can be included in a request to the
	 * `CreateCustomer` endpoint.
	 */
	export interface CreateCustomerRequestFormProperties {

		/**
		 * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		 * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		 * You can also specify this value in `YYYY-MM-DD` format.
		 */
		birthday: FormControl<string | null | undefined>,

		/** A business name associated with the customer profile. */
		company_name: FormControl<string | null | undefined>,

		/** The email address associated with the customer profile. */
		email_address: FormControl<string | null | undefined>,

		/** The family name (that is, the last name) associated with the customer profile. */
		family_name: FormControl<string | null | undefined>,

		/** The given name (that is, the first name) associated with the customer profile. */
		given_name: FormControl<string | null | undefined>,

		/**
		 * The idempotency key for the request.	For more information, see
		 * [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/** A nickname for the customer profile. */
		nickname: FormControl<string | null | undefined>,

		/** A custom note associated with the customer profile. */
		note: FormControl<string | null | undefined>,

		/** The 11-digit phone number associated with the customer profile. */
		phone_number: FormControl<string | null | undefined>,

		/**
		 * An optional second ID used to associate the customer profile with an
		 * entity in another system.
		 */
		reference_id: FormControl<string | null | undefined>,
	}
	export function CreateCreateCustomerRequestFormGroup() {
		return new FormGroup<CreateCustomerRequestFormProperties>({
			birthday: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateCustomer` endpoint.
	 * Either `errors` or `customer` is present in a given response (never both).
	 */
	export interface CreateCustomerResponse {

		/** Represents a Square customer profile in the Customer Directory of a Square seller. */
		customer?: Customer;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateCustomer` endpoint.
	 * Either `errors` or `customer` is present in a given response (never both).
	 */
	export interface CreateCustomerResponseFormProperties {
	}
	export function CreateCreateCustomerResponseFormGroup() {
		return new FormGroup<CreateCustomerResponseFormProperties>({
		});

	}


	/** Represents a Square customer profile in the Customer Directory of a Square seller. */
	export interface Customer {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		address?: Address;

		/**
		 * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		 * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		 */
		birthday?: string | null;

		/**
		 * Payment details of the credit, debit, and gift cards stored on file for the customer profile.
		 * DEPRECATED at version 2021-06-16. Replaced by calling [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) (for credit and debit cards on file)
		 * or [ListGiftCards](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api/list-gift-cards) (for gift cards on file) and including the `customer_id` query parameter.
		 * For more information, see [Migrate to the Cards API and Gift Cards API](https://developer.squareup.com/docs/customers-api/use-the-api/integrate-with-other-services#migrate-customer-cards).
		 */
		cards?: Array<Card>;

		/** A business name associated with the customer profile. */
		company_name?: string | null;

		/** The timestamp when the customer profile was created, in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * A creation source represents the method used to create the
		 * customer profile.
		 */
		creation_source?: string | null;

		/** The email address associated with the customer profile. */
		email_address?: string | null;

		/** The family (i.e., last) name associated with the customer profile. */
		family_name?: string | null;

		/** The given (i.e., first) name associated with the customer profile. */
		given_name?: string | null;

		/** The IDs of customer groups the customer belongs to. */
		group_ids?: Array<string>;

		/** A unique Square-assigned ID for the customer profile. */
		id?: string | null;

		/** A nickname for the customer profile. */
		nickname?: string | null;

		/** A custom note associated with the customer profile. */
		note?: string | null;

		/** The 11-digit phone number associated with the customer profile. */
		phone_number?: string | null;

		/** Represents communication preferences for the customer profile. */
		preferences?: CustomerPreferences;

		/**
		 * An optional second ID used to associate the customer profile with an
		 * entity in another system.
		 */
		reference_id?: string | null;

		/** The IDs of segments the customer belongs to. */
		segment_ids?: Array<string>;

		/** The timestamp when the customer profile was last updated, in RFC 3339 format. */
		updated_at?: string | null;

		/** The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership and cards on file. */
		version?: number | null;
	}

	/** Represents a Square customer profile in the Customer Directory of a Square seller. */
	export interface CustomerFormProperties {

		/**
		 * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		 * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		 */
		birthday: FormControl<string | null | undefined>,

		/** A business name associated with the customer profile. */
		company_name: FormControl<string | null | undefined>,

		/** The timestamp when the customer profile was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * A creation source represents the method used to create the
		 * customer profile.
		 */
		creation_source: FormControl<string | null | undefined>,

		/** The email address associated with the customer profile. */
		email_address: FormControl<string | null | undefined>,

		/** The family (i.e., last) name associated with the customer profile. */
		family_name: FormControl<string | null | undefined>,

		/** The given (i.e., first) name associated with the customer profile. */
		given_name: FormControl<string | null | undefined>,

		/** A unique Square-assigned ID for the customer profile. */
		id: FormControl<string | null | undefined>,

		/** A nickname for the customer profile. */
		nickname: FormControl<string | null | undefined>,

		/** A custom note associated with the customer profile. */
		note: FormControl<string | null | undefined>,

		/** The 11-digit phone number associated with the customer profile. */
		phone_number: FormControl<string | null | undefined>,

		/**
		 * An optional second ID used to associate the customer profile with an
		 * entity in another system.
		 */
		reference_id: FormControl<string | null | undefined>,

		/** The timestamp when the customer profile was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,

		/** The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership and cards on file. */
		version: FormControl<number | null | undefined>,
	}
	export function CreateCustomerFormGroup() {
		return new FormGroup<CustomerFormProperties>({
			birthday: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			creation_source: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents communication preferences for the customer profile. */
	export interface CustomerPreferences {

		/** Indicates whether the customer has unsubscribed from marketing campaign emails. A value of `true` means that the customer chose to opt out of email marketing from the current Square seller or from all Square sellers. This value is read-only from the Customers API. */
		email_unsubscribed?: boolean | null;
	}

	/** Represents communication preferences for the customer profile. */
	export interface CustomerPreferencesFormProperties {

		/** Indicates whether the customer has unsubscribed from marketing campaign emails. A value of `true` means that the customer chose to opt out of email marketing from the current Square seller or from all Square sellers. This value is read-only from the Customers API. */
		email_unsubscribed: FormControl<boolean | null | undefined>,
	}
	export function CreateCustomerPreferencesFormGroup() {
		return new FormGroup<CustomerPreferencesFormProperties>({
			email_unsubscribed: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface CreateDeviceCodeRequest {

		/** Required */
		device_code: DeviceCode;

		/**
		 * A unique string that identifies this CreateDeviceCode request. Keys can
		 * be any valid string but must be unique for every CreateDeviceCode request.
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;
	}
	export interface CreateDeviceCodeRequestFormProperties {

		/**
		 * A unique string that identifies this CreateDeviceCode request. Keys can
		 * be any valid string but must be unique for every CreateDeviceCode request.
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateDeviceCodeRequestFormGroup() {
		return new FormGroup<CreateDeviceCodeRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
		});

	}

	export interface DeviceCode {

		/** The unique code that can be used to login. */
		code?: string | null;

		/** When this DeviceCode was created. Timestamp in RFC 3339 format. */
		created_at?: string | null;

		/** The unique id of the device that used this code. Populated when the device is paired up. */
		device_id?: string | null;

		/** The unique id for this device code. */
		id?: string | null;

		/**
		 * The location assigned to this code.
		 * Max length: 50
		 */
		location_id?: string | null;

		/**
		 * An optional user-defined name for the device code.
		 * Max length: 128
		 */
		name?: string | null;

		/** When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format. */
		pair_by?: string | null;

		/** When this DeviceCode was paired. Timestamp in RFC 3339 format. */
		paired_at?: string | null;

		/**
		 * The targeting product type of the device code.
		 * Required
		 */
		product_type: string;

		/** The pairing status of the device code. */
		status?: string | null;

		/** When this DeviceCode's status was last changed. Timestamp in RFC 3339 format. */
		status_changed_at?: string | null;
	}
	export interface DeviceCodeFormProperties {

		/** The unique code that can be used to login. */
		code: FormControl<string | null | undefined>,

		/** When this DeviceCode was created. Timestamp in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The unique id of the device that used this code. Populated when the device is paired up. */
		device_id: FormControl<string | null | undefined>,

		/** The unique id for this device code. */
		id: FormControl<string | null | undefined>,

		/**
		 * The location assigned to this code.
		 * Max length: 50
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * An optional user-defined name for the device code.
		 * Max length: 128
		 */
		name: FormControl<string | null | undefined>,

		/** When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format. */
		pair_by: FormControl<string | null | undefined>,

		/** When this DeviceCode was paired. Timestamp in RFC 3339 format. */
		paired_at: FormControl<string | null | undefined>,

		/**
		 * The targeting product type of the device code.
		 * Required
		 */
		product_type: FormControl<string | null | undefined>,

		/** The pairing status of the device code. */
		status: FormControl<string | null | undefined>,

		/** When this DeviceCode's status was last changed. Timestamp in RFC 3339 format. */
		status_changed_at: FormControl<string | null | undefined>,
	}
	export function CreateDeviceCodeFormGroup() {
		return new FormGroup<DeviceCodeFormProperties>({
			code: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			device_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(128)]),
			pair_by: new FormControl<string | null | undefined>(undefined),
			paired_at: new FormControl<string | null | undefined>(undefined),
			product_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined),
			status_changed_at: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDeviceCodeResponse {
		device_code?: DeviceCode;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface CreateDeviceCodeResponseFormProperties {
	}
	export function CreateCreateDeviceCodeResponseFormGroup() {
		return new FormGroup<CreateDeviceCodeResponseFormProperties>({
		});

	}


	/** Defines the parameters for a `CreateDisputeEvidenceText` request. */
	export interface CreateDisputeEvidenceTextRequest {

		/**
		 * The evidence string.
		 * Required
		 * Max length: 500
		 * Min length: 1
		 */
		evidence_text: string;

		/** The type of evidence you are uploading. */
		evidence_type?: string | null;

		/**
		 * The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: string;
	}

	/** Defines the parameters for a `CreateDisputeEvidenceText` request. */
	export interface CreateDisputeEvidenceTextRequestFormProperties {

		/**
		 * The evidence string.
		 * Required
		 * Max length: 500
		 * Min length: 1
		 */
		evidence_text: FormControl<string | null | undefined>,

		/** The type of evidence you are uploading. */
		evidence_type: FormControl<string | null | undefined>,

		/**
		 * The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateDisputeEvidenceTextRequestFormGroup() {
		return new FormGroup<CreateDisputeEvidenceTextRequestFormProperties>({
			evidence_text: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(500)]),
			evidence_type: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(45)]),
		});

	}


	/** Defines the fields in a `CreateDisputeEvidenceText` response. */
	export interface CreateDisputeEvidenceTextResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
		evidence?: DisputeEvidence;
	}

	/** Defines the fields in a `CreateDisputeEvidenceText` response. */
	export interface CreateDisputeEvidenceTextResponseFormProperties {
	}
	export function CreateCreateDisputeEvidenceTextResponseFormGroup() {
		return new FormGroup<CreateDisputeEvidenceTextResponseFormProperties>({
		});

	}

	export interface DisputeEvidence {

		/**
		 * The ID of the dispute the evidence is associated with.
		 * Max length: 40
		 * Min length: 1
		 */
		dispute_id?: string | null;

		/** A file to be uploaded as dispute evidence. */
		evidence_file?: DisputeEvidenceFile;

		/**
		 * The Square-generated ID of the evidence.
		 * Max length: 40
		 * Min length: 1
		 */
		evidence_id?: string | null;

		/**
		 * Raw text
		 * Max length: 500
		 * Min length: 1
		 */
		evidence_text?: string | null;

		/** The type of the evidence. */
		evidence_type?: string | null;

		/**
		 * The Square-generated ID of the evidence.
		 * Max length: 40
		 * Min length: 1
		 */
		id?: string | null;

		/**
		 * The time when the next action is due, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		uploaded_at?: string | null;
	}
	export interface DisputeEvidenceFormProperties {

		/**
		 * The ID of the dispute the evidence is associated with.
		 * Max length: 40
		 * Min length: 1
		 */
		dispute_id: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the evidence.
		 * Max length: 40
		 * Min length: 1
		 */
		evidence_id: FormControl<string | null | undefined>,

		/**
		 * Raw text
		 * Max length: 500
		 * Min length: 1
		 */
		evidence_text: FormControl<string | null | undefined>,

		/** The type of the evidence. */
		evidence_type: FormControl<string | null | undefined>,

		/**
		 * The Square-generated ID of the evidence.
		 * Max length: 40
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The time when the next action is due, in RFC 3339 format.
		 * Max length: 40
		 * Min length: 1
		 */
		uploaded_at: FormControl<string | null | undefined>,
	}
	export function CreateDisputeEvidenceFormGroup() {
		return new FormGroup<DisputeEvidenceFormProperties>({
			dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			evidence_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			evidence_text: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(500)]),
			evidence_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			uploaded_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
		});

	}


	/** A file to be uploaded as dispute evidence. */
	export interface DisputeEvidenceFile {

		/**
		 * The file name including the file extension. For example: "receipt.tiff".
		 * Max length: 40
		 * Min length: 1
		 */
		filename?: string | null;

		/**
		 * Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.
		 * Max length: 40
		 * Min length: 1
		 */
		filetype?: string | null;
	}

	/** A file to be uploaded as dispute evidence. */
	export interface DisputeEvidenceFileFormProperties {

		/**
		 * The file name including the file extension. For example: "receipt.tiff".
		 * Max length: 40
		 * Min length: 1
		 */
		filename: FormControl<string | null | undefined>,

		/**
		 * Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.
		 * Max length: 40
		 * Min length: 1
		 */
		filetype: FormControl<string | null | undefined>,
	}
	export function CreateDisputeEvidenceFileFormGroup() {
		return new FormGroup<DisputeEvidenceFileFormProperties>({
			filename: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			filetype: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
		});

	}


	/** A request to create a gift card activity. */
	export interface CreateGiftCardActivityRequest {

		/**
		 * Represents an action performed on a gift card that affects its state or balance.
		 * Required
		 */
		gift_card_activity: GiftCardActivity;

		/**
		 * A unique string that identifies the `CreateGiftCardActivity` request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;
	}

	/** A request to create a gift card activity. */
	export interface CreateGiftCardActivityRequestFormProperties {

		/**
		 * A unique string that identifies the `CreateGiftCardActivity` request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateGiftCardActivityRequestFormGroup() {
		return new FormGroup<CreateGiftCardActivityRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
		});

	}


	/** Represents an action performed on a gift card that affects its state or balance. */
	export interface GiftCardActivity {

		/** Describes a gift card activity of the ACTIVATE type. */
		activate_activity_details?: GiftCardActivityActivate;

		/** Describes a gift card activity of the ADJUST_DECREMENT type. */
		adjust_decrement_activity_details?: GiftCardActivityAdjustDecrement;

		/** Describes a gift card activity of the ADJUST_INCREMENT type. */
		adjust_increment_activity_details?: GiftCardActivityAdjustIncrement;

		/** Describes a gift card activity of the BLOCK type. */
		block_activity_details?: GiftCardActivityBlock;

		/** Describes a gift card activity of the CLEAR_BALANCE type. */
		clear_balance_activity_details?: GiftCardActivityClearBalance;

		/** The timestamp when the gift card activity was created, in RFC 3339 format. */
		created_at?: string | null;

		/** Describes a gift card activity of the DEACTIVATE type. */
		deactivate_activity_details?: GiftCardActivityDeactivate;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		gift_card_balance_money?: Money;

		/** The gift card GAN. The GAN is not required if `gift_card_id` is present. */
		gift_card_gan?: string | null;

		/** The gift card ID. The ID is not required if a GAN is present. */
		gift_card_id?: string | null;

		/** The unique ID of the gift card activity. */
		id?: string | null;

		/**
		 * Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER
		 * (a third-party gift card).
		 */
		import_activity_details?: GiftCardActivityImport;

		/** Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER */
		import_reversal_activity_details?: GiftCardActivityImportReversal;

		/** Present only when `GiftCardActivityType` is LOAD. */
		load_activity_details?: GiftCardActivityLoad;

		/**
		 * The ID of the location at which the activity occurred.
		 * Required
		 */
		location_id: string;

		/** Present only when `GiftCardActivityType` is REDEEM. */
		redeem_activity_details?: GiftCardActivityRedeem;

		/** Present only when `GiftCardActivityType` is REFUND. */
		refund_activity_details?: GiftCardActivityRefund;

		/** Required */
		type: Type;

		/** Present only when `GiftCardActivityType` is UNBLOCK. */
		unblock_activity_details?: GiftCardActivityUnblock;

		/** Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND. */
		unlinked_activity_refund_activity_details?: GiftCardActivityUnlinkedActivityRefund;
	}

	/** Represents an action performed on a gift card that affects its state or balance. */
	export interface GiftCardActivityFormProperties {

		/** The timestamp when the gift card activity was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The gift card GAN. The GAN is not required if `gift_card_id` is present. */
		gift_card_gan: FormControl<string | null | undefined>,

		/** The gift card ID. The ID is not required if a GAN is present. */
		gift_card_id: FormControl<string | null | undefined>,

		/** The unique ID of the gift card activity. */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the location at which the activity occurred.
		 * Required
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateGiftCardActivityFormGroup() {
		return new FormGroup<GiftCardActivityFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			gift_card_gan: new FormControl<string | null | undefined>(undefined),
			gift_card_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Describes a gift card activity of the ACTIVATE type. */
	export interface GiftCardActivityActivate {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * Required if your application does not use the Square Orders API.
		 * This is a list of client-provided payment instrument IDs.
		 * Square uses this information to perform compliance checks.
		 * If you use the Square Orders API, Square has the necessary instrument IDs to perform necessary
		 * compliance checks.
		 */
		buyer_payment_instrument_ids?: Array<string>;

		/**
		 * The `line_item_uid` of the gift card line item in an order.
		 * This is required if your application uses the Square Orders API.
		 */
		line_item_uid?: string | null;

		/**
		 * The ID of the order associated with the activity.
		 * This is required if your application uses the Square Orders API.
		 */
		order_id?: string | null;

		/**
		 * If your application does not use the Square Orders API, you can optionally use this field
		 * to associate the gift card activity with a client-side entity.
		 */
		reference_id?: string | null;
	}

	/** Describes a gift card activity of the ACTIVATE type. */
	export interface GiftCardActivityActivateFormProperties {

		/**
		 * The `line_item_uid` of the gift card line item in an order.
		 * This is required if your application uses the Square Orders API.
		 */
		line_item_uid: FormControl<string | null | undefined>,

		/**
		 * The ID of the order associated with the activity.
		 * This is required if your application uses the Square Orders API.
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * If your application does not use the Square Orders API, you can optionally use this field
		 * to associate the gift card activity with a client-side entity.
		 */
		reference_id: FormControl<string | null | undefined>,
	}
	export function CreateGiftCardActivityActivateFormGroup() {
		return new FormGroup<GiftCardActivityActivateFormProperties>({
			line_item_uid: new FormControl<string | null | undefined>(undefined),
			order_id: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes a gift card activity of the ADJUST_DECREMENT type. */
	export interface GiftCardActivityAdjustDecrement {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/** Required */
		reason: Reason;
	}

	/** Describes a gift card activity of the ADJUST_DECREMENT type. */
	export interface GiftCardActivityAdjustDecrementFormProperties {
	}
	export function CreateGiftCardActivityAdjustDecrementFormGroup() {
		return new FormGroup<GiftCardActivityAdjustDecrementFormProperties>({
		});

	}


	/** Describes a gift card activity of the ADJUST_INCREMENT type. */
	export interface GiftCardActivityAdjustIncrement {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/** Required */
		reason: Reason;
	}

	/** Describes a gift card activity of the ADJUST_INCREMENT type. */
	export interface GiftCardActivityAdjustIncrementFormProperties {
	}
	export function CreateGiftCardActivityAdjustIncrementFormGroup() {
		return new FormGroup<GiftCardActivityAdjustIncrementFormProperties>({
		});

	}


	/** Describes a gift card activity of the BLOCK type. */
	export interface GiftCardActivityBlock {

		/** Required */
		reason: Reason;
	}

	/** Describes a gift card activity of the BLOCK type. */
	export interface GiftCardActivityBlockFormProperties {
	}
	export function CreateGiftCardActivityBlockFormGroup() {
		return new FormGroup<GiftCardActivityBlockFormProperties>({
		});

	}


	/** Describes a gift card activity of the CLEAR_BALANCE type. */
	export interface GiftCardActivityClearBalance {

		/** Required */
		reason: Reason;
	}

	/** Describes a gift card activity of the CLEAR_BALANCE type. */
	export interface GiftCardActivityClearBalanceFormProperties {
	}
	export function CreateGiftCardActivityClearBalanceFormGroup() {
		return new FormGroup<GiftCardActivityClearBalanceFormProperties>({
		});

	}


	/** Describes a gift card activity of the DEACTIVATE type. */
	export interface GiftCardActivityDeactivate {

		/** Required */
		reason: Reason;
	}

	/** Describes a gift card activity of the DEACTIVATE type. */
	export interface GiftCardActivityDeactivateFormProperties {
	}
	export function CreateGiftCardActivityDeactivateFormGroup() {
		return new FormGroup<GiftCardActivityDeactivateFormProperties>({
		});

	}


	/**
	 * Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER 
	 * (a third-party gift card).
	 */
	export interface GiftCardActivityImport {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;
	}

	/**
	 * Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER 
	 * (a third-party gift card).
	 */
	export interface GiftCardActivityImportFormProperties {
	}
	export function CreateGiftCardActivityImportFormGroup() {
		return new FormGroup<GiftCardActivityImportFormProperties>({
		});

	}


	/** Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER */
	export interface GiftCardActivityImportReversal {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;
	}

	/** Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER */
	export interface GiftCardActivityImportReversalFormProperties {
	}
	export function CreateGiftCardActivityImportReversalFormGroup() {
		return new FormGroup<GiftCardActivityImportReversalFormProperties>({
		});

	}


	/** Present only when `GiftCardActivityType` is LOAD. */
	export interface GiftCardActivityLoad {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * If you are not using the Orders API, this field is required because it is used to identify a buyer
		 * to perform compliance checks.
		 */
		buyer_payment_instrument_ids?: Array<string>;

		/**
		 * The `line_item_uid` of the gift card’s line item in the order associated with the activity.
		 * It is populated along with `order_id` and is required if using the Square Orders API.
		 */
		line_item_uid?: string | null;

		/**
		 * The `order_id` of the order associated with the activity.
		 * It is populated along with `line_item_uid` and is required if using the Square Orders API.
		 */
		order_id?: string | null;

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Orders
		 * API is not being used.
		 */
		reference_id?: string | null;
	}

	/** Present only when `GiftCardActivityType` is LOAD. */
	export interface GiftCardActivityLoadFormProperties {

		/**
		 * The `line_item_uid` of the gift card’s line item in the order associated with the activity.
		 * It is populated along with `order_id` and is required if using the Square Orders API.
		 */
		line_item_uid: FormControl<string | null | undefined>,

		/**
		 * The `order_id` of the order associated with the activity.
		 * It is populated along with `line_item_uid` and is required if using the Square Orders API.
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Orders
		 * API is not being used.
		 */
		reference_id: FormControl<string | null | undefined>,
	}
	export function CreateGiftCardActivityLoadFormGroup() {
		return new FormGroup<GiftCardActivityLoadFormProperties>({
			line_item_uid: new FormControl<string | null | undefined>(undefined),
			order_id: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Present only when `GiftCardActivityType` is REDEEM. */
	export interface GiftCardActivityRedeem {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * When the Square Payments API is used, Redeem is not called on the Gift Cards API.
		 * However, when Square reads a Redeem activity from the Gift Cards API, developers need to know the
		 * associated `payment_id`.
		 */
		payment_id?: string | null;

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Orders
		 * API is not being used.
		 */
		reference_id?: string | null;
	}

	/** Present only when `GiftCardActivityType` is REDEEM. */
	export interface GiftCardActivityRedeemFormProperties {

		/**
		 * When the Square Payments API is used, Redeem is not called on the Gift Cards API.
		 * However, when Square reads a Redeem activity from the Gift Cards API, developers need to know the
		 * associated `payment_id`.
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Orders
		 * API is not being used.
		 */
		reference_id: FormControl<string | null | undefined>,
	}
	export function CreateGiftCardActivityRedeemFormGroup() {
		return new FormGroup<GiftCardActivityRedeemFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Present only when `GiftCardActivityType` is REFUND. */
	export interface GiftCardActivityRefund {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		amount_money?: Money;

		/**
		 * When the Square Payments API is used, Refund is not called on the Gift Cards API.
		 * However, when Square reads a Refund activity from the Gift Cards API, the developer needs to know the
		 * ID of the payment (made using this gift card) that is being refunded.
		 */
		payment_id?: string | null;

		/**
		 * The ID for the Redeem activity that needs to be refunded. Hence, the activity it
		 * refers to has to be of the REDEEM type.
		 * Required
		 */
		redeem_activity_id: string;

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Orders
		 * API is not being used.
		 */
		reference_id?: string | null;
	}

	/** Present only when `GiftCardActivityType` is REFUND. */
	export interface GiftCardActivityRefundFormProperties {

		/**
		 * When the Square Payments API is used, Refund is not called on the Gift Cards API.
		 * However, when Square reads a Refund activity from the Gift Cards API, the developer needs to know the
		 * ID of the payment (made using this gift card) that is being refunded.
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * The ID for the Redeem activity that needs to be refunded. Hence, the activity it
		 * refers to has to be of the REDEEM type.
		 * Required
		 */
		redeem_activity_id: FormControl<string | null | undefined>,

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Orders
		 * API is not being used.
		 */
		reference_id: FormControl<string | null | undefined>,
	}
	export function CreateGiftCardActivityRefundFormGroup() {
		return new FormGroup<GiftCardActivityRefundFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined),
			redeem_activity_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Present only when `GiftCardActivityType` is UNBLOCK. */
	export interface GiftCardActivityUnblock {

		/** Required */
		reason: Reason;
	}

	/** Present only when `GiftCardActivityType` is UNBLOCK. */
	export interface GiftCardActivityUnblockFormProperties {
	}
	export function CreateGiftCardActivityUnblockFormGroup() {
		return new FormGroup<GiftCardActivityUnblockFormProperties>({
		});

	}


	/** Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND. */
	export interface GiftCardActivityUnlinkedActivityRefund {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * When using the Square Payments API, the ID of the payment that was refunded to this gift
		 * card.
		 */
		payment_id?: string | null;

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Payments
		 * API is not being used.
		 */
		reference_id?: string | null;
	}

	/** Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND. */
	export interface GiftCardActivityUnlinkedActivityRefundFormProperties {

		/**
		 * When using the Square Payments API, the ID of the payment that was refunded to this gift
		 * card.
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A client-specified ID to associate an entity, in another system, with this gift card
		 * activity. This can be used to track the order or payment related information when the Square Payments
		 * API is not being used.
		 */
		reference_id: FormControl<string | null | undefined>,
	}
	export function CreateGiftCardActivityUnlinkedActivityRefundFormGroup() {
		return new FormGroup<GiftCardActivityUnlinkedActivityRefundFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A response that contains a `GiftCardActivity` that was created.
	 * The response might contain a set of `Error` objects if the request resulted in errors.
	 */
	export interface CreateGiftCardActivityResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents an action performed on a gift card that affects its state or balance. */
		gift_card_activity?: GiftCardActivity;
	}

	/**
	 * A response that contains a `GiftCardActivity` that was created.
	 * The response might contain a set of `Error` objects if the request resulted in errors.
	 */
	export interface CreateGiftCardActivityResponseFormProperties {
	}
	export function CreateCreateGiftCardActivityResponseFormGroup() {
		return new FormGroup<CreateGiftCardActivityResponseFormProperties>({
		});

	}


	/** A request to create a gift card. */
	export interface CreateGiftCardRequest {

		/**
		 * Represents a Square gift card.
		 * Required
		 */
		gift_card: GiftCard;

		/**
		 * A unique string that identifies the `CreateGiftCard` request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The location ID where the gift card that will be created should be registered.
		 * Required
		 * Min length: 1
		 */
		location_id: string;
	}

	/** A request to create a gift card. */
	export interface CreateGiftCardRequestFormProperties {

		/**
		 * A unique string that identifies the `CreateGiftCard` request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The location ID where the gift card that will be created should be registered.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateCreateGiftCardRequestFormGroup() {
		return new FormGroup<CreateGiftCardRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Represents a Square gift card. */
	export interface GiftCard {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		balance_money?: Money;

		/**
		 * The timestamp when the gift card was created, in RFC 3339 format.
		 * In the case of a digital gift card, it is the time when you create a card
		 * (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).
		 * In the case of a plastic gift card, it is the time when Square associates the card with the
		 * seller at the time of activation.
		 */
		created_at?: string | null;

		/** The IDs of the customers to whom this gift card is linked. */
		customer_ids?: Array<string>;

		/** The gift card account number. */
		gan?: string | null;
		gan_source?: GANSource;

		/** The Square-assigned ID of the gift card. */
		id?: string | null;
		state?: Status;

		/** Required */
		type: Type;
	}

	/** Represents a Square gift card. */
	export interface GiftCardFormProperties {

		/**
		 * The timestamp when the gift card was created, in RFC 3339 format.
		 * In the case of a digital gift card, it is the time when you create a card
		 * (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).
		 * In the case of a plastic gift card, it is the time when Square associates the card with the
		 * seller at the time of activation.
		 */
		created_at: FormControl<string | null | undefined>,

		/** The gift card account number. */
		gan: FormControl<string | null | undefined>,

		/** The Square-assigned ID of the gift card. */
		id: FormControl<string | null | undefined>,
	}
	export function CreateGiftCardFormGroup() {
		return new FormGroup<GiftCardFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			gan: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A response that contains a `GiftCard`. The response might contain a set of `Error` objects if the request
	 * resulted in errors.
	 */
	export interface CreateGiftCardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a Square gift card. */
		gift_card?: GiftCard;
	}

	/**
	 * A response that contains a `GiftCard`. The response might contain a set of `Error` objects if the request
	 * resulted in errors.
	 */
	export interface CreateGiftCardResponseFormProperties {
	}
	export function CreateCreateGiftCardResponseFormGroup() {
		return new FormGroup<CreateGiftCardResponseFormProperties>({
		});

	}


	/** Describes a `CreateInvoice` request. */
	export interface CreateInvoiceRequest {

		/**
		 * A unique string that identifies the `CreateInvoice` request. If you do not
		 * provide `idempotency_key` (or provide an empty string as the value), the endpoint
		 * treats each request as independent.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Max length: 128
		 */
		idempotency_key?: string | null;

		/**
		 * Stores information about an invoice. You use the Invoices API to create and manage
		 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		 * Required
		 */
		invoice: Invoice;
	}

	/** Describes a `CreateInvoice` request. */
	export interface CreateInvoiceRequestFormProperties {

		/**
		 * A unique string that identifies the `CreateInvoice` request. If you do not
		 * provide `idempotency_key` (or provide an empty string as the value), the endpoint
		 * treats each request as independent.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateInvoiceRequestFormGroup() {
		return new FormGroup<CreateInvoiceRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(128)]),
		});

	}


	/** The response returned by the `CreateInvoice` request. */
	export interface CreateInvoiceResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Stores information about an invoice. You use the Invoices API to create and manage
		 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		 */
		invoice?: Invoice;
	}

	/** The response returned by the `CreateInvoice` request. */
	export interface CreateInvoiceResponseFormProperties {
	}
	export function CreateCreateInvoiceResponseFormGroup() {
		return new FormGroup<CreateInvoiceResponseFormProperties>({
		});

	}


	/** Request object for the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint. */
	export interface CreateLocationRequest {
		location?: Location;
	}

	/** Request object for the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint. */
	export interface CreateLocationRequestFormProperties {
	}
	export function CreateCreateLocationRequestFormGroup() {
		return new FormGroup<CreateLocationRequestFormProperties>({
		});

	}

	export interface Location {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		address?: Address;

		/**
		 * The email of the location.
		 * This email is visible to the customers of the location.
		 * For example, the email appears on customer receipts.
		 * For example, `help&#64;squareup.com`.
		 */
		business_email?: string | null;

		/** Represents the hours of operation for a business location. */
		business_hours?: BusinessHours;

		/**
		 * The business name of the location
		 * This is the name visible to the customers of the location.
		 * For example, this name appears on customer receipts.
		 */
		business_name?: string | null;

		/**
		 * The Square features that are enabled for the location.
		 * See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.
		 */
		capabilities?: Array<string>;

		/** Latitude and longitude coordinates. */
		coordinates?: Coordinates;

		/**
		 * The country of the location, in ISO 3166-1-alpha-2 format.
		 * See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.
		 */
		country?: string | null;

		/**
		 * The time when the location was created, in RFC 3339 format.
		 * For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
		 */
		created_at?: string | null;

		/**
		 * The currency used for all transactions at this location,
		 * in ISO 4217 format.
		 * See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
		 */
		currency?: string | null;

		/** The description of the location. */
		description?: string | null;

		/** The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`. */
		facebook_url?: string | null;

		/**
		 * The URL of a full-format logo image for the location. The Seller must choose this logo in the
		 * Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
		 * that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater
		 * and is recommended to be at least 1280x648 pixels.
		 */
		full_format_logo_url?: string | null;

		/** The Square-issued ID of the location. */
		id?: string | null;

		/** The Instagram username of the location without the '&#64;' symbol. For example, `square`. */
		instagram_username?: string | null;

		/**
		 * The language associated with the location, in
		 * [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
		 * For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).
		 */
		language_code?: string | null;

		/**
		 * The URL of the logo image for the location. The Seller must choose this logo in the Seller
		 * dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
		 * that Square generates on behalf of the Seller. This image should have an aspect ratio
		 * close to 1:1 and is recommended to be at least 200x200 pixels.
		 */
		logo_url?: string | null;

		/**
		 * The merchant category code (MCC) of the location, as standardized by ISO 18245.
		 * The MCC describes the kind of goods or services sold at the location.
		 */
		mcc?: string | null;

		/** The ID of the merchant that owns the location. */
		merchant_id?: string | null;

		/**
		 * The name of the location.
		 * This information appears in the dashboard as the nickname.
		 * A location name must be unique within a seller account.
		 */
		name?: string | null;

		/** The phone number of the location in human readable format. For example, `+353 80 0 098 8099`. */
		phone_number?: string | null;

		/** The URL of the Point of Sale background image for the location. */
		pos_background_url?: string | null;

		/** The status of the location, either active or inactive. */
		status?: string | null;

		/** The tax IDs that a Location is operating under. */
		tax_ids?: TaxIds;

		/**
		 * The [IANA Timezone](https://www.iana.org/time-zones) identifier for
		 * the timezone of the location.
		 */
		timezone?: string | null;

		/** The Twitter username of the location without the '&#64;' symbol. For example, `Square`. */
		twitter_username?: string | null;

		/** The type of the location, either physical or mobile. */
		type?: string | null;

		/** The website URL of the location.  For example, `https://squareup.com`. */
		website_url?: string | null;
	}
	export interface LocationFormProperties {

		/**
		 * The email of the location.
		 * This email is visible to the customers of the location.
		 * For example, the email appears on customer receipts.
		 * For example, `help&#64;squareup.com`.
		 */
		business_email: FormControl<string | null | undefined>,

		/**
		 * The business name of the location
		 * This is the name visible to the customers of the location.
		 * For example, this name appears on customer receipts.
		 */
		business_name: FormControl<string | null | undefined>,

		/**
		 * The country of the location, in ISO 3166-1-alpha-2 format.
		 * See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The time when the location was created, in RFC 3339 format.
		 * For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The currency used for all transactions at this location,
		 * in ISO 4217 format.
		 * See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
		 */
		currency: FormControl<string | null | undefined>,

		/** The description of the location. */
		description: FormControl<string | null | undefined>,

		/** The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`. */
		facebook_url: FormControl<string | null | undefined>,

		/**
		 * The URL of a full-format logo image for the location. The Seller must choose this logo in the
		 * Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
		 * that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater
		 * and is recommended to be at least 1280x648 pixels.
		 */
		full_format_logo_url: FormControl<string | null | undefined>,

		/** The Square-issued ID of the location. */
		id: FormControl<string | null | undefined>,

		/** The Instagram username of the location without the '&#64;' symbol. For example, `square`. */
		instagram_username: FormControl<string | null | undefined>,

		/**
		 * The language associated with the location, in
		 * [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
		 * For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).
		 */
		language_code: FormControl<string | null | undefined>,

		/**
		 * The URL of the logo image for the location. The Seller must choose this logo in the Seller
		 * dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
		 * that Square generates on behalf of the Seller. This image should have an aspect ratio
		 * close to 1:1 and is recommended to be at least 200x200 pixels.
		 */
		logo_url: FormControl<string | null | undefined>,

		/**
		 * The merchant category code (MCC) of the location, as standardized by ISO 18245.
		 * The MCC describes the kind of goods or services sold at the location.
		 */
		mcc: FormControl<string | null | undefined>,

		/** The ID of the merchant that owns the location. */
		merchant_id: FormControl<string | null | undefined>,

		/**
		 * The name of the location.
		 * This information appears in the dashboard as the nickname.
		 * A location name must be unique within a seller account.
		 */
		name: FormControl<string | null | undefined>,

		/** The phone number of the location in human readable format. For example, `+353 80 0 098 8099`. */
		phone_number: FormControl<string | null | undefined>,

		/** The URL of the Point of Sale background image for the location. */
		pos_background_url: FormControl<string | null | undefined>,

		/** The status of the location, either active or inactive. */
		status: FormControl<string | null | undefined>,

		/**
		 * The [IANA Timezone](https://www.iana.org/time-zones) identifier for
		 * the timezone of the location.
		 */
		timezone: FormControl<string | null | undefined>,

		/** The Twitter username of the location without the '&#64;' symbol. For example, `Square`. */
		twitter_username: FormControl<string | null | undefined>,

		/** The type of the location, either physical or mobile. */
		type: FormControl<string | null | undefined>,

		/** The website URL of the location.  For example, `https://squareup.com`. */
		website_url: FormControl<string | null | undefined>,
	}
	export function CreateLocationFormGroup() {
		return new FormGroup<LocationFormProperties>({
			business_email: new FormControl<string | null | undefined>(undefined),
			business_name: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			currency: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			facebook_url: new FormControl<string | null | undefined>(undefined),
			full_format_logo_url: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			instagram_username: new FormControl<string | null | undefined>(undefined),
			language_code: new FormControl<string | null | undefined>(undefined),
			logo_url: new FormControl<string | null | undefined>(undefined),
			mcc: new FormControl<string | null | undefined>(undefined),
			merchant_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			pos_background_url: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			twitter_username: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			website_url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The tax IDs that a Location is operating under. */
	export interface TaxIds {

		/**
		 * The EU VAT number for this location. For example, "IE3426675K".
		 * If the EU VAT number is present, it is well-formed and has been
		 * validated with VIES, the VAT Information Exchange System.
		 */
		eu_vat?: string | null;

		/**
		 * The French government uses the NAF (Nomenclature des Activités Françaises) to display and
		 * track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code.
		 * For example, 6910Z.
		 */
		fr_naf?: string | null;

		/**
		 * The SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Etablissements)
		 * number is a 14 digits code issued by the French INSEE. For example, "39922799000021".
		 */
		fr_siret?: string | null;
	}

	/** The tax IDs that a Location is operating under. */
	export interface TaxIdsFormProperties {

		/**
		 * The EU VAT number for this location. For example, "IE3426675K".
		 * If the EU VAT number is present, it is well-formed and has been
		 * validated with VIES, the VAT Information Exchange System.
		 */
		eu_vat: FormControl<string | null | undefined>,

		/**
		 * The French government uses the NAF (Nomenclature des Activités Françaises) to display and
		 * track economic statistical data. This is also called the APE (Activite Principale de l’Entreprise) code.
		 * For example, 6910Z.
		 */
		fr_naf: FormControl<string | null | undefined>,

		/**
		 * The SIRET (Système d'Identification du Répertoire des Entreprises et de leurs Etablissements)
		 * number is a 14 digits code issued by the French INSEE. For example, "39922799000021".
		 */
		fr_siret: FormControl<string | null | undefined>,
	}
	export function CreateTaxIdsFormGroup() {
		return new FormGroup<TaxIdsFormProperties>({
			eu_vat: new FormControl<string | null | undefined>(undefined),
			fr_naf: new FormControl<string | null | undefined>(undefined),
			fr_siret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response object returned by the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint. */
	export interface CreateLocationResponse {

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
		location?: Location;
	}

	/** Response object returned by the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint. */
	export interface CreateLocationResponseFormProperties {
	}
	export function CreateCreateLocationResponseFormGroup() {
		return new FormGroup<CreateLocationResponseFormProperties>({
		});

	}


	/** A request to create a new loyalty account. */
	export interface CreateLoyaltyAccountRequest {

		/**
		 * A unique string that identifies this `CreateLoyaltyAccount` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * Describes a loyalty account. For more information, see
		 * [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
		 * Required
		 */
		loyalty_account: LoyaltyAccount;
	}

	/** A request to create a new loyalty account. */
	export interface CreateLoyaltyAccountRequestFormProperties {

		/**
		 * A unique string that identifies this `CreateLoyaltyAccount` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateLoyaltyAccountRequestFormGroup() {
		return new FormGroup<CreateLoyaltyAccountRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
		});

	}


	/**
	 * Describes a loyalty account. For more information, see
	 * [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
	 */
	export interface LoyaltyAccount {

		/**
		 * The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.
		 * Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
		 */
		balance?: number | null;

		/** The timestamp when the loyalty account was created, in RFC 3339 format. */
		created_at?: string | null;

		/** The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account. */
		customer_id?: string | null;

		/** The timestamp when enrollment occurred, in RFC 3339 format. */
		enrolled_at?: string | null;

		/**
		 * The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.
		 * The total number of points in this field equals the number of points in the `balance` field.
		 */
		expiring_point_deadlines?: Array<LoyaltyAccountExpiringPointDeadline>;

		/**
		 * The Square-assigned ID of the loyalty account.
		 * Max length: 36
		 */
		id?: string | null;

		/**
		 * The total points accrued during the lifetime of the account.
		 * Minimum: 0
		 */
		lifetime_points?: number | null;

		/**
		 * Represents the mapping that associates a loyalty account with a buyer.
		 * Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see
		 * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
		 */
		mapping?: LoyaltyAccountMapping;

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		program_id: string;

		/** The timestamp when the loyalty account was last updated, in RFC 3339 format. */
		updated_at?: string | null;
	}

	/**
	 * Describes a loyalty account. For more information, see
	 * [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
	 */
	export interface LoyaltyAccountFormProperties {

		/**
		 * The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.
		 * Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
		 */
		balance: FormControl<number | null | undefined>,

		/** The timestamp when the loyalty account was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account. */
		customer_id: FormControl<string | null | undefined>,

		/** The timestamp when enrollment occurred, in RFC 3339 format. */
		enrolled_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the loyalty account.
		 * Max length: 36
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The total points accrued during the lifetime of the account.
		 * Minimum: 0
		 */
		lifetime_points: FormControl<number | null | undefined>,

		/**
		 * The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		program_id: FormControl<string | null | undefined>,

		/** The timestamp when the loyalty account was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyAccountFormGroup() {
		return new FormGroup<LoyaltyAccountFormProperties>({
			balance: new FormControl<number | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			customer_id: new FormControl<string | null | undefined>(undefined),
			enrolled_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
			lifetime_points: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			program_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a set of points for a loyalty account that are scheduled to expire on a specific date. */
	export interface LoyaltyAccountExpiringPointDeadline {

		/**
		 * The timestamp of when the points are scheduled to expire, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		expires_at: string;

		/**
		 * The number of points scheduled to expire at the `expires_at` timestamp.
		 * Required
		 */
		points: number;
	}

	/** Represents a set of points for a loyalty account that are scheduled to expire on a specific date. */
	export interface LoyaltyAccountExpiringPointDeadlineFormProperties {

		/**
		 * The timestamp of when the points are scheduled to expire, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		expires_at: FormControl<string | null | undefined>,

		/**
		 * The number of points scheduled to expire at the `expires_at` timestamp.
		 * Required
		 */
		points: FormControl<number | null | undefined>,
	}
	export function CreateLoyaltyAccountExpiringPointDeadlineFormGroup() {
		return new FormGroup<LoyaltyAccountExpiringPointDeadlineFormProperties>({
			expires_at: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			points: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Represents the mapping that associates a loyalty account with a buyer. 
	 * Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see 
	 * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
	 */
	export interface LoyaltyAccountMapping {

		/** The timestamp when the mapping was created, in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * The Square-assigned ID of the mapping.
		 * Max length: 36
		 */
		id?: string | null;

		/** The phone number of the buyer, in E.164 format. For example, "+14155551111". */
		phone_number?: string | null;
	}

	/**
	 * Represents the mapping that associates a loyalty account with a buyer. 
	 * Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see 
	 * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
	 */
	export interface LoyaltyAccountMappingFormProperties {

		/** The timestamp when the mapping was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the mapping.
		 * Max length: 36
		 */
		id: FormControl<string | null | undefined>,

		/** The phone number of the buyer, in E.164 format. For example, "+14155551111". */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyAccountMappingFormGroup() {
		return new FormGroup<LoyaltyAccountMappingFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A response that includes loyalty account created. */
	export interface CreateLoyaltyAccountResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Describes a loyalty account. For more information, see
		 * [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
		 */
		loyalty_account?: LoyaltyAccount;
	}

	/** A response that includes loyalty account created. */
	export interface CreateLoyaltyAccountResponseFormProperties {
	}
	export function CreateCreateLoyaltyAccountResponseFormGroup() {
		return new FormGroup<CreateLoyaltyAccountResponseFormProperties>({
		});

	}


	/** A request to create a loyalty reward. */
	export interface CreateLoyaltyRewardRequest {

		/**
		 * A unique string that identifies this `CreateLoyaltyReward` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
		 * Required
		 */
		reward: LoyaltyReward;
	}

	/** A request to create a loyalty reward. */
	export interface CreateLoyaltyRewardRequestFormProperties {

		/**
		 * A unique string that identifies this `CreateLoyaltyReward` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateLoyaltyRewardRequestFormGroup() {
		return new FormGroup<CreateLoyaltyRewardRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
		});

	}


	/** Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards). */
	export interface LoyaltyReward {

		/** The timestamp when the reward was created, in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * The Square-assigned ID of the loyalty reward.
		 * Max length: 36
		 */
		id?: string | null;

		/**
		 * The Square-assigned ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the reward belongs.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_account_id: string;

		/** The Square-assigned ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) to which the reward is attached. */
		order_id?: string | null;

		/**
		 * The number of loyalty points used for the reward.
		 * Minimum: 1
		 */
		points?: number | null;

		/** The timestamp when the reward was redeemed, in RFC 3339 format. */
		redeemed_at?: string | null;

		/**
		 * The Square-assigned ID of the [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) used to create the reward.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		reward_tier_id: string;

		/** The status of a loyalty reward. */
		status?: string | null;

		/** The timestamp when the reward was last updated, in RFC 3339 format. */
		updated_at?: string | null;
	}

	/** Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards). */
	export interface LoyaltyRewardFormProperties {

		/** The timestamp when the reward was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the loyalty reward.
		 * Max length: 36
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the reward belongs.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		loyalty_account_id: FormControl<string | null | undefined>,

		/** The Square-assigned ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) to which the reward is attached. */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The number of loyalty points used for the reward.
		 * Minimum: 1
		 */
		points: FormControl<number | null | undefined>,

		/** The timestamp when the reward was redeemed, in RFC 3339 format. */
		redeemed_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) used to create the reward.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		reward_tier_id: FormControl<string | null | undefined>,

		/** The status of a loyalty reward. */
		status: FormControl<string | null | undefined>,

		/** The timestamp when the reward was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyRewardFormGroup() {
		return new FormGroup<LoyaltyRewardFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
			loyalty_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			order_id: new FormControl<string | null | undefined>(undefined),
			points: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
			redeemed_at: new FormControl<string | null | undefined>(undefined),
			reward_tier_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			status: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A response that includes the loyalty reward created. */
	export interface CreateLoyaltyRewardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards). */
		reward?: LoyaltyReward;
	}

	/** A response that includes the loyalty reward created. */
	export interface CreateLoyaltyRewardResponseFormProperties {
	}
	export function CreateCreateLoyaltyRewardResponseFormGroup() {
		return new FormGroup<CreateLoyaltyRewardResponseFormProperties>({
		});

	}


	/**
	 * Defines the body parameters that can be provided in a request to the
	 * __CreateMobileAuthorizationCode__ endpoint.
	 */
	export interface CreateMobileAuthorizationCodeRequest {

		/**
		 * The Square location ID the authorization code should be tied to.
		 * Max length: 191
		 * Min length: 1
		 */
		location_id?: string | null;
	}

	/**
	 * Defines the body parameters that can be provided in a request to the
	 * __CreateMobileAuthorizationCode__ endpoint.
	 */
	export interface CreateMobileAuthorizationCodeRequestFormProperties {

		/**
		 * The Square location ID the authorization code should be tied to.
		 * Max length: 191
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateCreateMobileAuthorizationCodeRequestFormGroup() {
		return new FormGroup<CreateMobileAuthorizationCodeRequestFormProperties>({
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(191)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the __CreateMobileAuthorizationCode__ endpoint.
	 */
	export interface CreateMobileAuthorizationCodeResponse {

		/**
		 * Generated authorization code that connects a mobile application instance
		 * to a Square account.
		 * Max length: 191
		 * Min length: 0
		 */
		authorization_code?: string | null;

		/**
		 * Represents an error encountered during a request to the Connect API.
		 * See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.
		 */
		error?: Error;

		/**
		 * The timestamp when `authorization_code` expires in
		 * [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., "2016-09-04T23:59:33.123Z".
		 * Max length: 48
		 * Min length: 20
		 */
		expires_at?: string | null;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the __CreateMobileAuthorizationCode__ endpoint.
	 */
	export interface CreateMobileAuthorizationCodeResponseFormProperties {

		/**
		 * Generated authorization code that connects a mobile application instance
		 * to a Square account.
		 * Max length: 191
		 * Min length: 0
		 */
		authorization_code: FormControl<string | null | undefined>,

		/**
		 * The timestamp when `authorization_code` expires in
		 * [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., "2016-09-04T23:59:33.123Z".
		 * Max length: 48
		 * Min length: 20
		 */
		expires_at: FormControl<string | null | undefined>,
	}
	export function CreateCreateMobileAuthorizationCodeResponseFormGroup() {
		return new FormGroup<CreateMobileAuthorizationCodeResponseFormProperties>({
			authorization_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0), Validators.maxLength(191)]),
			expires_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(20), Validators.maxLength(48)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateOrder` endpoint.
	 * Either `errors` or `order` is present in a given response, but never both.
	 */
	export interface CreateOrderResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `CreateOrder` endpoint.
	 * Either `errors` or `order` is present in a given response, but never both.
	 */
	export interface CreateOrderResponseFormProperties {
	}
	export function CreateCreateOrderResponseFormGroup() {
		return new FormGroup<CreateOrderResponseFormProperties>({
		});

	}


	/**
	 * Describes a request to create a payment using 
	 * [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
	 */
	export interface CreatePaymentRequest {

		/**
		 * If set to `true` and charging a Square Gift Card, a payment might be returned with
		 * `amount_money` equal to less than what was requested. For example, a request for $20 when charging
		 * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
		 * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
		 * payment. This field cannot be `true` when `autocomplete = true`.
		 * For more information, see
		 * [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
		 * Default: false
		 */
		accept_partial_authorization?: boolean | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		app_fee_money?: Money;

		/**
		 * If set to `true`, this payment will be completed when possible. If
		 * set to `false`, this payment is held in an approved state until either
		 * explicitly completed (captured) or canceled (voided). For more information, see
		 * [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
		 * Default: true
		 */
		autocomplete?: boolean | null;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		billing_address?: Address;

		/**
		 * The buyer's email address.
		 * Max length: 255
		 */
		buyer_email_address?: string | null;

		/**
		 * Stores details about a cash payment. Contains only non-confidential information. For more information, see
		 * [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
		 */
		cash_details?: CashPaymentDetails;

		/**
		 * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
		 * This is required if the `source_id` refers to a card on file created using the Customers API.
		 */
		customer_id?: string | null;

		/**
		 * The duration of time after the payment's creation when Square automatically cancels the
		 * payment. This automatic cancellation applies only to payments that do not reach a terminal state
		 * (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.
		 * This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value
		 * of 1 minute.
		 * Note: This feature is only supported for card payments. This parameter can only be set for a delayed
		 * capture payment (`autocomplete=false`).
		 * Default:
		 * - Card-present payments: "PT36H" (36 hours) from the creation time.
		 * - Card-not-present payments: "P7D" (7 days) from the creation time.
		 */
		delay_duration?: string | null;

		/**
		 * Stores details about an external payment. Contains only non-confidential information.
		 * For more information, see
		 * [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
		 */
		external_details?: ExternalPaymentDetails;

		/**
		 * A unique string that identifies this `CreatePayment` request. Keys can be any valid string
		 * but must be unique for every `CreatePayment` request.
		 * Max: 45 characters
		 * Note: The number of allowed characters might be less than the stated maximum, if multi-byte
		 * characters are used.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The location ID to associate with the payment. If not specified, the default location is
		 * used.
		 */
		location_id?: string | null;

		/**
		 * An optional note to be entered by the developer when creating a payment.
		 * Limit 500 characters.
		 * Max length: 500
		 */
		note?: string | null;

		/** Associates a previously created order with this payment. */
		order_id?: string | null;

		/**
		 * A user-defined ID to associate with the payment.
		 * You can use this field to associate the payment to an entity in an external system
		 * (for example, you might specify an order ID that is generated by a third-party shopping cart).
		 * Limit 40 characters.
		 * Max length: 40
		 */
		reference_id?: string | null;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		shipping_address?: Address;

		/**
		 * The ID for the source of funds for this payment. This can be a payment token
		 * (card nonce) generated by the Square payment form or a card on file made with the
		 * Customers API. If recording a payment that the seller
		 * received outside of Square, specify either "CASH" or "EXTERNAL".
		 * For more information, see
		 * [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
		 * Required
		 * Min length: 1
		 */
		source_id: string;

		/**
		 * Optional additional payment information to include on the customer's card statement
		 * as part of the statement description. This can be, for example, an invoice number, ticket number,
		 * or short description that uniquely identifies the purchase.
		 * Note that the `statement_description_identifier` might get truncated on the statement description
		 * to fit the required information including the Square identifier (SQ *) and name of the
		 * seller taking the payment.
		 * Max length: 20
		 */
		statement_description_identifier?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		tip_money?: Money;

		/**
		 * An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		 * Verification tokens encapsulate customer device information and 3-D Secure
		 * challenge results to indicate that Square has verified the buyer identity.
		 * For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
		 */
		verification_token?: string | null;
	}

	/**
	 * Describes a request to create a payment using 
	 * [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
	 */
	export interface CreatePaymentRequestFormProperties {

		/**
		 * If set to `true` and charging a Square Gift Card, a payment might be returned with
		 * `amount_money` equal to less than what was requested. For example, a request for $20 when charging
		 * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
		 * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
		 * payment. This field cannot be `true` when `autocomplete = true`.
		 * For more information, see
		 * [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
		 * Default: false
		 */
		accept_partial_authorization: FormControl<boolean | null | undefined>,

		/**
		 * If set to `true`, this payment will be completed when possible. If
		 * set to `false`, this payment is held in an approved state until either
		 * explicitly completed (captured) or canceled (voided). For more information, see
		 * [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
		 * Default: true
		 */
		autocomplete: FormControl<boolean | null | undefined>,

		/**
		 * The buyer's email address.
		 * Max length: 255
		 */
		buyer_email_address: FormControl<string | null | undefined>,

		/**
		 * The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
		 * This is required if the `source_id` refers to a card on file created using the Customers API.
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * The duration of time after the payment's creation when Square automatically cancels the
		 * payment. This automatic cancellation applies only to payments that do not reach a terminal state
		 * (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.
		 * This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value
		 * of 1 minute.
		 * Note: This feature is only supported for card payments. This parameter can only be set for a delayed
		 * capture payment (`autocomplete=false`).
		 * Default:
		 * - Card-present payments: "PT36H" (36 hours) from the creation time.
		 * - Card-not-present payments: "P7D" (7 days) from the creation time.
		 */
		delay_duration: FormControl<string | null | undefined>,

		/**
		 * A unique string that identifies this `CreatePayment` request. Keys can be any valid string
		 * but must be unique for every `CreatePayment` request.
		 * Max: 45 characters
		 * Note: The number of allowed characters might be less than the stated maximum, if multi-byte
		 * characters are used.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The location ID to associate with the payment. If not specified, the default location is
		 * used.
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * An optional note to be entered by the developer when creating a payment.
		 * Limit 500 characters.
		 * Max length: 500
		 */
		note: FormControl<string | null | undefined>,

		/** Associates a previously created order with this payment. */
		order_id: FormControl<string | null | undefined>,

		/**
		 * A user-defined ID to associate with the payment.
		 * You can use this field to associate the payment to an entity in an external system
		 * (for example, you might specify an order ID that is generated by a third-party shopping cart).
		 * Limit 40 characters.
		 * Max length: 40
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * The ID for the source of funds for this payment. This can be a payment token
		 * (card nonce) generated by the Square payment form or a card on file made with the
		 * Customers API. If recording a payment that the seller
		 * received outside of Square, specify either "CASH" or "EXTERNAL".
		 * For more information, see
		 * [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
		 * Required
		 * Min length: 1
		 */
		source_id: FormControl<string | null | undefined>,

		/**
		 * Optional additional payment information to include on the customer's card statement
		 * as part of the statement description. This can be, for example, an invoice number, ticket number,
		 * or short description that uniquely identifies the purchase.
		 * Note that the `statement_description_identifier` might get truncated on the statement description
		 * to fit the required information including the Square identifier (SQ *) and name of the
		 * seller taking the payment.
		 * Max length: 20
		 */
		statement_description_identifier: FormControl<string | null | undefined>,

		/**
		 * An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
		 * Verification tokens encapsulate customer device information and 3-D Secure
		 * challenge results to indicate that Square has verified the buyer identity.
		 * For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
		 */
		verification_token: FormControl<string | null | undefined>,
	}
	export function CreateCreatePaymentRequestFormGroup() {
		return new FormGroup<CreatePaymentRequestFormProperties>({
			accept_partial_authorization: new FormControl<boolean | null | undefined>(undefined),
			autocomplete: new FormControl<boolean | null | undefined>(undefined),
			buyer_email_address: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			customer_id: new FormControl<string | null | undefined>(undefined),
			delay_duration: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(45)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(500)]),
			order_id: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(40)]),
			source_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			statement_description_identifier: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(20)]),
			verification_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the response returned by [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
	 * If there are errors processing the request, the `payment` field might not be
	 * present, or it might be present with a status of `FAILED`.
	 */
	export interface CreatePaymentResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** Represents a payment processed by the Square API. */
		payment?: Payment;
	}

	/**
	 * Defines the response returned by [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
	 * If there are errors processing the request, the `payment` field might not be
	 * present, or it might be present with a status of `FAILED`.
	 */
	export interface CreatePaymentResponseFormProperties {
	}
	export function CreateCreatePaymentResponseFormGroup() {
		return new FormGroup<CreatePaymentResponseFormProperties>({
		});

	}


	/**
	 * Defines the body parameters that can be included in
	 * a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
	 * Deprecated - recommend using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment)
	 */
	export interface CreateRefundRequest {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * A value you specify that uniquely identifies this
		 * refund among refunds you've created for the tender.
		 * If you're unsure whether a particular refund succeeded,
		 * you can reattempt it with the same idempotency key without
		 * worrying about duplicating the refund.
		 * See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * A description of the reason for the refund.
		 * Default value: `Refund via API`
		 * Max length: 192
		 */
		reason?: string | null;

		/**
		 * The ID of the tender to refund.
		 * A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods
		 * of payment) associated with it, and you refund each tender separately with
		 * the Connect API.
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		tender_id: string;
	}

	/**
	 * Defines the body parameters that can be included in
	 * a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
	 * Deprecated - recommend using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment)
	 */
	export interface CreateRefundRequestFormProperties {

		/**
		 * A value you specify that uniquely identifies this
		 * refund among refunds you've created for the tender.
		 * If you're unsure whether a particular refund succeeded,
		 * you can reattempt it with the same idempotency key without
		 * worrying about duplicating the refund.
		 * See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * A description of the reason for the refund.
		 * Default value: `Refund via API`
		 * Max length: 192
		 */
		reason: FormControl<string | null | undefined>,

		/**
		 * The ID of the tender to refund.
		 * A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods
		 * of payment) associated with it, and you refund each tender separately with
		 * the Connect API.
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		tender_id: FormControl<string | null | undefined>,
	}
	export function CreateCreateRefundRequestFormGroup() {
		return new FormGroup<CreateRefundRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(192)]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			tender_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(192)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
	 * One of `errors` or `refund` is present in a given response (never both).
	 */
	export interface CreateRefundResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a refund processed for a Square transaction. */
		refund?: Refund;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
	 * One of `errors` or `refund` is present in a given response (never both).
	 */
	export interface CreateRefundResponseFormProperties {
	}
	export function CreateCreateRefundResponseFormGroup() {
		return new FormGroup<CreateRefundResponseFormProperties>({
		});

	}


	/** Represents a request to create a `Shift`. */
	export interface CreateShiftRequest {

		/**
		 * A unique string value to ensure the idempotency of the operation.
		 * Max length: 128
		 */
		idempotency_key?: string | null;

		/**
		 * A record of the hourly rate, start, and end times for a single work shift
		 * for an employee. This might include a record of the start and end times for breaks
		 * taken during the shift.
		 * Required
		 */
		shift: Shift;
	}

	/** Represents a request to create a `Shift`. */
	export interface CreateShiftRequestFormProperties {

		/**
		 * A unique string value to ensure the idempotency of the operation.
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateShiftRequestFormGroup() {
		return new FormGroup<CreateShiftRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(128)]),
		});

	}


	/**
	 * A record of the hourly rate, start, and end times for a single work shift
	 * for an employee. This might include a record of the start and end times for breaks
	 * taken during the shift.
	 */
	export interface Shift {

		/** A list of all the paid or unpaid breaks that were taken during this shift. */
		breaks?: Array<Break>;

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		created_at?: string | null;

		/** The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead. */
		employee_id?: string | null;

		/**
		 * RFC 3339; shifted to the timezone + offset. Precision up to the minute is
		 * respected; seconds are truncated.
		 */
		end_at?: string | null;

		/**
		 * The UUID for this object.
		 * Max length: 255
		 */
		id?: string | null;

		/**
		 * The ID of the location this shift occurred at. The location should be based on
		 * where the employee clocked in.
		 */
		location_id?: string | null;

		/**
		 * RFC 3339; shifted to the location timezone + offset. Precision up to the
		 * minute is respected; seconds are truncated.
		 * Required
		 * Min length: 1
		 */
		start_at: string;

		/** Describes the working state of the current `Shift`. */
		status?: string | null;

		/** The ID of the team member this shift belongs to. Replaced `employee_id` at version "2020-08-26". */
		team_member_id?: string | null;

		/**
		 * The read-only convenience value that is calculated from the location based
		 * on the `location_id`. Format: the IANA timezone database identifier for the
		 * location timezone.
		 */
		timezone?: string | null;

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		updated_at?: string | null;

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If not provided,
		 * Square executes a blind write; potentially overwriting data from another
		 * write.
		 */
		version?: number | null;

		/** The hourly wage rate used to compensate an employee for this shift. */
		wage?: ShiftWage;
	}

	/**
	 * A record of the hourly rate, start, and end times for a single work shift
	 * for an employee. This might include a record of the start and end times for breaks
	 * taken during the shift.
	 */
	export interface ShiftFormProperties {

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		created_at: FormControl<string | null | undefined>,

		/** The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead. */
		employee_id: FormControl<string | null | undefined>,

		/**
		 * RFC 3339; shifted to the timezone + offset. Precision up to the minute is
		 * respected; seconds are truncated.
		 */
		end_at: FormControl<string | null | undefined>,

		/**
		 * The UUID for this object.
		 * Max length: 255
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the location this shift occurred at. The location should be based on
		 * where the employee clocked in.
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * RFC 3339; shifted to the location timezone + offset. Precision up to the
		 * minute is respected; seconds are truncated.
		 * Required
		 * Min length: 1
		 */
		start_at: FormControl<string | null | undefined>,

		/** Describes the working state of the current `Shift`. */
		status: FormControl<string | null | undefined>,

		/** The ID of the team member this shift belongs to. Replaced `employee_id` at version "2020-08-26". */
		team_member_id: FormControl<string | null | undefined>,

		/**
		 * The read-only convenience value that is calculated from the location based
		 * on the `location_id`. Format: the IANA timezone database identifier for the
		 * location timezone.
		 */
		timezone: FormControl<string | null | undefined>,

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If not provided,
		 * Square executes a blind write; potentially overwriting data from another
		 * write.
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateShiftFormGroup() {
		return new FormGroup<ShiftFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			employee_id: new FormControl<string | null | undefined>(undefined),
			end_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			start_at: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			status: new FormControl<string | null | undefined>(undefined),
			team_member_id: new FormControl<string | null | undefined>(undefined),
			timezone: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The hourly wage rate used to compensate an employee for this shift. */
	export interface ShiftWage {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		hourly_rate?: Money;

		/**
		 * The name of the job performed during this shift. Square
		 * labor-reporting UIs might group shifts together by title.
		 */
		title?: string | null;
	}

	/** The hourly wage rate used to compensate an employee for this shift. */
	export interface ShiftWageFormProperties {

		/**
		 * The name of the job performed during this shift. Square
		 * labor-reporting UIs might group shifts together by title.
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateShiftWageFormGroup() {
		return new FormGroup<ShiftWageFormProperties>({
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The response to a request to create a `Shift`. The response contains
	 * the created `Shift` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface CreateShiftResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * A record of the hourly rate, start, and end times for a single work shift
		 * for an employee. This might include a record of the start and end times for breaks
		 * taken during the shift.
		 */
		shift?: Shift;
	}

	/**
	 * The response to a request to create a `Shift`. The response contains
	 * the created `Shift` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface CreateShiftResponseFormProperties {
	}
	export function CreateCreateShiftResponseFormGroup() {
		return new FormGroup<CreateShiftResponseFormProperties>({
		});

	}


	/**
	 * Defines parameters in a
	 * [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint request.
	 */
	export interface CreateSubscriptionRequest {

		/**
		 * The date when the subscription should be canceled, in
		 * YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration
		 * if it comes before the date the subscription would otherwise end.
		 */
		canceled_date?: string | null;

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge.
		 * If not specified, Square sends an invoice via email. For an example to
		 * create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
		 */
		card_id?: string | null;

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
		 * Required
		 * Min length: 1
		 */
		customer_id: string;

		/**
		 * A unique string that identifies this `CreateSubscription` request.
		 * If you do not provide a unique string (or provide an empty string as the value),
		 * the endpoint treats each request as independent.
		 * For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 */
		idempotency_key?: string | null;

		/**
		 * The ID of the location the subscription is associated with.
		 * Required
		 * Min length: 1
		 */
		location_id: string;

		/**
		 * The ID of the subscription plan created using the Catalog API.
		 * For more information, see
		 * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and
		 * [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
		 * Required
		 * Min length: 1
		 */
		plan_id: string;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		price_override_money?: Money;

		/**
		 * The start date of the subscription, in YYYY-MM-DD format. For example,
		 * 2013-01-15. If the start date is left empty, the subscription begins
		 * immediately.
		 */
		start_date?: string | null;

		/**
		 * The tax to add when billing the subscription.
		 * The percentage is expressed in decimal form, using a `'.'` as the decimal
		 * separator and without a `'%'` sign. For example, a value of 7.5
		 * corresponds to 7.5%.
		 * Max length: 10
		 */
		tax_percentage?: string | null;

		/**
		 * The timezone that is used in date calculations for the subscription. If unset, defaults to
		 * the location timezone. If a timezone is not configured for the location, defaults to "America/New_York".
		 * Format: the IANA Timezone Database identifier for the location timezone. For
		 * a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
		 */
		timezone?: string | null;
	}

	/**
	 * Defines parameters in a
	 * [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint request.
	 */
	export interface CreateSubscriptionRequestFormProperties {

		/**
		 * The date when the subscription should be canceled, in
		 * YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration
		 * if it comes before the date the subscription would otherwise end.
		 */
		canceled_date: FormControl<string | null | undefined>,

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge.
		 * If not specified, Square sends an invoice via email. For an example to
		 * create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
		 * Required
		 * Min length: 1
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * A unique string that identifies this `CreateSubscription` request.
		 * If you do not provide a unique string (or provide an empty string as the value),
		 * the endpoint treats each request as independent.
		 * For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The ID of the location the subscription is associated with.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the subscription plan created using the Catalog API.
		 * For more information, see
		 * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and
		 * [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
		 * Required
		 * Min length: 1
		 */
		plan_id: FormControl<string | null | undefined>,

		/**
		 * The start date of the subscription, in YYYY-MM-DD format. For example,
		 * 2013-01-15. If the start date is left empty, the subscription begins
		 * immediately.
		 */
		start_date: FormControl<string | null | undefined>,

		/**
		 * The tax to add when billing the subscription.
		 * The percentage is expressed in decimal form, using a `'.'` as the decimal
		 * separator and without a `'%'` sign. For example, a value of 7.5
		 * corresponds to 7.5%.
		 * Max length: 10
		 */
		tax_percentage: FormControl<string | null | undefined>,

		/**
		 * The timezone that is used in date calculations for the subscription. If unset, defaults to
		 * the location timezone. If a timezone is not configured for the location, defaults to "America/New_York".
		 * Format: the IANA Timezone Database identifier for the location timezone. For
		 * a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
		 */
		timezone: FormControl<string | null | undefined>,
	}
	export function CreateCreateSubscriptionRequestFormGroup() {
		return new FormGroup<CreateSubscriptionRequestFormProperties>({
			canceled_date: new FormControl<string | null | undefined>(undefined),
			card_id: new FormControl<string | null | undefined>(undefined),
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			idempotency_key: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			plan_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			start_date: new FormControl<string | null | undefined>(undefined),
			tax_percentage: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10)]),
			timezone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response from the
	 * [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint.
	 */
	export interface CreateSubscriptionResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a customer subscription to a subscription plan.
		 * For an overview of the `Subscription` type, see
		 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		 */
		subscription?: Subscription;
	}

	/**
	 * Defines the fields that are included in the response from the
	 * [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint.
	 */
	export interface CreateSubscriptionResponseFormProperties {
	}
	export function CreateCreateSubscriptionResponseFormGroup() {
		return new FormGroup<CreateSubscriptionResponseFormProperties>({
		});

	}

	export interface CreateTerminalCheckoutRequest {

		/** Required */
		checkout: TerminalCheckout;

		/**
		 * A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but
		 * must be unique for every `CreateCheckout` request.
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Max length: 64
		 * Min length: 1
		 */
		idempotency_key: string;
	}
	export interface CreateTerminalCheckoutRequestFormProperties {

		/**
		 * A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but
		 * must be unique for every `CreateCheckout` request.
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Max length: 64
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateTerminalCheckoutRequestFormGroup() {
		return new FormGroup<CreateTerminalCheckoutRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(64)]),
		});

	}

	export interface CreateTerminalCheckoutResponse {
		checkout?: TerminalCheckout;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}
	export interface CreateTerminalCheckoutResponseFormProperties {
	}
	export function CreateCreateTerminalCheckoutResponseFormGroup() {
		return new FormGroup<CreateTerminalCheckoutResponseFormProperties>({
		});

	}

	export interface CreateTerminalRefundRequest {

		/**
		 * A unique string that identifies this `CreateRefund` request. Keys can be any valid string but
		 * must be unique for every `CreateRefund` request.
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: string;
		refund?: TerminalRefund;
	}
	export interface CreateTerminalRefundRequestFormProperties {

		/**
		 * A unique string that identifies this `CreateRefund` request. Keys can be any valid string but
		 * must be unique for every `CreateRefund` request.
		 * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateCreateTerminalRefundRequestFormGroup() {
		return new FormGroup<CreateTerminalRefundRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface CreateTerminalRefundResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
		refund?: TerminalRefund;
	}
	export interface CreateTerminalRefundResponseFormProperties {
	}
	export function CreateCreateTerminalRefundResponseFormGroup() {
		return new FormGroup<CreateTerminalRefundResponseFormProperties>({
		});

	}


	/**
	 * Indicates the associated currency for an amount of money. Values correspond
	 * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
	 */
	export enum Currency { UNKNOWN_CURRENCY = 'UNKNOWN_CURRENCY', AED = 'AED', AFN = 'AFN', ALL = 'ALL', AMD = 'AMD', ANG = 'ANG', AOA = 'AOA', ARS = 'ARS', AUD = 'AUD', AWG = 'AWG', AZN = 'AZN', BAM = 'BAM', BBD = 'BBD', BDT = 'BDT', BGN = 'BGN', BHD = 'BHD', BIF = 'BIF', BMD = 'BMD', BND = 'BND', BOB = 'BOB', BOV = 'BOV', BRL = 'BRL', BSD = 'BSD', BTN = 'BTN', BWP = 'BWP', BYR = 'BYR', BZD = 'BZD', CAD = 'CAD', CDF = 'CDF', CHE = 'CHE', CHF = 'CHF', CHW = 'CHW', CLF = 'CLF', CLP = 'CLP', CNY = 'CNY', COP = 'COP', COU = 'COU', CRC = 'CRC', CUC = 'CUC', CUP = 'CUP', CVE = 'CVE', CZK = 'CZK', DJF = 'DJF', DKK = 'DKK', DOP = 'DOP', DZD = 'DZD', EGP = 'EGP', ERN = 'ERN', ETB = 'ETB', EUR = 'EUR', FJD = 'FJD', FKP = 'FKP', GBP = 'GBP', GEL = 'GEL', GHS = 'GHS', GIP = 'GIP', GMD = 'GMD', GNF = 'GNF', GTQ = 'GTQ', GYD = 'GYD', HKD = 'HKD', HNL = 'HNL', HRK = 'HRK', HTG = 'HTG', HUF = 'HUF', IDR = 'IDR', ILS = 'ILS', INR = 'INR', IQD = 'IQD', IRR = 'IRR', ISK = 'ISK', JMD = 'JMD', JOD = 'JOD', JPY = 'JPY', KES = 'KES', KGS = 'KGS', KHR = 'KHR', KMF = 'KMF', KPW = 'KPW', KRW = 'KRW', KWD = 'KWD', KYD = 'KYD', KZT = 'KZT', LAK = 'LAK', LBP = 'LBP', LKR = 'LKR', LRD = 'LRD', LSL = 'LSL', LTL = 'LTL', LVL = 'LVL', LYD = 'LYD', MAD = 'MAD', MDL = 'MDL', MGA = 'MGA', MKD = 'MKD', MMK = 'MMK', MNT = 'MNT', MOP = 'MOP', MRO = 'MRO', MUR = 'MUR', MVR = 'MVR', MWK = 'MWK', MXN = 'MXN', MXV = 'MXV', MYR = 'MYR', MZN = 'MZN', NAD = 'NAD', NGN = 'NGN', NIO = 'NIO', NOK = 'NOK', NPR = 'NPR', NZD = 'NZD', OMR = 'OMR', PAB = 'PAB', PEN = 'PEN', PGK = 'PGK', PHP = 'PHP', PKR = 'PKR', PLN = 'PLN', PYG = 'PYG', QAR = 'QAR', RON = 'RON', RSD = 'RSD', RUB = 'RUB', RWF = 'RWF', SAR = 'SAR', SBD = 'SBD', SCR = 'SCR', SDG = 'SDG', SEK = 'SEK', SGD = 'SGD', SHP = 'SHP', SLL = 'SLL', SOS = 'SOS', SRD = 'SRD', SSP = 'SSP', STD = 'STD', SVC = 'SVC', SYP = 'SYP', SZL = 'SZL', THB = 'THB', TJS = 'TJS', TMT = 'TMT', TND = 'TND', TOP = 'TOP', TRY = 'TRY', TTD = 'TTD', TWD = 'TWD', TZS = 'TZS', UAH = 'UAH', UGX = 'UGX', USD = 'USD', USN = 'USN', USS = 'USS', UYI = 'UYI', UYU = 'UYU', UZS = 'UZS', VEF = 'VEF', VND = 'VND', VUV = 'VUV', WST = 'WST', XAF = 'XAF', XAG = 'XAG', XAU = 'XAU', XBA = 'XBA', XBB = 'XBB', XBC = 'XBC', XBD = 'XBD', XCD = 'XCD', XDR = 'XDR', XOF = 'XOF', XPD = 'XPD', XPF = 'XPF', XPT = 'XPT', XTS = 'XTS', XXX = 'XXX', YER = 'YER', ZAR = 'ZAR', ZMK = 'ZMK', ZMW = 'ZMW', BTC = 'BTC' }


	/**
	 * Supported custom attribute query expressions for calling the
	 * [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
	 * endpoint to search for items or item variations.
	 */
	export interface CustomAttributeFilter {

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `boolean_value` property values
		 * against the specified Boolean expression.
		 */
		bool_filter?: boolean | null;

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `custom_attribute_definition_id`
		 * property value against the the specified id.
		 */
		custom_attribute_definition_id?: string | null;

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `key` property value against
		 * the specified key.
		 */
		key?: string | null;

		/** The range of a number value between the specified lower and upper bounds. */
		number_filter?: Range;

		/**
		 * A query expression to filter items or item variations by matching  their custom attributes'
		 * `selection_uid_values`
		 * values against the specified selection uids.
		 */
		selection_uids_filter?: Array<string>;

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `string_value`  property value
		 * against the specified text.
		 */
		string_filter?: string | null;
	}

	/**
	 * Supported custom attribute query expressions for calling the
	 * [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
	 * endpoint to search for items or item variations.
	 */
	export interface CustomAttributeFilterFormProperties {

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `boolean_value` property values
		 * against the specified Boolean expression.
		 */
		bool_filter: FormControl<boolean | null | undefined>,

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `custom_attribute_definition_id`
		 * property value against the the specified id.
		 */
		custom_attribute_definition_id: FormControl<string | null | undefined>,

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `key` property value against
		 * the specified key.
		 */
		key: FormControl<string | null | undefined>,

		/**
		 * A query expression to filter items or item variations by matching their custom attributes'
		 * `string_value`  property value
		 * against the specified text.
		 */
		string_filter: FormControl<string | null | undefined>,
	}
	export function CreateCustomAttributeFilterFormGroup() {
		return new FormGroup<CustomAttributeFilterFormProperties>({
			bool_filter: new FormControl<boolean | null | undefined>(undefined),
			custom_attribute_definition_id: new FormControl<string | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined),
			string_filter: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The range of a number value between the specified lower and upper bounds. */
	export interface Range {

		/** The upper bound of the number range. */
		max?: string | null;

		/** The lower bound of the number range. */
		min?: string | null;
	}

	/** The range of a number value between the specified lower and upper bounds. */
	export interface RangeFormProperties {

		/** The upper bound of the number range. */
		max: FormControl<string | null | undefined>,

		/** The lower bound of the number range. */
		min: FormControl<string | null | undefined>,
	}
	export function CreateRangeFormGroup() {
		return new FormGroup<RangeFormProperties>({
			max: new FormControl<string | null | undefined>(undefined),
			min: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Indicates the method used to create the customer profile. */
	export enum CustomerCreationSource { OTHER = 'OTHER', APPOINTMENTS = 'APPOINTMENTS', COUPON = 'COUPON', DELETION_RECOVERY = 'DELETION_RECOVERY', DIRECTORY = 'DIRECTORY', EGIFTING = 'EGIFTING', EMAIL_COLLECTION = 'EMAIL_COLLECTION', FEEDBACK = 'FEEDBACK', IMPORT = 'IMPORT', INVOICES = 'INVOICES', LOYALTY = 'LOYALTY', MARKETING = 'MARKETING', MERGE = 'MERGE', ONLINE_STORE = 'ONLINE_STORE', INSTANT_PROFILE = 'INSTANT_PROFILE', TERMINAL = 'TERMINAL', THIRD_PARTY = 'THIRD_PARTY', THIRD_PARTY_IMPORT = 'THIRD_PARTY_IMPORT', UNMERGE_RECOVERY = 'UNMERGE_RECOVERY' }


	/**
	 * The creation source filter.
	 * If one or more creation sources are set, customer profiles are included in,
	 * or excluded from, the result if they match at least one of the filter criteria.
	 */
	export interface CustomerCreationSourceFilter {

		/**
		 * Indicates whether a customer profile matching the filter criteria
		 * should be included in the result or excluded from the result.
		 * Default: `INCLUDE`.
		 */
		rule?: string | null;

		/** The list of creation sources used as filtering criteria. */
		values?: Array<string>;
	}

	/**
	 * The creation source filter.
	 * If one or more creation sources are set, customer profiles are included in,
	 * or excluded from, the result if they match at least one of the filter criteria.
	 */
	export interface CustomerCreationSourceFilterFormProperties {

		/**
		 * Indicates whether a customer profile matching the filter criteria
		 * should be included in the result or excluded from the result.
		 * Default: `INCLUDE`.
		 */
		rule: FormControl<string | null | undefined>,
	}
	export function CreateCustomerCreationSourceFilterFormGroup() {
		return new FormGroup<CustomerCreationSourceFilterFormProperties>({
			rule: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a set of `CustomerQuery` filters used to limit the set of
	 * customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
	 */
	export interface CustomerFilter {

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		created_at?: TimeRange;

		/**
		 * The creation source filter.
		 * If one or more creation sources are set, customer profiles are included in,
		 * or excluded from, the result if they match at least one of the filter criteria.
		 */
		creation_source?: CustomerCreationSourceFilter;

		/**
		 * A filter to select customers based on exact or fuzzy matching of
		 * customer attributes against a specified query. Depending on the customer attributes,
		 * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
		 */
		email_address?: CustomerTextFilter;

		/**
		 * A filter to select resources based on an exact field value. For any given
		 * value, the value can only be in one property. Depending on the field, either
		 * all properties can be set or only a subset will be available.
		 * Refer to the documentation of the field.
		 */
		group_ids?: FilterValue;

		/**
		 * A filter to select customers based on exact or fuzzy matching of
		 * customer attributes against a specified query. Depending on the customer attributes,
		 * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
		 */
		phone_number?: CustomerTextFilter;

		/**
		 * A filter to select customers based on exact or fuzzy matching of
		 * customer attributes against a specified query. Depending on the customer attributes,
		 * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
		 */
		reference_id?: CustomerTextFilter;

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		updated_at?: TimeRange;
	}

	/**
	 * Represents a set of `CustomerQuery` filters used to limit the set of
	 * customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
	 */
	export interface CustomerFilterFormProperties {
	}
	export function CreateCustomerFilterFormGroup() {
		return new FormGroup<CustomerFilterFormProperties>({
		});

	}


	/**
	 * Represents a generic time range. The start and end values are
	 * represented in RFC 3339 format. Time ranges are customized to be
	 * inclusive or exclusive based on the needs of a particular endpoint.
	 * Refer to the relevant endpoint-specific documentation to determine
	 * how time ranges are handled.
	 */
	export interface TimeRange {

		/**
		 * A datetime value in RFC 3339 format indicating when the time range
		 * ends.
		 */
		end_at?: string | null;

		/**
		 * A datetime value in RFC 3339 format indicating when the time range
		 * starts.
		 */
		start_at?: string | null;
	}

	/**
	 * Represents a generic time range. The start and end values are
	 * represented in RFC 3339 format. Time ranges are customized to be
	 * inclusive or exclusive based on the needs of a particular endpoint.
	 * Refer to the relevant endpoint-specific documentation to determine
	 * how time ranges are handled.
	 */
	export interface TimeRangeFormProperties {

		/**
		 * A datetime value in RFC 3339 format indicating when the time range
		 * ends.
		 */
		end_at: FormControl<string | null | undefined>,

		/**
		 * A datetime value in RFC 3339 format indicating when the time range
		 * starts.
		 */
		start_at: FormControl<string | null | undefined>,
	}
	export function CreateTimeRangeFormGroup() {
		return new FormGroup<TimeRangeFormProperties>({
			end_at: new FormControl<string | null | undefined>(undefined),
			start_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A filter to select customers based on exact or fuzzy matching of
	 * customer attributes against a specified query. Depending on the customer attributes, 
	 * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
	 */
	export interface CustomerTextFilter {

		/** Use the exact filter to select customers whose attributes match exactly the specified query. */
		exact?: string | null;

		/**
		 * Use the fuzzy filter to select customers whose attributes match the specified query
		 * in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then
		 * each query token must be matched somewhere in the searched attribute. For single token queries,
		 * this is effectively the same behavior as a partial match operation.
		 */
		fuzzy?: string | null;
	}

	/**
	 * A filter to select customers based on exact or fuzzy matching of
	 * customer attributes against a specified query. Depending on the customer attributes, 
	 * the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
	 */
	export interface CustomerTextFilterFormProperties {

		/** Use the exact filter to select customers whose attributes match exactly the specified query. */
		exact: FormControl<string | null | undefined>,

		/**
		 * Use the fuzzy filter to select customers whose attributes match the specified query
		 * in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then
		 * each query token must be matched somewhere in the searched attribute. For single token queries,
		 * this is effectively the same behavior as a partial match operation.
		 */
		fuzzy: FormControl<string | null | undefined>,
	}
	export function CreateCustomerTextFilterFormGroup() {
		return new FormGroup<CustomerTextFilterFormProperties>({
			exact: new FormControl<string | null | undefined>(undefined),
			fuzzy: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A filter to select resources based on an exact field value. For any given
	 * value, the value can only be in one property. Depending on the field, either
	 * all properties can be set or only a subset will be available.
	 * Refer to the documentation of the field.
	 */
	export interface FilterValue {

		/** A list of terms that must be present on the field of the resource. */
		all?: Array<string>;

		/**
		 * A list of terms where at least one of them must be present on the
		 * field of the resource.
		 */
		any?: Array<string>;

		/** A list of terms that must not be present on the field the resource */
		none?: Array<string>;
	}

	/**
	 * A filter to select resources based on an exact field value. For any given
	 * value, the value can only be in one property. Depending on the field, either
	 * all properties can be set or only a subset will be available.
	 * Refer to the documentation of the field.
	 */
	export interface FilterValueFormProperties {
	}
	export function CreateFilterValueFormGroup() {
		return new FormGroup<FilterValueFormProperties>({
		});

	}


	/**
	 * Indicates whether customers should be included in, or excluded from,
	 * the result set when they match the filtering criteria.
	 */
	export enum CustomerInclusionExclusion { INCLUDE = 'INCLUDE', EXCLUDE = 'EXCLUDE' }


	/**
	 * Represents a query (including filtering criteria, sorting criteria, or both) used to search
	 * for customer profiles.
	 */
	export interface CustomerQuery {

		/**
		 * Represents a set of `CustomerQuery` filters used to limit the set of
		 * customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
		 */
		filter?: CustomerFilter;

		/** Specifies how searched customers profiles are sorted, including the sort key and sort order. */
		sort?: CustomerSort;
	}

	/**
	 * Represents a query (including filtering criteria, sorting criteria, or both) used to search
	 * for customer profiles.
	 */
	export interface CustomerQueryFormProperties {
	}
	export function CreateCustomerQueryFormGroup() {
		return new FormGroup<CustomerQueryFormProperties>({
		});

	}


	/** Specifies how searched customers profiles are sorted, including the sort key and sort order. */
	export interface CustomerSort {

		/**
		 * Use one or more customer attributes as the sort key to sort searched customer profiles.
		 * For example, use the creation date (`created_at`) of customers or default attributes as the sort key.
		 * Default: `DEFAULT`.
		 */
		field?: string | null;

		/**
		 * Indicates the order in which results should be sorted based on the
		 * sort field value. Strings use standard alphabetic comparison
		 * to determine order. Strings representing numbers are sorted as strings.
		 * Default: `ASC`.
		 */
		order?: string | null;
	}

	/** Specifies how searched customers profiles are sorted, including the sort key and sort order. */
	export interface CustomerSortFormProperties {

		/**
		 * Use one or more customer attributes as the sort key to sort searched customer profiles.
		 * For example, use the creation date (`created_at`) of customers or default attributes as the sort key.
		 * Default: `DEFAULT`.
		 */
		field: FormControl<string | null | undefined>,

		/**
		 * Indicates the order in which results should be sorted based on the
		 * sort field value. Strings use standard alphabetic comparison
		 * to determine order. Strings representing numbers are sorted as strings.
		 * Default: `ASC`.
		 */
		order: FormControl<string | null | undefined>,
	}
	export function CreateCustomerSortFormGroup() {
		return new FormGroup<CustomerSortFormProperties>({
			field: new FormControl<string | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a group of customer profiles that match one or more predefined filter criteria. 
	 * Segments (also known as Smart Groups) are defined and created within the Customer Directory in the
	 * Square Seller Dashboard or Point of Sale.
	 */
	export interface CustomerSegment {

		/** The timestamp when the segment was created, in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * A unique Square-generated ID for the segment.
		 * Max length: 255
		 */
		id?: string | null;

		/**
		 * The name of the segment.
		 * Required
		 */
		name: string;

		/** The timestamp when the segment was last updated, in RFC 3339 format. */
		updated_at?: string | null;
	}

	/**
	 * Represents a group of customer profiles that match one or more predefined filter criteria. 
	 * Segments (also known as Smart Groups) are defined and created within the Customer Directory in the
	 * Square Seller Dashboard or Point of Sale.
	 */
	export interface CustomerSegmentFormProperties {

		/** The timestamp when the segment was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * A unique Square-generated ID for the segment.
		 * Max length: 255
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The name of the segment.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The timestamp when the segment was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateCustomerSegmentFormGroup() {
		return new FormGroup<CustomerSegmentFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies customer attributes as the sort key to customer profiles returned from a search. */
	export enum CustomerSortField { DEFAULT = 'DEFAULT', CREATED_AT = 'CREATED_AT' }


	/**
	 * A range defined by two dates. Used for filtering a query for Connect v2
	 * objects that have date properties.
	 */
	export interface DateRange {

		/**
		 * A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
		 * extended format for calendar dates.
		 * The end of a date range (inclusive).
		 */
		end_date?: string | null;

		/**
		 * A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
		 * extended format for calendar dates.
		 * The beginning of a date range (inclusive).
		 */
		start_date?: string | null;
	}

	/**
	 * A range defined by two dates. Used for filtering a query for Connect v2
	 * objects that have date properties.
	 */
	export interface DateRangeFormProperties {

		/**
		 * A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
		 * extended format for calendar dates.
		 * The end of a date range (inclusive).
		 */
		end_date: FormControl<string | null | undefined>,

		/**
		 * A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
		 * extended format for calendar dates.
		 * The beginning of a date range (inclusive).
		 */
		start_date: FormControl<string | null | undefined>,
	}
	export function CreateDateRangeFormGroup() {
		return new FormGroup<DateRangeFormProperties>({
			end_date: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Indicates the specific day  of the week. */
	export enum DayOfWeek { SUN = 'SUN', MON = 'MON', TUE = 'TUE', WED = 'WED', THU = 'THU', FRI = 'FRI', SAT = 'SAT' }


	/** A request to delete a `BreakType`. */
	export interface DeleteBreakTypeRequest {
	}

	/** A request to delete a `BreakType`. */
	export interface DeleteBreakTypeRequestFormProperties {
	}
	export function CreateDeleteBreakTypeRequestFormGroup() {
		return new FormGroup<DeleteBreakTypeRequestFormProperties>({
		});

	}


	/**
	 * The response to a request to delete a `BreakType`. The response might contain a set 
	 * of `Error` objects if the request resulted in errors.
	 */
	export interface DeleteBreakTypeResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * The response to a request to delete a `BreakType`. The response might contain a set 
	 * of `Error` objects if the request resulted in errors.
	 */
	export interface DeleteBreakTypeResponseFormProperties {
	}
	export function CreateDeleteBreakTypeResponseFormGroup() {
		return new FormGroup<DeleteBreakTypeResponseFormProperties>({
		});

	}

	export interface DeleteCatalogObjectRequest {
	}
	export interface DeleteCatalogObjectRequestFormProperties {
	}
	export function CreateDeleteCatalogObjectRequestFormGroup() {
		return new FormGroup<DeleteCatalogObjectRequestFormProperties>({
		});

	}

	export interface DeleteCatalogObjectResponse {

		/**
		 * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * of this deletion in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
		 */
		deleted_at?: string | null;

		/**
		 * The IDs of all catalog objects deleted by this request.
		 * Multiple IDs may be returned when associated objects are also deleted, for example
		 * a catalog item variation will be deleted (and its ID included in this field)
		 * when its parent catalog item is deleted.
		 */
		deleted_object_ids?: Array<string>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface DeleteCatalogObjectResponseFormProperties {

		/**
		 * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
		 * of this deletion in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
		 */
		deleted_at: FormControl<string | null | undefined>,
	}
	export function CreateDeleteCatalogObjectResponseFormGroup() {
		return new FormGroup<DeleteCatalogObjectResponseFormProperties>({
			deleted_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in requests to the
	 * `DeleteCustomerCard` endpoint.
	 */
	export interface DeleteCustomerCardRequest {
	}

	/**
	 * Defines the fields that are included in requests to the
	 * `DeleteCustomerCard` endpoint.
	 */
	export interface DeleteCustomerCardRequestFormProperties {
	}
	export function CreateDeleteCustomerCardRequestFormGroup() {
		return new FormGroup<DeleteCustomerCardRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `DeleteCustomerCard` endpoint.
	 */
	export interface DeleteCustomerCardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `DeleteCustomerCard` endpoint.
	 */
	export interface DeleteCustomerCardResponseFormProperties {
	}
	export function CreateDeleteCustomerCardResponseFormGroup() {
		return new FormGroup<DeleteCustomerCardResponseFormProperties>({
		});

	}


	/**
	 * Defines the fields that can be included in a request to the
	 * [DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
	 */
	export interface DeleteCustomerGroupRequest {
	}

	/**
	 * Defines the fields that can be included in a request to the
	 * [DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
	 */
	export interface DeleteCustomerGroupRequestFormProperties {
	}
	export function CreateDeleteCustomerGroupRequestFormGroup() {
		return new FormGroup<DeleteCustomerGroupRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
	 */
	export interface DeleteCustomerGroupResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
	 */
	export interface DeleteCustomerGroupResponseFormProperties {
	}
	export function CreateDeleteCustomerGroupResponseFormGroup() {
		return new FormGroup<DeleteCustomerGroupResponseFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in a request to the `DeleteCustomer`
	 * endpoint.
	 */
	export interface DeleteCustomerRequest {

		/**
		 * The current version of the customer profile.
		 * As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.  For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).
		 */
		version?: number | null;
	}

	/**
	 * Defines the fields that are included in a request to the `DeleteCustomer`
	 * endpoint.
	 */
	export interface DeleteCustomerRequestFormProperties {

		/**
		 * The current version of the customer profile.
		 * As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.  For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateDeleteCustomerRequestFormGroup() {
		return new FormGroup<DeleteCustomerRequestFormProperties>({
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `DeleteCustomer` endpoint.
	 */
	export interface DeleteCustomerResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `DeleteCustomer` endpoint.
	 */
	export interface DeleteCustomerResponseFormProperties {
	}
	export function CreateDeleteCustomerResponseFormGroup() {
		return new FormGroup<DeleteCustomerResponseFormProperties>({
		});

	}


	/** Defines the parameters for a `DeleteDisputeEvidence` request. */
	export interface DeleteDisputeEvidenceRequest {
	}

	/** Defines the parameters for a `DeleteDisputeEvidence` request. */
	export interface DeleteDisputeEvidenceRequestFormProperties {
	}
	export function CreateDeleteDisputeEvidenceRequestFormGroup() {
		return new FormGroup<DeleteDisputeEvidenceRequestFormProperties>({
		});

	}


	/** Defines the fields in a `DeleteDisputeEvidence` response. */
	export interface DeleteDisputeEvidenceResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Defines the fields in a `DeleteDisputeEvidence` response. */
	export interface DeleteDisputeEvidenceResponseFormProperties {
	}
	export function CreateDeleteDisputeEvidenceResponseFormGroup() {
		return new FormGroup<DeleteDisputeEvidenceResponseFormProperties>({
		});

	}


	/** Describes a `DeleteInvoice` request. */
	export interface DeleteInvoiceRequest {

		/**
		 * The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to delete.
		 * If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or
		 * [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
		 */
		version?: number | null;
	}

	/** Describes a `DeleteInvoice` request. */
	export interface DeleteInvoiceRequestFormProperties {

		/**
		 * The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to delete.
		 * If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or
		 * [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateDeleteInvoiceRequestFormGroup() {
		return new FormGroup<DeleteInvoiceRequestFormProperties>({
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Describes a `DeleteInvoice` response. */
	export interface DeleteInvoiceResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Describes a `DeleteInvoice` response. */
	export interface DeleteInvoiceResponseFormProperties {
	}
	export function CreateDeleteInvoiceResponseFormGroup() {
		return new FormGroup<DeleteInvoiceResponseFormProperties>({
		});

	}


	/** A request to delete a loyalty reward. */
	export interface DeleteLoyaltyRewardRequest {
	}

	/** A request to delete a loyalty reward. */
	export interface DeleteLoyaltyRewardRequestFormProperties {
	}
	export function CreateDeleteLoyaltyRewardRequestFormGroup() {
		return new FormGroup<DeleteLoyaltyRewardRequestFormProperties>({
		});

	}


	/** A response returned by the API call. */
	export interface DeleteLoyaltyRewardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/** A response returned by the API call. */
	export interface DeleteLoyaltyRewardResponseFormProperties {
	}
	export function CreateDeleteLoyaltyRewardResponseFormGroup() {
		return new FormGroup<DeleteLoyaltyRewardResponseFormProperties>({
		});

	}


	/** A request to delete a `Shift`. */
	export interface DeleteShiftRequest {
	}

	/** A request to delete a `Shift`. */
	export interface DeleteShiftRequestFormProperties {
	}
	export function CreateDeleteShiftRequestFormGroup() {
		return new FormGroup<DeleteShiftRequestFormProperties>({
		});

	}


	/**
	 * The response to a request to delete a `Shift`. The response might contain a set of 
	 * `Error` objects if the request resulted in errors.
	 */
	export interface DeleteShiftResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * The response to a request to delete a `Shift`. The response might contain a set of 
	 * `Error` objects if the request resulted in errors.
	 */
	export interface DeleteShiftResponseFormProperties {
	}
	export function CreateDeleteShiftResponseFormGroup() {
		return new FormGroup<DeleteShiftResponseFormProperties>({
		});

	}


	/** Represents a `DeleteSnippet` request. */
	export interface DeleteSnippetRequest {
	}

	/** Represents a `DeleteSnippet` request. */
	export interface DeleteSnippetRequestFormProperties {
	}
	export function CreateDeleteSnippetRequestFormGroup() {
		return new FormGroup<DeleteSnippetRequestFormProperties>({
		});

	}


	/** Represents a `DeleteSnippet` response. */
	export interface DeleteSnippetResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/** Represents a `DeleteSnippet` response. */
	export interface DeleteSnippetResponseFormProperties {
	}
	export function CreateDeleteSnippetResponseFormGroup() {
		return new FormGroup<DeleteSnippetResponseFormProperties>({
		});

	}


	/** Defines the parameters for a `DeprecatedCreateDisputeEvidenceFile` request. */
	export interface DeprecatedCreateDisputeEvidenceFileRequest {

		/**
		 * The MIME type of the uploaded file.
		 * The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.
		 * Max length: 40
		 * Min length: 1
		 */
		content_type?: string | null;

		/** The type of evidence you are uploading. */
		evidence_type?: string | null;

		/**
		 * The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: string;
	}

	/** Defines the parameters for a `DeprecatedCreateDisputeEvidenceFile` request. */
	export interface DeprecatedCreateDisputeEvidenceFileRequestFormProperties {

		/**
		 * The MIME type of the uploaded file.
		 * The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.
		 * Max length: 40
		 * Min length: 1
		 */
		content_type: FormControl<string | null | undefined>,

		/** The type of evidence you are uploading. */
		evidence_type: FormControl<string | null | undefined>,

		/**
		 * The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateDeprecatedCreateDisputeEvidenceFileRequestFormGroup() {
		return new FormGroup<DeprecatedCreateDisputeEvidenceFileRequestFormProperties>({
			content_type: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
			evidence_type: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(45)]),
		});

	}


	/** Defines the fields in a `DeprecatedCreateDisputeEvidenceFile` response. */
	export interface DeprecatedCreateDisputeEvidenceFileResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
		evidence?: DisputeEvidence;
	}

	/** Defines the fields in a `DeprecatedCreateDisputeEvidenceFile` response. */
	export interface DeprecatedCreateDisputeEvidenceFileResponseFormProperties {
	}
	export function CreateDeprecatedCreateDisputeEvidenceFileResponseFormGroup() {
		return new FormGroup<DeprecatedCreateDisputeEvidenceFileResponseFormProperties>({
		});

	}


	/** Defines the parameters for a `DeprecatedCreateDisputeEvidenceText` request. */
	export interface DeprecatedCreateDisputeEvidenceTextRequest {

		/**
		 * The evidence string.
		 * Required
		 * Max length: 500
		 * Min length: 1
		 */
		evidence_text: string;

		/** The type of evidence you are uploading. */
		evidence_type?: string | null;

		/**
		 * The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: string;
	}

	/** Defines the parameters for a `DeprecatedCreateDisputeEvidenceText` request. */
	export interface DeprecatedCreateDisputeEvidenceTextRequestFormProperties {

		/**
		 * The evidence string.
		 * Required
		 * Max length: 500
		 * Min length: 1
		 */
		evidence_text: FormControl<string | null | undefined>,

		/** The type of evidence you are uploading. */
		evidence_type: FormControl<string | null | undefined>,

		/**
		 * The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateDeprecatedCreateDisputeEvidenceTextRequestFormGroup() {
		return new FormGroup<DeprecatedCreateDisputeEvidenceTextRequestFormProperties>({
			evidence_text: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(500)]),
			evidence_type: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(45)]),
		});

	}


	/** Defines the fields in a `DeprecatedCreateDisputeEvidenceText` response. */
	export interface DeprecatedCreateDisputeEvidenceTextResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
		evidence?: DisputeEvidence;
	}

	/** Defines the fields in a `DeprecatedCreateDisputeEvidenceText` response. */
	export interface DeprecatedCreateDisputeEvidenceTextResponseFormProperties {
	}
	export function CreateDeprecatedCreateDisputeEvidenceTextResponseFormGroup() {
		return new FormGroup<DeprecatedCreateDisputeEvidenceTextResponseFormProperties>({
		});

	}

	export interface Device {

		/** The device's Square-issued ID. */
		id?: string | null;

		/** The device's merchant-specified name. */
		name?: string | null;
	}
	export interface DeviceFormProperties {

		/** The device's Square-issued ID. */
		id: FormControl<string | null | undefined>,

		/** The device's merchant-specified name. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateDeviceFormGroup() {
		return new FormGroup<DeviceFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** DeviceCode.Status enum. */
	export enum DeviceCodeStatus { UNKNOWN = 'UNKNOWN', UNPAIRED = 'UNPAIRED', PAIRED = 'PAIRED', EXPIRED = 'EXPIRED' }


	/**
	 * Disables the card, preventing any further updates or charges. Disabling
	 * an already disabled card is allowed but has no effect. Accessible via
	 * HTTP requests at POST https://connect.squareup.com/v2/cards/{card_id}/disable
	 */
	export interface DisableCardRequest {
	}

	/**
	 * Disables the card, preventing any further updates or charges. Disabling
	 * an already disabled card is allowed but has no effect. Accessible via
	 * HTTP requests at POST https://connect.squareup.com/v2/cards/{card_id}/disable
	 */
	export interface DisableCardRequestFormProperties {
	}
	export function CreateDisableCardRequestFormGroup() {
		return new FormGroup<DisableCardRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [DisableCard](#endpoint-cards-disablecard) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface DisableCardResponse {

		/**
		 * Represents the payment details of a card to be used for payments. These
		 * details are determined by the payment token generated by Web Payments SDK.
		 */
		card?: Card;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [DisableCard](#endpoint-cards-disablecard) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface DisableCardResponseFormProperties {
	}
	export function CreateDisableCardResponseFormGroup() {
		return new FormGroup<DisableCardResponseFormProperties>({
		});

	}


	/**
	 * Published when evidence is added to a [Dispute](https://developer.squareup.com/reference/square_2021-08-18/objects/Dispute)
	 * from the Disputes Dashboard in the Seller Dashboard, the Square Point of Sale app,
	 * or by calling either [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) or [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text).
	 */
	export interface DisputeEvidenceCreatedWebhook {

		/** Timestamp of when the webhook event was created, in RFC 3339 format. */
		created_at?: string | null;
		data?: DisputeEvidenceCreatedWebhookData;

		/** A unique ID for the webhook event. */
		event_id?: string | null;

		/** The ID of the target location associated with the event. */
		location_id?: string | null;

		/** The ID of the target merchant associated with the event. */
		merchant_id?: string | null;

		/** The type of event this represents. */
		type?: string | null;
	}

	/**
	 * Published when evidence is added to a [Dispute](https://developer.squareup.com/reference/square_2021-08-18/objects/Dispute)
	 * from the Disputes Dashboard in the Seller Dashboard, the Square Point of Sale app,
	 * or by calling either [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) or [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text).
	 */
	export interface DisputeEvidenceCreatedWebhookFormProperties {

		/** Timestamp of when the webhook event was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** A unique ID for the webhook event. */
		event_id: FormControl<string | null | undefined>,

		/** The ID of the target location associated with the event. */
		location_id: FormControl<string | null | undefined>,

		/** The ID of the target merchant associated with the event. */
		merchant_id: FormControl<string | null | undefined>,

		/** The type of event this represents. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateDisputeEvidenceCreatedWebhookFormGroup() {
		return new FormGroup<DisputeEvidenceCreatedWebhookFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			event_id: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			merchant_id: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DisputeEvidenceCreatedWebhookData {

		/** ID of the affected dispute. */
		id?: string | null;
		object?: DisputeEvidenceCreatedWebhookObject;

		/** Name of the affected dispute's type. */
		type?: string | null;
	}
	export interface DisputeEvidenceCreatedWebhookDataFormProperties {

		/** ID of the affected dispute. */
		id: FormControl<string | null | undefined>,

		/** Name of the affected dispute's type. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateDisputeEvidenceCreatedWebhookDataFormGroup() {
		return new FormGroup<DisputeEvidenceCreatedWebhookDataFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DisputeEvidenceCreatedWebhookObject {

		/** Represents a dispute a cardholder initiated with their bank. */
		object?: Dispute;
	}
	export interface DisputeEvidenceCreatedWebhookObjectFormProperties {
	}
	export function CreateDisputeEvidenceCreatedWebhookObjectFormGroup() {
		return new FormGroup<DisputeEvidenceCreatedWebhookObjectFormProperties>({
		});

	}


	/** The type of the dispute evidence. */
	export enum DisputeEvidenceType { GENERIC_EVIDENCE = 'GENERIC_EVIDENCE', ONLINE_OR_APP_ACCESS_LOG = 'ONLINE_OR_APP_ACCESS_LOG', AUTHORIZATION_DOCUMENTATION = 'AUTHORIZATION_DOCUMENTATION', CANCELLATION_OR_REFUND_DOCUMENTATION = 'CANCELLATION_OR_REFUND_DOCUMENTATION', CARDHOLDER_COMMUNICATION = 'CARDHOLDER_COMMUNICATION', CARDHOLDER_INFORMATION = 'CARDHOLDER_INFORMATION', PURCHASE_ACKNOWLEDGEMENT = 'PURCHASE_ACKNOWLEDGEMENT', DUPLICATE_CHARGE_DOCUMENTATION = 'DUPLICATE_CHARGE_DOCUMENTATION', PRODUCT_OR_SERVICE_DESCRIPTION = 'PRODUCT_OR_SERVICE_DESCRIPTION', RECEIPT = 'RECEIPT', SERVICE_RECEIVED_DOCUMENTATION = 'SERVICE_RECEIVED_DOCUMENTATION', PROOF_OF_DELIVERY_DOCUMENTATION = 'PROOF_OF_DELIVERY_DOCUMENTATION', RELATED_TRANSACTION_DOCUMENTATION = 'RELATED_TRANSACTION_DOCUMENTATION', REBUTTAL_EXPLANATION = 'REBUTTAL_EXPLANATION', TRACKING_NUMBER = 'TRACKING_NUMBER' }


	/**
	 * The list of possible reasons why a cardholder might initiate a
	 * dispute with their bank.
	 */
	export enum DisputeReason { AMOUNT_DIFFERS = 'AMOUNT_DIFFERS', CANCELLED = 'CANCELLED', DUPLICATE = 'DUPLICATE', NO_KNOWLEDGE = 'NO_KNOWLEDGE', NOT_AS_DESCRIBED = 'NOT_AS_DESCRIBED', NOT_RECEIVED = 'NOT_RECEIVED', PAID_BY_OTHER_MEANS = 'PAID_BY_OTHER_MEANS', CUSTOMER_REQUESTS_CREDIT = 'CUSTOMER_REQUESTS_CREDIT', EMV_LIABILITY_SHIFT = 'EMV_LIABILITY_SHIFT' }


	/** The list of possible dispute states. */
	export enum DisputeState { UNKNOWN_STATE = 'UNKNOWN_STATE', INQUIRY_EVIDENCE_REQUIRED = 'INQUIRY_EVIDENCE_REQUIRED', INQUIRY_PROCESSING = 'INQUIRY_PROCESSING', INQUIRY_CLOSED = 'INQUIRY_CLOSED', EVIDENCE_REQUIRED = 'EVIDENCE_REQUIRED', PROCESSING = 'PROCESSING', WON = 'WON', LOST = 'LOST', ACCEPTED = 'ACCEPTED', WAITING_THIRD_PARTY = 'WAITING_THIRD_PARTY' }


	/** Determines item visibility in Ecom (Online Store) and Online Checkout. */
	export enum EcomVisibility { UNINDEXED = 'UNINDEXED', UNAVAILABLE = 'UNAVAILABLE', HIDDEN = 'HIDDEN', VISIBLE = 'VISIBLE' }


	/** An employee object that is used by the external API. */
	export interface Employee {

		/** A read-only timestamp in RFC 3339 format. */
		created_at?: string | null;

		/** The employee's email address */
		email?: string | null;

		/** The employee's first name. */
		first_name?: string | null;

		/** UUID for this object. */
		id?: string | null;

		/**
		 * Whether this employee is the owner of the merchant. Each merchant
		 * has one owner employee, and that employee has full authority over
		 * the account.
		 */
		is_owner?: boolean | null;

		/** The employee's last name. */
		last_name?: string | null;

		/** A list of location IDs where this employee has access to. */
		location_ids?: Array<string>;

		/** The employee's phone number in E.164 format, i.e. "+12125554250" */
		phone_number?: string | null;

		/** Specifies the status of the employees being fetched. */
		status?: string | null;

		/** A read-only timestamp in RFC 3339 format. */
		updated_at?: string | null;
	}

	/** An employee object that is used by the external API. */
	export interface EmployeeFormProperties {

		/** A read-only timestamp in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The employee's email address */
		email: FormControl<string | null | undefined>,

		/** The employee's first name. */
		first_name: FormControl<string | null | undefined>,

		/** UUID for this object. */
		id: FormControl<string | null | undefined>,

		/**
		 * Whether this employee is the owner of the merchant. Each merchant
		 * has one owner employee, and that employee has full authority over
		 * the account.
		 */
		is_owner: FormControl<boolean | null | undefined>,

		/** The employee's last name. */
		last_name: FormControl<string | null | undefined>,

		/** The employee's phone number in E.164 format, i.e. "+12125554250" */
		phone_number: FormControl<string | null | undefined>,

		/** Specifies the status of the employees being fetched. */
		status: FormControl<string | null | undefined>,

		/** A read-only timestamp in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateEmployeeFormGroup() {
		return new FormGroup<EmployeeFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_owner: new FormControl<boolean | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The status of the Employee being retrieved. */
	export enum EmployeeStatus { ACTIVE = 'ACTIVE', INACTIVE = 'INACTIVE' }


	/**
	 * The hourly wage rate that an employee earns on a `Shift` for doing the job
	 * specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.
	 */
	export interface EmployeeWage {

		/** The `Employee` that this wage is assigned to. */
		employee_id?: string | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		hourly_rate?: Money;

		/** The UUID for this object. */
		id?: string | null;

		/** The job title that this wage relates to. */
		title?: string | null;
	}

	/**
	 * The hourly wage rate that an employee earns on a `Shift` for doing the job
	 * specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.
	 */
	export interface EmployeeWageFormProperties {

		/** The `Employee` that this wage is assigned to. */
		employee_id: FormControl<string | null | undefined>,

		/** The UUID for this object. */
		id: FormControl<string | null | undefined>,

		/** The job title that this wage relates to. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateEmployeeWageFormGroup() {
		return new FormGroup<EmployeeWageFormProperties>({
			employee_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Indicates which high-level category of error has occurred during a
	 * request to the Connect API.
	 */
	export enum ErrorCategory { API_ERROR = 'API_ERROR', AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR', INVALID_REQUEST_ERROR = 'INVALID_REQUEST_ERROR', RATE_LIMIT_ERROR = 'RATE_LIMIT_ERROR', PAYMENT_METHOD_ERROR = 'PAYMENT_METHOD_ERROR', REFUND_ERROR = 'REFUND_ERROR', MERCHANT_SUBSCRIPTION_ERROR = 'MERCHANT_SUBSCRIPTION_ERROR' }


	/**
	 * Indicates the specific error that occurred during a request to a
	 * Square API.
	 */
	export enum ErrorCode { INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR', UNAUTHORIZED = 'UNAUTHORIZED', ACCESS_TOKEN_EXPIRED = 'ACCESS_TOKEN_EXPIRED', ACCESS_TOKEN_REVOKED = 'ACCESS_TOKEN_REVOKED', CLIENT_DISABLED = 'CLIENT_DISABLED', FORBIDDEN = 'FORBIDDEN', INSUFFICIENT_SCOPES = 'INSUFFICIENT_SCOPES', APPLICATION_DISABLED = 'APPLICATION_DISABLED', V1_APPLICATION = 'V1_APPLICATION', V1_ACCESS_TOKEN = 'V1_ACCESS_TOKEN', CARD_PROCESSING_NOT_ENABLED = 'CARD_PROCESSING_NOT_ENABLED', MERCHANT_SUBSCRIPTION_NOT_FOUND = 'MERCHANT_SUBSCRIPTION_NOT_FOUND', BAD_REQUEST = 'BAD_REQUEST', MISSING_REQUIRED_PARAMETER = 'MISSING_REQUIRED_PARAMETER', INCORRECT_TYPE = 'INCORRECT_TYPE', INVALID_TIME = 'INVALID_TIME', INVALID_TIME_RANGE = 'INVALID_TIME_RANGE', INVALID_VALUE = 'INVALID_VALUE', INVALID_CURSOR = 'INVALID_CURSOR', UNKNOWN_QUERY_PARAMETER = 'UNKNOWN_QUERY_PARAMETER', CONFLICTING_PARAMETERS = 'CONFLICTING_PARAMETERS', EXPECTED_JSON_BODY = 'EXPECTED_JSON_BODY', INVALID_SORT_ORDER = 'INVALID_SORT_ORDER', VALUE_REGEX_MISMATCH = 'VALUE_REGEX_MISMATCH', VALUE_TOO_SHORT = 'VALUE_TOO_SHORT', VALUE_TOO_LONG = 'VALUE_TOO_LONG', VALUE_TOO_LOW = 'VALUE_TOO_LOW', VALUE_TOO_HIGH = 'VALUE_TOO_HIGH', VALUE_EMPTY = 'VALUE_EMPTY', ARRAY_LENGTH_TOO_LONG = 'ARRAY_LENGTH_TOO_LONG', ARRAY_LENGTH_TOO_SHORT = 'ARRAY_LENGTH_TOO_SHORT', ARRAY_EMPTY = 'ARRAY_EMPTY', EXPECTED_BOOLEAN = 'EXPECTED_BOOLEAN', EXPECTED_INTEGER = 'EXPECTED_INTEGER', EXPECTED_FLOAT = 'EXPECTED_FLOAT', EXPECTED_STRING = 'EXPECTED_STRING', EXPECTED_OBJECT = 'EXPECTED_OBJECT', EXPECTED_ARRAY = 'EXPECTED_ARRAY', EXPECTED_MAP = 'EXPECTED_MAP', EXPECTED_BASE64_ENCODED_BYTE_ARRAY = 'EXPECTED_BASE64_ENCODED_BYTE_ARRAY', INVALID_ARRAY_VALUE = 'INVALID_ARRAY_VALUE', INVALID_ENUM_VALUE = 'INVALID_ENUM_VALUE', INVALID_CONTENT_TYPE = 'INVALID_CONTENT_TYPE', INVALID_FORM_VALUE = 'INVALID_FORM_VALUE', CUSTOMER_NOT_FOUND = 'CUSTOMER_NOT_FOUND', ONE_INSTRUMENT_EXPECTED = 'ONE_INSTRUMENT_EXPECTED', NO_FIELDS_SET = 'NO_FIELDS_SET', TOO_MANY_MAP_ENTRIES = 'TOO_MANY_MAP_ENTRIES', MAP_KEY_LENGTH_TOO_SHORT = 'MAP_KEY_LENGTH_TOO_SHORT', MAP_KEY_LENGTH_TOO_LONG = 'MAP_KEY_LENGTH_TOO_LONG', CARD_EXPIRED = 'CARD_EXPIRED', INVALID_EXPIRATION = 'INVALID_EXPIRATION', INVALID_EXPIRATION_YEAR = 'INVALID_EXPIRATION_YEAR', INVALID_EXPIRATION_DATE = 'INVALID_EXPIRATION_DATE', UNSUPPORTED_CARD_BRAND = 'UNSUPPORTED_CARD_BRAND', UNSUPPORTED_ENTRY_METHOD = 'UNSUPPORTED_ENTRY_METHOD', INVALID_ENCRYPTED_CARD = 'INVALID_ENCRYPTED_CARD', INVALID_CARD = 'INVALID_CARD', GENERIC_DECLINE = 'GENERIC_DECLINE', CVV_FAILURE = 'CVV_FAILURE', ADDRESS_VERIFICATION_FAILURE = 'ADDRESS_VERIFICATION_FAILURE', INVALID_ACCOUNT = 'INVALID_ACCOUNT', CURRENCY_MISMATCH = 'CURRENCY_MISMATCH', INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS', INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS', CARDHOLDER_INSUFFICIENT_PERMISSIONS = 'CARDHOLDER_INSUFFICIENT_PERMISSIONS', INVALID_LOCATION = 'INVALID_LOCATION', TRANSACTION_LIMIT = 'TRANSACTION_LIMIT', VOICE_FAILURE = 'VOICE_FAILURE', PAN_FAILURE = 'PAN_FAILURE', EXPIRATION_FAILURE = 'EXPIRATION_FAILURE', CARD_NOT_SUPPORTED = 'CARD_NOT_SUPPORTED', INVALID_PIN = 'INVALID_PIN', MISSING_PIN = 'MISSING_PIN', MISSING_ACCOUNT_TYPE = 'MISSING_ACCOUNT_TYPE', INVALID_POSTAL_CODE = 'INVALID_POSTAL_CODE', INVALID_FEES = 'INVALID_FEES', MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED = 'MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED', PAYMENT_LIMIT_EXCEEDED = 'PAYMENT_LIMIT_EXCEEDED', GIFT_CARD_AVAILABLE_AMOUNT = 'GIFT_CARD_AVAILABLE_AMOUNT', ACCOUNT_UNUSABLE = 'ACCOUNT_UNUSABLE', BUYER_REFUSED_PAYMENT = 'BUYER_REFUSED_PAYMENT', DELAYED_TRANSACTION_EXPIRED = 'DELAYED_TRANSACTION_EXPIRED', DELAYED_TRANSACTION_CANCELED = 'DELAYED_TRANSACTION_CANCELED', DELAYED_TRANSACTION_CAPTURED = 'DELAYED_TRANSACTION_CAPTURED', DELAYED_TRANSACTION_FAILED = 'DELAYED_TRANSACTION_FAILED', CARD_TOKEN_EXPIRED = 'CARD_TOKEN_EXPIRED', CARD_TOKEN_USED = 'CARD_TOKEN_USED', AMOUNT_TOO_HIGH = 'AMOUNT_TOO_HIGH', UNSUPPORTED_INSTRUMENT_TYPE = 'UNSUPPORTED_INSTRUMENT_TYPE', REFUND_AMOUNT_INVALID = 'REFUND_AMOUNT_INVALID', REFUND_ALREADY_PENDING = 'REFUND_ALREADY_PENDING', PAYMENT_NOT_REFUNDABLE = 'PAYMENT_NOT_REFUNDABLE', REFUND_DECLINED = 'REFUND_DECLINED', INVALID_CARD_DATA = 'INVALID_CARD_DATA', SOURCE_USED = 'SOURCE_USED', SOURCE_EXPIRED = 'SOURCE_EXPIRED', UNSUPPORTED_LOYALTY_REWARD_TIER = 'UNSUPPORTED_LOYALTY_REWARD_TIER', LOCATION_MISMATCH = 'LOCATION_MISMATCH', IDEMPOTENCY_KEY_REUSED = 'IDEMPOTENCY_KEY_REUSED', UNEXPECTED_VALUE = 'UNEXPECTED_VALUE', SANDBOX_NOT_SUPPORTED = 'SANDBOX_NOT_SUPPORTED', INVALID_EMAIL_ADDRESS = 'INVALID_EMAIL_ADDRESS', INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER', CHECKOUT_EXPIRED = 'CHECKOUT_EXPIRED', BAD_CERTIFICATE = 'BAD_CERTIFICATE', INVALID_SQUARE_VERSION_FORMAT = 'INVALID_SQUARE_VERSION_FORMAT', API_VERSION_INCOMPATIBLE = 'API_VERSION_INCOMPATIBLE', CARD_DECLINED = 'CARD_DECLINED', VERIFY_CVV_FAILURE = 'VERIFY_CVV_FAILURE', VERIFY_AVS_FAILURE = 'VERIFY_AVS_FAILURE', CARD_DECLINED_CALL_ISSUER = 'CARD_DECLINED_CALL_ISSUER', CARD_DECLINED_VERIFICATION_REQUIRED = 'CARD_DECLINED_VERIFICATION_REQUIRED', BAD_EXPIRATION = 'BAD_EXPIRATION', CHIP_INSERTION_REQUIRED = 'CHIP_INSERTION_REQUIRED', ALLOWABLE_PIN_TRIES_EXCEEDED = 'ALLOWABLE_PIN_TRIES_EXCEEDED', RESERVATION_DECLINED = 'RESERVATION_DECLINED', NOT_FOUND = 'NOT_FOUND', APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND = 'APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND', METHOD_NOT_ALLOWED = 'METHOD_NOT_ALLOWED', NOT_ACCEPTABLE = 'NOT_ACCEPTABLE', REQUEST_TIMEOUT = 'REQUEST_TIMEOUT', CONFLICT = 'CONFLICT', GONE = 'GONE', REQUEST_ENTITY_TOO_LARGE = 'REQUEST_ENTITY_TOO_LARGE', UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE', UNPROCESSABLE_ENTITY = 'UNPROCESSABLE_ENTITY', RATE_LIMITED = 'RATE_LIMITED', NOT_IMPLEMENTED = 'NOT_IMPLEMENTED', BAD_GATEWAY = 'BAD_GATEWAY', SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE', TEMPORARY_ERROR = 'TEMPORARY_ERROR', GATEWAY_TIMEOUT = 'GATEWAY_TIMEOUT' }


	/**
	 * Indicates which products matched by a CatalogPricingRule
	 * will be excluded if the pricing rule uses an exclude set.
	 */
	export enum ExcludeStrategy { LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', MOST_EXPENSIVE = 'MOST_EXPENSIVE' }

	export interface GANSource {
	}
	export interface GANSourceFormProperties {
	}
	export function CreateGANSourceFormGroup() {
		return new FormGroup<GANSourceFormProperties>({
		});

	}


	/**
	 * Request object for fetching a specific `BankAccount`
	 * by the object ID.
	 */
	export interface GetBankAccountByV1IdRequest {
	}

	/**
	 * Request object for fetching a specific `BankAccount`
	 * by the object ID.
	 */
	export interface GetBankAccountByV1IdRequestFormProperties {
	}
	export function CreateGetBankAccountByV1IdRequestFormGroup() {
		return new FormGroup<GetBankAccountByV1IdRequestFormProperties>({
		});

	}


	/** Response object returned by GetBankAccountByV1Id. */
	export interface GetBankAccountByV1IdResponse {

		/**
		 * Represents a bank account. For more information about
		 * linking a bank account to a Square account, see
		 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		 */
		bank_account?: BankAccount;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Response object returned by GetBankAccountByV1Id. */
	export interface GetBankAccountByV1IdResponseFormProperties {
	}
	export function CreateGetBankAccountByV1IdResponseFormGroup() {
		return new FormGroup<GetBankAccountByV1IdResponseFormProperties>({
		});

	}


	/**
	 * Request object to fetch a specific `BankAccount`
	 * by the object ID.
	 */
	export interface GetBankAccountRequest {
	}

	/**
	 * Request object to fetch a specific `BankAccount`
	 * by the object ID.
	 */
	export interface GetBankAccountRequestFormProperties {
	}
	export function CreateGetBankAccountRequestFormGroup() {
		return new FormGroup<GetBankAccountRequestFormProperties>({
		});

	}


	/** Response object returned by `GetBankAccount`. */
	export interface GetBankAccountResponse {

		/**
		 * Represents a bank account. For more information about
		 * linking a bank account to a Square account, see
		 * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
		 */
		bank_account?: BankAccount;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Response object returned by `GetBankAccount`. */
	export interface GetBankAccountResponseFormProperties {
	}
	export function CreateGetBankAccountResponseFormGroup() {
		return new FormGroup<GetBankAccountResponseFormProperties>({
		});

	}


	/** A request to get a `BreakType` by ID. */
	export interface GetBreakTypeRequest {
	}

	/** A request to get a `BreakType` by ID. */
	export interface GetBreakTypeRequestFormProperties {
	}
	export function CreateGetBreakTypeRequestFormGroup() {
		return new FormGroup<GetBreakTypeRequestFormProperties>({
		});

	}


	/**
	 * The response to a request to get a `BreakType`. The response contains
	 * the requested `BreakType` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetBreakTypeResponse {

		/**
		 * A defined break template that sets an expectation for possible `Break`
		 * instances on a `Shift`.
		 */
		break_type?: BreakType;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * The response to a request to get a `BreakType`. The response contains
	 * the requested `BreakType` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetBreakTypeResponseFormProperties {
	}
	export function CreateGetBreakTypeResponseFormGroup() {
		return new FormGroup<GetBreakTypeResponseFormProperties>({
		});

	}

	export interface GetDeviceCodeRequest {
	}
	export interface GetDeviceCodeRequestFormProperties {
	}
	export function CreateGetDeviceCodeRequestFormGroup() {
		return new FormGroup<GetDeviceCodeRequestFormProperties>({
		});

	}

	export interface GetDeviceCodeResponse {
		device_code?: DeviceCode;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface GetDeviceCodeResponseFormProperties {
	}
	export function CreateGetDeviceCodeResponseFormGroup() {
		return new FormGroup<GetDeviceCodeResponseFormProperties>({
		});

	}


	/** A request to get an `EmployeeWage`. */
	export interface GetEmployeeWageRequest {
	}

	/** A request to get an `EmployeeWage`. */
	export interface GetEmployeeWageRequestFormProperties {
	}
	export function CreateGetEmployeeWageRequestFormGroup() {
		return new FormGroup<GetEmployeeWageRequestFormProperties>({
		});

	}


	/**
	 * A response to a request to get an `EmployeeWage`. The response contains
	 * the requested `EmployeeWage` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetEmployeeWageResponse {

		/**
		 * The hourly wage rate that an employee earns on a `Shift` for doing the job
		 * specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.
		 */
		employee_wage?: EmployeeWage;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * A response to a request to get an `EmployeeWage`. The response contains
	 * the requested `EmployeeWage` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetEmployeeWageResponseFormProperties {
	}
	export function CreateGetEmployeeWageResponseFormGroup() {
		return new FormGroup<GetEmployeeWageResponseFormProperties>({
		});

	}


	/** Describes a `GetInvoice` request. */
	export interface GetInvoiceRequest {
	}

	/** Describes a `GetInvoice` request. */
	export interface GetInvoiceRequestFormProperties {
	}
	export function CreateGetInvoiceRequestFormGroup() {
		return new FormGroup<GetInvoiceRequestFormProperties>({
		});

	}


	/** Describes a `GetInvoice` response. */
	export interface GetInvoiceResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Stores information about an invoice. You use the Invoices API to create and manage
		 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		 */
		invoice?: Invoice;
	}

	/** Describes a `GetInvoice` response. */
	export interface GetInvoiceResponseFormProperties {
	}
	export function CreateGetInvoiceResponseFormGroup() {
		return new FormGroup<GetInvoiceResponseFormProperties>({
		});

	}


	/**
	 * Describes a request to retrieve a refund using 
	 * [GetPaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
	 */
	export interface GetPaymentRefundRequest {
	}

	/**
	 * Describes a request to retrieve a refund using 
	 * [GetPaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
	 */
	export interface GetPaymentRefundRequestFormProperties {
	}
	export function CreateGetPaymentRefundRequestFormGroup() {
		return new FormGroup<GetPaymentRefundRequestFormProperties>({
		});

	}


	/**
	 * Defines the response returned by [GetRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
	 * Note: If there are errors processing the request, the refund field might not be
	 * present or it might be present in a FAILED state.
	 */
	export interface GetPaymentRefundResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a refund of a payment made using Square. Contains information about
		 * the original payment and the amount of money refunded.
		 */
		refund?: PaymentRefund;
	}

	/**
	 * Defines the response returned by [GetRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
	 * Note: If there are errors processing the request, the refund field might not be
	 * present or it might be present in a FAILED state.
	 */
	export interface GetPaymentRefundResponseFormProperties {
	}
	export function CreateGetPaymentRefundResponseFormGroup() {
		return new FormGroup<GetPaymentRefundResponseFormProperties>({
		});

	}


	/**
	 * Represents a refund of a payment made using Square. Contains information about
	 * the original payment and the amount of money refunded.
	 */
	export interface PaymentRefund {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		app_fee_money?: Money;

		/**
		 * The timestamp of when the refund was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at?: string | null;

		/**
		 * The unique ID for this refund, generated by Square.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		id: string;

		/**
		 * The location ID associated with the payment this refund is attached to.
		 * Max length: 50
		 */
		location_id?: string | null;

		/**
		 * The ID of the order associated with the refund.
		 * Max length: 192
		 */
		order_id?: string | null;

		/**
		 * The ID of the payment associated with this refund.
		 * Max length: 192
		 */
		payment_id?: string | null;

		/** Processing fees and fee adjustments assessed by Square for this refund. */
		processing_fee?: Array<ProcessingFee>;

		/**
		 * The reason for the refund.
		 * Max length: 192
		 */
		reason?: string | null;

		/**
		 * The refund's status:
		 * - `PENDING` - Awaiting approval.
		 * - `COMPLETED` - Successfully completed.
		 * - `REJECTED` - The refund was rejected.
		 * - `FAILED` - An error occurred.
		 * Max length: 50
		 */
		status?: string | null;

		/**
		 * The timestamp of when the refund was last updated, in RFC 3339 format.
		 * Max length: 32
		 */
		updated_at?: string | null;
	}

	/**
	 * Represents a refund of a payment made using Square. Contains information about
	 * the original payment and the amount of money refunded.
	 */
	export interface PaymentRefundFormProperties {

		/**
		 * The timestamp of when the refund was created, in RFC 3339 format.
		 * Max length: 32
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The unique ID for this refund, generated by Square.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The location ID associated with the payment this refund is attached to.
		 * Max length: 50
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the order associated with the refund.
		 * Max length: 192
		 */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the payment associated with this refund.
		 * Max length: 192
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * The reason for the refund.
		 * Max length: 192
		 */
		reason: FormControl<string | null | undefined>,

		/**
		 * The refund's status:
		 * - `PENDING` - Awaiting approval.
		 * - `COMPLETED` - Successfully completed.
		 * - `REJECTED` - The refund was rejected.
		 * - `FAILED` - An error occurred.
		 * Max length: 50
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * The timestamp of when the refund was last updated, in RFC 3339 format.
		 * Max length: 32
		 */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreatePaymentRefundFormGroup() {
		return new FormGroup<PaymentRefundFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			order_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			updated_at: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
		});

	}


	/**
	 * Describes a request to retrieve a payment using 
	 * [GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment).
	 */
	export interface GetPaymentRequest {
	}

	/**
	 * Describes a request to retrieve a payment using 
	 * [GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment).
	 */
	export interface GetPaymentRequestFormProperties {
	}
	export function CreateGetPaymentRequestFormGroup() {
		return new FormGroup<GetPaymentRequestFormProperties>({
		});

	}


	/** Defines the response returned by [GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment). */
	export interface GetPaymentResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** Represents a payment processed by the Square API. */
		payment?: Payment;
	}

	/** Defines the response returned by [GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment). */
	export interface GetPaymentResponseFormProperties {
	}
	export function CreateGetPaymentResponseFormGroup() {
		return new FormGroup<GetPaymentResponseFormProperties>({
		});

	}


	/** A request to get a `Shift` by ID. */
	export interface GetShiftRequest {
	}

	/** A request to get a `Shift` by ID. */
	export interface GetShiftRequestFormProperties {
	}
	export function CreateGetShiftRequestFormGroup() {
		return new FormGroup<GetShiftRequestFormProperties>({
		});

	}


	/**
	 * A response to a request to get a `Shift`. The response contains
	 * the requested `Shift` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetShiftResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * A record of the hourly rate, start, and end times for a single work shift
		 * for an employee. This might include a record of the start and end times for breaks
		 * taken during the shift.
		 */
		shift?: Shift;
	}

	/**
	 * A response to a request to get a `Shift`. The response contains
	 * the requested `Shift` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetShiftResponseFormProperties {
	}
	export function CreateGetShiftResponseFormGroup() {
		return new FormGroup<GetShiftResponseFormProperties>({
		});

	}


	/** A request to get a `TeamMemberWage`. */
	export interface GetTeamMemberWageRequest {
	}

	/** A request to get a `TeamMemberWage`. */
	export interface GetTeamMemberWageRequestFormProperties {
	}
	export function CreateGetTeamMemberWageRequestFormGroup() {
		return new FormGroup<GetTeamMemberWageRequestFormProperties>({
		});

	}


	/**
	 * A response to a request to get a `TeamMemberWage`. The response contains
	 * the requested `TeamMemberWage` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetTeamMemberWageResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * The hourly wage rate that a team member earns on a `Shift` for doing the job
		 * specified by the `title` property of this object.
		 */
		team_member_wage?: TeamMemberWage;
	}

	/**
	 * A response to a request to get a `TeamMemberWage`. The response contains
	 * the requested `TeamMemberWage` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface GetTeamMemberWageResponseFormProperties {
	}
	export function CreateGetTeamMemberWageResponseFormGroup() {
		return new FormGroup<GetTeamMemberWageResponseFormProperties>({
		});

	}


	/**
	 * The hourly wage rate that a team member earns on a `Shift` for doing the job
	 * specified by the `title` property of this object.
	 */
	export interface TeamMemberWage {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		hourly_rate?: Money;

		/** The UUID for this object. */
		id?: string | null;

		/** The `TeamMember` that this wage is assigned to. */
		team_member_id?: string | null;

		/** The job title that this wage relates to. */
		title?: string | null;
	}

	/**
	 * The hourly wage rate that a team member earns on a `Shift` for doing the job
	 * specified by the `title` property of this object.
	 */
	export interface TeamMemberWageFormProperties {

		/** The UUID for this object. */
		id: FormControl<string | null | undefined>,

		/** The `TeamMember` that this wage is assigned to. */
		team_member_id: FormControl<string | null | undefined>,

		/** The job title that this wage relates to. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberWageFormGroup() {
		return new FormGroup<TeamMemberWageFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			team_member_id: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetTerminalCheckoutRequest {
	}
	export interface GetTerminalCheckoutRequestFormProperties {
	}
	export function CreateGetTerminalCheckoutRequestFormGroup() {
		return new FormGroup<GetTerminalCheckoutRequestFormProperties>({
		});

	}

	export interface GetTerminalCheckoutResponse {
		checkout?: TerminalCheckout;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}
	export interface GetTerminalCheckoutResponseFormProperties {
	}
	export function CreateGetTerminalCheckoutResponseFormGroup() {
		return new FormGroup<GetTerminalCheckoutResponseFormProperties>({
		});

	}

	export interface GetTerminalRefundRequest {
	}
	export interface GetTerminalRefundRequestFormProperties {
	}
	export function CreateGetTerminalRefundRequestFormGroup() {
		return new FormGroup<GetTerminalRefundRequestFormProperties>({
		});

	}

	export interface GetTerminalRefundResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
		refund?: TerminalRefund;
	}
	export interface GetTerminalRefundResponseFormProperties {
	}
	export function CreateGetTerminalRefundResponseFormGroup() {
		return new FormGroup<GetTerminalRefundResponseFormProperties>({
		});

	}

	export enum GiftCardActivityAdjustDecrementReason { SUSPICIOUS_ACTIVITY = 'SUSPICIOUS_ACTIVITY', BALANCE_ACCIDENTALLY_INCREASED = 'BALANCE_ACCIDENTALLY_INCREASED', SUPPORT_ISSUE = 'SUPPORT_ISSUE' }

	export enum GiftCardActivityAdjustIncrementReason { COMPLIMENTARY = 'COMPLIMENTARY', SUPPORT_ISSUE = 'SUPPORT_ISSUE', TRANSACTION_VOIDED = 'TRANSACTION_VOIDED' }

	export enum GiftCardActivityBlockReason { CHARGEBACK_BLOCK = 'CHARGEBACK_BLOCK' }

	export enum GiftCardActivityClearBalanceReason { SUSPICIOUS_ACTIVITY = 'SUSPICIOUS_ACTIVITY', REUSE_GIFTCARD = 'REUSE_GIFTCARD', UNKNOWN_REASON = 'UNKNOWN_REASON' }

	export enum GiftCardActivityDeactivateReason { SUSPICIOUS_ACTIVITY = 'SUSPICIOUS_ACTIVITY', UNKNOWN_REASON = 'UNKNOWN_REASON', CHARGEBACK_DEACTIVATE = 'CHARGEBACK_DEACTIVATE' }

	export enum GiftCardActivityType { ACTIVATE = 'ACTIVATE', LOAD = 'LOAD', REDEEM = 'REDEEM', CLEAR_BALANCE = 'CLEAR_BALANCE', DEACTIVATE = 'DEACTIVATE', ADJUST_INCREMENT = 'ADJUST_INCREMENT', ADJUST_DECREMENT = 'ADJUST_DECREMENT', REFUND = 'REFUND', UNLINKED_ACTIVITY_REFUND = 'UNLINKED_ACTIVITY_REFUND', IMPORT = 'IMPORT', BLOCK = 'BLOCK', UNBLOCK = 'UNBLOCK', IMPORT_REVERSAL = 'IMPORT_REVERSAL' }

	export enum GiftCardActivityUnblockReason { CHARGEBACK_UNBLOCK = 'CHARGEBACK_UNBLOCK' }


	/**
	 * Indicates the source that generated the gift card 
	 * account number (GAN).
	 */
	export enum GiftCardGANSource { SQUARE = 'SQUARE', OTHER = 'OTHER' }


	/** Indicates the gift card state. */
	export enum GiftCardStatus { ACTIVE = 'ACTIVE', DEACTIVATED = 'DEACTIVATED', BLOCKED = 'BLOCKED', PENDING = 'PENDING' }

	export enum GiftCardType { PHYSICAL = 'PHYSICAL', DIGITAL = 'DIGITAL' }

	export interface Info {
	}
	export interface InfoFormProperties {
	}
	export function CreateInfoFormGroup() {
		return new FormGroup<InfoFormProperties>({
		});

	}

	export interface InfoCode {
	}
	export interface InfoCodeFormProperties {
	}
	export function CreateInfoCodeFormGroup() {
		return new FormGroup<InfoCodeFormProperties>({
		});

	}


	/** Object types to inline under their respective parent object in certain connect v2 responses */
	export enum InlineTypes { INLINE_NONE = 'INLINE_NONE', INLINE_VARIATIONS = 'INLINE_VARIATIONS', INLINE_ALL = 'INLINE_ALL' }


	/** Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low. */
	export enum InventoryAlertType { NONE = 'NONE', LOW_QUANTITY = 'LOW_QUANTITY' }


	/** Indicates how the inventory change was applied to a tracked product quantity. */
	export enum InventoryChangeType { PHYSICAL_COUNT = 'PHYSICAL_COUNT', ADJUSTMENT = 'ADJUSTMENT', TRANSFER = 'TRANSFER' }


	/** Indicates the state of a tracked item quantity in the lifecycle of goods. */
	export enum InventoryState { CUSTOM = 'CUSTOM', IN_STOCK = 'IN_STOCK', SOLD = 'SOLD', RETURNED_BY_CUSTOMER = 'RETURNED_BY_CUSTOMER', RESERVED_FOR_SALE = 'RESERVED_FOR_SALE', SOLD_ONLINE = 'SOLD_ONLINE', ORDERED_FROM_VENDOR = 'ORDERED_FROM_VENDOR', RECEIVED_FROM_VENDOR = 'RECEIVED_FROM_VENDOR', IN_TRANSIT_TO = 'IN_TRANSIT_TO', NONE = 'NONE', WASTE = 'WASTE', UNLINKED_RETURN = 'UNLINKED_RETURN', COMPOSED = 'COMPOSED', DECOMPOSED = 'DECOMPOSED', SUPPORTED_BY_NEWER_VERSION = 'SUPPORTED_BY_NEWER_VERSION' }


	/** Indicates the automatic payment method for an [invoice payment request](https://developer.squareup.com/reference/square_2021-08-18/objects/InvoicePaymentRequest). */
	export enum InvoiceAutomaticPaymentSource { NONE = 'NONE', CARD_ON_FILE = 'CARD_ON_FILE', BANK_ON_FILE = 'BANK_ON_FILE' }


	/**
	 * Indicates where to render a custom field on the Square-hosted invoice page and in emailed or PDF 
	 * copies of the invoice.
	 */
	export enum InvoiceCustomFieldPlacement { ABOVE_LINE_ITEMS = 'ABOVE_LINE_ITEMS', BELOW_LINE_ITEMS = 'BELOW_LINE_ITEMS' }


	/** Indicates how Square delivers the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to the customer. */
	export enum InvoiceDeliveryMethod { EMAIL = 'EMAIL', SHARE_MANUALLY = 'SHARE_MANUALLY', SMS = 'SMS' }


	/** Describes query filters to apply. */
	export interface InvoiceFilter {

		/**
		 * Limits the search to the specified customers, within the specified locations.
		 * Specifying a customer is optional. In the current implementation,
		 * a maximum of one customer can be specified.
		 */
		customer_ids?: Array<string>;

		/**
		 * Limits the search to the specified locations. A location is required.
		 * In the current implementation, only one location can be specified.
		 * Required
		 */
		location_ids: Array<string>;
	}

	/** Describes query filters to apply. */
	export interface InvoiceFilterFormProperties {
	}
	export function CreateInvoiceFilterFormGroup() {
		return new FormGroup<InvoiceFilterFormProperties>({
		});

	}


	/** The status of a payment request reminder. */
	export enum InvoicePaymentReminderStatus { PENDING = 'PENDING', NOT_APPLICABLE = 'NOT_APPLICABLE', SENT = 'SENT' }


	/** Describes query criteria for searching invoices. */
	export interface InvoiceQuery {

		/**
		 * Describes query filters to apply.
		 * Required
		 */
		filter: InvoiceFilter;

		/** Identifies the sort field and sort order. */
		sort?: InvoiceSort;
	}

	/** Describes query criteria for searching invoices. */
	export interface InvoiceQueryFormProperties {
	}
	export function CreateInvoiceQueryFormGroup() {
		return new FormGroup<InvoiceQueryFormProperties>({
		});

	}


	/** Identifies the sort field and sort order. */
	export interface InvoiceSort {

		/**
		 * The field to use for sorting.
		 * Required
		 */
		field: string;

		/** The order to use for sorting the results. */
		order?: string | null;
	}

	/** Identifies the sort field and sort order. */
	export interface InvoiceSortFormProperties {

		/**
		 * The field to use for sorting.
		 * Required
		 */
		field: FormControl<string | null | undefined>,

		/** The order to use for sorting the results. */
		order: FormControl<string | null | undefined>,
	}
	export function CreateInvoiceSortFormGroup() {
		return new FormGroup<InvoiceSortFormProperties>({
			field: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Specifies the action for Square to take for processing the invoice. For example, 
	 * email the invoice, charge a customer's card on file, or do nothing. DEPRECATED at
	 * version 2021-01-21. The corresponding `request_method` field is replaced by the
	 * `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
	 */
	export enum InvoiceRequestMethod { EMAIL = 'EMAIL', CHARGE_CARD_ON_FILE = 'CHARGE_CARD_ON_FILE', SHARE_MANUALLY = 'SHARE_MANUALLY', CHARGE_BANK_ON_FILE = 'CHARGE_BANK_ON_FILE', SMS = 'SMS', SMS_CHARGE_CARD_ON_FILE = 'SMS_CHARGE_CARD_ON_FILE', SMS_CHARGE_BANK_ON_FILE = 'SMS_CHARGE_BANK_ON_FILE' }


	/**
	 * Indicates the type of the payment request. For more information, see 
	 * [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
	 */
	export enum InvoiceRequestType { BALANCE = 'BALANCE', DEPOSIT = 'DEPOSIT', INSTALLMENT = 'INSTALLMENT' }


	/** The field to use for sorting. */
	export enum InvoiceSortField { INVOICE_SORT_DATE = 'INVOICE_SORT_DATE' }


	/** Indicates the status of an invoice. */
	export enum InvoiceStatus { DRAFT = 'DRAFT', UNPAID = 'UNPAID', SCHEDULED = 'SCHEDULED', PARTIALLY_PAID = 'PARTIALLY_PAID', PAID = 'PAID', PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED', REFUNDED = 'REFUNDED', CANCELED = 'CANCELED', FAILED = 'FAILED', PAYMENT_PENDING = 'PAYMENT_PENDING' }


	/** An object describing a job that a team member is assigned to. */
	export interface JobAssignment {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		annual_rate?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		hourly_rate?: Money;

		/**
		 * The title of the job.
		 * Required
		 * Min length: 1
		 */
		job_title: string;

		/**
		 * The current pay type for the job assignment used to
		 * calculate the pay amount in a pay period.
		 * Required
		 */
		pay_type: string;

		/** The planned hours per week for the job. Set if the job `PayType` is `SALARY`. */
		weekly_hours?: number | null;
	}

	/** An object describing a job that a team member is assigned to. */
	export interface JobAssignmentFormProperties {

		/**
		 * The title of the job.
		 * Required
		 * Min length: 1
		 */
		job_title: FormControl<string | null | undefined>,

		/**
		 * The current pay type for the job assignment used to
		 * calculate the pay amount in a pay period.
		 * Required
		 */
		pay_type: FormControl<string | null | undefined>,

		/** The planned hours per week for the job. Set if the job `PayType` is `SALARY`. */
		weekly_hours: FormControl<number | null | undefined>,
	}
	export function CreateJobAssignmentFormGroup() {
		return new FormGroup<JobAssignmentFormProperties>({
			job_title: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			pay_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			weekly_hours: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Enumerates the possible pay types that a job can be assigned. */
	export enum JobAssignmentPayType { NONE = 'NONE', HOURLY = 'HOURLY', SALARY = 'SALARY' }


	/** A request to link a customer to a gift card */
	export interface LinkCustomerToGiftCardRequest {

		/**
		 * The ID of the customer to be linked.
		 * Required
		 * Max length: 191
		 * Min length: 1
		 */
		customer_id: string;
	}

	/** A request to link a customer to a gift card */
	export interface LinkCustomerToGiftCardRequestFormProperties {

		/**
		 * The ID of the customer to be linked.
		 * Required
		 * Max length: 191
		 * Min length: 1
		 */
		customer_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkCustomerToGiftCardRequestFormGroup() {
		return new FormGroup<LinkCustomerToGiftCardRequestFormProperties>({
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(191)]),
		});

	}


	/**
	 * A response that contains one `GiftCard` that was linked. The response might contain a set of `Error`
	 * objects if the request resulted in errors.
	 */
	export interface LinkCustomerToGiftCardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a Square gift card. */
		gift_card?: GiftCard;
	}

	/**
	 * A response that contains one `GiftCard` that was linked. The response might contain a set of `Error`
	 * objects if the request resulted in errors.
	 */
	export interface LinkCustomerToGiftCardResponseFormProperties {
	}
	export function CreateLinkCustomerToGiftCardResponseFormGroup() {
		return new FormGroup<LinkCustomerToGiftCardResponseFormProperties>({
		});

	}


	/**
	 * Request object for fetching all `BankAccount`
	 * objects linked to a account.
	 */
	export interface ListBankAccountsRequest {

		/**
		 * The pagination cursor returned by a previous call to this endpoint.
		 * Use it in the next `ListBankAccounts` request to retrieve the next set
		 * of results.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/**
		 * Upper limit on the number of bank accounts to return in the response.
		 * Currently, 1000 is the largest supported limit. You can specify a limit
		 * of up to 1000 bank accounts. This is also the default limit.
		 */
		limit?: number | null;

		/**
		 * Location ID. You can specify this optional filter
		 * to retrieve only the linked bank accounts belonging to a specific location.
		 */
		location_id?: string | null;
	}

	/**
	 * Request object for fetching all `BankAccount`
	 * objects linked to a account.
	 */
	export interface ListBankAccountsRequestFormProperties {

		/**
		 * The pagination cursor returned by a previous call to this endpoint.
		 * Use it in the next `ListBankAccounts` request to retrieve the next set
		 * of results.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * Upper limit on the number of bank accounts to return in the response.
		 * Currently, 1000 is the largest supported limit. You can specify a limit
		 * of up to 1000 bank accounts. This is also the default limit.
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Location ID. You can specify this optional filter
		 * to retrieve only the linked bank accounts belonging to a specific location.
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateListBankAccountsRequestFormGroup() {
		return new FormGroup<ListBankAccountsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response object returned by ListBankAccounts. */
	export interface ListBankAccountsResponse {

		/** List of BankAccounts associated with this account. */
		bank_accounts?: Array<BankAccount>;

		/**
		 * When a response is truncated, it includes a cursor that you can
		 * use in a subsequent request to fetch next set of bank accounts.
		 * If empty, this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Response object returned by ListBankAccounts. */
	export interface ListBankAccountsResponseFormProperties {

		/**
		 * When a response is truncated, it includes a cursor that you can
		 * use in a subsequent request to fetch next set of bank accounts.
		 * If empty, this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListBankAccountsResponseFormGroup() {
		return new FormGroup<ListBankAccountsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request for a filtered set of `BreakType` objects. */
	export interface ListBreakTypesRequest {

		/** A pointer to the next page of `BreakType` results to fetch. */
		cursor?: string | null;

		/**
		 * The maximum number of `BreakType` results to return per page. The number can range between 1
		 * and 200. The default is 200.
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit?: number | null;

		/**
		 * Filter the returned `BreakType` results to only those that are associated with the
		 * specified location.
		 */
		location_id?: string | null;
	}

	/** A request for a filtered set of `BreakType` objects. */
	export interface ListBreakTypesRequestFormProperties {

		/** A pointer to the next page of `BreakType` results to fetch. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of `BreakType` results to return per page. The number can range between 1
		 * and 200. The default is 200.
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Filter the returned `BreakType` results to only those that are associated with the
		 * specified location.
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateListBreakTypesRequestFormGroup() {
		return new FormGroup<ListBreakTypesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(200)]),
			location_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The response to a request for a set of `BreakType` objects. The response contains
	 * the requested `BreakType` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface ListBreakTypesResponse {

		/** A page of `BreakType` results. */
		break_types?: Array<BreakType>;

		/**
		 * The value supplied in the subsequent request to fetch the next page
		 * of `BreakType` results.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * The response to a request for a set of `BreakType` objects. The response contains
	 * the requested `BreakType` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface ListBreakTypesResponseFormProperties {

		/**
		 * The value supplied in the subsequent request to fetch the next page
		 * of `BreakType` results.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListBreakTypesResponseFormGroup() {
		return new FormGroup<ListBreakTypesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Retrieves details for a specific Card. Accessible via
	 * HTTP requests at GET https://connect.squareup.com/v2/cards
	 */
	export interface ListCardsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 * Max length: 256
		 */
		cursor?: string | null;

		/**
		 * Limit results to cards associated with the customer supplied.
		 * By default, all cards owned by the merchant are returned.
		 */
		customer_id?: string | null;

		/**
		 * Includes disabled cards.
		 * By default, all enabled cards owned by the merchant are returned.
		 */
		include_disabled?: boolean | null;

		/** Limit results to cards associated with the reference_id supplied. */
		reference_id?: string | null;

		/**
		 * Sorts the returned list by when the card was created with the specified order.
		 * This field defaults to ASC.
		 */
		sort_order?: string | null;
	}

	/**
	 * Retrieves details for a specific Card. Accessible via
	 * HTTP requests at GET https://connect.squareup.com/v2/cards
	 */
	export interface ListCardsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 * Max length: 256
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * Limit results to cards associated with the customer supplied.
		 * By default, all cards owned by the merchant are returned.
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * Includes disabled cards.
		 * By default, all enabled cards owned by the merchant are returned.
		 */
		include_disabled: FormControl<boolean | null | undefined>,

		/** Limit results to cards associated with the reference_id supplied. */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * Sorts the returned list by when the card was created with the specified order.
		 * This field defaults to ASC.
		 */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateListCardsRequestFormGroup() {
		return new FormGroup<ListCardsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(256)]),
			customer_id: new FormControl<string | null | undefined>(undefined),
			include_disabled: new FormControl<boolean | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListCards](#endpoint-cards-listcards) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface ListCardsResponse {

		/** The requested list of `Card`s. */
		cards?: Array<Card>;

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListCards](#endpoint-cards-listcards) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface ListCardsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListCardsResponseFormGroup() {
		return new FormGroup<ListCardsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListCashDrawerShiftEventsRequest {

		/** Opaque cursor for fetching the next page of results. */
		cursor?: string | null;

		/**
		 * Number of resources to be returned in a page of results (200 by
		 * default, 1000 max).
		 * Maximum: 1000
		 */
		limit?: number | null;

		/**
		 * The ID of the location to list cash drawer shifts for.
		 * Required
		 * Min length: 1
		 */
		location_id: string;
	}
	export interface ListCashDrawerShiftEventsRequestFormProperties {

		/** Opaque cursor for fetching the next page of results. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * Number of resources to be returned in a page of results (200 by
		 * default, 1000 max).
		 * Maximum: 1000
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * The ID of the location to list cash drawer shifts for.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateListCashDrawerShiftEventsRequestFormGroup() {
		return new FormGroup<ListCashDrawerShiftEventsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.max(1000)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface ListCashDrawerShiftEventsResponse {

		/**
		 * Opaque cursor for fetching the next page. Cursor is not present in
		 * the last page of results.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * All of the events (payments, refunds, etc.) for a cash drawer during
		 * the shift.
		 */
		events?: Array<CashDrawerShiftEvent>;
	}
	export interface ListCashDrawerShiftEventsResponseFormProperties {

		/**
		 * Opaque cursor for fetching the next page. Cursor is not present in
		 * the last page of results.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListCashDrawerShiftEventsResponseFormGroup() {
		return new FormGroup<ListCashDrawerShiftEventsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListCashDrawerShiftsRequest {

		/** The inclusive start time of the query on opened_at, in ISO 8601 format. */
		begin_time?: string | null;

		/** Opaque cursor for fetching the next page of results. */
		cursor?: string | null;

		/** The exclusive end date of the query on opened_at, in ISO 8601 format. */
		end_time?: string | null;

		/**
		 * Number of cash drawer shift events in a page of results (200 by
		 * default, 1000 max).
		 * Maximum: 1000
		 */
		limit?: number | null;

		/**
		 * The ID of the location to query for a list of cash drawer shifts.
		 * Required
		 * Min length: 1
		 */
		location_id: string;

		/**
		 * The order in which cash drawer shifts are listed in the response,
		 * based on their opened_at field. Default value: ASC
		 */
		sort_order?: string | null;
	}
	export interface ListCashDrawerShiftsRequestFormProperties {

		/** The inclusive start time of the query on opened_at, in ISO 8601 format. */
		begin_time: FormControl<string | null | undefined>,

		/** Opaque cursor for fetching the next page of results. */
		cursor: FormControl<string | null | undefined>,

		/** The exclusive end date of the query on opened_at, in ISO 8601 format. */
		end_time: FormControl<string | null | undefined>,

		/**
		 * Number of cash drawer shift events in a page of results (200 by
		 * default, 1000 max).
		 * Maximum: 1000
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * The ID of the location to query for a list of cash drawer shifts.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The order in which cash drawer shifts are listed in the response,
		 * based on their opened_at field. Default value: ASC
		 */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateListCashDrawerShiftsRequestFormGroup() {
		return new FormGroup<ListCashDrawerShiftsRequestFormProperties>({
			begin_time: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.max(1000)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListCashDrawerShiftsResponse {

		/**
		 * Opaque cursor for fetching the next page of results. Cursor is not
		 * present in the last page of results.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * A collection of CashDrawerShiftSummary objects for shifts that match
		 * the query.
		 */
		items?: Array<CashDrawerShiftSummary>;
	}
	export interface ListCashDrawerShiftsResponseFormProperties {

		/**
		 * Opaque cursor for fetching the next page of results. Cursor is not
		 * present in the last page of results.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListCashDrawerShiftsResponseFormGroup() {
		return new FormGroup<ListCashDrawerShiftsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListCatalogRequest {

		/**
		 * The specific version of the catalog objects to be included in the response.
		 * This allows you to retrieve historical
		 * versions of objects. The specified version value is matched against
		 * the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
		 */
		catalog_version?: number | null;

		/**
		 * The pagination cursor returned in the previous response. Leave unset for an initial request.
		 * The page size is currently set to be 100.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/**
		 * An optional case-insensitive, comma-separated list of object types to retrieve.
		 * The valid values are defined in the [CatalogObjectType](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) enum, including
		 * `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
		 * `MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.
		 * If this is unspecified, the operation returns objects of all the types at the version of the Square API used to make the request.
		 */
		types?: string | null;
	}
	export interface ListCatalogRequestFormProperties {

		/**
		 * The specific version of the catalog objects to be included in the response.
		 * This allows you to retrieve historical
		 * versions of objects. The specified version value is matched against
		 * the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
		 */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * The pagination cursor returned in the previous response. Leave unset for an initial request.
		 * The page size is currently set to be 100.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * An optional case-insensitive, comma-separated list of object types to retrieve.
		 * The valid values are defined in the [CatalogObjectType](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) enum, including
		 * `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
		 * `MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.
		 * If this is unspecified, the operation returns objects of all the types at the version of the Square API used to make the request.
		 */
		types: FormControl<string | null | undefined>,
	}
	export function CreateListCatalogRequestFormGroup() {
		return new FormGroup<ListCatalogRequestFormProperties>({
			catalog_version: new FormControl<number | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			types: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListCatalogResponse {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The CatalogObjects returned. */
		objects?: Array<CatalogObject>;
	}
	export interface ListCatalogResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListCatalogResponseFormGroup() {
		return new FormGroup<ListCatalogResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the query parameters that can be included in a request to the
	 * [ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
	 */
	export interface ListCustomerGroupsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 50
		 */
		limit?: number | null;
	}

	/**
	 * Defines the query parameters that can be included in a request to the
	 * [ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
	 */
	export interface ListCustomerGroupsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 50
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateListCustomerGroupsRequestFormGroup() {
		return new FormGroup<ListCustomerGroupsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
	 * Either `errors` or `groups` is present in a given response (never both).
	 */
	export interface ListCustomerGroupsResponse {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint. This value is present only if the request
		 * succeeded and additional results are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** A list of customer groups belonging to the current seller. */
		groups?: Array<CustomerGroup>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
	 * Either `errors` or `groups` is present in a given response (never both).
	 */
	export interface ListCustomerGroupsResponseFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint. This value is present only if the request
		 * succeeded and additional results are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListCustomerGroupsResponseFormGroup() {
		return new FormGroup<ListCustomerGroupsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the valid parameters for requests to the `ListCustomerSegments` endpoint. */
	export interface ListCustomerSegmentsRequest {

		/**
		 * A pagination cursor returned by previous calls to `ListCustomerSegments`.
		 * This cursor is used to retrieve the next set of query results.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 50
		 */
		limit?: number | null;
	}

	/** Defines the valid parameters for requests to the `ListCustomerSegments` endpoint. */
	export interface ListCustomerSegmentsRequestFormProperties {

		/**
		 * A pagination cursor returned by previous calls to `ListCustomerSegments`.
		 * This cursor is used to retrieve the next set of query results.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 50
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateListCustomerSegmentsRequestFormGroup() {
		return new FormGroup<ListCustomerSegmentsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body for requests to the `ListCustomerSegments` endpoint.
	 * Either `errors` or `segments` is present in a given response (never both).
	 */
	export interface ListCustomerSegmentsResponse {

		/**
		 * A pagination cursor to be used in subsequent calls to `ListCustomerSegments`
		 * to retrieve the next set of query results. The cursor is only present if the request succeeded and
		 * additional results are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The list of customer segments belonging to the associated Square account. */
		segments?: Array<CustomerSegment>;
	}

	/**
	 * Defines the fields that are included in the response body for requests to the `ListCustomerSegments` endpoint.
	 * Either `errors` or `segments` is present in a given response (never both).
	 */
	export interface ListCustomerSegmentsResponseFormProperties {

		/**
		 * A pagination cursor to be used in subsequent calls to `ListCustomerSegments`
		 * to retrieve the next set of query results. The cursor is only present if the request succeeded and
		 * additional results are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListCustomerSegmentsResponseFormGroup() {
		return new FormGroup<ListCustomerSegmentsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the query parameters that can be included in a request to the
	 * `ListCustomers` endpoint.
	 */
	export interface ListCustomersRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than 1 or greater than 100. The default value is 100.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit?: number | null;

		/**
		 * Indicates how customers should be sorted.
		 * The default value is `DEFAULT`.
		 */
		sort_field?: string | null;

		/**
		 * Indicates whether customers should be sorted in ascending (`ASC`) or
		 * descending (`DESC`) order.
		 * The default value is `ASC`.
		 */
		sort_order?: string | null;
	}

	/**
	 * Defines the query parameters that can be included in a request to the
	 * `ListCustomers` endpoint.
	 */
	export interface ListCustomersRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than 1 or greater than 100. The default value is 100.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Indicates how customers should be sorted.
		 * The default value is `DEFAULT`.
		 */
		sort_field: FormControl<string | null | undefined>,

		/**
		 * Indicates whether customers should be sorted in ascending (`ASC`) or
		 * descending (`DESC`) order.
		 * The default value is `ASC`.
		 */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateListCustomersRequestFormGroup() {
		return new FormGroup<ListCustomersRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
			sort_field: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `ListCustomers` endpoint.
	 * Either `errors` or `customers` is present in a given response (never both).
	 */
	export interface ListCustomersResponse {

		/**
		 * A pagination cursor to retrieve the next set of results for the
		 * original query. A cursor is only present if the request succeeded and additional results
		 * are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** An array of `Customer` objects that match the provided query. */
		customers?: Array<Customer>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `ListCustomers` endpoint.
	 * Either `errors` or `customers` is present in a given response (never both).
	 */
	export interface ListCustomersResponseFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for the
		 * original query. A cursor is only present if the request succeeded and additional results
		 * are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListCustomersResponseFormGroup() {
		return new FormGroup<ListCustomersResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListDeviceCodesRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor?: string | null;

		/**
		 * If specified, only returns DeviceCodes of the specified location.
		 * Returns DeviceCodes of all locations if empty.
		 */
		location_id?: string | null;

		/**
		 * If specified, only returns DeviceCodes targeting the specified product type.
		 * Returns DeviceCodes of all product types if empty.
		 */
		product_type?: string | null;

		/**
		 * If specified, returns DeviceCodes with the specified statuses.
		 * Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.
		 */
		status?: Array<string>;
	}
	export interface ListDeviceCodesRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * If specified, only returns DeviceCodes of the specified location.
		 * Returns DeviceCodes of all locations if empty.
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * If specified, only returns DeviceCodes targeting the specified product type.
		 * Returns DeviceCodes of all product types if empty.
		 */
		product_type: FormControl<string | null | undefined>,
	}
	export function CreateListDeviceCodesRequestFormGroup() {
		return new FormGroup<ListDeviceCodesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			product_type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListDeviceCodesResponse {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint. This value is present only if the request
		 * succeeded and additional results are available.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor?: string | null;

		/** The queried DeviceCode. */
		device_codes?: Array<DeviceCode>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface ListDeviceCodesResponseFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint. This value is present only if the request
		 * succeeded and additional results are available.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListDeviceCodesResponseFormGroup() {
		return new FormGroup<ListDeviceCodesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the parameters for a `ListDisputeEvidence` request. */
	export interface ListDisputeEvidenceRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;
	}

	/** Defines the parameters for a `ListDisputeEvidence` request. */
	export interface ListDisputeEvidenceRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListDisputeEvidenceRequestFormGroup() {
		return new FormGroup<ListDisputeEvidenceRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the fields in a `ListDisputeEvidence` response. */
	export interface ListDisputeEvidenceResponse {

		/**
		 * The pagination cursor to be used in a subsequent request.
		 * If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The list of evidence previously uploaded to the specified dispute. */
		evidence?: Array<DisputeEvidence>;
	}

	/** Defines the fields in a `ListDisputeEvidence` response. */
	export interface ListDisputeEvidenceResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request.
		 * If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListDisputeEvidenceResponseFormGroup() {
		return new FormGroup<ListDisputeEvidenceResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the request parameters for the `ListDisputes` endpoint. */
	export interface ListDisputesRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/**
		 * The ID of the location for which to return a list of disputes. If not specified, the endpoint returns
		 * all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.
		 * Max length: 40
		 * Min length: 1
		 */
		location_id?: string | null;

		/**
		 * The dispute states to filter the result.
		 * If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`,
		 * or `LOST`).
		 */
		states?: Array<string>;
	}

	/** Defines the request parameters for the `ListDisputes` endpoint. */
	export interface ListDisputesRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The ID of the location for which to return a list of disputes. If not specified, the endpoint returns
		 * all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.
		 * Max length: 40
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateListDisputesRequestFormGroup() {
		return new FormGroup<ListDisputesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(40)]),
		});

	}


	/** Defines fields in a `ListDisputes` response. */
	export interface ListDisputesResponse {

		/**
		 * The pagination cursor to be used in a subsequent request.
		 * If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/** The list of disputes. */
		disputes?: Array<Dispute>;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Defines fields in a `ListDisputes` response. */
	export interface ListDisputesResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request.
		 * If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListDisputesResponseFormGroup() {
		return new FormGroup<ListDisputesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request for a set of `EmployeeWage` objects. */
	export interface ListEmployeeWagesRequest {

		/** A pointer to the next page of `EmployeeWage` results to fetch. */
		cursor?: string | null;

		/** Filter the returned wages to only those that are associated with the specified employee. */
		employee_id?: string | null;

		/**
		 * The maximum number of `EmployeeWage` results to return per page. The number can range between
		 * 1 and 200. The default is 200.
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit?: number | null;
	}

	/** A request for a set of `EmployeeWage` objects. */
	export interface ListEmployeeWagesRequestFormProperties {

		/** A pointer to the next page of `EmployeeWage` results to fetch. */
		cursor: FormControl<string | null | undefined>,

		/** Filter the returned wages to only those that are associated with the specified employee. */
		employee_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of `EmployeeWage` results to return per page. The number can range between
		 * 1 and 200. The default is 200.
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateListEmployeeWagesRequestFormGroup() {
		return new FormGroup<ListEmployeeWagesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			employee_id: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(200)]),
		});

	}


	/**
	 * The response to a request for a set of `EmployeeWage` objects. The response contains
	 * a set of `EmployeeWage` objects.
	 */
	export interface ListEmployeeWagesResponse {

		/**
		 * The value supplied in the subsequent request to fetch the next page
		 * of `EmployeeWage` results.
		 */
		cursor?: string | null;

		/** A page of `EmployeeWage` results. */
		employee_wages?: Array<EmployeeWage>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * The response to a request for a set of `EmployeeWage` objects. The response contains
	 * a set of `EmployeeWage` objects.
	 */
	export interface ListEmployeeWagesResponseFormProperties {

		/**
		 * The value supplied in the subsequent request to fetch the next page
		 * of `EmployeeWage` results.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListEmployeeWagesResponseFormGroup() {
		return new FormGroup<ListEmployeeWagesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListEmployeesRequest {

		/** The token required to retrieve the specified page of results. */
		cursor?: string | null;

		/** The number of employees to be returned on each page. */
		limit?: number | null;
		location_id?: string | null;

		/** Specifies the EmployeeStatus to filter the employee by. */
		status?: string | null;
	}
	export interface ListEmployeesRequestFormProperties {

		/** The token required to retrieve the specified page of results. */
		cursor: FormControl<string | null | undefined>,

		/** The number of employees to be returned on each page. */
		limit: FormControl<number | null | undefined>,
		location_id: FormControl<string | null | undefined>,

		/** Specifies the EmployeeStatus to filter the employee by. */
		status: FormControl<string | null | undefined>,
	}
	export function CreateListEmployeesRequestFormGroup() {
		return new FormGroup<ListEmployeesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListEmployeesResponse {

		/** The token to be used to retrieve the next page of results. */
		cursor?: string | null;
		employees?: Array<Employee>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface ListEmployeesResponseFormProperties {

		/** The token to be used to retrieve the next page of results. */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListEmployeesResponseFormGroup() {
		return new FormGroup<ListEmployeesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Returns a list of gift card activities. You can optionally specify a filter to retrieve a
	 * subset of activites.
	 */
	export interface ListGiftCardActivitiesRequest {

		/**
		 * The timestamp for the beginning of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time minus one year.
		 */
		begin_time?: string | null;

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * If you do not provide the cursor, the call returns the first page of the results.
		 */
		cursor?: string | null;

		/**
		 * The timestamp for the end of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time.
		 */
		end_time?: string | null;

		/**
		 * If you provide a gift card ID, the endpoint returns activities that belong
		 * to the specified gift card. Otherwise, the endpoint returns all gift card activities for
		 * the seller.
		 * Max length: 50
		 */
		gift_card_id?: string | null;

		/**
		 * If you provide a limit value, the endpoint returns the specified number
		 * of results (or less) per page. A maximum value is 100. The default value is 50.
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit?: number | null;

		/**
		 * If you provide a location ID, the endpoint returns gift card activities for that location.
		 * Otherwise, the endpoint returns gift card activities for all locations.
		 */
		location_id?: string | null;

		/**
		 * The order in which the endpoint returns the activities, based on `created_at`.
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order?: string | null;

		/**
		 * If you provide a type, the endpoint returns gift card activities of this type.
		 * Otherwise, the endpoint returns all types of gift card activities.
		 */
		type?: string | null;
	}

	/**
	 * Returns a list of gift card activities. You can optionally specify a filter to retrieve a
	 * subset of activites.
	 */
	export interface ListGiftCardActivitiesRequestFormProperties {

		/**
		 * The timestamp for the beginning of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time minus one year.
		 */
		begin_time: FormControl<string | null | undefined>,

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * If you do not provide the cursor, the call returns the first page of the results.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The timestamp for the end of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time.
		 */
		end_time: FormControl<string | null | undefined>,

		/**
		 * If you provide a gift card ID, the endpoint returns activities that belong
		 * to the specified gift card. Otherwise, the endpoint returns all gift card activities for
		 * the seller.
		 * Max length: 50
		 */
		gift_card_id: FormControl<string | null | undefined>,

		/**
		 * If you provide a limit value, the endpoint returns the specified number
		 * of results (or less) per page. A maximum value is 100. The default value is 50.
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * If you provide a location ID, the endpoint returns gift card activities for that location.
		 * Otherwise, the endpoint returns gift card activities for all locations.
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The order in which the endpoint returns the activities, based on `created_at`.
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order: FormControl<string | null | undefined>,

		/**
		 * If you provide a type, the endpoint returns gift card activities of this type.
		 * Otherwise, the endpoint returns all types of gift card activities.
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateListGiftCardActivitiesRequestFormGroup() {
		return new FormGroup<ListGiftCardActivitiesRequestFormProperties>({
			begin_time: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			gift_card_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
			location_id: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A response that contains one or more `GiftCardActivity`. The response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface ListGiftCardActivitiesResponse {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to fetch the next set of activities. If empty, this is
		 * the final response.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Gift card activities retrieved. */
		gift_card_activities?: Array<GiftCardActivity>;
	}

	/**
	 * A response that contains one or more `GiftCardActivity`. The response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface ListGiftCardActivitiesResponseFormProperties {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to fetch the next set of activities. If empty, this is
		 * the final response.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListGiftCardActivitiesResponseFormGroup() {
		return new FormGroup<ListGiftCardActivitiesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A request to list gift cards. You can optionally specify a filter to retrieve a subset of 
	 * gift cards.
	 */
	export interface ListGiftCardsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * If a cursor is not provided, it returns the first page of the results.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * If a value is provided, returns only the gift cards linked to the specified customer
		 * Max length: 191
		 */
		customer_id?: string | null;

		/**
		 * If a value is provided, it returns only that number of results per page.
		 * The maximum number of results allowed per page is 50. The default value is 30.
		 * Minimum: 1
		 * Maximum: 50
		 */
		limit?: number | null;

		/**
		 * If the state is provided, it returns the gift cards in the specified state
		 * (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)).
		 * Otherwise, it returns the gift cards of all states.
		 */
		state?: string | null;

		/**
		 * If a type is provided, gift cards of this type are returned
		 * (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)).
		 * If no type is provided, it returns gift cards of all types.
		 */
		type?: string | null;
	}

	/**
	 * A request to list gift cards. You can optionally specify a filter to retrieve a subset of 
	 * gift cards.
	 */
	export interface ListGiftCardsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * If a cursor is not provided, it returns the first page of the results.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * If a value is provided, returns only the gift cards linked to the specified customer
		 * Max length: 191
		 */
		customer_id: FormControl<string | null | undefined>,

		/**
		 * If a value is provided, it returns only that number of results per page.
		 * The maximum number of results allowed per page is 50. The default value is 30.
		 * Minimum: 1
		 * Maximum: 50
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * If the state is provided, it returns the gift cards in the specified state
		 * (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)).
		 * Otherwise, it returns the gift cards of all states.
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * If a type is provided, gift cards of this type are returned
		 * (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)).
		 * If no type is provided, it returns gift cards of all types.
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateListGiftCardsRequestFormGroup() {
		return new FormGroup<ListGiftCardsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(191)]),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			state: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A response that contains one or more `GiftCard`. The response might contain a set of `Error`
	 * objects if the request resulted in errors.
	 */
	export interface ListGiftCardsResponse {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to fetch the next set of gift cards. If empty, this is
		 * the final response.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Gift cards retrieved. */
		gift_cards?: Array<GiftCard>;
	}

	/**
	 * A response that contains one or more `GiftCard`. The response might contain a set of `Error`
	 * objects if the request resulted in errors.
	 */
	export interface ListGiftCardsResponseFormProperties {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to fetch the next set of gift cards. If empty, this is
		 * the final response.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListGiftCardsResponseFormGroup() {
		return new FormGroup<ListGiftCardsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes a `ListInvoice` request. */
	export interface ListInvoicesRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of invoices to return (200 is the maximum `limit`).
		 * If not provided, the server uses a default limit of 100 invoices.
		 */
		limit?: number | null;

		/**
		 * The ID of the location for which to list invoices.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		location_id: string;
	}

	/** Describes a `ListInvoice` request. */
	export interface ListInvoicesRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of invoices to return (200 is the maximum `limit`).
		 * If not provided, the server uses a default limit of 100 invoices.
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * The ID of the location for which to list invoices.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateListInvoicesRequestFormGroup() {
		return new FormGroup<ListInvoicesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}


	/** Describes a `ListInvoice` response. */
	export interface ListInvoicesResponse {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to retrieve the next set of invoices. If empty, this is the final
		 * response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The invoices retrieved. */
		invoices?: Array<Invoice>;
	}

	/** Describes a `ListInvoice` response. */
	export interface ListInvoicesResponseFormProperties {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to retrieve the next set of invoices. If empty, this is the final
		 * response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListInvoicesResponseFormGroup() {
		return new FormGroup<ListInvoicesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in requests to
	 * the __ListLocations__ endpoint.
	 */
	export interface ListLocationsRequest {
	}

	/**
	 * Defines the fields that are included in requests to
	 * the __ListLocations__ endpoint.
	 */
	export interface ListLocationsRequestFormProperties {
	}
	export function CreateListLocationsRequestFormGroup() {
		return new FormGroup<ListLocationsRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the __ListLocations__ endpoint.
	 * One of `errors` or `locations` is present in a given response (never both).
	 */
	export interface ListLocationsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The business locations. */
		locations?: Array<Location>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the __ListLocations__ endpoint.
	 * One of `errors` or `locations` is present in a given response (never both).
	 */
	export interface ListLocationsResponseFormProperties {
	}
	export function CreateListLocationsResponseFormGroup() {
		return new FormGroup<ListLocationsResponseFormProperties>({
		});

	}


	/** A request to list `LoyaltyProgram`. */
	export interface ListLoyaltyProgramsRequest {
	}

	/** A request to list `LoyaltyProgram`. */
	export interface ListLoyaltyProgramsRequestFormProperties {
	}
	export function CreateListLoyaltyProgramsRequestFormGroup() {
		return new FormGroup<ListLoyaltyProgramsRequestFormProperties>({
		});

	}


	/** A response that contains all loyalty programs. */
	export interface ListLoyaltyProgramsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** A list of `LoyaltyProgram` for the merchant. */
		programs?: Array<LoyaltyProgram>;
	}

	/** A response that contains all loyalty programs. */
	export interface ListLoyaltyProgramsResponseFormProperties {
	}
	export function CreateListLoyaltyProgramsResponseFormGroup() {
		return new FormGroup<ListLoyaltyProgramsResponseFormProperties>({
		});

	}


	/**
	 * Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards. 
	 * Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. 
	 * For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
	 */
	export interface LoyaltyProgram {

		/**
		 * Defines how buyers can earn loyalty points.
		 * Required
		 */
		accrual_rules: Array<LoyaltyProgramAccrualRule>;

		/**
		 * The timestamp when the program was created, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		created_at: string;

		/** Describes when the loyalty program expires. */
		expiration_policy?: LoyaltyProgramExpirationPolicy;

		/**
		 * The Square-assigned ID of the loyalty program. Updates to
		 * the loyalty program do not modify the identifier.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		id: string;

		/**
		 * The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.
		 * Required
		 */
		location_ids: Array<string>;

		/**
		 * The list of rewards for buyers, sorted by ascending points.
		 * Required
		 */
		reward_tiers: Array<LoyaltyProgramRewardTier>;

		/**
		 * Whether the program is currently active.
		 * Required
		 */
		status: string;

		/**
		 * Represents the naming used for loyalty points.
		 * Required
		 */
		terminology: LoyaltyProgramTerminology;

		/**
		 * The timestamp when the reward was last updated, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		updated_at: string;
	}

	/**
	 * Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards. 
	 * Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. 
	 * For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
	 */
	export interface LoyaltyProgramFormProperties {

		/**
		 * The timestamp when the program was created, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the loyalty program. Updates to
		 * the loyalty program do not modify the identifier.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Whether the program is currently active.
		 * Required
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the reward was last updated, in RFC 3339 format.
		 * Required
		 * Min length: 1
		 */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyProgramFormGroup() {
		return new FormGroup<LoyaltyProgramFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Defines an accrual rule, which is how buyers can earn points. */
	export interface LoyaltyProgramAccrualRule {

		/**
		 * The type of the accrual rule that defines how buyers can earn points.
		 * Required
		 */
		accrual_type: string;

		/**
		 * When the accrual rule is item-based or category-based, this field specifies the ID
		 * of the [catalog object](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) that buyers can purchase to earn points.
		 * If `accrual_type` is `ITEM_VARIATION`, the object is an item variation.
		 * If `accrual_type` is `CATEGORY`, the object is a category.
		 */
		catalog_object_id?: string | null;

		/**
		 * When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field
		 * lists the IDs of any `CATEGORY` catalog objects that are excluded from points accrual.
		 * You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)
		 * endpoint to retrieve information about the excluded categories.
		 */
		excluded_category_ids?: Array<string>;

		/**
		 * When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field
		 * lists the IDs of any `ITEM_VARIATION` catalog objects that are excluded from points accrual.
		 * You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)
		 * endpoint to retrieve information about the excluded item variations.
		 */
		excluded_item_variation_ids?: Array<string>;

		/**
		 * The number of points that
		 * buyers earn based on the `accrual_type`.
		 * Minimum: 1
		 */
		points?: number | null;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		spend_amount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		visit_minimum_amount_money?: Money;
	}

	/** Defines an accrual rule, which is how buyers can earn points. */
	export interface LoyaltyProgramAccrualRuleFormProperties {

		/**
		 * The type of the accrual rule that defines how buyers can earn points.
		 * Required
		 */
		accrual_type: FormControl<string | null | undefined>,

		/**
		 * When the accrual rule is item-based or category-based, this field specifies the ID
		 * of the [catalog object](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) that buyers can purchase to earn points.
		 * If `accrual_type` is `ITEM_VARIATION`, the object is an item variation.
		 * If `accrual_type` is `CATEGORY`, the object is a category.
		 */
		catalog_object_id: FormControl<string | null | undefined>,

		/**
		 * The number of points that
		 * buyers earn based on the `accrual_type`.
		 * Minimum: 1
		 */
		points: FormControl<number | null | undefined>,
	}
	export function CreateLoyaltyProgramAccrualRuleFormGroup() {
		return new FormGroup<LoyaltyProgramAccrualRuleFormProperties>({
			accrual_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			catalog_object_id: new FormControl<string | null | undefined>(undefined),
			points: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
		});

	}


	/** Describes when the loyalty program expires. */
	export interface LoyaltyProgramExpirationPolicy {

		/**
		 * The number of months before points expire, in `P[n]M` RFC 3339 duration format. For example, a value of `P12M` represents a duration of 12 months.
		 * Points are valid through the last day of the month in which they are scheduled to expire. For example, with a  `P12M` duration, points earned on July 6, 2020 expire on August 1, 2021.
		 * Required
		 * Min length: 1
		 */
		expiration_duration: string;
	}

	/** Describes when the loyalty program expires. */
	export interface LoyaltyProgramExpirationPolicyFormProperties {

		/**
		 * The number of months before points expire, in `P[n]M` RFC 3339 duration format. For example, a value of `P12M` represents a duration of 12 months.
		 * Points are valid through the last day of the month in which they are scheduled to expire. For example, with a  `P12M` duration, points earned on July 6, 2020 expire on August 1, 2021.
		 * Required
		 * Min length: 1
		 */
		expiration_duration: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyProgramExpirationPolicyFormGroup() {
		return new FormGroup<LoyaltyProgramExpirationPolicyFormProperties>({
			expiration_duration: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Represents a reward tier in a loyalty program. A reward tier defines how buyers can redeem points for a reward, such as the number of points required and the value and scope of the discount. A loyalty program can offer multiple reward tiers. */
	export interface LoyaltyProgramRewardTier {

		/**
		 * The timestamp when the reward tier was created, in RFC 3339 format.
		 * Required
		 */
		created_at: string;

		/**
		 * Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
		 * are now defined using a catalog pricing rule and other catalog objects. For more information, see
		 * [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
		 * Required
		 */
		definition: LoyaltyProgramRewardDefinition;

		/**
		 * The Square-assigned ID of the reward tier.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		id: string;

		/**
		 * The name of the reward tier.
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * The points exchanged for the reward tier.
		 * Required
		 * Minimum: 1
		 */
		points: number;

		/**
		 * A reference to a Catalog object at a specific version. In general this is
		 * used as an entry point into a graph of catalog objects, where the objects exist
		 * at a specific version.
		 */
		pricing_rule_reference?: CatalogObjectReference;
	}

	/** Represents a reward tier in a loyalty program. A reward tier defines how buyers can redeem points for a reward, such as the number of points required and the value and scope of the discount. A loyalty program can offer multiple reward tiers. */
	export interface LoyaltyProgramRewardTierFormProperties {

		/**
		 * The timestamp when the reward tier was created, in RFC 3339 format.
		 * Required
		 */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the reward tier.
		 * Required
		 * Max length: 36
		 * Min length: 1
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The name of the reward tier.
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The points exchanged for the reward tier.
		 * Required
		 * Minimum: 1
		 */
		points: FormControl<number | null | undefined>,
	}
	export function CreateLoyaltyProgramRewardTierFormGroup() {
		return new FormGroup<LoyaltyProgramRewardTierFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			points: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
		});

	}


	/**
	 * Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
	 * are now defined using a catalog pricing rule and other catalog objects. For more information, see
	 * [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
	 */
	export interface LoyaltyProgramRewardDefinition {

		/**
		 * The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field.
		 * DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field
		 * of the `PRODUCT_SET` catalog object referenced by the pricing rule.
		 */
		catalog_object_ids?: Array<string>;

		/**
		 * The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information
		 * in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.
		 * Required
		 */
		discount_type: string;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		fixed_discount_money?: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		max_discount_money?: Money;

		/**
		 * The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`.
		 * For example, a 7.25% off discount will be represented as "7.25". DEPRECATED at version 2020-12-16. You can find this
		 * information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.
		 */
		percentage_discount?: string | null;

		/**
		 * Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the
		 * `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET`
		 * catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products`
		 * is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of
		 * catalog object IDs of the given type.
		 * Required
		 */
		scope: string;
	}

	/**
	 * Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
	 * are now defined using a catalog pricing rule and other catalog objects. For more information, see
	 * [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
	 */
	export interface LoyaltyProgramRewardDefinitionFormProperties {

		/**
		 * The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information
		 * in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.
		 * Required
		 */
		discount_type: FormControl<string | null | undefined>,

		/**
		 * The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`.
		 * For example, a 7.25% off discount will be represented as "7.25". DEPRECATED at version 2020-12-16. You can find this
		 * information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.
		 */
		percentage_discount: FormControl<string | null | undefined>,

		/**
		 * Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the
		 * `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET`
		 * catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products`
		 * is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of
		 * catalog object IDs of the given type.
		 * Required
		 */
		scope: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyProgramRewardDefinitionFormGroup() {
		return new FormGroup<LoyaltyProgramRewardDefinitionFormProperties>({
			discount_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			percentage_discount: new FormControl<string | null | undefined>(undefined),
			scope: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents the naming used for loyalty points. */
	export interface LoyaltyProgramTerminology {

		/**
		 * A singular unit for a point (for example, 1 point is called 1 star).
		 * Required
		 * Min length: 1
		 */
		one: string;

		/**
		 * A plural unit for point (for example, 10 points is called 10 stars).
		 * Required
		 * Min length: 1
		 */
		other: string;
	}

	/** Represents the naming used for loyalty points. */
	export interface LoyaltyProgramTerminologyFormProperties {

		/**
		 * A singular unit for a point (for example, 1 point is called 1 star).
		 * Required
		 * Min length: 1
		 */
		one: FormControl<string | null | undefined>,

		/**
		 * A plural unit for point (for example, 10 points is called 10 stars).
		 * Required
		 * Min length: 1
		 */
		other: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyProgramTerminologyFormGroup() {
		return new FormGroup<LoyaltyProgramTerminologyFormProperties>({
			one: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			other: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Request object for the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint. */
	export interface ListMerchantsRequest {

		/** The cursor generated by the previous response. */
		cursor?: number | null;
	}

	/** Request object for the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint. */
	export interface ListMerchantsRequestFormProperties {

		/** The cursor generated by the previous response. */
		cursor: FormControl<number | null | undefined>,
	}
	export function CreateListMerchantsRequestFormGroup() {
		return new FormGroup<ListMerchantsRequestFormProperties>({
			cursor: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The response object returned by the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint. */
	export interface ListMerchantsResponse {

		/** If the  response is truncated, the cursor to use in next  request to fetch next set of objects. */
		cursor?: number | null;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;

		/** The requested `Merchant` entities. */
		merchant?: Array<Merchant>;
	}

	/** The response object returned by the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint. */
	export interface ListMerchantsResponseFormProperties {

		/** If the  response is truncated, the cursor to use in next  request to fetch next set of objects. */
		cursor: FormControl<number | null | undefined>,
	}
	export function CreateListMerchantsResponseFormGroup() {
		return new FormGroup<ListMerchantsResponseFormProperties>({
			cursor: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Represents a Square seller. */
	export interface Merchant {

		/** The business name of the merchant. */
		business_name?: string | null;

		/**
		 * The country code associated with the merchant account, in ISO 3166 format.
		 * Required
		 */
		country: string;

		/** The currency associated with the merchant account, in ISO 4217 format. */
		currency?: string | null;

		/** The Square-issued ID of the merchant. */
		id?: string | null;

		/** The language code associated with the merchant account, in BCP 47 format. */
		language_code?: string | null;

		/** The ID of the main `Location` for this merchant. */
		main_location_id?: string | null;

		/** The merchant status, active or inactive. */
		status?: string | null;
	}

	/** Represents a Square seller. */
	export interface MerchantFormProperties {

		/** The business name of the merchant. */
		business_name: FormControl<string | null | undefined>,

		/**
		 * The country code associated with the merchant account, in ISO 3166 format.
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/** The currency associated with the merchant account, in ISO 4217 format. */
		currency: FormControl<string | null | undefined>,

		/** The Square-issued ID of the merchant. */
		id: FormControl<string | null | undefined>,

		/** The language code associated with the merchant account, in BCP 47 format. */
		language_code: FormControl<string | null | undefined>,

		/** The ID of the main `Location` for this merchant. */
		main_location_id: FormControl<string | null | undefined>,

		/** The merchant status, active or inactive. */
		status: FormControl<string | null | undefined>,
	}
	export function CreateMerchantFormGroup() {
		return new FormGroup<MerchantFormProperties>({
			business_name: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			language_code: new FormControl<string | null | undefined>(undefined),
			main_location_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Describes a request to list refunds using 
	 * [ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
	 * The maximum results per page is 100.
	 */
	export interface ListPaymentRefundsRequest {

		/**
		 * The timestamp for the beginning of the requested reporting period, in RFC 3339 format.
		 * Default: The current time minus one year.
		 */
		begin_time?: string | null;

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/**
		 * The timestamp for the end of the requested reporting period, in RFC 3339 format.
		 * Default: The current time.
		 */
		end_time?: string | null;

		/**
		 * The maximum number of results to be returned in a single page.
		 * It is possible to receive fewer results than the specified limit on a given page.
		 * If the supplied value is greater than 100, no more than 100 results are returned.
		 * Default: 100
		 */
		limit?: number | null;

		/**
		 * Limit results to the location supplied. By default, results are returned
		 * for all locations associated with the seller.
		 */
		location_id?: string | null;

		/**
		 * The order in which results are listed:
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order?: string | null;

		/**
		 * If provided, only refunds with the given source type are returned.
		 * - `CARD` - List refunds only for payments where `CARD` was specified as the payment
		 * source.
		 * Default: If omitted, refunds are returned regardless of the source type.
		 */
		source_type?: string | null;

		/**
		 * If provided, only refunds with the given status are returned.
		 * For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).
		 * Default: If omitted, refunds are returned regardless of their status.
		 */
		status?: string | null;
	}

	/**
	 * Describes a request to list refunds using 
	 * [ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
	 * The maximum results per page is 100.
	 */
	export interface ListPaymentRefundsRequestFormProperties {

		/**
		 * The timestamp for the beginning of the requested reporting period, in RFC 3339 format.
		 * Default: The current time minus one year.
		 */
		begin_time: FormControl<string | null | undefined>,

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The timestamp for the end of the requested reporting period, in RFC 3339 format.
		 * Default: The current time.
		 */
		end_time: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to be returned in a single page.
		 * It is possible to receive fewer results than the specified limit on a given page.
		 * If the supplied value is greater than 100, no more than 100 results are returned.
		 * Default: 100
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Limit results to the location supplied. By default, results are returned
		 * for all locations associated with the seller.
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The order in which results are listed:
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order: FormControl<string | null | undefined>,

		/**
		 * If provided, only refunds with the given source type are returned.
		 * - `CARD` - List refunds only for payments where `CARD` was specified as the payment
		 * source.
		 * Default: If omitted, refunds are returned regardless of the source type.
		 */
		source_type: FormControl<string | null | undefined>,

		/**
		 * If provided, only refunds with the given status are returned.
		 * For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).
		 * Default: If omitted, refunds are returned regardless of their status.
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateListPaymentRefundsRequestFormGroup() {
		return new FormGroup<ListPaymentRefundsRequestFormProperties>({
			begin_time: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
			source_type: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the response returned by [ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
	 * Either `errors` or `refunds` is present in a given response (never both).
	 */
	export interface ListPaymentRefundsResponse {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The list of requested refunds. */
		refunds?: Array<PaymentRefund>;
	}

	/**
	 * Defines the response returned by [ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
	 * Either `errors` or `refunds` is present in a given response (never both).
	 */
	export interface ListPaymentRefundsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListPaymentRefundsResponseFormGroup() {
		return new FormGroup<ListPaymentRefundsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Describes a request to list payments using 
	 * [ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments).
	 * The maximum results per page is 100.
	 */
	export interface ListPaymentsRequest {

		/**
		 * The timestamp for the beginning of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time minus one year.
		 */
		begin_time?: string | null;

		/** The brand of the payment card (for example, VISA). */
		card_brand?: string | null;

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/**
		 * The timestamp for the end of the reporting period, in RFC 3339 format.
		 * Default: The current time.
		 */
		end_time?: string | null;

		/** The last four digits of a payment card. */
		last_4?: string | null;

		/**
		 * The maximum number of results to be returned in a single page.
		 * It is possible to receive fewer results than the specified limit on a given page.
		 * The default value of 100 is also the maximum allowed value. If the provided value is
		 * greater than 100, it is ignored and the default value is used instead.
		 * Default: `100`
		 */
		limit?: number | null;

		/**
		 * Limit results to the location supplied. By default, results are returned
		 * for the default (main) location associated with the seller.
		 */
		location_id?: string | null;

		/**
		 * The order in which results are listed:
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order?: string | null;

		/**
		 * The exact amount in the `total_money` for a payment.
		 * Minimum: 0
		 */
		total?: number | null;
	}

	/**
	 * Describes a request to list payments using 
	 * [ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments).
	 * The maximum results per page is 100.
	 */
	export interface ListPaymentsRequestFormProperties {

		/**
		 * The timestamp for the beginning of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time minus one year.
		 */
		begin_time: FormControl<string | null | undefined>,

		/** The brand of the payment card (for example, VISA). */
		card_brand: FormControl<string | null | undefined>,

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The timestamp for the end of the reporting period, in RFC 3339 format.
		 * Default: The current time.
		 */
		end_time: FormControl<string | null | undefined>,

		/** The last four digits of a payment card. */
		last_4: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to be returned in a single page.
		 * It is possible to receive fewer results than the specified limit on a given page.
		 * The default value of 100 is also the maximum allowed value. If the provided value is
		 * greater than 100, it is ignored and the default value is used instead.
		 * Default: `100`
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Limit results to the location supplied. By default, results are returned
		 * for the default (main) location associated with the seller.
		 */
		location_id: FormControl<string | null | undefined>,

		/**
		 * The order in which results are listed:
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order: FormControl<string | null | undefined>,

		/**
		 * The exact amount in the `total_money` for a payment.
		 * Minimum: 0
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateListPaymentsRequestFormGroup() {
		return new FormGroup<ListPaymentsRequestFormProperties>({
			begin_time: new FormControl<string | null | undefined>(undefined),
			card_brand: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			last_4: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
			total: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
		});

	}


	/** Defines the response returned by [ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments). */
	export interface ListPaymentsResponse {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The requested list of payments. */
		payments?: Array<Payment>;
	}

	/** Defines the response returned by [ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments). */
	export interface ListPaymentsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListPaymentsResponseFormGroup() {
		return new FormGroup<ListPaymentsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the query parameters that can be included in
	 * a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
	 * Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
	 */
	export interface ListRefundsRequest {

		/**
		 * The beginning of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time minus one year.
		 */
		begin_time?: string | null;

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor?: string | null;

		/**
		 * The end of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time.
		 */
		end_time?: string | null;

		/**
		 * The order in which results are listed in the response (`ASC` for
		 * oldest first, `DESC` for newest first).
		 * Default value: `DESC`
		 */
		sort_order?: string | null;
	}

	/**
	 * Defines the query parameters that can be included in
	 * a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
	 * Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
	 */
	export interface ListRefundsRequestFormProperties {

		/**
		 * The beginning of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time minus one year.
		 */
		begin_time: FormControl<string | null | undefined>,

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The end of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time.
		 */
		end_time: FormControl<string | null | undefined>,

		/**
		 * The order in which results are listed in the response (`ASC` for
		 * oldest first, `DESC` for newest first).
		 * Default value: `DESC`
		 */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateListRefundsRequestFormGroup() {
		return new FormGroup<ListRefundsRequestFormProperties>({
			begin_time: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
	 * One of `errors` or `refunds` is present in a given response (never both).
	 */
	export interface ListRefundsResponse {

		/**
		 * A pagination cursor for retrieving the next set of results,
		 * if any remain. Provide this value as the `cursor` parameter in a subsequent
		 * request to this endpoint.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** An array of refunds that match your query. */
		refunds?: Array<Refund>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
	 * One of `errors` or `refunds` is present in a given response (never both).
	 */
	export interface ListRefundsResponseFormProperties {

		/**
		 * A pagination cursor for retrieving the next set of results,
		 * if any remain. Provide this value as the `cursor` parameter in a subsequent
		 * request to this endpoint.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListRefundsResponseFormGroup() {
		return new FormGroup<ListRefundsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a `ListSites` request. */
	export interface ListSitesRequest {
	}

	/** Represents a `ListSites` request. */
	export interface ListSitesRequestFormProperties {
	}
	export function CreateListSitesRequestFormGroup() {
		return new FormGroup<ListSitesRequestFormProperties>({
		});

	}


	/** Represents a `ListSites` response. The response can include either `sites` or `errors`. */
	export interface ListSitesResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The sites that belong to the seller. */
		sites?: Array<Site>;
	}

	/** Represents a `ListSites` response. The response can include either `sites` or `errors`. */
	export interface ListSitesResponseFormProperties {
	}
	export function CreateListSitesResponseFormGroup() {
		return new FormGroup<ListSitesResponseFormProperties>({
		});

	}


	/** Represents a Square Online site, which is an online store for a Square seller. */
	export interface Site {

		/** The timestamp of when the site was created, in RFC 3339 format. */
		created_at?: string | null;

		/** The domain of the site (without the protocol). For example, `mysite1.square.site`. */
		domain?: string | null;

		/**
		 * The Square-assigned ID of the site.
		 * Max length: 32
		 */
		id?: string | null;

		/** Indicates whether the site is published. */
		is_published?: boolean | null;

		/** The title of the site. */
		site_title?: string | null;

		/** The timestamp of when the site was last updated, in RFC 3339 format. */
		updated_at?: string | null;
	}

	/** Represents a Square Online site, which is an online store for a Square seller. */
	export interface SiteFormProperties {

		/** The timestamp of when the site was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The domain of the site (without the protocol). For example, `mysite1.square.site`. */
		domain: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID of the site.
		 * Max length: 32
		 */
		id: FormControl<string | null | undefined>,

		/** Indicates whether the site is published. */
		is_published: FormControl<boolean | null | undefined>,

		/** The title of the site. */
		site_title: FormControl<string | null | undefined>,

		/** The timestamp of when the site was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateSiteFormGroup() {
		return new FormGroup<SiteFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(32)]),
			is_published: new FormControl<boolean | null | undefined>(undefined),
			site_title: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines parameters in a
	 * [ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
	 * endpoint request.
	 */
	export interface ListSubscriptionEventsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The upper limit on the number of subscription events to return
		 * in the response.
		 * Default: `200`
		 * Minimum: 1
		 */
		limit?: number | null;
	}

	/**
	 * Defines parameters in a
	 * [ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
	 * endpoint request.
	 */
	export interface ListSubscriptionEventsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The upper limit on the number of subscription events to return
		 * in the response.
		 * Default: `200`
		 * Minimum: 1
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateListSubscriptionEventsRequestFormGroup() {
		return new FormGroup<ListSubscriptionEventsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
		});

	}


	/**
	 * Defines the fields that are included in the response from the
	 * [ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
	 * endpoint.
	 */
	export interface ListSubscriptionEventsResponse {

		/**
		 * When a response is truncated, it includes a cursor that you can
		 * use in a subsequent request to fetch the next set of events.
		 * If empty, this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The `SubscriptionEvents` retrieved. */
		subscription_events?: Array<SubscriptionEvent>;
	}

	/**
	 * Defines the fields that are included in the response from the
	 * [ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
	 * endpoint.
	 */
	export interface ListSubscriptionEventsResponseFormProperties {

		/**
		 * When a response is truncated, it includes a cursor that you can
		 * use in a subsequent request to fetch the next set of events.
		 * If empty, this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListSubscriptionEventsResponseFormGroup() {
		return new FormGroup<ListSubscriptionEventsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes changes to subscription and billing states. */
	export interface SubscriptionEvent {

		/**
		 * The date, in YYYY-MM-DD format (for
		 * example, 2013-01-15), when the subscription event went into effect.
		 * Required
		 */
		effective_date: string;

		/**
		 * The ID of the subscription event.
		 * Required
		 */
		id: string;
		info?: Info;

		/**
		 * The ID of the subscription plan associated with the subscription.
		 * Required
		 */
		plan_id: string;

		/**
		 * Type of the subscription event.
		 * Required
		 */
		subscription_event_type: string;
	}

	/** Describes changes to subscription and billing states. */
	export interface SubscriptionEventFormProperties {

		/**
		 * The date, in YYYY-MM-DD format (for
		 * example, 2013-01-15), when the subscription event went into effect.
		 * Required
		 */
		effective_date: FormControl<string | null | undefined>,

		/**
		 * The ID of the subscription event.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID of the subscription plan associated with the subscription.
		 * Required
		 */
		plan_id: FormControl<string | null | undefined>,

		/**
		 * Type of the subscription event.
		 * Required
		 */
		subscription_event_type: FormControl<string | null | undefined>,
	}
	export function CreateSubscriptionEventFormGroup() {
		return new FormGroup<SubscriptionEventFormProperties>({
			effective_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			plan_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subscription_event_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListTeamMemberBookingProfilesRequest {

		/** Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`). */
		bookable_only?: boolean | null;

		/** The cursor for paginating through the results. */
		cursor?: string | null;

		/** The maximum number of results to return. */
		limit?: number | null;

		/** Indicates whether to include only team members enabled at the given location in the returned result. */
		location_id?: string | null;
	}
	export interface ListTeamMemberBookingProfilesRequestFormProperties {

		/** Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`). */
		bookable_only: FormControl<boolean | null | undefined>,

		/** The cursor for paginating through the results. */
		cursor: FormControl<string | null | undefined>,

		/** The maximum number of results to return. */
		limit: FormControl<number | null | undefined>,

		/** Indicates whether to include only team members enabled at the given location in the returned result. */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateListTeamMemberBookingProfilesRequestFormGroup() {
		return new FormGroup<ListTeamMemberBookingProfilesRequestFormProperties>({
			bookable_only: new FormControl<boolean | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTeamMemberBookingProfilesResponse {

		/** The cursor for paginating through the results. */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The list of team member booking profiles. */
		team_member_booking_profiles?: Array<TeamMemberBookingProfile>;
	}
	export interface ListTeamMemberBookingProfilesResponseFormProperties {

		/** The cursor for paginating through the results. */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListTeamMemberBookingProfilesResponseFormGroup() {
		return new FormGroup<ListTeamMemberBookingProfilesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider. */
	export interface TeamMemberBookingProfile {

		/** The description of the team member. */
		description?: string | null;

		/** The display name of the team member. */
		display_name?: string | null;

		/** Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (`true) or not (`false`). */
		is_bookable?: boolean | null;

		/** The URL of the team member's image for the bookings profile. */
		profile_image_url?: string | null;

		/** The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object for the team member associated with the booking profile. */
		team_member_id?: string | null;
	}

	/** The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider. */
	export interface TeamMemberBookingProfileFormProperties {

		/** The description of the team member. */
		description: FormControl<string | null | undefined>,

		/** The display name of the team member. */
		display_name: FormControl<string | null | undefined>,

		/** Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (`true) or not (`false`). */
		is_bookable: FormControl<boolean | null | undefined>,

		/** The URL of the team member's image for the bookings profile. */
		profile_image_url: FormControl<string | null | undefined>,

		/** The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object for the team member associated with the booking profile. */
		team_member_id: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberBookingProfileFormGroup() {
		return new FormGroup<TeamMemberBookingProfileFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			display_name: new FormControl<string | null | undefined>(undefined),
			is_bookable: new FormControl<boolean | null | undefined>(undefined),
			profile_image_url: new FormControl<string | null | undefined>(undefined),
			team_member_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request for a set of `TeamMemberWage` objects. */
	export interface ListTeamMemberWagesRequest {

		/** A pointer to the next page of `EmployeeWage` results to fetch. */
		cursor?: string | null;

		/**
		 * The maximum number of `TeamMemberWage` results to return per page. The number can range between
		 * 1 and 200. The default is 200.
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit?: number | null;

		/**
		 * Filter the returned wages to only those that are associated with the
		 * specified team member.
		 */
		team_member_id?: string | null;
	}

	/** A request for a set of `TeamMemberWage` objects. */
	export interface ListTeamMemberWagesRequestFormProperties {

		/** A pointer to the next page of `EmployeeWage` results to fetch. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of `TeamMemberWage` results to return per page. The number can range between
		 * 1 and 200. The default is 200.
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * Filter the returned wages to only those that are associated with the
		 * specified team member.
		 */
		team_member_id: FormControl<string | null | undefined>,
	}
	export function CreateListTeamMemberWagesRequestFormGroup() {
		return new FormGroup<ListTeamMemberWagesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(200)]),
			team_member_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The response to a request for a set of `TeamMemberWage` objects. The response contains
	 * a set of `TeamMemberWage` objects.
	 */
	export interface ListTeamMemberWagesResponse {

		/**
		 * The value supplied in the subsequent request to fetch the next page
		 * of `TeamMemberWage` results.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** A page of `TeamMemberWage` results. */
		team_member_wages?: Array<TeamMemberWage>;
	}

	/**
	 * The response to a request for a set of `TeamMemberWage` objects. The response contains
	 * a set of `TeamMemberWage` objects.
	 */
	export interface ListTeamMemberWagesResponseFormProperties {

		/**
		 * The value supplied in the subsequent request to fetch the next page
		 * of `TeamMemberWage` results.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListTeamMemberWagesResponseFormGroup() {
		return new FormGroup<ListTeamMemberWagesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the query parameters that can be included in
	 * a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
	 * Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
	 */
	export interface ListTransactionsRequest {

		/**
		 * The beginning of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time minus one year.
		 */
		begin_time?: string | null;

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor?: string | null;

		/**
		 * The end of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time.
		 */
		end_time?: string | null;

		/**
		 * The order in which results are listed in the response (`ASC` for
		 * oldest first, `DESC` for newest first).
		 * Default value: `DESC`
		 */
		sort_order?: string | null;
	}

	/**
	 * Defines the query parameters that can be included in
	 * a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
	 * Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
	 */
	export interface ListTransactionsRequestFormProperties {

		/**
		 * The beginning of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time minus one year.
		 */
		begin_time: FormControl<string | null | undefined>,

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The end of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time.
		 */
		end_time: FormControl<string | null | undefined>,

		/**
		 * The order in which results are listed in the response (`ASC` for
		 * oldest first, `DESC` for newest first).
		 * Default value: `DESC`
		 */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateListTransactionsRequestFormGroup() {
		return new FormGroup<ListTransactionsRequestFormProperties>({
			begin_time: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
	 * One of `errors` or `transactions` is present in a given response (never both).
	 */
	export interface ListTransactionsResponse {

		/**
		 * A pagination cursor for retrieving the next set of results,
		 * if any remain. Provide this value as the `cursor` parameter in a subsequent
		 * request to this endpoint.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** An array of transactions that match your query. */
		transactions?: Array<Transaction>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
	 * One of `errors` or `transactions` is present in a given response (never both).
	 */
	export interface ListTransactionsResponseFormProperties {

		/**
		 * A pagination cursor for retrieving the next set of results,
		 * if any remain. Provide this value as the `cursor` parameter in a subsequent
		 * request to this endpoint.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListTransactionsResponseFormGroup() {
		return new FormGroup<ListTransactionsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request for a set of `WorkweekConfig` objects. */
	export interface ListWorkweekConfigsRequest {

		/** A pointer to the next page of `WorkweekConfig` results to fetch. */
		cursor?: string | null;

		/** The maximum number of `WorkweekConfigs` results to return per page. */
		limit?: number | null;
	}

	/** A request for a set of `WorkweekConfig` objects. */
	export interface ListWorkweekConfigsRequestFormProperties {

		/** A pointer to the next page of `WorkweekConfig` results to fetch. */
		cursor: FormControl<string | null | undefined>,

		/** The maximum number of `WorkweekConfigs` results to return per page. */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateListWorkweekConfigsRequestFormGroup() {
		return new FormGroup<ListWorkweekConfigsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * The response to a request for a set of `WorkweekConfig` objects. The response contains
	 * the requested `WorkweekConfig` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface ListWorkweekConfigsResponse {

		/**
		 * The value supplied in the subsequent request to fetch the next page of
		 * `EmployeeWage` results.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** A page of `EmployeeWage` results. */
		workweek_configs?: Array<WorkweekConfig>;
	}

	/**
	 * The response to a request for a set of `WorkweekConfig` objects. The response contains
	 * the requested `WorkweekConfig` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface ListWorkweekConfigsResponseFormProperties {

		/**
		 * The value supplied in the subsequent request to fetch the next page of
		 * `EmployeeWage` results.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateListWorkweekConfigsResponseFormGroup() {
		return new FormGroup<ListWorkweekConfigsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Sets the day of the week and hour of the day that a business starts a
	 * workweek. This is used to calculate overtime pay.
	 */
	export interface WorkweekConfig {

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		created_at?: string | null;

		/** The UUID for this object. */
		id?: string | null;

		/**
		 * The local time at which a business week ends. Represented as a
		 * string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are
		 * truncated).
		 * Required
		 * Min length: 1
		 */
		start_of_day_local_time: string;

		/**
		 * The day of the week on which a business week ends for
		 * compensation purposes.
		 * Required
		 */
		start_of_week: string;

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		updated_at?: string | null;

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If not provided,
		 * Square executes a blind write; potentially overwriting data from another
		 * write.
		 */
		version?: number | null;
	}

	/**
	 * Sets the day of the week and hour of the day that a business starts a
	 * workweek. This is used to calculate overtime pay.
	 */
	export interface WorkweekConfigFormProperties {

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		created_at: FormControl<string | null | undefined>,

		/** The UUID for this object. */
		id: FormControl<string | null | undefined>,

		/**
		 * The local time at which a business week ends. Represented as a
		 * string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are
		 * truncated).
		 * Required
		 * Min length: 1
		 */
		start_of_day_local_time: FormControl<string | null | undefined>,

		/**
		 * The day of the week on which a business week ends for
		 * compensation purposes.
		 * Required
		 */
		start_of_week: FormControl<string | null | undefined>,

		/** A read-only timestamp in RFC 3339 format; presented in UTC. */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If not provided,
		 * Square executes a blind write; potentially overwriting data from another
		 * write.
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateWorkweekConfigFormGroup() {
		return new FormGroup<WorkweekConfigFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			start_of_day_local_time: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			start_of_week: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The capabilities a location may have. */
	export enum LocationCapability { CREDIT_CARD_PROCESSING = 'CREDIT_CARD_PROCESSING', AUTOMATIC_TRANSFERS = 'AUTOMATIC_TRANSFERS' }


	/** The status of the location, whether a location is active or inactive. */
	export enum LocationStatus { ACTIVE = 'ACTIVE', INACTIVE = 'INACTIVE' }


	/** A location's physical or mobile type. */
	export enum LocationType { PHYSICAL = 'PHYSICAL', MOBILE = 'MOBILE' }


	/** The type of mapping. */
	export enum LoyaltyAccountMappingType { PHONE = 'PHONE' }


	/** Filter events by date time range. */
	export interface LoyaltyEventDateTimeFilter {

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 * Required
		 */
		created_at: TimeRange;
	}

	/** Filter events by date time range. */
	export interface LoyaltyEventDateTimeFilterFormProperties {
	}
	export function CreateLoyaltyEventDateTimeFilterFormGroup() {
		return new FormGroup<LoyaltyEventDateTimeFilterFormProperties>({
		});

	}


	/**
	 * The filtering criteria. If the request specifies multiple filters, 
	 * the endpoint uses a logical AND to evaluate them.
	 */
	export interface LoyaltyEventFilter {

		/** Filter events by date time range. */
		date_time_filter?: LoyaltyEventDateTimeFilter;

		/** Filter events by location. */
		location_filter?: LoyaltyEventLocationFilter;

		/** Filter events by loyalty account. */
		loyalty_account_filter?: LoyaltyEventLoyaltyAccountFilter;

		/** Filter events by the order associated with the event. */
		order_filter?: LoyaltyEventOrderFilter;

		/** Filter events by event type. */
		type_filter?: LoyaltyEventTypeFilter;
	}

	/**
	 * The filtering criteria. If the request specifies multiple filters, 
	 * the endpoint uses a logical AND to evaluate them.
	 */
	export interface LoyaltyEventFilterFormProperties {
	}
	export function CreateLoyaltyEventFilterFormGroup() {
		return new FormGroup<LoyaltyEventFilterFormProperties>({
		});

	}


	/** Filter events by location. */
	export interface LoyaltyEventLocationFilter {

		/**
		 * The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs for loyalty events to query.
		 * If multiple values are specified, the endpoint uses
		 * a logical OR to combine them.
		 * Required
		 */
		location_ids: Array<string>;
	}

	/** Filter events by location. */
	export interface LoyaltyEventLocationFilterFormProperties {
	}
	export function CreateLoyaltyEventLocationFilterFormGroup() {
		return new FormGroup<LoyaltyEventLocationFilterFormProperties>({
		});

	}


	/** Filter events by loyalty account. */
	export interface LoyaltyEventLoyaltyAccountFilter {

		/**
		 * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) associated with loyalty events.
		 * Required
		 * Min length: 1
		 */
		loyalty_account_id: string;
	}

	/** Filter events by loyalty account. */
	export interface LoyaltyEventLoyaltyAccountFilterFormProperties {

		/**
		 * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) associated with loyalty events.
		 * Required
		 * Min length: 1
		 */
		loyalty_account_id: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyEventLoyaltyAccountFilterFormGroup() {
		return new FormGroup<LoyaltyEventLoyaltyAccountFilterFormProperties>({
			loyalty_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Filter events by the order associated with the event. */
	export interface LoyaltyEventOrderFilter {

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) associated with the event.
		 * Required
		 * Min length: 1
		 */
		order_id: string;
	}

	/** Filter events by the order associated with the event. */
	export interface LoyaltyEventOrderFilterFormProperties {

		/**
		 * The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) associated with the event.
		 * Required
		 * Min length: 1
		 */
		order_id: FormControl<string | null | undefined>,
	}
	export function CreateLoyaltyEventOrderFilterFormGroup() {
		return new FormGroup<LoyaltyEventOrderFilterFormProperties>({
			order_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Filter events by event type. */
	export interface LoyaltyEventTypeFilter {

		/**
		 * The loyalty event types used to filter the result.
		 * If multiple values are specified, the endpoint uses a
		 * logical OR to combine them.
		 * Required
		 */
		types: Array<string>;
	}

	/** Filter events by event type. */
	export interface LoyaltyEventTypeFilterFormProperties {
	}
	export function CreateLoyaltyEventTypeFilterFormGroup() {
		return new FormGroup<LoyaltyEventTypeFilterFormProperties>({
		});

	}


	/** Represents a query used to search for loyalty events. */
	export interface LoyaltyEventQuery {

		/**
		 * The filtering criteria. If the request specifies multiple filters,
		 * the endpoint uses a logical AND to evaluate them.
		 */
		filter?: LoyaltyEventFilter;
	}

	/** Represents a query used to search for loyalty events. */
	export interface LoyaltyEventQueryFormProperties {
	}
	export function CreateLoyaltyEventQueryFormGroup() {
		return new FormGroup<LoyaltyEventQueryFormProperties>({
		});

	}


	/** Defines whether the event was generated by the Square Point of Sale. */
	export enum LoyaltyEventSource { SQUARE = 'SQUARE', LOYALTY_API = 'LOYALTY_API' }


	/** The type of the loyalty event. */
	export enum LoyaltyEventType { ACCUMULATE_POINTS = 'ACCUMULATE_POINTS', CREATE_REWARD = 'CREATE_REWARD', REDEEM_REWARD = 'REDEEM_REWARD', DELETE_REWARD = 'DELETE_REWARD', ADJUST_POINTS = 'ADJUST_POINTS', EXPIRE_POINTS = 'EXPIRE_POINTS', OTHER = 'OTHER' }


	/** The type of the accrual rule that defines how buyers can earn points. */
	export enum LoyaltyProgramAccrualRuleType { VISIT = 'VISIT', SPEND = 'SPEND', ITEM_VARIATION = 'ITEM_VARIATION', CATEGORY = 'CATEGORY' }


	/**
	 * Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. Discount details
	 * are now defined using a catalog pricing rule and other catalog objects. For more information, see
	 * [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
	 */
	export enum LoyaltyProgramRewardDefinitionScope { ORDER = 'ORDER', ITEM_VARIATION = 'ITEM_VARIATION', CATEGORY = 'CATEGORY' }


	/**
	 * The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. Discount details
	 * are now defined using a catalog pricing rule and other catalog objects. For more information, see
	 * [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
	 */
	export enum LoyaltyProgramRewardDefinitionType { FIXED_AMOUNT = 'FIXED_AMOUNT', FIXED_PERCENTAGE = 'FIXED_PERCENTAGE' }


	/** Indicates whether the program is currently active. */
	export enum LoyaltyProgramStatus { INACTIVE = 'INACTIVE', ACTIVE = 'ACTIVE' }


	/** The status of the loyalty reward. */
	export enum LoyaltyRewardStatus { ISSUED = 'ISSUED', REDEEMED = 'REDEEMED', DELETED = 'DELETED' }


	/** Unit of area used to measure a quantity. */
	export enum MeasurementUnitArea { IMPERIAL_ACRE = 'IMPERIAL_ACRE', IMPERIAL_SQUARE_INCH = 'IMPERIAL_SQUARE_INCH', IMPERIAL_SQUARE_FOOT = 'IMPERIAL_SQUARE_FOOT', IMPERIAL_SQUARE_YARD = 'IMPERIAL_SQUARE_YARD', IMPERIAL_SQUARE_MILE = 'IMPERIAL_SQUARE_MILE', METRIC_SQUARE_CENTIMETER = 'METRIC_SQUARE_CENTIMETER', METRIC_SQUARE_METER = 'METRIC_SQUARE_METER', METRIC_SQUARE_KILOMETER = 'METRIC_SQUARE_KILOMETER' }

	export enum MeasurementUnitGeneric { UNIT = 'UNIT' }


	/** The unit of length used to measure a quantity. */
	export enum MeasurementUnitLength { IMPERIAL_INCH = 'IMPERIAL_INCH', IMPERIAL_FOOT = 'IMPERIAL_FOOT', IMPERIAL_YARD = 'IMPERIAL_YARD', IMPERIAL_MILE = 'IMPERIAL_MILE', METRIC_MILLIMETER = 'METRIC_MILLIMETER', METRIC_CENTIMETER = 'METRIC_CENTIMETER', METRIC_METER = 'METRIC_METER', METRIC_KILOMETER = 'METRIC_KILOMETER' }


	/** Unit of time used to measure a quantity (a duration). */
	export enum MeasurementUnitTime { GENERIC_MILLISECOND = 'GENERIC_MILLISECOND', GENERIC_SECOND = 'GENERIC_SECOND', GENERIC_MINUTE = 'GENERIC_MINUTE', GENERIC_HOUR = 'GENERIC_HOUR', GENERIC_DAY = 'GENERIC_DAY' }


	/** Describes the type of this unit and indicates which field contains the unit information. This is an ‘open’ enum. */
	export enum MeasurementUnitUnitType { TYPE_CUSTOM = 'TYPE_CUSTOM', TYPE_AREA = 'TYPE_AREA', TYPE_LENGTH = 'TYPE_LENGTH', TYPE_VOLUME = 'TYPE_VOLUME', TYPE_WEIGHT = 'TYPE_WEIGHT', TYPE_GENERIC = 'TYPE_GENERIC' }


	/** The unit of volume used to measure a quantity. */
	export enum MeasurementUnitVolume { GENERIC_FLUID_OUNCE = 'GENERIC_FLUID_OUNCE', GENERIC_SHOT = 'GENERIC_SHOT', GENERIC_CUP = 'GENERIC_CUP', GENERIC_PINT = 'GENERIC_PINT', GENERIC_QUART = 'GENERIC_QUART', GENERIC_GALLON = 'GENERIC_GALLON', IMPERIAL_CUBIC_INCH = 'IMPERIAL_CUBIC_INCH', IMPERIAL_CUBIC_FOOT = 'IMPERIAL_CUBIC_FOOT', IMPERIAL_CUBIC_YARD = 'IMPERIAL_CUBIC_YARD', METRIC_MILLILITER = 'METRIC_MILLILITER', METRIC_LITER = 'METRIC_LITER' }


	/** Unit of weight used to measure a quantity. */
	export enum MeasurementUnitWeight { IMPERIAL_WEIGHT_OUNCE = 'IMPERIAL_WEIGHT_OUNCE', IMPERIAL_POUND = 'IMPERIAL_POUND', IMPERIAL_STONE = 'IMPERIAL_STONE', METRIC_MILLIGRAM = 'METRIC_MILLIGRAM', METRIC_GRAM = 'METRIC_GRAM', METRIC_KILOGRAM = 'METRIC_KILOGRAM' }

	export enum MerchantStatus { ACTIVE = 'ACTIVE', INACTIVE = 'INACTIVE' }

	export interface ObtainTokenRequest {

		/**
		 * The Square-issued ID of your application, available from the
		 * [developer dashboard](https://developer.squareup.com/apps).
		 * Required
		 * Max length: 191
		 */
		client_id: string;

		/**
		 * The Square-issued application secret for your application, available
		 * from the [developer dashboard](https://developer.squareup.com/apps).
		 * Required
		 * Max length: 1024
		 * Min length: 2
		 */
		client_secret: string;

		/**
		 * The authorization code to exchange.
		 * This is required if `grant_type` is set to `authorization_code`, to indicate that
		 * the application wants to exchange an authorization code for an OAuth access token.
		 * Max length: 191
		 * Min length: 0
		 */
		code?: string | null;

		/**
		 * Specifies the method to request an OAuth access token.
		 * Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
		 * Required
		 * Max length: 20
		 * Min length: 10
		 */
		grant_type: string;

		/**
		 * Legacy OAuth access token obtained using a Connect API version prior
		 * to 2019-03-13. This parameter is required if `grant_type` is set to
		 * `migration_token` to indicate that the application wants to get a replacement
		 * OAuth access token. The response also returns a refresh token.
		 * For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
		 * Max length: 1024
		 * Min length: 2
		 */
		migration_token?: string | null;

		/**
		 * The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).
		 * Max length: 2048
		 * Min length: 0
		 */
		redirect_uri?: string | null;

		/**
		 * A valid refresh token for generating a new OAuth access token.
		 * A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
		 * Max length: 1024
		 * Min length: 2
		 */
		refresh_token?: string | null;

		/**
		 * A JSON list of strings representing the permissions the application is requesting.
		 * For example: "`["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"]`"
		 * The access token returned in the response is granted the permissions
		 * that comprise the intersection between the requested list of permissions, and those
		 * that belong to the provided refresh token.
		 */
		scopes?: Array<string>;

		/**
		 * A boolean indicating a request for a short-lived access token.
		 * The short-lived access token returned in the response will expire in 24 hours.
		 */
		short_lived?: boolean | null;
	}
	export interface ObtainTokenRequestFormProperties {

		/**
		 * The Square-issued ID of your application, available from the
		 * [developer dashboard](https://developer.squareup.com/apps).
		 * Required
		 * Max length: 191
		 */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The Square-issued application secret for your application, available
		 * from the [developer dashboard](https://developer.squareup.com/apps).
		 * Required
		 * Max length: 1024
		 * Min length: 2
		 */
		client_secret: FormControl<string | null | undefined>,

		/**
		 * The authorization code to exchange.
		 * This is required if `grant_type` is set to `authorization_code`, to indicate that
		 * the application wants to exchange an authorization code for an OAuth access token.
		 * Max length: 191
		 * Min length: 0
		 */
		code: FormControl<string | null | undefined>,

		/**
		 * Specifies the method to request an OAuth access token.
		 * Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
		 * Required
		 * Max length: 20
		 * Min length: 10
		 */
		grant_type: FormControl<string | null | undefined>,

		/**
		 * Legacy OAuth access token obtained using a Connect API version prior
		 * to 2019-03-13. This parameter is required if `grant_type` is set to
		 * `migration_token` to indicate that the application wants to get a replacement
		 * OAuth access token. The response also returns a refresh token.
		 * For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
		 * Max length: 1024
		 * Min length: 2
		 */
		migration_token: FormControl<string | null | undefined>,

		/**
		 * The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).
		 * Max length: 2048
		 * Min length: 0
		 */
		redirect_uri: FormControl<string | null | undefined>,

		/**
		 * A valid refresh token for generating a new OAuth access token.
		 * A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
		 * Max length: 1024
		 * Min length: 2
		 */
		refresh_token: FormControl<string | null | undefined>,

		/**
		 * A boolean indicating a request for a short-lived access token.
		 * The short-lived access token returned in the response will expire in 24 hours.
		 */
		short_lived: FormControl<boolean | null | undefined>,
	}
	export function CreateObtainTokenRequestFormGroup() {
		return new FormGroup<ObtainTokenRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(191)]),
			client_secret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(1024)]),
			code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0), Validators.maxLength(191)]),
			grant_type: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(10), Validators.maxLength(20)]),
			migration_token: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(1024)]),
			redirect_uri: new FormControl<string | null | undefined>(undefined, [Validators.minLength(0), Validators.maxLength(2048)]),
			refresh_token: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(1024)]),
			short_lived: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ObtainTokenResponse {

		/**
		 * A valid OAuth access token. OAuth access tokens are 64 bytes long.
		 * Provide the access token in a header with every request to Connect API
		 * endpoints. See [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough)
		 * for more information.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token?: string | null;

		/**
		 * The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
		 * Max length: 48
		 * Min length: 20
		 */
		expires_at?: string | null;

		/**
		 * Then OpenID token belonging to this this person. Only present if the
		 * OPENID scope is included in the authorize request.
		 */
		id_token?: string | null;

		/**
		 * The ID of the authorizing merchant's business.
		 * Max length: 191
		 * Min length: 8
		 */
		merchant_id?: string | null;

		/**
		 * __LEGACY FIELD__. The ID of the subscription plan the merchant signed
		 * up for. Only present if the merchant signed up for a subscription during
		 * authorization.
		 */
		plan_id?: string | null;

		/**
		 * A refresh token. OAuth refresh tokens are 64 bytes long.
		 * For more information, see [OAuth access token management](https://developer.squareup.com/docs/oauth-api/how-it-works#oauth-access-token-management).
		 * Max length: 1024
		 * Min length: 2
		 */
		refresh_token?: string | null;

		/**
		 * A boolean indicating the access token is a short-lived access token.
		 * The short-lived access token returned in the response will expire in 24 hours.
		 */
		short_lived?: boolean | null;

		/**
		 * __LEGACY FIELD__. The ID of a subscription plan the merchant signed up
		 * for. Only present if the merchant signed up for a subscription during authorization.
		 */
		subscription_id?: string | null;

		/**
		 * This value is always _bearer_.
		 * Max length: 10
		 * Min length: 2
		 */
		token_type?: string | null;
	}
	export interface ObtainTokenResponseFormProperties {

		/**
		 * A valid OAuth access token. OAuth access tokens are 64 bytes long.
		 * Provide the access token in a header with every request to Connect API
		 * endpoints. See [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough)
		 * for more information.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
		 * Max length: 48
		 * Min length: 20
		 */
		expires_at: FormControl<string | null | undefined>,

		/**
		 * Then OpenID token belonging to this this person. Only present if the
		 * OPENID scope is included in the authorize request.
		 */
		id_token: FormControl<string | null | undefined>,

		/**
		 * The ID of the authorizing merchant's business.
		 * Max length: 191
		 * Min length: 8
		 */
		merchant_id: FormControl<string | null | undefined>,

		/**
		 * __LEGACY FIELD__. The ID of the subscription plan the merchant signed
		 * up for. Only present if the merchant signed up for a subscription during
		 * authorization.
		 */
		plan_id: FormControl<string | null | undefined>,

		/**
		 * A refresh token. OAuth refresh tokens are 64 bytes long.
		 * For more information, see [OAuth access token management](https://developer.squareup.com/docs/oauth-api/how-it-works#oauth-access-token-management).
		 * Max length: 1024
		 * Min length: 2
		 */
		refresh_token: FormControl<string | null | undefined>,

		/**
		 * A boolean indicating the access token is a short-lived access token.
		 * The short-lived access token returned in the response will expire in 24 hours.
		 */
		short_lived: FormControl<boolean | null | undefined>,

		/**
		 * __LEGACY FIELD__. The ID of a subscription plan the merchant signed up
		 * for. Only present if the merchant signed up for a subscription during authorization.
		 */
		subscription_id: FormControl<string | null | undefined>,

		/**
		 * This value is always _bearer_.
		 * Max length: 10
		 * Min length: 2
		 */
		token_type: FormControl<string | null | undefined>,
	}
	export function CreateObtainTokenResponseFormGroup() {
		return new FormGroup<ObtainTokenResponseFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(1024)]),
			expires_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(20), Validators.maxLength(48)]),
			id_token: new FormControl<string | null | undefined>(undefined),
			merchant_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(8), Validators.maxLength(191)]),
			plan_id: new FormControl<string | null | undefined>(undefined),
			refresh_token: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(1024)]),
			short_lived: new FormControl<boolean | null | undefined>(undefined),
			subscription_id: new FormControl<string | null | undefined>(undefined),
			token_type: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(10)]),
		});

	}

	export interface OnboardAppointmentsRequest {
	}
	export interface OnboardAppointmentsRequestFormProperties {
	}
	export function CreateOnboardAppointmentsRequestFormGroup() {
		return new FormGroup<OnboardAppointmentsRequestFormProperties>({
		});

	}

	export interface OrderCreated {

		/** The timestamp for when the order was created, in RFC 3339 format. */
		created_at?: string | null;

		/** The ID of the seller location that this order is associated with. */
		location_id?: string | null;

		/** The order's unique ID. */
		order_id?: string | null;

		/** The state of the order. */
		state?: string | null;

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version?: number | null;
	}
	export interface OrderCreatedFormProperties {

		/** The timestamp for when the order was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The ID of the seller location that this order is associated with. */
		location_id: FormControl<string | null | undefined>,

		/** The order's unique ID. */
		order_id: FormControl<string | null | undefined>,

		/** The state of the order. */
		state: FormControl<string | null | undefined>,

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateOrderCreatedFormGroup() {
		return new FormGroup<OrderCreatedFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			order_id: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface OrderCreatedObject {
		order_created?: OrderCreated;
	}
	export interface OrderCreatedObjectFormProperties {
	}
	export function CreateOrderCreatedObjectFormGroup() {
		return new FormGroup<OrderCreatedObjectFormProperties>({
		});

	}


	/**
	 * A lightweight description of an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that is returned when 
	 * `returned_entries` is `true` on a [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
	 */
	export interface OrderEntry {

		/** The location ID the order belongs to. */
		location_id?: string | null;

		/** The ID of the order. */
		order_id?: string | null;

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version?: number | null;
	}

	/**
	 * A lightweight description of an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that is returned when 
	 * `returned_entries` is `true` on a [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
	 */
	export interface OrderEntryFormProperties {

		/** The location ID the order belongs to. */
		location_id: FormControl<string | null | undefined>,

		/** The ID of the order. */
		order_id: FormControl<string | null | undefined>,

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateOrderEntryFormGroup() {
		return new FormGroup<OrderEntryFormProperties>({
			location_id: new FormControl<string | null | undefined>(undefined),
			order_id: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The schedule type of the pickup fulfillment. */
	export enum OrderFulfillmentPickupDetailsScheduleType { SCHEDULED = 'SCHEDULED', ASAP = 'ASAP' }


	/** The current state of this fulfillment. */
	export enum OrderFulfillmentState { PROPOSED = 'PROPOSED', RESERVED = 'RESERVED', PREPARED = 'PREPARED', COMPLETED = 'COMPLETED', CANCELED = 'CANCELED', FAILED = 'FAILED' }


	/** The type of fulfillment. */
	export enum OrderFulfillmentType { PICKUP = 'PICKUP', SHIPMENT = 'SHIPMENT' }

	export interface OrderFulfillmentUpdated {

		/** The timestamp for when the order was created, in RFC 3339 format. */
		created_at?: string | null;

		/** The fulfillments that were updated with this version change. */
		fulfillment_update?: Array<OrderFulfillmentUpdatedUpdate>;

		/** The ID of the seller location that this order is associated with. */
		location_id?: string | null;

		/** The order's unique ID. */
		order_id?: string | null;

		/** The state of the order. */
		state?: string | null;

		/** The timestamp for when the order was last updated, in RFC 3339 format. */
		updated_at?: string | null;

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version?: number | null;
	}
	export interface OrderFulfillmentUpdatedFormProperties {

		/** The timestamp for when the order was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The ID of the seller location that this order is associated with. */
		location_id: FormControl<string | null | undefined>,

		/** The order's unique ID. */
		order_id: FormControl<string | null | undefined>,

		/** The state of the order. */
		state: FormControl<string | null | undefined>,

		/** The timestamp for when the order was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateOrderFulfillmentUpdatedFormGroup() {
		return new FormGroup<OrderFulfillmentUpdatedFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			order_id: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Information about fulfillment updates. */
	export interface OrderFulfillmentUpdatedUpdate {

		/** A unique ID that identifies the fulfillment only within this order. */
		fulfillment_uid?: string | null;

		/**
		 * The state of the fulfillment after the change. The state might be equal to `old_state` if a non-state
		 * field was changed on the fulfillment (such as the tracking number).
		 */
		new_state?: string | null;

		/**
		 * The state of the fulfillment before the change.
		 * The state is not populated if the fulfillment is created with this new `Order` version.
		 */
		old_state?: string | null;
	}

	/** Information about fulfillment updates. */
	export interface OrderFulfillmentUpdatedUpdateFormProperties {

		/** A unique ID that identifies the fulfillment only within this order. */
		fulfillment_uid: FormControl<string | null | undefined>,

		/**
		 * The state of the fulfillment after the change. The state might be equal to `old_state` if a non-state
		 * field was changed on the fulfillment (such as the tracking number).
		 */
		new_state: FormControl<string | null | undefined>,

		/**
		 * The state of the fulfillment before the change.
		 * The state is not populated if the fulfillment is created with this new `Order` version.
		 */
		old_state: FormControl<string | null | undefined>,
	}
	export function CreateOrderFulfillmentUpdatedUpdateFormGroup() {
		return new FormGroup<OrderFulfillmentUpdatedUpdateFormProperties>({
			fulfillment_uid: new FormControl<string | null | undefined>(undefined),
			new_state: new FormControl<string | null | undefined>(undefined),
			old_state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface OrderFulfillmentUpdatedObject {
		order_fulfillment_updated?: OrderFulfillmentUpdated;
	}
	export interface OrderFulfillmentUpdatedObjectFormProperties {
	}
	export function CreateOrderFulfillmentUpdatedObjectFormGroup() {
		return new FormGroup<OrderFulfillmentUpdatedObjectFormProperties>({
		});

	}


	/** Indicates whether this is a line-item or order-level discount. */
	export enum OrderLineItemDiscountScope { OTHER_DISCOUNT_SCOPE = 'OTHER_DISCOUNT_SCOPE', LINE_ITEM = 'LINE_ITEM', ORDER = 'ORDER' }


	/** Indicates how the discount is applied to the associated line item or order. */
	export enum OrderLineItemDiscountType { UNKNOWN_DISCOUNT = 'UNKNOWN_DISCOUNT', FIXED_PERCENTAGE = 'FIXED_PERCENTAGE', FIXED_AMOUNT = 'FIXED_AMOUNT', VARIABLE_PERCENTAGE = 'VARIABLE_PERCENTAGE', VARIABLE_AMOUNT = 'VARIABLE_AMOUNT' }


	/** Represents the line item type. */
	export enum OrderLineItemItemType { ITEM = 'ITEM', CUSTOM_AMOUNT = 'CUSTOM_AMOUNT', GIFT_CARD = 'GIFT_CARD' }


	/** Indicates whether this is a line-item or order-level tax. */
	export enum OrderLineItemTaxScope { OTHER_TAX_SCOPE = 'OTHER_TAX_SCOPE', LINE_ITEM = 'LINE_ITEM', ORDER = 'ORDER' }


	/** Indicates how the tax is applied to the associated line item or order. */
	export enum OrderLineItemTaxType { UNKNOWN_TAX = 'UNKNOWN_TAX', ADDITIVE = 'ADDITIVE', INCLUSIVE = 'INCLUSIVE' }


	/**
	 * Represents a phase in the process of calculating order totals.
	 * Service charges are applied after the indicated phase.
	 * [Read more about how order totals are calculated.](https://developer.squareup.com/docs/orders-api/how-it-works#how-totals-are-calculated)
	 */
	export enum OrderServiceChargeCalculationPhase { SUBTOTAL_PHASE = 'SUBTOTAL_PHASE', TOTAL_PHASE = 'TOTAL_PHASE' }

	export enum OrderServiceChargeType { AUTO_GRATUITY = 'AUTO_GRATUITY', CUSTOM = 'CUSTOM' }


	/** The state of the order. */
	export enum OrderState { OPEN = 'OPEN', COMPLETED = 'COMPLETED', CANCELED = 'CANCELED' }

	export interface OrderUpdated {

		/** The timestamp for when the order was created, in RFC 3339 format. */
		created_at?: string | null;

		/** The ID of the seller location that this order is associated with. */
		location_id?: string | null;

		/** The order's unique ID. */
		order_id?: string | null;

		/** The state of the order. */
		state?: string | null;

		/** The timestamp for when the order was last updated, in RFC 3339 format. */
		updated_at?: string | null;

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version?: number | null;
	}
	export interface OrderUpdatedFormProperties {

		/** The timestamp for when the order was created, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/** The ID of the seller location that this order is associated with. */
		location_id: FormControl<string | null | undefined>,

		/** The order's unique ID. */
		order_id: FormControl<string | null | undefined>,

		/** The state of the order. */
		state: FormControl<string | null | undefined>,

		/** The timestamp for when the order was last updated, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * The version number, which is incremented each time an update is committed to the order.
		 * Orders that were not created through the API do not include a version number and
		 * therefore cannot be updated.
		 * [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateOrderUpdatedFormGroup() {
		return new FormGroup<OrderUpdatedFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
			order_id: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface OrderUpdatedObject {
		order_updated?: OrderUpdated;
	}
	export interface OrderUpdatedObjectFormProperties {
	}
	export function CreateOrderUpdatedObjectFormGroup() {
		return new FormGroup<OrderUpdatedObjectFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in requests to the
	 * [PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
	 */
	export interface PayOrderRequest {

		/**
		 * A value you specify that uniquely identifies this request among requests you have sent. If
		 * you are unsure whether a particular payment request was completed successfully, you can reattempt
		 * it with the same idempotency key without worrying about duplicate payments.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: string;

		/** The version of the order being paid. If not supplied, the latest version will be paid. */
		order_version?: number | null;

		/**
		 * The IDs of the [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) to collect.
		 * The payment total must match the order total.
		 */
		payment_ids?: Array<string>;
	}

	/**
	 * Defines the fields that are included in requests to the
	 * [PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
	 */
	export interface PayOrderRequestFormProperties {

		/**
		 * A value you specify that uniquely identifies this request among requests you have sent. If
		 * you are unsure whether a particular payment request was completed successfully, you can reattempt
		 * it with the same idempotency key without worrying about duplicate payments.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Max length: 192
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/** The version of the order being paid. If not supplied, the latest version will be paid. */
		order_version: FormControl<number | null | undefined>,
	}
	export function CreatePayOrderRequestFormGroup() {
		return new FormGroup<PayOrderRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(192)]),
			order_version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of a request to the
	 * [PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
	 */
	export interface PayOrderResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;
	}

	/**
	 * Defines the fields that are included in the response body of a request to the
	 * [PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
	 */
	export interface PayOrderResponseFormProperties {
	}
	export function CreatePayOrderResponseFormGroup() {
		return new FormGroup<PayOrderResponseFormProperties>({
		});

	}

	export interface PaymentOptions {

		/**
		 * Indicates whether the `Payment` objects created from this `TerminalCheckout` are automatically
		 * `COMPLETED` or left in an `APPROVED` state for later modification.
		 */
		autocomplete?: boolean | null;
	}
	export interface PaymentOptionsFormProperties {

		/**
		 * Indicates whether the `Payment` objects created from this `TerminalCheckout` are automatically
		 * `COMPLETED` or left in an `APPROVED` state for later modification.
		 */
		autocomplete: FormControl<boolean | null | undefined>,
	}
	export function CreatePaymentOptionsFormGroup() {
		return new FormGroup<PaymentOptionsFormProperties>({
			autocomplete: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Indicates the Square product used to generate an inventory change. */
	export enum Product { SQUARE_POS = 'SQUARE_POS', EXTERNAL_API = 'EXTERNAL_API', BILLING = 'BILLING', APPOINTMENTS = 'APPOINTMENTS', INVOICES = 'INVOICES', ONLINE_STORE = 'ONLINE_STORE', PAYROLL = 'PAYROLL', DASHBOARD = 'DASHBOARD', ITEM_LIBRARY_IMPORT = 'ITEM_LIBRARY_IMPORT', OTHER = 'OTHER' }

	export enum ProductType { TERMINAL_API = 'TERMINAL_API' }


	/** Describes a `PublishInvoice` request. */
	export interface PublishInvoiceRequest {

		/**
		 * A unique string that identifies the `PublishInvoice` request. If you do not
		 * provide `idempotency_key` (or provide an empty string as the value), the endpoint
		 * treats each request as independent.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Max length: 128
		 */
		idempotency_key?: string | null;

		/**
		 * The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to publish.
		 * This must match the current version of the invoice; otherwise, the request is rejected.
		 * Required
		 */
		version: number;
	}

	/** Describes a `PublishInvoice` request. */
	export interface PublishInvoiceRequestFormProperties {

		/**
		 * A unique string that identifies the `PublishInvoice` request. If you do not
		 * provide `idempotency_key` (or provide an empty string as the value), the endpoint
		 * treats each request as independent.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to publish.
		 * This must match the current version of the invoice; otherwise, the request is rejected.
		 * Required
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreatePublishInvoiceRequestFormGroup() {
		return new FormGroup<PublishInvoiceRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(128)]),
			version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Describes a `PublishInvoice` response. */
	export interface PublishInvoiceResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Stores information about an invoice. You use the Invoices API to create and manage
		 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		 */
		invoice?: Invoice;
	}

	/** Describes a `PublishInvoice` response. */
	export interface PublishInvoiceResponseFormProperties {
	}
	export function CreatePublishInvoiceResponseFormGroup() {
		return new FormGroup<PublishInvoiceResponseFormProperties>({
		});

	}


	/** A whole number or unreduced fractional ratio. */
	export interface QuantityRatio {

		/** The whole or fractional quantity as the numerator. */
		quantity?: number | null;

		/**
		 * The whole or fractional quantity as the denominator.
		 * In the case of fractional quantity this field is the denominator and quantity is the numerator.
		 * When unspecified, the value is `1`. For example, when `quantity=3` and `quantity_donominator` is unspecified,
		 * the quantity ratio is `3` or `3/1`.
		 */
		quantity_denominator?: number | null;
	}

	/** A whole number or unreduced fractional ratio. */
	export interface QuantityRatioFormProperties {

		/** The whole or fractional quantity as the numerator. */
		quantity: FormControl<number | null | undefined>,

		/**
		 * The whole or fractional quantity as the denominator.
		 * In the case of fractional quantity this field is the denominator and quantity is the numerator.
		 * When unspecified, the value is `1`. For example, when `quantity=3` and `quantity_donominator` is unspecified,
		 * the quantity ratio is `3` or `3/1`.
		 */
		quantity_denominator: FormControl<number | null | undefined>,
	}
	export function CreateQuantityRatioFormGroup() {
		return new FormGroup<QuantityRatioFormProperties>({
			quantity: new FormControl<number | null | undefined>(undefined),
			quantity_denominator: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface Reason {
	}
	export interface ReasonFormProperties {
	}
	export function CreateReasonFormGroup() {
		return new FormGroup<ReasonFormProperties>({
		});

	}


	/** A request to redeem a loyalty reward. */
	export interface RedeemLoyaltyRewardRequest {

		/**
		 * A unique string that identifies this `RedeemLoyaltyReward` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the reward is redeemed.
		 * Required
		 * Min length: 1
		 */
		location_id: string;
	}

	/** A request to redeem a loyalty reward. */
	export interface RedeemLoyaltyRewardRequestFormProperties {

		/**
		 * A unique string that identifies this `RedeemLoyaltyReward` request.
		 * Keys can be any valid string, but must be unique for every request.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the reward is redeemed.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateRedeemLoyaltyRewardRequestFormGroup() {
		return new FormGroup<RedeemLoyaltyRewardRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** A response that includes the `LoyaltyEvent` published for redeeming the reward. */
	export interface RedeemLoyaltyRewardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Provides information about a loyalty event.
		 * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
		 */
		event?: LoyaltyEvent;
	}

	/** A response that includes the `LoyaltyEvent` published for redeeming the reward. */
	export interface RedeemLoyaltyRewardResponseFormProperties {
	}
	export function CreateRedeemLoyaltyRewardResponseFormGroup() {
		return new FormGroup<RedeemLoyaltyRewardResponseFormProperties>({
		});

	}


	/** Describes a request to refund a payment using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment). */
	export interface RefundPaymentRequest {

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 * Required
		 */
		amount_money: Money;

		/**
		 * Represents an amount of money. `Money` fields can be signed or unsigned.
		 * Fields that do not explicitly define whether they are signed or unsigned are
		 * considered unsigned and can only hold positive amounts. For signed fields, the
		 * sign of the value indicates the purpose of the money transfer. See
		 * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
		 * for more information.
		 */
		app_fee_money?: Money;

		/**
		 * A unique string that identifies this `RefundPayment` request. The key can be any valid string
		 * but must be unique for every `RefundPayment` request.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The unique ID of the payment being refunded.
		 * Required
		 * Min length: 1
		 */
		payment_id: string;

		/**
		 * A description of the reason for the refund.
		 * Max length: 192
		 */
		reason?: string | null;
	}

	/** Describes a request to refund a payment using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment). */
	export interface RefundPaymentRequestFormProperties {

		/**
		 * A unique string that identifies this `RefundPayment` request. The key can be any valid string
		 * but must be unique for every `RefundPayment` request.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Required
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The unique ID of the payment being refunded.
		 * Required
		 * Min length: 1
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A description of the reason for the refund.
		 * Max length: 192
		 */
		reason: FormControl<string | null | undefined>,
	}
	export function CreateRefundPaymentRequestFormGroup() {
		return new FormGroup<RefundPaymentRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
		});

	}


	/**
	 * Defines the response returned by 
	 * [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment).
	 * If there are errors processing the request, the `refund` field might not be
	 * present, or it might be present with a status of `FAILED`.
	 */
	export interface RefundPaymentResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a refund of a payment made using Square. Contains information about
		 * the original payment and the amount of money refunded.
		 */
		refund?: PaymentRefund;
	}

	/**
	 * Defines the response returned by 
	 * [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment).
	 * If there are errors processing the request, the `refund` field might not be
	 * present, or it might be present with a status of `FAILED`.
	 */
	export interface RefundPaymentResponseFormProperties {
	}
	export function CreateRefundPaymentResponseFormGroup() {
		return new FormGroup<RefundPaymentResponseFormProperties>({
		});

	}


	/** Indicates a refund's current status. */
	export enum RefundStatus { PENDING = 'PENDING', APPROVED = 'APPROVED', REJECTED = 'REJECTED', FAILED = 'FAILED' }


	/**
	 * Defines the parameters that can be included in the body of
	 * a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
	 */
	export interface RegisterDomainRequest {

		/**
		 * A domain name as described in RFC-1034 that will be registered with ApplePay.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		domain_name: string;
	}

	/**
	 * Defines the parameters that can be included in the body of
	 * a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
	 */
	export interface RegisterDomainRequestFormProperties {

		/**
		 * A domain name as described in RFC-1034 that will be registered with ApplePay.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		domain_name: FormControl<string | null | undefined>,
	}
	export function CreateRegisterDomainRequestFormGroup() {
		return new FormGroup<RegisterDomainRequestFormProperties>({
			domain_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
	 * Either `errors` or `status` are present in a given response (never both).
	 */
	export interface RegisterDomainResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * The status of the domain registration.
		 * See [RegisterDomainResponseStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/RegisterDomainResponseStatus) for possible values.
		 */
		status?: string | null;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
	 * Either `errors` or `status` are present in a given response (never both).
	 */
	export interface RegisterDomainResponseFormProperties {

		/**
		 * The status of the domain registration.
		 * See [RegisterDomainResponseStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/RegisterDomainResponseStatus) for possible values.
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateRegisterDomainResponseFormGroup() {
		return new FormGroup<RegisterDomainResponseFormProperties>({
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The status of the domain registration. */
	export enum RegisterDomainResponseStatus { PENDING = 'PENDING', VERIFIED = 'VERIFIED' }


	/**
	 * Defines the fields that are included in the request body of
	 * a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer) endpoint.
	 */
	export interface RemoveGroupFromCustomerRequest {
	}

	/**
	 * Defines the fields that are included in the request body of
	 * a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer) endpoint.
	 */
	export interface RemoveGroupFromCustomerRequestFormProperties {
	}
	export function CreateRemoveGroupFromCustomerRequestFormGroup() {
		return new FormGroup<RemoveGroupFromCustomerRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer)
	 * endpoint.
	 */
	export interface RemoveGroupFromCustomerResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer)
	 * endpoint.
	 */
	export interface RemoveGroupFromCustomerResponseFormProperties {
	}
	export function CreateRemoveGroupFromCustomerResponseFormGroup() {
		return new FormGroup<RemoveGroupFromCustomerResponseFormProperties>({
		});

	}

	export interface RenewTokenRequest {

		/**
		 * The token you want to renew.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token?: string | null;
	}
	export interface RenewTokenRequestFormProperties {

		/**
		 * The token you want to renew.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token: FormControl<string | null | undefined>,
	}
	export function CreateRenewTokenRequestFormGroup() {
		return new FormGroup<RenewTokenRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(1024)]),
		});

	}

	export interface RenewTokenResponse {

		/**
		 * The renewed access token.
		 * This value might be different from the `access_token` you provided in your request.
		 * You provide this token in a header with every request to Connect API endpoints.
		 * See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token?: string | null;

		/**
		 * The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
		 * Max length: 48
		 * Min length: 20
		 */
		expires_at?: string | null;

		/**
		 * The ID of the authorizing merchant's business.
		 * Max length: 191
		 * Min length: 8
		 */
		merchant_id?: string | null;

		/**
		 * __LEGACY FIELD__. The ID of the subscription plan the merchant signed
		 * up for. Only present if the merchant signed up for a subscription during
		 * authorization.
		 */
		plan_id?: string | null;

		/**
		 * __LEGACY FIELD__. The ID of the merchant subscription associated with
		 * the authorization. Only present if the merchant signed up for a subscription
		 * during authorization..
		 */
		subscription_id?: string | null;

		/**
		 * This value is always _bearer_.
		 * Max length: 10
		 * Min length: 2
		 */
		token_type?: string | null;
	}
	export interface RenewTokenResponseFormProperties {

		/**
		 * The renewed access token.
		 * This value might be different from the `access_token` you provided in your request.
		 * You provide this token in a header with every request to Connect API endpoints.
		 * See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
		 * Max length: 48
		 * Min length: 20
		 */
		expires_at: FormControl<string | null | undefined>,

		/**
		 * The ID of the authorizing merchant's business.
		 * Max length: 191
		 * Min length: 8
		 */
		merchant_id: FormControl<string | null | undefined>,

		/**
		 * __LEGACY FIELD__. The ID of the subscription plan the merchant signed
		 * up for. Only present if the merchant signed up for a subscription during
		 * authorization.
		 */
		plan_id: FormControl<string | null | undefined>,

		/**
		 * __LEGACY FIELD__. The ID of the merchant subscription associated with
		 * the authorization. Only present if the merchant signed up for a subscription
		 * during authorization..
		 */
		subscription_id: FormControl<string | null | undefined>,

		/**
		 * This value is always _bearer_.
		 * Max length: 10
		 * Min length: 2
		 */
		token_type: FormControl<string | null | undefined>,
	}
	export function CreateRenewTokenResponseFormGroup() {
		return new FormGroup<RenewTokenResponseFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(1024)]),
			expires_at: new FormControl<string | null | undefined>(undefined, [Validators.minLength(20), Validators.maxLength(48)]),
			merchant_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(8), Validators.maxLength(191)]),
			plan_id: new FormControl<string | null | undefined>(undefined),
			subscription_id: new FormControl<string | null | undefined>(undefined),
			token_type: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(10)]),
		});

	}


	/**
	 * Defines parameters in a
	 * [ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
	 * request.
	 */
	export interface ResumeSubscriptionRequest {
	}

	/**
	 * Defines parameters in a
	 * [ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
	 * request.
	 */
	export interface ResumeSubscriptionRequestFormProperties {
	}
	export function CreateResumeSubscriptionRequestFormGroup() {
		return new FormGroup<ResumeSubscriptionRequestFormProperties>({
		});

	}


	/**
	 * Defines parameters in a
	 * [ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
	 * response.
	 */
	export interface ResumeSubscriptionResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a customer subscription to a subscription plan.
		 * For an overview of the `Subscription` type, see
		 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		 */
		subscription?: Subscription;
	}

	/**
	 * Defines parameters in a
	 * [ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
	 * response.
	 */
	export interface ResumeSubscriptionResponseFormProperties {
	}
	export function CreateResumeSubscriptionResponseFormGroup() {
		return new FormGroup<ResumeSubscriptionResponseFormProperties>({
		});

	}

	export interface RetrieveBookingRequest {
	}
	export interface RetrieveBookingRequestFormProperties {
	}
	export function CreateRetrieveBookingRequestFormGroup() {
		return new FormGroup<RetrieveBookingRequestFormProperties>({
		});

	}

	export interface RetrieveBookingResponse {

		/**
		 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		 * at a given location to a requesting customer in one or more appointment segments.
		 */
		booking?: Booking;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveBookingResponseFormProperties {
	}
	export function CreateRetrieveBookingResponseFormGroup() {
		return new FormGroup<RetrieveBookingResponseFormProperties>({
		});

	}

	export interface RetrieveBusinessBookingProfileRequest {
	}
	export interface RetrieveBusinessBookingProfileRequestFormProperties {
	}
	export function CreateRetrieveBusinessBookingProfileRequestFormGroup() {
		return new FormGroup<RetrieveBusinessBookingProfileRequestFormProperties>({
		});

	}

	export interface RetrieveBusinessBookingProfileResponse {
		business_booking_profile?: BusinessBookingProfile;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveBusinessBookingProfileResponseFormProperties {
	}
	export function CreateRetrieveBusinessBookingProfileResponseFormGroup() {
		return new FormGroup<RetrieveBusinessBookingProfileResponseFormProperties>({
		});

	}


	/**
	 * Retrieves details for a specific Card. Accessible via
	 * HTTP requests at GET https://connect.squareup.com/v2/cards/{card_id}
	 */
	export interface RetrieveCardRequest {
	}

	/**
	 * Retrieves details for a specific Card. Accessible via
	 * HTTP requests at GET https://connect.squareup.com/v2/cards/{card_id}
	 */
	export interface RetrieveCardRequestFormProperties {
	}
	export function CreateRetrieveCardRequestFormGroup() {
		return new FormGroup<RetrieveCardRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RetrieveCard](#endpoint-cards-retrievecard) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface RetrieveCardResponse {

		/**
		 * Represents the payment details of a card to be used for payments. These
		 * details are determined by the payment token generated by Web Payments SDK.
		 */
		card?: Card;

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RetrieveCard](#endpoint-cards-retrievecard) endpoint.
	 * Note: if there are errors processing the request, the card field will not be
	 * present.
	 */
	export interface RetrieveCardResponseFormProperties {
	}
	export function CreateRetrieveCardResponseFormGroup() {
		return new FormGroup<RetrieveCardResponseFormProperties>({
		});

	}

	export interface RetrieveCashDrawerShiftRequest {

		/**
		 * The ID of the location to retrieve cash drawer shifts from.
		 * Required
		 * Min length: 1
		 */
		location_id: string;
	}
	export interface RetrieveCashDrawerShiftRequestFormProperties {

		/**
		 * The ID of the location to retrieve cash drawer shifts from.
		 * Required
		 * Min length: 1
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateRetrieveCashDrawerShiftRequestFormGroup() {
		return new FormGroup<RetrieveCashDrawerShiftRequestFormProperties>({
			location_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface RetrieveCashDrawerShiftResponse {

		/**
		 * This model gives the details of a cash drawer shift.
		 * The cash_payment_money, cash_refund_money, cash_paid_in_money,
		 * and cash_paid_out_money fields are all computed by summing their respective
		 * event types.
		 */
		cash_drawer_shift?: CashDrawerShift;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveCashDrawerShiftResponseFormProperties {
	}
	export function CreateRetrieveCashDrawerShiftResponseFormGroup() {
		return new FormGroup<RetrieveCashDrawerShiftResponseFormProperties>({
		});

	}

	export interface RetrieveCatalogObjectRequest {

		/**
		 * Requests objects as of a specific version of the catalog. This allows you to retrieve historical
		 * versions of objects. The value to retrieve a specific version of an object can be found
		 * in the version field of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s.
		 */
		catalog_version?: number | null;

		/**
		 * If `true`, the response will include additional objects that are related to the
		 * requested object, as follows:
		 * If the `object` field of the response contains a `CatalogItem`, its associated
		 * `CatalogCategory`, `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will
		 * be returned in the `related_objects` field of the response. If the `object` field of
		 * the response contains a `CatalogItemVariation`, its parent `CatalogItem` will be returned
		 * in the `related_objects` field of the response.
		 * Default value: `false`
		 */
		include_related_objects?: boolean | null;
	}
	export interface RetrieveCatalogObjectRequestFormProperties {

		/**
		 * Requests objects as of a specific version of the catalog. This allows you to retrieve historical
		 * versions of objects. The value to retrieve a specific version of an object can be found
		 * in the version field of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s.
		 */
		catalog_version: FormControl<number | null | undefined>,

		/**
		 * If `true`, the response will include additional objects that are related to the
		 * requested object, as follows:
		 * If the `object` field of the response contains a `CatalogItem`, its associated
		 * `CatalogCategory`, `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will
		 * be returned in the `related_objects` field of the response. If the `object` field of
		 * the response contains a `CatalogItemVariation`, its parent `CatalogItem` will be returned
		 * in the `related_objects` field of the response.
		 * Default value: `false`
		 */
		include_related_objects: FormControl<boolean | null | undefined>,
	}
	export function CreateRetrieveCatalogObjectRequestFormGroup() {
		return new FormGroup<RetrieveCatalogObjectRequestFormProperties>({
			catalog_version: new FormControl<number | null | undefined>(undefined),
			include_related_objects: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface RetrieveCatalogObjectResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * The wrapper object for the Catalog entries of a given object type.
		 * The type of a particular `CatalogObject` is determined by the value of the
		 * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
		 * For example, the following list shows some instances of `CatalogObject` of a given `type` and
		 * their corresponding data attribute that can be set:
		 * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
		 * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
		 * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
		 * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
		 * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
		 * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
		 * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
		 * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
		 * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
		 * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
		 * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
		 * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
		 * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
		 * For a more detailed discussion of the Catalog data model, please see the
		 * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
		 */
		object?: CatalogObject;

		/** A list of `CatalogObject`s referenced by the object in the `object` field. */
		related_objects?: Array<CatalogObject>;
	}
	export interface RetrieveCatalogObjectResponseFormProperties {
	}
	export function CreateRetrieveCatalogObjectResponseFormGroup() {
		return new FormGroup<RetrieveCatalogObjectResponseFormProperties>({
		});

	}


	/**
	 * Defines the fields that can be included in a request to the
	 * [RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
	 */
	export interface RetrieveCustomerGroupRequest {
	}

	/**
	 * Defines the fields that can be included in a request to the
	 * [RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
	 */
	export interface RetrieveCustomerGroupRequestFormProperties {
	}
	export function CreateRetrieveCustomerGroupRequestFormGroup() {
		return new FormGroup<RetrieveCustomerGroupRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
	 * Either `errors` or `group` is present in a given response (never both).
	 */
	export interface RetrieveCustomerGroupResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a group of customer profiles.
		 * Customer groups can be created, be modified, and have their membership defined using
		 * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		 */
		group?: CustomerGroup;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
	 * Either `errors` or `group` is present in a given response (never both).
	 */
	export interface RetrieveCustomerGroupResponseFormProperties {
	}
	export function CreateRetrieveCustomerGroupResponseFormGroup() {
		return new FormGroup<RetrieveCustomerGroupResponseFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in requests to the `RetrieveCustomer`
	 * endpoint.
	 */
	export interface RetrieveCustomerRequest {
	}

	/**
	 * Defines the fields that are included in requests to the `RetrieveCustomer`
	 * endpoint.
	 */
	export interface RetrieveCustomerRequestFormProperties {
	}
	export function CreateRetrieveCustomerRequestFormGroup() {
		return new FormGroup<RetrieveCustomerRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `RetrieveCustomer` endpoint.
	 * Either `errors` or `customer` is present in a given response (never both).
	 */
	export interface RetrieveCustomerResponse {

		/** Represents a Square customer profile in the Customer Directory of a Square seller. */
		customer?: Customer;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `RetrieveCustomer` endpoint.
	 * Either `errors` or `customer` is present in a given response (never both).
	 */
	export interface RetrieveCustomerResponseFormProperties {
	}
	export function CreateRetrieveCustomerResponseFormGroup() {
		return new FormGroup<RetrieveCustomerResponseFormProperties>({
		});

	}


	/** Defines the valid parameters for requests to the `RetrieveCustomerSegmentRequest` endpoint. */
	export interface RetrieveCustomerSegmentRequest {
	}

	/** Defines the valid parameters for requests to the `RetrieveCustomerSegmentRequest` endpoint. */
	export interface RetrieveCustomerSegmentRequestFormProperties {
	}
	export function CreateRetrieveCustomerSegmentRequestFormGroup() {
		return new FormGroup<RetrieveCustomerSegmentRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body for requests to the `RetrieveCustomerSegment` endpoint.
	 * Either `errors` or `segment` is present in a given response (never both).
	 */
	export interface RetrieveCustomerSegmentResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a group of customer profiles that match one or more predefined filter criteria.
		 * Segments (also known as Smart Groups) are defined and created within the Customer Directory in the
		 * Square Seller Dashboard or Point of Sale.
		 */
		segment?: CustomerSegment;
	}

	/**
	 * Defines the fields that are included in the response body for requests to the `RetrieveCustomerSegment` endpoint.
	 * Either `errors` or `segment` is present in a given response (never both).
	 */
	export interface RetrieveCustomerSegmentResponseFormProperties {
	}
	export function CreateRetrieveCustomerSegmentResponseFormGroup() {
		return new FormGroup<RetrieveCustomerSegmentResponseFormProperties>({
		});

	}


	/** Defines the parameters for a `RetrieveDisputeEvidence` request. */
	export interface RetrieveDisputeEvidenceRequest {
	}

	/** Defines the parameters for a `RetrieveDisputeEvidence` request. */
	export interface RetrieveDisputeEvidenceRequestFormProperties {
	}
	export function CreateRetrieveDisputeEvidenceRequestFormGroup() {
		return new FormGroup<RetrieveDisputeEvidenceRequestFormProperties>({
		});

	}


	/** Defines the fields in a `RetrieveDisputeEvidence` response. */
	export interface RetrieveDisputeEvidenceResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
		evidence?: DisputeEvidence;
	}

	/** Defines the fields in a `RetrieveDisputeEvidence` response. */
	export interface RetrieveDisputeEvidenceResponseFormProperties {
	}
	export function CreateRetrieveDisputeEvidenceResponseFormGroup() {
		return new FormGroup<RetrieveDisputeEvidenceResponseFormProperties>({
		});

	}


	/** Defines the request parameters for the `RetrieveDispute` endpoint. */
	export interface RetrieveDisputeRequest {
	}

	/** Defines the request parameters for the `RetrieveDispute` endpoint. */
	export interface RetrieveDisputeRequestFormProperties {
	}
	export function CreateRetrieveDisputeRequestFormGroup() {
		return new FormGroup<RetrieveDisputeRequestFormProperties>({
		});

	}


	/** Defines fields in a `RetrieveDispute` response. */
	export interface RetrieveDisputeResponse {

		/** Represents a dispute a cardholder initiated with their bank. */
		dispute?: Dispute;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Defines fields in a `RetrieveDispute` response. */
	export interface RetrieveDisputeResponseFormProperties {
	}
	export function CreateRetrieveDisputeResponseFormGroup() {
		return new FormGroup<RetrieveDisputeResponseFormProperties>({
		});

	}

	export interface RetrieveEmployeeRequest {
	}
	export interface RetrieveEmployeeRequestFormProperties {
	}
	export function CreateRetrieveEmployeeRequestFormGroup() {
		return new FormGroup<RetrieveEmployeeRequestFormProperties>({
		});

	}

	export interface RetrieveEmployeeResponse {

		/** An employee object that is used by the external API. */
		employee?: Employee;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveEmployeeResponseFormProperties {
	}
	export function CreateRetrieveEmployeeResponseFormGroup() {
		return new FormGroup<RetrieveEmployeeResponseFormProperties>({
		});

	}


	/** A request to retrieve gift cards by their GANs. */
	export interface RetrieveGiftCardFromGANRequest {

		/**
		 * The gift card account number (GAN) of the gift card to retrieve.
		 * The maximum length of a GAN is 255 digits to account for third-party GANs that have been imported.
		 * Square-issued gift cards have 16-digit GANs.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		gan: string;
	}

	/** A request to retrieve gift cards by their GANs. */
	export interface RetrieveGiftCardFromGANRequestFormProperties {

		/**
		 * The gift card account number (GAN) of the gift card to retrieve.
		 * The maximum length of a GAN is 255 digits to account for third-party GANs that have been imported.
		 * Square-issued gift cards have 16-digit GANs.
		 * Required
		 * Max length: 255
		 * Min length: 1
		 */
		gan: FormControl<string | null | undefined>,
	}
	export function CreateRetrieveGiftCardFromGANRequestFormGroup() {
		return new FormGroup<RetrieveGiftCardFromGANRequestFormProperties>({
			gan: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255)]),
		});

	}


	/**
	 * A response that contains a `GiftCard`. This response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface RetrieveGiftCardFromGANResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a Square gift card. */
		gift_card?: GiftCard;
	}

	/**
	 * A response that contains a `GiftCard`. This response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface RetrieveGiftCardFromGANResponseFormProperties {
	}
	export function CreateRetrieveGiftCardFromGANResponseFormGroup() {
		return new FormGroup<RetrieveGiftCardFromGANResponseFormProperties>({
		});

	}


	/** A request to retrieve gift cards by using nonces. */
	export interface RetrieveGiftCardFromNonceRequest {

		/**
		 * The nonce of the gift card to retrieve.
		 * Required
		 * Min length: 1
		 */
		nonce: string;
	}

	/** A request to retrieve gift cards by using nonces. */
	export interface RetrieveGiftCardFromNonceRequestFormProperties {

		/**
		 * The nonce of the gift card to retrieve.
		 * Required
		 * Min length: 1
		 */
		nonce: FormControl<string | null | undefined>,
	}
	export function CreateRetrieveGiftCardFromNonceRequestFormGroup() {
		return new FormGroup<RetrieveGiftCardFromNonceRequestFormProperties>({
			nonce: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/**
	 * A response that contains a `GiftCard`. The response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface RetrieveGiftCardFromNonceResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a Square gift card. */
		gift_card?: GiftCard;
	}

	/**
	 * A response that contains a `GiftCard`. The response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface RetrieveGiftCardFromNonceResponseFormProperties {
	}
	export function CreateRetrieveGiftCardFromNonceResponseFormGroup() {
		return new FormGroup<RetrieveGiftCardFromNonceResponseFormProperties>({
		});

	}


	/** A request to retrieve digital gift cards. */
	export interface RetrieveGiftCardRequest {
	}

	/** A request to retrieve digital gift cards. */
	export interface RetrieveGiftCardRequestFormProperties {
	}
	export function CreateRetrieveGiftCardRequestFormGroup() {
		return new FormGroup<RetrieveGiftCardRequestFormProperties>({
		});

	}


	/**
	 * A response that contains a `GiftCard`. The response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface RetrieveGiftCardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a Square gift card. */
		gift_card?: GiftCard;
	}

	/**
	 * A response that contains a `GiftCard`. The response might contain a set of `Error` objects
	 * if the request resulted in errors.
	 */
	export interface RetrieveGiftCardResponseFormProperties {
	}
	export function CreateRetrieveGiftCardResponseFormGroup() {
		return new FormGroup<RetrieveGiftCardResponseFormProperties>({
		});

	}

	export interface RetrieveInventoryAdjustmentRequest {
	}
	export interface RetrieveInventoryAdjustmentRequestFormProperties {
	}
	export function CreateRetrieveInventoryAdjustmentRequestFormGroup() {
		return new FormGroup<RetrieveInventoryAdjustmentRequestFormProperties>({
		});

	}

	export interface RetrieveInventoryAdjustmentResponse {

		/**
		 * Represents a change in state or quantity of product inventory at a
		 * particular time and location.
		 */
		adjustment?: InventoryAdjustment;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveInventoryAdjustmentResponseFormProperties {
	}
	export function CreateRetrieveInventoryAdjustmentResponseFormGroup() {
		return new FormGroup<RetrieveInventoryAdjustmentResponseFormProperties>({
		});

	}

	export interface RetrieveInventoryChangesRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/**
		 * The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		 * list. An empty list queries all locations.
		 */
		location_ids?: string | null;
	}
	export interface RetrieveInventoryChangesRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		 * list. An empty list queries all locations.
		 */
		location_ids: FormControl<string | null | undefined>,
	}
	export function CreateRetrieveInventoryChangesRequestFormGroup() {
		return new FormGroup<RetrieveInventoryChangesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			location_ids: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RetrieveInventoryChangesResponse {

		/** The set of inventory changes for the requested object and locations. */
		changes?: Array<InventoryChange>;

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveInventoryChangesResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateRetrieveInventoryChangesResponseFormGroup() {
		return new FormGroup<RetrieveInventoryChangesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RetrieveInventoryCountRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/**
		 * The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		 * list. An empty list queries all locations.
		 */
		location_ids?: string | null;
	}
	export interface RetrieveInventoryCountRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		 * list. An empty list queries all locations.
		 */
		location_ids: FormControl<string | null | undefined>,
	}
	export function CreateRetrieveInventoryCountRequestFormGroup() {
		return new FormGroup<RetrieveInventoryCountRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			location_ids: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RetrieveInventoryCountResponse {

		/**
		 * The current calculated inventory counts for the requested object and
		 * locations.
		 */
		counts?: Array<InventoryCount>;

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveInventoryCountResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateRetrieveInventoryCountResponseFormGroup() {
		return new FormGroup<RetrieveInventoryCountResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RetrieveInventoryPhysicalCountRequest {
	}
	export interface RetrieveInventoryPhysicalCountRequestFormProperties {
	}
	export function CreateRetrieveInventoryPhysicalCountRequestFormGroup() {
		return new FormGroup<RetrieveInventoryPhysicalCountRequestFormProperties>({
		});

	}

	export interface RetrieveInventoryPhysicalCountResponse {

		/**
		 * Represents the quantity of an item variation that is physically present
		 * at a specific location, verified by a seller or a seller's employee. For example,
		 * a physical count might come from an employee counting the item variations on
		 * hand or from syncing with an external system.
		 */
		count?: InventoryPhysicalCount;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface RetrieveInventoryPhysicalCountResponseFormProperties {
	}
	export function CreateRetrieveInventoryPhysicalCountResponseFormGroup() {
		return new FormGroup<RetrieveInventoryPhysicalCountResponseFormProperties>({
		});

	}

	export interface RetrieveInventoryTransferRequest {
	}
	export interface RetrieveInventoryTransferRequestFormProperties {
	}
	export function CreateRetrieveInventoryTransferRequestFormGroup() {
		return new FormGroup<RetrieveInventoryTransferRequestFormProperties>({
		});

	}

	export interface RetrieveInventoryTransferResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents the transfer of a quantity of product inventory at a
		 * particular time from one location to another.
		 */
		transfer?: InventoryTransfer;
	}
	export interface RetrieveInventoryTransferResponseFormProperties {
	}
	export function CreateRetrieveInventoryTransferResponseFormGroup() {
		return new FormGroup<RetrieveInventoryTransferResponseFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the request body for
	 * the __RetrieveLocation__ endpoint.
	 */
	export interface RetrieveLocationRequest {
	}

	/**
	 * Defines the fields that are included in the request body for
	 * the __RetrieveLocation__ endpoint.
	 */
	export interface RetrieveLocationRequestFormProperties {
	}
	export function CreateRetrieveLocationRequestFormGroup() {
		return new FormGroup<RetrieveLocationRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that the
	 * [RetrieveLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/retrieve-location) endpoint returns
	 * in a response.
	 */
	export interface RetrieveLocationResponse {

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
		location?: Location;
	}

	/**
	 * Defines the fields that the
	 * [RetrieveLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/retrieve-location) endpoint returns
	 * in a response.
	 */
	export interface RetrieveLocationResponseFormProperties {
	}
	export function CreateRetrieveLocationResponseFormGroup() {
		return new FormGroup<RetrieveLocationResponseFormProperties>({
		});

	}


	/** A request to retrieve a loyalty account. */
	export interface RetrieveLoyaltyAccountRequest {
	}

	/** A request to retrieve a loyalty account. */
	export interface RetrieveLoyaltyAccountRequestFormProperties {
	}
	export function CreateRetrieveLoyaltyAccountRequestFormGroup() {
		return new FormGroup<RetrieveLoyaltyAccountRequestFormProperties>({
		});

	}


	/** A response that includes the loyalty account. */
	export interface RetrieveLoyaltyAccountResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Describes a loyalty account. For more information, see
		 * [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
		 */
		loyalty_account?: LoyaltyAccount;
	}

	/** A response that includes the loyalty account. */
	export interface RetrieveLoyaltyAccountResponseFormProperties {
	}
	export function CreateRetrieveLoyaltyAccountResponseFormGroup() {
		return new FormGroup<RetrieveLoyaltyAccountResponseFormProperties>({
		});

	}


	/** A request to retrieve the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) that belongs to a seller. A seller can have only one loyalty program. */
	export interface RetrieveLoyaltyProgramRequest {
	}

	/** A request to retrieve the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) that belongs to a seller. A seller can have only one loyalty program. */
	export interface RetrieveLoyaltyProgramRequestFormProperties {
	}
	export function CreateRetrieveLoyaltyProgramRequestFormGroup() {
		return new FormGroup<RetrieveLoyaltyProgramRequestFormProperties>({
		});

	}


	/** A response that contains the loyalty program. */
	export interface RetrieveLoyaltyProgramResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards.
		 * Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard.
		 * For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
		 */
		program?: LoyaltyProgram;
	}

	/** A response that contains the loyalty program. */
	export interface RetrieveLoyaltyProgramResponseFormProperties {
	}
	export function CreateRetrieveLoyaltyProgramResponseFormGroup() {
		return new FormGroup<RetrieveLoyaltyProgramResponseFormProperties>({
		});

	}


	/** A request to retrieve a loyalty reward. */
	export interface RetrieveLoyaltyRewardRequest {
	}

	/** A request to retrieve a loyalty reward. */
	export interface RetrieveLoyaltyRewardRequestFormProperties {
	}
	export function CreateRetrieveLoyaltyRewardRequestFormGroup() {
		return new FormGroup<RetrieveLoyaltyRewardRequestFormProperties>({
		});

	}


	/** A response that includes the loyalty reward. */
	export interface RetrieveLoyaltyRewardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards). */
		reward?: LoyaltyReward;
	}

	/** A response that includes the loyalty reward. */
	export interface RetrieveLoyaltyRewardResponseFormProperties {
	}
	export function CreateRetrieveLoyaltyRewardResponseFormGroup() {
		return new FormGroup<RetrieveLoyaltyRewardResponseFormProperties>({
		});

	}


	/** Request object for the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint. */
	export interface RetrieveMerchantRequest {
	}

	/** Request object for the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint. */
	export interface RetrieveMerchantRequestFormProperties {
	}
	export function CreateRetrieveMerchantRequestFormGroup() {
		return new FormGroup<RetrieveMerchantRequestFormProperties>({
		});

	}


	/** The response object returned by the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint. */
	export interface RetrieveMerchantResponse {

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;

		/** Represents a Square seller. */
		merchant?: Merchant;
	}

	/** The response object returned by the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint. */
	export interface RetrieveMerchantResponseFormProperties {
	}
	export function CreateRetrieveMerchantResponseFormGroup() {
		return new FormGroup<RetrieveMerchantResponseFormProperties>({
		});

	}

	export interface RetrieveObsMigrationProfileRequest {
	}
	export interface RetrieveObsMigrationProfileRequestFormProperties {
	}
	export function CreateRetrieveObsMigrationProfileRequestFormGroup() {
		return new FormGroup<RetrieveObsMigrationProfileRequestFormProperties>({
		});

	}

	export interface RetrieveOrderRequest {
	}
	export interface RetrieveOrderRequestFormProperties {
	}
	export function CreateRetrieveOrderRequestFormGroup() {
		return new FormGroup<RetrieveOrderRequestFormProperties>({
		});

	}

	export interface RetrieveOrderResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;
	}
	export interface RetrieveOrderResponseFormProperties {
	}
	export function CreateRetrieveOrderResponseFormGroup() {
		return new FormGroup<RetrieveOrderResponseFormProperties>({
		});

	}


	/** Represents a `RetrieveSnippet` request. */
	export interface RetrieveSnippetRequest {
	}

	/** Represents a `RetrieveSnippet` request. */
	export interface RetrieveSnippetRequestFormProperties {
	}
	export function CreateRetrieveSnippetRequestFormGroup() {
		return new FormGroup<RetrieveSnippetRequestFormProperties>({
		});

	}


	/** Represents a `RetrieveSnippet` response. The response can include either `snippet` or `errors`. */
	export interface RetrieveSnippetResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */
		snippet?: Snippet;
	}

	/** Represents a `RetrieveSnippet` response. The response can include either `snippet` or `errors`. */
	export interface RetrieveSnippetResponseFormProperties {
	}
	export function CreateRetrieveSnippetResponseFormGroup() {
		return new FormGroup<RetrieveSnippetResponseFormProperties>({
		});

	}


	/** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */
	export interface Snippet {

		/**
		 * The snippet code, which can contain valid HTML, JavaScript, or both.
		 * Required
		 * Max length: 65535
		 * Min length: 1
		 */
		content: string;

		/** The timestamp of when the snippet was initially added to the site, in RFC 3339 format. */
		created_at?: string | null;

		/**
		 * The Square-assigned ID for the snippet.
		 * Max length: 48
		 */
		id?: string | null;

		/** The ID of the site that contains the snippet. */
		site_id?: string | null;

		/** The timestamp of when the snippet was last updated on the site, in RFC 3339 format. */
		updated_at?: string | null;
	}

	/** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */
	export interface SnippetFormProperties {

		/**
		 * The snippet code, which can contain valid HTML, JavaScript, or both.
		 * Required
		 * Max length: 65535
		 * Min length: 1
		 */
		content: FormControl<string | null | undefined>,

		/** The timestamp of when the snippet was initially added to the site, in RFC 3339 format. */
		created_at: FormControl<string | null | undefined>,

		/**
		 * The Square-assigned ID for the snippet.
		 * Max length: 48
		 */
		id: FormControl<string | null | undefined>,

		/** The ID of the site that contains the snippet. */
		site_id: FormControl<string | null | undefined>,

		/** The timestamp of when the snippet was last updated on the site, in RFC 3339 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateSnippetFormGroup() {
		return new FormGroup<SnippetFormProperties>({
			content: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(65535)]),
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(48)]),
			site_id: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines parameters in a
	 * [RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint request.
	 */
	export interface RetrieveSubscriptionRequest {
	}

	/**
	 * Defines parameters in a
	 * [RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint request.
	 */
	export interface RetrieveSubscriptionRequestFormProperties {
	}
	export function CreateRetrieveSubscriptionRequestFormGroup() {
		return new FormGroup<RetrieveSubscriptionRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response from the
	 * [RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint.
	 */
	export interface RetrieveSubscriptionResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a customer subscription to a subscription plan.
		 * For an overview of the `Subscription` type, see
		 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		 */
		subscription?: Subscription;
	}

	/**
	 * Defines the fields that are included in the response from the
	 * [RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint.
	 */
	export interface RetrieveSubscriptionResponseFormProperties {
	}
	export function CreateRetrieveSubscriptionResponseFormGroup() {
		return new FormGroup<RetrieveSubscriptionResponseFormProperties>({
		});

	}

	export interface RetrieveTeamMemberBookingProfileRequest {
	}
	export interface RetrieveTeamMemberBookingProfileRequestFormProperties {
	}
	export function CreateRetrieveTeamMemberBookingProfileRequestFormGroup() {
		return new FormGroup<RetrieveTeamMemberBookingProfileRequestFormProperties>({
		});

	}

	export interface RetrieveTeamMemberBookingProfileResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider. */
		team_member_booking_profile?: TeamMemberBookingProfile;
	}
	export interface RetrieveTeamMemberBookingProfileResponseFormProperties {
	}
	export function CreateRetrieveTeamMemberBookingProfileResponseFormGroup() {
		return new FormGroup<RetrieveTeamMemberBookingProfileResponseFormProperties>({
		});

	}


	/** Represents a retrieve request for a `TeamMember` object. */
	export interface RetrieveTeamMemberRequest {
	}

	/** Represents a retrieve request for a `TeamMember` object. */
	export interface RetrieveTeamMemberRequestFormProperties {
	}
	export function CreateRetrieveTeamMemberRequestFormGroup() {
		return new FormGroup<RetrieveTeamMemberRequestFormProperties>({
		});

	}


	/** Represents a response from a retrieve request containing a `TeamMember` object or error messages. */
	export interface RetrieveTeamMemberResponse {

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** A record representing an individual team member for a business. */
		team_member?: TeamMember;
	}

	/** Represents a response from a retrieve request containing a `TeamMember` object or error messages. */
	export interface RetrieveTeamMemberResponseFormProperties {
	}
	export function CreateRetrieveTeamMemberResponseFormGroup() {
		return new FormGroup<RetrieveTeamMemberResponseFormProperties>({
		});

	}

	export interface RetrieveTransactionRequest {
	}
	export interface RetrieveTransactionRequestFormProperties {
	}
	export function CreateRetrieveTransactionRequestFormGroup() {
		return new FormGroup<RetrieveTransactionRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction) endpoint.
	 * One of `errors` or `transaction` is present in a given response (never both).
	 */
	export interface RetrieveTransactionResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a transaction processed with Square, either with the
		 * Connect API or with Square Point of Sale.
		 * The `tenders` field of this object lists all methods of payment used to pay in
		 * the transaction.
		 */
		transaction?: Transaction;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction) endpoint.
	 * One of `errors` or `transaction` is present in a given response (never both).
	 */
	export interface RetrieveTransactionResponseFormProperties {
	}
	export function CreateRetrieveTransactionResponseFormGroup() {
		return new FormGroup<RetrieveTransactionResponseFormProperties>({
		});

	}


	/** Represents a retrieve request for the wage setting of a team member. */
	export interface RetrieveWageSettingRequest {
	}

	/** Represents a retrieve request for the wage setting of a team member. */
	export interface RetrieveWageSettingRequestFormProperties {
	}
	export function CreateRetrieveWageSettingRequestFormGroup() {
		return new FormGroup<RetrieveWageSettingRequestFormProperties>({
		});

	}


	/** Represents a response from a retrieve request containing the specified `WageSetting` object or error messages. */
	export interface RetrieveWageSettingResponse {

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** An object representing a team member's wage information. */
		wage_setting?: WageSetting;
	}

	/** Represents a response from a retrieve request containing the specified `WageSetting` object or error messages. */
	export interface RetrieveWageSettingResponseFormProperties {
	}
	export function CreateRetrieveWageSettingResponseFormGroup() {
		return new FormGroup<RetrieveWageSettingResponseFormProperties>({
		});

	}


	/** An object representing a team member's wage information. */
	export interface WageSetting {

		/**
		 * The timestamp, in RFC 3339 format, describing when the wage setting object was created.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		created_at?: string | null;

		/** Whether the team member is exempt from the overtime rules of the seller's country. */
		is_overtime_exempt?: boolean | null;

		/**
		 * Required. The ordered list of jobs that the team member is assigned to.
		 * The first job assignment is considered the team member's primary job.
		 * The minimum length is 1 and the maximum length is 12.
		 */
		job_assignments?: Array<JobAssignment>;

		/** The unique ID of the `TeamMember` whom this wage setting describes. */
		team_member_id?: string | null;

		/**
		 * The timestamp, in RFC 3339 format, describing when the wage setting object was last updated.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		updated_at?: string | null;

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If not provided,
		 * Square executes a blind write, potentially overwriting data from another write. For more information,
		 * see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).
		 */
		version?: number | null;
	}

	/** An object representing a team member's wage information. */
	export interface WageSettingFormProperties {

		/**
		 * The timestamp, in RFC 3339 format, describing when the wage setting object was created.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		created_at: FormControl<string | null | undefined>,

		/** Whether the team member is exempt from the overtime rules of the seller's country. */
		is_overtime_exempt: FormControl<boolean | null | undefined>,

		/** The unique ID of the `TeamMember` whom this wage setting describes. */
		team_member_id: FormControl<string | null | undefined>,

		/**
		 * The timestamp, in RFC 3339 format, describing when the wage setting object was last updated.
		 * For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
		 */
		updated_at: FormControl<string | null | undefined>,

		/**
		 * Used for resolving concurrency issues. The request fails if the version
		 * provided does not match the server version at the time of the request. If not provided,
		 * Square executes a blind write, potentially overwriting data from another write. For more information,
		 * see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateWageSettingFormGroup() {
		return new FormGroup<WageSettingFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			is_overtime_exempt: new FormControl<boolean | null | undefined>(undefined),
			team_member_id: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface RevokeTokenRequest {

		/**
		 * The access token of the merchant whose token you want to revoke.
		 * Do not provide a value for merchant_id if you provide this parameter.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token?: string | null;

		/**
		 * The Square issued ID for your application, available from the
		 * [developer dashboard](https://developer.squareup.com/apps).
		 * Max length: 191
		 */
		client_id?: string | null;

		/**
		 * The ID of the merchant whose token you want to revoke.
		 * Do not provide a value for access_token if you provide this parameter.
		 */
		merchant_id?: string | null;

		/**
		 * If `true`, terminate the given single access token, but do not
		 * terminate the entire authorization.
		 * Default: `false`
		 */
		revoke_only_access_token?: boolean | null;
	}
	export interface RevokeTokenRequestFormProperties {

		/**
		 * The access token of the merchant whose token you want to revoke.
		 * Do not provide a value for merchant_id if you provide this parameter.
		 * Max length: 1024
		 * Min length: 2
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The Square issued ID for your application, available from the
		 * [developer dashboard](https://developer.squareup.com/apps).
		 * Max length: 191
		 */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the merchant whose token you want to revoke.
		 * Do not provide a value for access_token if you provide this parameter.
		 */
		merchant_id: FormControl<string | null | undefined>,

		/**
		 * If `true`, terminate the given single access token, but do not
		 * terminate the entire authorization.
		 * Default: `false`
		 */
		revoke_only_access_token: FormControl<boolean | null | undefined>,
	}
	export function CreateRevokeTokenRequestFormGroup() {
		return new FormGroup<RevokeTokenRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(1024)]),
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(191)]),
			merchant_id: new FormControl<string | null | undefined>(undefined),
			revoke_only_access_token: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface RevokeTokenResponse {

		/** If the request is successful, this is true. */
		success?: boolean | null;
	}
	export interface RevokeTokenResponseFormProperties {

		/** If the request is successful, this is true. */
		success: FormControl<boolean | null | undefined>,
	}
	export function CreateRevokeTokenResponseFormGroup() {
		return new FormGroup<RevokeTokenResponseFormProperties>({
			success: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum RiskEvaluationRiskLevel { PENDING = 'PENDING', NORMAL = 'NORMAL', MODERATE = 'MODERATE', HIGH = 'HIGH' }


	/** A query filter to search for availabilities by. */
	export interface SearchAvailabilityFilter {

		/**
		 * The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value.
		 * This is commonly used to reschedule an appointment.
		 * If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.
		 */
		booking_id?: string | null;

		/**
		 * The query expression to search for availabilities matching the specified seller location IDs.
		 * This query expression is not applicable when `booking_id` is present.
		 */
		location_id?: string | null;

		/**
		 * The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per
		 * availability. It is not applicable when `booking_id` is present.
		 */
		segment_filters?: Array<SegmentFilter>;

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 * Required
		 */
		start_at_range: TimeRange;
	}

	/** A query filter to search for availabilities by. */
	export interface SearchAvailabilityFilterFormProperties {

		/**
		 * The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value.
		 * This is commonly used to reschedule an appointment.
		 * If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.
		 */
		booking_id: FormControl<string | null | undefined>,

		/**
		 * The query expression to search for availabilities matching the specified seller location IDs.
		 * This query expression is not applicable when `booking_id` is present.
		 */
		location_id: FormControl<string | null | undefined>,
	}
	export function CreateSearchAvailabilityFilterFormGroup() {
		return new FormGroup<SearchAvailabilityFilterFormProperties>({
			booking_id: new FormControl<string | null | undefined>(undefined),
			location_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A query filter to search for appointment segments by. */
	export interface SegmentFilter {

		/**
		 * The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) representing the service booked in this segment.
		 * Required
		 * Min length: 1
		 */
		service_variation_id: string;

		/**
		 * A filter to select resources based on an exact field value. For any given
		 * value, the value can only be in one property. Depending on the field, either
		 * all properties can be set or only a subset will be available.
		 * Refer to the documentation of the field.
		 */
		team_member_id_filter?: FilterValue;
	}

	/** A query filter to search for appointment segments by. */
	export interface SegmentFilterFormProperties {

		/**
		 * The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) representing the service booked in this segment.
		 * Required
		 * Min length: 1
		 */
		service_variation_id: FormControl<string | null | undefined>,
	}
	export function CreateSegmentFilterFormGroup() {
		return new FormGroup<SegmentFilterFormProperties>({
			service_variation_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Query conditions to search for availabilities of bookings. */
	export interface SearchAvailabilityQuery {

		/**
		 * A query filter to search for availabilities by.
		 * Required
		 */
		filter: SearchAvailabilityFilter;
	}

	/** Query conditions to search for availabilities of bookings. */
	export interface SearchAvailabilityQueryFormProperties {
	}
	export function CreateSearchAvailabilityQueryFormGroup() {
		return new FormGroup<SearchAvailabilityQueryFormProperties>({
		});

	}

	export interface SearchAvailabilityRequest {

		/**
		 * Query conditions to search for availabilities of bookings.
		 * Required
		 */
		query: SearchAvailabilityQuery;
	}
	export interface SearchAvailabilityRequestFormProperties {
	}
	export function CreateSearchAvailabilityRequestFormGroup() {
		return new FormGroup<SearchAvailabilityRequestFormProperties>({
		});

	}

	export interface SearchAvailabilityResponse {

		/** List of slots available for booking. */
		availabilities?: Array<Availability>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface SearchAvailabilityResponseFormProperties {
	}
	export function CreateSearchAvailabilityResponseFormGroup() {
		return new FormGroup<SearchAvailabilityResponseFormProperties>({
		});

	}


	/** Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint. */
	export interface SearchCatalogItemsRequest {

		/** The category id query expression to return items containing the specified category IDs. */
		category_ids?: Array<string>;

		/** The pagination token, returned in the previous response, used to fetch the next batch of pending results. */
		cursor?: string | null;

		/**
		 * The customer-attribute filter to return items or item variations matching the specified
		 * custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
		 * a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
		 */
		custom_attribute_filters?: Array<CustomAttributeFilter>;

		/** The enabled-location query expression to return items and item variations having specified enabled locations. */
		enabled_location_ids?: Array<string>;

		/**
		 * The maximum number of results to return per page. The default value is 100.
		 * Maximum: 100
		 */
		limit?: number | null;

		/** The product types query expression to return items or item variations having the specified product types. */
		product_types?: Array<string>;

		/** The order to sort the results by item names. The default sort order is ascending (`ASC`). */
		sort_order?: string | null;

		/** The stock-level query expression to return item variations with the specified stock levels. */
		stock_levels?: Array<string>;

		/**
		 * The text filter expression to return items or item variations containing specified text in
		 * the `name`, `description`, or `abbreviation` attribute value of an item, or in
		 * the `name`, `sku`, or `upc` attribute value of an item variation.
		 */
		text_filter?: string | null;
	}

	/** Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint. */
	export interface SearchCatalogItemsRequestFormProperties {

		/** The pagination token, returned in the previous response, used to fetch the next batch of pending results. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to return per page. The default value is 100.
		 * Maximum: 100
		 */
		limit: FormControl<number | null | undefined>,

		/** The order to sort the results by item names. The default sort order is ascending (`ASC`). */
		sort_order: FormControl<string | null | undefined>,

		/**
		 * The text filter expression to return items or item variations containing specified text in
		 * the `name`, `description`, or `abbreviation` attribute value of an item, or in
		 * the `name`, `sku`, or `upc` attribute value of an item variation.
		 */
		text_filter: FormControl<string | null | undefined>,
	}
	export function CreateSearchCatalogItemsRequestFormGroup() {
		return new FormGroup<SearchCatalogItemsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.max(100)]),
			sort_order: new FormControl<string | null | undefined>(undefined),
			text_filter: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines supported stock levels of the item inventory. */
	export enum SearchCatalogItemsRequestStockLevel { OUT = 'OUT', LOW = 'LOW' }


	/** Defines the response body returned from the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint. */
	export interface SearchCatalogItemsResponse {

		/** Pagination token used in the next request to return more of the search result. */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Returned items matching the specified query expressions. */
		items?: Array<CatalogObject>;

		/** Ids of returned item variations matching the specified query expression. */
		matched_variation_ids?: Array<string>;
	}

	/** Defines the response body returned from the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint. */
	export interface SearchCatalogItemsResponseFormProperties {

		/** Pagination token used in the next request to return more of the search result. */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchCatalogItemsResponseFormGroup() {
		return new FormGroup<SearchCatalogItemsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchCatalogObjectsRequest {

		/**
		 * Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339
		 * format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a
		 * timestamp equal to `begin_time` will not be included in the response.
		 */
		begin_time?: string | null;

		/**
		 * The pagination cursor returned in the previous response. Leave unset for an initial request.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/**
		 * If `true`, deleted objects will be included in the results. Deleted objects will have their
		 * `is_deleted` field set to `true`.
		 */
		include_deleted_objects?: boolean | null;

		/**
		 * If `true`, the response will include additional objects that are related to the
		 * requested object, as follows:
		 * If a CatalogItem is returned in the object field of the response,
		 * its associated CatalogCategory, CatalogTax objects,
		 * CatalogImage objects and CatalogModifierList objects
		 * will be included in the `related_objects` field of the response.
		 * If a CatalogItemVariation is returned in the object field of the
		 * response, its parent CatalogItem will be included in the `related_objects` field of
		 * the response.
		 */
		include_related_objects?: boolean | null;

		/**
		 * A limit on the number of results to be returned in a single page. The limit is advisory -
		 * the implementation may return more or fewer results. If the supplied limit is negative, zero, or
		 * is higher than the maximum limit of 1,000, it will be ignored.
		 */
		limit?: number | null;

		/** The desired set of object types to appear in the search results. */
		object_types?: Array<string>;

		/**
		 * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
		 * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
		 * Any combination of the following types may be used together:
		 * - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
		 * - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
		 * - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
		 * - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
		 * - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
		 * All other query types cannot be combined with any others.
		 * When a query filter is based on an attribute, the attribute must be searchable.
		 * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
		 * * Searchable attribute and objects queryable by searchable attributes **
		 * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
		 * - `description`: `CatalogItem`, `CatalogItemOptionValue`
		 * - `abbreviation`: `CatalogItem`
		 * - `upc`: `CatalogItemVariation`
		 * - `sku`: `CatalogItemVariation`
		 * - `caption`: `CatalogImage`
		 * - `display_name`: `CatalogItemOption`
		 * For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
		 * the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
		 */
		query?: CatalogQuery;
	}
	export interface SearchCatalogObjectsRequestFormProperties {

		/**
		 * Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339
		 * format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a
		 * timestamp equal to `begin_time` will not be included in the response.
		 */
		begin_time: FormControl<string | null | undefined>,

		/**
		 * The pagination cursor returned in the previous response. Leave unset for an initial request.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * If `true`, deleted objects will be included in the results. Deleted objects will have their
		 * `is_deleted` field set to `true`.
		 */
		include_deleted_objects: FormControl<boolean | null | undefined>,

		/**
		 * If `true`, the response will include additional objects that are related to the
		 * requested object, as follows:
		 * If a CatalogItem is returned in the object field of the response,
		 * its associated CatalogCategory, CatalogTax objects,
		 * CatalogImage objects and CatalogModifierList objects
		 * will be included in the `related_objects` field of the response.
		 * If a CatalogItemVariation is returned in the object field of the
		 * response, its parent CatalogItem will be included in the `related_objects` field of
		 * the response.
		 */
		include_related_objects: FormControl<boolean | null | undefined>,

		/**
		 * A limit on the number of results to be returned in a single page. The limit is advisory -
		 * the implementation may return more or fewer results. If the supplied limit is negative, zero, or
		 * is higher than the maximum limit of 1,000, it will be ignored.
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchCatalogObjectsRequestFormGroup() {
		return new FormGroup<SearchCatalogObjectsRequestFormProperties>({
			begin_time: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			include_deleted_objects: new FormControl<boolean | null | undefined>(undefined),
			include_related_objects: new FormControl<boolean | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchCatalogObjectsResponse {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * When the associated product catalog was last updated. Will
		 * match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.
		 */
		latest_time?: string | null;

		/** The CatalogObjects returned. */
		objects?: Array<CatalogObject>;

		/** A list of CatalogObjects referenced by the objects in the `objects` field. */
		related_objects?: Array<CatalogObject>;
	}
	export interface SearchCatalogObjectsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset, this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * When the associated product catalog was last updated. Will
		 * match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.
		 */
		latest_time: FormControl<string | null | undefined>,
	}
	export function CreateSearchCatalogObjectsResponseFormGroup() {
		return new FormGroup<SearchCatalogObjectsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			latest_time: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the request body of a request to the
	 * `SearchCustomers` endpoint.
	 */
	export interface SearchCustomersRequest {

		/**
		 * Include the pagination cursor in subsequent calls to this endpoint to retrieve
		 * the next set of results associated with the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than the minimum or greater than the maximum value. The default value is 100.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit?: number | null;

		/**
		 * Represents a query (including filtering criteria, sorting criteria, or both) used to search
		 * for customer profiles.
		 */
		query?: CustomerQuery;
	}

	/**
	 * Defines the fields that are included in the request body of a request to the
	 * `SearchCustomers` endpoint.
	 */
	export interface SearchCustomersRequestFormProperties {

		/**
		 * Include the pagination cursor in subsequent calls to this endpoint to retrieve
		 * the next set of results associated with the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
		 * The limit is ignored if it is less than the minimum or greater than the maximum value. The default value is 100.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchCustomersRequestFormGroup() {
		return new FormGroup<SearchCustomersRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `SearchCustomers` endpoint.
	 * Either `errors` or `customers` is present in a given response (never both).
	 */
	export interface SearchCustomersResponse {

		/**
		 * A pagination cursor that can be used during subsequent calls
		 * to `SearchCustomers` to retrieve the next set of results associated
		 * with the original query. Pagination cursors are only present when
		 * a request succeeds and additional results are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** An array of `Customer` objects that match a query. */
		customers?: Array<Customer>;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `SearchCustomers` endpoint.
	 * Either `errors` or `customers` is present in a given response (never both).
	 */
	export interface SearchCustomersResponseFormProperties {

		/**
		 * A pagination cursor that can be used during subsequent calls
		 * to `SearchCustomers` to retrieve the next set of results associated
		 * with the original query. Pagination cursors are only present when
		 * a request succeeds and additional results are available.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchCustomersResponseFormGroup() {
		return new FormGroup<SearchCustomersResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes a `SearchInvoices` request. */
	export interface SearchInvoicesRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of invoices to return (200 is the maximum `limit`).
		 * If not provided, the server uses a default limit of 100 invoices.
		 */
		limit?: number | null;

		/**
		 * Describes query criteria for searching invoices.
		 * Required
		 */
		query: InvoiceQuery;
	}

	/** Describes a `SearchInvoices` request. */
	export interface SearchInvoicesRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of invoices to return (200 is the maximum `limit`).
		 * If not provided, the server uses a default limit of 100 invoices.
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchInvoicesRequestFormGroup() {
		return new FormGroup<SearchInvoicesRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Describes a `SearchInvoices` response. */
	export interface SearchInvoicesResponse {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to fetch the next set of invoices. If empty, this is the final
		 * response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The list of invoices returned by the search. */
		invoices?: Array<Invoice>;
	}

	/** Describes a `SearchInvoices` response. */
	export interface SearchInvoicesResponseFormProperties {

		/**
		 * When a response is truncated, it includes a cursor that you can use in a
		 * subsequent request to fetch the next set of invoices. If empty, this is the final
		 * response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchInvoicesResponseFormGroup() {
		return new FormGroup<SearchInvoicesResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request to search for loyalty accounts. */
	export interface SearchLoyaltyAccountsRequest {

		/**
		 * A pagination cursor returned by a previous call to
		 * this endpoint. Provide this to retrieve the next set of
		 * results for the original query.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to include in the response.
		 * Minimum: 1
		 * Maximum: 30
		 */
		limit?: number | null;

		/** The search criteria for the loyalty accounts. */
		query?: SearchLoyaltyAccountsRequestLoyaltyAccountQuery;
	}

	/** A request to search for loyalty accounts. */
	export interface SearchLoyaltyAccountsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to
		 * this endpoint. Provide this to retrieve the next set of
		 * results for the original query.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to include in the response.
		 * Minimum: 1
		 * Maximum: 30
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchLoyaltyAccountsRequestFormGroup() {
		return new FormGroup<SearchLoyaltyAccountsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(30)]),
		});

	}


	/** The search criteria for the loyalty accounts. */
	export interface SearchLoyaltyAccountsRequestLoyaltyAccountQuery {

		/**
		 * The set of customer IDs to use in the loyalty account search.
		 * This cannot be combined with `mappings`.
		 * Max: 30 customer IDs
		 */
		customer_ids?: Array<string>;

		/**
		 * The set of mappings to use in the loyalty account search.
		 * This cannot be combined with `customer_ids`.
		 * Max: 30 mappings
		 */
		mappings?: Array<LoyaltyAccountMapping>;
	}

	/** The search criteria for the loyalty accounts. */
	export interface SearchLoyaltyAccountsRequestLoyaltyAccountQueryFormProperties {
	}
	export function CreateSearchLoyaltyAccountsRequestLoyaltyAccountQueryFormGroup() {
		return new FormGroup<SearchLoyaltyAccountsRequestLoyaltyAccountQueryFormProperties>({
		});

	}


	/** A response that includes loyalty accounts that satisfy the search criteria. */
	export interface SearchLoyaltyAccountsResponse {

		/**
		 * The pagination cursor to use in a subsequent
		 * request. If empty, this is the final response.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * The loyalty accounts that met the search criteria,
		 * in order of creation date.
		 */
		loyalty_accounts?: Array<LoyaltyAccount>;
	}

	/** A response that includes loyalty accounts that satisfy the search criteria. */
	export interface SearchLoyaltyAccountsResponseFormProperties {

		/**
		 * The pagination cursor to use in a subsequent
		 * request. If empty, this is the final response.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchLoyaltyAccountsResponseFormGroup() {
		return new FormGroup<SearchLoyaltyAccountsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request to search for loyalty events. */
	export interface SearchLoyaltyEventsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to include in the response.
		 * The last page might contain fewer events.
		 * The default is 30 events.
		 * Minimum: 1
		 * Maximum: 30
		 */
		limit?: number | null;

		/** Represents a query used to search for loyalty events. */
		query?: LoyaltyEventQuery;
	}

	/** A request to search for loyalty events. */
	export interface SearchLoyaltyEventsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to include in the response.
		 * The last page might contain fewer events.
		 * The default is 30 events.
		 * Minimum: 1
		 * Maximum: 30
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchLoyaltyEventsRequestFormGroup() {
		return new FormGroup<SearchLoyaltyEventsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(30)]),
		});

	}


	/**
	 * A response that contains loyalty events that satisfy the search 
	 * criteria, in order by the `created_at` date.
	 */
	export interface SearchLoyaltyEventsResponse {

		/**
		 * The pagination cursor to be used in a subsequent
		 * request. If empty, this is the final response.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The loyalty events that satisfy the search criteria. */
		events?: Array<LoyaltyEvent>;
	}

	/**
	 * A response that contains loyalty events that satisfy the search 
	 * criteria, in order by the `created_at` date.
	 */
	export interface SearchLoyaltyEventsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent
		 * request. If empty, this is the final response.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchLoyaltyEventsResponseFormGroup() {
		return new FormGroup<SearchLoyaltyEventsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A request to search for loyalty rewards. */
	export interface SearchLoyaltyRewardsRequest {

		/**
		 * A pagination cursor returned by a previous call to
		 * this endpoint. Provide this to retrieve the next set of
		 * results for the original query.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to return in the response.
		 * Minimum: 1
		 * Maximum: 30
		 */
		limit?: number | null;

		/** The set of search requirements. */
		query?: SearchLoyaltyRewardsRequestLoyaltyRewardQuery;
	}

	/** A request to search for loyalty rewards. */
	export interface SearchLoyaltyRewardsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to
		 * this endpoint. Provide this to retrieve the next set of
		 * results for the original query.
		 * For more information,
		 * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to return in the response.
		 * Minimum: 1
		 * Maximum: 30
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchLoyaltyRewardsRequestFormGroup() {
		return new FormGroup<SearchLoyaltyRewardsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(30)]),
		});

	}


	/** The set of search requirements. */
	export interface SearchLoyaltyRewardsRequestLoyaltyRewardQuery {

		/**
		 * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the loyalty reward belongs.
		 * Required
		 */
		loyalty_account_id: string;

		/** The status of the loyalty reward. */
		status?: string | null;
	}

	/** The set of search requirements. */
	export interface SearchLoyaltyRewardsRequestLoyaltyRewardQueryFormProperties {

		/**
		 * The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the loyalty reward belongs.
		 * Required
		 */
		loyalty_account_id: FormControl<string | null | undefined>,

		/** The status of the loyalty reward. */
		status: FormControl<string | null | undefined>,
	}
	export function CreateSearchLoyaltyRewardsRequestLoyaltyRewardQueryFormGroup() {
		return new FormGroup<SearchLoyaltyRewardsRequestLoyaltyRewardQueryFormProperties>({
			loyalty_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A response that includes the loyalty rewards satisfying the search criteria. */
	export interface SearchLoyaltyRewardsResponse {

		/**
		 * The pagination cursor to be used in a subsequent
		 * request. If empty, this is the final response.
		 */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * The loyalty rewards that satisfy the search criteria.
		 * These are returned in descending order by `updated_at`.
		 */
		rewards?: Array<LoyaltyReward>;
	}

	/** A response that includes the loyalty rewards satisfying the search criteria. */
	export interface SearchLoyaltyRewardsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent
		 * request. If empty, this is the final response.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchLoyaltyRewardsResponseFormGroup() {
		return new FormGroup<SearchLoyaltyRewardsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A filter based on the order `customer_id` and any tender `customer_id`
	 * associated with the order. It does not filter based on the
	 * [FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
	 */
	export interface SearchOrdersCustomerFilter {

		/**
		 * A list of customer IDs to filter by.
		 * Max: 10 customer IDs.
		 */
		customer_ids?: Array<string>;
	}

	/**
	 * A filter based on the order `customer_id` and any tender `customer_id`
	 * associated with the order. It does not filter based on the
	 * [FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
	 */
	export interface SearchOrdersCustomerFilterFormProperties {
	}
	export function CreateSearchOrdersCustomerFilterFormGroup() {
		return new FormGroup<SearchOrdersCustomerFilterFormProperties>({
		});

	}


	/**
	 * Filter for `Order` objects based on whether their `CREATED_AT`,
	 * `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
	 * You can specify the time range and which timestamp to filter for. You can filter
	 * for only one time range at a time.
	 * For each time range, the start time and end time are inclusive. If the end time
	 * is absent, it defaults to the time of the first request for the cursor.
	 * __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
	 * you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
	 * to the same field you filter for. For example, if you set the `CLOSED_AT` field
	 * in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
	 * `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
	 * [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
	 */
	export interface SearchOrdersDateTimeFilter {

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		closed_at?: TimeRange;

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		created_at?: TimeRange;

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		updated_at?: TimeRange;
	}

	/**
	 * Filter for `Order` objects based on whether their `CREATED_AT`,
	 * `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
	 * You can specify the time range and which timestamp to filter for. You can filter
	 * for only one time range at a time.
	 * For each time range, the start time and end time are inclusive. If the end time
	 * is absent, it defaults to the time of the first request for the cursor.
	 * __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
	 * you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
	 * to the same field you filter for. For example, if you set the `CLOSED_AT` field
	 * in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
	 * `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
	 * [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
	 */
	export interface SearchOrdersDateTimeFilterFormProperties {
	}
	export function CreateSearchOrdersDateTimeFilterFormGroup() {
		return new FormGroup<SearchOrdersDateTimeFilterFormProperties>({
		});

	}


	/**
	 * Filtering criteria to use for a `SearchOrders` request. Multiple filters
	 * are ANDed together.
	 */
	export interface SearchOrdersFilter {

		/**
		 * A filter based on the order `customer_id` and any tender `customer_id`
		 * associated with the order. It does not filter based on the
		 * [FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
		 */
		customer_filter?: SearchOrdersCustomerFilter;

		/**
		 * Filter for `Order` objects based on whether their `CREATED_AT`,
		 * `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
		 * You can specify the time range and which timestamp to filter for. You can filter
		 * for only one time range at a time.
		 * For each time range, the start time and end time are inclusive. If the end time
		 * is absent, it defaults to the time of the first request for the cursor.
		 * __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
		 * you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
		 * to the same field you filter for. For example, if you set the `CLOSED_AT` field
		 * in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
		 * `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
		 * [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
		 */
		date_time_filter?: SearchOrdersDateTimeFilter;

		/** Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information. */
		fulfillment_filter?: SearchOrdersFulfillmentFilter;

		/** A filter based on order `source` information. */
		source_filter?: SearchOrdersSourceFilter;

		/** Filter by the current order `state`. */
		state_filter?: SearchOrdersStateFilter;
	}

	/**
	 * Filtering criteria to use for a `SearchOrders` request. Multiple filters
	 * are ANDed together.
	 */
	export interface SearchOrdersFilterFormProperties {
	}
	export function CreateSearchOrdersFilterFormGroup() {
		return new FormGroup<SearchOrdersFilterFormProperties>({
		});

	}


	/** Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information. */
	export interface SearchOrdersFulfillmentFilter {

		/**
		 * A list of [fulfillment states](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentState) to filter
		 * for. The list returns orders if any of its fulfillments match any of the
		 * fulfillment states listed in this field.
		 */
		fulfillment_states?: Array<string>;

		/**
		 * A list of [fulfillment types](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderFulfillmentType) to filter
		 * for. The list returns orders if any of its fulfillments match any of the fulfillment types
		 * listed in this field.
		 */
		fulfillment_types?: Array<string>;
	}

	/** Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information. */
	export interface SearchOrdersFulfillmentFilterFormProperties {
	}
	export function CreateSearchOrdersFulfillmentFilterFormGroup() {
		return new FormGroup<SearchOrdersFulfillmentFilterFormProperties>({
		});

	}


	/** A filter based on order `source` information. */
	export interface SearchOrdersSourceFilter {

		/**
		 * Filters by the [Source](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderSource) `name`. The filter returns any orders
		 * with a `source.name` that matches any of the listed source names.
		 * Max: 10 source names.
		 */
		source_names?: Array<string>;
	}

	/** A filter based on order `source` information. */
	export interface SearchOrdersSourceFilterFormProperties {
	}
	export function CreateSearchOrdersSourceFilterFormGroup() {
		return new FormGroup<SearchOrdersSourceFilterFormProperties>({
		});

	}


	/** Filter by the current order `state`. */
	export interface SearchOrdersStateFilter {

		/**
		 * States to filter for.
		 * Required
		 */
		states: Array<string>;
	}

	/** Filter by the current order `state`. */
	export interface SearchOrdersStateFilterFormProperties {
	}
	export function CreateSearchOrdersStateFilterFormGroup() {
		return new FormGroup<SearchOrdersStateFilterFormProperties>({
		});

	}


	/** Contains query criteria for the search. */
	export interface SearchOrdersQuery {

		/**
		 * Filtering criteria to use for a `SearchOrders` request. Multiple filters
		 * are ANDed together.
		 */
		filter?: SearchOrdersFilter;

		/**
		 * Sorting criteria for a `SearchOrders` request. Results can only be sorted
		 * by a timestamp field.
		 */
		sort?: SearchOrdersSort;
	}

	/** Contains query criteria for the search. */
	export interface SearchOrdersQueryFormProperties {
	}
	export function CreateSearchOrdersQueryFormGroup() {
		return new FormGroup<SearchOrdersQueryFormProperties>({
		});

	}


	/**
	 * Sorting criteria for a `SearchOrders` request. Results can only be sorted
	 * by a timestamp field.
	 */
	export interface SearchOrdersSort {

		/**
		 * The field to sort by.
		 * __Important:__ When using a [DateTimeFilter](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersFilter),
		 * `sort_field` must match the timestamp field that the `DateTimeFilter` uses to
		 * filter. For example, if you set your `sort_field` to `CLOSED_AT` and you use a
		 * `DateTimeFilter`, your `DateTimeFilter` must filter for orders by their `CLOSED_AT` date.
		 * If this field does not match the timestamp field in `DateTimeFilter`,
		 * `SearchOrders` returns an error.
		 * Default: `CREATED_AT`.
		 * Required
		 */
		sort_field: string;

		/** The chronological order in which results are returned. Defaults to `DESC`. */
		sort_order?: string | null;
	}

	/**
	 * Sorting criteria for a `SearchOrders` request. Results can only be sorted
	 * by a timestamp field.
	 */
	export interface SearchOrdersSortFormProperties {

		/**
		 * The field to sort by.
		 * __Important:__ When using a [DateTimeFilter](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersFilter),
		 * `sort_field` must match the timestamp field that the `DateTimeFilter` uses to
		 * filter. For example, if you set your `sort_field` to `CLOSED_AT` and you use a
		 * `DateTimeFilter`, your `DateTimeFilter` must filter for orders by their `CLOSED_AT` date.
		 * If this field does not match the timestamp field in `DateTimeFilter`,
		 * `SearchOrders` returns an error.
		 * Default: `CREATED_AT`.
		 * Required
		 */
		sort_field: FormControl<string | null | undefined>,

		/** The chronological order in which results are returned. Defaults to `DESC`. */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateSearchOrdersSortFormGroup() {
		return new FormGroup<SearchOrdersSortFormProperties>({
			sort_field: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The request does not have any required fields. When given no query criteria,
	 * `SearchOrders` returns all results for all of the seller's locations. When retrieving additional
	 * pages using a `cursor`, the `query` must be equal to the `query` used to retrieve the first page of
	 * results.
	 */
	export interface SearchOrdersRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of results to be returned in a single page. It is
		 * possible to receive fewer results than the specified limit on a given page.
		 * Default: `500`
		 * Minimum: 1
		 */
		limit?: number | null;

		/**
		 * The location IDs for the orders to query. All locations must belong to
		 * the same merchant.
		 * Min: 1 location ID.
		 * Max: 10 location IDs.
		 */
		location_ids?: Array<string>;

		/** Contains query criteria for the search. */
		query?: SearchOrdersQuery;

		/**
		 * A Boolean that controls the format of the search results. If `true`,
		 * `SearchOrders` returns [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects. If `false`, `SearchOrders`
		 * returns complete order objects.
		 * Default: `false`.
		 */
		return_entries?: boolean | null;
	}

	/**
	 * The request does not have any required fields. When given no query criteria,
	 * `SearchOrders` returns all results for all of the seller's locations. When retrieving additional
	 * pages using a `cursor`, the `query` must be equal to the `query` used to retrieve the first page of
	 * results.
	 */
	export interface SearchOrdersRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to be returned in a single page. It is
		 * possible to receive fewer results than the specified limit on a given page.
		 * Default: `500`
		 * Minimum: 1
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * A Boolean that controls the format of the search results. If `true`,
		 * `SearchOrders` returns [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects. If `false`, `SearchOrders`
		 * returns complete order objects.
		 * Default: `false`.
		 */
		return_entries: FormControl<boolean | null | undefined>,
	}
	export function CreateSearchOrdersRequestFormGroup() {
		return new FormGroup<SearchOrdersRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
			return_entries: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * Either the `order_entries` or `orders` field is set, depending on whether
	 * `return_entries` is set on the [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
	 */
	export interface SearchOrdersResponse {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor?: string | null;

		/** [Errors](https://developer.squareup.com/reference/square_2021-08-18/objects/Error) encountered during the search. */
		errors?: Array<Error>;

		/**
		 * A list of [OrderEntries](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) that fit the query
		 * conditions. The list is populated only if `return_entries` is set to `true` in the request.
		 */
		order_entries?: Array<OrderEntry>;

		/**
		 * A list of
		 * [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) objects that match the query conditions. The list is populated only if
		 * `return_entries` is set to `false` in the request.
		 */
		orders?: Array<Order>;
	}

	/**
	 * Either the `order_entries` or `orders` field is set, depending on whether
	 * `return_entries` is set on the [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
	 */
	export interface SearchOrdersResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If unset,
		 * this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchOrdersResponseFormGroup() {
		return new FormGroup<SearchOrdersResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies which timestamp to use to sort `SearchOrder` results. */
	export enum SearchOrdersSortField { CREATED_AT = 'CREATED_AT', UPDATED_AT = 'UPDATED_AT', CLOSED_AT = 'CLOSED_AT' }


	/** A request for a filtered and sorted set of `Shift` objects. */
	export interface SearchShiftsRequest {

		/** An opaque cursor for fetching the next page. */
		cursor?: string | null;

		/**
		 * The number of resources in a page (200 by default).
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit?: number | null;

		/** The parameters of a `Shift` search query, which includes filter and sort options. */
		query?: ShiftQuery;
	}

	/** A request for a filtered and sorted set of `Shift` objects. */
	export interface SearchShiftsRequestFormProperties {

		/** An opaque cursor for fetching the next page. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The number of resources in a page (200 by default).
		 * Minimum: 1
		 * Maximum: 200
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchShiftsRequestFormGroup() {
		return new FormGroup<SearchShiftsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(200)]),
		});

	}


	/** The parameters of a `Shift` search query, which includes filter and sort options. */
	export interface ShiftQuery {

		/**
		 * Defines a filter used in a search for `Shift` records. `AND` logic is
		 * used by Square's servers to apply each filter property specified.
		 */
		filter?: ShiftFilter;

		/** Sets the sort order of search results. */
		sort?: ShiftSort;
	}

	/** The parameters of a `Shift` search query, which includes filter and sort options. */
	export interface ShiftQueryFormProperties {
	}
	export function CreateShiftQueryFormGroup() {
		return new FormGroup<ShiftQueryFormProperties>({
		});

	}


	/**
	 * Defines a filter used in a search for `Shift` records. `AND` logic is
	 * used by Square's servers to apply each filter property specified.
	 */
	export interface ShiftFilter {

		/** Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead. */
		employee_ids?: Array<string>;

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		end?: TimeRange;

		/**
		 * Fetch shifts for the specified location.
		 * Required
		 */
		location_ids: Array<string>;

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		start?: TimeRange;

		/** Fetch a `Shift` instance by `Shift.status`. */
		status?: string | null;

		/**
		 * Fetch shifts for the specified team members. Replaced `employee_ids` at version "2020-08-26".
		 * Required
		 */
		team_member_ids: Array<string>;

		/**
		 * A `Shift` search query filter parameter that sets a range of days that
		 * a `Shift` must start or end in before passing the filter condition.
		 */
		workday?: ShiftWorkday;
	}

	/**
	 * Defines a filter used in a search for `Shift` records. `AND` logic is
	 * used by Square's servers to apply each filter property specified.
	 */
	export interface ShiftFilterFormProperties {

		/** Fetch a `Shift` instance by `Shift.status`. */
		status: FormControl<string | null | undefined>,
	}
	export function CreateShiftFilterFormGroup() {
		return new FormGroup<ShiftFilterFormProperties>({
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A `Shift` search query filter parameter that sets a range of days that
	 * a `Shift` must start or end in before passing the filter condition.
	 */
	export interface ShiftWorkday {

		/**
		 * A range defined by two dates. Used for filtering a query for Connect v2
		 * objects that have date properties.
		 */
		date_range?: DateRange;

		/**
		 * Location-specific timezones convert workdays to datetime filters.
		 * Every location included in the query must have a timezone or this field
		 * must be provided as a fallback. Format: the IANA timezone database
		 * identifier for the relevant timezone.
		 */
		default_timezone?: string | null;

		/** The strategy on which the dates are applied. */
		match_shifts_by?: string | null;
	}

	/**
	 * A `Shift` search query filter parameter that sets a range of days that
	 * a `Shift` must start or end in before passing the filter condition.
	 */
	export interface ShiftWorkdayFormProperties {

		/**
		 * Location-specific timezones convert workdays to datetime filters.
		 * Every location included in the query must have a timezone or this field
		 * must be provided as a fallback. Format: the IANA timezone database
		 * identifier for the relevant timezone.
		 */
		default_timezone: FormControl<string | null | undefined>,

		/** The strategy on which the dates are applied. */
		match_shifts_by: FormControl<string | null | undefined>,
	}
	export function CreateShiftWorkdayFormGroup() {
		return new FormGroup<ShiftWorkdayFormProperties>({
			default_timezone: new FormControl<string | null | undefined>(undefined),
			match_shifts_by: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Sets the sort order of search results. */
	export interface ShiftSort {

		/** The field to sort on. */
		field?: string | null;

		/** The order in which results are returned. Defaults to DESC. */
		order?: string | null;
	}

	/** Sets the sort order of search results. */
	export interface ShiftSortFormProperties {

		/** The field to sort on. */
		field: FormControl<string | null | undefined>,

		/** The order in which results are returned. Defaults to DESC. */
		order: FormControl<string | null | undefined>,
	}
	export function CreateShiftSortFormGroup() {
		return new FormGroup<ShiftSortFormProperties>({
			field: new FormControl<string | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The response to a request for `Shift` objects. The response contains
	 * the requested `Shift` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface SearchShiftsResponse {

		/** An opaque cursor for fetching the next page. */
		cursor?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Shifts. */
		shifts?: Array<Shift>;
	}

	/**
	 * The response to a request for `Shift` objects. The response contains
	 * the requested `Shift` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface SearchShiftsResponseFormProperties {

		/** An opaque cursor for fetching the next page. */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchShiftsResponseFormGroup() {
		return new FormGroup<SearchShiftsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions. */
	export interface SearchSubscriptionsFilter {

		/** A filter to select subscriptions based on the customer. */
		customer_ids?: Array<string>;

		/** A filter to select subscriptions based the location. */
		location_ids?: Array<string>;
	}

	/** Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions. */
	export interface SearchSubscriptionsFilterFormProperties {
	}
	export function CreateSearchSubscriptionsFilterFormGroup() {
		return new FormGroup<SearchSubscriptionsFilterFormProperties>({
		});

	}


	/** Represents a query (including filtering criteria) used to search for subscriptions. */
	export interface SearchSubscriptionsQuery {

		/** Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions. */
		filter?: SearchSubscriptionsFilter;
	}

	/** Represents a query (including filtering criteria) used to search for subscriptions. */
	export interface SearchSubscriptionsQueryFormProperties {
	}
	export function CreateSearchSubscriptionsQueryFormGroup() {
		return new FormGroup<SearchSubscriptionsQueryFormProperties>({
		});

	}


	/**
	 * Defines parameters in a
	 * [SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint
	 * request.
	 */
	export interface SearchSubscriptionsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The upper limit on the number of subscriptions to return
		 * in the response.
		 * Default: `200`
		 * Minimum: 1
		 */
		limit?: number | null;

		/** Represents a query (including filtering criteria) used to search for subscriptions. */
		query?: SearchSubscriptionsQuery;
	}

	/**
	 * Defines parameters in a
	 * [SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint
	 * request.
	 */
	export interface SearchSubscriptionsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The upper limit on the number of subscriptions to return
		 * in the response.
		 * Default: `200`
		 * Minimum: 1
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchSubscriptionsRequestFormGroup() {
		return new FormGroup<SearchSubscriptionsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
		});

	}


	/**
	 * Defines the fields that are included in the response from the
	 * [SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint.
	 */
	export interface SearchSubscriptionsResponse {

		/**
		 * When a response is truncated, it includes a cursor that you can
		 * use in a subsequent request to fetch the next set of subscriptions.
		 * If empty, this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The search result. */
		subscriptions?: Array<Subscription>;
	}

	/**
	 * Defines the fields that are included in the response from the
	 * [SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint.
	 */
	export interface SearchSubscriptionsResponseFormProperties {

		/**
		 * When a response is truncated, it includes a cursor that you can
		 * use in a subsequent request to fetch the next set of subscriptions.
		 * If empty, this is the final response.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchSubscriptionsResponseFormGroup() {
		return new FormGroup<SearchSubscriptionsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
	 * between the individual fields, and `OR` logic is applied within list-based fields.
	 * For example, setting this filter value:
	 * ```
	 * filter = (locations_ids = ["A", "B"], status = ACTIVE)
	 * ```
	 * returns only active team members assigned to either location "A" or "B".
	 */
	export interface SearchTeamMembersFilter {

		/**
		 * When present, filters by team members assigned to the specified locations.
		 * When empty, includes team members assigned to any location.
		 */
		location_ids?: Array<string>;

		/**
		 * When present, filters by team members who match the given status.
		 * When empty, includes team members of all statuses.
		 */
		status?: string | null;
	}

	/**
	 * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
	 * between the individual fields, and `OR` logic is applied within list-based fields.
	 * For example, setting this filter value:
	 * ```
	 * filter = (locations_ids = ["A", "B"], status = ACTIVE)
	 * ```
	 * returns only active team members assigned to either location "A" or "B".
	 */
	export interface SearchTeamMembersFilterFormProperties {

		/**
		 * When present, filters by team members who match the given status.
		 * When empty, includes team members of all statuses.
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateSearchTeamMembersFilterFormGroup() {
		return new FormGroup<SearchTeamMembersFilterFormProperties>({
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the parameters in a search for `TeamMember` objects. */
	export interface SearchTeamMembersQuery {

		/**
		 * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
		 * between the individual fields, and `OR` logic is applied within list-based fields.
		 * For example, setting this filter value:
		 * ```
		 * filter = (locations_ids = ["A", "B"], status = ACTIVE)
		 * ```
		 * returns only active team members assigned to either location "A" or "B".
		 */
		filter?: SearchTeamMembersFilter;
	}

	/** Represents the parameters in a search for `TeamMember` objects. */
	export interface SearchTeamMembersQueryFormProperties {
	}
	export function CreateSearchTeamMembersQueryFormGroup() {
		return new FormGroup<SearchTeamMembersQueryFormProperties>({
		});

	}


	/** Represents a search request for a filtered list of `TeamMember` objects. */
	export interface SearchTeamMembersRequest {

		/**
		 * The opaque cursor for fetching the next page. For more information, see
		 * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/**
		 * The maximum number of `TeamMember` objects in a page (100 by default).
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit?: number | null;

		/** Represents the parameters in a search for `TeamMember` objects. */
		query?: SearchTeamMembersQuery;
	}

	/** Represents a search request for a filtered list of `TeamMember` objects. */
	export interface SearchTeamMembersRequestFormProperties {

		/**
		 * The opaque cursor for fetching the next page. For more information, see
		 * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * The maximum number of `TeamMember` objects in a page (100 by default).
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchTeamMembersRequestFormGroup() {
		return new FormGroup<SearchTeamMembersRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}


	/** Represents a response from a search request containing a filtered list of `TeamMember` objects. */
	export interface SearchTeamMembersResponse {

		/**
		 * The opaque cursor for fetching the next page. For more information, see
		 * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor?: string | null;

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** The filtered list of `TeamMember` objects. */
		team_members?: Array<TeamMember>;
	}

	/** Represents a response from a search request containing a filtered list of `TeamMember` objects. */
	export interface SearchTeamMembersResponseFormProperties {

		/**
		 * The opaque cursor for fetching the next page. For more information, see
		 * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchTeamMembersResponseFormGroup() {
		return new FormGroup<SearchTeamMembersResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchTerminalCheckoutsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/**
		 * Limits the number of results returned for a single request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit?: number | null;
		query?: TerminalCheckoutQuery;
	}
	export interface SearchTerminalCheckoutsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * Limits the number of results returned for a single request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchTerminalCheckoutsRequestFormGroup() {
		return new FormGroup<SearchTerminalCheckoutsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}

	export interface TerminalCheckoutQuery {
		filter?: TerminalCheckoutQueryFilter;
		sort?: TerminalCheckoutQuerySort;
	}
	export interface TerminalCheckoutQueryFormProperties {
	}
	export function CreateTerminalCheckoutQueryFormGroup() {
		return new FormGroup<TerminalCheckoutQueryFormProperties>({
		});

	}

	export interface TerminalCheckoutQueryFilter {

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		created_at?: TimeRange;

		/**
		 * The `TerminalCheckout` objects associated with a specific device. If no device is specified, then all
		 * `TerminalCheckout` objects for the merchant are displayed.
		 */
		device_id?: string | null;

		/**
		 * Filtered results with the desired status of the `TerminalCheckout`.
		 * Options: PENDING, IN_PROGRESS, CANCELED, COMPLETED
		 */
		status?: string | null;
	}
	export interface TerminalCheckoutQueryFilterFormProperties {

		/**
		 * The `TerminalCheckout` objects associated with a specific device. If no device is specified, then all
		 * `TerminalCheckout` objects for the merchant are displayed.
		 */
		device_id: FormControl<string | null | undefined>,

		/**
		 * Filtered results with the desired status of the `TerminalCheckout`.
		 * Options: PENDING, IN_PROGRESS, CANCELED, COMPLETED
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateTerminalCheckoutQueryFilterFormGroup() {
		return new FormGroup<TerminalCheckoutQueryFilterFormProperties>({
			device_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TerminalCheckoutQuerySort {

		/**
		 * The order in which results are listed.
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order?: string | null;
	}
	export interface TerminalCheckoutQuerySortFormProperties {

		/**
		 * The order in which results are listed.
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateTerminalCheckoutQuerySortFormGroup() {
		return new FormGroup<TerminalCheckoutQuerySortFormProperties>({
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchTerminalCheckoutsResponse {

		/** The requested search result of `TerminalCheckout` objects. */
		checkouts?: Array<TerminalCheckout>;

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}
	export interface SearchTerminalCheckoutsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchTerminalCheckoutsResponseFormGroup() {
		return new FormGroup<SearchTerminalCheckoutsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchTerminalRefundsRequest {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 */
		cursor?: string | null;

		/**
		 * Limits the number of results returned for a single request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit?: number | null;
		query?: TerminalRefundQuery;
	}
	export interface SearchTerminalRefundsRequestFormProperties {

		/**
		 * A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * Limits the number of results returned for a single request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		limit: FormControl<number | null | undefined>,
	}
	export function CreateSearchTerminalRefundsRequestFormGroup() {
		return new FormGroup<SearchTerminalRefundsRequestFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}

	export interface TerminalRefundQuery {
		filter?: TerminalRefundQueryFilter;
		sort?: TerminalRefundQuerySort;
	}
	export interface TerminalRefundQueryFormProperties {
	}
	export function CreateTerminalRefundQueryFormGroup() {
		return new FormGroup<TerminalRefundQueryFormProperties>({
		});

	}

	export interface TerminalRefundQueryFilter {

		/**
		 * Represents a generic time range. The start and end values are
		 * represented in RFC 3339 format. Time ranges are customized to be
		 * inclusive or exclusive based on the needs of a particular endpoint.
		 * Refer to the relevant endpoint-specific documentation to determine
		 * how time ranges are handled.
		 */
		created_at?: TimeRange;

		/**
		 * `TerminalRefund` objects associated with a specific device. If no device is specified, then all
		 * `TerminalRefund` objects for the signed-in account are displayed.
		 */
		device_id?: string | null;

		/**
		 * Filtered results with the desired status of the `TerminalRefund`.
		 * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, or `COMPLETED`.
		 */
		status?: string | null;
	}
	export interface TerminalRefundQueryFilterFormProperties {

		/**
		 * `TerminalRefund` objects associated with a specific device. If no device is specified, then all
		 * `TerminalRefund` objects for the signed-in account are displayed.
		 */
		device_id: FormControl<string | null | undefined>,

		/**
		 * Filtered results with the desired status of the `TerminalRefund`.
		 * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, or `COMPLETED`.
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateTerminalRefundQueryFilterFormGroup() {
		return new FormGroup<TerminalRefundQueryFilterFormProperties>({
			device_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TerminalRefundQuerySort {

		/**
		 * The order in which results are listed.
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order?: string | null;
	}
	export interface TerminalRefundQuerySortFormProperties {

		/**
		 * The order in which results are listed.
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 */
		sort_order: FormControl<string | null | undefined>,
	}
	export function CreateTerminalRefundQuerySortFormGroup() {
		return new FormGroup<TerminalRefundQuerySortFormProperties>({
			sort_order: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchTerminalRefundsResponse {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor?: string | null;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/** The requested search result of `TerminalRefund` objects. */
		refunds?: Array<TerminalRefund>;
	}
	export interface SearchTerminalRefundsResponseFormProperties {

		/**
		 * The pagination cursor to be used in a subsequent request. If empty,
		 * this is the final response.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 */
		cursor: FormControl<string | null | undefined>,
	}
	export function CreateSearchTerminalRefundsResponseFormGroup() {
		return new FormGroup<SearchTerminalRefundsResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies the `status` of `Shift` records to be returned. */
	export enum ShiftFilterStatus { OPEN = 'OPEN', CLOSED = 'CLOSED' }


	/** Enumerates the `Shift` fields to sort on. */
	export enum ShiftSortField { START_AT = 'START_AT', END_AT = 'END_AT', CREATED_AT = 'CREATED_AT', UPDATED_AT = 'UPDATED_AT' }


	/** Enumerates the possible status of a `Shift`. */
	export enum ShiftStatus { OPEN = 'OPEN', CLOSED = 'CLOSED' }


	/** Defines the logic used to apply a workday filter. */
	export enum ShiftWorkdayMatcher { START_AT = 'START_AT', END_AT = 'END_AT', INTERSECTION = 'INTERSECTION' }

	export interface SnippetResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */
		snippet?: Snippet;
	}
	export interface SnippetResponseFormProperties {
	}
	export function CreateSnippetResponseFormGroup() {
		return new FormGroup<SnippetResponseFormProperties>({
		});

	}


	/** The order (e.g., chronological or alphabetical) in which results from a request are returned. */
	export enum SortOrder { DESC = 'DESC', ASC = 'ASC' }

	export interface Status {
	}
	export interface StatusFormProperties {
	}
	export function CreateStatusFormGroup() {
		return new FormGroup<StatusFormProperties>({
		});

	}


	/** Defines the parameters for a `SubmitEvidence` request. */
	export interface SubmitEvidenceRequest {
	}

	/** Defines the parameters for a `SubmitEvidence` request. */
	export interface SubmitEvidenceRequestFormProperties {
	}
	export function CreateSubmitEvidenceRequestFormGroup() {
		return new FormGroup<SubmitEvidenceRequestFormProperties>({
		});

	}


	/** Defines the fields in a `SubmitEvidence` response. */
	export interface SubmitEvidenceResponse {

		/** Represents a dispute a cardholder initiated with their bank. */
		dispute?: Dispute;

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;
	}

	/** Defines the fields in a `SubmitEvidence` response. */
	export interface SubmitEvidenceResponseFormProperties {
	}
	export function CreateSubmitEvidenceResponseFormGroup() {
		return new FormGroup<SubmitEvidenceResponseFormProperties>({
		});

	}


	/** Determines the billing cadence of a [Subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) */
	export enum SubscriptionCadence { DAILY = 'DAILY', WEEKLY = 'WEEKLY', EVERY_TWO_WEEKS = 'EVERY_TWO_WEEKS', THIRTY_DAYS = 'THIRTY_DAYS', SIXTY_DAYS = 'SIXTY_DAYS', NINETY_DAYS = 'NINETY_DAYS', MONTHLY = 'MONTHLY', EVERY_TWO_MONTHS = 'EVERY_TWO_MONTHS', QUARTERLY = 'QUARTERLY', EVERY_FOUR_MONTHS = 'EVERY_FOUR_MONTHS', EVERY_SIX_MONTHS = 'EVERY_SIX_MONTHS', ANNUAL = 'ANNUAL', EVERY_TWO_YEARS = 'EVERY_TWO_YEARS' }


	/** Provides information about the subscription event. */
	export interface SubscriptionEventInfo {
		code?: InfoCode;

		/** A human-readable explanation for the event. */
		detail?: string | null;
	}

	/** Provides information about the subscription event. */
	export interface SubscriptionEventInfoFormProperties {

		/** A human-readable explanation for the event. */
		detail: FormControl<string | null | undefined>,
	}
	export function CreateSubscriptionEventInfoFormGroup() {
		return new FormGroup<SubscriptionEventInfoFormProperties>({
			detail: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The possible subscription event info codes. */
	export enum SubscriptionEventInfoCode { LOCATION_NOT_ACTIVE = 'LOCATION_NOT_ACTIVE', LOCATION_CANNOT_ACCEPT_PAYMENT = 'LOCATION_CANNOT_ACCEPT_PAYMENT', CUSTOMER_DELETED = 'CUSTOMER_DELETED', CUSTOMER_NO_EMAIL = 'CUSTOMER_NO_EMAIL', CUSTOMER_NO_NAME = 'CUSTOMER_NO_NAME' }


	/** The possible subscription event types. */
	export enum SubscriptionEventSubscriptionEventType { START_SUBSCRIPTION = 'START_SUBSCRIPTION', PLAN_CHANGE = 'PLAN_CHANGE', STOP_SUBSCRIPTION = 'STOP_SUBSCRIPTION', DEACTIVATE_SUBSCRIPTION = 'DEACTIVATE_SUBSCRIPTION', RESUME_SUBSCRIPTION = 'RESUME_SUBSCRIPTION' }


	/** Possible subscription status values. */
	export enum SubscriptionStatus { PENDING = 'PENDING', ACTIVE = 'ACTIVE', CANCELED = 'CANCELED', DEACTIVATED = 'DEACTIVATED' }


	/** When to calculate the taxes due on a cart. */
	export enum TaxCalculationPhase { TAX_SUBTOTAL_PHASE = 'TAX_SUBTOTAL_PHASE', TAX_TOTAL_PHASE = 'TAX_TOTAL_PHASE' }


	/** Whether to the tax amount should be additional to or included in the CatalogItem price. */
	export enum TaxInclusionType { ADDITIVE = 'ADDITIVE', INCLUSIVE = 'INCLUSIVE' }


	/** Enumerates the possible assignment types that the team member can have. */
	export enum TeamMemberAssignedLocationsAssignmentType { ALL_CURRENT_AND_FUTURE_LOCATIONS = 'ALL_CURRENT_AND_FUTURE_LOCATIONS', EXPLICIT_LOCATIONS = 'EXPLICIT_LOCATIONS' }


	/** Enumerates the possible invitation statuses the team member can have within a business. */
	export enum TeamMemberInvitationStatus { UNINVITED = 'UNINVITED', PENDING = 'PENDING', ACCEPTED = 'ACCEPTED' }


	/** Enumerates the possible statuses the team member can have within a business. */
	export enum TeamMemberStatus { ACTIVE = 'ACTIVE', INACTIVE = 'INACTIVE' }


	/** Indicates the method used to enter the card's details. */
	export enum TenderCardDetailsEntryMethod { SWIPED = 'SWIPED', KEYED = 'KEYED', EMV = 'EMV', ON_FILE = 'ON_FILE', CONTACTLESS = 'CONTACTLESS' }


	/** Indicates the card transaction's current status. */
	export enum TenderCardDetailsStatus { AUTHORIZED = 'AUTHORIZED', CAPTURED = 'CAPTURED', VOIDED = 'VOIDED', FAILED = 'FAILED' }


	/** Indicates a tender's type. */
	export enum TenderType { CARD = 'CARD', CASH = 'CASH', THIRD_PARTY_CARD = 'THIRD_PARTY_CARD', SQUARE_GIFT_CARD = 'SQUARE_GIFT_CARD', NO_SALE = 'NO_SALE', WALLET = 'WALLET', OTHER = 'OTHER' }


	/** Indicates the Square product used to process a transaction. */
	export enum TransactionProduct { REGISTER = 'REGISTER', EXTERNAL_API = 'EXTERNAL_API', BILLING = 'BILLING', APPOINTMENTS = 'APPOINTMENTS', INVOICES = 'INVOICES', ONLINE_STORE = 'ONLINE_STORE', PAYROLL = 'PAYROLL', OTHER = 'OTHER' }


	/** The transaction type used in the disputed payment. */
	export enum TransactionType { DEBIT = 'DEBIT', CREDIT = 'CREDIT' }

	export interface Type {
	}
	export interface TypeFormProperties {
	}
	export function CreateTypeFormGroup() {
		return new FormGroup<TypeFormProperties>({
		});

	}


	/** A request to unlink a customer to a gift card */
	export interface UnlinkCustomerFromGiftCardRequest {

		/**
		 * Required
		 * Max length: 191
		 * Min length: 1
		 */
		customer_id: string;
	}

	/** A request to unlink a customer to a gift card */
	export interface UnlinkCustomerFromGiftCardRequestFormProperties {

		/**
		 * Required
		 * Max length: 191
		 * Min length: 1
		 */
		customer_id: FormControl<string | null | undefined>,
	}
	export function CreateUnlinkCustomerFromGiftCardRequestFormGroup() {
		return new FormGroup<UnlinkCustomerFromGiftCardRequestFormProperties>({
			customer_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(191)]),
		});

	}


	/**
	 * A response that contains one `GiftCard` that was unlinked. The response might contain a set of `Error`
	 * objects if the request resulted in errors.
	 */
	export interface UnlinkCustomerFromGiftCardResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a Square gift card. */
		gift_card?: GiftCard;
	}

	/**
	 * A response that contains one `GiftCard` that was unlinked. The response might contain a set of `Error`
	 * objects if the request resulted in errors.
	 */
	export interface UnlinkCustomerFromGiftCardResponseFormProperties {
	}
	export function CreateUnlinkCustomerFromGiftCardResponseFormGroup() {
		return new FormGroup<UnlinkCustomerFromGiftCardResponseFormProperties>({
		});

	}

	export interface UpdateBookingRequest {

		/**
		 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		 * at a given location to a requesting customer in one or more appointment segments.
		 * Required
		 */
		booking: Booking;

		/**
		 * A unique key to make this request an idempotent operation.
		 * Max length: 255
		 */
		idempotency_key?: string | null;
	}
	export interface UpdateBookingRequestFormProperties {

		/**
		 * A unique key to make this request an idempotent operation.
		 * Max length: 255
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateUpdateBookingRequestFormGroup() {
		return new FormGroup<UpdateBookingRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
		});

	}

	export interface UpdateBookingResponse {

		/**
		 * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
		 * at a given location to a requesting customer in one or more appointment segments.
		 */
		booking?: Booking;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}
	export interface UpdateBookingResponseFormProperties {
	}
	export function CreateUpdateBookingResponseFormGroup() {
		return new FormGroup<UpdateBookingResponseFormProperties>({
		});

	}


	/** A request to update a `BreakType`. */
	export interface UpdateBreakTypeRequest {

		/**
		 * A defined break template that sets an expectation for possible `Break`
		 * instances on a `Shift`.
		 * Required
		 */
		break_type: BreakType;
	}

	/** A request to update a `BreakType`. */
	export interface UpdateBreakTypeRequestFormProperties {
	}
	export function CreateUpdateBreakTypeRequestFormGroup() {
		return new FormGroup<UpdateBreakTypeRequestFormProperties>({
		});

	}


	/**
	 * A response to a request to update a `BreakType`. The response contains
	 * the requested `BreakType` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface UpdateBreakTypeResponse {

		/**
		 * A defined break template that sets an expectation for possible `Break`
		 * instances on a `Shift`.
		 */
		break_type?: BreakType;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * A response to a request to update a `BreakType`. The response contains
	 * the requested `BreakType` objects and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface UpdateBreakTypeResponseFormProperties {
	}
	export function CreateUpdateBreakTypeResponseFormGroup() {
		return new FormGroup<UpdateBreakTypeResponseFormProperties>({
		});

	}


	/**
	 * Defines the body parameters that can be included in a request to the
	 * [UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
	 */
	export interface UpdateCustomerGroupRequest {

		/**
		 * Represents a group of customer profiles.
		 * Customer groups can be created, be modified, and have their membership defined using
		 * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		 * Required
		 */
		group: CustomerGroup;
	}

	/**
	 * Defines the body parameters that can be included in a request to the
	 * [UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
	 */
	export interface UpdateCustomerGroupRequestFormProperties {
	}
	export function CreateUpdateCustomerGroupRequestFormGroup() {
		return new FormGroup<UpdateCustomerGroupRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
	 * Either `errors` or `group` is present in a given response (never both).
	 */
	export interface UpdateCustomerGroupResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a group of customer profiles.
		 * Customer groups can be created, be modified, and have their membership defined using
		 * the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
		 */
		group?: CustomerGroup;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
	 * Either `errors` or `group` is present in a given response (never both).
	 */
	export interface UpdateCustomerGroupResponseFormProperties {
	}
	export function CreateUpdateCustomerGroupResponseFormGroup() {
		return new FormGroup<UpdateCustomerGroupResponseFormProperties>({
		});

	}


	/**
	 * Defines the body parameters that can be included in a request to the
	 * `UpdateCustomer` endpoint.
	 */
	export interface UpdateCustomerRequest {

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		address?: Address;

		/**
		 * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		 * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		 * You can also specify this value in `YYYY-MM-DD` format.
		 */
		birthday?: string | null;

		/** A business name associated with the customer profile. */
		company_name?: string | null;

		/** The email address associated with the customer profile. */
		email_address?: string | null;

		/** The family name (that is, the last name) associated with the customer profile. */
		family_name?: string | null;

		/** The given name (that is, the first name) associated with the customer profile. */
		given_name?: string | null;

		/** A nickname for the customer profile. */
		nickname?: string | null;

		/** A custom note associated with the customer profile. */
		note?: string | null;

		/** The 11-digit phone number associated with the customer profile. */
		phone_number?: string | null;

		/**
		 * An optional second ID used to associate the customer profile with an
		 * entity in another system.
		 */
		reference_id?: string | null;

		/**
		 * The current version of the customer profile.
		 * As a best practice, you should include this field to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. For more information, see [Update a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#update-a-customer-profile).
		 */
		version?: number | null;
	}

	/**
	 * Defines the body parameters that can be included in a request to the
	 * `UpdateCustomer` endpoint.
	 */
	export interface UpdateCustomerRequestFormProperties {

		/**
		 * The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
		 * For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
		 * You can also specify this value in `YYYY-MM-DD` format.
		 */
		birthday: FormControl<string | null | undefined>,

		/** A business name associated with the customer profile. */
		company_name: FormControl<string | null | undefined>,

		/** The email address associated with the customer profile. */
		email_address: FormControl<string | null | undefined>,

		/** The family name (that is, the last name) associated with the customer profile. */
		family_name: FormControl<string | null | undefined>,

		/** The given name (that is, the first name) associated with the customer profile. */
		given_name: FormControl<string | null | undefined>,

		/** A nickname for the customer profile. */
		nickname: FormControl<string | null | undefined>,

		/** A custom note associated with the customer profile. */
		note: FormControl<string | null | undefined>,

		/** The 11-digit phone number associated with the customer profile. */
		phone_number: FormControl<string | null | undefined>,

		/**
		 * An optional second ID used to associate the customer profile with an
		 * entity in another system.
		 */
		reference_id: FormControl<string | null | undefined>,

		/**
		 * The current version of the customer profile.
		 * As a best practice, you should include this field to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. For more information, see [Update a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#update-a-customer-profile).
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateUpdateCustomerRequestFormGroup() {
		return new FormGroup<UpdateCustomerRequestFormProperties>({
			birthday: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
			nickname: new FormControl<string | null | undefined>(undefined),
			note: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			reference_id: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `UpdateCustomer` endpoint.
	 * Either `errors` or `customer` is present in a given response (never both).
	 */
	export interface UpdateCustomerResponse {

		/** Represents a Square customer profile in the Customer Directory of a Square seller. */
		customer?: Customer;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the `UpdateCustomer` endpoint.
	 * Either `errors` or `customer` is present in a given response (never both).
	 */
	export interface UpdateCustomerResponseFormProperties {
	}
	export function CreateUpdateCustomerResponseFormGroup() {
		return new FormGroup<UpdateCustomerResponseFormProperties>({
		});

	}


	/** Describes a `UpdateInvoice` request. */
	export interface UpdateInvoiceRequest {

		/**
		 * The list of fields to clear.
		 * For examples, see [Update an invoice](https://developer.squareup.com/docs/invoices-api/overview#update-an-invoice).
		 */
		fields_to_clear?: Array<string>;

		/**
		 * A unique string that identifies the `UpdateInvoice` request. If you do not
		 * provide `idempotency_key` (or provide an empty string as the value), the endpoint
		 * treats each request as independent.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Max length: 128
		 */
		idempotency_key?: string | null;

		/**
		 * Stores information about an invoice. You use the Invoices API to create and manage
		 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		 * Required
		 */
		invoice: Invoice;
	}

	/** Describes a `UpdateInvoice` request. */
	export interface UpdateInvoiceRequestFormProperties {

		/**
		 * A unique string that identifies the `UpdateInvoice` request. If you do not
		 * provide `idempotency_key` (or provide an empty string as the value), the endpoint
		 * treats each request as independent.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateUpdateInvoiceRequestFormGroup() {
		return new FormGroup<UpdateInvoiceRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(128)]),
		});

	}


	/** Describes a `UpdateInvoice` response. */
	export interface UpdateInvoiceResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Stores information about an invoice. You use the Invoices API to create and manage
		 * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
		 */
		invoice?: Invoice;
	}

	/** Describes a `UpdateInvoice` response. */
	export interface UpdateInvoiceResponseFormProperties {
	}
	export function CreateUpdateInvoiceResponseFormGroup() {
		return new FormGroup<UpdateInvoiceResponseFormProperties>({
		});

	}

	export interface UpdateItemModifierListsRequest {

		/**
		 * The IDs of the catalog items associated with the CatalogModifierList objects being updated.
		 * Required
		 */
		item_ids: Array<string>;

		/** The IDs of the CatalogModifierList objects to disable for the CatalogItem. */
		modifier_lists_to_disable?: Array<string>;

		/** The IDs of the CatalogModifierList objects to enable for the CatalogItem. */
		modifier_lists_to_enable?: Array<string>;
	}
	export interface UpdateItemModifierListsRequestFormProperties {
	}
	export function CreateUpdateItemModifierListsRequestFormGroup() {
		return new FormGroup<UpdateItemModifierListsRequestFormProperties>({
		});

	}

	export interface UpdateItemModifierListsResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */
		updated_at?: string | null;
	}
	export interface UpdateItemModifierListsResponseFormProperties {

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateUpdateItemModifierListsResponseFormGroup() {
		return new FormGroup<UpdateItemModifierListsResponseFormProperties>({
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateItemTaxesRequest {

		/**
		 * IDs for the CatalogItems associated with the CatalogTax objects being updated.
		 * Required
		 */
		item_ids: Array<string>;

		/** IDs of the CatalogTax objects to disable. */
		taxes_to_disable?: Array<string>;

		/** IDs of the CatalogTax objects to enable. */
		taxes_to_enable?: Array<string>;
	}
	export interface UpdateItemTaxesRequestFormProperties {
	}
	export function CreateUpdateItemTaxesRequestFormGroup() {
		return new FormGroup<UpdateItemTaxesRequestFormProperties>({
		});

	}

	export interface UpdateItemTaxesResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */
		updated_at?: string | null;
	}
	export interface UpdateItemTaxesResponseFormProperties {

		/** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateUpdateItemTaxesResponseFormGroup() {
		return new FormGroup<UpdateItemTaxesResponseFormProperties>({
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Request object for the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint. */
	export interface UpdateLocationRequest {
		location?: Location;
	}

	/** Request object for the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint. */
	export interface UpdateLocationRequestFormProperties {
	}
	export function CreateUpdateLocationRequestFormGroup() {
		return new FormGroup<UpdateLocationRequestFormProperties>({
		});

	}


	/** Response object returned by the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint. */
	export interface UpdateLocationResponse {

		/** Information on errors encountered during the request. */
		errors?: Array<Error>;
		location?: Location;
	}

	/** Response object returned by the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint. */
	export interface UpdateLocationResponseFormProperties {
	}
	export function CreateUpdateLocationResponseFormGroup() {
		return new FormGroup<UpdateLocationResponseFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in requests to the
	 * [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
	 */
	export interface UpdateOrderRequest {

		/**
		 * The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
		 * fields to clear. For example, `line_items[uid].note`.
		 * For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).
		 */
		fields_to_clear?: Array<string>;

		/**
		 * A value you specify that uniquely identifies this update request.
		 * If you are unsure whether a particular update was applied to an order successfully,
		 * you can reattempt it with the same idempotency key without
		 * worrying about creating duplicate updates to the order.
		 * The latest order version is returned.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * Max length: 192
		 */
		idempotency_key?: string | null;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;
	}

	/**
	 * Defines the fields that are included in requests to the
	 * [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
	 */
	export interface UpdateOrderRequestFormProperties {

		/**
		 * A value you specify that uniquely identifies this update request.
		 * If you are unsure whether a particular update was applied to an order successfully,
		 * you can reattempt it with the same idempotency key without
		 * worrying about creating duplicate updates to the order.
		 * The latest order version is returned.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * Max length: 192
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateUpdateOrderRequestFormGroup() {
		return new FormGroup<UpdateOrderRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(192)]),
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
	 */
	export interface UpdateOrderResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Contains all information related to a single order to process with Square,
		 * including line items that specify the products to purchase. `Order` objects also
		 * include information about any associated tenders, refunds, and returns.
		 * All Connect V2 Transactions have all been converted to Orders including all associated
		 * itemization data.
		 */
		order?: Order;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
	 */
	export interface UpdateOrderResponseFormProperties {
	}
	export function CreateUpdateOrderResponseFormGroup() {
		return new FormGroup<UpdateOrderResponseFormProperties>({
		});

	}


	/**
	 * Describes a request to update a payment using 
	 * [UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
	 */
	export interface UpdatePaymentRequest {

		/**
		 * A unique string that identifies this `UpdatePayment` request. Keys can be any valid string
		 * but must be unique for every `UpdatePayment` request.
		 * The maximum is 45 characters.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: string;

		/** Represents a payment processed by the Square API. */
		payment?: Payment;
	}

	/**
	 * Describes a request to update a payment using 
	 * [UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
	 */
	export interface UpdatePaymentRequestFormProperties {

		/**
		 * A unique string that identifies this `UpdatePayment` request. Keys can be any valid string
		 * but must be unique for every `UpdatePayment` request.
		 * The maximum is 45 characters.
		 * For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
		 * Required
		 * Max length: 45
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateUpdatePaymentRequestFormGroup() {
		return new FormGroup<UpdatePaymentRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(45)]),
		});

	}


	/**
	 * Defines the response returned by 
	 * [UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
	 */
	export interface UpdatePaymentResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents a payment processed by the Square API. */
		payment?: Payment;
	}

	/**
	 * Defines the response returned by 
	 * [UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
	 */
	export interface UpdatePaymentResponseFormProperties {
	}
	export function CreateUpdatePaymentResponseFormGroup() {
		return new FormGroup<UpdatePaymentResponseFormProperties>({
		});

	}


	/** A request to update a `Shift` object. */
	export interface UpdateShiftRequest {

		/**
		 * A record of the hourly rate, start, and end times for a single work shift
		 * for an employee. This might include a record of the start and end times for breaks
		 * taken during the shift.
		 * Required
		 */
		shift: Shift;
	}

	/** A request to update a `Shift` object. */
	export interface UpdateShiftRequestFormProperties {
	}
	export function CreateUpdateShiftRequestFormGroup() {
		return new FormGroup<UpdateShiftRequestFormProperties>({
		});

	}


	/**
	 * The response to a request to update a `Shift`. The response contains
	 * the updated `Shift` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface UpdateShiftResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * A record of the hourly rate, start, and end times for a single work shift
		 * for an employee. This might include a record of the start and end times for breaks
		 * taken during the shift.
		 */
		shift?: Shift;
	}

	/**
	 * The response to a request to update a `Shift`. The response contains
	 * the updated `Shift` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface UpdateShiftResponseFormProperties {
	}
	export function CreateUpdateShiftResponseFormGroup() {
		return new FormGroup<UpdateShiftResponseFormProperties>({
		});

	}


	/**
	 * Defines parameters in a
	 * [UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint
	 * request.
	 */
	export interface UpdateSubscriptionRequest {

		/**
		 * Represents a customer subscription to a subscription plan.
		 * For an overview of the `Subscription` type, see
		 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		 */
		subscription?: Subscription;
	}

	/**
	 * Defines parameters in a
	 * [UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint
	 * request.
	 */
	export interface UpdateSubscriptionRequestFormProperties {
	}
	export function CreateUpdateSubscriptionRequestFormGroup() {
		return new FormGroup<UpdateSubscriptionRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response from the
	 * [UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint.
	 */
	export interface UpdateSubscriptionResponse {

		/** Information about errors encountered during the request. */
		errors?: Array<Error>;

		/**
		 * Represents a customer subscription to a subscription plan.
		 * For an overview of the `Subscription` type, see
		 * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
		 */
		subscription?: Subscription;
	}

	/**
	 * Defines the fields that are included in the response from the
	 * [UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint.
	 */
	export interface UpdateSubscriptionResponseFormProperties {
	}
	export function CreateUpdateSubscriptionResponseFormGroup() {
		return new FormGroup<UpdateSubscriptionResponseFormProperties>({
		});

	}


	/** Represents an update request for the `WageSetting` object describing a `TeamMember`. */
	export interface UpdateWageSettingRequest {

		/**
		 * An object representing a team member's wage information.
		 * Required
		 */
		wage_setting: WageSetting;
	}

	/** Represents an update request for the `WageSetting` object describing a `TeamMember`. */
	export interface UpdateWageSettingRequestFormProperties {
	}
	export function CreateUpdateWageSettingRequestFormGroup() {
		return new FormGroup<UpdateWageSettingRequestFormProperties>({
		});

	}


	/**
	 * Represents a response from an update request containing the updated `WageSetting` object
	 * or error messages.
	 */
	export interface UpdateWageSettingResponse {

		/** The errors that occurred during the request. */
		errors?: Array<Error>;

		/** An object representing a team member's wage information. */
		wage_setting?: WageSetting;
	}

	/**
	 * Represents a response from an update request containing the updated `WageSetting` object
	 * or error messages.
	 */
	export interface UpdateWageSettingResponseFormProperties {
	}
	export function CreateUpdateWageSettingResponseFormGroup() {
		return new FormGroup<UpdateWageSettingResponseFormProperties>({
		});

	}


	/** A request to update a `WorkweekConfig` object. */
	export interface UpdateWorkweekConfigRequest {

		/**
		 * Sets the day of the week and hour of the day that a business starts a
		 * workweek. This is used to calculate overtime pay.
		 * Required
		 */
		workweek_config: WorkweekConfig;
	}

	/** A request to update a `WorkweekConfig` object. */
	export interface UpdateWorkweekConfigRequestFormProperties {
	}
	export function CreateUpdateWorkweekConfigRequestFormGroup() {
		return new FormGroup<UpdateWorkweekConfigRequestFormProperties>({
		});

	}


	/**
	 * The response to a request to update a `WorkweekConfig` object. The response contains
	 * the updated `WorkweekConfig` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface UpdateWorkweekConfigResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/**
		 * Sets the day of the week and hour of the day that a business starts a
		 * workweek. This is used to calculate overtime pay.
		 */
		workweek_config?: WorkweekConfig;
	}

	/**
	 * The response to a request to update a `WorkweekConfig` object. The response contains
	 * the updated `WorkweekConfig` object and might contain a set of `Error` objects if
	 * the request resulted in errors.
	 */
	export interface UpdateWorkweekConfigResponseFormProperties {
	}
	export function CreateUpdateWorkweekConfigResponseFormGroup() {
		return new FormGroup<UpdateWorkweekConfigResponseFormProperties>({
		});

	}

	export interface UpsertCatalogObjectRequest {

		/**
		 * A value you specify that uniquely identifies this
		 * request among all your requests. A common way to create
		 * a valid idempotency key is to use a Universally unique
		 * identifier (UUID).
		 * If you're unsure whether a particular request was successful,
		 * you can reattempt it with the same idempotency key without
		 * worrying about creating duplicate objects.
		 * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: string;

		/**
		 * The wrapper object for the Catalog entries of a given object type.
		 * The type of a particular `CatalogObject` is determined by the value of the
		 * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
		 * For example, the following list shows some instances of `CatalogObject` of a given `type` and
		 * their corresponding data attribute that can be set:
		 * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
		 * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
		 * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
		 * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
		 * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
		 * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
		 * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
		 * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
		 * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
		 * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
		 * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
		 * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
		 * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
		 * For a more detailed discussion of the Catalog data model, please see the
		 * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
		 * Required
		 */
		object: CatalogObject;
	}
	export interface UpsertCatalogObjectRequestFormProperties {

		/**
		 * A value you specify that uniquely identifies this
		 * request among all your requests. A common way to create
		 * a valid idempotency key is to use a Universally unique
		 * identifier (UUID).
		 * If you're unsure whether a particular request was successful,
		 * you can reattempt it with the same idempotency key without
		 * worrying about creating duplicate objects.
		 * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
		 * Required
		 * Min length: 1
		 */
		idempotency_key: FormControl<string | null | undefined>,
	}
	export function CreateUpsertCatalogObjectRequestFormGroup() {
		return new FormGroup<UpsertCatalogObjectRequestFormProperties>({
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export interface UpsertCatalogObjectResponse {

		/**
		 * The wrapper object for the Catalog entries of a given object type.
		 * The type of a particular `CatalogObject` is determined by the value of the
		 * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
		 * For example, the following list shows some instances of `CatalogObject` of a given `type` and
		 * their corresponding data attribute that can be set:
		 * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
		 * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
		 * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
		 * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
		 * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
		 * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
		 * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
		 * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
		 * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
		 * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
		 * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
		 * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
		 * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
		 * For a more detailed discussion of the Catalog data model, please see the
		 * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
		 */
		catalog_object?: CatalogObject;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The mapping between client and server IDs for this upsert. */
		id_mappings?: Array<CatalogIdMapping>;
	}
	export interface UpsertCatalogObjectResponseFormProperties {
	}
	export function CreateUpsertCatalogObjectResponseFormGroup() {
		return new FormGroup<UpsertCatalogObjectResponseFormProperties>({
		});

	}


	/** Represents an `UpsertSnippet` request. */
	export interface UpsertSnippetRequest {

		/**
		 * Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
		 * Required
		 */
		snippet: Snippet;
	}

	/** Represents an `UpsertSnippet` request. */
	export interface UpsertSnippetRequestFormProperties {
	}
	export function CreateUpsertSnippetRequestFormGroup() {
		return new FormGroup<UpsertSnippetRequestFormProperties>({
		});

	}


	/** Represents an `UpsertSnippet` response. The response can include either `snippet` or `errors`. */
	export interface UpsertSnippetResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages. */
		snippet?: Snippet;
	}

	/** Represents an `UpsertSnippet` response. The response can include either `snippet` or `errors`. */
	export interface UpsertSnippetResponseFormProperties {
	}
	export function CreateUpsertSnippetResponseFormGroup() {
		return new FormGroup<UpsertSnippetResponseFormProperties>({
		});

	}

	export interface V1CreateEmployeeRoleRequest {

		/** V1EmployeeRole */
		employee_role?: V1EmployeeRole;
	}
	export interface V1CreateEmployeeRoleRequestFormProperties {
	}
	export function CreateV1CreateEmployeeRoleRequestFormGroup() {
		return new FormGroup<V1CreateEmployeeRoleRequestFormProperties>({
		});

	}


	/** V1EmployeeRole */
	export interface V1EmployeeRole {

		/** The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created. */
		created_at?: string | null;

		/** The role's unique ID, Can only be set by Square. */
		id?: string | null;

		/** If true, employees with this role have all permissions, regardless of the values indicated in permissions. */
		is_owner?: boolean | null;

		/**
		 * The role's merchant-defined name.
		 * Required
		 */
		name: string;

		/**
		 * The role's permissions.
		 * Required
		 */
		permissions: Array<string>;

		/** The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated. */
		updated_at?: string | null;
	}

	/** V1EmployeeRole */
	export interface V1EmployeeRoleFormProperties {

		/** The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created. */
		created_at: FormControl<string | null | undefined>,

		/** The role's unique ID, Can only be set by Square. */
		id: FormControl<string | null | undefined>,

		/** If true, employees with this role have all permissions, regardless of the values indicated in permissions. */
		is_owner: FormControl<boolean | null | undefined>,

		/**
		 * The role's merchant-defined name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateV1EmployeeRoleFormGroup() {
		return new FormGroup<V1EmployeeRoleFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_owner: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1CreateRefundRequest */
	export interface V1CreateRefundRequest {

		/**
		 * The ID of the payment to refund. If you are creating a `PARTIAL`
		 * refund for a split tender payment, instead provide the id of the
		 * particular tender you want to refund.
		 * Required
		 */
		payment_id: string;

		/**
		 * The reason for the refund.
		 * Required
		 */
		reason: string;
		refunded_money?: V1Money;

		/** An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once. */
		request_idempotence_key?: string | null;

		/**
		 * The type of refund (FULL or PARTIAL).
		 * Required
		 */
		type: string;
	}

	/** V1CreateRefundRequest */
	export interface V1CreateRefundRequestFormProperties {

		/**
		 * The ID of the payment to refund. If you are creating a `PARTIAL`
		 * refund for a split tender payment, instead provide the id of the
		 * particular tender you want to refund.
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * The reason for the refund.
		 * Required
		 */
		reason: FormControl<string | null | undefined>,

		/** An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once. */
		request_idempotence_key: FormControl<string | null | undefined>,

		/**
		 * The type of refund (FULL or PARTIAL).
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateV1CreateRefundRequestFormGroup() {
		return new FormGroup<V1CreateRefundRequestFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_idempotence_key: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface V1Money {

		/**
		 * Amount in the lowest denominated value of this Currency. E.g. in USD
		 * these are cents, in JPY they are Yen (which do not have a 'cent' concept).
		 */
		amount?: number | null;
		currency_code?: string | null;
	}
	export interface V1MoneyFormProperties {

		/**
		 * Amount in the lowest denominated value of this Currency. E.g. in USD
		 * these are cents, in JPY they are Yen (which do not have a 'cent' concept).
		 */
		amount: FormControl<number | null | undefined>,
		currency_code: FormControl<string | null | undefined>,
	}
	export function CreateV1MoneyFormGroup() {
		return new FormGroup<V1MoneyFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			currency_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum V1CreateRefundRequestType { FULL = 'FULL', PARTIAL = 'PARTIAL' }


	/** Represents one of a business's employees. */
	export interface V1Employee {

		/** The IDs of the locations the employee is allowed to clock in at. */
		authorized_location_ids?: Array<string>;

		/** The time when the employee entity was created, in ISO 8601 format. */
		created_at?: string | null;

		/** The employee's email address. */
		email?: string | null;

		/** An ID the merchant can set to associate the employee with an entity in another system. */
		external_id?: string | null;

		/**
		 * The employee's first name.
		 * Required
		 */
		first_name: string;

		/** The employee's unique ID. */
		id?: string | null;

		/**
		 * The employee's last name.
		 * Required
		 */
		last_name: string;

		/** The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee. */
		role_ids?: Array<string>;

		/** Whether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. */
		status?: string | null;

		/** The time when the employee entity was most recently updated, in ISO 8601 format. */
		updated_at?: string | null;
	}

	/** Represents one of a business's employees. */
	export interface V1EmployeeFormProperties {

		/** The time when the employee entity was created, in ISO 8601 format. */
		created_at: FormControl<string | null | undefined>,

		/** The employee's email address. */
		email: FormControl<string | null | undefined>,

		/** An ID the merchant can set to associate the employee with an entity in another system. */
		external_id: FormControl<string | null | undefined>,

		/**
		 * The employee's first name.
		 * Required
		 */
		first_name: FormControl<string | null | undefined>,

		/** The employee's unique ID. */
		id: FormControl<string | null | undefined>,

		/**
		 * The employee's last name.
		 * Required
		 */
		last_name: FormControl<string | null | undefined>,

		/** Whether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. */
		status: FormControl<string | null | undefined>,

		/** The time when the employee entity was most recently updated, in ISO 8601 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateV1EmployeeFormGroup() {
		return new FormGroup<V1EmployeeFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			external_id: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum V1EmployeeRolePermissions { REGISTER_ACCESS_SALES_HISTORY = 'REGISTER_ACCESS_SALES_HISTORY', REGISTER_APPLY_RESTRICTED_DISCOUNTS = 'REGISTER_APPLY_RESTRICTED_DISCOUNTS', REGISTER_CHANGE_SETTINGS = 'REGISTER_CHANGE_SETTINGS', REGISTER_EDIT_ITEM = 'REGISTER_EDIT_ITEM', REGISTER_ISSUE_REFUNDS = 'REGISTER_ISSUE_REFUNDS', REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE = 'REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE', REGISTER_VIEW_SUMMARY_REPORTS = 'REGISTER_VIEW_SUMMARY_REPORTS' }

	export enum V1EmployeeStatus { ACTIVE = 'ACTIVE', INACTIVE = 'INACTIVE' }

	export interface V1ListEmployeeRolesRequest {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token?: string | null;

		/** The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. */
		limit?: number | null;

		/** The order in which employees are listed in the response, based on their created_at field.Default value: ASC */
		order?: string | null;
	}
	export interface V1ListEmployeeRolesRequestFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token: FormControl<string | null | undefined>,

		/** The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. */
		limit: FormControl<number | null | undefined>,

		/** The order in which employees are listed in the response, based on their created_at field.Default value: ASC */
		order: FormControl<string | null | undefined>,
	}
	export function CreateV1ListEmployeeRolesRequestFormGroup() {
		return new FormGroup<V1ListEmployeeRolesRequestFormProperties>({
			batch_token: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface V1ListEmployeeRolesResponse {
		items?: Array<V1EmployeeRole>;
	}
	export interface V1ListEmployeeRolesResponseFormProperties {
	}
	export function CreateV1ListEmployeeRolesResponseFormGroup() {
		return new FormGroup<V1ListEmployeeRolesResponseFormProperties>({
		});

	}

	export interface V1ListEmployeesRequest {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token?: string | null;

		/** If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. */
		begin_created_at?: string | null;

		/** If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format */
		begin_updated_at?: string | null;

		/** If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. */
		end_created_at?: string | null;

		/** If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. */
		end_updated_at?: string | null;

		/** If provided, the endpoint returns only employee entities with the specified external_id. */
		external_id?: string | null;

		/** The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. */
		limit?: number | null;

		/** The order in which employees are listed in the response, based on their created_at field.      Default value: ASC */
		order?: string | null;

		/** If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). */
		status?: string | null;
	}
	export interface V1ListEmployeesRequestFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token: FormControl<string | null | undefined>,

		/** If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. */
		begin_created_at: FormControl<string | null | undefined>,

		/** If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format */
		begin_updated_at: FormControl<string | null | undefined>,

		/** If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. */
		end_created_at: FormControl<string | null | undefined>,

		/** If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. */
		end_updated_at: FormControl<string | null | undefined>,

		/** If provided, the endpoint returns only employee entities with the specified external_id. */
		external_id: FormControl<string | null | undefined>,

		/** The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. */
		limit: FormControl<number | null | undefined>,

		/** The order in which employees are listed in the response, based on their created_at field.      Default value: ASC */
		order: FormControl<string | null | undefined>,

		/** If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). */
		status: FormControl<string | null | undefined>,
	}
	export function CreateV1ListEmployeesRequestFormGroup() {
		return new FormGroup<V1ListEmployeesRequestFormProperties>({
			batch_token: new FormControl<string | null | undefined>(undefined),
			begin_created_at: new FormControl<string | null | undefined>(undefined),
			begin_updated_at: new FormControl<string | null | undefined>(undefined),
			end_created_at: new FormControl<string | null | undefined>(undefined),
			end_updated_at: new FormControl<string | null | undefined>(undefined),
			external_id: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum V1ListEmployeesRequestStatus { ACTIVE = 'ACTIVE', INACTIVE = 'INACTIVE' }

	export interface V1ListEmployeesResponse {
		items?: Array<V1Employee>;
	}
	export interface V1ListEmployeesResponseFormProperties {
	}
	export function CreateV1ListEmployeesResponseFormGroup() {
		return new FormGroup<V1ListEmployeesResponseFormProperties>({
		});

	}

	export interface V1ListOrdersRequest {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token?: string | null;

		/** The maximum number of payments to return in a single response. This value cannot exceed 200. */
		limit?: number | null;

		/** The order in which payments are listed in the response. */
		order?: string | null;
	}
	export interface V1ListOrdersRequestFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token: FormControl<string | null | undefined>,

		/** The maximum number of payments to return in a single response. This value cannot exceed 200. */
		limit: FormControl<number | null | undefined>,

		/** The order in which payments are listed in the response. */
		order: FormControl<string | null | undefined>,
	}
	export function CreateV1ListOrdersRequestFormGroup() {
		return new FormGroup<V1ListOrdersRequestFormProperties>({
			batch_token: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface V1ListOrdersResponse {
		items?: Array<V1Order>;
	}
	export interface V1ListOrdersResponseFormProperties {
	}
	export function CreateV1ListOrdersResponseFormGroup() {
		return new FormGroup<V1ListOrdersResponseFormProperties>({
		});

	}


	/** V1Order */
	export interface V1Order {

		/** For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC). */
		btc_price_satoshi?: number | null;

		/** For Bitcoin transactions, the address that the buyer sent Bitcoin to. */
		btc_receive_address?: string | null;

		/** The email address of the order's buyer. */
		buyer_email?: string | null;

		/** A note provided by the buyer when the order was created, if any. */
		buyer_note?: string | null;

		/** A note provided by the merchant when the order's state was set to CANCELED, if any. */
		canceled_note?: string | null;

		/** A note provided by the merchant when the order's state was set to COMPLETED, if any */
		completed_note?: string | null;

		/** The time when the order was created, in ISO 8601 format. */
		created_at?: string | null;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The time when the order expires if no action is taken, in ISO 8601 format. */
		expires_at?: string | null;

		/** The order's unique identifier. */
		id?: string | null;

		/** The history of actions associated with the order. */
		order_history?: Array<V1OrderHistoryEntry>;

		/** The unique identifier of the payment associated with the order. */
		payment_id?: string | null;

		/** The promo code provided by the buyer, if any. */
		promo_code?: string | null;

		/** The name of the order's buyer. */
		recipient_name?: string | null;

		/** The phone number to use for the order's delivery. */
		recipient_phone_number?: string | null;

		/** A note provided by the merchant when the order's state was set to REFUNDED, if any. */
		refunded_note?: string | null;

		/**
		 * Represents a postal address in a country. The address format is based
		 * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
		 * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
		 * This format has dedicated fields for four address components: postal code,
		 * locality (city), administrative district (state, prefecture, or province), and
		 * sublocality (town or village). These components have dedicated fields in the
		 * `Address` object because software sometimes behaves differently based on them.
		 * For example, sales tax software may charge different amounts of sales tax
		 * based on the postal code, and some software is only available in
		 * certain states due to compliance reasons.
		 * For the remaining address components, the `Address` type provides the
		 * `address_line_1` and `address_line_2` fields for free-form data entry.
		 * These fields are free-form because the remaining address components have
		 * too many variations around the world and typical software does not parse
		 * these components. These fields enable users to enter anything they want.
		 * Note that, in the current implementation, all other `Address` type fields are blank.
		 * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
		 * `administrative_district_level_2`, `administrative_district_level_3`,
		 * `first_name`, `last_name`, and `organization`.
		 * When it comes to localization, the seller's language preferences
		 * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
		 * are ignored for addresses. Even though Square products (such as Square Point of Sale
		 * and the Seller Dashboard) mostly use a seller's language preference in
		 * communication, when it comes to addresses, they will use English for a US address,
		 * Japanese for an address in Japan, and so on.
		 */
		shipping_address?: Address;

		/** Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. */
		state?: string | null;
		subtotal_money?: V1Money;

		/**
		 * A tender represents a discrete monetary exchange. Square represents this
		 * exchange as a money object with a specific currency and amount, where the
		 * amount is given in the smallest denomination of the given currency.
		 * Square POS can accept more than one form of tender for a single payment (such
		 * as by splitting a bill between a credit card and a gift card). The `tender`
		 * field of the Payment object lists all forms of tender used for the payment.
		 * Split tender payments behave slightly differently from single tender payments:
		 * The receipt_url for a split tender corresponds only to the first tender listed
		 * in the tender field. To get the receipt URLs for the remaining tenders, use
		 * the receipt_url fields of the corresponding Tender objects.
		 * *A note on gift cards**: when a customer purchases a Square gift card from a
		 * merchant, the merchant receives the full amount of the gift card in the
		 * associated payment.
		 * When that gift card is used as a tender, the balance of the gift card is
		 * reduced and the merchant receives no funds. A `Tender` object with a type of
		 * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
		 * associated payment.
		 */
		tender?: V1Tender;
		total_discount_money?: V1Money;
		total_price_money?: V1Money;
		total_shipping_money?: V1Money;
		total_tax_money?: V1Money;

		/** The time when the order was last modified, in ISO 8601 format. */
		updated_at?: string | null;
	}

	/** V1Order */
	export interface V1OrderFormProperties {

		/** For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC). */
		btc_price_satoshi: FormControl<number | null | undefined>,

		/** For Bitcoin transactions, the address that the buyer sent Bitcoin to. */
		btc_receive_address: FormControl<string | null | undefined>,

		/** The email address of the order's buyer. */
		buyer_email: FormControl<string | null | undefined>,

		/** A note provided by the buyer when the order was created, if any. */
		buyer_note: FormControl<string | null | undefined>,

		/** A note provided by the merchant when the order's state was set to CANCELED, if any. */
		canceled_note: FormControl<string | null | undefined>,

		/** A note provided by the merchant when the order's state was set to COMPLETED, if any */
		completed_note: FormControl<string | null | undefined>,

		/** The time when the order was created, in ISO 8601 format. */
		created_at: FormControl<string | null | undefined>,

		/** The time when the order expires if no action is taken, in ISO 8601 format. */
		expires_at: FormControl<string | null | undefined>,

		/** The order's unique identifier. */
		id: FormControl<string | null | undefined>,

		/** The unique identifier of the payment associated with the order. */
		payment_id: FormControl<string | null | undefined>,

		/** The promo code provided by the buyer, if any. */
		promo_code: FormControl<string | null | undefined>,

		/** The name of the order's buyer. */
		recipient_name: FormControl<string | null | undefined>,

		/** The phone number to use for the order's delivery. */
		recipient_phone_number: FormControl<string | null | undefined>,

		/** A note provided by the merchant when the order's state was set to REFUNDED, if any. */
		refunded_note: FormControl<string | null | undefined>,

		/** Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. */
		state: FormControl<string | null | undefined>,

		/** The time when the order was last modified, in ISO 8601 format. */
		updated_at: FormControl<string | null | undefined>,
	}
	export function CreateV1OrderFormGroup() {
		return new FormGroup<V1OrderFormProperties>({
			btc_price_satoshi: new FormControl<number | null | undefined>(undefined),
			btc_receive_address: new FormControl<string | null | undefined>(undefined),
			buyer_email: new FormControl<string | null | undefined>(undefined),
			buyer_note: new FormControl<string | null | undefined>(undefined),
			canceled_note: new FormControl<string | null | undefined>(undefined),
			completed_note: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
			expires_at: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			payment_id: new FormControl<string | null | undefined>(undefined),
			promo_code: new FormControl<string | null | undefined>(undefined),
			recipient_name: new FormControl<string | null | undefined>(undefined),
			recipient_phone_number: new FormControl<string | null | undefined>(undefined),
			refunded_note: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			updated_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1OrderHistoryEntry */
	export interface V1OrderHistoryEntry {

		/** The type of action performed on the order. */
		action?: string | null;

		/** The time when the action was performed, in ISO 8601 format. */
		created_at?: string | null;
	}

	/** V1OrderHistoryEntry */
	export interface V1OrderHistoryEntryFormProperties {

		/** The type of action performed on the order. */
		action: FormControl<string | null | undefined>,

		/** The time when the action was performed, in ISO 8601 format. */
		created_at: FormControl<string | null | undefined>,
	}
	export function CreateV1OrderHistoryEntryFormGroup() {
		return new FormGroup<V1OrderHistoryEntryFormProperties>({
			action: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A tender represents a discrete monetary exchange. Square represents this
	 * exchange as a money object with a specific currency and amount, where the
	 * amount is given in the smallest denomination of the given currency.
	 * Square POS can accept more than one form of tender for a single payment (such
	 * as by splitting a bill between a credit card and a gift card). The `tender`
	 * field of the Payment object lists all forms of tender used for the payment.
	 * Split tender payments behave slightly differently from single tender payments:
	 * The receipt_url for a split tender corresponds only to the first tender listed
	 * in the tender field. To get the receipt URLs for the remaining tenders, use
	 * the receipt_url fields of the corresponding Tender objects.
	 * *A note on gift cards**: when a customer purchases a Square gift card from a
	 * merchant, the merchant receives the full amount of the gift card in the
	 * associated payment.
	 * When that gift card is used as a tender, the balance of the gift card is
	 * reduced and the merchant receives no funds. A `Tender` object with a type of
	 * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
	 * associated payment.
	 */
	export interface V1Tender {

		/** The brand of credit card provided. */
		card_brand?: string | null;
		change_back_money?: V1Money;

		/** The ID of the employee that processed the tender. */
		employee_id?: string | null;

		/** The tender's unique ID. */
		entry_method?: string | null;

		/** The tender's unique ID. */
		id?: string | null;

		/** Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange. */
		is_exchange?: boolean | null;

		/** A human-readable description of the tender. */
		name?: string | null;

		/** The last four digits of the provided credit card's account number. */
		pan_suffix?: string | null;

		/** Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER. */
		payment_note?: string | null;

		/** The URL of the receipt for the tender. */
		receipt_url?: string | null;
		refunded_money?: V1Money;

		/** The time when the tender was settled, in ISO 8601 format. */
		settled_at?: string | null;

		/** The time when the tender was created, in ISO 8601 format. */
		tendered_at?: string | null;
		tendered_money?: V1Money;
		total_money?: V1Money;

		/** The type of tender. */
		type?: string | null;
	}

	/**
	 * A tender represents a discrete monetary exchange. Square represents this
	 * exchange as a money object with a specific currency and amount, where the
	 * amount is given in the smallest denomination of the given currency.
	 * Square POS can accept more than one form of tender for a single payment (such
	 * as by splitting a bill between a credit card and a gift card). The `tender`
	 * field of the Payment object lists all forms of tender used for the payment.
	 * Split tender payments behave slightly differently from single tender payments:
	 * The receipt_url for a split tender corresponds only to the first tender listed
	 * in the tender field. To get the receipt URLs for the remaining tenders, use
	 * the receipt_url fields of the corresponding Tender objects.
	 * *A note on gift cards**: when a customer purchases a Square gift card from a
	 * merchant, the merchant receives the full amount of the gift card in the
	 * associated payment.
	 * When that gift card is used as a tender, the balance of the gift card is
	 * reduced and the merchant receives no funds. A `Tender` object with a type of
	 * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
	 * associated payment.
	 */
	export interface V1TenderFormProperties {

		/** The brand of credit card provided. */
		card_brand: FormControl<string | null | undefined>,

		/** The ID of the employee that processed the tender. */
		employee_id: FormControl<string | null | undefined>,

		/** The tender's unique ID. */
		entry_method: FormControl<string | null | undefined>,

		/** The tender's unique ID. */
		id: FormControl<string | null | undefined>,

		/** Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange. */
		is_exchange: FormControl<boolean | null | undefined>,

		/** A human-readable description of the tender. */
		name: FormControl<string | null | undefined>,

		/** The last four digits of the provided credit card's account number. */
		pan_suffix: FormControl<string | null | undefined>,

		/** Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER. */
		payment_note: FormControl<string | null | undefined>,

		/** The URL of the receipt for the tender. */
		receipt_url: FormControl<string | null | undefined>,

		/** The time when the tender was settled, in ISO 8601 format. */
		settled_at: FormControl<string | null | undefined>,

		/** The time when the tender was created, in ISO 8601 format. */
		tendered_at: FormControl<string | null | undefined>,

		/** The type of tender. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateV1TenderFormGroup() {
		return new FormGroup<V1TenderFormProperties>({
			card_brand: new FormControl<string | null | undefined>(undefined),
			employee_id: new FormControl<string | null | undefined>(undefined),
			entry_method: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_exchange: new FormControl<boolean | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			pan_suffix: new FormControl<string | null | undefined>(undefined),
			payment_note: new FormControl<string | null | undefined>(undefined),
			receipt_url: new FormControl<string | null | undefined>(undefined),
			settled_at: new FormControl<string | null | undefined>(undefined),
			tendered_at: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface V1ListPaymentsRequest {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token?: string | null;

		/** The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. */
		begin_time?: string | null;

		/** The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. */
		end_time?: string | null;

		/** Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. */
		include_partial?: boolean | null;

		/** The maximum number of payments to return in a single response. This value cannot exceed 200. */
		limit?: number | null;

		/** The order in which payments are listed in the response. */
		order?: string | null;
	}
	export interface V1ListPaymentsRequestFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token: FormControl<string | null | undefined>,

		/** The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. */
		begin_time: FormControl<string | null | undefined>,

		/** The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. */
		end_time: FormControl<string | null | undefined>,

		/** Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed. */
		include_partial: FormControl<boolean | null | undefined>,

		/** The maximum number of payments to return in a single response. This value cannot exceed 200. */
		limit: FormControl<number | null | undefined>,

		/** The order in which payments are listed in the response. */
		order: FormControl<string | null | undefined>,
	}
	export function CreateV1ListPaymentsRequestFormGroup() {
		return new FormGroup<V1ListPaymentsRequestFormProperties>({
			batch_token: new FormControl<string | null | undefined>(undefined),
			begin_time: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			include_partial: new FormControl<boolean | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface V1ListPaymentsResponse {
		items?: Array<V1Payment>;
	}
	export interface V1ListPaymentsResponseFormProperties {
	}
	export function CreateV1ListPaymentsResponseFormGroup() {
		return new FormGroup<V1ListPaymentsResponseFormProperties>({
		});

	}


	/**
	 * A payment represents a paid transaction between a Square merchant and a
	 * customer. Payment details are usually available from Connect API endpoints
	 * within a few minutes after the transaction completes.
	 * Each Payment object includes several fields that end in `_money`. These fields
	 * describe the various amounts of money that contribute to the payment total:
	 * <ul>
	 * <li>
	 * Monetary values are <b>positive</b> if they represent an
	 * <em>increase</em> in the amount of money the merchant receives (e.g.,
	 * <code>tax_money</code>, <code>tip_money</code>).
	 * </li>
	 * <li>
	 * Monetary values are <b>negative</b> if they represent an
	 * <em>decrease</em> in the amount of money the merchant receives (e.g.,
	 * <code>discount_money</code>, <code>refunded_money</code>).
	 * </li>
	 * </ul>
	 */
	export interface V1Payment {

		/** All of the additive taxes associated with the payment. */
		additive_tax?: Array<V1PaymentTax>;
		additive_tax_money?: V1Money;

		/** The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise. */
		created_at?: string | null;

		/** The unique identifier of the Square account that took the payment. */
		creator_id?: string | null;
		device?: Device;
		discount_money?: V1Money;
		gross_sales_money?: V1Money;

		/** The payment's unique identifier. */
		id?: string | null;

		/** All of the inclusive taxes associated with the payment. */
		inclusive_tax?: Array<V1PaymentTax>;
		inclusive_tax_money?: V1Money;

		/**
		 * Indicates whether or not the payment is only partially paid for.
		 * If true, this payment will have the tenders collected so far, but the
		 * itemizations will be empty until the payment is completed.
		 */
		is_partial?: boolean | null;

		/** The items purchased in the payment. */
		itemizations?: Array<V1PaymentItemization>;

		/** The unique identifier of the merchant that took the payment. */
		merchant_id?: string | null;
		net_sales_money?: V1Money;
		net_total_money?: V1Money;

		/** The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page. */
		payment_url?: string | null;
		processing_fee_money?: V1Money;

		/**
		 * The URL of the receipt for the payment. Note that for split tender
		 * payments, this URL corresponds to the receipt for the first tender
		 * listed in the payment's tender field. Each Tender object has its own
		 * receipt_url field you can use to get the other receipts associated with
		 * a split tender payment.
		 */
		receipt_url?: string | null;
		refunded_money?: V1Money;

		/** All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange. */
		refunds?: Array<V1Refund>;
		surcharge_money?: V1Money;

		/** A list of all surcharges associated with the payment. */
		surcharges?: Array<V1PaymentSurcharge>;
		swedish_rounding_money?: V1Money;
		tax_money?: V1Money;

		/** All of the tenders associated with the payment. */
		tender?: Array<V1Tender>;
		tip_money?: V1Money;
		total_collected_money?: V1Money;
	}

	/**
	 * A payment represents a paid transaction between a Square merchant and a
	 * customer. Payment details are usually available from Connect API endpoints
	 * within a few minutes after the transaction completes.
	 * Each Payment object includes several fields that end in `_money`. These fields
	 * describe the various amounts of money that contribute to the payment total:
	 * <ul>
	 * <li>
	 * Monetary values are <b>positive</b> if they represent an
	 * <em>increase</em> in the amount of money the merchant receives (e.g.,
	 * <code>tax_money</code>, <code>tip_money</code>).
	 * </li>
	 * <li>
	 * Monetary values are <b>negative</b> if they represent an
	 * <em>decrease</em> in the amount of money the merchant receives (e.g.,
	 * <code>discount_money</code>, <code>refunded_money</code>).
	 * </li>
	 * </ul>
	 */
	export interface V1PaymentFormProperties {

		/** The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise. */
		created_at: FormControl<string | null | undefined>,

		/** The unique identifier of the Square account that took the payment. */
		creator_id: FormControl<string | null | undefined>,

		/** The payment's unique identifier. */
		id: FormControl<string | null | undefined>,

		/**
		 * Indicates whether or not the payment is only partially paid for.
		 * If true, this payment will have the tenders collected so far, but the
		 * itemizations will be empty until the payment is completed.
		 */
		is_partial: FormControl<boolean | null | undefined>,

		/** The unique identifier of the merchant that took the payment. */
		merchant_id: FormControl<string | null | undefined>,

		/** The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page. */
		payment_url: FormControl<string | null | undefined>,

		/**
		 * The URL of the receipt for the payment. Note that for split tender
		 * payments, this URL corresponds to the receipt for the first tender
		 * listed in the payment's tender field. Each Tender object has its own
		 * receipt_url field you can use to get the other receipts associated with
		 * a split tender payment.
		 */
		receipt_url: FormControl<string | null | undefined>,
	}
	export function CreateV1PaymentFormGroup() {
		return new FormGroup<V1PaymentFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			creator_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			is_partial: new FormControl<boolean | null | undefined>(undefined),
			merchant_id: new FormControl<string | null | undefined>(undefined),
			payment_url: new FormControl<string | null | undefined>(undefined),
			receipt_url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1PaymentTax */
	export interface V1PaymentTax {
		applied_money?: V1Money;

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;

		/** The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID. */
		fee_id?: string | null;

		/** Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. */
		inclusion_type?: string | null;

		/** The merchant-defined name of the tax. */
		name?: string | null;

		/** The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. */
		rate?: string | null;
	}

	/** V1PaymentTax */
	export interface V1PaymentTaxFormProperties {

		/** The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID. */
		fee_id: FormControl<string | null | undefined>,

		/** Whether the tax is an ADDITIVE tax or an INCLUSIVE tax. */
		inclusion_type: FormControl<string | null | undefined>,

		/** The merchant-defined name of the tax. */
		name: FormControl<string | null | undefined>,

		/** The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. */
		rate: FormControl<string | null | undefined>,
	}
	export function CreateV1PaymentTaxFormGroup() {
		return new FormGroup<V1PaymentTaxFormProperties>({
			fee_id: new FormControl<string | null | undefined>(undefined),
			inclusion_type: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			rate: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Payment include an` itemizations` field that lists the items purchased,
	 * along with associated fees, modifiers, and discounts. Each itemization has an
	 * `itemization_type` field that indicates which of the following the itemization
	 * represents:
	 * <ul>
	 * <li>An item variation from the merchant's item library</li>
	 * <li>A custom monetary amount</li>
	 * <li>
	 * An action performed on a Square gift card, such as activating or
	 * reloading it.
	 * </li>
	 * </ul>
	 * *Note**: itemization information included in a `Payment` object reflects
	 * details collected **at the time of the payment**. Details such as the name or
	 * price of items might have changed since the payment was processed.
	 */
	export interface V1PaymentItemization {
		discount_money?: V1Money;

		/** All discounts applied to this itemization. */
		discounts?: Array<V1PaymentDiscount>;
		gross_sales_money?: V1Money;

		/** V1PaymentItemDetail */
		item_detail?: V1PaymentItemDetail;

		/** The name of the item variation purchased, if any. */
		item_variation_name?: string | null;

		/** The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT */
		itemization_type?: string | null;

		/** All modifier options applied to this itemization. */
		modifiers?: Array<V1PaymentModifier>;

		/** The item's name. */
		name?: string | null;
		net_sales_money?: V1Money;

		/** Notes entered by the merchant about the item at the time of payment, if any. */
		notes?: string | null;

		/** The quantity of the item purchased. This can be a decimal value. */
		quantity?: number | null;
		single_quantity_money?: V1Money;

		/** All taxes applied to this itemization. */
		taxes?: Array<V1PaymentTax>;
		total_money?: V1Money;
	}

	/**
	 * Payment include an` itemizations` field that lists the items purchased,
	 * along with associated fees, modifiers, and discounts. Each itemization has an
	 * `itemization_type` field that indicates which of the following the itemization
	 * represents:
	 * <ul>
	 * <li>An item variation from the merchant's item library</li>
	 * <li>A custom monetary amount</li>
	 * <li>
	 * An action performed on a Square gift card, such as activating or
	 * reloading it.
	 * </li>
	 * </ul>
	 * *Note**: itemization information included in a `Payment` object reflects
	 * details collected **at the time of the payment**. Details such as the name or
	 * price of items might have changed since the payment was processed.
	 */
	export interface V1PaymentItemizationFormProperties {

		/** The name of the item variation purchased, if any. */
		item_variation_name: FormControl<string | null | undefined>,

		/** The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT */
		itemization_type: FormControl<string | null | undefined>,

		/** The item's name. */
		name: FormControl<string | null | undefined>,

		/** Notes entered by the merchant about the item at the time of payment, if any. */
		notes: FormControl<string | null | undefined>,

		/** The quantity of the item purchased. This can be a decimal value. */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateV1PaymentItemizationFormGroup() {
		return new FormGroup<V1PaymentItemizationFormProperties>({
			item_variation_name: new FormControl<string | null | undefined>(undefined),
			itemization_type: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			notes: new FormControl<string | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** V1PaymentDiscount */
	export interface V1PaymentDiscount {
		applied_money?: V1Money;

		/** The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID. */
		discount_id?: string | null;

		/** The discount's name. */
		name?: string | null;
	}

	/** V1PaymentDiscount */
	export interface V1PaymentDiscountFormProperties {

		/** The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID. */
		discount_id: FormControl<string | null | undefined>,

		/** The discount's name. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateV1PaymentDiscountFormGroup() {
		return new FormGroup<V1PaymentDiscountFormProperties>({
			discount_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1PaymentItemDetail */
	export interface V1PaymentItemDetail {

		/** The name of the item's merchant-defined category, if any. */
		category_name?: string | null;

		/** The unique ID of the item purchased, if any. */
		item_id?: string | null;

		/** The unique ID of the item variation purchased, if any. */
		item_variation_id?: string | null;

		/** The item's merchant-defined SKU, if any. */
		sku?: string | null;
	}

	/** V1PaymentItemDetail */
	export interface V1PaymentItemDetailFormProperties {

		/** The name of the item's merchant-defined category, if any. */
		category_name: FormControl<string | null | undefined>,

		/** The unique ID of the item purchased, if any. */
		item_id: FormControl<string | null | undefined>,

		/** The unique ID of the item variation purchased, if any. */
		item_variation_id: FormControl<string | null | undefined>,

		/** The item's merchant-defined SKU, if any. */
		sku: FormControl<string | null | undefined>,
	}
	export function CreateV1PaymentItemDetailFormGroup() {
		return new FormGroup<V1PaymentItemDetailFormProperties>({
			category_name: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			item_variation_id: new FormControl<string | null | undefined>(undefined),
			sku: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1PaymentModifier */
	export interface V1PaymentModifier {
		applied_money?: V1Money;

		/** The ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID. */
		modifier_option_id?: string | null;

		/** The modifier option's name. */
		name?: string | null;
	}

	/** V1PaymentModifier */
	export interface V1PaymentModifierFormProperties {

		/** The ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID. */
		modifier_option_id: FormControl<string | null | undefined>,

		/** The modifier option's name. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateV1PaymentModifierFormGroup() {
		return new FormGroup<V1PaymentModifierFormProperties>({
			modifier_option_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1Refund */
	export interface V1Refund {

		/** The time when the merchant initiated the refund for Square to process, in ISO 8601 format. */
		created_at?: string | null;

		/** Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded. */
		is_exchange?: boolean | null;
		merchant_id?: string | null;

		/** A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders. */
		payment_id?: string | null;

		/** The time when Square processed the refund on behalf of the merchant, in ISO 8601 format. */
		processed_at?: string | null;

		/** The merchant-specified reason for the refund. */
		reason?: string | null;

		/** All of the additive taxes associated with the refund. */
		refunded_additive_tax?: Array<V1PaymentTax>;
		refunded_additive_tax_money?: V1Money;
		refunded_discount_money?: V1Money;

		/** All of the inclusive taxes associated with the refund. */
		refunded_inclusive_tax?: Array<V1PaymentTax>;
		refunded_inclusive_tax_money?: V1Money;
		refunded_money?: V1Money;
		refunded_processing_fee_money?: V1Money;
		refunded_surcharge_money?: V1Money;

		/** A list of all surcharges associated with the refund. */
		refunded_surcharges?: Array<V1PaymentSurcharge>;
		refunded_tax_money?: V1Money;
		refunded_tip_money?: V1Money;

		/** The type of refund */
		type?: string | null;
	}

	/** V1Refund */
	export interface V1RefundFormProperties {

		/** The time when the merchant initiated the refund for Square to process, in ISO 8601 format. */
		created_at: FormControl<string | null | undefined>,

		/** Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded. */
		is_exchange: FormControl<boolean | null | undefined>,
		merchant_id: FormControl<string | null | undefined>,

		/** A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders. */
		payment_id: FormControl<string | null | undefined>,

		/** The time when Square processed the refund on behalf of the merchant, in ISO 8601 format. */
		processed_at: FormControl<string | null | undefined>,

		/** The merchant-specified reason for the refund. */
		reason: FormControl<string | null | undefined>,

		/** The type of refund */
		type: FormControl<string | null | undefined>,
	}
	export function CreateV1RefundFormGroup() {
		return new FormGroup<V1RefundFormProperties>({
			created_at: new FormControl<string | null | undefined>(undefined),
			is_exchange: new FormControl<boolean | null | undefined>(undefined),
			merchant_id: new FormControl<string | null | undefined>(undefined),
			payment_id: new FormControl<string | null | undefined>(undefined),
			processed_at: new FormControl<string | null | undefined>(undefined),
			reason: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1PaymentSurcharge */
	export interface V1PaymentSurcharge {
		amount_money?: V1Money;
		applied_money?: V1Money;

		/** The name of the surcharge. */
		name?: string | null;

		/** The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, "0.7" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set. */
		rate?: string | null;

		/** A Square-issued unique identifier associated with the surcharge. */
		surcharge_id?: string | null;

		/** Indicates whether the surcharge is taxable. */
		taxable?: boolean | null;

		/** The list of taxes that should be applied to the surcharge. */
		taxes?: Array<V1PaymentTax>;

		/** Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. */
		type?: string | null;
	}

	/** V1PaymentSurcharge */
	export interface V1PaymentSurchargeFormProperties {

		/** The name of the surcharge. */
		name: FormControl<string | null | undefined>,

		/** The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, "0.7" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set. */
		rate: FormControl<string | null | undefined>,

		/** A Square-issued unique identifier associated with the surcharge. */
		surcharge_id: FormControl<string | null | undefined>,

		/** Indicates whether the surcharge is taxable. */
		taxable: FormControl<boolean | null | undefined>,

		/** Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateV1PaymentSurchargeFormGroup() {
		return new FormGroup<V1PaymentSurchargeFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			rate: new FormControl<string | null | undefined>(undefined),
			surcharge_id: new FormControl<string | null | undefined>(undefined),
			taxable: new FormControl<boolean | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface V1ListRefundsRequest {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token?: string | null;

		/** The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. */
		begin_time?: string | null;

		/** The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. */
		end_time?: string | null;

		/** The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. */
		limit?: number | null;

		/** The order in which payments are listed in the response. */
		order?: string | null;
	}
	export interface V1ListRefundsRequestFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token: FormControl<string | null | undefined>,

		/** The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. */
		begin_time: FormControl<string | null | undefined>,

		/** The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. */
		end_time: FormControl<string | null | undefined>,

		/** The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods. */
		limit: FormControl<number | null | undefined>,

		/** The order in which payments are listed in the response. */
		order: FormControl<string | null | undefined>,
	}
	export function CreateV1ListRefundsRequestFormGroup() {
		return new FormGroup<V1ListRefundsRequestFormProperties>({
			batch_token: new FormControl<string | null | undefined>(undefined),
			begin_time: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface V1ListRefundsResponse {
		items?: Array<V1Refund>;
	}
	export interface V1ListRefundsResponseFormProperties {
	}
	export function CreateV1ListRefundsResponseFormGroup() {
		return new FormGroup<V1ListRefundsResponseFormProperties>({
		});

	}

	export interface V1ListSettlementsRequest {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token?: string | null;

		/** The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. */
		begin_time?: string | null;

		/** The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. */
		end_time?: string | null;

		/** The maximum number of settlements to return in a single response. This value cannot exceed 200. */
		limit?: number | null;

		/** The order in which settlements are listed in the response. */
		order?: string | null;

		/** Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). */
		status?: string | null;
	}
	export interface V1ListSettlementsRequestFormProperties {

		/**
		 * A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 */
		batch_token: FormControl<string | null | undefined>,

		/** The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. */
		begin_time: FormControl<string | null | undefined>,

		/** The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. */
		end_time: FormControl<string | null | undefined>,

		/** The maximum number of settlements to return in a single response. This value cannot exceed 200. */
		limit: FormControl<number | null | undefined>,

		/** The order in which settlements are listed in the response. */
		order: FormControl<string | null | undefined>,

		/** Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). */
		status: FormControl<string | null | undefined>,
	}
	export function CreateV1ListSettlementsRequestFormGroup() {
		return new FormGroup<V1ListSettlementsRequestFormProperties>({
			batch_token: new FormControl<string | null | undefined>(undefined),
			begin_time: new FormControl<string | null | undefined>(undefined),
			end_time: new FormControl<string | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined),
			order: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum V1ListSettlementsRequestStatus { SENT = 'SENT', FAILED = 'FAILED' }

	export interface V1ListSettlementsResponse {
		items?: Array<V1Settlement>;
	}
	export interface V1ListSettlementsResponseFormProperties {
	}
	export function CreateV1ListSettlementsResponseFormGroup() {
		return new FormGroup<V1ListSettlementsResponseFormProperties>({
		});

	}


	/** V1Settlement */
	export interface V1Settlement {

		/** The Square-issued unique identifier for the bank account associated with the settlement. */
		bank_account_id?: string | null;

		/** The entries included in this settlement. */
		entries?: Array<V1SettlementEntry>;

		/** The settlement's unique identifier. */
		id?: string | null;

		/** The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format. */
		initiated_at?: string | null;

		/** The settlement's current status. */
		status?: string | null;
		total_money?: V1Money;
	}

	/** V1Settlement */
	export interface V1SettlementFormProperties {

		/** The Square-issued unique identifier for the bank account associated with the settlement. */
		bank_account_id: FormControl<string | null | undefined>,

		/** The settlement's unique identifier. */
		id: FormControl<string | null | undefined>,

		/** The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format. */
		initiated_at: FormControl<string | null | undefined>,

		/** The settlement's current status. */
		status: FormControl<string | null | undefined>,
	}
	export function CreateV1SettlementFormGroup() {
		return new FormGroup<V1SettlementFormProperties>({
			bank_account_id: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			initiated_at: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** V1SettlementEntry */
	export interface V1SettlementEntry {
		amount_money?: V1Money;
		fee_money?: V1Money;

		/** The settlement's unique identifier. */
		payment_id?: string | null;

		/** The settlement's current status. */
		type?: string | null;
	}

	/** V1SettlementEntry */
	export interface V1SettlementEntryFormProperties {

		/** The settlement's unique identifier. */
		payment_id: FormControl<string | null | undefined>,

		/** The settlement's current status. */
		type: FormControl<string | null | undefined>,
	}
	export function CreateV1SettlementEntryFormGroup() {
		return new FormGroup<V1SettlementEntryFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum V1OrderHistoryEntryAction { ORDER_PLACED = 'ORDER_PLACED', DECLINED = 'DECLINED', PAYMENT_RECEIVED = 'PAYMENT_RECEIVED', CANCELED = 'CANCELED', COMPLETED = 'COMPLETED', REFUNDED = 'REFUNDED', EXPIRED = 'EXPIRED' }

	export enum V1OrderState { PENDING = 'PENDING', OPEN = 'OPEN', COMPLETED = 'COMPLETED', CANCELED = 'CANCELED', REFUNDED = 'REFUNDED', REJECTED = 'REJECTED' }

	export enum V1PaymentItemizationItemizationType { ITEM = 'ITEM', CUSTOM_AMOUNT = 'CUSTOM_AMOUNT', GIFT_CARD_ACTIVATION = 'GIFT_CARD_ACTIVATION', GIFT_CARD_RELOAD = 'GIFT_CARD_RELOAD', GIFT_CARD_UNKNOWN = 'GIFT_CARD_UNKNOWN', OTHER = 'OTHER' }

	export enum V1PaymentSurchargeType { UNKNOWN = 'UNKNOWN', AUTO_GRATUITY = 'AUTO_GRATUITY', CUSTOM = 'CUSTOM' }

	export enum V1PaymentTaxInclusionType { ADDITIVE = 'ADDITIVE', INCLUSIVE = 'INCLUSIVE' }


	/** Represents a phone number. */
	export interface V1PhoneNumber {

		/**
		 * The phone number's international calling code. For US phone numbers, this value is +1.
		 * Required
		 */
		calling_code: string;

		/**
		 * The phone number.
		 * Required
		 */
		number: string;
	}

	/** Represents a phone number. */
	export interface V1PhoneNumberFormProperties {

		/**
		 * The phone number's international calling code. For US phone numbers, this value is +1.
		 * Required
		 */
		calling_code: FormControl<string | null | undefined>,

		/**
		 * The phone number.
		 * Required
		 */
		number: FormControl<string | null | undefined>,
	}
	export function CreateV1PhoneNumberFormGroup() {
		return new FormGroup<V1PhoneNumberFormProperties>({
			calling_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum V1RefundType { FULL = 'FULL', PARTIAL = 'PARTIAL' }

	export interface V1RetrieveEmployeeRequest {
	}
	export interface V1RetrieveEmployeeRequestFormProperties {
	}
	export function CreateV1RetrieveEmployeeRequestFormGroup() {
		return new FormGroup<V1RetrieveEmployeeRequestFormProperties>({
		});

	}

	export interface V1RetrieveEmployeeRoleRequest {
	}
	export interface V1RetrieveEmployeeRoleRequestFormProperties {
	}
	export function CreateV1RetrieveEmployeeRoleRequestFormGroup() {
		return new FormGroup<V1RetrieveEmployeeRoleRequestFormProperties>({
		});

	}

	export interface V1RetrieveOrderRequest {
	}
	export interface V1RetrieveOrderRequestFormProperties {
	}
	export function CreateV1RetrieveOrderRequestFormGroup() {
		return new FormGroup<V1RetrieveOrderRequestFormProperties>({
		});

	}

	export interface V1RetrievePaymentRequest {
	}
	export interface V1RetrievePaymentRequestFormProperties {
	}
	export function CreateV1RetrievePaymentRequestFormGroup() {
		return new FormGroup<V1RetrievePaymentRequestFormProperties>({
		});

	}

	export interface V1RetrieveSettlementRequest {
	}
	export interface V1RetrieveSettlementRequestFormProperties {
	}
	export function CreateV1RetrieveSettlementRequestFormGroup() {
		return new FormGroup<V1RetrieveSettlementRequestFormProperties>({
		});

	}

	export enum V1SettlementEntryType { ADJUSTMENT = 'ADJUSTMENT', BALANCE_CHARGE = 'BALANCE_CHARGE', CHARGE = 'CHARGE', FREE_PROCESSING = 'FREE_PROCESSING', HOLD_ADJUSTMENT = 'HOLD_ADJUSTMENT', PAID_SERVICE_FEE = 'PAID_SERVICE_FEE', PAID_SERVICE_FEE_REFUND = 'PAID_SERVICE_FEE_REFUND', REDEMPTION_CODE = 'REDEMPTION_CODE', REFUND = 'REFUND', RETURNED_PAYOUT = 'RETURNED_PAYOUT', SQUARE_CAPITAL_ADVANCE = 'SQUARE_CAPITAL_ADVANCE', SQUARE_CAPITAL_PAYMENT = 'SQUARE_CAPITAL_PAYMENT', SQUARE_CAPITAL_REVERSED_PAYMENT = 'SQUARE_CAPITAL_REVERSED_PAYMENT', SUBSCRIPTION_FEE = 'SUBSCRIPTION_FEE', SUBSCRIPTION_FEE_REFUND = 'SUBSCRIPTION_FEE_REFUND', OTHER = 'OTHER', INCENTED_PAYMENT = 'INCENTED_PAYMENT', RETURNED_ACH_ENTRY = 'RETURNED_ACH_ENTRY', RETURNED_SQUARE_275 = 'RETURNED_SQUARE_275', SQUARE_275 = 'SQUARE_275', SQUARE_CARD = 'SQUARE_CARD' }

	export enum V1SettlementStatus { FAILED = 'FAILED', SENT = 'SENT' }


	/** The brand of a credit card. */
	export enum V1TenderCardBrand { OTHER_BRAND = 'OTHER_BRAND', VISA = 'VISA', MASTER_CARD = 'MASTER_CARD', AMERICAN_EXPRESS = 'AMERICAN_EXPRESS', DISCOVER = 'DISCOVER', DISCOVER_DINERS = 'DISCOVER_DINERS', JCB = 'JCB', CHINA_UNIONPAY = 'CHINA_UNIONPAY', SQUARE_GIFT_CARD = 'SQUARE_GIFT_CARD' }

	export enum V1TenderEntryMethod { MANUAL = 'MANUAL', SCANNED = 'SCANNED', SQUARE_CASH = 'SQUARE_CASH', SQUARE_WALLET = 'SQUARE_WALLET', SWIPED = 'SWIPED', WEB_FORM = 'WEB_FORM', OTHER = 'OTHER' }

	export enum V1TenderType { CREDIT_CARD = 'CREDIT_CARD', CASH = 'CASH', THIRD_PARTY_CARD = 'THIRD_PARTY_CARD', NO_SALE = 'NO_SALE', SQUARE_WALLET = 'SQUARE_WALLET', SQUARE_GIFT_CARD = 'SQUARE_GIFT_CARD', UNKNOWN = 'UNKNOWN', OTHER = 'OTHER' }

	export interface V1UpdateEmployeeRequest {

		/**
		 * Represents one of a business's employees.
		 * Required
		 */
		body: V1Employee;
	}
	export interface V1UpdateEmployeeRequestFormProperties {
	}
	export function CreateV1UpdateEmployeeRequestFormGroup() {
		return new FormGroup<V1UpdateEmployeeRequestFormProperties>({
		});

	}

	export interface V1UpdateEmployeeRoleRequest {

		/**
		 * V1EmployeeRole
		 * Required
		 */
		body: V1EmployeeRole;
	}
	export interface V1UpdateEmployeeRoleRequestFormProperties {
	}
	export function CreateV1UpdateEmployeeRoleRequestFormGroup() {
		return new FormGroup<V1UpdateEmployeeRoleRequestFormProperties>({
		});

	}


	/** V1UpdateOrderRequest */
	export interface V1UpdateOrderRequest {

		/**
		 * The action to perform on the order (COMPLETE, CANCEL, or REFUND).
		 * Required
		 */
		action: string;

		/** A merchant-specified note about the canceling of the order. Only valid if action is CANCEL. */
		canceled_note?: string | null;

		/** A merchant-specified note about the completion of the order. Only valid if action is COMPLETE. */
		completed_note?: string | null;

		/** A merchant-specified note about the refunding of the order. Only valid if action is REFUND. */
		refunded_note?: string | null;

		/** The tracking number of the shipment associated with the order. Only valid if action is COMPLETE. */
		shipped_tracking_number?: string | null;
	}

	/** V1UpdateOrderRequest */
	export interface V1UpdateOrderRequestFormProperties {

		/**
		 * The action to perform on the order (COMPLETE, CANCEL, or REFUND).
		 * Required
		 */
		action: FormControl<string | null | undefined>,

		/** A merchant-specified note about the canceling of the order. Only valid if action is CANCEL. */
		canceled_note: FormControl<string | null | undefined>,

		/** A merchant-specified note about the completion of the order. Only valid if action is COMPLETE. */
		completed_note: FormControl<string | null | undefined>,

		/** A merchant-specified note about the refunding of the order. Only valid if action is REFUND. */
		refunded_note: FormControl<string | null | undefined>,

		/** The tracking number of the shipment associated with the order. Only valid if action is COMPLETE. */
		shipped_tracking_number: FormControl<string | null | undefined>,
	}
	export function CreateV1UpdateOrderRequestFormGroup() {
		return new FormGroup<V1UpdateOrderRequestFormProperties>({
			action: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			canceled_note: new FormControl<string | null | undefined>(undefined),
			completed_note: new FormControl<string | null | undefined>(undefined),
			refunded_note: new FormControl<string | null | undefined>(undefined),
			shipped_tracking_number: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum V1UpdateOrderRequestAction { COMPLETE = 'COMPLETE', CANCEL = 'CANCEL', REFUND = 'REFUND' }

	export interface VoidTransactionRequest {
	}
	export interface VoidTransactionRequestFormProperties {
	}
	export function CreateVoidTransactionRequestFormGroup() {
		return new FormGroup<VoidTransactionRequestFormProperties>({
		});

	}


	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint.
	 */
	export interface VoidTransactionResponse {

		/** Any errors that occurred during the request. */
		errors?: Array<Error>;
	}

	/**
	 * Defines the fields that are included in the response body of
	 * a request to the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint.
	 */
	export interface VoidTransactionResponseFormProperties {
	}
	export function CreateVoidTransactionResponseFormGroup() {
		return new FormGroup<VoidTransactionResponseFormProperties>({
		});

	}


	/** The days of the week. */
	export enum Weekday { MON = 'MON', TUE = 'TUE', WED = 'WED', THU = 'THU', FRI = 'FRI', SAT = 'SAT', SUN = 'SUN' }

	export interface Invoice_delivery_methodInvoiceDeliveryMethod {
	}
	export interface Invoice_delivery_methodInvoiceDeliveryMethodFormProperties {
	}
	export function CreateInvoice_delivery_methodInvoiceDeliveryMethodFormGroup() {
		return new FormGroup<Invoice_delivery_methodInvoiceDeliveryMethodFormProperties>({
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * CreateMobileAuthorizationCode
		 * Generates code to authorize a mobile application to connect to a Square card reader
		 * Authorization codes are one-time-use and expire __60 minutes__ after being issued.
		 * __Important:__ The `Authorization` header you provide to this endpoint must have the following format:
		 * ```
		 * Authorization: Bearer ACCESS_TOKEN
		 * ```
		 * Replace `ACCESS_TOKEN` with a
		 * [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-tokens).
		 * Post mobile/authorization-code
		 * @param {CreateMobileAuthorizationCodeRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateMobileAuthorizationCodeResponse} Success
		 */
		CreateMobileAuthorizationCode(requestBody: CreateMobileAuthorizationCodeRequest): Observable<CreateMobileAuthorizationCodeResponse> {
			return this.http.post<CreateMobileAuthorizationCodeResponse>(this.baseUri + 'mobile/authorization-code', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RenewToken
		 * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see
		 * [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
		 * Renews an OAuth access token before it expires.
		 * OAuth access tokens besides your application's personal access token expire after __30 days__.
		 * You can also renew expired tokens within __15 days__ of their expiration.
		 * You cannot renew an access token that has been expired for more than 15 days.
		 * Instead, the associated user must re-complete the OAuth flow from the beginning.
		 * __Important:__ The `Authorization` header for this endpoint must have the
		 * following format:
		 * ```
		 * Authorization: Client APPLICATION_SECRET
		 * ```
		 * Replace `APPLICATION_SECRET` with the application secret on the Credentials
		 * page in the [developer dashboard](https://developer.squareup.com/apps).
		 * Post oauth2/clients/{client_id}/access-token/renew
		 * @param {string} client_id Your application ID, available from the [developer dashboard](https://developer.squareup.com/apps).
		 * @param {RenewTokenRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {RenewTokenResponse} Success
		 */
		RenewToken(client_id: string, requestBody: RenewTokenRequest): Observable<RenewTokenResponse> {
			return this.http.post<RenewTokenResponse>(this.baseUri + 'oauth2/clients/' + (client_id == null ? '' : encodeURIComponent(client_id)) + '/access-token/renew', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RevokeToken
		 * Revokes an access token generated with the OAuth flow.
		 * If an account has more than one OAuth access token for your application, this
		 * endpoint revokes all of them, regardless of which token you specify. When an
		 * OAuth access token is revoked, all of the active subscriptions associated
		 * with that OAuth token are canceled immediately.
		 * __Important:__ The `Authorization` header for this endpoint must have the
		 * following format:
		 * ```
		 * Authorization: Client APPLICATION_SECRET
		 * ```
		 * Replace `APPLICATION_SECRET` with the application secret on the OAuth
		 * page in the [developer dashboard](https://developer.squareup.com/apps).
		 * Post oauth2/revoke
		 * @param {RevokeTokenRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {RevokeTokenResponse} Success
		 */
		RevokeToken(requestBody: RevokeTokenRequest): Observable<RevokeTokenResponse> {
			return this.http.post<RevokeTokenResponse>(this.baseUri + 'oauth2/revoke', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ObtainToken
		 * Returns an OAuth access token.
		 * The endpoint supports distinct methods of obtaining OAuth access tokens.
		 * Applications specify a method by adding the `grant_type` parameter
		 * in the request and also provide relevant information.
		 * __Note:__ Regardless of the method application specified,
		 * the endpoint always returns two items; an OAuth access token and
		 * a refresh token in the response.
		 * __OAuth tokens should only live on secure servers. Application clients
		 * should never interact directly with OAuth tokens__.
		 * Post oauth2/token
		 * @param {ObtainTokenRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {ObtainTokenResponse} Success
		 */
		ObtainToken(requestBody: ObtainTokenRequest): Observable<ObtainTokenResponse> {
			return this.http.post<ObtainTokenResponse>(this.baseUri + 'oauth2/token', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListEmployees
		 * Provides summary information for all of a business's employees.
		 * Get v1/me/employees
		 * @param {string} order The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
		 * @param {string} begin_updated_at If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
		 * @param {string} end_updated_at If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
		 * @param {string} begin_created_at If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
		 * @param {string} end_created_at If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
		 * @param {string} status If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
		 * @param {string} external_id If provided, the endpoint returns only employee entities with the specified external_id.
		 * @param {number} limit The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
		 * @param {string} batch_token A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 * @return {Array<V1Employee>} Success
		 */
		ListEmployees(order: string | null | undefined, begin_updated_at: string | null | undefined, end_updated_at: string | null | undefined, begin_created_at: string | null | undefined, end_created_at: string | null | undefined, status: string | null | undefined, external_id: string | null | undefined, limit: number | null | undefined, batch_token: string | null | undefined): Observable<Array<V1Employee>> {
			return this.http.get<Array<V1Employee>>(this.baseUri + 'v1/me/employees?order=' + (order == null ? '' : encodeURIComponent(order)) + '&begin_updated_at=' + (begin_updated_at == null ? '' : encodeURIComponent(begin_updated_at)) + '&end_updated_at=' + (end_updated_at == null ? '' : encodeURIComponent(end_updated_at)) + '&begin_created_at=' + (begin_created_at == null ? '' : encodeURIComponent(begin_created_at)) + '&end_created_at=' + (end_created_at == null ? '' : encodeURIComponent(end_created_at)) + '&status=' + (status == null ? '' : encodeURIComponent(status)) + '&external_id=' + (external_id == null ? '' : encodeURIComponent(external_id)) + '&limit=' + limit + '&batch_token=' + (batch_token == null ? '' : encodeURIComponent(batch_token)), {});
		}

		/**
		 * CreateEmployee
		 * Use the CreateEmployee endpoint to add an employee to a Square
		 * account. Employees created with the Connect API have an initial status
		 * of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale
		 * until they are activated from the Square Dashboard. Employee status
		 * cannot be changed with the Connect API.
		 * Employee entities cannot be deleted. To disable employee profiles,
		 * set the employee's status to <code>INACTIVE</code>
		 * Post v1/me/employees
		 * @param {V1Employee} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {V1Employee} Success
		 */
		CreateEmployee(requestBody: V1Employee): Observable<V1Employee> {
			return this.http.post<V1Employee>(this.baseUri + 'v1/me/employees', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveEmployee
		 * Provides the details for a single employee.
		 * Get v1/me/employees/{employee_id}
		 * @param {string} employee_id The employee's ID.
		 * @return {V1Employee} Success
		 */
		RetrieveEmployee(employee_id: string): Observable<V1Employee> {
			return this.http.get<V1Employee>(this.baseUri + 'v1/me/employees/' + (employee_id == null ? '' : encodeURIComponent(employee_id)), {});
		}

		/**
		 * UpdateEmployee
		 * Put v1/me/employees/{employee_id}
		 * @param {string} employee_id The ID of the role to modify.
		 * @param {V1Employee} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {V1Employee} Success
		 */
		UpdateEmployee(employee_id: string, requestBody: V1Employee): Observable<V1Employee> {
			return this.http.put<V1Employee>(this.baseUri + 'v1/me/employees/' + (employee_id == null ? '' : encodeURIComponent(employee_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListEmployeeRoles
		 * Provides summary information for all of a business's employee roles.
		 * Get v1/me/roles
		 * @param {string} order The order in which employees are listed in the response, based on their created_at field.Default value: ASC
		 * @param {number} limit The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
		 * @param {string} batch_token A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 * @return {Array<V1EmployeeRole>} Success
		 */
		ListEmployeeRoles(order: string | null | undefined, limit: number | null | undefined, batch_token: string | null | undefined): Observable<Array<V1EmployeeRole>> {
			return this.http.get<Array<V1EmployeeRole>>(this.baseUri + 'v1/me/roles?order=' + (order == null ? '' : encodeURIComponent(order)) + '&limit=' + limit + '&batch_token=' + (batch_token == null ? '' : encodeURIComponent(batch_token)), {});
		}

		/**
		 * CreateEmployeeRole
		 * Creates an employee role you can then assign to employees.
		 * Square accounts can include any number of roles that can be assigned to
		 * employees. These roles define the actions and permissions granted to an
		 * employee with that role. For example, an employee with a "Shift Manager"
		 * role might be able to issue refunds in Square Point of Sale, whereas an
		 * employee with a "Clerk" role might not.
		 * Roles are assigned with the [V1UpdateEmployee](https://developer.squareup.com/reference/square_2021-08-18/v1-employees-api/update-employee-role)
		 * endpoint. An employee can have only one role at a time.
		 * If an employee has no role, they have none of the permissions associated
		 * with roles. All employees can accept payments with Square Point of Sale.
		 * Post v1/me/roles
		 * @param {V1EmployeeRole} requestBody An EmployeeRole object with a name and permissions, and an optional owner flag.
		 * @return {V1EmployeeRole} Success
		 */
		CreateEmployeeRole(requestBody: V1EmployeeRole): Observable<V1EmployeeRole> {
			return this.http.post<V1EmployeeRole>(this.baseUri + 'v1/me/roles', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveEmployeeRole
		 * Provides the details for a single employee role.
		 * Get v1/me/roles/{role_id}
		 * @param {string} role_id The role's ID.
		 * @return {V1EmployeeRole} Success
		 */
		RetrieveEmployeeRole(role_id: string): Observable<V1EmployeeRole> {
			return this.http.get<V1EmployeeRole>(this.baseUri + 'v1/me/roles/' + (role_id == null ? '' : encodeURIComponent(role_id)), {});
		}

		/**
		 * UpdateEmployeeRole
		 * Modifies the details of an employee role.
		 * Put v1/me/roles/{role_id}
		 * @param {string} role_id The ID of the role to modify.
		 * @param {V1EmployeeRole} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {V1EmployeeRole} Success
		 */
		UpdateEmployeeRole(role_id: string, requestBody: V1EmployeeRole): Observable<V1EmployeeRole> {
			return this.http.put<V1EmployeeRole>(this.baseUri + 'v1/me/roles/' + (role_id == null ? '' : encodeURIComponent(role_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListOrders
		 * Provides summary information for a merchant's online store orders.
		 * Get v1/{location_id}/orders
		 * @param {string} location_id The ID of the location to list online store orders for.
		 * @param {string} order The order in which payments are listed in the response.
		 * @param {number} limit The maximum number of payments to return in a single response. This value cannot exceed 200.
		 * @param {string} batch_token A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 * @return {Array<V1Order>} Success
		 */
		ListOrders(location_id: string, order: string | null | undefined, limit: number | null | undefined, batch_token: string | null | undefined): Observable<Array<V1Order>> {
			return this.http.get<Array<V1Order>>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/orders&order=' + (order == null ? '' : encodeURIComponent(order)) + '&limit=' + limit + '&batch_token=' + (batch_token == null ? '' : encodeURIComponent(batch_token)), {});
		}

		/**
		 * RetrieveOrder
		 * Provides comprehensive information for a single online store order, including the order's history.
		 * Get v1/{location_id}/orders/{order_id}
		 * @param {string} location_id The ID of the order's associated location.
		 * @param {string} order_id The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
		 * @return {V1Order} Success
		 */
		RetrieveOrder(location_id: string, order_id: string): Observable<V1Order> {
			return this.http.get<V1Order>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)), {});
		}

		/**
		 * UpdateOrder
		 * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
		 * Put v1/{location_id}/orders/{order_id}
		 * @param {string} location_id The ID of the order's associated location.
		 * @param {string} order_id The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
		 * @param {V1UpdateOrderRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {V1Order} Success
		 */
		UpdateOrder(location_id: string, order_id: string, requestBody: V1UpdateOrderRequest): Observable<V1Order> {
			return this.http.put<V1Order>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListPayments
		 * Provides summary information for all payments taken for a given
		 * Square account during a date range. Date ranges cannot exceed 1 year in
		 * length. See Date ranges for details of inclusive and exclusive dates.
		 * *Note**: Details for payments processed with Square Point of Sale while
		 * in offline mode may not be transmitted to Square for up to 72 hours.
		 * Offline payments have a `created_at` value that reflects the time the
		 * payment was originally processed, not the time it was subsequently
		 * transmitted to Square. Consequently, the ListPayments endpoint might
		 * list an offline payment chronologically between online payments that
		 * were seen in a previous request.
		 * Get v1/{location_id}/payments
		 * @param {string} location_id The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.
		 * @param {string} order The order in which payments are listed in the response.
		 * @param {string} begin_time The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
		 * @param {string} end_time The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
		 * @param {number} limit The maximum number of payments to return in a single response. This value cannot exceed 200.
		 * @param {string} batch_token A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 * @param {boolean} include_partial Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
		 * @return {Array<V1Payment>} Success
		 */
		ListPayments(location_id: string, order: string | null | undefined, begin_time: string | null | undefined, end_time: string | null | undefined, limit: number | null | undefined, batch_token: string | null | undefined, include_partial: boolean | null | undefined): Observable<Array<V1Payment>> {
			return this.http.get<Array<V1Payment>>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/payments&order=' + (order == null ? '' : encodeURIComponent(order)) + '&begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&limit=' + limit + '&batch_token=' + (batch_token == null ? '' : encodeURIComponent(batch_token)) + '&include_partial=' + include_partial, {});
		}

		/**
		 * RetrievePayment
		 * Provides comprehensive information for a single payment.
		 * Get v1/{location_id}/payments/{payment_id}
		 * @param {string} location_id The ID of the payment's associated location.
		 * @param {string} payment_id The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
		 * @return {V1Payment} Success
		 */
		RetrievePayment(location_id: string, payment_id: string): Observable<V1Payment> {
			return this.http.get<V1Payment>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/payments/' + (payment_id == null ? '' : encodeURIComponent(payment_id)), {});
		}

		/**
		 * ListRefunds
		 * Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
		 * Get v1/{location_id}/refunds
		 * @param {string} location_id The ID of the location to list refunds for.
		 * @param {string} order The order in which payments are listed in the response.
		 * @param {string} begin_time The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
		 * @param {string} end_time The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
		 * @param {number} limit The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
		 * @param {string} batch_token A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 * @return {Array<V1Refund>} Success
		 */
		ListRefunds(location_id: string, order: string | null | undefined, begin_time: string | null | undefined, end_time: string | null | undefined, limit: number | null | undefined, batch_token: string | null | undefined): Observable<Array<V1Refund>> {
			return this.http.get<Array<V1Refund>>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/refunds&order=' + (order == null ? '' : encodeURIComponent(order)) + '&begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&limit=' + limit + '&batch_token=' + (batch_token == null ? '' : encodeURIComponent(batch_token)), {});
		}

		/**
		 * CreateRefund
		 * Issues a refund for a previously processed payment. You must issue
		 * a refund within 60 days of the associated payment.
		 * You cannot issue a partial refund for a split tender payment. You must
		 * instead issue a full or partial refund for a particular tender, by
		 * providing the applicable tender id to the V1CreateRefund endpoint.
		 * Issuing a full refund for a split tender payment refunds all tenders
		 * associated with the payment.
		 * Issuing a refund for a card payment is not reversible. For development
		 * purposes, you can create fake cash payments in Square Point of Sale and
		 * refund them.
		 * Post v1/{location_id}/refunds
		 * @param {string} location_id The ID of the original payment's associated location.
		 * @param {V1CreateRefundRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {V1Refund} Success
		 */
		CreateRefund(location_id: string, requestBody: V1CreateRefundRequest): Observable<V1Refund> {
			return this.http.post<V1Refund>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/refunds', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListSettlements
		 * Provides summary information for all deposits and withdrawals
		 * initiated by Square to a linked bank account during a date range. Date
		 * ranges cannot exceed one year in length.
		 * *Note**: the ListSettlements endpoint does not provide entry
		 * information.
		 * Get v1/{location_id}/settlements
		 * @param {string} location_id The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business's locations.
		 * @param {string} order The order in which settlements are listed in the response.
		 * @param {string} begin_time The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
		 * @param {string} end_time The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
		 * @param {number} limit The maximum number of settlements to return in a single response. This value cannot exceed 200.
		 * @param {string} status Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
		 * @param {string} batch_token A pagination cursor to retrieve the next set of results for your
		 * original query to the endpoint.
		 * @return {Array<V1Settlement>} Success
		 */
		ListSettlements(location_id: string, order: string | null | undefined, begin_time: string | null | undefined, end_time: string | null | undefined, limit: number | null | undefined, status: string | null | undefined, batch_token: string | null | undefined): Observable<Array<V1Settlement>> {
			return this.http.get<Array<V1Settlement>>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/settlements&order=' + (order == null ? '' : encodeURIComponent(order)) + '&begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&limit=' + limit + '&status=' + (status == null ? '' : encodeURIComponent(status)) + '&batch_token=' + (batch_token == null ? '' : encodeURIComponent(batch_token)), {});
		}

		/**
		 * RetrieveSettlement
		 * Provides comprehensive information for a single settlement.
		 * The returned `Settlement` objects include an `entries` field that lists
		 * the transactions that contribute to the settlement total. Most
		 * settlement entries correspond to a payment payout, but settlement
		 * entries are also generated for less common events, like refunds, manual
		 * adjustments, or chargeback holds.
		 * Square initiates its regular deposits as indicated in the
		 * [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)
		 * help article. Details for a regular deposit are usually not available
		 * from Connect API endpoints before 10 p.m. PST the same day.
		 * Square does not know when an initiated settlement **completes**, only
		 * whether it has failed. A completed settlement is typically reflected in
		 * a bank account within 3 business days, but in exceptional cases it may
		 * take longer.
		 * Get v1/{location_id}/settlements/{settlement_id}
		 * @param {string} location_id The ID of the settlements's associated location.
		 * @param {string} settlement_id The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
		 * @return {V1Settlement} Success
		 */
		RetrieveSettlement(location_id: string, settlement_id: string): Observable<V1Settlement> {
			return this.http.get<V1Settlement>(this.baseUri + 'v1/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/settlements/' + (settlement_id == null ? '' : encodeURIComponent(settlement_id)), {});
		}

		/**
		 * RegisterDomain
		 * Activates a domain for use with Apple Pay on the Web and Square. A validation
		 * is performed on this domain by Apple to ensure that it is properly set up as
		 * an Apple Pay enabled domain.
		 * This endpoint provides an easy way for platform developers to bulk activate
		 * Apple Pay on the Web with Square for merchants using their platform.
		 * To learn more about Web Apple Pay, see
		 * [Add the Apple Pay on the Web Button](https://developer.squareup.com/docs/payment-form/add-digital-wallets/apple-pay).
		 * Post v2/apple-pay/domains
		 * @param {RegisterDomainRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {RegisterDomainResponse} Success
		 */
		RegisterDomain(requestBody: RegisterDomainRequest): Observable<RegisterDomainResponse> {
			return this.http.post<RegisterDomainResponse>(this.baseUri + 'v2/apple-pay/domains', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListBankAccounts
		 * Returns a list of [BankAccount](https://developer.squareup.com/reference/square_2021-08-18/objects/BankAccount) objects linked to a Square account.
		 * Get v2/bank-accounts
		 * @param {string} cursor The pagination cursor returned by a previous call to this endpoint.
		 * Use it in the next `ListBankAccounts` request to retrieve the next set 
		 * of results.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 * @param {number} limit Upper limit on the number of bank accounts to return in the response. 
		 * Currently, 1000 is the largest supported limit. You can specify a limit 
		 * of up to 1000 bank accounts. This is also the default limit.
		 * @param {string} location_id Location ID. You can specify this optional filter 
		 * to retrieve only the linked bank accounts belonging to a specific location.
		 * @return {ListBankAccountsResponse} Success
		 */
		ListBankAccounts(cursor: string | null | undefined, limit: number | null | undefined, location_id: string | null | undefined): Observable<ListBankAccountsResponse> {
			return this.http.get<ListBankAccountsResponse>(this.baseUri + 'v2/bank-accounts?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)), {});
		}

		/**
		 * GetBankAccountByV1Id
		 * Returns details of a [BankAccount](https://developer.squareup.com/reference/square_2021-08-18/objects/BankAccount) identified by V1 bank account ID.
		 * Get v2/bank-accounts/by-v1-id/{v1_bank_account_id}
		 * @param {string} v1_bank_account_id Connect V1 ID of the desired `BankAccount`. For more information, see 
		 * [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api#retrieve-a-bank-account-by-using-an-id-issued-by-v1-bank-accounts-api).
		 * @return {GetBankAccountByV1IdResponse} Success
		 */
		GetBankAccountByV1Id(v1_bank_account_id: string): Observable<GetBankAccountByV1IdResponse> {
			return this.http.get<GetBankAccountByV1IdResponse>(this.baseUri + 'v2/bank-accounts/by-v1-id/' + (v1_bank_account_id == null ? '' : encodeURIComponent(v1_bank_account_id)), {});
		}

		/**
		 * GetBankAccount
		 * Returns details of a [BankAccount](https://developer.squareup.com/reference/square_2021-08-18/objects/BankAccount)
		 * linked to a Square account.
		 * Get v2/bank-accounts/{bank_account_id}
		 * @param {string} bank_account_id Square-issued ID of the desired `BankAccount`.
		 * @return {GetBankAccountResponse} Success
		 */
		GetBankAccount(bank_account_id: string): Observable<GetBankAccountResponse> {
			return this.http.get<GetBankAccountResponse>(this.baseUri + 'v2/bank-accounts/' + (bank_account_id == null ? '' : encodeURIComponent(bank_account_id)), {});
		}

		/**
		 * CreateBooking
		 * Creates a booking.
		 * Post v2/bookings
		 * @param {CreateBookingRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateBookingResponse} Success
		 */
		CreateBooking(requestBody: CreateBookingRequest): Observable<CreateBookingResponse> {
			return this.http.post<CreateBookingResponse>(this.baseUri + 'v2/bookings', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchAvailability
		 * Searches for availabilities for booking.
		 * Post v2/bookings/availability/search
		 * @param {SearchAvailabilityRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchAvailabilityResponse} Success
		 */
		SearchAvailability(requestBody: SearchAvailabilityRequest): Observable<SearchAvailabilityResponse> {
			return this.http.post<SearchAvailabilityResponse>(this.baseUri + 'v2/bookings/availability/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveBusinessBookingProfile
		 * Retrieves a seller's booking profile.
		 * Get v2/bookings/business-booking-profile
		 * @return {RetrieveBusinessBookingProfileResponse} Success
		 */
		RetrieveBusinessBookingProfile(): Observable<RetrieveBusinessBookingProfileResponse> {
			return this.http.get<RetrieveBusinessBookingProfileResponse>(this.baseUri + 'v2/bookings/business-booking-profile', {});
		}

		/**
		 * ListTeamMemberBookingProfiles
		 * Lists booking profiles for team members.
		 * Get v2/bookings/team-member-booking-profiles
		 * @param {boolean} bookable_only Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`).
		 * @param {number} limit The maximum number of results to return.
		 * @param {string} cursor The cursor for paginating through the results.
		 * @param {string} location_id Indicates whether to include only team members enabled at the given location in the returned result.
		 * @return {ListTeamMemberBookingProfilesResponse} Success
		 */
		ListTeamMemberBookingProfiles(bookable_only: boolean | null | undefined, limit: number | null | undefined, cursor: string | null | undefined, location_id: string | null | undefined): Observable<ListTeamMemberBookingProfilesResponse> {
			return this.http.get<ListTeamMemberBookingProfilesResponse>(this.baseUri + 'v2/bookings/team-member-booking-profiles?bookable_only=' + bookable_only + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)), {});
		}

		/**
		 * RetrieveTeamMemberBookingProfile
		 * Retrieves a team member's booking profile.
		 * Get v2/bookings/team-member-booking-profiles/{team_member_id}
		 * @param {string} team_member_id The ID of the team member to retrieve.
		 * @return {RetrieveTeamMemberBookingProfileResponse} Success
		 */
		RetrieveTeamMemberBookingProfile(team_member_id: string): Observable<RetrieveTeamMemberBookingProfileResponse> {
			return this.http.get<RetrieveTeamMemberBookingProfileResponse>(this.baseUri + 'v2/bookings/team-member-booking-profiles/' + (team_member_id == null ? '' : encodeURIComponent(team_member_id)), {});
		}

		/**
		 * RetrieveBooking
		 * Retrieves a booking.
		 * Get v2/bookings/{booking_id}
		 * @param {string} booking_id The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-retrieved booking.
		 * @return {RetrieveBookingResponse} Success
		 */
		RetrieveBooking(booking_id: string): Observable<RetrieveBookingResponse> {
			return this.http.get<RetrieveBookingResponse>(this.baseUri + 'v2/bookings/' + (booking_id == null ? '' : encodeURIComponent(booking_id)), {});
		}

		/**
		 * UpdateBooking
		 * Updates a booking.
		 * Put v2/bookings/{booking_id}
		 * @param {string} booking_id The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-updated booking.
		 * @param {UpdateBookingRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateBookingResponse} Success
		 */
		UpdateBooking(booking_id: string, requestBody: UpdateBookingRequest): Observable<UpdateBookingResponse> {
			return this.http.put<UpdateBookingResponse>(this.baseUri + 'v2/bookings/' + (booking_id == null ? '' : encodeURIComponent(booking_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CancelBooking
		 * Cancels an existing booking.
		 * Post v2/bookings/{booking_id}/cancel
		 * @param {string} booking_id The ID of the [Booking](https://developer.squareup.com/reference/square_2021-08-18/objects/Booking) object representing the to-be-cancelled booking.
		 * @param {CancelBookingRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CancelBookingResponse} Success
		 */
		CancelBooking(booking_id: string, requestBody: CancelBookingRequest): Observable<CancelBookingResponse> {
			return this.http.post<CancelBookingResponse>(this.baseUri + 'v2/bookings/' + (booking_id == null ? '' : encodeURIComponent(booking_id)) + '/cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListCards
		 * Retrieves a list of cards owned by the account making the request.
		 * A max of 25 cards will be returned.
		 * Get v2/cards
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 * @param {string} customer_id Limit results to cards associated with the customer supplied.
		 * By default, all cards owned by the merchant are returned.
		 * @param {boolean} include_disabled Includes disabled cards.
		 * By default, all enabled cards owned by the merchant are returned.
		 * @param {string} reference_id Limit results to cards associated with the reference_id supplied.
		 * @param {string} sort_order Sorts the returned list by when the card was created with the specified order.
		 * This field defaults to ASC.
		 * @return {ListCardsResponse} Success
		 */
		ListCards(cursor: string | null | undefined, customer_id: string | null | undefined, include_disabled: boolean | null | undefined, reference_id: string | null | undefined, sort_order: string | null | undefined): Observable<ListCardsResponse> {
			return this.http.get<ListCardsResponse>(this.baseUri + 'v2/cards?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&customer_id=' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '&include_disabled=' + include_disabled + '&reference_id=' + (reference_id == null ? '' : encodeURIComponent(reference_id)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)), {});
		}

		/**
		 * CreateCard
		 * Adds a card on file to an existing merchant.
		 * Post v2/cards
		 * @param {CreateCardRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateCardResponse} Success
		 */
		CreateCard(requestBody: CreateCardRequest): Observable<CreateCardResponse> {
			return this.http.post<CreateCardResponse>(this.baseUri + 'v2/cards', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveCard
		 * Retrieves details for a specific Card.
		 * Get v2/cards/{card_id}
		 * @param {string} card_id Unique ID for the desired Card.
		 * @return {RetrieveCardResponse} Success
		 */
		RetrieveCard(card_id: string): Observable<RetrieveCardResponse> {
			return this.http.get<RetrieveCardResponse>(this.baseUri + 'v2/cards/' + (card_id == null ? '' : encodeURIComponent(card_id)), {});
		}

		/**
		 * DisableCard
		 * Disables the card, preventing any further updates or charges.
		 * Disabling an already disabled card is allowed but has no effect.
		 * Post v2/cards/{card_id}/disable
		 * @param {string} card_id Unique ID for the desired Card.
		 * @return {DisableCardResponse} Success
		 */
		DisableCard(card_id: string): Observable<DisableCardResponse> {
			return this.http.post<DisableCardResponse>(this.baseUri + 'v2/cards/' + (card_id == null ? '' : encodeURIComponent(card_id)) + '/disable', null, {});
		}

		/**
		 * ListCashDrawerShifts
		 * Provides the details for all of the cash drawer shifts for a location
		 * in a date range.
		 * Get v2/cash-drawers/shifts
		 * @param {string} location_id The ID of the location to query for a list of cash drawer shifts.
		 * @param {string} sort_order The order in which cash drawer shifts are listed in the response,
		 * based on their opened_at field. Default value: ASC
		 * @param {string} begin_time The inclusive start time of the query on opened_at, in ISO 8601 format.
		 * @param {string} end_time The exclusive end date of the query on opened_at, in ISO 8601 format.
		 * @param {number} limit Number of cash drawer shift events in a page of results (200 by
		 * default, 1000 max).
		 * @param {string} cursor Opaque cursor for fetching the next page of results.
		 * @return {ListCashDrawerShiftsResponse} Success
		 */
		ListCashDrawerShifts(location_id: string, sort_order: string | null | undefined, begin_time: string | null | undefined, end_time: string | null | undefined, limit: number | null | undefined, cursor: string | null | undefined): Observable<ListCashDrawerShiftsResponse> {
			return this.http.get<ListCashDrawerShiftsResponse>(this.baseUri + 'v2/cash-drawers/shifts?location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)) + '&begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * RetrieveCashDrawerShift
		 * Provides the summary details for a single cash drawer shift. See
		 * [ListCashDrawerShiftEvents](https://developer.squareup.com/reference/square_2021-08-18/cash-drawers-api/list-cash-drawer-shift-events) for a list of cash drawer shift events.
		 * Get v2/cash-drawers/shifts/{shift_id}
		 * @param {string} location_id The ID of the location to retrieve cash drawer shifts from.
		 * @param {string} shift_id The shift ID.
		 * @return {RetrieveCashDrawerShiftResponse} Success
		 */
		RetrieveCashDrawerShift(location_id: string, shift_id: string): Observable<RetrieveCashDrawerShiftResponse> {
			return this.http.get<RetrieveCashDrawerShiftResponse>(this.baseUri + 'v2/cash-drawers/shifts/' + (shift_id == null ? '' : encodeURIComponent(shift_id)) + '?location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)), {});
		}

		/**
		 * ListCashDrawerShiftEvents
		 * Provides a paginated list of events for a single cash drawer shift.
		 * Get v2/cash-drawers/shifts/{shift_id}/events
		 * @param {string} location_id The ID of the location to list cash drawer shifts for.
		 * @param {string} shift_id The shift ID.
		 * @param {number} limit Number of resources to be returned in a page of results (200 by
		 * default, 1000 max).
		 * @param {string} cursor Opaque cursor for fetching the next page of results.
		 * @return {ListCashDrawerShiftEventsResponse} Success
		 */
		ListCashDrawerShiftEvents(location_id: string, shift_id: string, limit: number | null | undefined, cursor: string | null | undefined): Observable<ListCashDrawerShiftEventsResponse> {
			return this.http.get<ListCashDrawerShiftEventsResponse>(this.baseUri + 'v2/cash-drawers/shifts/' + (shift_id == null ? '' : encodeURIComponent(shift_id)) + '/events?location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * BatchDeleteCatalogObjects
		 * Deletes a set of [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)s based on the
		 * provided list of target IDs and returns a set of successfully deleted IDs in
		 * the response. Deletion is a cascading event such that all children of the
		 * targeted object are also deleted. For example, deleting a CatalogItem will
		 * also delete all of its [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		 * children.
		 * `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted
		 * IDs can be deleted. The response will only include IDs that were
		 * actually deleted.
		 * Post v2/catalog/batch-delete
		 * @param {BatchDeleteCatalogObjectsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchDeleteCatalogObjectsResponse} Success
		 */
		BatchDeleteCatalogObjects(requestBody: BatchDeleteCatalogObjectsRequest): Observable<BatchDeleteCatalogObjectsResponse> {
			return this.http.post<BatchDeleteCatalogObjectsResponse>(this.baseUri + 'v2/catalog/batch-delete', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BatchRetrieveCatalogObjects
		 * Returns a set of objects based on the provided ID.
		 * Each [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) returned in the set includes all of its
		 * child information including: all of its
		 * [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects, references to
		 * its [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects, and the ids of
		 * any [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to it.
		 * Post v2/catalog/batch-retrieve
		 * @param {BatchRetrieveCatalogObjectsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchRetrieveCatalogObjectsResponse} Success
		 */
		BatchRetrieveCatalogObjects(requestBody: BatchRetrieveCatalogObjectsRequest): Observable<BatchRetrieveCatalogObjectsResponse> {
			return this.http.post<BatchRetrieveCatalogObjectsResponse>(this.baseUri + 'v2/catalog/batch-retrieve', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BatchUpsertCatalogObjects
		 * Creates or updates up to 10,000 target objects based on the provided
		 * list of objects. The target objects are grouped into batches and each batch is
		 * inserted/updated in an all-or-nothing manner. If an object within a batch is
		 * malformed in some way, or violates a database constraint, the entire batch
		 * containing that item will be disregarded. However, other batches in the same
		 * request may still succeed. Each batch may contain up to 1,000 objects, and
		 * batches will be processed in order as long as the total object count for the
		 * request (items, variations, modifier lists, discounts, and taxes) is no more
		 * than 10,000.
		 * Post v2/catalog/batch-upsert
		 * @param {BatchUpsertCatalogObjectsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchUpsertCatalogObjectsResponse} Success
		 */
		BatchUpsertCatalogObjects(requestBody: BatchUpsertCatalogObjectsRequest): Observable<BatchUpsertCatalogObjectsResponse> {
			return this.http.post<BatchUpsertCatalogObjectsResponse>(this.baseUri + 'v2/catalog/batch-upsert', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CatalogInfo
		 * Retrieves information about the Square Catalog API, such as batch size
		 * limits that can be used by the `BatchUpsertCatalogObjects` endpoint.
		 * Get v2/catalog/info
		 * @return {CatalogInfoResponse} Success
		 */
		CatalogInfo(): Observable<CatalogInfoResponse> {
			return this.http.get<CatalogInfoResponse>(this.baseUri + 'v2/catalog/info', {});
		}

		/**
		 * ListCatalog
		 * Returns a list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s that includes
		 * all objects of a set of desired types (for example, all [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
		 * and [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects) in the catalog. The `types` parameter
		 * is specified as a comma-separated list of valid [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) types:
		 * `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.
		 * __Important:__ ListCatalog does not return deleted catalog items. To retrieve
		 * deleted catalog items, use [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects)
		 * and set the `include_deleted_objects` attribute value to `true`.
		 * Get v2/catalog/list
		 * @param {string} cursor The pagination cursor returned in the previous response. Leave unset for an initial request.
		 * The page size is currently set to be 100.
		 * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
		 * @param {string} types An optional case-insensitive, comma-separated list of object types to retrieve.
		 * The valid values are defined in the [CatalogObjectType](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) enum, including
		 * `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
		 * `MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.
		 * If this is unspecified, the operation returns objects of all the types at the version of the Square API used to make the request.
		 * @param {number} catalog_version The specific version of the catalog objects to be included in the response. 
		 * This allows you to retrieve historical
		 * versions of objects. The specified version value is matched against
		 * the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
		 * @return {ListCatalogResponse} Success
		 */
		ListCatalog(cursor: string | null | undefined, types: string | null | undefined, catalog_version: number | null | undefined): Observable<ListCatalogResponse> {
			return this.http.get<ListCatalogResponse>(this.baseUri + 'v2/catalog/list?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&types=' + (types == null ? '' : encodeURIComponent(types)) + '&catalog_version=' + catalog_version, {});
		}

		/**
		 * UpsertCatalogObject
		 * Creates or updates the target [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
		 * Post v2/catalog/object
		 * @param {UpsertCatalogObjectRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpsertCatalogObjectResponse} Success
		 */
		UpsertCatalogObject(requestBody: UpsertCatalogObjectRequest): Observable<UpsertCatalogObjectResponse> {
			return this.http.post<UpsertCatalogObjectResponse>(this.baseUri + 'v2/catalog/object', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteCatalogObject
		 * Deletes a single [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) based on the
		 * provided ID and returns the set of successfully deleted IDs in the response.
		 * Deletion is a cascading event such that all children of the targeted object
		 * are also deleted. For example, deleting a [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
		 * will also delete all of its
		 * [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) children.
		 * Delete v2/catalog/object/{object_id}
		 * @param {string} object_id The ID of the catalog object to be deleted. When an object is deleted, other
		 * objects in the graph that depend on that object will be deleted as well (for example, deleting a
		 * catalog item will delete its catalog item variations).
		 * @return {DeleteCatalogObjectResponse} Success
		 */
		DeleteCatalogObject(object_id: string): Observable<DeleteCatalogObjectResponse> {
			return this.http.delete<DeleteCatalogObjectResponse>(this.baseUri + 'v2/catalog/object/' + (object_id == null ? '' : encodeURIComponent(object_id)), {});
		}

		/**
		 * RetrieveCatalogObject
		 * Returns a single [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) as a
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) based on the provided ID. The returned
		 * object includes all of the relevant [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem)
		 * information including: [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
		 * children, references to its
		 * [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects, and the ids of
		 * any [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to it.
		 * Get v2/catalog/object/{object_id}
		 * @param {string} object_id The object ID of any type of catalog objects to be retrieved.
		 * @param {boolean} include_related_objects If `true`, the response will include additional objects that are related to the
		 * requested object, as follows:
		 * If the `object` field of the response contains a `CatalogItem`, its associated
		 * `CatalogCategory`, `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will
		 * be returned in the `related_objects` field of the response. If the `object` field of
		 * the response contains a `CatalogItemVariation`, its parent `CatalogItem` will be returned
		 * in the `related_objects` field of the response.
		 * Default value: `false`
		 * @param {number} catalog_version Requests objects as of a specific version of the catalog. This allows you to retrieve historical
		 * versions of objects. The value to retrieve a specific version of an object can be found
		 * in the version field of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s.
		 * @return {RetrieveCatalogObjectResponse} Success
		 */
		RetrieveCatalogObject(object_id: string, include_related_objects: boolean | null | undefined, catalog_version: number | null | undefined): Observable<RetrieveCatalogObjectResponse> {
			return this.http.get<RetrieveCatalogObjectResponse>(this.baseUri + 'v2/catalog/object/' + (object_id == null ? '' : encodeURIComponent(object_id)) + '&include_related_objects=' + include_related_objects + '&catalog_version=' + catalog_version, {});
		}

		/**
		 * SearchCatalogObjects
		 * Searches for [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) of any type by matching supported search attribute values,
		 * excluding custom attribute values on items or item variations, against one or more of the specified query expressions.
		 * This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
		 * endpoint in the following aspects:
		 * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects.
		 * - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not.
		 * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does.
		 * - The both endpoints have different call conventions, including the query filter formats.
		 * Post v2/catalog/search
		 * @param {SearchCatalogObjectsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchCatalogObjectsResponse} Success
		 */
		SearchCatalogObjects(requestBody: SearchCatalogObjectsRequest): Observable<SearchCatalogObjectsResponse> {
			return this.http.post<SearchCatalogObjectsResponse>(this.baseUri + 'v2/catalog/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchCatalogItems
		 * Searches for catalog items or item variations by matching supported search attribute values, including
		 * custom attribute values, against one or more of the specified query expressions.
		 * This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects)
		 * endpoint in the following aspects:
		 * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects` can search for any type of catalog objects.
		 * - `SearchCatalogItems` supports the custom attribute query filters to return items or item variations that contain custom attribute values, where `SearchCatalogObjects` does not.
		 * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted items or item variations, whereas `SearchCatalogObjects` does.
		 * - The both endpoints use different call conventions, including the query filter formats.
		 * Post v2/catalog/search-catalog-items
		 * @param {SearchCatalogItemsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchCatalogItemsResponse} Success
		 */
		SearchCatalogItems(requestBody: SearchCatalogItemsRequest): Observable<SearchCatalogItemsResponse> {
			return this.http.post<SearchCatalogItemsResponse>(this.baseUri + 'v2/catalog/search-catalog-items', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * UpdateItemModifierLists
		 * Updates the [CatalogModifierList](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifierList) objects
		 * that apply to the targeted [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) without having
		 * to perform an upsert on the entire item.
		 * Post v2/catalog/update-item-modifier-lists
		 * @param {UpdateItemModifierListsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateItemModifierListsResponse} Success
		 */
		UpdateItemModifierLists(requestBody: UpdateItemModifierListsRequest): Observable<UpdateItemModifierListsResponse> {
			return this.http.post<UpdateItemModifierListsResponse>(this.baseUri + 'v2/catalog/update-item-modifier-lists', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * UpdateItemTaxes
		 * Updates the [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax) objects that apply to the
		 * targeted [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) without having to perform an
		 * upsert on the entire item.
		 * Post v2/catalog/update-item-taxes
		 * @param {UpdateItemTaxesRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateItemTaxesResponse} Success
		 */
		UpdateItemTaxes(requestBody: UpdateItemTaxesRequest): Observable<UpdateItemTaxesResponse> {
			return this.http.post<UpdateItemTaxesResponse>(this.baseUri + 'v2/catalog/update-item-taxes', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListCustomers
		 * Lists customer profiles associated with a Square account.
		 * Under normal operating conditions, newly created or updated customer profiles become available
		 * for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated
		 * profiles can take closer to one minute or longer, especially during network incidents and outages.
		 * Get v2/customers
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @param {number} limit The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		 * The limit is ignored if it is less than 1 or greater than 100. The default value is 100.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @param {string} sort_field Indicates how customers should be sorted.
		 * The default value is `DEFAULT`.
		 * @param {string} sort_order Indicates whether customers should be sorted in ascending (`ASC`) or
		 * descending (`DESC`) order.
		 * The default value is `ASC`.
		 * @return {ListCustomersResponse} Success
		 */
		ListCustomers(cursor: string | null | undefined, limit: number | null | undefined, sort_field: string | null | undefined, sort_order: string | null | undefined): Observable<ListCustomersResponse> {
			return this.http.get<ListCustomersResponse>(this.baseUri + 'v2/customers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&sort_field=' + (sort_field == null ? '' : encodeURIComponent(sort_field)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)), {});
		}

		/**
		 * CreateCustomer
		 * Creates a new customer for a business.
		 * You must provide at least one of the following values in your request to this
		 * endpoint:
		 * - `given_name`
		 * - `family_name`
		 * - `company_name`
		 * - `email_address`
		 * - `phone_number`
		 * Post v2/customers
		 * @param {CreateCustomerRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateCustomerResponse} Success
		 */
		CreateCustomer(requestBody: CreateCustomerRequest): Observable<CreateCustomerResponse> {
			return this.http.post<CreateCustomerResponse>(this.baseUri + 'v2/customers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListCustomerGroups
		 * Retrieves the list of customer groups of a business.
		 * Get v2/customers/groups
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @param {number} limit The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		 * The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @return {ListCustomerGroupsResponse} Success
		 */
		ListCustomerGroups(cursor: string | null | undefined, limit: number | null | undefined): Observable<ListCustomerGroupsResponse> {
			return this.http.get<ListCustomerGroupsResponse>(this.baseUri + 'v2/customers/groups?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * CreateCustomerGroup
		 * Creates a new customer group for a business.
		 * The request must include the `name` value of the group.
		 * Post v2/customers/groups
		 * @param {CreateCustomerGroupRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateCustomerGroupResponse} Success
		 */
		CreateCustomerGroup(requestBody: CreateCustomerGroupRequest): Observable<CreateCustomerGroupResponse> {
			return this.http.post<CreateCustomerGroupResponse>(this.baseUri + 'v2/customers/groups', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteCustomerGroup
		 * Deletes a customer group as identified by the `group_id` value.
		 * Delete v2/customers/groups/{group_id}
		 * @param {string} group_id The ID of the customer group to delete.
		 * @return {DeleteCustomerGroupResponse} Success
		 */
		DeleteCustomerGroup(group_id: string): Observable<DeleteCustomerGroupResponse> {
			return this.http.delete<DeleteCustomerGroupResponse>(this.baseUri + 'v2/customers/groups/' + (group_id == null ? '' : encodeURIComponent(group_id)), {});
		}

		/**
		 * RetrieveCustomerGroup
		 * Retrieves a specific customer group as identified by the `group_id` value.
		 * Get v2/customers/groups/{group_id}
		 * @param {string} group_id The ID of the customer group to retrieve.
		 * @return {RetrieveCustomerGroupResponse} Success
		 */
		RetrieveCustomerGroup(group_id: string): Observable<RetrieveCustomerGroupResponse> {
			return this.http.get<RetrieveCustomerGroupResponse>(this.baseUri + 'v2/customers/groups/' + (group_id == null ? '' : encodeURIComponent(group_id)), {});
		}

		/**
		 * UpdateCustomerGroup
		 * Updates a customer group as identified by the `group_id` value.
		 * Put v2/customers/groups/{group_id}
		 * @param {string} group_id The ID of the customer group to update.
		 * @param {UpdateCustomerGroupRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateCustomerGroupResponse} Success
		 */
		UpdateCustomerGroup(group_id: string, requestBody: UpdateCustomerGroupRequest): Observable<UpdateCustomerGroupResponse> {
			return this.http.put<UpdateCustomerGroupResponse>(this.baseUri + 'v2/customers/groups/' + (group_id == null ? '' : encodeURIComponent(group_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchCustomers
		 * Searches the customer profiles associated with a Square account using a supported query filter.
		 * Calling `SearchCustomers` without any explicit query filter returns all
		 * customer profiles ordered alphabetically based on `given_name` and
		 * `family_name`.
		 * Under normal operating conditions, newly created or updated customer profiles become available
		 * for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated
		 * profiles can take closer to one minute or longer, especially during network incidents and outages.
		 * Post v2/customers/search
		 * @param {SearchCustomersRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchCustomersResponse} Success
		 */
		SearchCustomers(requestBody: SearchCustomersRequest): Observable<SearchCustomersResponse> {
			return this.http.post<SearchCustomersResponse>(this.baseUri + 'v2/customers/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListCustomerSegments
		 * Retrieves the list of customer segments of a business.
		 * Get v2/customers/segments
		 * @param {string} cursor A pagination cursor returned by previous calls to `ListCustomerSegments`.
		 * This cursor is used to retrieve the next set of query results.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @param {number} limit The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results. 
		 * The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @return {ListCustomerSegmentsResponse} Success
		 */
		ListCustomerSegments(cursor: string | null | undefined, limit: number | null | undefined): Observable<ListCustomerSegmentsResponse> {
			return this.http.get<ListCustomerSegmentsResponse>(this.baseUri + 'v2/customers/segments?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * RetrieveCustomerSegment
		 * Retrieves a specific customer segment as identified by the `segment_id` value.
		 * Get v2/customers/segments/{segment_id}
		 * @param {string} segment_id The Square-issued ID of the customer segment.
		 * @return {RetrieveCustomerSegmentResponse} Success
		 */
		RetrieveCustomerSegment(segment_id: string): Observable<RetrieveCustomerSegmentResponse> {
			return this.http.get<RetrieveCustomerSegmentResponse>(this.baseUri + 'v2/customers/segments/' + (segment_id == null ? '' : encodeURIComponent(segment_id)), {});
		}

		/**
		 * DeleteCustomer
		 * Deletes a customer profile from a business. This operation also unlinks any associated cards on file.
		 * As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
		 * To delete a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
		 * Delete v2/customers/{customer_id}
		 * @param {string} customer_id The ID of the customer to delete.
		 * @param {number} version The current version of the customer profile.
		 * As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.  For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).
		 * @return {DeleteCustomerResponse} Success
		 */
		DeleteCustomer(customer_id: string, version: number | null | undefined): Observable<DeleteCustomerResponse> {
			return this.http.delete<DeleteCustomerResponse>(this.baseUri + 'v2/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '&version=' + version, {});
		}

		/**
		 * RetrieveCustomer
		 * Returns details for a single customer.
		 * Get v2/customers/{customer_id}
		 * @param {string} customer_id The ID of the customer to retrieve.
		 * @return {RetrieveCustomerResponse} Success
		 */
		RetrieveCustomer(customer_id: string): Observable<RetrieveCustomerResponse> {
			return this.http.get<RetrieveCustomerResponse>(this.baseUri + 'v2/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)), {});
		}

		/**
		 * UpdateCustomer
		 * Updates a customer profile. To change an attribute, specify the new value. To remove an attribute, specify the value as an empty string or empty object.
		 * As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
		 * To update a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
		 * You cannot use this endpoint to change cards on file. To make changes, use the [Cards API](https://developer.squareup.com/reference/square_2021-08-18/cards-api) or [Gift Cards API](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api).
		 * Put v2/customers/{customer_id}
		 * @param {string} customer_id The ID of the customer to update.
		 * @param {UpdateCustomerRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateCustomerResponse} Success
		 */
		UpdateCustomer(customer_id: string, requestBody: UpdateCustomerRequest): Observable<UpdateCustomerResponse> {
			return this.http.put<UpdateCustomerResponse>(this.baseUri + 'v2/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CreateCustomerCard
		 * Adds a card on file to an existing customer.
		 * As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
		 * calls with the same card nonce return the same card record that was created
		 * with the provided nonce during the _first_ call.
		 * Post v2/customers/{customer_id}/cards
		 * @param {string} customer_id The Square ID of the customer profile the card is linked to.
		 * @param {CreateCustomerCardRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateCustomerCardResponse} Success
		 */
		CreateCustomerCard(customer_id: string, requestBody: CreateCustomerCardRequest): Observable<CreateCustomerCardResponse> {
			return this.http.post<CreateCustomerCardResponse>(this.baseUri + 'v2/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '/cards', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteCustomerCard
		 * Removes a card on file from a customer.
		 * Delete v2/customers/{customer_id}/cards/{card_id}
		 * @param {string} customer_id The ID of the customer that the card on file belongs to.
		 * @param {string} card_id The ID of the card on file to delete.
		 * @return {DeleteCustomerCardResponse} Success
		 */
		DeleteCustomerCard(customer_id: string, card_id: string): Observable<DeleteCustomerCardResponse> {
			return this.http.delete<DeleteCustomerCardResponse>(this.baseUri + 'v2/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '/cards/' + (card_id == null ? '' : encodeURIComponent(card_id)), {});
		}

		/**
		 * RemoveGroupFromCustomer
		 * Removes a group membership from a customer.
		 * The customer is identified by the `customer_id` value
		 * and the customer group is identified by the `group_id` value.
		 * Delete v2/customers/{customer_id}/groups/{group_id}
		 * @param {string} customer_id The ID of the customer to remove from the group.
		 * @param {string} group_id The ID of the customer group to remove the customer from.
		 * @return {RemoveGroupFromCustomerResponse} Success
		 */
		RemoveGroupFromCustomer(customer_id: string, group_id: string): Observable<RemoveGroupFromCustomerResponse> {
			return this.http.delete<RemoveGroupFromCustomerResponse>(this.baseUri + 'v2/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '/groups/' + (group_id == null ? '' : encodeURIComponent(group_id)), {});
		}

		/**
		 * AddGroupToCustomer
		 * Adds a group membership to a customer.
		 * The customer is identified by the `customer_id` value
		 * and the customer group is identified by the `group_id` value.
		 * Put v2/customers/{customer_id}/groups/{group_id}
		 * @param {string} customer_id The ID of the customer to add to a group.
		 * @param {string} group_id The ID of the customer group to add the customer to.
		 * @return {AddGroupToCustomerResponse} Success
		 */
		AddGroupToCustomer(customer_id: string, group_id: string): Observable<AddGroupToCustomerResponse> {
			return this.http.put<AddGroupToCustomerResponse>(this.baseUri + 'v2/customers/' + (customer_id == null ? '' : encodeURIComponent(customer_id)) + '/groups/' + (group_id == null ? '' : encodeURIComponent(group_id)), null, {});
		}

		/**
		 * ListDeviceCodes
		 * Lists all DeviceCodes associated with the merchant.
		 * Get v2/devices/codes
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 * @param {string} location_id If specified, only returns DeviceCodes of the specified location.
		 * Returns DeviceCodes of all locations if empty.
		 * @param {string} product_type If specified, only returns DeviceCodes targeting the specified product type.
		 * Returns DeviceCodes of all product types if empty.
		 * @param {string} status If specified, returns DeviceCodes with the specified statuses.
		 * Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.
		 * @return {ListDeviceCodesResponse} Success
		 */
		ListDeviceCodes(cursor: string | null | undefined, location_id: string | null | undefined, product_type: string | null | undefined, status: string | null | undefined): Observable<ListDeviceCodesResponse> {
			return this.http.get<ListDeviceCodesResponse>(this.baseUri + 'v2/devices/codes?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&product_type=' + (product_type == null ? '' : encodeURIComponent(product_type)) + '&status=' + (status == null ? '' : encodeURIComponent(status)), {});
		}

		/**
		 * CreateDeviceCode
		 * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected
		 * terminal mode.
		 * Post v2/devices/codes
		 * @param {CreateDeviceCodeRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateDeviceCodeResponse} Success
		 */
		CreateDeviceCode(requestBody: CreateDeviceCodeRequest): Observable<CreateDeviceCodeResponse> {
			return this.http.post<CreateDeviceCodeResponse>(this.baseUri + 'v2/devices/codes', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * GetDeviceCode
		 * Retrieves DeviceCode with the associated ID.
		 * Get v2/devices/codes/{id}
		 * @param {string} id The unique identifier for the device code.
		 * @return {GetDeviceCodeResponse} Success
		 */
		GetDeviceCode(id: string): Observable<GetDeviceCodeResponse> {
			return this.http.get<GetDeviceCodeResponse>(this.baseUri + 'v2/devices/codes/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * ListDisputes
		 * Returns a list of disputes associated with a particular account.
		 * Get v2/disputes
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 * @param {string} states The dispute states to filter the result.
		 * If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`,
		 * or `LOST`).
		 * @param {string} location_id The ID of the location for which to return a list of disputes. If not specified, the endpoint returns
		 * all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.
		 * @return {ListDisputesResponse} Success
		 */
		ListDisputes(cursor: string | null | undefined, states: string | null | undefined, location_id: string | null | undefined): Observable<ListDisputesResponse> {
			return this.http.get<ListDisputesResponse>(this.baseUri + 'v2/disputes?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&states=' + (states == null ? '' : encodeURIComponent(states)) + '&location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)), {});
		}

		/**
		 * RetrieveDispute
		 * Returns details about a specific dispute.
		 * Get v2/disputes/{dispute_id}
		 * @param {string} dispute_id The ID of the dispute you want more details about.
		 * @return {RetrieveDisputeResponse} Success
		 */
		RetrieveDispute(dispute_id: string): Observable<RetrieveDisputeResponse> {
			return this.http.get<RetrieveDisputeResponse>(this.baseUri + 'v2/disputes/' + (dispute_id == null ? '' : encodeURIComponent(dispute_id)), {});
		}

		/**
		 * AcceptDispute
		 * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
		 * updates the dispute state to ACCEPTED.
		 * Square debits the disputed amount from the seller’s Square account. If the Square account
		 * does not have sufficient funds, Square debits the associated bank account.
		 * Post v2/disputes/{dispute_id}/accept
		 * @param {string} dispute_id The ID of the dispute you want to accept.
		 * @return {AcceptDisputeResponse} Success
		 */
		AcceptDispute(dispute_id: string): Observable<AcceptDisputeResponse> {
			return this.http.post<AcceptDisputeResponse>(this.baseUri + 'v2/disputes/' + (dispute_id == null ? '' : encodeURIComponent(dispute_id)) + '/accept', null, {});
		}

		/**
		 * ListDisputeEvidence
		 * Returns a list of evidence associated with a dispute.
		 * Get v2/disputes/{dispute_id}/evidence
		 * @param {string} dispute_id The ID of the dispute.
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 * @return {ListDisputeEvidenceResponse} Success
		 */
		ListDisputeEvidence(dispute_id: string, cursor: string | null | undefined): Observable<ListDisputeEvidenceResponse> {
			return this.http.get<ListDisputeEvidenceResponse>(this.baseUri + 'v2/disputes/' + (dispute_id == null ? '' : encodeURIComponent(dispute_id)) + '/evidence&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * CreateDisputeEvidenceText
		 * Uploads text to use as evidence for a dispute challenge.
		 * Post v2/disputes/{dispute_id}/evidence-text
		 * @param {string} dispute_id The ID of the dispute you want to upload evidence for.
		 * @param {CreateDisputeEvidenceTextRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateDisputeEvidenceTextResponse} Success
		 */
		CreateDisputeEvidenceText(dispute_id: string, requestBody: CreateDisputeEvidenceTextRequest): Observable<CreateDisputeEvidenceTextResponse> {
			return this.http.post<CreateDisputeEvidenceTextResponse>(this.baseUri + 'v2/disputes/' + (dispute_id == null ? '' : encodeURIComponent(dispute_id)) + '/evidence-text', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteDisputeEvidence
		 * Removes specified evidence from a dispute.
		 * Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after
		 * submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
		 * Delete v2/disputes/{dispute_id}/evidence/{evidence_id}
		 * @param {string} dispute_id The ID of the dispute you want to remove evidence from.
		 * @param {string} evidence_id The ID of the evidence you want to remove.
		 * @return {DeleteDisputeEvidenceResponse} Success
		 */
		DeleteDisputeEvidence(dispute_id: string, evidence_id: string): Observable<DeleteDisputeEvidenceResponse> {
			return this.http.delete<DeleteDisputeEvidenceResponse>(this.baseUri + 'v2/disputes/' + (dispute_id == null ? '' : encodeURIComponent(dispute_id)) + '/evidence/' + (evidence_id == null ? '' : encodeURIComponent(evidence_id)), {});
		}

		/**
		 * RetrieveDisputeEvidence
		 * Returns the evidence metadata specified by the evidence ID in the request URL path
		 * You must maintain a copy of the evidence you upload if you want to reference it later. You cannot
		 * download the evidence after you upload it.
		 * Get v2/disputes/{dispute_id}/evidence/{evidence_id}
		 * @param {string} dispute_id The ID of the dispute that you want to retrieve evidence from.
		 * @param {string} evidence_id The ID of the evidence to retrieve.
		 * @return {RetrieveDisputeEvidenceResponse} Success
		 */
		RetrieveDisputeEvidence(dispute_id: string, evidence_id: string): Observable<RetrieveDisputeEvidenceResponse> {
			return this.http.get<RetrieveDisputeEvidenceResponse>(this.baseUri + 'v2/disputes/' + (dispute_id == null ? '' : encodeURIComponent(dispute_id)) + '/evidence/' + (evidence_id == null ? '' : encodeURIComponent(evidence_id)), {});
		}

		/**
		 * SubmitEvidence
		 * Submits evidence to the cardholder's bank.
		 * Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded
		 * using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and
		 * [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and
		 * evidence automatically provided by Square, when available.
		 * Post v2/disputes/{dispute_id}/submit-evidence
		 * @param {string} dispute_id The ID of the dispute that you want to submit evidence for.
		 * @return {SubmitEvidenceResponse} Success
		 */
		SubmitEvidence(dispute_id: string): Observable<SubmitEvidenceResponse> {
			return this.http.post<SubmitEvidenceResponse>(this.baseUri + 'v2/disputes/' + (dispute_id == null ? '' : encodeURIComponent(dispute_id)) + '/submit-evidence', null, {});
		}

		/**
		 * ListEmployees
		 * Get v2/employees
		 * @param {string} status Specifies the EmployeeStatus to filter the employee by.
		 * @param {number} limit The number of employees to be returned on each page.
		 * @param {string} cursor The token required to retrieve the specified page of results.
		 * @return {ListEmployeesResponse} Success
		 */
		EmployeesGetByLocation_idAndStatusAndLimitAndCursor(location_id: string | null | undefined, status: string | null | undefined, limit: number | null | undefined, cursor: string | null | undefined): Observable<ListEmployeesResponse> {
			return this.http.get<ListEmployeesResponse>(this.baseUri + 'v2/employees?location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&status=' + (status == null ? '' : encodeURIComponent(status)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * RetrieveEmployee
		 * Get v2/employees/{id}
		 * @param {string} id UUID for the employee that was requested.
		 * @return {RetrieveEmployeeResponse} Success
		 */
		EmployeesGetById(id: string): Observable<RetrieveEmployeeResponse> {
			return this.http.get<RetrieveEmployeeResponse>(this.baseUri + 'v2/employees/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * ListGiftCards
		 * Lists all gift cards. You can specify optional filters to retrieve
		 * a subset of the gift cards.
		 * Get v2/gift-cards
		 * @param {string} type If a type is provided, gift cards of this type are returned 
		 * (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)).
		 * If no type is provided, it returns gift cards of all types.
		 * @param {string} state If the state is provided, it returns the gift cards in the specified state 
		 * (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)).
		 * Otherwise, it returns the gift cards of all states.
		 * @param {number} limit If a value is provided, it returns only that number of results per page.
		 * The maximum number of results allowed per page is 50. The default value is 30.
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * If a cursor is not provided, it returns the first page of the results. 
		 * For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
		 * @param {string} customer_id If a value is provided, returns only the gift cards linked to the specified customer
		 * @return {ListGiftCardsResponse} Success
		 */
		ListGiftCards(type: string | null | undefined, state: string | null | undefined, limit: number | null | undefined, cursor: string | null | undefined, customer_id: string | null | undefined): Observable<ListGiftCardsResponse> {
			return this.http.get<ListGiftCardsResponse>(this.baseUri + 'v2/gift-cards?type=' + (type == null ? '' : encodeURIComponent(type)) + '&state=' + (state == null ? '' : encodeURIComponent(state)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&customer_id=' + (customer_id == null ? '' : encodeURIComponent(customer_id)), {});
		}

		/**
		 * CreateGiftCard
		 * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before
		 * it can be used for payment. For more information, see
		 * [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
		 * Post v2/gift-cards
		 * @param {CreateGiftCardRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateGiftCardResponse} Success
		 */
		CreateGiftCard(requestBody: CreateGiftCardRequest): Observable<CreateGiftCardResponse> {
			return this.http.post<CreateGiftCardResponse>(this.baseUri + 'v2/gift-cards', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListGiftCardActivities
		 * Lists gift card activities. By default, you get gift card activities for all
		 * gift cards in the seller's account. You can optionally specify query parameters to
		 * filter the list. For example, you can get a list of gift card activities for a gift card,
		 * for all gift cards in a specific region, or for activities within a time window.
		 * Get v2/gift-cards/activities
		 * @param {string} gift_card_id If you provide a gift card ID, the endpoint returns activities that belong 
		 * to the specified gift card. Otherwise, the endpoint returns all gift card activities for 
		 * the seller.
		 * @param {string} type If you provide a type, the endpoint returns gift card activities of this type. 
		 * Otherwise, the endpoint returns all types of gift card activities.
		 * @param {string} location_id If you provide a location ID, the endpoint returns gift card activities for that location. 
		 * Otherwise, the endpoint returns gift card activities for all locations.
		 * @param {string} begin_time The timestamp for the beginning of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time minus one year.
		 * @param {string} end_time The timestamp for the end of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time.
		 * @param {number} limit If you provide a limit value, the endpoint returns the specified number 
		 * of results (or less) per page. A maximum value is 100. The default value is 50.
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * If you do not provide the cursor, the call returns the first page of the results.
		 * @param {string} sort_order The order in which the endpoint returns the activities, based on `created_at`.
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 * @return {ListGiftCardActivitiesResponse} Success
		 */
		ListGiftCardActivities(gift_card_id: string | null | undefined, type: string | null | undefined, location_id: string | null | undefined, begin_time: string | null | undefined, end_time: string | null | undefined, limit: number | null | undefined, cursor: string | null | undefined, sort_order: string | null | undefined): Observable<ListGiftCardActivitiesResponse> {
			return this.http.get<ListGiftCardActivitiesResponse>(this.baseUri + 'v2/gift-cards/activities?gift_card_id=' + (gift_card_id == null ? '' : encodeURIComponent(gift_card_id)) + '&type=' + (type == null ? '' : encodeURIComponent(type)) + '&location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)), {});
		}

		/**
		 * CreateGiftCardActivity
		 * Creates a gift card activity. For more information, see
		 * [GiftCardActivity](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#giftcardactivity) and
		 * [Using activated gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#using-activated-gift-cards).
		 * Post v2/gift-cards/activities
		 * @param {CreateGiftCardActivityRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateGiftCardActivityResponse} Success
		 */
		CreateGiftCardActivity(requestBody: CreateGiftCardActivityRequest): Observable<CreateGiftCardActivityResponse> {
			return this.http.post<CreateGiftCardActivityResponse>(this.baseUri + 'v2/gift-cards/activities', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveGiftCardFromGAN
		 * Retrieves a gift card using the gift card account number (GAN).
		 * Post v2/gift-cards/from-gan
		 * @param {RetrieveGiftCardFromGANRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {RetrieveGiftCardFromGANResponse} Success
		 */
		RetrieveGiftCardFromGAN(requestBody: RetrieveGiftCardFromGANRequest): Observable<RetrieveGiftCardFromGANResponse> {
			return this.http.post<RetrieveGiftCardFromGANResponse>(this.baseUri + 'v2/gift-cards/from-gan', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveGiftCardFromNonce
		 * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
		 * Post v2/gift-cards/from-nonce
		 * @param {RetrieveGiftCardFromNonceRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {RetrieveGiftCardFromNonceResponse} Success
		 */
		RetrieveGiftCardFromNonce(requestBody: RetrieveGiftCardFromNonceRequest): Observable<RetrieveGiftCardFromNonceResponse> {
			return this.http.post<RetrieveGiftCardFromNonceResponse>(this.baseUri + 'v2/gift-cards/from-nonce', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * LinkCustomerToGiftCard
		 * Links a customer to a gift card
		 * Post v2/gift-cards/{gift_card_id}/link-customer
		 * @param {string} gift_card_id The ID of the gift card to link.
		 * @param {LinkCustomerToGiftCardRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {LinkCustomerToGiftCardResponse} Success
		 */
		LinkCustomerToGiftCard(gift_card_id: string, requestBody: LinkCustomerToGiftCardRequest): Observable<LinkCustomerToGiftCardResponse> {
			return this.http.post<LinkCustomerToGiftCardResponse>(this.baseUri + 'v2/gift-cards/' + (gift_card_id == null ? '' : encodeURIComponent(gift_card_id)) + '/link-customer', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * UnlinkCustomerFromGiftCard
		 * Unlinks a customer from a gift card
		 * Post v2/gift-cards/{gift_card_id}/unlink-customer
		 * @param {UnlinkCustomerFromGiftCardRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UnlinkCustomerFromGiftCardResponse} Success
		 */
		UnlinkCustomerFromGiftCard(gift_card_id: string, requestBody: UnlinkCustomerFromGiftCardRequest): Observable<UnlinkCustomerFromGiftCardResponse> {
			return this.http.post<UnlinkCustomerFromGiftCardResponse>(this.baseUri + 'v2/gift-cards/' + (gift_card_id == null ? '' : encodeURIComponent(gift_card_id)) + '/unlink-customer', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveGiftCard
		 * Retrieves a gift card using its ID.
		 * Get v2/gift-cards/{id}
		 * @param {string} id The ID of the gift card to retrieve.
		 * @return {RetrieveGiftCardResponse} Success
		 */
		RetrieveGiftCard(id: string): Observable<RetrieveGiftCardResponse> {
			return this.http.get<RetrieveGiftCardResponse>(this.baseUri + 'v2/gift-cards/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * DeprecatedRetrieveInventoryAdjustment
		 * Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL
		 * is updated to conform to the standard convention.
		 * Get v2/inventory/adjustment/{adjustment_id}
		 * @param {string} adjustment_id ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve.
		 * @return {RetrieveInventoryAdjustmentResponse} Success
		 */
		DeprecatedRetrieveInventoryAdjustment(adjustment_id: string): Observable<RetrieveInventoryAdjustmentResponse> {
			return this.http.get<RetrieveInventoryAdjustmentResponse>(this.baseUri + 'v2/inventory/adjustment/' + (adjustment_id == null ? '' : encodeURIComponent(adjustment_id)), {});
		}

		/**
		 * RetrieveInventoryAdjustment
		 * Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object
		 * with the provided `adjustment_id`.
		 * Get v2/inventory/adjustments/{adjustment_id}
		 * @param {string} adjustment_id ID of the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) to retrieve.
		 * @return {RetrieveInventoryAdjustmentResponse} Success
		 */
		RetrieveInventoryAdjustment(adjustment_id: string): Observable<RetrieveInventoryAdjustmentResponse> {
			return this.http.get<RetrieveInventoryAdjustmentResponse>(this.baseUri + 'v2/inventory/adjustments/' + (adjustment_id == null ? '' : encodeURIComponent(adjustment_id)), {});
		}

		/**
		 * DeprecatedBatchChangeInventory
		 * Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL
		 * is updated to conform to the standard convention.
		 * Post v2/inventory/batch-change
		 * @param {BatchChangeInventoryRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchChangeInventoryResponse} Success
		 */
		DeprecatedBatchChangeInventory(requestBody: BatchChangeInventoryRequest): Observable<BatchChangeInventoryResponse> {
			return this.http.post<BatchChangeInventoryResponse>(this.baseUri + 'v2/inventory/batch-change', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeprecatedBatchRetrieveInventoryChanges
		 * Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL
		 * is updated to conform to the standard convention.
		 * Post v2/inventory/batch-retrieve-changes
		 * @param {BatchRetrieveInventoryChangesRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchRetrieveInventoryChangesResponse} Success
		 */
		DeprecatedBatchRetrieveInventoryChanges(requestBody: BatchRetrieveInventoryChangesRequest): Observable<BatchRetrieveInventoryChangesResponse> {
			return this.http.post<BatchRetrieveInventoryChangesResponse>(this.baseUri + 'v2/inventory/batch-retrieve-changes', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeprecatedBatchRetrieveInventoryCounts
		 * Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL
		 * is updated to conform to the standard convention.
		 * Post v2/inventory/batch-retrieve-counts
		 * @param {BatchRetrieveInventoryCountsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchRetrieveInventoryCountsResponse} Success
		 */
		DeprecatedBatchRetrieveInventoryCounts(requestBody: BatchRetrieveInventoryCountsRequest): Observable<BatchRetrieveInventoryCountsResponse> {
			return this.http.post<BatchRetrieveInventoryCountsResponse>(this.baseUri + 'v2/inventory/batch-retrieve-counts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BatchChangeInventory
		 * Applies adjustments and counts to the provided item quantities.
		 * On success: returns the current calculated counts for all objects
		 * referenced in the request.
		 * On failure: returns a list of related errors.
		 * Post v2/inventory/changes/batch-create
		 * @param {BatchChangeInventoryRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchChangeInventoryResponse} Success
		 */
		BatchChangeInventory(requestBody: BatchChangeInventoryRequest): Observable<BatchChangeInventoryResponse> {
			return this.http.post<BatchChangeInventoryResponse>(this.baseUri + 'v2/inventory/changes/batch-create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BatchRetrieveInventoryChanges
		 * Returns historical physical counts and adjustments based on the
		 * provided filter criteria.
		 * Results are paginated and sorted in ascending order according their
		 * `occurred_at` timestamp (oldest first).
		 * BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
		 * that cannot be handled by other, simpler endpoints.
		 * Post v2/inventory/changes/batch-retrieve
		 * @param {BatchRetrieveInventoryChangesRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchRetrieveInventoryChangesResponse} Success
		 */
		BatchRetrieveInventoryChanges(requestBody: BatchRetrieveInventoryChangesRequest): Observable<BatchRetrieveInventoryChangesResponse> {
			return this.http.post<BatchRetrieveInventoryChangesResponse>(this.baseUri + 'v2/inventory/changes/batch-retrieve', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BatchRetrieveInventoryCounts
		 * Returns current counts for the provided
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested
		 * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
		 * Results are paginated and sorted in descending order according to their
		 * `calculated_at` timestamp (newest first).
		 * When `updated_after` is specified, only counts that have changed since that
		 * time (based on the server timestamp for the most recent change) are
		 * returned. This allows clients to perform a "sync" operation, for example
		 * in response to receiving a Webhook notification.
		 * Post v2/inventory/counts/batch-retrieve
		 * @param {BatchRetrieveInventoryCountsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchRetrieveInventoryCountsResponse} Success
		 */
		BatchRetrieveInventoryCounts(requestBody: BatchRetrieveInventoryCountsRequest): Observable<BatchRetrieveInventoryCountsResponse> {
			return this.http.post<BatchRetrieveInventoryCountsResponse>(this.baseUri + 'v2/inventory/counts/batch-retrieve', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeprecatedRetrieveInventoryPhysicalCount
		 * Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL
		 * is updated to conform to the standard convention.
		 * Get v2/inventory/physical-count/{physical_count_id}
		 * @param {string} physical_count_id ID of the
		 * [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve.
		 * @return {RetrieveInventoryPhysicalCountResponse} Success
		 */
		DeprecatedRetrieveInventoryPhysicalCount(physical_count_id: string): Observable<RetrieveInventoryPhysicalCountResponse> {
			return this.http.get<RetrieveInventoryPhysicalCountResponse>(this.baseUri + 'v2/inventory/physical-count/' + (physical_count_id == null ? '' : encodeURIComponent(physical_count_id)), {});
		}

		/**
		 * RetrieveInventoryPhysicalCount
		 * Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount)
		 * object with the provided `physical_count_id`.
		 * Get v2/inventory/physical-counts/{physical_count_id}
		 * @param {string} physical_count_id ID of the
		 * [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to retrieve.
		 * @return {RetrieveInventoryPhysicalCountResponse} Success
		 */
		RetrieveInventoryPhysicalCount(physical_count_id: string): Observable<RetrieveInventoryPhysicalCountResponse> {
			return this.http.get<RetrieveInventoryPhysicalCountResponse>(this.baseUri + 'v2/inventory/physical-counts/' + (physical_count_id == null ? '' : encodeURIComponent(physical_count_id)), {});
		}

		/**
		 * RetrieveInventoryTransfer
		 * Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object
		 * with the provided `transfer_id`.
		 * Get v2/inventory/transfers/{transfer_id}
		 * @param {string} transfer_id ID of the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) to retrieve.
		 * @return {RetrieveInventoryTransferResponse} Success
		 */
		RetrieveInventoryTransfer(transfer_id: string): Observable<RetrieveInventoryTransferResponse> {
			return this.http.get<RetrieveInventoryTransferResponse>(this.baseUri + 'v2/inventory/transfers/' + (transfer_id == null ? '' : encodeURIComponent(transfer_id)), {});
		}

		/**
		 * RetrieveInventoryCount
		 * Retrieves the current calculated stock count for a given
		 * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of
		 * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted.
		 * For more sophisticated queries, use a batch endpoint.
		 * Get v2/inventory/{catalog_object_id}
		 * @param {string} catalog_object_id ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve.
		 * @param {string} location_ids The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		 * list. An empty list queries all locations.
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 * @return {RetrieveInventoryCountResponse} Success
		 */
		RetrieveInventoryCount(catalog_object_id: string, location_ids: string | null | undefined, cursor: string | null | undefined): Observable<RetrieveInventoryCountResponse> {
			return this.http.get<RetrieveInventoryCountResponse>(this.baseUri + 'v2/inventory/' + (catalog_object_id == null ? '' : encodeURIComponent(catalog_object_id)) + '&location_ids=' + (location_ids == null ? '' : encodeURIComponent(location_ids)) + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * RetrieveInventoryChanges
		 * Returns a set of physical counts and inventory adjustments for the
		 * provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested
		 * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
		 * You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes)
		 * and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.
		 * Results are paginated and sorted in descending order according to their
		 * `occurred_at` timestamp (newest first).
		 * There are no limits on how far back the caller can page. This endpoint can be
		 * used to display recent changes for a specific item. For more
		 * sophisticated queries, use a batch endpoint.
		 * Get v2/inventory/{catalog_object_id}/changes
		 * @param {string} catalog_object_id ID of the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) to retrieve.
		 * @param {string} location_ids The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
		 * list. An empty list queries all locations.
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
		 * @return {RetrieveInventoryChangesResponse} Success
		 */
		RetrieveInventoryChanges(catalog_object_id: string, location_ids: string | null | undefined, cursor: string | null | undefined): Observable<RetrieveInventoryChangesResponse> {
			return this.http.get<RetrieveInventoryChangesResponse>(this.baseUri + 'v2/inventory/' + (catalog_object_id == null ? '' : encodeURIComponent(catalog_object_id)) + '/changes&location_ids=' + (location_ids == null ? '' : encodeURIComponent(location_ids)) + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * ListInvoices
		 * Returns a list of invoices for a given location. The response
		 * is paginated. If truncated, the response includes a `cursor` that you
		 * use in a subsequent request to retrieve the next set of invoices.
		 * Get v2/invoices
		 * @param {string} location_id The ID of the location for which to list invoices.
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint. 
		 * Provide this cursor to retrieve the next set of results for your original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @param {number} limit The maximum number of invoices to return (200 is the maximum `limit`). 
		 * If not provided, the server uses a default limit of 100 invoices.
		 * @return {ListInvoicesResponse} Success
		 */
		ListInvoices(location_id: string, cursor: string | null | undefined, limit: number | null | undefined): Observable<ListInvoicesResponse> {
			return this.http.get<ListInvoicesResponse>(this.baseUri + 'v2/invoices?location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * CreateInvoice
		 * Creates a draft [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice)
		 * for an order created using the Orders API.
		 * A draft invoice remains in your account and no action is taken.
		 * You must publish the invoice before Square can process it (send it to the customer's email address or charge the customer’s card on file).
		 * Post v2/invoices
		 * @param {CreateInvoiceRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateInvoiceResponse} Success
		 */
		CreateInvoice(requestBody: CreateInvoiceRequest): Observable<CreateInvoiceResponse> {
			return this.http.post<CreateInvoiceResponse>(this.baseUri + 'v2/invoices', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchInvoices
		 * Searches for invoices from a location specified in
		 * the filter. You can optionally specify customers in the filter for whom to
		 * retrieve invoices. In the current implementation, you can only specify one location and
		 * optionally one customer.
		 * The response is paginated. If truncated, the response includes a `cursor`
		 * that you use in a subsequent request to retrieve the next set of invoices.
		 * Post v2/invoices/search
		 * @param {SearchInvoicesRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchInvoicesResponse} Success
		 */
		SearchInvoices(requestBody: SearchInvoicesRequest): Observable<SearchInvoicesResponse> {
			return this.http.post<SearchInvoicesResponse>(this.baseUri + 'v2/invoices/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteInvoice
		 * Deletes the specified invoice. When an invoice is deleted, the
		 * associated order status changes to CANCELED. You can only delete a draft
		 * invoice (you cannot delete a published invoice, including one that is scheduled for processing).
		 * Delete v2/invoices/{invoice_id}
		 * @param {string} invoice_id The ID of the invoice to delete.
		 * @param {number} version The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to delete.
		 * If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or 
		 * [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
		 * @return {DeleteInvoiceResponse} Success
		 */
		DeleteInvoice(invoice_id: string, version: number | null | undefined): Observable<DeleteInvoiceResponse> {
			return this.http.delete<DeleteInvoiceResponse>(this.baseUri + 'v2/invoices/' + (invoice_id == null ? '' : encodeURIComponent(invoice_id)) + '&version=' + version, {});
		}

		/**
		 * GetInvoice
		 * Retrieves an invoice by invoice ID.
		 * Get v2/invoices/{invoice_id}
		 * @param {string} invoice_id The ID of the invoice to retrieve.
		 * @return {GetInvoiceResponse} Success
		 */
		GetInvoice(invoice_id: string): Observable<GetInvoiceResponse> {
			return this.http.get<GetInvoiceResponse>(this.baseUri + 'v2/invoices/' + (invoice_id == null ? '' : encodeURIComponent(invoice_id)), {});
		}

		/**
		 * UpdateInvoice
		 * Updates an invoice by modifying fields, clearing fields, or both. For most updates, you can use a sparse
		 * `Invoice` object to add fields or change values and use the `fields_to_clear` field to specify fields to clear.
		 * However, some restrictions apply. For example, you cannot change the `order_id` or `location_id` field and you
		 * must provide the complete `custom_fields` list to update a custom field. Published invoices have additional restrictions.
		 * Put v2/invoices/{invoice_id}
		 * @param {string} invoice_id The ID of the invoice to update.
		 * @param {UpdateInvoiceRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateInvoiceResponse} Success
		 */
		UpdateInvoice(invoice_id: string, requestBody: UpdateInvoiceRequest): Observable<UpdateInvoiceResponse> {
			return this.http.put<UpdateInvoiceResponse>(this.baseUri + 'v2/invoices/' + (invoice_id == null ? '' : encodeURIComponent(invoice_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CancelInvoice
		 * Cancels an invoice. The seller cannot collect payments for
		 * the canceled invoice.
		 * You cannot cancel an invoice in the `DRAFT` state or in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
		 * Post v2/invoices/{invoice_id}/cancel
		 * @param {string} invoice_id The ID of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to cancel.
		 * @param {CancelInvoiceRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CancelInvoiceResponse} Success
		 */
		CancelInvoice(invoice_id: string, requestBody: CancelInvoiceRequest): Observable<CancelInvoiceResponse> {
			return this.http.post<CancelInvoiceResponse>(this.baseUri + 'v2/invoices/' + (invoice_id == null ? '' : encodeURIComponent(invoice_id)) + '/cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * PublishInvoice
		 * Publishes the specified draft invoice.
		 * After an invoice is published, Square
		 * follows up based on the invoice configuration. For example, Square
		 * sends the invoice to the customer's email address, charges the customer's card on file, or does
		 * nothing. Square also makes the invoice available on a Square-hosted invoice page.
		 * The invoice `status` also changes from `DRAFT` to a status
		 * based on the invoice configuration. For example, the status changes to `UNPAID` if
		 * Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the
		 * invoice amount.
		 * Post v2/invoices/{invoice_id}/publish
		 * @param {string} invoice_id The ID of the invoice to publish.
		 * @param {PublishInvoiceRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {PublishInvoiceResponse} Success
		 */
		PublishInvoice(invoice_id: string, requestBody: PublishInvoiceRequest): Observable<PublishInvoiceResponse> {
			return this.http.post<PublishInvoiceResponse>(this.baseUri + 'v2/invoices/' + (invoice_id == null ? '' : encodeURIComponent(invoice_id)) + '/publish', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListBreakTypes
		 * Returns a paginated list of `BreakType` instances for a business.
		 * Get v2/labor/break-types
		 * @param {string} location_id Filter the returned `BreakType` results to only those that are associated with the
		 * specified location.
		 * @param {number} limit The maximum number of `BreakType` results to return per page. The number can range between 1
		 * and 200. The default is 200.
		 * @param {string} cursor A pointer to the next page of `BreakType` results to fetch.
		 * @return {ListBreakTypesResponse} Success
		 */
		ListBreakTypes(location_id: string | null | undefined, limit: number | null | undefined, cursor: string | null | undefined): Observable<ListBreakTypesResponse> {
			return this.http.get<ListBreakTypesResponse>(this.baseUri + 'v2/labor/break-types?location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * CreateBreakType
		 * Creates a new `BreakType`.
		 * A `BreakType` is a template for creating `Break` objects.
		 * You must provide the following values in your request to this
		 * endpoint:
		 * - `location_id`
		 * - `break_name`
		 * - `expected_duration`
		 * - `is_paid`
		 * You can only have three `BreakType` instances per location. If you attempt to add a fourth
		 * `BreakType` for a location, an `INVALID_REQUEST_ERROR` "Exceeded limit of 3 breaks per location."
		 * is returned.
		 * Post v2/labor/break-types
		 * @param {CreateBreakTypeRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateBreakTypeResponse} Success
		 */
		CreateBreakType(requestBody: CreateBreakTypeRequest): Observable<CreateBreakTypeResponse> {
			return this.http.post<CreateBreakTypeResponse>(this.baseUri + 'v2/labor/break-types', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteBreakType
		 * Deletes an existing `BreakType`.
		 * A `BreakType` can be deleted even if it is referenced from a `Shift`.
		 * Delete v2/labor/break-types/{id}
		 * @param {string} id The UUID for the `BreakType` being deleted.
		 * @return {DeleteBreakTypeResponse} Success
		 */
		DeleteBreakType(id: string): Observable<DeleteBreakTypeResponse> {
			return this.http.delete<DeleteBreakTypeResponse>(this.baseUri + 'v2/labor/break-types/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * GetBreakType
		 * Returns a single `BreakType` specified by `id`.
		 * Get v2/labor/break-types/{id}
		 * @param {string} id The UUID for the `BreakType` being retrieved.
		 * @return {GetBreakTypeResponse} Success
		 */
		GetBreakType(id: string): Observable<GetBreakTypeResponse> {
			return this.http.get<GetBreakTypeResponse>(this.baseUri + 'v2/labor/break-types/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * UpdateBreakType
		 * Updates an existing `BreakType`.
		 * Put v2/labor/break-types/{id}
		 * @param {string} id  The UUID for the `BreakType` being updated.
		 * @param {UpdateBreakTypeRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateBreakTypeResponse} Success
		 */
		UpdateBreakType(id: string, requestBody: UpdateBreakTypeRequest): Observable<UpdateBreakTypeResponse> {
			return this.http.put<UpdateBreakTypeResponse>(this.baseUri + 'v2/labor/break-types/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListEmployeeWages
		 * Returns a paginated list of `EmployeeWage` instances for a business.
		 * Get v2/labor/employee-wages
		 * @param {string} employee_id Filter the returned wages to only those that are associated with the specified employee.
		 * @param {number} limit The maximum number of `EmployeeWage` results to return per page. The number can range between
		 * 1 and 200. The default is 200.
		 * @param {string} cursor A pointer to the next page of `EmployeeWage` results to fetch.
		 * @return {ListEmployeeWagesResponse} Success
		 */
		ListEmployeeWages(employee_id: string | null | undefined, limit: number | null | undefined, cursor: string | null | undefined): Observable<ListEmployeeWagesResponse> {
			return this.http.get<ListEmployeeWagesResponse>(this.baseUri + 'v2/labor/employee-wages?employee_id=' + (employee_id == null ? '' : encodeURIComponent(employee_id)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * GetEmployeeWage
		 * Returns a single `EmployeeWage` specified by `id`.
		 * Get v2/labor/employee-wages/{id}
		 * @param {string} id The UUID for the `EmployeeWage` being retrieved.
		 * @return {GetEmployeeWageResponse} Success
		 */
		GetEmployeeWage(id: string): Observable<GetEmployeeWageResponse> {
			return this.http.get<GetEmployeeWageResponse>(this.baseUri + 'v2/labor/employee-wages/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * CreateShift
		 * Creates a new `Shift`.
		 * A `Shift` represents a complete workday for a single employee.
		 * You must provide the following values in your request to this
		 * endpoint:
		 * - `location_id`
		 * - `employee_id`
		 * - `start_at`
		 * An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:
		 * - The `status` of the new `Shift` is `OPEN` and the employee has another
		 * shift with an `OPEN` status.
		 * - The `start_at` date is in the future.
		 * - The `start_at` or `end_at` date overlaps another shift for the same employee.
		 * - The `Break` instances are set in the request and a break `start_at`
		 * is before the `Shift.start_at`, a break `end_at` is after
		 * the `Shift.end_at`, or both.
		 * Post v2/labor/shifts
		 * @param {CreateShiftRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateShiftResponse} Success
		 */
		CreateShift(requestBody: CreateShiftRequest): Observable<CreateShiftResponse> {
			return this.http.post<CreateShiftResponse>(this.baseUri + 'v2/labor/shifts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchShifts
		 * Returns a paginated list of `Shift` records for a business.
		 * The list to be returned can be filtered by:
		 * - Location IDs.
		 * - Employee IDs.
		 * - Shift status (`OPEN` and `CLOSED`).
		 * - Shift start.
		 * - Shift end.
		 * - Workday details.
		 * The list can be sorted by:
		 * - `start_at`.
		 * - `end_at`.
		 * - `created_at`.
		 * - `updated_at`.
		 * Post v2/labor/shifts/search
		 * @param {SearchShiftsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchShiftsResponse} Success
		 */
		SearchShifts(requestBody: SearchShiftsRequest): Observable<SearchShiftsResponse> {
			return this.http.post<SearchShiftsResponse>(this.baseUri + 'v2/labor/shifts/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteShift
		 * Deletes a `Shift`.
		 * Delete v2/labor/shifts/{id}
		 * @param {string} id The UUID for the `Shift` being deleted.
		 * @return {DeleteShiftResponse} Success
		 */
		DeleteShift(id: string): Observable<DeleteShiftResponse> {
			return this.http.delete<DeleteShiftResponse>(this.baseUri + 'v2/labor/shifts/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * GetShift
		 * Returns a single `Shift` specified by `id`.
		 * Get v2/labor/shifts/{id}
		 * @param {string} id The UUID for the `Shift` being retrieved.
		 * @return {GetShiftResponse} Success
		 */
		GetShift(id: string): Observable<GetShiftResponse> {
			return this.http.get<GetShiftResponse>(this.baseUri + 'v2/labor/shifts/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * UpdateShift
		 * Updates an existing `Shift`.
		 * When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have
		 * the `end_at` property set to a valid RFC-3339 datetime string.
		 * When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at`
		 * set on each `Break`.
		 * Put v2/labor/shifts/{id}
		 * @param {string} id The ID of the object being updated.
		 * @param {UpdateShiftRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateShiftResponse} Success
		 */
		UpdateShift(id: string, requestBody: UpdateShiftRequest): Observable<UpdateShiftResponse> {
			return this.http.put<UpdateShiftResponse>(this.baseUri + 'v2/labor/shifts/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListTeamMemberWages
		 * Returns a paginated list of `TeamMemberWage` instances for a business.
		 * Get v2/labor/team-member-wages
		 * @param {string} team_member_id Filter the returned wages to only those that are associated with the
		 * specified team member.
		 * @param {number} limit The maximum number of `TeamMemberWage` results to return per page. The number can range between
		 * 1 and 200. The default is 200.
		 * @param {string} cursor A pointer to the next page of `EmployeeWage` results to fetch.
		 * @return {ListTeamMemberWagesResponse} Success
		 */
		ListTeamMemberWages(team_member_id: string | null | undefined, limit: number | null | undefined, cursor: string | null | undefined): Observable<ListTeamMemberWagesResponse> {
			return this.http.get<ListTeamMemberWagesResponse>(this.baseUri + 'v2/labor/team-member-wages?team_member_id=' + (team_member_id == null ? '' : encodeURIComponent(team_member_id)) + '&limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * GetTeamMemberWage
		 * Returns a single `TeamMemberWage` specified by `id `.
		 * Get v2/labor/team-member-wages/{id}
		 * @param {string} id The UUID for the `TeamMemberWage` being retrieved.
		 * @return {GetTeamMemberWageResponse} Success
		 */
		GetTeamMemberWage(id: string): Observable<GetTeamMemberWageResponse> {
			return this.http.get<GetTeamMemberWageResponse>(this.baseUri + 'v2/labor/team-member-wages/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * ListWorkweekConfigs
		 * Returns a list of `WorkweekConfig` instances for a business.
		 * Get v2/labor/workweek-configs
		 * @param {number} limit The maximum number of `WorkweekConfigs` results to return per page.
		 * @param {string} cursor A pointer to the next page of `WorkweekConfig` results to fetch.
		 * @return {ListWorkweekConfigsResponse} Success
		 */
		ListWorkweekConfigs(limit: number | null | undefined, cursor: string | null | undefined): Observable<ListWorkweekConfigsResponse> {
			return this.http.get<ListWorkweekConfigsResponse>(this.baseUri + 'v2/labor/workweek-configs?limit=' + limit + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * UpdateWorkweekConfig
		 * Updates a `WorkweekConfig`.
		 * Put v2/labor/workweek-configs/{id}
		 * @param {string} id The UUID for the `WorkweekConfig` object being updated.
		 * @param {UpdateWorkweekConfigRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateWorkweekConfigResponse} Success
		 */
		UpdateWorkweekConfig(id: string, requestBody: UpdateWorkweekConfigRequest): Observable<UpdateWorkweekConfigResponse> {
			return this.http.put<UpdateWorkweekConfigResponse>(this.baseUri + 'v2/labor/workweek-configs/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListLocations
		 * Provides information of all locations of a business.
		 * Many Square API endpoints require a `location_id` parameter.
		 * The `id` field of the [`Location`](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) objects returned by this
		 * endpoint correspond to that `location_id` parameter.
		 * Get v2/locations
		 * @return {ListLocationsResponse} Success
		 */
		ListLocations(): Observable<ListLocationsResponse> {
			return this.http.get<ListLocationsResponse>(this.baseUri + 'v2/locations', {});
		}

		/**
		 * CreateLocation
		 * Creates a location.
		 * Post v2/locations
		 * @param {CreateLocationRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateLocationResponse} Success
		 */
		CreateLocation(requestBody: CreateLocationRequest): Observable<CreateLocationResponse> {
			return this.http.post<CreateLocationResponse>(this.baseUri + 'v2/locations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveLocation
		 * Retrieves details of a location. You can specify "main"
		 * as the location ID to retrieve details of the
		 * main location.
		 * Get v2/locations/{location_id}
		 * @param {string} location_id The ID of the location to retrieve. If you specify the string "main",
		 * then the endpoint returns the main location.
		 * @return {RetrieveLocationResponse} Success
		 */
		RetrieveLocation(location_id: string): Observable<RetrieveLocationResponse> {
			return this.http.get<RetrieveLocationResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)), {});
		}

		/**
		 * UpdateLocation
		 * Updates a location.
		 * Put v2/locations/{location_id}
		 * @param {string} location_id The ID of the location to update.
		 * @param {UpdateLocationRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateLocationResponse} Success
		 */
		UpdateLocation(location_id: string, requestBody: UpdateLocationRequest): Observable<UpdateLocationResponse> {
			return this.http.put<UpdateLocationResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CreateCheckout
		 * Links a `checkoutId` to a `checkout_page_url` that customers are
		 * directed to in order to provide their payment information using a
		 * payment processing workflow hosted on connect.squareup.com.
		 * Post v2/locations/{location_id}/checkouts
		 * @param {string} location_id The ID of the business location to associate the checkout with.
		 * @param {CreateCheckoutRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateCheckoutResponse} Success
		 */
		CreateCheckout(location_id: string, requestBody: CreateCheckoutRequest): Observable<CreateCheckoutResponse> {
			return this.http.post<CreateCheckoutResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/checkouts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListRefunds
		 * Lists refunds for one of a business's locations.
		 * In addition to full or partial tender refunds processed through Square APIs,
		 * refunds may result from itemized returns or exchanges through Square's
		 * Point of Sale applications.
		 * Refunds with a `status` of `PENDING` are not currently included in this
		 * endpoint's response.
		 * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
		 * Get v2/locations/{location_id}/refunds
		 * @param {string} location_id The ID of the location to list refunds for.
		 * @param {string} begin_time The beginning of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time minus one year.
		 * @param {string} end_time The end of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time.
		 * @param {string} sort_order The order in which results are listed in the response (`ASC` for
		 * oldest first, `DESC` for newest first).
		 * Default value: `DESC`
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 * @return {ListRefundsResponse} Success
		 */
		TransactionsGetByLocation_idAndBegin_timeAndEnd_timeAndSort_orderAndCursor(location_id: string, begin_time: string | null | undefined, end_time: string | null | undefined, sort_order: string | null | undefined, cursor: string | null | undefined): Observable<ListRefundsResponse> {
			return this.http.get<ListRefundsResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/refunds&begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)) + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * ListTransactions
		 * Lists transactions for a particular location.
		 * Transactions include payment information from sales and exchanges and refund
		 * information from returns and exchanges.
		 * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
		 * Get v2/locations/{location_id}/transactions
		 * @param {string} location_id The ID of the location to list transactions for.
		 * @param {string} begin_time The beginning of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time minus one year.
		 * @param {string} end_time The end of the requested reporting period, in RFC 3339 format.
		 * See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
		 * Default value: The current time.
		 * @param {string} sort_order The order in which results are listed in the response (`ASC` for
		 * oldest first, `DESC` for newest first).
		 * Default value: `DESC`
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for your original query.
		 * See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
		 * @return {ListTransactionsResponse} Success
		 */
		ListTransactions(location_id: string, begin_time: string | null | undefined, end_time: string | null | undefined, sort_order: string | null | undefined, cursor: string | null | undefined): Observable<ListTransactionsResponse> {
			return this.http.get<ListTransactionsResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/transactions&begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)) + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)), {});
		}

		/**
		 * Charge
		 * Charges a card represented by a card nonce or a customer's card on file.
		 * Your request to this endpoint must include _either_:
		 * - A value for the `card_nonce` parameter (to charge a card payment token generated
		 * with the Web Payments SDK)
		 * - Values for the `customer_card_id` and `customer_id` parameters (to charge
		 * a customer's card on file)
		 * In order for an eCommerce payment to potentially qualify for
		 * [Square chargeback protection](https://squareup.com/help/article/5394), you
		 * _must_ provide values for the following parameters in your request:
		 * - `buyer_email_address`
		 * - At least one of `billing_address` or `shipping_address`
		 * When this response is returned, the amount of Square's processing fee might not yet be
		 * calculated. To obtain the processing fee, wait about ten seconds and call
		 * [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction). See the `processing_fee_money`
		 * field of each [Tender included](https://developer.squareup.com/reference/square_2021-08-18/objects/Tender) in the transaction.
		 * Post v2/locations/{location_id}/transactions
		 * @param {string} location_id The ID of the location to associate the created transaction with.
		 * @param {ChargeRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {ChargeResponse} Success
		 */
		Charge(location_id: string, requestBody: ChargeRequest): Observable<ChargeResponse> {
			return this.http.post<ChargeResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/transactions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveTransaction
		 * Retrieves details for a single transaction.
		 * Get v2/locations/{location_id}/transactions/{transaction_id}
		 * @param {string} location_id The ID of the transaction's associated location.
		 * @param {string} transaction_id The ID of the transaction to retrieve.
		 * @return {RetrieveTransactionResponse} Success
		 */
		RetrieveTransaction(location_id: string, transaction_id: string): Observable<RetrieveTransactionResponse> {
			return this.http.get<RetrieveTransactionResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/transactions/' + (transaction_id == null ? '' : encodeURIComponent(transaction_id)), {});
		}

		/**
		 * CaptureTransaction
		 * Captures a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
		 * endpoint with a `delay_capture` value of `true`.
		 * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
		 * for more information.
		 * Post v2/locations/{location_id}/transactions/{transaction_id}/capture
		 * @return {CaptureTransactionResponse} Success
		 */
		CaptureTransaction(location_id: string, transaction_id: string): Observable<CaptureTransactionResponse> {
			return this.http.post<CaptureTransactionResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/transactions/' + (transaction_id == null ? '' : encodeURIComponent(transaction_id)) + '/capture', null, {});
		}

		/**
		 * CreateRefund
		 * Initiates a refund for a previously charged tender.
		 * You must issue a refund within 120 days of the associated payment. See
		 * [this article](https://squareup.com/help/us/en/article/5060) for more information
		 * on refund behavior.
		 * NOTE: Card-present transactions with Interac credit cards **cannot be
		 * refunded using the Connect API**. Interac transactions must refunded
		 * in-person (e.g., dipping the card using POS app).
		 * Post v2/locations/{location_id}/transactions/{transaction_id}/refund
		 * @param {string} location_id The ID of the original transaction's associated location.
		 * @param {string} transaction_id The ID of the original transaction that includes the tender to refund.
		 * @param {CreateRefundRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateRefundResponse} Success
		 */
		TransactionsPostByLocation_idAndTransaction_id(location_id: string, transaction_id: string, requestBody: CreateRefundRequest): Observable<CreateRefundResponse> {
			return this.http.post<CreateRefundResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/transactions/' + (transaction_id == null ? '' : encodeURIComponent(transaction_id)) + '/refund', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * VoidTransaction
		 * Cancels a transaction that was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
		 * endpoint with a `delay_capture` value of `true`.
		 * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
		 * for more information.
		 * Post v2/locations/{location_id}/transactions/{transaction_id}/void
		 * @return {VoidTransactionResponse} Success
		 */
		VoidTransaction(location_id: string, transaction_id: string): Observable<VoidTransactionResponse> {
			return this.http.post<VoidTransactionResponse>(this.baseUri + 'v2/locations/' + (location_id == null ? '' : encodeURIComponent(location_id)) + '/transactions/' + (transaction_id == null ? '' : encodeURIComponent(transaction_id)) + '/void', null, {});
		}

		/**
		 * CreateLoyaltyAccount
		 * Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
		 * Post v2/loyalty/accounts
		 * @param {CreateLoyaltyAccountRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateLoyaltyAccountResponse} Success
		 */
		CreateLoyaltyAccount(requestBody: CreateLoyaltyAccountRequest): Observable<CreateLoyaltyAccountResponse> {
			return this.http.post<CreateLoyaltyAccountResponse>(this.baseUri + 'v2/loyalty/accounts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchLoyaltyAccounts
		 * Searches for loyalty accounts in a loyalty program.
		 * You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.
		 * Search results are sorted by `created_at` in ascending order.
		 * Post v2/loyalty/accounts/search
		 * @param {SearchLoyaltyAccountsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchLoyaltyAccountsResponse} Success
		 */
		SearchLoyaltyAccounts(requestBody: SearchLoyaltyAccountsRequest): Observable<SearchLoyaltyAccountsResponse> {
			return this.http.post<SearchLoyaltyAccountsResponse>(this.baseUri + 'v2/loyalty/accounts/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveLoyaltyAccount
		 * Retrieves a loyalty account.
		 * Get v2/loyalty/accounts/{account_id}
		 * @param {string} account_id The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to retrieve.
		 * @return {RetrieveLoyaltyAccountResponse} Success
		 */
		RetrieveLoyaltyAccount(account_id: string): Observable<RetrieveLoyaltyAccountResponse> {
			return this.http.get<RetrieveLoyaltyAccountResponse>(this.baseUri + 'v2/loyalty/accounts/' + (account_id == null ? '' : encodeURIComponent(account_id)), {});
		}

		/**
		 * AccumulateLoyaltyPoints
		 * Adds points to a loyalty account.
		 * - If you are using the Orders API to manage orders, you only provide the `order_id`.
		 * The endpoint reads the order to compute points to add to the buyer's account.
		 * - If you are not using the Orders API to manage orders,
		 * you first perform a client-side computation to compute the points.
		 * For spend-based and visit-based programs, you can first call
		 * [CalculateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/calculate-loyalty-points) to compute the points
		 * that you provide to this endpoint.
		 * __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs.
		 * For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
		 * Post v2/loyalty/accounts/{account_id}/accumulate
		 * @param {string} account_id The [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) ID to which to add the points.
		 * @param {AccumulateLoyaltyPointsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {AccumulateLoyaltyPointsResponse} Success
		 */
		AccumulateLoyaltyPoints(account_id: string, requestBody: AccumulateLoyaltyPointsRequest): Observable<AccumulateLoyaltyPointsResponse> {
			return this.http.post<AccumulateLoyaltyPointsResponse>(this.baseUri + 'v2/loyalty/accounts/' + (account_id == null ? '' : encodeURIComponent(account_id)) + '/accumulate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * AdjustLoyaltyPoints
		 * Adds points to or subtracts points from a buyer's account.
		 * Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
		 * [AccumulateLoyaltyPoints](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/accumulate-loyalty-points)
		 * to add points when a buyer pays for the purchase.
		 * Post v2/loyalty/accounts/{account_id}/adjust
		 * @param {string} account_id The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which to adjust the points.
		 * @param {AdjustLoyaltyPointsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {AdjustLoyaltyPointsResponse} Success
		 */
		AdjustLoyaltyPoints(account_id: string, requestBody: AdjustLoyaltyPointsRequest): Observable<AdjustLoyaltyPointsResponse> {
			return this.http.post<AdjustLoyaltyPointsResponse>(this.baseUri + 'v2/loyalty/accounts/' + (account_id == null ? '' : encodeURIComponent(account_id)) + '/adjust', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchLoyaltyEvents
		 * Searches for loyalty events.
		 * A Square loyalty program maintains a ledger of events that occur during the lifetime of a
		 * buyer's loyalty account. Each change in the point balance
		 * (for example, points earned, points redeemed, and points expired) is
		 * recorded in the ledger. Using this endpoint, you can search the ledger for events.
		 * Search results are sorted by `created_at` in descending order.
		 * Post v2/loyalty/events/search
		 * @param {SearchLoyaltyEventsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchLoyaltyEventsResponse} Success
		 */
		SearchLoyaltyEvents(requestBody: SearchLoyaltyEventsRequest): Observable<SearchLoyaltyEventsResponse> {
			return this.http.post<SearchLoyaltyEventsResponse>(this.baseUri + 'v2/loyalty/events/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListLoyaltyPrograms
		 * Returns a list of loyalty programs in the seller's account.
		 * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
		 * Replaced with [RetrieveLoyaltyProgram](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-program) when used with the keyword `main`.
		 * Get v2/loyalty/programs
		 * @return {ListLoyaltyProgramsResponse} Success
		 */
		ListLoyaltyPrograms(): Observable<ListLoyaltyProgramsResponse> {
			return this.http.get<ListLoyaltyProgramsResponse>(this.baseUri + 'v2/loyalty/programs', {});
		}

		/**
		 * RetrieveLoyaltyProgram
		 * Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword `main`.
		 * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
		 * Get v2/loyalty/programs/{program_id}
		 * @param {string} program_id The ID of the loyalty program or the keyword `main`. Either value can be used to retrieve the single loyalty program that belongs to the seller.
		 * @return {RetrieveLoyaltyProgramResponse} Success
		 */
		RetrieveLoyaltyProgram(program_id: string): Observable<RetrieveLoyaltyProgramResponse> {
			return this.http.get<RetrieveLoyaltyProgramResponse>(this.baseUri + 'v2/loyalty/programs/' + (program_id == null ? '' : encodeURIComponent(program_id)), {});
		}

		/**
		 * CalculateLoyaltyPoints
		 * Calculates the points a purchase earns.
		 * - If you are using the Orders API to manage orders, you provide `order_id` in the request. The
		 * endpoint calculates the points by reading the order.
		 * - If you are not using the Orders API to manage orders, you provide the purchase amount in
		 * the request for the endpoint to calculate the points.
		 * An application might call this endpoint to show the points that a buyer can earn with the
		 * specific purchase.
		 * __Note:__ The country of the seller's Square account determines whether tax is included in the purchase amount when accruing points for spend-based and visit-based programs.
		 * For more information, see [Availability of Square Loyalty](https://developer.squareup.com/docs/loyalty-api/overview#loyalty-market-availability).
		 * Post v2/loyalty/programs/{program_id}/calculate
		 * @param {string} program_id The [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) ID, which defines the rules for accruing points.
		 * @param {CalculateLoyaltyPointsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CalculateLoyaltyPointsResponse} Success
		 */
		CalculateLoyaltyPoints(program_id: string, requestBody: CalculateLoyaltyPointsRequest): Observable<CalculateLoyaltyPointsResponse> {
			return this.http.post<CalculateLoyaltyPointsResponse>(this.baseUri + 'v2/loyalty/programs/' + (program_id == null ? '' : encodeURIComponent(program_id)) + '/calculate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CreateLoyaltyReward
		 * Creates a loyalty reward. In the process, the endpoint does following:
		 * - Uses the `reward_tier_id` in the request to determine the number of points
		 * to lock for this reward.
		 * - If the request includes `order_id`, it adds the reward and related discount to the order.
		 * After a reward is created, the points are locked and
		 * not available for the buyer to redeem another reward.
		 * Post v2/loyalty/rewards
		 * @param {CreateLoyaltyRewardRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateLoyaltyRewardResponse} Success
		 */
		CreateLoyaltyReward(requestBody: CreateLoyaltyRewardRequest): Observable<CreateLoyaltyRewardResponse> {
			return this.http.post<CreateLoyaltyRewardResponse>(this.baseUri + 'v2/loyalty/rewards', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchLoyaltyRewards
		 * Searches for loyalty rewards in a loyalty account.
		 * In the current implementation, the endpoint supports search by the reward `status`.
		 * If you know a reward ID, use the
		 * [RetrieveLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/retrieve-loyalty-reward) endpoint.
		 * Search results are sorted by `updated_at` in descending order.
		 * Post v2/loyalty/rewards/search
		 * @param {SearchLoyaltyRewardsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchLoyaltyRewardsResponse} Success
		 */
		SearchLoyaltyRewards(requestBody: SearchLoyaltyRewardsRequest): Observable<SearchLoyaltyRewardsResponse> {
			return this.http.post<SearchLoyaltyRewardsResponse>(this.baseUri + 'v2/loyalty/rewards/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * DeleteLoyaltyReward
		 * Deletes a loyalty reward by doing the following:
		 * - Returns the loyalty points back to the loyalty account.
		 * - If an order ID was specified when the reward was created
		 * (see [CreateLoyaltyReward](https://developer.squareup.com/reference/square_2021-08-18/loyalty-api/create-loyalty-reward)),
		 * it updates the order by removing the reward and related
		 * discounts.
		 * You cannot delete a reward that has reached the terminal state (REDEEMED).
		 * Delete v2/loyalty/rewards/{reward_id}
		 * @param {string} reward_id The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to delete.
		 * @return {DeleteLoyaltyRewardResponse} Success
		 */
		DeleteLoyaltyReward(reward_id: string): Observable<DeleteLoyaltyRewardResponse> {
			return this.http.delete<DeleteLoyaltyRewardResponse>(this.baseUri + 'v2/loyalty/rewards/' + (reward_id == null ? '' : encodeURIComponent(reward_id)), {});
		}

		/**
		 * RetrieveLoyaltyReward
		 * Retrieves a loyalty reward.
		 * Get v2/loyalty/rewards/{reward_id}
		 * @param {string} reward_id The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to retrieve.
		 * @return {RetrieveLoyaltyRewardResponse} Success
		 */
		RetrieveLoyaltyReward(reward_id: string): Observable<RetrieveLoyaltyRewardResponse> {
			return this.http.get<RetrieveLoyaltyRewardResponse>(this.baseUri + 'v2/loyalty/rewards/' + (reward_id == null ? '' : encodeURIComponent(reward_id)), {});
		}

		/**
		 * RedeemLoyaltyReward
		 * Redeems a loyalty reward.
		 * The endpoint sets the reward to the `REDEEMED` terminal state.
		 * If you are using your own order processing system (not using the
		 * Orders API), you call this endpoint after the buyer paid for the
		 * purchase.
		 * After the reward reaches the terminal state, it cannot be deleted.
		 * In other words, points used for the reward cannot be returned
		 * to the account.
		 * Post v2/loyalty/rewards/{reward_id}/redeem
		 * @param {string} reward_id The ID of the [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward) to redeem.
		 * @param {RedeemLoyaltyRewardRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {RedeemLoyaltyRewardResponse} Success
		 */
		RedeemLoyaltyReward(reward_id: string, requestBody: RedeemLoyaltyRewardRequest): Observable<RedeemLoyaltyRewardResponse> {
			return this.http.post<RedeemLoyaltyRewardResponse>(this.baseUri + 'v2/loyalty/rewards/' + (reward_id == null ? '' : encodeURIComponent(reward_id)) + '/redeem', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListMerchants
		 * Returns `Merchant` information for a given access token.
		 * If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an access token.
		 * You can specify your personal access token to get your own merchant information or specify an OAuth token
		 * to get the information for the  merchant that granted you access.
		 * If you know the merchant ID, you can also use the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant)
		 * endpoint to get the merchant information.
		 * Get v2/merchants
		 * @param {number} cursor The cursor generated by the previous response.
		 * @return {ListMerchantsResponse} Success
		 */
		ListMerchants(cursor: number | null | undefined): Observable<ListMerchantsResponse> {
			return this.http.get<ListMerchantsResponse>(this.baseUri + 'v2/merchants?cursor=' + cursor, {});
		}

		/**
		 * RetrieveMerchant
		 * Retrieve a `Merchant` object for the given `merchant_id`.
		 * Get v2/merchants/{merchant_id}
		 * @param {string} merchant_id The ID of the merchant to retrieve. If the string "me" is supplied as the ID,
		 * then retrieve the merchant that is currently accessible to this call.
		 * @return {RetrieveMerchantResponse} Success
		 */
		RetrieveMerchant(merchant_id: string): Observable<RetrieveMerchantResponse> {
			return this.http.get<RetrieveMerchantResponse>(this.baseUri + 'v2/merchants/' + (merchant_id == null ? '' : encodeURIComponent(merchant_id)), {});
		}

		/**
		 * CreateOrder
		 * Creates a new [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that can include information about products for
		 * purchase and settings to apply to the purchase.
		 * To pay for a created order, see
		 * [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
		 * You can modify open orders using the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
		 * Post v2/orders
		 * @param {CreateOrderRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateOrderResponse} Success
		 */
		CreateOrder(requestBody: CreateOrderRequest): Observable<CreateOrderResponse> {
			return this.http.post<CreateOrderResponse>(this.baseUri + 'v2/orders', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BatchRetrieveOrders
		 * Retrieves a set of [orders](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by their IDs.
		 * If a given order ID does not exist, the ID is ignored instead of generating an error.
		 * Post v2/orders/batch-retrieve
		 * @param {BatchRetrieveOrdersRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BatchRetrieveOrdersResponse} Success
		 */
		BatchRetrieveOrders(requestBody: BatchRetrieveOrdersRequest): Observable<BatchRetrieveOrdersResponse> {
			return this.http.post<BatchRetrieveOrdersResponse>(this.baseUri + 'v2/orders/batch-retrieve', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CalculateOrder
		 * Enables applications to preview order pricing without creating an order.
		 * Post v2/orders/calculate
		 * @param {CalculateOrderRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CalculateOrderResponse} Success
		 */
		CalculateOrder(requestBody: CalculateOrderRequest): Observable<CalculateOrderResponse> {
			return this.http.post<CalculateOrderResponse>(this.baseUri + 'v2/orders/calculate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchOrders
		 * Search all orders for one or more locations. Orders include all sales,
		 * returns, and exchanges regardless of how or when they entered the Square
		 * ecosystem (such as Point of Sale, Invoices, and Connect APIs).
		 * `SearchOrders` requests need to specify which locations to search and define a
		 * [SearchOrdersQuery](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersQuery) object that controls
		 * how to sort or filter the results. Your `SearchOrdersQuery` can:
		 * Set filter criteria.
		 * Set the sort order.
		 * Determine whether to return results as complete `Order` objects or as
		 * [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects.
		 * Note that details for orders processed with Square Point of Sale while in
		 * offline mode might not be transmitted to Square for up to 72 hours. Offline
		 * orders have a `created_at` value that reflects the time the order was created,
		 * not the time it was subsequently transmitted to Square.
		 * Post v2/orders/search
		 * @param {SearchOrdersRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchOrdersResponse} Success
		 */
		SearchOrders(requestBody: SearchOrdersRequest): Observable<SearchOrdersResponse> {
			return this.http.post<SearchOrdersResponse>(this.baseUri + 'v2/orders/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveOrder
		 * Retrieves an [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by ID.
		 * Get v2/orders/{order_id}
		 * @param {string} order_id The ID of the order to retrieve.
		 * @return {RetrieveOrderResponse} Success
		 */
		OrdersGetByOrder_id(order_id: string): Observable<RetrieveOrderResponse> {
			return this.http.get<RetrieveOrderResponse>(this.baseUri + 'v2/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)), {});
		}

		/**
		 * UpdateOrder
		 * Updates an open [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) by adding, replacing, or deleting
		 * fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.
		 * An `UpdateOrder` request requires the following:
		 * - The `order_id` in the endpoint path, identifying the order to update.
		 * - The latest `version` of the order to update.
		 * - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects)
		 * containing only the fields to update and the version to which the update is
		 * being applied.
		 * - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
		 * identifying the fields to clear.
		 * To pay for an order, see
		 * [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
		 * Put v2/orders/{order_id}
		 * @param {string} order_id The ID of the order to update.
		 * @param {UpdateOrderRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateOrderResponse} Success
		 */
		OrdersPutByOrder_id(order_id: string, requestBody: UpdateOrderRequest): Observable<UpdateOrderResponse> {
			return this.http.put<UpdateOrderResponse>(this.baseUri + 'v2/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * PayOrder
		 * Pay for an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) using one or more approved [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment)
		 * or settle an order with a total of `0`.
		 * The total of the `payment_ids` listed in the request must be equal to the order
		 * total. Orders with a total amount of `0` can be marked as paid by specifying an empty
		 * array of `payment_ids` in the request.
		 * To be used with `PayOrder`, a payment must:
		 * - Reference the order by specifying the `order_id` when [creating the payment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
		 * Any approved payments that reference the same `order_id` not specified in the
		 * `payment_ids` is canceled.
		 * - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-capture).
		 * Using a delayed capture payment with `PayOrder` completes the approved payment.
		 * Post v2/orders/{order_id}/pay
		 * @param {string} order_id The ID of the order being paid.
		 * @param {PayOrderRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {PayOrderResponse} Success
		 */
		PayOrder(order_id: string, requestBody: PayOrderRequest): Observable<PayOrderResponse> {
			return this.http.post<PayOrderResponse>(this.baseUri + 'v2/orders/' + (order_id == null ? '' : encodeURIComponent(order_id)) + '/pay', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * ListPayments
		 * Retrieves a list of payments taken by the account making the request.
		 * Results are eventually consistent, and new payments or changes to payments might take several
		 * seconds to appear.
		 * The maximum results per page is 100.
		 * Get v2/payments
		 * @param {string} begin_time The timestamp for the beginning of the reporting period, in RFC 3339 format.
		 * Inclusive. Default: The current time minus one year.
		 * @param {string} end_time The timestamp for the end of the reporting period, in RFC 3339 format.
		 * Default: The current time.
		 * @param {string} sort_order The order in which results are listed:
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 * @param {string} location_id Limit results to the location supplied. By default, results are returned
		 * for the default (main) location associated with the seller.
		 * @param {number} total The exact amount in the `total_money` for a payment.
		 * @param {string} last_4 The last four digits of a payment card.
		 * @param {string} card_brand The brand of the payment card (for example, VISA).
		 * @param {number} limit The maximum number of results to be returned in a single page.
		 * It is possible to receive fewer results than the specified limit on a given page.
		 * The default value of 100 is also the maximum allowed value. If the provided value is 
		 * greater than 100, it is ignored and the default value is used instead.
		 * Default: `100`
		 * @return {ListPaymentsResponse} Success
		 */
		PaymentsGetByBegin_timeAndEnd_timeAndSort_orderAndCursorAndLocation_idAndTotalAndLast_4AndCard_brandAndLimit(begin_time: string | null | undefined, end_time: string | null | undefined, sort_order: string | null | undefined, cursor: string | null | undefined, location_id: string | null | undefined, total: number | null | undefined, last_4: string | null | undefined, card_brand: string | null | undefined, limit: number | null | undefined): Observable<ListPaymentsResponse> {
			return this.http.get<ListPaymentsResponse>(this.baseUri + 'v2/payments?begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)) + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&total=' + total + '&last_4=' + (last_4 == null ? '' : encodeURIComponent(last_4)) + '&card_brand=' + (card_brand == null ? '' : encodeURIComponent(card_brand)) + '&limit=' + limit, {});
		}

		/**
		 * CreatePayment
		 * Creates a payment using the provided source. You can use this endpoint
		 * to charge a card (credit/debit card or
		 * Square gift card) or record a payment that the seller received outside of Square
		 * (cash payment from a buyer or a payment that an external entity
		 * processed on behalf of the seller).
		 * The endpoint creates a
		 * `Payment` object and returns it in the response.
		 * Post v2/payments
		 * @param {CreatePaymentRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreatePaymentResponse} Success
		 */
		CreatePayment(requestBody: CreatePaymentRequest): Observable<CreatePaymentResponse> {
			return this.http.post<CreatePaymentResponse>(this.baseUri + 'v2/payments', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CancelPaymentByIdempotencyKey
		 * Cancels (voids) a payment identified by the idempotency key that is specified in the
		 * request.
		 * Use this method when the status of a `CreatePayment` request is unknown (for example, after you send a
		 * `CreatePayment` request, a network error occurs and you do not get a response). In this case, you can
		 * direct Square to cancel the payment using this endpoint. In the request, you provide the same
		 * idempotency key that you provided in your `CreatePayment` request that you want to cancel. After
		 * canceling the payment, you can submit your `CreatePayment` request again.
		 * Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
		 * returns successfully.
		 * Post v2/payments/cancel
		 * @param {CancelPaymentByIdempotencyKeyRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CancelPaymentByIdempotencyKeyResponse} Success
		 */
		CancelPaymentByIdempotencyKey(requestBody: CancelPaymentByIdempotencyKeyRequest): Observable<CancelPaymentByIdempotencyKeyResponse> {
			return this.http.post<CancelPaymentByIdempotencyKeyResponse>(this.baseUri + 'v2/payments/cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * GetPayment
		 * Retrieves details for a specific payment.
		 * Get v2/payments/{payment_id}
		 * @param {string} payment_id A unique ID for the desired payment.
		 * @return {GetPaymentResponse} Success
		 */
		GetPayment(payment_id: string): Observable<GetPaymentResponse> {
			return this.http.get<GetPaymentResponse>(this.baseUri + 'v2/payments/' + (payment_id == null ? '' : encodeURIComponent(payment_id)), {});
		}

		/**
		 * UpdatePayment
		 * Updates a payment with the APPROVED status.
		 * You can update the `amount_money` and `tip_money` using this endpoint.
		 * Put v2/payments/{payment_id}
		 * @param {string} payment_id The ID of the payment to update.
		 * @param {UpdatePaymentRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdatePaymentResponse} Success
		 */
		UpdatePayment(payment_id: string, requestBody: UpdatePaymentRequest): Observable<UpdatePaymentResponse> {
			return this.http.put<UpdatePaymentResponse>(this.baseUri + 'v2/payments/' + (payment_id == null ? '' : encodeURIComponent(payment_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CancelPayment
		 * Cancels (voids) a payment. You can use this endpoint to cancel a payment with
		 * the APPROVED `status`.
		 * Post v2/payments/{payment_id}/cancel
		 * @param {string} payment_id The ID of the payment to cancel.
		 * @return {CancelPaymentResponse} Success
		 */
		CancelPayment(payment_id: string): Observable<CancelPaymentResponse> {
			return this.http.post<CancelPaymentResponse>(this.baseUri + 'v2/payments/' + (payment_id == null ? '' : encodeURIComponent(payment_id)) + '/cancel', null, {});
		}

		/**
		 * CompletePayment
		 * Completes (captures) a payment.
		 * By default, payments are set to complete immediately after they are created.
		 * You can use this endpoint to complete a payment with the APPROVED `status`.
		 * Post v2/payments/{payment_id}/complete
		 * @param {string} payment_id The unique ID identifying the payment to be completed.
		 * @return {CompletePaymentResponse} Success
		 */
		CompletePayment(payment_id: string): Observable<CompletePaymentResponse> {
			return this.http.post<CompletePaymentResponse>(this.baseUri + 'v2/payments/' + (payment_id == null ? '' : encodeURIComponent(payment_id)) + '/complete', null, {});
		}

		/**
		 * ListPaymentRefunds
		 * Retrieves a list of refunds for the account making the request.
		 * Results are eventually consistent, and new refunds or changes to refunds might take several
		 * seconds to appear.
		 * The maximum results per page is 100.
		 * Get v2/refunds
		 * @param {string} begin_time The timestamp for the beginning of the requested reporting period, in RFC 3339 format.
		 * Default: The current time minus one year.
		 * @param {string} end_time The timestamp for the end of the requested reporting period, in RFC 3339 format.
		 * Default: The current time.
		 * @param {string} sort_order The order in which results are listed:
		 * - `ASC` - Oldest to newest.
		 * - `DESC` - Newest to oldest (default).
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this cursor to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
		 * @param {string} location_id Limit results to the location supplied. By default, results are returned
		 * for all locations associated with the seller.
		 * @param {string} status If provided, only refunds with the given status are returned.
		 * For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).
		 * Default: If omitted, refunds are returned regardless of their status.
		 * @param {string} source_type If provided, only refunds with the given source type are returned.
		 * - `CARD` - List refunds only for payments where `CARD` was specified as the payment
		 * source.
		 * Default: If omitted, refunds are returned regardless of the source type.
		 * @param {number} limit The maximum number of results to be returned in a single page.
		 * It is possible to receive fewer results than the specified limit on a given page.
		 * If the supplied value is greater than 100, no more than 100 results are returned.
		 * Default: 100
		 * @return {ListPaymentRefundsResponse} Success
		 */
		ListPaymentRefunds(begin_time: string | null | undefined, end_time: string | null | undefined, sort_order: string | null | undefined, cursor: string | null | undefined, location_id: string | null | undefined, status: string | null | undefined, source_type: string | null | undefined, limit: number | null | undefined): Observable<ListPaymentRefundsResponse> {
			return this.http.get<ListPaymentRefundsResponse>(this.baseUri + 'v2/refunds?begin_time=' + (begin_time == null ? '' : encodeURIComponent(begin_time)) + '&end_time=' + (end_time == null ? '' : encodeURIComponent(end_time)) + '&sort_order=' + (sort_order == null ? '' : encodeURIComponent(sort_order)) + '&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&location_id=' + (location_id == null ? '' : encodeURIComponent(location_id)) + '&status=' + (status == null ? '' : encodeURIComponent(status)) + '&source_type=' + (source_type == null ? '' : encodeURIComponent(source_type)) + '&limit=' + limit, {});
		}

		/**
		 * RefundPayment
		 * Refunds a payment. You can refund the entire payment amount or a
		 * portion of it. You can use this endpoint to refund a card payment or record a
		 * refund of a cash or external payment. For more information, see
		 * [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
		 * Post v2/refunds
		 * @param {RefundPaymentRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {RefundPaymentResponse} Success
		 */
		RefundPayment(requestBody: RefundPaymentRequest): Observable<RefundPaymentResponse> {
			return this.http.post<RefundPaymentResponse>(this.baseUri + 'v2/refunds', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * GetPaymentRefund
		 * Retrieves a specific refund using the `refund_id`.
		 * Get v2/refunds/{refund_id}
		 * @param {string} refund_id The unique ID for the desired `PaymentRefund`.
		 * @return {GetPaymentRefundResponse} Success
		 */
		GetPaymentRefund(refund_id: string): Observable<GetPaymentRefundResponse> {
			return this.http.get<GetPaymentRefundResponse>(this.baseUri + 'v2/refunds/' + (refund_id == null ? '' : encodeURIComponent(refund_id)), {});
		}

		/**
		 * ListSites
		 * Lists the Square Online sites that belong to a seller.
		 * __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		 * Get v2/sites
		 * @return {ListSitesResponse} Success
		 */
		ListSites(): Observable<ListSitesResponse> {
			return this.http.get<ListSitesResponse>(this.baseUri + 'v2/sites', {});
		}

		/**
		 * DeleteSnippet
		 * Removes your snippet from a Square Online site.
		 * You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
		 * __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		 * Delete v2/sites/{site_id}/snippet
		 * @param {string} site_id The ID of the site that contains the snippet.
		 * @return {DeleteSnippetResponse} Success
		 */
		DeleteSnippet(site_id: string): Observable<DeleteSnippetResponse> {
			return this.http.delete<DeleteSnippetResponse>(this.baseUri + 'v2/sites/' + (site_id == null ? '' : encodeURIComponent(site_id)) + '/snippet', {});
		}

		/**
		 * RetrieveSnippet
		 * Retrieves your snippet from a Square Online site. A site can contain snippets from multiple snippet applications, but you can retrieve only the snippet that was added by your application.
		 * You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
		 * __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		 * Get v2/sites/{site_id}/snippet
		 * @param {string} site_id The ID of the site that contains the snippet.
		 * @return {RetrieveSnippetResponse} Success
		 */
		RetrieveSnippet(site_id: string): Observable<RetrieveSnippetResponse> {
			return this.http.get<RetrieveSnippetResponse>(this.baseUri + 'v2/sites/' + (site_id == null ? '' : encodeURIComponent(site_id)) + '/snippet', {});
		}

		/**
		 * UpsertSnippet
		 * Adds a snippet to a Square Online site or updates the existing snippet on the site.
		 * The snippet code is appended to the end of the `head` element on every page of the site, except checkout pages. A snippet application can add one snippet to a given site.
		 * You can call [ListSites](https://developer.squareup.com/reference/square_2021-08-18/sites-api/list-sites) to get the IDs of the sites that belong to a seller.
		 * __Note:__ Square Online APIs are publicly available as part of an early access program. For more information, see [Early access program for Square Online APIs](https://developer.squareup.com/docs/online-api#early-access-program-for-square-online-apis).
		 * Post v2/sites/{site_id}/snippet
		 * @param {string} site_id The ID of the site where you want to add or update the snippet.
		 * @param {UpsertSnippetRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpsertSnippetResponse} Success
		 */
		UpsertSnippet(site_id: string, requestBody: UpsertSnippetRequest): Observable<UpsertSnippetResponse> {
			return this.http.post<UpsertSnippetResponse>(this.baseUri + 'v2/sites/' + (site_id == null ? '' : encodeURIComponent(site_id)) + '/snippet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CreateSubscription
		 * Creates a subscription for a customer to a subscription plan.
		 * If you provide a card on file in the request, Square charges the card for
		 * the subscription. Otherwise, Square bills an invoice to the customer's email
		 * address. The subscription starts immediately, unless the request includes
		 * the optional `start_date`. Each individual subscription is associated with a particular location.
		 * Post v2/subscriptions
		 * @param {CreateSubscriptionRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateSubscriptionResponse} Success
		 */
		CreateSubscription(requestBody: CreateSubscriptionRequest): Observable<CreateSubscriptionResponse> {
			return this.http.post<CreateSubscriptionResponse>(this.baseUri + 'v2/subscriptions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchSubscriptions
		 * Searches for subscriptions.
		 * Results are ordered chronologically by subscription creation date. If
		 * the request specifies more than one location ID,
		 * the endpoint orders the result
		 * by location ID, and then by creation date within each location. If no locations are given
		 * in the query, all locations are searched.
		 * You can also optionally specify `customer_ids` to search by customer.
		 * If left unset, all customers
		 * associated with the specified locations are returned.
		 * If the request specifies customer IDs, the endpoint orders results
		 * first by location, within location by customer ID, and within
		 * customer by subscription creation date.
		 * For more information, see
		 * [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-subscriptions).
		 * Post v2/subscriptions/search
		 * @param {SearchSubscriptionsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchSubscriptionsResponse} Success
		 */
		SearchSubscriptions(requestBody: SearchSubscriptionsRequest): Observable<SearchSubscriptionsResponse> {
			return this.http.post<SearchSubscriptionsResponse>(this.baseUri + 'v2/subscriptions/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveSubscription
		 * Retrieves a subscription.
		 * Get v2/subscriptions/{subscription_id}
		 * @param {string} subscription_id The ID of the subscription to retrieve.
		 * @return {RetrieveSubscriptionResponse} Success
		 */
		RetrieveSubscription(subscription_id: string): Observable<RetrieveSubscriptionResponse> {
			return this.http.get<RetrieveSubscriptionResponse>(this.baseUri + 'v2/subscriptions/' + (subscription_id == null ? '' : encodeURIComponent(subscription_id)), {});
		}

		/**
		 * UpdateSubscription
		 * Updates a subscription. You can set, modify, and clear the
		 * `subscription` field values.
		 * Put v2/subscriptions/{subscription_id}
		 * @param {string} subscription_id The ID for the subscription to update.
		 * @param {UpdateSubscriptionRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateSubscriptionResponse} Success
		 */
		UpdateSubscription(subscription_id: string, requestBody: UpdateSubscriptionRequest): Observable<UpdateSubscriptionResponse> {
			return this.http.put<UpdateSubscriptionResponse>(this.baseUri + 'v2/subscriptions/' + (subscription_id == null ? '' : encodeURIComponent(subscription_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CancelSubscription
		 * Sets the `canceled_date` field to the end of the active billing period.
		 * After this date, the status changes from ACTIVE to CANCELED.
		 * Post v2/subscriptions/{subscription_id}/cancel
		 * @param {string} subscription_id The ID of the subscription to cancel.
		 * @return {CancelSubscriptionResponse} Success
		 */
		CancelSubscription(subscription_id: string): Observable<CancelSubscriptionResponse> {
			return this.http.post<CancelSubscriptionResponse>(this.baseUri + 'v2/subscriptions/' + (subscription_id == null ? '' : encodeURIComponent(subscription_id)) + '/cancel', null, {});
		}

		/**
		 * ListSubscriptionEvents
		 * Lists all events for a specific subscription.
		 * In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the subscription was canceled) events are returned.
		 * Get v2/subscriptions/{subscription_id}/events
		 * @param {string} subscription_id The ID of the subscription to retrieve the events for.
		 * @param {string} cursor A pagination cursor returned by a previous call to this endpoint.
		 * Provide this to retrieve the next set of results for the original query.
		 * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
		 * @param {number} limit The upper limit on the number of subscription events to return
		 * in the response.
		 * Default: `200`
		 * @return {ListSubscriptionEventsResponse} Success
		 */
		ListSubscriptionEvents(subscription_id: string, cursor: string | null | undefined, limit: number | null | undefined): Observable<ListSubscriptionEventsResponse> {
			return this.http.get<ListSubscriptionEventsResponse>(this.baseUri + 'v2/subscriptions/' + (subscription_id == null ? '' : encodeURIComponent(subscription_id)) + '/events&cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * ResumeSubscription
		 * Resumes a deactivated subscription.
		 * Post v2/subscriptions/{subscription_id}/resume
		 * @param {string} subscription_id The ID of the subscription to resume.
		 * @return {ResumeSubscriptionResponse} Success
		 */
		ResumeSubscription(subscription_id: string): Observable<ResumeSubscriptionResponse> {
			return this.http.post<ResumeSubscriptionResponse>(this.baseUri + 'v2/subscriptions/' + (subscription_id == null ? '' : encodeURIComponent(subscription_id)) + '/resume', null, {});
		}

		/**
		 * CreateTeamMember
		 * Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.
		 * You must provide the following values in your request to this endpoint:
		 * - `given_name`
		 * - `family_name`
		 * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
		 * Post v2/team-members
		 * @param {CreateTeamMemberRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateTeamMemberResponse} Success
		 */
		CreateTeamMember(requestBody: CreateTeamMemberRequest): Observable<CreateTeamMemberResponse> {
			return this.http.post<CreateTeamMemberResponse>(this.baseUri + 'v2/team-members', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BulkCreateTeamMembers
		 * Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful creates.
		 * This process is non-transactional and processes as much of the request as possible. If one of the creates in
		 * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
		 * contains explicit error information for the failed create.
		 * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
		 * Post v2/team-members/bulk-create
		 * @param {BulkCreateTeamMembersRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BulkCreateTeamMembersResponse} Success
		 */
		BulkCreateTeamMembers(requestBody: BulkCreateTeamMembersRequest): Observable<BulkCreateTeamMembersResponse> {
			return this.http.post<BulkCreateTeamMembersResponse>(this.baseUri + 'v2/team-members/bulk-create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * BulkUpdateTeamMembers
		 * Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful updates.
		 * This process is non-transactional and processes as much of the request as possible. If one of the updates in
		 * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
		 * contains explicit error information for the failed update.
		 * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
		 * Post v2/team-members/bulk-update
		 * @param {BulkUpdateTeamMembersRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {BulkUpdateTeamMembersResponse} Success
		 */
		BulkUpdateTeamMembers(requestBody: BulkUpdateTeamMembersRequest): Observable<BulkUpdateTeamMembersResponse> {
			return this.http.post<BulkUpdateTeamMembersResponse>(this.baseUri + 'v2/team-members/bulk-update', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchTeamMembers
		 * Returns a paginated list of `TeamMember` objects for a business.
		 * The list can be filtered by the following:
		 * - location IDs
		 * - `status`
		 * Post v2/team-members/search
		 * @param {SearchTeamMembersRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchTeamMembersResponse} Success
		 */
		SearchTeamMembers(requestBody: SearchTeamMembersRequest): Observable<SearchTeamMembersResponse> {
			return this.http.post<SearchTeamMembersResponse>(this.baseUri + 'v2/team-members/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveTeamMember
		 * Retrieves a `TeamMember` object for the given `TeamMember.id`.
		 * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
		 * Get v2/team-members/{team_member_id}
		 * @param {string} team_member_id The ID of the team member to retrieve.
		 * @return {RetrieveTeamMemberResponse} Success
		 */
		RetrieveTeamMember(team_member_id: string): Observable<RetrieveTeamMemberResponse> {
			return this.http.get<RetrieveTeamMemberResponse>(this.baseUri + 'v2/team-members/' + (team_member_id == null ? '' : encodeURIComponent(team_member_id)), {});
		}

		/**
		 * UpdateTeamMember
		 * Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.
		 * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
		 * Put v2/team-members/{team_member_id}
		 * @param {string} team_member_id The ID of the team member to update.
		 * @param {UpdateTeamMemberRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateTeamMemberResponse} Success
		 */
		UpdateTeamMember(team_member_id: string, requestBody: UpdateTeamMemberRequest): Observable<UpdateTeamMemberResponse> {
			return this.http.put<UpdateTeamMemberResponse>(this.baseUri + 'v2/team-members/' + (team_member_id == null ? '' : encodeURIComponent(team_member_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * RetrieveWageSetting
		 * Retrieves a `WageSetting` object for a team member specified
		 * by `TeamMember.id`.
		 * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
		 * Get v2/team-members/{team_member_id}/wage-setting
		 * @param {string} team_member_id The ID of the team member for which to retrieve the wage setting.
		 * @return {RetrieveWageSettingResponse} Success
		 */
		RetrieveWageSetting(team_member_id: string): Observable<RetrieveWageSettingResponse> {
			return this.http.get<RetrieveWageSettingResponse>(this.baseUri + 'v2/team-members/' + (team_member_id == null ? '' : encodeURIComponent(team_member_id)) + '/wage-setting', {});
		}

		/**
		 * UpdateWageSetting
		 * Creates or updates a `WageSetting` object. The object is created if a
		 * `WageSetting` with the specified `team_member_id` does not exist. Otherwise,
		 * it fully replaces the `WageSetting` object for the team member.
		 * The `WageSetting` is returned on a successful update.
		 * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
		 * Put v2/team-members/{team_member_id}/wage-setting
		 * @param {string} team_member_id The ID of the team member for which to update the `WageSetting` object.
		 * @param {UpdateWageSettingRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {UpdateWageSettingResponse} Success
		 */
		UpdateWageSetting(team_member_id: string, requestBody: UpdateWageSettingRequest): Observable<UpdateWageSettingResponse> {
			return this.http.put<UpdateWageSettingResponse>(this.baseUri + 'v2/team-members/' + (team_member_id == null ? '' : encodeURIComponent(team_member_id)) + '/wage-setting', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * CreateTerminalCheckout
		 * Creates a Terminal checkout request and sends it to the specified device to take a payment
		 * for the requested amount.
		 * Post v2/terminals/checkouts
		 * @param {CreateTerminalCheckoutRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateTerminalCheckoutResponse} Success
		 */
		CreateTerminalCheckout(requestBody: CreateTerminalCheckoutRequest): Observable<CreateTerminalCheckoutResponse> {
			return this.http.post<CreateTerminalCheckoutResponse>(this.baseUri + 'v2/terminals/checkouts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchTerminalCheckouts
		 * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
		 * Post v2/terminals/checkouts/search
		 * @param {SearchTerminalCheckoutsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchTerminalCheckoutsResponse} Success
		 */
		SearchTerminalCheckouts(requestBody: SearchTerminalCheckoutsRequest): Observable<SearchTerminalCheckoutsResponse> {
			return this.http.post<SearchTerminalCheckoutsResponse>(this.baseUri + 'v2/terminals/checkouts/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * GetTerminalCheckout
		 * Retrieves a Terminal checkout request by `checkout_id`.
		 * Get v2/terminals/checkouts/{checkout_id}
		 * @param {string} checkout_id The unique ID for the desired `TerminalCheckout`.
		 * @return {GetTerminalCheckoutResponse} Success
		 */
		GetTerminalCheckout(checkout_id: string): Observable<GetTerminalCheckoutResponse> {
			return this.http.get<GetTerminalCheckoutResponse>(this.baseUri + 'v2/terminals/checkouts/' + (checkout_id == null ? '' : encodeURIComponent(checkout_id)), {});
		}

		/**
		 * CancelTerminalCheckout
		 * Cancels a Terminal checkout request if the status of the request permits it.
		 * Post v2/terminals/checkouts/{checkout_id}/cancel
		 * @param {string} checkout_id The unique ID for the desired `TerminalCheckout`.
		 * @return {CancelTerminalCheckoutResponse} Success
		 */
		CancelTerminalCheckout(checkout_id: string): Observable<CancelTerminalCheckoutResponse> {
			return this.http.post<CancelTerminalCheckoutResponse>(this.baseUri + 'v2/terminals/checkouts/' + (checkout_id == null ? '' : encodeURIComponent(checkout_id)) + '/cancel', null, {});
		}

		/**
		 * CreateTerminalRefund
		 * Creates a request to refund an Interac payment completed on a Square Terminal.
		 * Post v2/terminals/refunds
		 * @param {CreateTerminalRefundRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {CreateTerminalRefundResponse} Success
		 */
		CreateTerminalRefund(requestBody: CreateTerminalRefundRequest): Observable<CreateTerminalRefundResponse> {
			return this.http.post<CreateTerminalRefundResponse>(this.baseUri + 'v2/terminals/refunds', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * SearchTerminalRefunds
		 * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
		 * Post v2/terminals/refunds/search
		 * @param {SearchTerminalRefundsRequest} requestBody An object containing the fields to POST for the request.
		 * See the corresponding object definition for field details.
		 * @return {SearchTerminalRefundsResponse} Success
		 */
		SearchTerminalRefunds(requestBody: SearchTerminalRefundsRequest): Observable<SearchTerminalRefundsResponse> {
			return this.http.post<SearchTerminalRefundsResponse>(this.baseUri + 'v2/terminals/refunds/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * GetTerminalRefund
		 * Retrieves an Interac Terminal refund object by ID.
		 * Get v2/terminals/refunds/{terminal_refund_id}
		 * @param {string} terminal_refund_id The unique ID for the desired `TerminalRefund`.
		 * @return {GetTerminalRefundResponse} Success
		 */
		GetTerminalRefund(terminal_refund_id: string): Observable<GetTerminalRefundResponse> {
			return this.http.get<GetTerminalRefundResponse>(this.baseUri + 'v2/terminals/refunds/' + (terminal_refund_id == null ? '' : encodeURIComponent(terminal_refund_id)), {});
		}

		/**
		 * CancelTerminalRefund
		 * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
		 * Post v2/terminals/refunds/{terminal_refund_id}/cancel
		 * @param {string} terminal_refund_id The unique ID for the desired `TerminalRefund`.
		 * @return {CancelTerminalRefundResponse} Success
		 */
		CancelTerminalRefund(terminal_refund_id: string): Observable<CancelTerminalRefundResponse> {
			return this.http.post<CancelTerminalRefundResponse>(this.baseUri + 'v2/terminals/refunds/' + (terminal_refund_id == null ? '' : encodeURIComponent(terminal_refund_id)) + '/cancel', null, {});
		}
	}

}

