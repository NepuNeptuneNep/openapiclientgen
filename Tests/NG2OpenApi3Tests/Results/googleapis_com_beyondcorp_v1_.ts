import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Allocated connection of the AppGateway. */
	export interface AllocatedConnection {

		/** Required. The ingress port of an allocated connection */
		ingressPort?: number | null;

		/** Required. The PSC uri of an allocated connection */
		pscUri?: string | null;
	}

	/** Allocated connection of the AppGateway. */
	export interface AllocatedConnectionFormProperties {

		/** Required. The ingress port of an allocated connection */
		ingressPort: FormControl<number | null | undefined>,

		/** Required. The PSC uri of an allocated connection */
		pscUri: FormControl<string | null | undefined>,
	}
	export function CreateAllocatedConnectionFormGroup() {
		return new FormGroup<AllocatedConnectionFormProperties>({
			ingressPort: new FormControl<number | null | undefined>(undefined),
			pscUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppGateway. Multiple connectors can be authorised for a single AppGateway. */
	export interface AppGateway {

		/** Output only. A list of connections allocated for the Gateway */
		allocatedConnections?: Array<AllocatedConnection>;

		/** Output only. Timestamp when the resource was created. */
		createTime?: string | null;

		/** Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters. */
		displayName?: string | null;

		/** Required. The type of hosting used by the AppGateway. */
		hostType?: AppGatewayHostType | null;

		/** Optional. Resource labels to represent user provided metadata. */
		labels?: {[id: string]: string };

		/** Required. Unique resource name of the AppGateway. The name is ignored when creating an AppGateway. */
		name?: string | null;

		/** Output only. The current state of the AppGateway. */
		state?: AppGatewayState | null;

		/** Required. The type of network connectivity used by the AppGateway. */
		type?: AppGatewayType | null;

		/** Output only. A unique identifier for the instance generated by the system. */
		uid?: string | null;

		/** Output only. Timestamp when the resource was last modified. */
		updateTime?: string | null;

		/** Output only. Server-defined URI for this resource. */
		uri?: string | null;
	}

	/** A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppGateway. Multiple connectors can be authorised for a single AppGateway. */
	export interface AppGatewayFormProperties {

		/** Output only. Timestamp when the resource was created. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters. */
		displayName: FormControl<string | null | undefined>,

		/** Required. The type of hosting used by the AppGateway. */
		hostType: FormControl<AppGatewayHostType | null | undefined>,

		/** Optional. Resource labels to represent user provided metadata. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. Unique resource name of the AppGateway. The name is ignored when creating an AppGateway. */
		name: FormControl<string | null | undefined>,

		/** Output only. The current state of the AppGateway. */
		state: FormControl<AppGatewayState | null | undefined>,

		/** Required. The type of network connectivity used by the AppGateway. */
		type: FormControl<AppGatewayType | null | undefined>,

		/** Output only. A unique identifier for the instance generated by the system. */
		uid: FormControl<string | null | undefined>,

		/** Output only. Timestamp when the resource was last modified. */
		updateTime: FormControl<string | null | undefined>,

		/** Output only. Server-defined URI for this resource. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateAppGatewayFormGroup() {
		return new FormGroup<AppGatewayFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			hostType: new FormControl<AppGatewayHostType | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<AppGatewayState | null | undefined>(undefined),
			type: new FormControl<AppGatewayType | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AppGatewayHostType { HOST_TYPE_UNSPECIFIED = 'HOST_TYPE_UNSPECIFIED', GCP_REGIONAL_MIG = 'GCP_REGIONAL_MIG' }

	export enum AppGatewayState { STATE_UNSPECIFIED = 'STATE_UNSPECIFIED', CREATING = 'CREATING', CREATED = 'CREATED', UPDATING = 'UPDATING', DELETING = 'DELETING', DOWN = 'DOWN' }

	export enum AppGatewayType { TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED', TCP_PROXY = 'TCP_PROXY' }


	/** Represents the metadata of the long-running operation. */
	export interface AppGatewayOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface AppGatewayOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateAppGatewayOperationMetadataFormGroup() {
		return new FormGroup<AppGatewayOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ConnectionConfig represents a Connection Configuration object. */
	export interface CloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfig {

		/** application_endpoint is the endpoint of the application the form of host:port. For example, "localhost:80". */
		applicationEndpoint?: string | null;

		/** application_name represents the given name of the application the connection is connecting with. */
		applicationName?: string | null;

		/** gateway lists all instances running a gateway in GCP. They all connect to a connector on the host. */
		gateway?: Array<CloudSecurityZerotrustApplinkAppConnectorProtoGateway>;

		/** name is the unique ID for each connection. TODO(b/190732451) returns connection name from user-specified name in config. Now, name = ${application_name}:${application_endpoint} */
		name?: string | null;

		/** project represents the consumer project the connection belongs to. */
		project?: string | null;

		/** tunnels_per_gateway reflects the number of tunnels between a connector and a gateway. */
		tunnelsPerGateway?: number | null;

		/** user_port specifies the reserved port on gateways for user connections. */
		userPort?: number | null;
	}

	/** ConnectionConfig represents a Connection Configuration object. */
	export interface CloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfigFormProperties {

		/** application_endpoint is the endpoint of the application the form of host:port. For example, "localhost:80". */
		applicationEndpoint: FormControl<string | null | undefined>,

		/** application_name represents the given name of the application the connection is connecting with. */
		applicationName: FormControl<string | null | undefined>,

		/** name is the unique ID for each connection. TODO(b/190732451) returns connection name from user-specified name in config. Now, name = ${application_name}:${application_endpoint} */
		name: FormControl<string | null | undefined>,

		/** project represents the consumer project the connection belongs to. */
		project: FormControl<string | null | undefined>,

		/** tunnels_per_gateway reflects the number of tunnels between a connector and a gateway. */
		tunnelsPerGateway: FormControl<number | null | undefined>,

		/** user_port specifies the reserved port on gateways for user connections. */
		userPort: FormControl<number | null | undefined>,
	}
	export function CreateCloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfigFormGroup() {
		return new FormGroup<CloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfigFormProperties>({
			applicationEndpoint: new FormControl<string | null | undefined>(undefined),
			applicationName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			project: new FormControl<string | null | undefined>(undefined),
			tunnelsPerGateway: new FormControl<number | null | undefined>(undefined),
			userPort: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Gateway represents a GCE VM Instance endpoint for use by IAP TCP. */
	export interface CloudSecurityZerotrustApplinkAppConnectorProtoGateway {

		/** interface specifies the network interface of the gateway to connect to. */
		interface?: string | null;

		/** name is the name of an instance running a gateway. It is the unique ID for a gateway. All gateways under the same connection have the same prefix. It is derived from the gateway URL. For example, name=${instance} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		name?: string | null;

		/** port specifies the port of the gateway for tunnel connections from the connectors. */
		port?: number | null;

		/** project is the tenant project the gateway belongs to. Different from the project in the connection, it is a BeyondCorpAPI internally created project to manage all the gateways. It is sharing the same network with the consumer project user owned. It is derived from the gateway URL. For example, project=${project} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		project?: string | null;

		/** self_link is the gateway URL in the form https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		selfLink?: string | null;

		/** zone represents the zone the instance belongs. It is derived from the gateway URL. For example, zone=${zone} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		zone?: string | null;
	}

	/** Gateway represents a GCE VM Instance endpoint for use by IAP TCP. */
	export interface CloudSecurityZerotrustApplinkAppConnectorProtoGatewayFormProperties {

		/** interface specifies the network interface of the gateway to connect to. */
		interface: FormControl<string | null | undefined>,

		/** name is the name of an instance running a gateway. It is the unique ID for a gateway. All gateways under the same connection have the same prefix. It is derived from the gateway URL. For example, name=${instance} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		name: FormControl<string | null | undefined>,

		/** port specifies the port of the gateway for tunnel connections from the connectors. */
		port: FormControl<number | null | undefined>,

		/** project is the tenant project the gateway belongs to. Different from the project in the connection, it is a BeyondCorpAPI internally created project to manage all the gateways. It is sharing the same network with the consumer project user owned. It is derived from the gateway URL. For example, project=${project} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		project: FormControl<string | null | undefined>,

		/** self_link is the gateway URL in the form https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		selfLink: FormControl<string | null | undefined>,

		/** zone represents the zone the instance belongs. It is derived from the gateway URL. For example, zone=${zone} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance} */
		zone: FormControl<string | null | undefined>,
	}
	export function CreateCloudSecurityZerotrustApplinkAppConnectorProtoGatewayFormGroup() {
		return new FormGroup<CloudSecurityZerotrustApplinkAppConnectorProtoGatewayFormProperties>({
			interface: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
			project: new FormControl<string | null | undefined>(undefined),
			selfLink: new FormControl<string | null | undefined>(undefined),
			zone: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ConnectorDetails reflects the details of a connector. */
	export interface CloudSecurityZerotrustApplinkAppConnectorProtoConnectorDetails {
	}

	/** ConnectorDetails reflects the details of a connector. */
	export interface CloudSecurityZerotrustApplinkAppConnectorProtoConnectorDetailsFormProperties {
	}
	export function CreateCloudSecurityZerotrustApplinkAppConnectorProtoConnectorDetailsFormGroup() {
		return new FormGroup<CloudSecurityZerotrustApplinkAppConnectorProtoConnectorDetailsFormProperties>({
		});

	}


	/** LogAgentDetails reflects the details of a log agent. */
	export interface CloudSecurityZerotrustApplinkLogagentProtoLogAgentDetails {
	}

	/** LogAgentDetails reflects the details of a log agent. */
	export interface CloudSecurityZerotrustApplinkLogagentProtoLogAgentDetailsFormProperties {
	}
	export function CreateCloudSecurityZerotrustApplinkLogagentProtoLogAgentDetailsFormGroup() {
		return new FormGroup<CloudSecurityZerotrustApplinkLogagentProtoLogAgentDetailsFormProperties>({
		});

	}


	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } */
	export interface Empty {
	}

	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } */
	export interface EmptyFormProperties {
	}
	export function CreateEmptyFormGroup() {
		return new FormGroup<EmptyFormProperties>({
		});

	}


	/** A BeyondCorp AppConnection resource represents a BeyondCorp protected AppConnection to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppConnection. Multiple connectors can be authorised for a single AppConnection. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnection {

		/** ApplicationEndpoint represents a remote application endpoint. */
		applicationEndpoint?: GoogleCloudBeyondcorpAppconnectionsV1AppConnectionApplicationEndpoint;

		/** Optional. List of [google.cloud.beyondcorp.v1main.Connector.name] that are authorised to be associated with this AppConnection. */
		connectors?: Array<string>;

		/** Output only. Timestamp when the resource was created. */
		createTime?: string | null;

		/** Optional. An arbitrary user-provided name for the AppConnection. Cannot exceed 64 characters. */
		displayName?: string | null;

		/** Gateway represents a user facing component that serves as an entrance to enable connectivity. */
		gateway?: GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGateway;

		/** Optional. Resource labels to represent user provided metadata. */
		labels?: {[id: string]: string };

		/** Required. Unique resource name of the AppConnection. The name is ignored when creating a AppConnection. */
		name?: string | null;

		/** Output only. The current state of the AppConnection. */
		state?: AppGatewayState | null;

		/** Required. The type of network connectivity used by the AppConnection. */
		type?: AppGatewayType | null;

		/** Output only. A unique identifier for the instance generated by the system. */
		uid?: string | null;

		/** Output only. Timestamp when the resource was last modified. */
		updateTime?: string | null;
	}

	/** A BeyondCorp AppConnection resource represents a BeyondCorp protected AppConnection to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppConnection. Multiple connectors can be authorised for a single AppConnection. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnectionFormProperties {

		/** Output only. Timestamp when the resource was created. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. An arbitrary user-provided name for the AppConnection. Cannot exceed 64 characters. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Resource labels to represent user provided metadata. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. Unique resource name of the AppConnection. The name is ignored when creating a AppConnection. */
		name: FormControl<string | null | undefined>,

		/** Output only. The current state of the AppConnection. */
		state: FormControl<AppGatewayState | null | undefined>,

		/** Required. The type of network connectivity used by the AppConnection. */
		type: FormControl<AppGatewayType | null | undefined>,

		/** Output only. A unique identifier for the instance generated by the system. */
		uid: FormControl<string | null | undefined>,

		/** Output only. Timestamp when the resource was last modified. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1AppConnectionFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1AppConnectionFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<AppGatewayState | null | undefined>(undefined),
			type: new FormControl<AppGatewayType | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ApplicationEndpoint represents a remote application endpoint. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnectionApplicationEndpoint {

		/** Required. Hostname or IP address of the remote application endpoint. */
		host?: string | null;

		/** Required. Port of the remote application endpoint. */
		port?: number | null;
	}

	/** ApplicationEndpoint represents a remote application endpoint. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnectionApplicationEndpointFormProperties {

		/** Required. Hostname or IP address of the remote application endpoint. */
		host: FormControl<string | null | undefined>,

		/** Required. Port of the remote application endpoint. */
		port: FormControl<number | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1AppConnectionApplicationEndpointFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1AppConnectionApplicationEndpointFormProperties>({
			host: new FormControl<string | null | undefined>(undefined),
			port: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Gateway represents a user facing component that serves as an entrance to enable connectivity. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGateway {

		/** Required. AppGateway name in following format: `projects/{project_id}/locations/{location_id}/appgateways/{gateway_id}` */
		appGateway?: string | null;

		/** Output only. Ingress port reserved on the gateways for this AppConnection, if not specified or zero, the default port is 19443. */
		ingressPort?: number | null;

		/** Output only. L7 private service connection for this resource. */
		l7psc?: string | null;

		/** Required. The type of hosting used by the gateway. */
		type?: GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGatewayType | null;

		/** Output only. Server-defined URI for this resource. */
		uri?: string | null;
	}

	/** Gateway represents a user facing component that serves as an entrance to enable connectivity. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGatewayFormProperties {

		/** Required. AppGateway name in following format: `projects/{project_id}/locations/{location_id}/appgateways/{gateway_id}` */
		appGateway: FormControl<string | null | undefined>,

		/** Output only. Ingress port reserved on the gateways for this AppConnection, if not specified or zero, the default port is 19443. */
		ingressPort: FormControl<number | null | undefined>,

		/** Output only. L7 private service connection for this resource. */
		l7psc: FormControl<string | null | undefined>,

		/** Required. The type of hosting used by the gateway. */
		type: FormControl<GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGatewayType | null | undefined>,

		/** Output only. Server-defined URI for this resource. */
		uri: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1AppConnectionGatewayFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGatewayFormProperties>({
			appGateway: new FormControl<string | null | undefined>(undefined),
			ingressPort: new FormControl<number | null | undefined>(undefined),
			l7psc: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGatewayType | null | undefined>(undefined),
			uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGatewayType { TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED', GCP_REGIONAL_MIG = 'GCP_REGIONAL_MIG' }


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnectionOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1AppConnectionOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1AppConnectionOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1AppConnectionOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for BeyondCorp.ListAppConnections. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse {

		/** A list of BeyondCorp AppConnections in the project. */
		appConnections?: Array<GoogleCloudBeyondcorpAppconnectionsV1AppConnection>;

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** A list of locations that could not be reached. */
		unreachable?: Array<string>;
	}

	/** Response message for BeyondCorp.ListAppConnections. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponseFormProperties {

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponseFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for BeyondCorp.ResolveAppConnections. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse {

		/** A list of BeyondCorp AppConnections with details in the project. */
		appConnectionDetails?: Array<GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseAppConnectionDetails>;

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** A list of locations that could not be reached. */
		unreachable?: Array<string>;
	}

	/** Response message for BeyondCorp.ResolveAppConnections. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseFormProperties {

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details of the AppConnection. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseAppConnectionDetails {

		/** A BeyondCorp AppConnection resource represents a BeyondCorp protected AppConnection to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppConnection. Multiple connectors can be authorised for a single AppConnection. */
		appConnection?: GoogleCloudBeyondcorpAppconnectionsV1AppConnection;

		/** If type=GCP_REGIONAL_MIG, contains most recent VM instances, like `https://www.googleapis.com/compute/v1/projects/{project_id}/zones/{zone_id}/instances/{instance_id}`. */
		recentMigVms?: Array<string>;
	}

	/** Details of the AppConnection. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseAppConnectionDetailsFormProperties {
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseAppConnectionDetailsFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseAppConnectionDetailsFormProperties>({
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A BeyondCorp connector resource that represents an application facing component deployed proximal to and with direct access to the application instances. It is used to establish connectivity between the remote enterprise environment and GCP. It initiates connections to the applications and can proxy the data from users over the connection. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnector {

		/** Output only. Timestamp when the resource was created. */
		createTime?: string | null;

		/** Optional. An arbitrary user-provided name for the AppConnector. Cannot exceed 64 characters. */
		displayName?: string | null;

		/** Optional. Resource labels to represent user provided metadata. */
		labels?: {[id: string]: string };

		/** Required. Unique resource name of the AppConnector. The name is ignored when creating a AppConnector. */
		name?: string | null;

		/** PrincipalInfo represents an Identity oneof. */
		principalInfo?: GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfo;

		/** ResourceInfo represents the information/status of an app connector resource. Such as: - remote_agent - container - runtime - appgateway - appconnector - appconnection - tunnel - logagent */
		resourceInfo?: GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo;

		/** Output only. The current state of the AppConnector. */
		state?: AppGatewayState | null;

		/** Output only. A unique identifier for the instance generated by the system. */
		uid?: string | null;

		/** Output only. Timestamp when the resource was last modified. */
		updateTime?: string | null;
	}

	/** A BeyondCorp connector resource that represents an application facing component deployed proximal to and with direct access to the application instances. It is used to establish connectivity between the remote enterprise environment and GCP. It initiates connections to the applications and can proxy the data from users over the connection. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorFormProperties {

		/** Output only. Timestamp when the resource was created. */
		createTime: FormControl<string | null | undefined>,

		/** Optional. An arbitrary user-provided name for the AppConnector. Cannot exceed 64 characters. */
		displayName: FormControl<string | null | undefined>,

		/** Optional. Resource labels to represent user provided metadata. */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** Required. Unique resource name of the AppConnector. The name is ignored when creating a AppConnector. */
		name: FormControl<string | null | undefined>,

		/** Output only. The current state of the AppConnector. */
		state: FormControl<AppGatewayState | null | undefined>,

		/** Output only. A unique identifier for the instance generated by the system. */
		uid: FormControl<string | null | undefined>,

		/** Output only. Timestamp when the resource was last modified. */
		updateTime: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1AppConnectorFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1AppConnectorFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<AppGatewayState | null | undefined>(undefined),
			uid: new FormControl<string | null | undefined>(undefined),
			updateTime: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PrincipalInfo represents an Identity oneof. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfo {

		/** ServiceAccount represents a GCP service account. */
		serviceAccount?: GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoServiceAccount;
	}

	/** PrincipalInfo represents an Identity oneof. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoFormProperties {
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoFormProperties>({
		});

	}


	/** ServiceAccount represents a GCP service account. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoServiceAccount {

		/** Email address of the service account. */
		email?: string | null;
	}

	/** ServiceAccount represents a GCP service account. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoServiceAccountFormProperties {

		/** Email address of the service account. */
		email: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoServiceAccountFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoServiceAccountFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ResourceInfo represents the information/status of an app connector resource. Such as: - remote_agent - container - runtime - appgateway - appconnector - appconnection - tunnel - logagent */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo {

		/** Required. Unique Id for the resource. */
		id?: string | null;

		/** Specific details for the resource. This is for internal use only. */
		resource?: {[id: string]: any };

		/** Overall health status. Overall status is derived based on the status of each sub level resources. */
		status?: GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoStatus | null;

		/** List of Info for the sub level resources. */
		sub?: Array<GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo>;

		/** The timestamp to collect the info. It is suggested to be set by the topmost level resource only. */
		time?: string | null;
	}

	/** ResourceInfo represents the information/status of an app connector resource. Such as: - remote_agent - container - runtime - appgateway - appconnector - appconnection - tunnel - logagent */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoFormProperties {

		/** Required. Unique Id for the resource. */
		id: FormControl<string | null | undefined>,

		/** Specific details for the resource. This is for internal use only. */
		resource: FormControl<{[id: string]: any } | null | undefined>,

		/** Overall health status. Overall status is derived based on the status of each sub level resources. */
		status: FormControl<GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoStatus | null | undefined>,

		/** The timestamp to collect the info. It is suggested to be set by the topmost level resource only. */
		time: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1ResourceInfoFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			resource: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			status: new FormControl<GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoStatus | null | undefined>(undefined),
			time: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum GoogleCloudBeyondcorpAppconnectorsV1ResourceInfoStatus { HEALTH_STATUS_UNSPECIFIED = 'HEALTH_STATUS_UNSPECIFIED', HEALTHY = 'HEALTHY', UNHEALTHY = 'UNHEALTHY', UNRESPONSIVE = 'UNRESPONSIVE', DEGRADED = 'DEGRADED' }


	/** AppConnectorInstanceConfig defines the instance config of a AppConnector. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorInstanceConfig {

		/** ImageConfig defines the control plane images to run. */
		imageConfig?: GoogleCloudBeyondcorpAppconnectorsV1ImageConfig;

		/** The SLM instance agent configuration. */
		instanceConfig?: {[id: string]: any };

		/** NotificationConfig defines the mechanisms to notify instance agent. */
		notificationConfig?: GoogleCloudBeyondcorpAppconnectorsV1NotificationConfig;

		/** Required. A monotonically increasing number generated and maintained by the API provider. Every time a config changes in the backend, the sequenceNumber should be bumped up to reflect the change. */
		sequenceNumber?: string | null;
	}

	/** AppConnectorInstanceConfig defines the instance config of a AppConnector. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorInstanceConfigFormProperties {

		/** The SLM instance agent configuration. */
		instanceConfig: FormControl<{[id: string]: any } | null | undefined>,

		/** Required. A monotonically increasing number generated and maintained by the API provider. Every time a config changes in the backend, the sequenceNumber should be bumped up to reflect the change. */
		sequenceNumber: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1AppConnectorInstanceConfigFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1AppConnectorInstanceConfigFormProperties>({
			instanceConfig: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			sequenceNumber: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ImageConfig defines the control plane images to run. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ImageConfig {

		/** The stable image that the remote agent will fallback to if the target image fails. Format would be a gcr image path, e.g.: gcr.io/PROJECT-ID/my-image:tag1 */
		stableImage?: string | null;

		/** The initial image the remote agent will attempt to run for the control plane. Format would be a gcr image path, e.g.: gcr.io/PROJECT-ID/my-image:tag1 */
		targetImage?: string | null;
	}

	/** ImageConfig defines the control plane images to run. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ImageConfigFormProperties {

		/** The stable image that the remote agent will fallback to if the target image fails. Format would be a gcr image path, e.g.: gcr.io/PROJECT-ID/my-image:tag1 */
		stableImage: FormControl<string | null | undefined>,

		/** The initial image the remote agent will attempt to run for the control plane. Format would be a gcr image path, e.g.: gcr.io/PROJECT-ID/my-image:tag1 */
		targetImage: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1ImageConfigFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1ImageConfigFormProperties>({
			stableImage: new FormControl<string | null | undefined>(undefined),
			targetImage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** NotificationConfig defines the mechanisms to notify instance agent. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1NotificationConfig {

		/** The configuration for Pub/Sub messaging for the AppConnector. */
		pubsubNotification?: GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigCloudPubSubNotificationConfig;
	}

	/** NotificationConfig defines the mechanisms to notify instance agent. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigFormProperties {
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1NotificationConfigFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigFormProperties>({
		});

	}


	/** The configuration for Pub/Sub messaging for the AppConnector. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigCloudPubSubNotificationConfig {

		/** The Pub/Sub subscription the AppConnector uses to receive notifications. */
		pubsubSubscription?: string | null;
	}

	/** The configuration for Pub/Sub messaging for the AppConnector. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigCloudPubSubNotificationConfigFormProperties {

		/** The Pub/Sub subscription the AppConnector uses to receive notifications. */
		pubsubSubscription: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1NotificationConfigCloudPubSubNotificationConfigFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigCloudPubSubNotificationConfigFormProperties>({
			pubsubSubscription: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1AppConnectorOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1AppConnectorOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1AppConnectorOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ContainerHealthDetails reflects the health details of a container. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ContainerHealthDetails {

		/** The version of the current config. */
		currentConfigVersion?: string | null;

		/** The latest error message. */
		errorMsg?: string | null;

		/** The version of the expected config. */
		expectedConfigVersion?: string | null;

		/** The extended status. Such as ExitCode, StartedAt, FinishedAt, etc. */
		extendedStatus?: {[id: string]: string };
	}

	/** ContainerHealthDetails reflects the health details of a container. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ContainerHealthDetailsFormProperties {

		/** The version of the current config. */
		currentConfigVersion: FormControl<string | null | undefined>,

		/** The latest error message. */
		errorMsg: FormControl<string | null | undefined>,

		/** The version of the expected config. */
		expectedConfigVersion: FormControl<string | null | undefined>,

		/** The extended status. Such as ExitCode, StartedAt, FinishedAt, etc. */
		extendedStatus: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1ContainerHealthDetailsFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1ContainerHealthDetailsFormProperties>({
			currentConfigVersion: new FormControl<string | null | undefined>(undefined),
			errorMsg: new FormControl<string | null | undefined>(undefined),
			expectedConfigVersion: new FormControl<string | null | undefined>(undefined),
			extendedStatus: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** Response message for BeyondCorp.ListAppConnectors. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse {

		/** A list of BeyondCorp AppConnectors in the project. */
		appConnectors?: Array<GoogleCloudBeyondcorpAppconnectorsV1AppConnector>;

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** A list of locations that could not be reached. */
		unreachable?: Array<string>;
	}

	/** Response message for BeyondCorp.ListAppConnectors. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponseFormProperties {

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponseFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** RemoteAgentDetails reflects the details of a remote agent. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1RemoteAgentDetails {
	}

	/** RemoteAgentDetails reflects the details of a remote agent. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1RemoteAgentDetailsFormProperties {
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1RemoteAgentDetailsFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1RemoteAgentDetailsFormProperties>({
		});

	}


	/** Request report the connector status. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequest {

		/** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000). */
		requestId?: string | null;

		/** ResourceInfo represents the information/status of an app connector resource. Such as: - remote_agent - container - runtime - appgateway - appconnector - appconnection - tunnel - logagent */
		resourceInfo?: GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo;

		/** Optional. If set, validates request by executing a dry-run which would not alter the resource in any way. */
		validateOnly?: boolean | null;
	}

	/** Request report the connector status. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequestFormProperties {

		/** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000). */
		requestId: FormControl<string | null | undefined>,

		/** Optional. If set, validates request by executing a dry-run which would not alter the resource in any way. */
		validateOnly: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequestFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequestFormProperties>({
			requestId: new FormControl<string | null | undefined>(undefined),
			validateOnly: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Response message for BeyondCorp.ResolveInstanceConfig. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse {

		/** AppConnectorInstanceConfig defines the instance config of a AppConnector. */
		instanceConfig?: GoogleCloudBeyondcorpAppconnectorsV1AppConnectorInstanceConfig;
	}

	/** Response message for BeyondCorp.ResolveInstanceConfig. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponseFormProperties {
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponseFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponseFormProperties>({
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1alphaAppConnectorOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1alphaAppConnectorOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1alphaAppConnectorOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1alphaAppConnectorOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ContainerHealthDetails reflects the health details of a container. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1alphaContainerHealthDetails {

		/** The version of the current config. */
		currentConfigVersion?: string | null;

		/** The latest error message. */
		errorMsg?: string | null;

		/** The version of the expected config. */
		expectedConfigVersion?: string | null;

		/** The extended status. Such as ExitCode, StartedAt, FinishedAt, etc. */
		extendedStatus?: {[id: string]: string };
	}

	/** ContainerHealthDetails reflects the health details of a container. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1alphaContainerHealthDetailsFormProperties {

		/** The version of the current config. */
		currentConfigVersion: FormControl<string | null | undefined>,

		/** The latest error message. */
		errorMsg: FormControl<string | null | undefined>,

		/** The version of the expected config. */
		expectedConfigVersion: FormControl<string | null | undefined>,

		/** The extended status. Such as ExitCode, StartedAt, FinishedAt, etc. */
		extendedStatus: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1alphaContainerHealthDetailsFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1alphaContainerHealthDetailsFormProperties>({
			currentConfigVersion: new FormControl<string | null | undefined>(undefined),
			errorMsg: new FormControl<string | null | undefined>(undefined),
			expectedConfigVersion: new FormControl<string | null | undefined>(undefined),
			extendedStatus: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** RemoteAgentDetails reflects the details of a remote agent. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1alphaRemoteAgentDetails {
	}

	/** RemoteAgentDetails reflects the details of a remote agent. */
	export interface GoogleCloudBeyondcorpAppconnectorsV1alphaRemoteAgentDetailsFormProperties {
	}
	export function CreateGoogleCloudBeyondcorpAppconnectorsV1alphaRemoteAgentDetailsFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppconnectorsV1alphaRemoteAgentDetailsFormProperties>({
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppgatewaysV1alphaAppGatewayOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpAppgatewaysV1alphaAppGatewayOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpAppgatewaysV1alphaAppGatewayOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpAppgatewaysV1alphaAppGatewayOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpConnectionsV1alphaConnectionOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpConnectionsV1alphaConnectionOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpConnectionsV1alphaConnectionOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpConnectionsV1alphaConnectionOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpConnectorsV1alphaConnectorOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpConnectorsV1alphaConnectorOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpConnectorsV1alphaConnectorOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpConnectorsV1alphaConnectorOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ContainerHealthDetails reflects the health details of a container. */
	export interface GoogleCloudBeyondcorpConnectorsV1alphaContainerHealthDetails {

		/** The version of the current config. */
		currentConfigVersion?: string | null;

		/** The latest error message. */
		errorMsg?: string | null;

		/** The version of the expected config. */
		expectedConfigVersion?: string | null;

		/** The extended status. Such as ExitCode, StartedAt, FinishedAt, etc. */
		extendedStatus?: {[id: string]: string };
	}

	/** ContainerHealthDetails reflects the health details of a container. */
	export interface GoogleCloudBeyondcorpConnectorsV1alphaContainerHealthDetailsFormProperties {

		/** The version of the current config. */
		currentConfigVersion: FormControl<string | null | undefined>,

		/** The latest error message. */
		errorMsg: FormControl<string | null | undefined>,

		/** The version of the expected config. */
		expectedConfigVersion: FormControl<string | null | undefined>,

		/** The extended status. Such as ExitCode, StartedAt, FinishedAt, etc. */
		extendedStatus: FormControl<{[id: string]: string } | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpConnectorsV1alphaContainerHealthDetailsFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpConnectorsV1alphaContainerHealthDetailsFormProperties>({
			currentConfigVersion: new FormControl<string | null | undefined>(undefined),
			errorMsg: new FormControl<string | null | undefined>(undefined),
			expectedConfigVersion: new FormControl<string | null | undefined>(undefined),
			extendedStatus: new FormControl<{[id: string]: string } | null | undefined>(undefined),
		});

	}


	/** RemoteAgentDetails reflects the details of a remote agent. */
	export interface GoogleCloudBeyondcorpConnectorsV1alphaRemoteAgentDetails {
	}

	/** RemoteAgentDetails reflects the details of a remote agent. */
	export interface GoogleCloudBeyondcorpConnectorsV1alphaRemoteAgentDetailsFormProperties {
	}
	export function CreateGoogleCloudBeyondcorpConnectorsV1alphaRemoteAgentDetailsFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpConnectorsV1alphaRemoteAgentDetailsFormProperties>({
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerServiceOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the caller has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerServiceOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the caller has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpPartnerservicesV1alphaPartnerServiceOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpPartnerservicesV1alphaPartnerServiceOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpPartnerservicesV1mainPartnerServiceOperationMetadata {

		/** Output only. API version used to start the operation. */
		apiVersion?: string | null;

		/** Output only. The time the operation was created. */
		createTime?: string | null;

		/** Output only. The time the operation finished running. */
		endTime?: string | null;

		/** Output only. Identifies whether the caller has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation?: boolean | null;

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage?: string | null;

		/** Output only. Server-defined resource path for the target of the operation. */
		target?: string | null;

		/** Output only. Name of the verb executed by the operation. */
		verb?: string | null;
	}

	/** Represents the metadata of the long-running operation. */
	export interface GoogleCloudBeyondcorpPartnerservicesV1mainPartnerServiceOperationMetadataFormProperties {

		/** Output only. API version used to start the operation. */
		apiVersion: FormControl<string | null | undefined>,

		/** Output only. The time the operation was created. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. The time the operation finished running. */
		endTime: FormControl<string | null | undefined>,

		/** Output only. Identifies whether the caller has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
		requestedCancellation: FormControl<boolean | null | undefined>,

		/** Output only. Human-readable status of the operation, if any. */
		statusMessage: FormControl<string | null | undefined>,

		/** Output only. Server-defined resource path for the target of the operation. */
		target: FormControl<string | null | undefined>,

		/** Output only. Name of the verb executed by the operation. */
		verb: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudBeyondcorpPartnerservicesV1mainPartnerServiceOperationMetadataFormGroup() {
		return new FormGroup<GoogleCloudBeyondcorpPartnerservicesV1mainPartnerServiceOperationMetadataFormProperties>({
			apiVersion: new FormControl<string | null | undefined>(undefined),
			createTime: new FormControl<string | null | undefined>(undefined),
			endTime: new FormControl<string | null | undefined>(undefined),
			requestedCancellation: new FormControl<boolean | null | undefined>(undefined),
			statusMessage: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			verb: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Locations.ListLocations. */
	export interface GoogleCloudLocationListLocationsResponse {

		/** A list of locations that matches the specified filter in the request. */
		locations?: Array<GoogleCloudLocationLocation>;

		/** The standard List next-page token. */
		nextPageToken?: string | null;
	}

	/** The response message for Locations.ListLocations. */
	export interface GoogleCloudLocationListLocationsResponseFormProperties {

		/** The standard List next-page token. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudLocationListLocationsResponseFormGroup() {
		return new FormGroup<GoogleCloudLocationListLocationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A resource that represents a Google Cloud location. */
	export interface GoogleCloudLocationLocation {

		/** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
		displayName?: string | null;

		/** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
		labels?: {[id: string]: string };

		/** The canonical id for this location. For example: `"us-east1"`. */
		locationId?: string | null;

		/** Service-specific metadata. For example the available capacity at the given location. */
		metadata?: {[id: string]: any };

		/** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
		name?: string | null;
	}

	/** A resource that represents a Google Cloud location. */
	export interface GoogleCloudLocationLocationFormProperties {

		/** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
		displayName: FormControl<string | null | undefined>,

		/** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** The canonical id for this location. For example: `"us-east1"`. */
		locationId: FormControl<string | null | undefined>,

		/** Service-specific metadata. For example the available capacity at the given location. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,

		/** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
		name: FormControl<string | null | undefined>,
	}
	export function CreateGoogleCloudLocationLocationFormGroup() {
		return new FormGroup<GoogleCloudLocationLocationFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			locationId: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging. */
	export interface GoogleIamV1AuditConfig {

		/** The configuration for logging of each type of permission. */
		auditLogConfigs?: Array<GoogleIamV1AuditLogConfig>;

		/** Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
		service?: string | null;
	}

	/** Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging. */
	export interface GoogleIamV1AuditConfigFormProperties {

		/** Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services. */
		service: FormControl<string | null | undefined>,
	}
	export function CreateGoogleIamV1AuditConfigFormGroup() {
		return new FormGroup<GoogleIamV1AuditConfigFormProperties>({
			service: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging. */
	export interface GoogleIamV1AuditLogConfig {

		/** Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members. */
		exemptedMembers?: Array<string>;

		/** The log type that this config enables. */
		logType?: GoogleIamV1AuditLogConfigLogType | null;
	}

	/** Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging. */
	export interface GoogleIamV1AuditLogConfigFormProperties {

		/** The log type that this config enables. */
		logType: FormControl<GoogleIamV1AuditLogConfigLogType | null | undefined>,
	}
	export function CreateGoogleIamV1AuditLogConfigFormGroup() {
		return new FormGroup<GoogleIamV1AuditLogConfigFormProperties>({
			logType: new FormControl<GoogleIamV1AuditLogConfigLogType | null | undefined>(undefined),
		});

	}

	export enum GoogleIamV1AuditLogConfigLogType { LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED', ADMIN_READ = 'ADMIN_READ', DATA_WRITE = 'DATA_WRITE', DATA_READ = 'DATA_READ' }


	/** Associates `members`, or principals, with a `role`. */
	export interface GoogleIamV1Binding {

		/** Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
		condition?: GoogleTypeExpr;

		/** Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. */
		members?: Array<string>;

		/** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
		role?: string | null;
	}

	/** Associates `members`, or principals, with a `role`. */
	export interface GoogleIamV1BindingFormProperties {

		/** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
		role: FormControl<string | null | undefined>,
	}
	export function CreateGoogleIamV1BindingFormGroup() {
		return new FormGroup<GoogleIamV1BindingFormProperties>({
			role: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
	export interface GoogleTypeExpr {

		/** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
		description?: string | null;

		/** Textual representation of an expression in Common Expression Language syntax. */
		expression?: string | null;

		/** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
		location?: string | null;

		/** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
		title?: string | null;
	}

	/** Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information. */
	export interface GoogleTypeExprFormProperties {

		/** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
		description: FormControl<string | null | undefined>,

		/** Textual representation of an expression in Common Expression Language syntax. */
		expression: FormControl<string | null | undefined>,

		/** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
		location: FormControl<string | null | undefined>,

		/** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateGoogleTypeExprFormGroup() {
		return new FormGroup<GoogleTypeExprFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			expression: new FormControl<string | null | undefined>(undefined),
			location: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
	export interface GoogleIamV1Policy {

		/** Specifies cloud audit logging configuration for this policy. */
		auditConfigs?: Array<GoogleIamV1AuditConfig>;

		/** Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`. */
		bindings?: Array<GoogleIamV1Binding>;

		/** `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. */
		etag?: string | null;

		/** Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
		version?: number | null;
	}

	/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
	export interface GoogleIamV1PolicyFormProperties {

		/** `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. */
		etag: FormControl<string | null | undefined>,

		/** Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
		version: FormControl<number | null | undefined>,
	}
	export function CreateGoogleIamV1PolicyFormGroup() {
		return new FormGroup<GoogleIamV1PolicyFormProperties>({
			etag: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Request message for `SetIamPolicy` method. */
	export interface GoogleIamV1SetIamPolicyRequest {

		/** An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/). */
		policy?: GoogleIamV1Policy;

		/** OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"` */
		updateMask?: string | null;
	}

	/** Request message for `SetIamPolicy` method. */
	export interface GoogleIamV1SetIamPolicyRequestFormProperties {

		/** OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"` */
		updateMask: FormControl<string | null | undefined>,
	}
	export function CreateGoogleIamV1SetIamPolicyRequestFormGroup() {
		return new FormGroup<GoogleIamV1SetIamPolicyRequestFormProperties>({
			updateMask: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Request message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsRequest {

		/** The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions). */
		permissions?: Array<string>;
	}

	/** Request message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsRequestFormProperties {
	}
	export function CreateGoogleIamV1TestIamPermissionsRequestFormGroup() {
		return new FormGroup<GoogleIamV1TestIamPermissionsRequestFormProperties>({
		});

	}


	/** Response message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsResponse {

		/** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
		permissions?: Array<string>;
	}

	/** Response message for `TestIamPermissions` method. */
	export interface GoogleIamV1TestIamPermissionsResponseFormProperties {
	}
	export function CreateGoogleIamV1TestIamPermissionsResponseFormGroup() {
		return new FormGroup<GoogleIamV1TestIamPermissionsResponseFormProperties>({
		});

	}


	/** The request message for Operations.CancelOperation. */
	export interface GoogleLongrunningCancelOperationRequest {
	}

	/** The request message for Operations.CancelOperation. */
	export interface GoogleLongrunningCancelOperationRequestFormProperties {
	}
	export function CreateGoogleLongrunningCancelOperationRequestFormGroup() {
		return new FormGroup<GoogleLongrunningCancelOperationRequestFormProperties>({
		});

	}


	/** The response message for Operations.ListOperations. */
	export interface GoogleLongrunningListOperationsResponse {

		/** The standard List next-page token. */
		nextPageToken?: string | null;

		/** A list of operations that matches the specified filter in the request. */
		operations?: Array<GoogleLongrunningOperation>;
	}

	/** The response message for Operations.ListOperations. */
	export interface GoogleLongrunningListOperationsResponseFormProperties {

		/** The standard List next-page token. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateGoogleLongrunningListOperationsResponseFormGroup() {
		return new FormGroup<GoogleLongrunningListOperationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This resource represents a long-running operation that is the result of a network API call. */
	export interface GoogleLongrunningOperation {

		/** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
		done?: boolean | null;

		/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
		error?: GoogleRpcStatus;

		/** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata?: {[id: string]: any };

		/** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
		name?: string | null;

		/** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
		response?: {[id: string]: any };
	}

	/** This resource represents a long-running operation that is the result of a network API call. */
	export interface GoogleLongrunningOperationFormProperties {

		/** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
		done: FormControl<boolean | null | undefined>,

		/** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,

		/** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
		name: FormControl<string | null | undefined>,

		/** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
		response: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateGoogleLongrunningOperationFormGroup() {
		return new FormGroup<GoogleLongrunningOperationFormProperties>({
			done: new FormControl<boolean | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
	export interface GoogleRpcStatus {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code?: number | null;

		/** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
		details?: Array<string>;

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message?: string | null;
	}

	/** The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
	export interface GoogleRpcStatusFormProperties {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code: FormControl<number | null | undefined>,

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateGoogleRpcStatusFormGroup() {
		return new FormGroup<GoogleRpcStatusFormProperties>({
			code: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for BeyondCorp.ListAppGateways. */
	export interface ListAppGatewaysResponse {

		/** A list of BeyondCorp AppGateways in the project. */
		appGateways?: Array<AppGateway>;

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken?: string | null;

		/** A list of locations that could not be reached. */
		unreachable?: Array<string>;
	}

	/** Response message for BeyondCorp.ListAppGateways. */
	export interface ListAppGatewaysResponseFormProperties {

		/** A token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListAppGatewaysResponseFormGroup() {
		return new FormGroup<ListAppGatewaysResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** TunnelerError is an error proto for errors returned by the connection manager. */
	export interface Tunnelv1ProtoTunnelerError {

		/** Original raw error */
		err?: string | null;

		/** retryable isn't used for now, but we may want to reuse it in the future. */
		retryable?: boolean | null;
	}

	/** TunnelerError is an error proto for errors returned by the connection manager. */
	export interface Tunnelv1ProtoTunnelerErrorFormProperties {

		/** Original raw error */
		err: FormControl<string | null | undefined>,

		/** retryable isn't used for now, but we may want to reuse it in the future. */
		retryable: FormControl<boolean | null | undefined>,
	}
	export function CreateTunnelv1ProtoTunnelerErrorFormGroup() {
		return new FormGroup<Tunnelv1ProtoTunnelerErrorFormProperties>({
			err: new FormControl<string | null | undefined>(undefined),
			retryable: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** TunnelerInfo contains metadata about tunneler launched by connection manager. */
	export interface Tunnelv1ProtoTunnelerInfo {

		/** backoff_retry_count stores the number of times the tunneler has been retried by tunManager for current backoff sequence. Gets reset to 0 if time difference between 2 consecutive retries exceeds backoffRetryResetTime. */
		backoffRetryCount?: number | null;

		/** id is the unique id of a tunneler. */
		id?: string | null;

		/** TunnelerError is an error proto for errors returned by the connection manager. */
		latestErr?: Tunnelv1ProtoTunnelerError;

		/** latest_retry_time stores the time when the tunneler was last restarted. */
		latestRetryTime?: string | null;

		/** total_retry_count stores the total number of times the tunneler has been retried by tunManager. */
		totalRetryCount?: number | null;
	}

	/** TunnelerInfo contains metadata about tunneler launched by connection manager. */
	export interface Tunnelv1ProtoTunnelerInfoFormProperties {

		/** backoff_retry_count stores the number of times the tunneler has been retried by tunManager for current backoff sequence. Gets reset to 0 if time difference between 2 consecutive retries exceeds backoffRetryResetTime. */
		backoffRetryCount: FormControl<number | null | undefined>,

		/** id is the unique id of a tunneler. */
		id: FormControl<string | null | undefined>,

		/** latest_retry_time stores the time when the tunneler was last restarted. */
		latestRetryTime: FormControl<string | null | undefined>,

		/** total_retry_count stores the total number of times the tunneler has been retried by tunManager. */
		totalRetryCount: FormControl<number | null | undefined>,
	}
	export function CreateTunnelv1ProtoTunnelerInfoFormGroup() {
		return new FormGroup<Tunnelv1ProtoTunnelerInfoFormProperties>({
			backoffRetryCount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			latestRetryTime: new FormControl<string | null | undefined>(undefined),
			totalRetryCount: new FormControl<number | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Report status for a given connector.
		 * Post v1/{appConnector}:reportStatus
		 * @param {string} appConnector Required. BeyondCorp Connector name using the form: `projects/{project_id}/locations/{location_id}/connectors/{connector}`
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Beyondcorp_projects_locations_appConnectors_reportStatus(appConnector: string, requestBody: GoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequest): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v1/' + (appConnector == null ? '' : encodeURIComponent(appConnector)) + ':reportStatus', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets instance configuration for a given AppConnector. An internal method called by a AppConnector to get its container config.
		 * Get v1/{appConnector}:resolveInstanceConfig
		 * @param {string} appConnector Required. BeyondCorp AppConnector name using the form: `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector}`
		 * @return {GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse} Successful response
		 */
		Beyondcorp_projects_locations_appConnectors_resolveInstanceConfig(appConnector: string): Observable<GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse> {
			return this.http.get<GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse>(this.baseUri + 'v1/' + (appConnector == null ? '' : encodeURIComponent(appConnector)) + ':resolveInstanceConfig', {});
		}

		/**
		 * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
		 * Delete v1/{name}
		 * @param {string} name The name of the operation resource to be deleted.
		 * @param {string} requestId Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
		 * @return {Empty} Successful response
		 */
		Beyondcorp_projects_locations_operations_delete(name: string, requestId: string | null | undefined, validateOnly: boolean | null | undefined): Observable<Empty> {
			return this.http.delete<Empty>(this.baseUri + 'v1/' + (name == null ? '' : encodeURIComponent(name)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, {});
		}

		/**
		 * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		 * Get v1/{name}
		 * @param {string} name The name of the operation resource.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Beyondcorp_projects_locations_operations_get(name: string): Observable<GoogleLongrunningOperation> {
			return this.http.get<GoogleLongrunningOperation>(this.baseUri + 'v1/' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Updates the parameters of a single AppConnector.
		 * Patch v1/{name}
		 * @param {string} name Required. Unique resource name of the AppConnector. The name is ignored when creating a AppConnector.
		 * @param {string} requestId Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {string} updateMask Required. Mask of fields to update. At least one path must be supplied in this field. The elements of the repeated paths field may only include these fields from [BeyondCorp.AppConnector]: * `labels` * `display_name`
		 * @param {boolean} validateOnly Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Beyondcorp_projects_locations_appConnectors_patch(name: string, requestId: string | null | undefined, updateMask: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: GoogleCloudBeyondcorpAppconnectorsV1AppConnector): Observable<GoogleLongrunningOperation> {
			return this.http.patch<GoogleLongrunningOperation>(this.baseUri + 'v1/' + (name == null ? '' : encodeURIComponent(name)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists information about the supported locations for this service.
		 * Get v1/{name}/locations
		 * @param {string} name The resource that owns the locations collection, if applicable.
		 * @param {string} filter A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
		 * @param {number} pageSize The maximum number of results to return. If not set, the service selects a default.
		 * @param {string} pageToken A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.
		 * @return {GoogleCloudLocationListLocationsResponse} Successful response
		 */
		Beyondcorp_projects_locations_list(name: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudLocationListLocationsResponse> {
			return this.http.get<GoogleCloudLocationListLocationsResponse>(this.baseUri + 'v1/' + (name == null ? '' : encodeURIComponent(name)) + '/locations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		 * Get v1/{name}/operations
		 * @param {string} name The name of the operation's parent resource.
		 * @param {string} filter The standard list filter.
		 * @param {number} pageSize The standard list page size.
		 * @param {string} pageToken The standard list page token.
		 * @return {GoogleLongrunningListOperationsResponse} Successful response
		 */
		Beyondcorp_projects_locations_operations_list(name: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleLongrunningListOperationsResponse> {
			return this.http.get<GoogleLongrunningListOperationsResponse>(this.baseUri + 'v1/' + (name == null ? '' : encodeURIComponent(name)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		 * Post v1/{name}:cancel
		 * @param {string} name The name of the operation resource to be cancelled.
		 * @return {Empty} Successful response
		 */
		Beyondcorp_projects_locations_operations_cancel(name: string, requestBody: GoogleLongrunningCancelOperationRequest): Observable<Empty> {
			return this.http.post<Empty>(this.baseUri + 'v1/' + (name == null ? '' : encodeURIComponent(name)) + ':cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists AppConnections in a given project and location.
		 * Get v1/{parent}/appConnections
		 * @param {string} parent Required. The resource name of the AppConnection location using the form: `projects/{project_id}/locations/{location_id}`
		 * @param {string} filter Optional. A filter specifying constraints of a list operation.
		 * @param {string} orderBy Optional. Specifies the ordering of results. See [Sorting order](https://cloud.google.com/apis/design/design_patterns#sorting_order) for more information.
		 * @param {number} pageSize Optional. The maximum number of items to return. If not specified, a default value of 50 will be used by the service. Regardless of the page_size value, the response may include a partial list and a caller should only rely on response's next_page_token to determine if there are more instances left to be queried.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous ListAppConnectionsRequest, if any.
		 * @return {GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse} Successful response
		 */
		Beyondcorp_projects_locations_appConnections_list(parent: string, filter: string | null | undefined, orderBy: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse> {
			return this.http.get<GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse>(this.baseUri + 'v1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/appConnections&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a new AppConnection in a given project and location.
		 * Post v1/{parent}/appConnections
		 * @param {string} parent Required. The resource project name of the AppConnection location using the form: `projects/{project_id}/locations/{location_id}`
		 * @param {string} appConnectionId Optional. User-settable AppConnection resource ID. * Must start with a letter. * Must contain between 4-63 characters from `/a-z-/`. * Must end with a number or a letter.
		 * @param {string} requestId Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Beyondcorp_projects_locations_appConnections_create(parent: string, appConnectionId: string | null | undefined, requestId: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: GoogleCloudBeyondcorpAppconnectionsV1AppConnection): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/appConnections&appConnectionId=' + (appConnectionId == null ? '' : encodeURIComponent(appConnectionId)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Resolves AppConnections details for a given AppConnector. An internal method called by a connector to find AppConnections to connect to.
		 * Get v1/{parent}/appConnections:resolve
		 * @param {string} parent Required. The resource name of the AppConnection location using the form: `projects/{project_id}/locations/{location_id}`
		 * @param {string} appConnectorId Required. BeyondCorp Connector name of the connector associated with those AppConnections using the form: `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector_id}`
		 * @param {number} pageSize Optional. The maximum number of items to return. If not specified, a default value of 50 will be used by the service. Regardless of the page_size value, the response may include a partial list and a caller should only rely on response's next_page_token to determine if there are more instances left to be queried.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous ResolveAppConnectionsResponse, if any.
		 * @return {GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse} Successful response
		 */
		Beyondcorp_projects_locations_appConnections_resolve(parent: string, appConnectorId: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse> {
			return this.http.get<GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse>(this.baseUri + 'v1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/appConnections:resolve&appConnectorId=' + (appConnectorId == null ? '' : encodeURIComponent(appConnectorId)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists AppConnectors in a given project and location.
		 * Get v1/{parent}/appConnectors
		 * @param {string} parent Required. The resource name of the AppConnector location using the form: `projects/{project_id}/locations/{location_id}`
		 * @param {string} filter Optional. A filter specifying constraints of a list operation.
		 * @param {string} orderBy Optional. Specifies the ordering of results. See [Sorting order](https://cloud.google.com/apis/design/design_patterns#sorting_order) for more information.
		 * @param {number} pageSize Optional. The maximum number of items to return. If not specified, a default value of 50 will be used by the service. Regardless of the page_size value, the response may include a partial list and a caller should only rely on response's next_page_token to determine if there are more instances left to be queried.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous ListAppConnectorsRequest, if any.
		 * @return {GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse} Successful response
		 */
		Beyondcorp_projects_locations_appConnectors_list(parent: string, filter: string | null | undefined, orderBy: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse> {
			return this.http.get<GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse>(this.baseUri + 'v1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/appConnectors&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a new AppConnector in a given project and location.
		 * Post v1/{parent}/appConnectors
		 * @param {string} parent Required. The resource project name of the AppConnector location using the form: `projects/{project_id}/locations/{location_id}`
		 * @param {string} appConnectorId Optional. User-settable AppConnector resource ID. * Must start with a letter. * Must contain between 4-63 characters from `/a-z-/`. * Must end with a number or a letter.
		 * @param {string} requestId Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Beyondcorp_projects_locations_appConnectors_create(parent: string, appConnectorId: string | null | undefined, requestId: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: GoogleCloudBeyondcorpAppconnectorsV1AppConnector): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/appConnectors&appConnectorId=' + (appConnectorId == null ? '' : encodeURIComponent(appConnectorId)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists AppGateways in a given project and location.
		 * Get v1/{parent}/appGateways
		 * @param {string} parent Required. The resource name of the AppGateway location using the form: `projects/{project_id}/locations/{location_id}`
		 * @param {string} filter Optional. A filter specifying constraints of a list operation.
		 * @param {string} orderBy Optional. Specifies the ordering of results. See [Sorting order](https://cloud.google.com/apis/design/design_patterns#sorting_order) for more information.
		 * @param {number} pageSize Optional. The maximum number of items to return. If not specified, a default value of 50 will be used by the service. Regardless of the page_size value, the response may include a partial list and a caller should only rely on response's next_page_token to determine if there are more instances left to be queried.
		 * @param {string} pageToken Optional. The next_page_token value returned from a previous ListAppGatewaysRequest, if any.
		 * @return {ListAppGatewaysResponse} Successful response
		 */
		Beyondcorp_projects_locations_appGateways_list(parent: string, filter: string | null | undefined, orderBy: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListAppGatewaysResponse> {
			return this.http.get<ListAppGatewaysResponse>(this.baseUri + 'v1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/appGateways&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&orderBy=' + (orderBy == null ? '' : encodeURIComponent(orderBy)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a new AppGateway in a given project and location.
		 * Post v1/{parent}/appGateways
		 * @param {string} parent Required. The resource project name of the AppGateway location using the form: `projects/{project_id}/locations/{location_id}`
		 * @param {string} appGatewayId Optional. User-settable AppGateway resource ID. * Must start with a letter. * Must contain between 4-63 characters from `/a-z-/`. * Must end with a number or a letter.
		 * @param {string} requestId Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		 * @param {boolean} validateOnly Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.
		 * @return {GoogleLongrunningOperation} Successful response
		 */
		Beyondcorp_projects_locations_appGateways_create(parent: string, appGatewayId: string | null | undefined, requestId: string | null | undefined, validateOnly: boolean | null | undefined, requestBody: AppGateway): Observable<GoogleLongrunningOperation> {
			return this.http.post<GoogleLongrunningOperation>(this.baseUri + 'v1/' + (parent == null ? '' : encodeURIComponent(parent)) + '/appGateways&appGatewayId=' + (appGatewayId == null ? '' : encodeURIComponent(appGatewayId)) + '&requestId=' + (requestId == null ? '' : encodeURIComponent(requestId)) + '&validateOnly=' + validateOnly, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		 * Get v1/{resource}:getIamPolicy
		 * @param {string} resource REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.
		 * @param {number} options_requestedPolicyVersion Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		 * @return {GoogleIamV1Policy} Successful response
		 */
		Beyondcorp_projects_locations_clientGateways_getIamPolicy(resource: string, options_requestedPolicyVersion: number | null | undefined): Observable<GoogleIamV1Policy> {
			return this.http.get<GoogleIamV1Policy>(this.baseUri + 'v1/' + (resource == null ? '' : encodeURIComponent(resource)) + ':getIamPolicy&options_requestedPolicyVersion=' + options_requestedPolicyVersion, {});
		}

		/**
		 * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		 * Post v1/{resource}:setIamPolicy
		 * @param {string} resource REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.
		 * @return {GoogleIamV1Policy} Successful response
		 */
		Beyondcorp_projects_locations_clientGateways_setIamPolicy(resource: string, requestBody: GoogleIamV1SetIamPolicyRequest): Observable<GoogleIamV1Policy> {
			return this.http.post<GoogleIamV1Policy>(this.baseUri + 'v1/' + (resource == null ? '' : encodeURIComponent(resource)) + ':setIamPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		 * Post v1/{resource}:testIamPermissions
		 * @param {string} resource REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.
		 * @return {GoogleIamV1TestIamPermissionsResponse} Successful response
		 */
		Beyondcorp_projects_locations_clientGateways_testIamPermissions(resource: string, requestBody: GoogleIamV1TestIamPermissionsRequest): Observable<GoogleIamV1TestIamPermissionsResponse> {
			return this.http.post<GoogleIamV1TestIamPermissionsResponse>(this.baseUri + 'v1/' + (resource == null ? '' : encodeURIComponent(resource)) + ':testIamPermissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

}

