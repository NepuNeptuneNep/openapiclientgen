import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Describes a single AS2 connection in all of it variations */
	export interface AS2Transport {

		/** A description of the content of the message. Usually, the same for all messages. */
		contentDescription?: string | null;

		/** The MIME type of the message */
		mimeType?: string | null;

		/**
		 * The AS2 id of the receiver. Usually, the same for all senders.
		 * Required
		 */
		receiverId: string;

		/**
		 * The URL to the AS2 end-point
		 * Required
		 */
		receiverUrl: string;

		/** The email address to contact someone about the message */
		senderEmail?: string | null;

		/**
		 * The AS2 id of the sender. Usually, assigned by receiver to PRIME.
		 * Required
		 */
		senderId: string;

		/**
		 * The discriminator
		 * Required
		 */
		type: string;
	}

	/** Describes a single AS2 connection in all of it variations */
	export interface AS2TransportFormProperties {

		/** A description of the content of the message. Usually, the same for all messages. */
		contentDescription: FormControl<string | null | undefined>,

		/** The MIME type of the message */
		mimeType: FormControl<string | null | undefined>,

		/**
		 * The AS2 id of the receiver. Usually, the same for all senders.
		 * Required
		 */
		receiverId: FormControl<string | null | undefined>,

		/**
		 * The URL to the AS2 end-point
		 * Required
		 */
		receiverUrl: FormControl<string | null | undefined>,

		/** The email address to contact someone about the message */
		senderEmail: FormControl<string | null | undefined>,

		/**
		 * The AS2 id of the sender. Usually, assigned by receiver to PRIME.
		 * Required
		 */
		senderId: FormControl<string | null | undefined>,

		/**
		 * The discriminator
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateAS2TransportFormGroup() {
		return new FormGroup<AS2TransportFormProperties>({
			contentDescription: new FormControl<string | null | undefined>(undefined),
			mimeType: new FormControl<string | null | undefined>(undefined),
			receiverId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiverUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			senderEmail: new FormControl<string | null | undefined>(undefined),
			senderId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Moves results to a Azure Blob Store. Typcially used for HHS Protect interfaces. */
	export interface BlobStoreTransport {

		/**
		 * This name of the Azure container
		 * Required
		 */
		containerName: string;

		/**
		 * This looks for an env var with this name. env var value is the connection string
		 * Required
		 */
		storageName: string;

		/**
		 * The discriminator
		 * Required
		 */
		type: string;
	}

	/** Moves results to a Azure Blob Store. Typcially used for HHS Protect interfaces. */
	export interface BlobStoreTransportFormProperties {

		/**
		 * This name of the Azure container
		 * Required
		 */
		containerName: FormControl<string | null | undefined>,

		/**
		 * This looks for an env var with this name. env var value is the connection string
		 * Required
		 */
		storageName: FormControl<string | null | undefined>,

		/**
		 * The discriminator
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateBlobStoreTransportFormGroup() {
		return new FormGroup<BlobStoreTransportFormProperties>({
			containerName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			storageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A custom configuration for a custom schema */
	export interface CustomConfiguration {

		/**
		 * The format of the serializer
		 * Required
		 */
		format: CustomConfigurationFormat;

		/** The format to use for the file name generated by the translation */
		nameFormat?: string | null;

		/** The name of the receiving organization in the message */
		receivingOrganization?: string | null;

		/**
		 * The name of the custom schema
		 * Required
		 */
		schemaName: string;

		/**
		 * The transport to use
		 * Required
		 */
		transport: SFTPTransport;

		/**
		 * The discrimenator
		 * Required
		 */
		type: string;
	}

	/** A custom configuration for a custom schema */
	export interface CustomConfigurationFormProperties {

		/**
		 * The format of the serializer
		 * Required
		 */
		format: FormControl<CustomConfigurationFormat | null | undefined>,

		/** The format to use for the file name generated by the translation */
		nameFormat: FormControl<string | null | undefined>,

		/** The name of the receiving organization in the message */
		receivingOrganization: FormControl<string | null | undefined>,

		/**
		 * The name of the custom schema
		 * Required
		 */
		schemaName: FormControl<string | null | undefined>,

		/**
		 * The discrimenator
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateCustomConfigurationFormGroup() {
		return new FormGroup<CustomConfigurationFormProperties>({
			format: new FormControl<CustomConfigurationFormat | null | undefined>(undefined, [Validators.required]),
			nameFormat: new FormControl<string | null | undefined>(undefined),
			receivingOrganization: new FormControl<string | null | undefined>(undefined),
			schemaName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CustomConfigurationFormat { CSV = 'CSV', HL7 = 'HL7' }


	/** Describes a single SFTP connection in all of it variations */
	export interface SFTPTransport {

		/**
		 * The file path to place the report
		 * Required
		 */
		filePath: string;

		/**
		 * Host name and domain
		 * Required
		 */
		host: string;

		/**
		 * The port to use
		 * Required
		 */
		port: number;

		/**
		 * The discriminator
		 * Required
		 */
		type: string;
	}

	/** Describes a single SFTP connection in all of it variations */
	export interface SFTPTransportFormProperties {

		/**
		 * The file path to place the report
		 * Required
		 */
		filePath: FormControl<string | null | undefined>,

		/**
		 * Host name and domain
		 * Required
		 */
		host: FormControl<string | null | undefined>,

		/**
		 * The port to use
		 * Required
		 */
		port: FormControl<number | null | undefined>,

		/**
		 * The discriminator
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateSFTPTransportFormGroup() {
		return new FormGroup<SFTPTransportFormProperties>({
			filePath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Destination {

		/** The number of reports being sent to this destination */
		itemCount?: number | null;

		/** The name of the organization reciving the report */
		organization?: string | null;

		/** The organization id (i.e. {state abbreviation}-phd) */
		organization_id?: string | null;

		/** The time at which the report will be sent */
		sending_at?: Date | null;

		/** The service used for delivering the report */
		service?: string | null;
	}
	export interface DestinationFormProperties {

		/** The number of reports being sent to this destination */
		itemCount: FormControl<number | null | undefined>,

		/** The name of the organization reciving the report */
		organization: FormControl<string | null | undefined>,

		/** The organization id (i.e. {state abbreviation}-phd) */
		organization_id: FormControl<string | null | undefined>,

		/** The time at which the report will be sent */
		sending_at: FormControl<Date | null | undefined>,

		/** The service used for delivering the report */
		service: FormControl<string | null | undefined>,
	}
	export function CreateDestinationFormGroup() {
		return new FormGroup<DestinationFormProperties>({
			itemCount: new FormControl<number | null | undefined>(undefined),
			organization: new FormControl<string | null | undefined>(undefined),
			organization_id: new FormControl<string | null | undefined>(undefined),
			sending_at: new FormControl<Date | null | undefined>(undefined),
			service: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Detail {

		/** The details of the error */
		detail?: string | null;

		/** Depends on scope, either the item's id (message_id) or the report's id */
		id?: string | null;

		/** Does the error apply to one item */
		scope?: DetailScope | null;
	}
	export interface DetailFormProperties {

		/** The details of the error */
		detail: FormControl<string | null | undefined>,

		/** Depends on scope, either the item's id (message_id) or the report's id */
		id: FormControl<string | null | undefined>,

		/** Does the error apply to one item */
		scope: FormControl<DetailScope | null | undefined>,
	}
	export function CreateDetailFormGroup() {
		return new FormGroup<DetailFormProperties>({
			detail: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			scope: new FormControl<DetailScope | null | undefined>(undefined),
		});

	}

	export enum DetailScope { Parameter = 'Parameter', Report = 'Report', Item = 'Item' }

	export interface ItemRouting {

		/** The organization and service destinations */
		destinations?: Array<string>;

		/** the index of the item in the submitted report (0 based) */
		reportIndex?: number | null;

		/** The tracking id provided by the sender defined in the schema, null otherwise */
		trackingId?: string | null;
	}
	export interface ItemRoutingFormProperties {

		/** the index of the item in the submitted report (0 based) */
		reportIndex: FormControl<number | null | undefined>,

		/** The tracking id provided by the sender defined in the schema, null otherwise */
		trackingId: FormControl<string | null | undefined>,
	}
	export function CreateItemRoutingFormGroup() {
		return new FormGroup<ItemRoutingFormProperties>({
			reportIndex: new FormControl<number | null | undefined>(undefined),
			trackingId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A transport type that does not do anything */
	export interface NullTransport {

		/** A dummy value */
		dummy?: string | null;

		/**
		 * The discriminator
		 * Required
		 */
		type: string;
	}

	/** A transport type that does not do anything */
	export interface NullTransportFormProperties {

		/** A dummy value */
		dummy: FormControl<string | null | undefined>,

		/**
		 * The discriminator
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateNullTransportFormGroup() {
		return new FormGroup<NullTransportFormProperties>({
			dummy: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An organization connected to data hub */
	export interface Organization {

		/** the county name (must match FIPS name) */
		countyName?: string | null;

		/**
		 * the displayable description of the organization
		 * Required
		 */
		description: string;

		/** Required */
		jurisdiction: OrganizationJurisdiction;

		/** The metadata associated with an setting */
		meta?: SettingMetadata;

		/**
		 * the unique id for the organization
		 * Required
		 */
		name: string;

		/** the two letter code for the organization */
		stateCode?: string | null;
	}

	/** An organization connected to data hub */
	export interface OrganizationFormProperties {

		/** the county name (must match FIPS name) */
		countyName: FormControl<string | null | undefined>,

		/**
		 * the displayable description of the organization
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/** Required */
		jurisdiction: FormControl<OrganizationJurisdiction | null | undefined>,

		/**
		 * the unique id for the organization
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** the two letter code for the organization */
		stateCode: FormControl<string | null | undefined>,
	}
	export function CreateOrganizationFormGroup() {
		return new FormGroup<OrganizationFormProperties>({
			countyName: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			jurisdiction: new FormControl<OrganizationJurisdiction | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stateCode: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum OrganizationJurisdiction { National = 'National', State = 'State', County = 'County' }


	/** The metadata associated with an setting */
	export interface SettingMetadata {

		/** the time that the particular revision was created */
		createdAt?: string | null;

		/** the user who created the particular revision */
		createdBy?: string | null;

		/** the version number of the object */
		version?: number | null;
	}

	/** The metadata associated with an setting */
	export interface SettingMetadataFormProperties {

		/** the time that the particular revision was created */
		createdAt: FormControl<string | null | undefined>,

		/** the user who created the particular revision */
		createdBy: FormControl<string | null | undefined>,

		/** the version number of the object */
		version: FormControl<number | null | undefined>,
	}
	export function CreateSettingMetadataFormGroup() {
		return new FormGroup<SettingMetadataFormProperties>({
			createdAt: new FormControl<string | null | undefined>(undefined),
			createdBy: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A receiver of reports from the data hub */
	export interface Receiver {

		/**
		 * Display ready description of the receiver
		 * Required
		 */
		description: string;

		/** What items to include in the report. */
		ReceiverJurisdictionalFilters?: Array<ReceiverJurisdictionalFilters>;

		/** The metadata associated with an setting */
		meta?: SettingMetadata;

		/**
		 * The unique name for the receiver. Should include the organization name as a prefix.
		 * Required
		 */
		name: string;

		/** The name of the organization that this receiver belongs to */
		organizationName?: string | null;

		/**
		 * When the report is sent if not immediately
		 * Required
		 */
		timing: ReceiverTiming;

		/**
		 * The topic of for this receiver. Must match the supported topics.
		 * Required
		 */
		topic: string;

		/** How the report is translated from the sender. A report can be sent in multiple ways. */
		translations?: Array<string>;
	}

	/** A receiver of reports from the data hub */
	export interface ReceiverFormProperties {

		/**
		 * Display ready description of the receiver
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The unique name for the receiver. Should include the organization name as a prefix.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** The name of the organization that this receiver belongs to */
		organizationName: FormControl<string | null | undefined>,

		/**
		 * The topic of for this receiver. Must match the supported topics.
		 * Required
		 */
		topic: FormControl<string | null | undefined>,
	}
	export function CreateReceiverFormGroup() {
		return new FormGroup<ReceiverFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizationName: new FormControl<string | null | undefined>(undefined),
			topic: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ReceiverJurisdictionalFilters {

		/** Ensure that the result does not match */
		doesNotMatch?: boolean | null;

		/** What fields to match in the filter */
		matchFields?: ReceiverJurisdictionalFiltersMatchFields | null;

		/** What is the value to match against */
		matchValues?: Array<string>;
	}
	export interface ReceiverJurisdictionalFiltersFormProperties {

		/** Ensure that the result does not match */
		doesNotMatch: FormControl<boolean | null | undefined>,

		/** What fields to match in the filter */
		matchFields: FormControl<ReceiverJurisdictionalFiltersMatchFields | null | undefined>,
	}
	export function CreateReceiverJurisdictionalFiltersFormGroup() {
		return new FormGroup<ReceiverJurisdictionalFiltersFormProperties>({
			doesNotMatch: new FormControl<boolean | null | undefined>(undefined),
			matchFields: new FormControl<ReceiverJurisdictionalFiltersMatchFields | null | undefined>(undefined),
		});

	}

	export enum ReceiverJurisdictionalFiltersMatchFields { FACILITY_OR_PATIENT_ADDRESS = 'FACILITY_OR_PATIENT_ADDRESS', FACILITY_ADDRESS = 'FACILITY_ADDRESS', FACILITY_NAME = 'FACILITY_NAME', ABNORMAL_VALUE = 'ABNORMAL_VALUE' }

	export interface ReceiverTiming {

		/** The UTC hour to send a daily batch */
		dailyAt?: number | null;

		/**
		 * How often send a report
		 * Required
		 */
		frequency: ReceiverTimingFrequency;
	}
	export interface ReceiverTimingFormProperties {

		/** The UTC hour to send a daily batch */
		dailyAt: FormControl<number | null | undefined>,

		/**
		 * How often send a report
		 * Required
		 */
		frequency: FormControl<ReceiverTimingFrequency | null | undefined>,
	}
	export function CreateReceiverTimingFormGroup() {
		return new FormGroup<ReceiverTimingFormProperties>({
			dailyAt: new FormControl<number | null | undefined>(undefined),
			frequency: new FormControl<ReceiverTimingFrequency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ReceiverTimingFrequency { REAL_TIME = 'REAL_TIME', HOURLY = 'HOURLY', DAILY = 'DAILY' }

	export interface RedoxConfiguration {
	}
	export interface RedoxConfigurationFormProperties {
	}
	export function CreateRedoxConfigurationFormGroup() {
		return new FormGroup<RedoxConfigurationFormProperties>({
		});

	}


	/** Describe the Redox transport */
	export interface RedoxTransport {

		/** the base URL to send the Redox message. If missing, production Redox URL is used */
		baseUrl?: string | null;

		/**
		 * The discriminator
		 * Required
		 */
		type: string;
	}

	/** Describe the Redox transport */
	export interface RedoxTransportFormProperties {

		/** the base URL to send the Redox message. If missing, production Redox URL is used */
		baseUrl: FormControl<string | null | undefined>,

		/**
		 * The discriminator
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateRedoxTransportFormGroup() {
		return new FormGroup<RedoxTransportFormProperties>({
			baseUrl: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Report {

		/** total destinations recieving the report(s) */
		destinationCount?: number | null;

		/** where the report is being sent to */
		destinations?: Array<Destination>;

		/** total errors found during initial validation.  There may be multiple errors per item. */
		errorCount?: number | null;

		/** a list of errors in the report */
		errors?: Array<Detail>;

		/**
		 * the id for the report assigned by the Hub
		 * Required
		 */
		id: string;

		/** total number of individual reports sent to the Hub (in a csv, the number of data lines sent) */
		reportItemCount?: number | null;

		/** The receiver destination names for each item in the report. This is displayed when verbose=true is present on the query string. */
		routing?: Array<ItemRouting>;

		/** the timestamp for this report submission */
		timestamp?: string | null;

		/** the topic configured for the client organization sender */
		topic?: string | null;

		/** total warnings found during initial validation.  There may be multiple warnings per item. */
		warningCount?: number | null;

		/** a list of warnings in the report */
		warnings?: Array<Detail>;
	}
	export interface ReportFormProperties {

		/** total destinations recieving the report(s) */
		destinationCount: FormControl<number | null | undefined>,

		/** total errors found during initial validation.  There may be multiple errors per item. */
		errorCount: FormControl<number | null | undefined>,

		/**
		 * the id for the report assigned by the Hub
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/** total number of individual reports sent to the Hub (in a csv, the number of data lines sent) */
		reportItemCount: FormControl<number | null | undefined>,

		/** the timestamp for this report submission */
		timestamp: FormControl<string | null | undefined>,

		/** the topic configured for the client organization sender */
		topic: FormControl<string | null | undefined>,

		/** total warnings found during initial validation.  There may be multiple warnings per item. */
		warningCount: FormControl<number | null | undefined>,
	}
	export function CreateReportFormGroup() {
		return new FormGroup<ReportFormProperties>({
			destinationCount: new FormControl<number | null | undefined>(undefined),
			errorCount: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reportItemCount: new FormControl<number | null | undefined>(undefined),
			timestamp: new FormControl<string | null | undefined>(undefined),
			topic: new FormControl<string | null | undefined>(undefined),
			warningCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An sender of reports to the data hub */
	export interface Sender {

		/**
		 * Display ready description of the sender
		 * Required
		 */
		description: string;

		/**
		 * the payload format
		 * Required
		 */
		format: SenderFormat;

		/** The metadata associated with an setting */
		meta?: SettingMetadata;

		/**
		 * Unique name for the senders, includes the orgninzation name
		 * Required
		 */
		name: string;

		/** Name of the organization that this sender belongs to */
		organizationName?: string | null;

		/**
		 * the schema name for this sender
		 * Required
		 */
		schema: string;

		/**
		 * Topic of for this sender. Must match the supported topics.
		 * Required
		 */
		topic: string;
	}

	/** An sender of reports to the data hub */
	export interface SenderFormProperties {

		/**
		 * Display ready description of the sender
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * the payload format
		 * Required
		 */
		format: FormControl<SenderFormat | null | undefined>,

		/**
		 * Unique name for the senders, includes the orgninzation name
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Name of the organization that this sender belongs to */
		organizationName: FormControl<string | null | undefined>,

		/**
		 * the schema name for this sender
		 * Required
		 */
		schema: FormControl<string | null | undefined>,

		/**
		 * Topic of for this sender. Must match the supported topics.
		 * Required
		 */
		topic: FormControl<string | null | undefined>,
	}
	export function CreateSenderFormGroup() {
		return new FormGroup<SenderFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			format: new FormControl<SenderFormat | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			organizationName: new FormControl<string | null | undefined>(undefined),
			schema: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			topic: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SenderFormat { CSV = 'CSV' }


	/** A standard HL7 configuration */
	export interface StandardHL7Configuration {

		/** A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format */
		convertTimestampToDateTime?: string | null;

		/** Default the AOE result to UNK */
		defaultAoeToUnknown?: boolean | null;

		/**
		 * Include the AOE
		 * Required
		 */
		includeAOE: boolean;

		/** The format to use for the file name generated by the translation */
		nameFormat?: string | null;

		/** How to format phone numbers (XTN fields) */
		phoneNumberFormatting?: StandardHL7ConfigurationPhoneNumberFormatting | null;

		/** The receiving application name (needed for HL7 formats) */
		receivingApplicationName?: string | null;

		/** The receiving application OID */
		receivingApplicationOID?: string | null;

		/** The receiving facility name */
		receivingFacilityName?: string | null;

		/** The receiving facility name */
		receivingFacilityOID?: string | null;

		/** The name of the receiving organization in the message */
		receivingOrganization?: string | null;

		/** The reporting facility id (if different from CDC PRIME's OID) */
		reportingFacilityId?: string | null;

		/** The reporting facility id type (if different from OID) */
		reportingFacilityIdType?: string | null;

		/** The reporting facility name (if different from CDC PRIME) */
		reportingFacilityName?: string | null;

		/** Suppress the AOE OBX results */
		suppressAoe?: boolean | null;

		/** A comma delimited list of HL7 fields to suppress */
		suppressHl7Fields?: string | null;

		/** Suppress QST component is AOE OBX segments */
		suppressQstForAoe?: boolean | null;

		/** Required */
		transport: SFTPTransport;

		/** Truncate the HD fields to HD_TRUNCATION_LIMIT */
		truncateHDNamespaceIds?: boolean | null;

		/**
		 * The discrimenator
		 * Required
		 */
		type: string;

		/**
		 * Use BHS and FHS header
		 * Required
		 */
		useBatchHeaders: boolean;

		/** A comma delimited list of element names that should use blank instead of unknown */
		useBlankInsteadOfUnknown?: string | null;

		/** Use the PID-14 field for patient email instead of the standard PID-13 field */
		usePid14ForPatientEmail?: boolean | null;

		/** Set a test process mode flag */
		useTestProcessingMode?: boolean | null;
	}

	/** A standard HL7 configuration */
	export interface StandardHL7ConfigurationFormProperties {

		/** A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format */
		convertTimestampToDateTime: FormControl<string | null | undefined>,

		/** Default the AOE result to UNK */
		defaultAoeToUnknown: FormControl<boolean | null | undefined>,

		/**
		 * Include the AOE
		 * Required
		 */
		includeAOE: FormControl<boolean | null | undefined>,

		/** The format to use for the file name generated by the translation */
		nameFormat: FormControl<string | null | undefined>,

		/** How to format phone numbers (XTN fields) */
		phoneNumberFormatting: FormControl<StandardHL7ConfigurationPhoneNumberFormatting | null | undefined>,

		/** The receiving application name (needed for HL7 formats) */
		receivingApplicationName: FormControl<string | null | undefined>,

		/** The receiving application OID */
		receivingApplicationOID: FormControl<string | null | undefined>,

		/** The receiving facility name */
		receivingFacilityName: FormControl<string | null | undefined>,

		/** The receiving facility name */
		receivingFacilityOID: FormControl<string | null | undefined>,

		/** The name of the receiving organization in the message */
		receivingOrganization: FormControl<string | null | undefined>,

		/** The reporting facility id (if different from CDC PRIME's OID) */
		reportingFacilityId: FormControl<string | null | undefined>,

		/** The reporting facility id type (if different from OID) */
		reportingFacilityIdType: FormControl<string | null | undefined>,

		/** The reporting facility name (if different from CDC PRIME) */
		reportingFacilityName: FormControl<string | null | undefined>,

		/** Suppress the AOE OBX results */
		suppressAoe: FormControl<boolean | null | undefined>,

		/** A comma delimited list of HL7 fields to suppress */
		suppressHl7Fields: FormControl<string | null | undefined>,

		/** Suppress QST component is AOE OBX segments */
		suppressQstForAoe: FormControl<boolean | null | undefined>,

		/** Truncate the HD fields to HD_TRUNCATION_LIMIT */
		truncateHDNamespaceIds: FormControl<boolean | null | undefined>,

		/**
		 * The discrimenator
		 * Required
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * Use BHS and FHS header
		 * Required
		 */
		useBatchHeaders: FormControl<boolean | null | undefined>,

		/** A comma delimited list of element names that should use blank instead of unknown */
		useBlankInsteadOfUnknown: FormControl<string | null | undefined>,

		/** Use the PID-14 field for patient email instead of the standard PID-13 field */
		usePid14ForPatientEmail: FormControl<boolean | null | undefined>,

		/** Set a test process mode flag */
		useTestProcessingMode: FormControl<boolean | null | undefined>,
	}
	export function CreateStandardHL7ConfigurationFormGroup() {
		return new FormGroup<StandardHL7ConfigurationFormProperties>({
			convertTimestampToDateTime: new FormControl<string | null | undefined>(undefined),
			defaultAoeToUnknown: new FormControl<boolean | null | undefined>(undefined),
			includeAOE: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			nameFormat: new FormControl<string | null | undefined>(undefined),
			phoneNumberFormatting: new FormControl<StandardHL7ConfigurationPhoneNumberFormatting | null | undefined>(undefined),
			receivingApplicationName: new FormControl<string | null | undefined>(undefined),
			receivingApplicationOID: new FormControl<string | null | undefined>(undefined),
			receivingFacilityName: new FormControl<string | null | undefined>(undefined),
			receivingFacilityOID: new FormControl<string | null | undefined>(undefined),
			receivingOrganization: new FormControl<string | null | undefined>(undefined),
			reportingFacilityId: new FormControl<string | null | undefined>(undefined),
			reportingFacilityIdType: new FormControl<string | null | undefined>(undefined),
			reportingFacilityName: new FormControl<string | null | undefined>(undefined),
			suppressAoe: new FormControl<boolean | null | undefined>(undefined),
			suppressHl7Fields: new FormControl<string | null | undefined>(undefined),
			suppressQstForAoe: new FormControl<boolean | null | undefined>(undefined),
			truncateHDNamespaceIds: new FormControl<boolean | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			useBatchHeaders: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			useBlankInsteadOfUnknown: new FormControl<string | null | undefined>(undefined),
			usePid14ForPatientEmail: new FormControl<boolean | null | undefined>(undefined),
			useTestProcessingMode: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum StandardHL7ConfigurationPhoneNumberFormatting { STANDARD = 'STANDARD', ONLY_DIGITS_IN_COMPONENT_ONE = 'ONLY_DIGITS_IN_COMPONENT_ONE', AREA_LOCAL_IN_COMPONENT_ONE = 'AREA_LOCAL_IN_COMPONENT_ONE' }

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * The settings for all organizations of the system. Must have admin access.
		 * Get settings/organizations
		 * @return {Array<Organization>} OK
		 */
		SettingsOrganizationsGet(headersHandler?: () => HttpHeaders): Observable<Array<Organization>> {
			return this.http.get<Array<Organization>>(this.baseUri + 'settings/organizations', { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * Delete an organization (and the associated receivers and senders)
		 * Delete settings/organizations/{organizationName}
		 * @param {string} organizationName The name of the organization
		 * @return {Organization} OK, the organization setting was deleted
		 */
		SettingsOrganizations_organizationNameDelete(organizationName: string, headersHandler?: () => HttpHeaders): Observable<Organization> {
			return this.http.delete<Organization>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)), { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * A single organization settings
		 * Get settings/organizations/{organizationName}
		 * @param {string} organizationName The name of the organization
		 * @return {Organization} OK
		 */
		SettingsOrganizations_organizationNameGet(organizationName: string, headersHandler?: () => HttpHeaders): Observable<Organization> {
			return this.http.get<Organization>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)), { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * Create or update the direct settings associated with an organization
		 * Put settings/organizations/{organizationName}
		 * @param {string} organizationName The name of the organization
		 * @return {Organization} OK, the organization setting was updated
		 */
		SettingsOrganizations_organizationNamePut(organizationName: string, requestBody: Organization, headersHandler?: () => HttpHeaders): Observable<Organization> {
			return this.http.put<Organization>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)), JSON.stringify(requestBody), { headers: headersHandler ? headersHandler().append('Content-Type', 'application/json;charset=UTF-8') : new HttpHeaders({ 'Content-Type': 'application/json;charset=UTF-8' }) });
		}

		/**
		 * A list of receivers and their current settings
		 * Get settings/organizations/{organizationName}/receivers
		 * @param {string} organizationName Fetch receivers with this organization name
		 * @return {Array<Receiver>} OK
		 */
		SettingsOrganizations_organizationNameReceiversGet(organizationName: string, headersHandler?: () => HttpHeaders): Observable<Array<Receiver>> {
			return this.http.get<Array<Receiver>>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/receivers', { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * Delete a receiver
		 * Delete settings/organizations/{organizationName}/receivers/{receiverName}
		 * @param {string} organizationName the organization name
		 * @param {string} receiverName The name of the receiver
		 * @return {Receiver} OK, the receiver was deleted
		 */
		SettingsOrganizations_organizationNameReceivers_receiverNameDelete(organizationName: string, receiverName: string, headersHandler?: () => HttpHeaders): Observable<Receiver> {
			return this.http.delete<Receiver>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/receivers/' + (receiverName == null ? '' : encodeURIComponent(receiverName)), { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * The settings of a single of receiver
		 * Get settings/organizations/{organizationName}/receivers/{receiverName}
		 * @param {string} organizationName Create receivers under this organization name
		 * @param {string} receiverName The name of the receiver
		 * @return {Receiver} OK
		 */
		SettingsOrganizations_organizationNameReceivers_receiverNameGet(organizationName: string, receiverName: string, headersHandler?: () => HttpHeaders): Observable<Receiver> {
			return this.http.get<Receiver>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/receivers/' + (receiverName == null ? '' : encodeURIComponent(receiverName)), { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * Update a single reciever
		 * Put settings/organizations/{organizationName}/receivers/{receiverName}
		 * @param {string} organizationName Create receivers under this organization name
		 * @param {string} receiverName The name of the receiver
		 * @return {Receiver} OK, the receiver setting was updated
		 */
		SettingsOrganizations_organizationNameReceivers_receiverNamePut(organizationName: string, receiverName: string, requestBody: Receiver, headersHandler?: () => HttpHeaders): Observable<Receiver> {
			return this.http.put<Receiver>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/receivers/' + (receiverName == null ? '' : encodeURIComponent(receiverName)), JSON.stringify(requestBody), { headers: headersHandler ? headersHandler().append('Content-Type', 'application/json;charset=UTF-8') : new HttpHeaders({ 'Content-Type': 'application/json;charset=UTF-8' }) });
		}

		/**
		 * A list of senders
		 * Get settings/organizations/{organizationName}/senders
		 * @param {string} organizationName Fetch senders with this organization name
		 * @return {Array<Sender>} OK
		 */
		SettingsOrganizations_organizationNameSendersGet(organizationName: string, headersHandler?: () => HttpHeaders): Observable<Array<Sender>> {
			return this.http.get<Array<Sender>>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/senders', { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * Delete a sender
		 * Delete settings/organizations/{organizationName}/senders/{senderName}
		 * @param {string} organizationName the organization name
		 * @param {string} senderName The name of a sender to the data hub
		 * @return {Sender} OK, the sender was deleted
		 */
		SettingsOrganizations_organizationNameSenders_senderNameDelete(organizationName: string, senderName: string, headersHandler?: () => HttpHeaders): Observable<Sender> {
			return this.http.delete<Sender>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/senders/' + (senderName == null ? '' : encodeURIComponent(senderName)), { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * The settings of a single of sender
		 * Get settings/organizations/{organizationName}/senders/{senderName}
		 * @param {string} organizationName Fetch senders with this organization name
		 * @param {string} senderName The name of a sender to the data hub
		 * @return {Sender} OK
		 */
		SettingsOrganizations_organizationNameSenders_senderNameGet(organizationName: string, senderName: string, headersHandler?: () => HttpHeaders): Observable<Sender> {
			return this.http.get<Sender>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/senders/' + (senderName == null ? '' : encodeURIComponent(senderName)), { headers: headersHandler ? headersHandler() : undefined });
		}

		/**
		 * Update a single sender
		 * Put settings/organizations/{organizationName}/senders/{senderName}
		 * @param {string} organizationName Fetch senders with this organization name
		 * @param {string} senderName The name of a sender to the data hub
		 * @return {Array<Sender>} OK
		 */
		SettingsOrganizations_organizationNameSenders_senderNamePut(organizationName: string, senderName: string, requestBody: Sender, headersHandler?: () => HttpHeaders): Observable<Array<Sender>> {
			return this.http.put<Array<Sender>>(this.baseUri + 'settings/organizations/' + (organizationName == null ? '' : encodeURIComponent(organizationName)) + '/senders/' + (senderName == null ? '' : encodeURIComponent(senderName)), JSON.stringify(requestBody), { headers: headersHandler ? headersHandler().append('Content-Type', 'application/json;charset=UTF-8') : new HttpHeaders({ 'Content-Type': 'application/json;charset=UTF-8' }) });
		}
	}

	export enum ReportsPostByClientAndOptionAnd_defaultAndRouteToOption { ValidatePayload = 'ValidatePayload', CheckConnections = 'CheckConnections', SendImmediately = 'SendImmediately', SkipSend = 'SkipSend', SkipInvalidItems = 'SkipInvalidItems' }

}

