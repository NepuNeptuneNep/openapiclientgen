import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/**
	 * Specifies the use case of the transfer. Required for transfers on an ACH network.
	 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
	 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
	 * `"tel"` - Telephone-Initiated Entry
	 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
	 */
	export enum ACHClass { ccd = 'ccd', ppd = 'ppd', tel = 'tel', web = 'web' }


	/** Information about the APR on the account. */
	export interface APR {

		/**
		 * Annual Percentage Rate applied.
		 * Required
		 * Type: double
		 */
		apr_percentage: number;

		/**
		 * The type of balance to which the APR applies.
		 * Required
		 */
		apr_type: APRApr_type;

		/**
		 * Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.
		 * Required
		 * Type: double
		 */
		balance_subject_to_apr: number;

		/**
		 * Amount of money charged due to interest from last statement.
		 * Required
		 * Type: double
		 */
		interest_charge_amount: number;
	}

	/** Information about the APR on the account. */
	export interface APRFormProperties {

		/**
		 * Annual Percentage Rate applied.
		 * Required
		 * Type: double
		 */
		apr_percentage: FormControl<number | null | undefined>,

		/**
		 * The type of balance to which the APR applies.
		 * Required
		 */
		apr_type: FormControl<APRApr_type | null | undefined>,

		/**
		 * Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.
		 * Required
		 * Type: double
		 */
		balance_subject_to_apr: FormControl<number | null | undefined>,

		/**
		 * Amount of money charged due to interest from last statement.
		 * Required
		 * Type: double
		 */
		interest_charge_amount: FormControl<number | null | undefined>,
	}
	export function CreateAPRFormGroup() {
		return new FormGroup<APRFormProperties>({
			apr_percentage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			apr_type: new FormControl<APRApr_type | null | undefined>(undefined, [Validators.required]),
			balance_subject_to_apr: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			interest_charge_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum APRApr_type { balance_transfer_apr = 'balance_transfer_apr', cash_apr = 'cash_apr', purchase_apr = 'purchase_apr', special = 'special' }


	/** Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`. */
	export interface AccountAccess {

		/** Allow the application to access specific products on this account */
		account_product_access?: AccountProductAccessNullable;

		/** Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`. */
		authorized?: boolean | null;

		/**
		 * The unique account identifier for this account. This value must match that returned by the data access API for this account.
		 * Required
		 */
		unique_id: string;
	}

	/** Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`. */
	export interface AccountAccessFormProperties {

		/** Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`. */
		authorized: FormControl<boolean | null | undefined>,

		/**
		 * The unique account identifier for this account. This value must match that returned by the data access API for this account.
		 * Required
		 */
		unique_id: FormControl<string | null | undefined>,
	}
	export function CreateAccountAccessFormGroup() {
		return new FormGroup<AccountAccessFormProperties>({
			authorized: new FormControl<boolean | null | undefined>(undefined),
			unique_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Asset information about an account */
	export interface AccountAssets extends AccountBase {

		/**
		 * The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
		 * Type: double
		 */
		days_available?: number | null;

		/** Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts. */
		historical_balances?: Array<HistoricalBalance>;

		/** Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29) */
		owners?: Array<Owner>;

		/**
		 * How an asset is owned.
		 * `association`: Ownership by a corporation, partnership, or unincorporated association, including for-profit and not-for-profit organizations.
		 * `individual`: Ownership by an individual.
		 * `joint`: Joint ownership by multiple parties.
		 * `trust`: Ownership by a revocable or irrevocable trust.
		 */
		ownership_type?: OwnershipType;

		/** Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead. */
		transactions?: Array<AssetReportTransaction>;
	}

	/** Asset information about an account */
	export interface AccountAssetsFormProperties extends AccountBaseFormProperties {

		/**
		 * The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
		 * Type: double
		 */
		days_available: FormControl<number | null | undefined>,

		/**
		 * How an asset is owned.
		 * `association`: Ownership by a corporation, partnership, or unincorporated association, including for-profit and not-for-profit organizations.
		 * `individual`: Ownership by an individual.
		 * `joint`: Joint ownership by multiple parties.
		 * `trust`: Ownership by a revocable or irrevocable trust.
		 */
		ownership_type: FormControl<OwnershipType | null | undefined>,
	}
	export function CreateAccountAssetsFormGroup() {
		return new FormGroup<AccountAssetsFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mask: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			official_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			persistent_account_id: new FormControl<string | null | undefined>(undefined),
			subtype: new FormControl<AccountBaseSubtype | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<AccountBaseType | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<AccountBaseVerification_status | null | undefined>(undefined),
			days_available: new FormControl<number | null | undefined>(undefined),
			ownership_type: new FormControl<OwnershipType | null | undefined>(undefined),
		});

	}


	/** An object representing a balance held by an account in the past */
	export interface HistoricalBalance {

		/**
		 * The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.
		 * If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
		 * Required
		 * Type: double
		 */
		current: number;

		/**
		 * The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
		 * Required
		 * Type: DateOnly
		 */
		date: Date;

		/**
		 * The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;
	}

	/** An object representing a balance held by an account in the past */
	export interface HistoricalBalanceFormProperties {

		/**
		 * The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.
		 * If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
		 * Required
		 * Type: double
		 */
		current: FormControl<number | null | undefined>,

		/**
		 * The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
		 * Required
		 * Type: DateOnly
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateHistoricalBalanceFormGroup() {
		return new FormGroup<HistoricalBalanceFormProperties>({
			current: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data returned from the financial institution about the owner or owners of an account. Only the `names` array must be non-empty. */
	export interface Owner {

		/**
		 * Data about the various addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
		 * Required
		 */
		addresses: Array<Address>;

		/**
		 * A list of email addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
		 * Required
		 */
		emails: Array<Email>;

		/**
		 * A list of names associated with the account by the financial institution. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.
		 * If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account's `names` array.
		 * Required
		 */
		names: Array<string>;

		/**
		 * A list of phone numbers associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution.
		 * Required
		 */
		phone_numbers: Array<PhoneNumber>;
	}

	/** Data returned from the financial institution about the owner or owners of an account. Only the `names` array must be non-empty. */
	export interface OwnerFormProperties {
	}
	export function CreateOwnerFormGroup() {
		return new FormGroup<OwnerFormProperties>({
		});

	}


	/** A physical mailing address. */
	export interface Address {

		/**
		 * Data about the components comprising an address.
		 * Required
		 */
		data: AddressData;

		/** When `true`, identifies the address as the primary address on an account. */
		primary?: boolean | null;
	}

	/** A physical mailing address. */
	export interface AddressFormProperties {

		/** When `true`, identifies the address as the primary address on an account. */
		primary: FormControl<boolean | null | undefined>,
	}
	export function CreateAddressFormGroup() {
		return new FormGroup<AddressFormProperties>({
			primary: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Data about the components comprising an address. */
	export interface AddressData {

		/**
		 * The full city name
		 * Required
		 */
		city: string;

		/**
		 * The ISO 3166-1 alpha-2 country code
		 * Required
		 */
		country: string;

		/**
		 * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
		 * Required
		 */
		postal_code: string;

		/**
		 * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
		 * Example: `"NC"`
		 * Required
		 */
		region: string;

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 * Required
		 */
		street: string;
	}

	/** Data about the components comprising an address. */
	export interface AddressDataFormProperties {

		/**
		 * The full city name
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166-1 alpha-2 country code
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
		 * Example: `"NC"`
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 * Required
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateAddressDataFormGroup() {
		return new FormGroup<AddressDataFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing an email address */
	export interface Email {

		/**
		 * The email address.
		 * Required
		 */
		data: string;

		/**
		 * When `true`, identifies the email address as the primary email on an account.
		 * Required
		 */
		primary: boolean;

		/**
		 * The type of email account as described by the financial institution.
		 * Required
		 */
		type: EmailType;
	}

	/** An object representing an email address */
	export interface EmailFormProperties {

		/**
		 * The email address.
		 * Required
		 */
		data: FormControl<string | null | undefined>,

		/**
		 * When `true`, identifies the email address as the primary email on an account.
		 * Required
		 */
		primary: FormControl<boolean | null | undefined>,

		/**
		 * The type of email account as described by the financial institution.
		 * Required
		 */
		type: FormControl<EmailType | null | undefined>,
	}
	export function CreateEmailFormGroup() {
		return new FormGroup<EmailFormProperties>({
			data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			primary: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<EmailType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EmailType { primary = 'primary', secondary = 'secondary', other = 'other' }


	/** A phone number */
	export interface PhoneNumber {

		/**
		 * The phone number.
		 * Required
		 */
		data: string;

		/**
		 * When `true`, identifies the phone number as the primary number on an account.
		 * Required
		 */
		primary: boolean;

		/**
		 * The type of phone number.
		 * Required
		 */
		type: PhoneNumberType;
	}

	/** A phone number */
	export interface PhoneNumberFormProperties {

		/**
		 * The phone number.
		 * Required
		 */
		data: FormControl<string | null | undefined>,

		/**
		 * When `true`, identifies the phone number as the primary number on an account.
		 * Required
		 */
		primary: FormControl<boolean | null | undefined>,

		/**
		 * The type of phone number.
		 * Required
		 */
		type: FormControl<PhoneNumberType | null | undefined>,
	}
	export function CreatePhoneNumberFormGroup() {
		return new FormGroup<PhoneNumberFormProperties>({
			data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			primary: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<PhoneNumberType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PhoneNumberType { home = 'home', work = 'work', office = 'office', mobile = 'mobile', mobile1 = 'mobile1', other = 'other' }


	/** A transaction on the asset report */
	export interface AssetReportTransaction extends TransactionBase {

		/**
		 * Information describing the intent of the transaction. Most relevant for credit use cases, but not limited to such use cases. Please reach out to your account manager or sales representative if you would like to receive this field.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/credit-category-taxonomy.csv) for a full list of credit categories.
		 */
		credit_category?: CreditCategory;

		/** The date on which the transaction took place, in IS0 8601 format. */
		date_transacted?: string | null;
	}

	/** A transaction on the asset report */
	export interface AssetReportTransactionFormProperties extends TransactionBaseFormProperties {

		/** The date on which the transaction took place, in IS0 8601 format. */
		date_transacted: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportTransactionFormGroup() {
		return new FormGroup<AssetReportTransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_owner: new FormControl<string | null | undefined>(undefined),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			category_id: new FormControl<string | null | undefined>(undefined),
			check_number: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			logo_url: new FormControl<string | null | undefined>(undefined),
			merchant_name: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			original_description: new FormControl<string | null | undefined>(undefined),
			pending: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_type: new FormControl<TransactionBaseTransaction_type | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			website: new FormControl<string | null | undefined>(undefined),
			date_transacted: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Information describing the intent of the transaction. Most relevant for credit use cases, but not limited to such use cases. Please reach out to your account manager or sales representative if you would like to receive this field.
	 * See the [`taxonomy csv file`](https://plaid.com/documents/credit-category-taxonomy.csv) for a full list of credit categories.
	 */
	export interface CreditCategory {

		/**
		 * A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category.
		 * Required
		 */
		detailed: string;

		/**
		 * A high level category that communicates the broad category of the transaction.
		 * Required
		 */
		primary: string;
	}

	/**
	 * Information describing the intent of the transaction. Most relevant for credit use cases, but not limited to such use cases. Please reach out to your account manager or sales representative if you would like to receive this field.
	 * See the [`taxonomy csv file`](https://plaid.com/documents/credit-category-taxonomy.csv) for a full list of credit categories.
	 */
	export interface CreditCategoryFormProperties {

		/**
		 * A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category.
		 * Required
		 */
		detailed: FormControl<string | null | undefined>,

		/**
		 * A high level category that communicates the broad category of the transaction.
		 * Required
		 */
		primary: FormControl<string | null | undefined>,
	}
	export function CreateCreditCategoryFormGroup() {
		return new FormGroup<CreditCategoryFormProperties>({
			detailed: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			primary: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`. */
	export interface AccountBalance {

		/**
		 * The amount of funds available to be withdrawn from the account, as determined by the financial institution.
		 * For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.
		 * For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.
		 * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.
		 * Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.
		 * Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.
		 * If `current` is `null` this field is guaranteed not to be `null`.
		 * Required
		 * Type: double
		 */
		available: number;

		/**
		 * The total amount of funds in or owed by the account.
		 * For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.
		 * For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account's balance includes both principal and any outstanding interest.
		 * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.
		 * Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.
		 * When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
		 * Required
		 * Type: double
		 */
		current: number;

		/**
		 * The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated
		 * This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).
		 */
		last_updated_datetime?: Date | null;

		/**
		 * For `credit`-type accounts, this represents the credit limit.
		 * For `depository`-type accounts, this represents the pre-arranged overdraft limit, which is common for current (checking) accounts in Europe.
		 * In North America, this field is typically only available for `credit`-type accounts.
		 * Required
		 * Type: double
		 */
		limit: number;

		/**
		 * The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;
	}

	/** A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`. */
	export interface AccountBalanceFormProperties {

		/**
		 * The amount of funds available to be withdrawn from the account, as determined by the financial institution.
		 * For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.
		 * For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.
		 * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.
		 * Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.
		 * Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.
		 * If `current` is `null` this field is guaranteed not to be `null`.
		 * Required
		 * Type: double
		 */
		available: FormControl<number | null | undefined>,

		/**
		 * The total amount of funds in or owed by the account.
		 * For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.
		 * For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account's balance includes both principal and any outstanding interest.
		 * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.
		 * Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.
		 * When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
		 * Required
		 * Type: double
		 */
		current: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated
		 * This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).
		 */
		last_updated_datetime: FormControl<Date | null | undefined>,

		/**
		 * For `credit`-type accounts, this represents the credit limit.
		 * For `depository`-type accounts, this represents the pre-arranged overdraft limit, which is common for current (checking) accounts in Europe.
		 * In North America, this field is typically only available for `credit`-type accounts.
		 * Required
		 * Type: double
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateAccountBalanceFormGroup() {
		return new FormGroup<AccountBalanceFormProperties>({
			available: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			current: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_updated_datetime: new FormControl<Date | null | undefined>(undefined),
			limit: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A single account at a financial institution. */
	export interface AccountBase {

		/**
		 * Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.
		 * The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.
		 * If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.
		 * Like all Plaid identifiers, the `account_id` is case sensitive.
		 * Required
		 */
		account_id: string;

		/**
		 * A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`.
		 * Required
		 */
		balances: AccountBalance;

		/**
		 * The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
		 * Required
		 */
		mask: string;

		/**
		 * The name of the account, either assigned by the user or by the financial institution itself
		 * Required
		 */
		name: string;

		/**
		 * The official name of the account as given by the financial institution
		 * Required
		 */
		official_name: string;

		/** A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items. */
		persistent_account_id?: string | null;

		/**
		 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		subtype: AccountBaseSubtype;

		/**
		 * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.
		 * `credit:` Credit card
		 * `depository:` Depository account
		 * `loan:` Loan account
		 * `other:` Non-specified account type
		 * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		type: AccountBaseType;

		/**
		 * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.
		 * `pending_automatic_verification`: The Item is pending automatic verification
		 * `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.
		 * `automatically_verified`: The Item has successfully been automatically verified
		 * `manually_verified`: The Item has successfully been manually verified
		 * `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.
		 * `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.
		 */
		verification_status?: AccountBaseVerification_status | null;
	}

	/** A single account at a financial institution. */
	export interface AccountBaseFormProperties {

		/**
		 * Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.
		 * The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.
		 * If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.
		 * Like all Plaid identifiers, the `account_id` is case sensitive.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
		 * Required
		 */
		mask: FormControl<string | null | undefined>,

		/**
		 * The name of the account, either assigned by the user or by the financial institution itself
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The official name of the account as given by the financial institution
		 * Required
		 */
		official_name: FormControl<string | null | undefined>,

		/** A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items. */
		persistent_account_id: FormControl<string | null | undefined>,

		/**
		 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		subtype: FormControl<AccountBaseSubtype | null | undefined>,

		/**
		 * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.
		 * `credit:` Credit card
		 * `depository:` Depository account
		 * `loan:` Loan account
		 * `other:` Non-specified account type
		 * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		type: FormControl<AccountBaseType | null | undefined>,

		/**
		 * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.
		 * `pending_automatic_verification`: The Item is pending automatic verification
		 * `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.
		 * `automatically_verified`: The Item has successfully been automatically verified
		 * `manually_verified`: The Item has successfully been manually verified
		 * `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.
		 * `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.
		 */
		verification_status: FormControl<AccountBaseVerification_status | null | undefined>,
	}
	export function CreateAccountBaseFormGroup() {
		return new FormGroup<AccountBaseFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mask: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			official_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			persistent_account_id: new FormControl<string | null | undefined>(undefined),
			subtype: new FormControl<AccountBaseSubtype | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<AccountBaseType | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<AccountBaseVerification_status | null | undefined>(undefined),
		});

	}

	export enum AccountBaseSubtype { '401a' = '401a', '401k' = '401k', '403B' = '403B', '457b' = '457b', _529 = '529', brokerage = 'brokerage', 'cash isa' = 'cash isa', 'crypto exchange' = 'crypto exchange', 'education savings account' = 'education savings account', ebt = 'ebt', 'fixed annuity' = 'fixed annuity', gic = 'gic', 'health reimbursement arrangement' = 'health reimbursement arrangement', hsa = 'hsa', isa = 'isa', ira = 'ira', lif = 'lif', 'life insurance' = 'life insurance', lira = 'lira', lrif = 'lrif', lrsp = 'lrsp', 'non-custodial wallet' = 'non-custodial wallet', 'non-taxable brokerage account' = 'non-taxable brokerage account', other = 'other', 'other insurance' = 'other insurance', 'other annuity' = 'other annuity', prif = 'prif', rdsp = 'rdsp', resp = 'resp', rlif = 'rlif', rrif = 'rrif', pension = 'pension', 'profit sharing plan' = 'profit sharing plan', retirement = 'retirement', roth = 'roth', 'roth 401k' = 'roth 401k', rrsp = 'rrsp', 'sep ira' = 'sep ira', 'simple ira' = 'simple ira', sipp = 'sipp', 'stock plan' = 'stock plan', 'thrift savings plan' = 'thrift savings plan', tfsa = 'tfsa', trust = 'trust', ugma = 'ugma', utma = 'utma', 'variable annuity' = 'variable annuity', 'credit card' = 'credit card', paypal = 'paypal', cd = 'cd', checking = 'checking', savings = 'savings', 'money market' = 'money market', prepaid = 'prepaid', auto = 'auto', business = 'business', commercial = 'commercial', construction = 'construction', consumer = 'consumer', 'home equity' = 'home equity', loan = 'loan', mortgage = 'mortgage', overdraft = 'overdraft', 'line of credit' = 'line of credit', student = 'student', 'cash management' = 'cash management', keogh = 'keogh', 'mutual fund' = 'mutual fund', recurring = 'recurring', rewards = 'rewards', 'safe deposit' = 'safe deposit', sarsep = 'sarsep', payroll = 'payroll', _null = 73 }

	export enum AccountBaseType { investment = 'investment', credit = 'credit', depository = 'depository', loan = 'loan', brokerage = 'brokerage', other = 'other' }

	export enum AccountBaseVerification_status { automatically_verified = 'automatically_verified', pending_automatic_verification = 'pending_automatic_verification', pending_manual_verification = 'pending_manual_verification', manually_verified = 'manually_verified', verification_expired = 'verification_expired', verification_failed = 'verification_failed' }


	/** Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters. */
	export interface AccountFilter {

		/** A list of account subtypes to be filtered. */
		credit?: Array<string>;

		/** A list of account subtypes to be filtered. */
		depository?: Array<string>;

		/** A list of account subtypes to be filtered. */
		investment?: Array<string>;

		/** A list of account subtypes to be filtered. */
		loan?: Array<string>;
	}

	/** Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters. */
	export interface AccountFilterFormProperties {
	}
	export function CreateAccountFilterFormGroup() {
		return new FormGroup<AccountFilterFormProperties>({
		});

	}


	/**
	 * The `account_filters` specified in the original call to `/link/token/create`.
	 */
	export interface AccountFiltersResponse {

		/** A filter to apply to `credit`-type accounts */
		credit?: CreditFilter;

		/** A filter to apply to `depository`-type accounts */
		depository?: DepositoryFilter;

		/** A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
		investment?: InvestmentFilter;

		/** A filter to apply to `loan`-type accounts */
		loan?: LoanFilter;
	}

	/**
	 * The `account_filters` specified in the original call to `/link/token/create`.
	 */
	export interface AccountFiltersResponseFormProperties {
	}
	export function CreateAccountFiltersResponseFormGroup() {
		return new FormGroup<AccountFiltersResponseFormProperties>({
		});

	}


	/** A filter to apply to `credit`-type accounts */
	export interface CreditFilter {

		/**
		 * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
		 * Required
		 */
		account_subtypes: Array<CreditAccountSubtype>;
	}

	/** A filter to apply to `credit`-type accounts */
	export interface CreditFilterFormProperties {
	}
	export function CreateCreditFilterFormGroup() {
		return new FormGroup<CreditFilterFormProperties>({
		});

	}


	/** Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit). */
	export enum CreditAccountSubtype { 'credit card' = 'credit card', paypal = 'paypal', all = 'all' }


	/** A filter to apply to `depository`-type accounts */
	export interface DepositoryFilter {

		/**
		 * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
		 * Required
		 */
		account_subtypes: Array<DepositoryAccountSubtype>;
	}

	/** A filter to apply to `depository`-type accounts */
	export interface DepositoryFilterFormProperties {
	}
	export function CreateDepositoryFilterFormGroup() {
		return new FormGroup<DepositoryFilterFormProperties>({
		});

	}


	/** Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository). */
	export enum DepositoryAccountSubtype { checking = 'checking', savings = 'savings', hsa = 'hsa', cd = 'cd', 'money market' = 'money market', paypal = 'paypal', prepaid = 'prepaid', 'cash management' = 'cash management', ebt = 'ebt', all = 'all' }


	/** A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
	export interface InvestmentFilter {

		/**
		 * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
		 * Required
		 */
		account_subtypes: Array<InvestmentAccountSubtype>;
	}

	/** A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
	export interface InvestmentFilterFormProperties {
	}
	export function CreateInvestmentFilterFormGroup() {
		return new FormGroup<InvestmentFilterFormProperties>({
		});

	}


	/** Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment). */
	export enum InvestmentAccountSubtype { _529 = '529', '401a' = '401a', '401k' = '401k', '403B' = '403B', '457b' = '457b', brokerage = 'brokerage', 'cash isa' = 'cash isa', 'crypto exchange' = 'crypto exchange', 'education savings account' = 'education savings account', 'fixed annuity' = 'fixed annuity', gic = 'gic', 'health reimbursement arrangement' = 'health reimbursement arrangement', hsa = 'hsa', ira = 'ira', isa = 'isa', keogh = 'keogh', lif = 'lif', 'life insurance' = 'life insurance', lira = 'lira', lrif = 'lrif', lrsp = 'lrsp', 'mutual fund' = 'mutual fund', 'non-custodial wallet' = 'non-custodial wallet', 'non-taxable brokerage account' = 'non-taxable brokerage account', other = 'other', 'other annuity' = 'other annuity', 'other insurance' = 'other insurance', pension = 'pension', prif = 'prif', 'profit sharing plan' = 'profit sharing plan', qshr = 'qshr', rdsp = 'rdsp', resp = 'resp', retirement = 'retirement', rlif = 'rlif', roth = 'roth', 'roth 401k' = 'roth 401k', rrif = 'rrif', rrsp = 'rrsp', sarsep = 'sarsep', 'sep ira' = 'sep ira', 'simple ira' = 'simple ira', sipp = 'sipp', 'stock plan' = 'stock plan', tfsa = 'tfsa', trust = 'trust', ugma = 'ugma', utma = 'utma', 'variable annuity' = 'variable annuity', all = 'all' }


	/** A filter to apply to `loan`-type accounts */
	export interface LoanFilter {

		/**
		 * An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
		 * Required
		 */
		account_subtypes: Array<LoanAccountSubtype>;
	}

	/** A filter to apply to `loan`-type accounts */
	export interface LoanFilterFormProperties {
	}
	export function CreateLoanFilterFormGroup() {
		return new FormGroup<LoanFilterFormProperties>({
		});

	}


	/** Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan). */
	export enum LoanAccountSubtype { auto = 'auto', business = 'business', commercial = 'commercial', construction = 'construction', consumer = 'consumer', 'home equity' = 'home equity', loan = 'loan', mortgage = 'mortgage', 'line of credit' = 'line of credit', student = 'student', other = 'other', all = 'all' }


	/** Identity information about an account */
	export interface AccountIdentity extends AccountBase {

		/**
		 * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
		 * Required
		 */
		owners: Array<Owner>;
	}

	/** Identity information about an account */
	export interface AccountIdentityFormProperties extends AccountBaseFormProperties {
	}
	export function CreateAccountIdentityFormGroup() {
		return new FormGroup<AccountIdentityFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mask: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			official_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			persistent_account_id: new FormControl<string | null | undefined>(undefined),
			subtype: new FormControl<AccountBaseSubtype | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<AccountBaseType | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<AccountBaseVerification_status | null | undefined>(undefined),
		});

	}


	/** Identity match scores for an account */
	export interface AccountIdentityMatchScore extends AccountBase {

		/** Score found by matching address provided by the API with the address on the account at the financial institution. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
		address?: AddressMatchScore;

		/** Score found by matching email provided by the API with the email on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
		email_address?: EmailAddressMatchScore;

		/** Score found by matching name provided by the API with the name on the account at the financial institution. If the account contains multiple owners, the maximum match score is filled. */
		legal_name?: NameMatchScore;

		/** Score found by matching phone number provided by the API with the phone number on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
		phone_number?: PhoneNumberMatchScore;
	}

	/** Identity match scores for an account */
	export interface AccountIdentityMatchScoreFormProperties extends AccountBaseFormProperties {
	}
	export function CreateAccountIdentityMatchScoreFormGroup() {
		return new FormGroup<AccountIdentityMatchScoreFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mask: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			official_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			persistent_account_id: new FormControl<string | null | undefined>(undefined),
			subtype: new FormControl<AccountBaseSubtype | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<AccountBaseType | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<AccountBaseVerification_status | null | undefined>(undefined),
		});

	}


	/** Score found by matching address provided by the API with the address on the account at the financial institution. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
	export interface AddressMatchScore {

		/** postal code was provided for both and was a match */
		is_postal_code_match?: boolean | null;

		/**
		 * Match score for address. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the address is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score?: number | null;
	}

	/** Score found by matching address provided by the API with the address on the account at the financial institution. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
	export interface AddressMatchScoreFormProperties {

		/** postal code was provided for both and was a match */
		is_postal_code_match: FormControl<boolean | null | undefined>,

		/**
		 * Match score for address. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the address is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreateAddressMatchScoreFormGroup() {
		return new FormGroup<AddressMatchScoreFormProperties>({
			is_postal_code_match: new FormControl<boolean | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Score found by matching email provided by the API with the email on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
	export interface EmailAddressMatchScore {

		/**
		 * Match score for normalized email. 100 is a perfect match and 0 is a no match. If the email is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score?: number | null;
	}

	/** Score found by matching email provided by the API with the email on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
	export interface EmailAddressMatchScoreFormProperties {

		/**
		 * Match score for normalized email. 100 is a perfect match and 0 is a no match. If the email is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreateEmailAddressMatchScoreFormGroup() {
		return new FormGroup<EmailAddressMatchScoreFormProperties>({
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Score found by matching name provided by the API with the name on the account at the financial institution. If the account contains multiple owners, the maximum match score is filled. */
	export interface NameMatchScore {

		/** Is `true` if the name on either of the names that was matched for the score contained strings indicative of a business name, such as "CORP", "LLC", "INC", or "LTD". A `true` result generally indicates the entity is a business. However, a `false` result does not mean the entity is not a business, as some businesses do not use these strings in the names used for their financial institution accounts. */
		is_business_name_detected?: boolean | null;

		/** first or last name completely matched, likely a family member */
		is_first_name_or_last_name_match?: boolean | null;

		/** nickname matched, example Jennifer and Jenn. */
		is_nickname_match?: boolean | null;

		/**
		 * Represents the match score for name. 100 is a perfect score, 85-99 means a strong match, 50-84 is a partial match, less than 50 is a weak match and 0 is a complete mismatch. If the name is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score?: number | null;
	}

	/** Score found by matching name provided by the API with the name on the account at the financial institution. If the account contains multiple owners, the maximum match score is filled. */
	export interface NameMatchScoreFormProperties {

		/** Is `true` if the name on either of the names that was matched for the score contained strings indicative of a business name, such as "CORP", "LLC", "INC", or "LTD". A `true` result generally indicates the entity is a business. However, a `false` result does not mean the entity is not a business, as some businesses do not use these strings in the names used for their financial institution accounts. */
		is_business_name_detected: FormControl<boolean | null | undefined>,

		/** first or last name completely matched, likely a family member */
		is_first_name_or_last_name_match: FormControl<boolean | null | undefined>,

		/** nickname matched, example Jennifer and Jenn. */
		is_nickname_match: FormControl<boolean | null | undefined>,

		/**
		 * Represents the match score for name. 100 is a perfect score, 85-99 means a strong match, 50-84 is a partial match, less than 50 is a weak match and 0 is a complete mismatch. If the name is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreateNameMatchScoreFormGroup() {
		return new FormGroup<NameMatchScoreFormProperties>({
			is_business_name_detected: new FormControl<boolean | null | undefined>(undefined),
			is_first_name_or_last_name_match: new FormControl<boolean | null | undefined>(undefined),
			is_nickname_match: new FormControl<boolean | null | undefined>(undefined),
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Score found by matching phone number provided by the API with the phone number on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
	export interface PhoneNumberMatchScore {

		/**
		 * Match score for normalized phone number. 100 is a perfect match and 0 is a no match. If the phone number is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score?: number | null;
	}

	/** Score found by matching phone number provided by the API with the phone number on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled. */
	export interface PhoneNumberMatchScoreFormProperties {

		/**
		 * Match score for normalized phone number. 100 is a perfect match and 0 is a no match. If the phone number is missing from either the API or financial institution, this is empty.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreatePhoneNumberMatchScoreFormGroup() {
		return new FormGroup<PhoneNumberMatchScoreFormProperties>({
			score: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * An object with keys of `account_id`'s that are mapped to their respective identity attributes that changed.
	 * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["PHONES"] }`
	 */
	export interface AccountIdsWithUpdatedIdentity {
	}

	/**
	 * An object with keys of `account_id`'s that are mapped to their respective identity attributes that changed.
	 * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["PHONES"] }`
	 */
	export interface AccountIdsWithUpdatedIdentityFormProperties {
	}
	export function CreateAccountIdsWithUpdatedIdentityFormGroup() {
		return new FormGroup<AccountIdsWithUpdatedIdentityFormProperties>({
		});

	}


	/** Allow the application to access specific products on this account */
	export interface AccountProductAccess {

		/** Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		account_data?: boolean | null;

		/** Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		statements?: boolean | null;

		/** Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		tax_documents?: boolean | null;
	}

	/** Allow the application to access specific products on this account */
	export interface AccountProductAccessFormProperties {

		/** Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		account_data: FormControl<boolean | null | undefined>,

		/** Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		statements: FormControl<boolean | null | undefined>,

		/** Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		tax_documents: FormControl<boolean | null | undefined>,
	}
	export function CreateAccountProductAccessFormGroup() {
		return new FormGroup<AccountProductAccessFormProperties>({
			account_data: new FormControl<boolean | null | undefined>(undefined),
			statements: new FormControl<boolean | null | undefined>(undefined),
			tax_documents: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Allow the application to access specific products on this account */
	export interface AccountProductAccessNullable extends AccountProductAccess {
	}

	/** Allow the application to access specific products on this account */
	export interface AccountProductAccessNullableFormProperties extends AccountProductAccessFormProperties {
	}
	export function CreateAccountProductAccessNullableFormGroup() {
		return new FormGroup<AccountProductAccessNullableFormProperties>({
			account_data: new FormControl<boolean | null | undefined>(undefined),
			statements: new FormControl<boolean | null | undefined>(undefined),
			tax_documents: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * The application requires that accounts be limited to a specific cardinality.
	 * `MULTI_SELECT`: indicates that the user should be allowed to pick multiple accounts.
	 * `SINGLE_SELECT`: indicates that the user should be allowed to pick only a single account.
	 * `ALL`: indicates that the user must share all of their accounts and should not be given the opportunity to de-select
	 */
	export enum AccountSelectionCardinality { SINGLE_SELECT = 'SINGLE_SELECT', MULTI_SELECT = 'MULTI_SELECT', ALL = 'ALL' }


	/** See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes. */
	export enum AccountSubtype { '401a' = '401a', '401k' = '401k', '403B' = '403B', '457b' = '457b', _529 = '529', brokerage = 'brokerage', 'cash isa' = 'cash isa', 'crypto exchange' = 'crypto exchange', 'education savings account' = 'education savings account', ebt = 'ebt', 'fixed annuity' = 'fixed annuity', gic = 'gic', 'health reimbursement arrangement' = 'health reimbursement arrangement', hsa = 'hsa', isa = 'isa', ira = 'ira', lif = 'lif', 'life insurance' = 'life insurance', lira = 'lira', lrif = 'lrif', lrsp = 'lrsp', 'non-custodial wallet' = 'non-custodial wallet', 'non-taxable brokerage account' = 'non-taxable brokerage account', other = 'other', 'other insurance' = 'other insurance', 'other annuity' = 'other annuity', prif = 'prif', rdsp = 'rdsp', resp = 'resp', rlif = 'rlif', rrif = 'rrif', pension = 'pension', 'profit sharing plan' = 'profit sharing plan', retirement = 'retirement', roth = 'roth', 'roth 401k' = 'roth 401k', rrsp = 'rrsp', 'sep ira' = 'sep ira', 'simple ira' = 'simple ira', sipp = 'sipp', 'stock plan' = 'stock plan', 'thrift savings plan' = 'thrift savings plan', tfsa = 'tfsa', trust = 'trust', ugma = 'ugma', utma = 'utma', 'variable annuity' = 'variable annuity', 'credit card' = 'credit card', paypal = 'paypal', cd = 'cd', checking = 'checking', savings = 'savings', 'money market' = 'money market', prepaid = 'prepaid', auto = 'auto', business = 'business', commercial = 'commercial', construction = 'construction', consumer = 'consumer', 'home equity' = 'home equity', loan = 'loan', mortgage = 'mortgage', overdraft = 'overdraft', 'line of credit' = 'line of credit', student = 'student', 'cash management' = 'cash management', keogh = 'keogh', 'mutual fund' = 'mutual fund', recurring = 'recurring', rewards = 'rewards', 'safe deposit' = 'safe deposit', sarsep = 'sarsep', payroll = 'payroll', _null = 73 }


	/**
	 * `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.
	 * `credit:` Credit card
	 * `depository:` Depository account
	 * `loan:` Loan account
	 * `other:` Non-specified account type
	 * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
	 */
	export enum AccountType { investment = 'investment', credit = 'credit', depository = 'depository', loan = 'loan', brokerage = 'brokerage', other = 'other' }


	/** AccountsBalanceGetRequest defines the request schema for `/accounts/balance/get` */
	export interface AccountsBalanceGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter `/accounts/balance/get` results. */
		options?: AccountsBalanceGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AccountsBalanceGetRequest defines the request schema for `/accounts/balance/get` */
	export interface AccountsBalanceGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAccountsBalanceGetRequestFormGroup() {
		return new FormGroup<AccountsBalanceGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/accounts/balance/get` results. */
	export interface AccountsBalanceGetRequestOptions {

		/**
		 * A list of `account_ids` to retrieve for the Item. The default value is `null`.
		 * Note: An error will be returned if a provided `account_id` is not associated with the Item.
		 */
		account_ids?: Array<string>;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.
		 * If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.
		 * This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
		 */
		min_last_updated_datetime?: Date | null;
	}

	/** An optional object to filter `/accounts/balance/get` results. */
	export interface AccountsBalanceGetRequestOptionsFormProperties {

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.
		 * If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.
		 * This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
		 */
		min_last_updated_datetime: FormControl<Date | null | undefined>,
	}
	export function CreateAccountsBalanceGetRequestOptionsFormGroup() {
		return new FormGroup<AccountsBalanceGetRequestOptionsFormProperties>({
			min_last_updated_datetime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** AccountsGetRequest defines the request schema for `/accounts/get` */
	export interface AccountsGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter `/accounts/get` results. */
		options?: AccountsGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AccountsGetRequest defines the request schema for `/accounts/get` */
	export interface AccountsGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAccountsGetRequestFormGroup() {
		return new FormGroup<AccountsGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/accounts/get` results. */
	export interface AccountsGetRequestOptions {

		/** An array of `account_ids` to retrieve for the Account. */
		account_ids?: Array<string>;
	}

	/** An optional object to filter `/accounts/get` results. */
	export interface AccountsGetRequestOptionsFormProperties {
	}
	export function CreateAccountsGetRequestOptionsFormGroup() {
		return new FormGroup<AccountsGetRequestOptionsFormProperties>({
		});

	}


	/** AccountsGetResponse defines the response schema for `/accounts/get` and `/accounts/balance/get`. */
	export interface AccountsGetResponse {

		/**
		 * An array of financial institution accounts associated with the Item.
		 * If `/accounts/balance/get` was called, each account will include real-time balance information.
		 * Required
		 */
		accounts: Array<AccountBase>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AccountsGetResponse defines the response schema for `/accounts/get` and `/accounts/balance/get`. */
	export interface AccountsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAccountsGetResponseFormGroup() {
		return new FormGroup<AccountsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Metadata about the Item. */
	export interface Item {

		/**
		 * A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.
		 * Required
		 */
		available_products: Array<Products>;

		/**
		 * A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here.
		 * Required
		 */
		billed_products: Array<Products>;

		/**
		 * The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.
		 * Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.
		 * Required
		 */
		consent_expiration_time: Date;

		/**
		 * Beta: A list of products that have gone through consent collection for the Item. Only present for those enabled in the beta.
		 */
		consented_products?: Array<Products>;

		/**
		 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
		 * Required
		 */
		error: PlaidError;

		/** The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits. */
		institution_id?: string | null;

		/**
		 * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
		 * Required
		 */
		item_id: string;

		/**
		 * A list of authorized products for the Item.
		 */
		products?: Array<Products>;

		/**
		 * Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.
		 * `background` - Item can be updated in the background
		 * `user_present_required` - Item requires user interaction to be updated
		 * Required
		 */
		update_type: ItemUpdate_type;

		/**
		 * The URL registered to receive webhooks for the Item.
		 * Required
		 */
		webhook: string;
	}

	/** Metadata about the Item. */
	export interface ItemFormProperties {

		/**
		 * The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Linkâ€™s update mode in advance of the consent expiration time.
		 * Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.
		 * Required
		 */
		consent_expiration_time: FormControl<Date | null | undefined>,

		/** The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits. */
		institution_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.
		 * `background` - Item can be updated in the background
		 * `user_present_required` - Item requires user interaction to be updated
		 * Required
		 */
		update_type: FormControl<ItemUpdate_type | null | undefined>,

		/**
		 * The URL registered to receive webhooks for the Item.
		 * Required
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateItemFormGroup() {
		return new FormGroup<ItemFormProperties>({
			consent_expiration_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			institution_id: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			update_type: new FormControl<ItemUpdate_type | null | undefined>(undefined, [Validators.required]),
			webhook: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization. */
	export enum Products { assets = 'assets', auth = 'auth', balance = 'balance', identity = 'identity', investments = 'investments', liabilities = 'liabilities', payment_initiation = 'payment_initiation', identity_verification = 'identity_verification', transactions = 'transactions', credit_details = 'credit_details', income = 'income', income_verification = 'income_verification', deposit_switch = 'deposit_switch', standing_orders = 'standing_orders', transfer = 'transfer', employment = 'employment', recurring_transactions = 'recurring_transactions', signal = 'signal' }


	/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
	export interface PlaidError {

		/**
		 * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.
		 * `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
		 */
		causes?: Array<string>;

		/**
		 * A user-friendly representation of the error code. `null` if the error is not related to user action.
		 * This may change over time and is not safe for programmatic use.
		 * Required
		 */
		display_message: string;

		/** The URL of a Plaid documentation page with more information about the error */
		documentation_url?: string | null;

		/**
		 * The particular error code. Safe for programmatic use.
		 * Required
		 */
		error_code: string;

		/**
		 * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
		 * Required
		 */
		error_message: string;

		/**
		 * A broad categorization of the error. Safe for programmatic use.
		 * Required
		 */
		error_type: PlaidErrorError_type;

		/** A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks. */
		request_id?: string | null;

		/**
		 * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
		 * Type: double
		 */
		status?: number | null;

		/** Suggested steps for resolving the error */
		suggested_action?: string | null;
	}

	/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
	export interface PlaidErrorFormProperties {

		/**
		 * A user-friendly representation of the error code. `null` if the error is not related to user action.
		 * This may change over time and is not safe for programmatic use.
		 * Required
		 */
		display_message: FormControl<string | null | undefined>,

		/** The URL of a Plaid documentation page with more information about the error */
		documentation_url: FormControl<string | null | undefined>,

		/**
		 * The particular error code. Safe for programmatic use.
		 * Required
		 */
		error_code: FormControl<string | null | undefined>,

		/**
		 * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
		 * Required
		 */
		error_message: FormControl<string | null | undefined>,

		/**
		 * A broad categorization of the error. Safe for programmatic use.
		 * Required
		 */
		error_type: FormControl<PlaidErrorError_type | null | undefined>,

		/** A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks. */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
		 * Type: double
		 */
		status: FormControl<number | null | undefined>,

		/** Suggested steps for resolving the error */
		suggested_action: FormControl<string | null | undefined>,
	}
	export function CreatePlaidErrorFormGroup() {
		return new FormGroup<PlaidErrorFormProperties>({
			display_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			documentation_url: new FormControl<string | null | undefined>(undefined),
			error_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error_type: new FormControl<PlaidErrorError_type | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<number | null | undefined>(undefined),
			suggested_action: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PlaidErrorError_type { INVALID_REQUEST = 'INVALID_REQUEST', INVALID_RESULT = 'INVALID_RESULT', INVALID_INPUT = 'INVALID_INPUT', INSTITUTION_ERROR = 'INSTITUTION_ERROR', RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED', API_ERROR = 'API_ERROR', ITEM_ERROR = 'ITEM_ERROR', ASSET_REPORT_ERROR = 'ASSET_REPORT_ERROR', RECAPTCHA_ERROR = 'RECAPTCHA_ERROR', OAUTH_ERROR = 'OAUTH_ERROR', PAYMENT_ERROR = 'PAYMENT_ERROR', BANK_TRANSFER_ERROR = 'BANK_TRANSFER_ERROR', INCOME_VERIFICATION_ERROR = 'INCOME_VERIFICATION_ERROR', MICRODEPOSITS_ERROR = 'MICRODEPOSITS_ERROR' }

	export enum ItemUpdate_type { background = 'background', user_present_required = 'user_present_required' }


	/** Enum representing the state of the action/activity. */
	export enum ActionState { UNKNOWN = 'UNKNOWN', ATTEMPT = 'ATTEMPT', SUCCESS = 'SUCCESS', FAILURE = 'FAILURE', SKIPPED = 'SKIPPED' }


	/** Describes a consent activity. */
	export interface Activity {

		/**
		 * Types of consent activities
		 * Required
		 */
		activity: ActivityActivity;

		/**
		 * A unique identifier for the activity
		 * Required
		 */
		id: string;

		/**
		 * The date and time this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
		 * Required
		 */
		initiated_date: string;

		/**
		 * Application ID of the client who initiated the activity.
		 * Required
		 */
		initiator: string;

		/** The scopes object */
		scopes?: ScopesNullable;

		/**
		 * Enum representing the state of the action/activity.
		 * Required
		 */
		state: ActionState;

		/** This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect. */
		target_application_id?: string | null;
	}

	/** Describes a consent activity. */
	export interface ActivityFormProperties {

		/**
		 * Types of consent activities
		 * Required
		 */
		activity: FormControl<ActivityActivity | null | undefined>,

		/**
		 * A unique identifier for the activity
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The date and time this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
		 * Required
		 */
		initiated_date: FormControl<string | null | undefined>,

		/**
		 * Application ID of the client who initiated the activity.
		 * Required
		 */
		initiator: FormControl<string | null | undefined>,

		/**
		 * Enum representing the state of the action/activity.
		 * Required
		 */
		state: FormControl<ActionState | null | undefined>,

		/** This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect. */
		target_application_id: FormControl<string | null | undefined>,
	}
	export function CreateActivityFormGroup() {
		return new FormGroup<ActivityFormProperties>({
			activity: new FormControl<ActivityActivity | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			initiated_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			initiator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<ActionState | null | undefined>(undefined, [Validators.required]),
			target_application_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ActivityActivity { UNKNOWN = 'UNKNOWN', ITEM_CREATE = 'ITEM_CREATE', ITEM_IMPORT = 'ITEM_IMPORT', ITEM_UPDATE = 'ITEM_UPDATE', ITEM_UNLINK = 'ITEM_UNLINK', PORTAL_UNLINK = 'PORTAL_UNLINK', PORTAL_ITEMS_DELETE = 'PORTAL_ITEMS_DELETE', ITEM_REMOVE = 'ITEM_REMOVE', INVARIANT_CHECKER_DELETION = 'INVARIANT_CHECKER_DELETION', SCOPES_UPDATE = 'SCOPES_UPDATE' }


	/** Types of consent activities */
	export enum ActivityType { UNKNOWN = 'UNKNOWN', ITEM_CREATE = 'ITEM_CREATE', ITEM_IMPORT = 'ITEM_IMPORT', ITEM_UPDATE = 'ITEM_UPDATE', ITEM_UNLINK = 'ITEM_UNLINK', PORTAL_UNLINK = 'PORTAL_UNLINK', PORTAL_ITEMS_DELETE = 'PORTAL_ITEMS_DELETE', ITEM_REMOVE = 'ITEM_REMOVE', INVARIANT_CHECKER_DELETION = 'INVARIANT_CHECKER_DELETION', SCOPES_UPDATE = 'SCOPES_UPDATE' }


	/** Data about the components comprising an address. */
	export interface AddressDataNullable extends AddressData {
	}

	/** Data about the components comprising an address. */
	export interface AddressDataNullableFormProperties extends AddressDataFormProperties {
	}
	export function CreateAddressDataNullableFormGroup() {
		return new FormGroup<AddressDataNullableFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A physical mailing address. */
	export interface AddressNullable extends Address {
	}

	/** A physical mailing address. */
	export interface AddressNullableFormProperties extends AddressFormProperties {
	}
	export function CreateAddressNullableFormGroup() {
		return new FormGroup<AddressNullableFormProperties>({
			primary: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/**
	 * Field describing whether the associated address is being used for commercial or residential purposes.
	 * Note: This value will be `no_data` when Plaid does not have sufficient data to determine the address's use.
	 */
	export enum AddressPurposeLabel { residential = 'residential', commercial = 'commercial', no_data = 'no_data' }


	/** Metadata about the application */
	export interface Application {

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: string;

		/**
		 * The URL for the application's website
		 * Required
		 */
		application_url: string;

		/**
		 * A string representing the city of the clientâ€™s headquarters.
		 * Required
		 */
		city: string;

		/**
		 * A string representing the name of clientâ€™s legal entity.
		 * Required
		 */
		company_legal_name: string;

		/**
		 * A string representing the country code of the clientâ€™s headquarters.
		 * Required
		 */
		country_code: string;

		/**
		 * A human-readable name of the application for display purposes
		 * Required
		 */
		display_name: string;

		/**
		 * The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
		 * Required
		 * Type: DateOnly
		 */
		join_date: Date;

		/**
		 * A URL that links to the application logo image.
		 * Required
		 */
		logo_url: string;

		/**
		 * The name of the application
		 * Required
		 */
		name: string;

		/**
		 * A string representing the postal code of the clientâ€™s headquarters.
		 * Required
		 */
		postal_code: string;

		/**
		 * A string provided by the connected app stating why they use their respective enabled products.
		 * Required
		 */
		reason_for_access: string;

		/**
		 * A string representing the region of the clientâ€™s headquarters.
		 * Required
		 */
		region: string;

		/**
		 * A string representing clientâ€™s broad use case as assessed by Plaid.
		 * Required
		 */
		use_case: string;
	}

	/** Metadata about the application */
	export interface ApplicationFormProperties {

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: FormControl<string | null | undefined>,

		/**
		 * The URL for the application's website
		 * Required
		 */
		application_url: FormControl<string | null | undefined>,

		/**
		 * A string representing the city of the clientâ€™s headquarters.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * A string representing the name of clientâ€™s legal entity.
		 * Required
		 */
		company_legal_name: FormControl<string | null | undefined>,

		/**
		 * A string representing the country code of the clientâ€™s headquarters.
		 * Required
		 */
		country_code: FormControl<string | null | undefined>,

		/**
		 * A human-readable name of the application for display purposes
		 * Required
		 */
		display_name: FormControl<string | null | undefined>,

		/**
		 * The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
		 * Required
		 * Type: DateOnly
		 */
		join_date: FormControl<Date | null | undefined>,

		/**
		 * A URL that links to the application logo image.
		 * Required
		 */
		logo_url: FormControl<string | null | undefined>,

		/**
		 * The name of the application
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * A string representing the postal code of the clientâ€™s headquarters.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * A string provided by the connected app stating why they use their respective enabled products.
		 * Required
		 */
		reason_for_access: FormControl<string | null | undefined>,

		/**
		 * A string representing the region of the clientâ€™s headquarters.
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * A string representing clientâ€™s broad use case as assessed by Plaid.
		 * Required
		 */
		use_case: FormControl<string | null | undefined>,
	}
	export function CreateApplicationFormGroup() {
		return new FormGroup<ApplicationFormProperties>({
			application_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			application_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			display_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			join_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			logo_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason_for_access: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			use_case: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ApplicationGetRequest defines the schema for `/application/get` */
	export interface ApplicationGetRequest {

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: string;

		/**
		 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
		 * Required
		 */
		client_id: string;

		/**
		 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
		 * Required
		 */
		secret: string;
	}

	/** ApplicationGetRequest defines the schema for `/application/get` */
	export interface ApplicationGetRequestFormProperties {

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: FormControl<string | null | undefined>,

		/**
		 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
		 * Required
		 */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
		 * Required
		 */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateApplicationGetRequestFormGroup() {
		return new FormGroup<ApplicationGetRequestFormProperties>({
			application_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ApplicationGetResponse defines the response schema for `/application/get` */
	export interface ApplicationGetResponse {

		/**
		 * Metadata about the application
		 * Required
		 */
		application: Application;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ApplicationGetResponse defines the response schema for `/application/get` */
	export interface ApplicationGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateApplicationGetResponseFormGroup() {
		return new FormGroup<ApplicationGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface Asset {

		/**
		 * Details about an asset.
		 * Required
		 */
		ASSET_DETAIL: AssetDetail;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_HOLDER: AssetHolder;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_OWNERS: AssetOwners;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTIONS: AssetTransactions;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		VALIDATION_SOURCES: ValidationSources;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetFormProperties {
	}
	export function CreateAssetFormGroup() {
		return new FormGroup<AssetFormProperties>({
		});

	}


	/** Details about an asset. */
	export interface AssetDetail {

		/**
		 * A unique alphanumeric string identifying an asset.
		 * Required
		 */
		AssetAccountIdentifier: string;

		/**
		 * Account Report As of Date / Create Date. Format YYYY-MM-DD
		 * Required
		 */
		AssetAsOfDate: string;

		/**
		 * Asset Account Available Balance.
		 * Required
		 * Type: double
		 */
		AssetAvailableBalanceAmount: number;

		/**
		 * A vendor created unique Identifier
		 * Required
		 * Type: double
		 */
		AssetCurrentBalanceAmount: number;

		/**
		 * The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		AssetDaysRequestedCount: number;

		/**
		 * A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
		 * Required
		 */
		AssetDescription: string;

		/**
		 * Ownership type of the asset account.
		 * Required
		 */
		AssetOwnershipType: string;

		/**
		 * A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount.
		 * Required
		 */
		AssetType: AssetDetailAssetType;

		/**
		 * Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
		 * Required
		 */
		AssetTypeAdditionalDescription: string;

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetUniqueIdentifier: string;
	}

	/** Details about an asset. */
	export interface AssetDetailFormProperties {

		/**
		 * A unique alphanumeric string identifying an asset.
		 * Required
		 */
		AssetAccountIdentifier: FormControl<string | null | undefined>,

		/**
		 * Account Report As of Date / Create Date. Format YYYY-MM-DD
		 * Required
		 */
		AssetAsOfDate: FormControl<string | null | undefined>,

		/**
		 * Asset Account Available Balance.
		 * Required
		 * Type: double
		 */
		AssetAvailableBalanceAmount: FormControl<number | null | undefined>,

		/**
		 * A vendor created unique Identifier
		 * Required
		 * Type: double
		 */
		AssetCurrentBalanceAmount: FormControl<number | null | undefined>,

		/**
		 * The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		AssetDaysRequestedCount: FormControl<number | null | undefined>,

		/**
		 * A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
		 * Required
		 */
		AssetDescription: FormControl<string | null | undefined>,

		/**
		 * Ownership type of the asset account.
		 * Required
		 */
		AssetOwnershipType: FormControl<string | null | undefined>,

		/**
		 * A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount.
		 * Required
		 */
		AssetType: FormControl<AssetDetailAssetType | null | undefined>,

		/**
		 * Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
		 * Required
		 */
		AssetTypeAdditionalDescription: FormControl<string | null | undefined>,

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetUniqueIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateAssetDetailFormGroup() {
		return new FormGroup<AssetDetailFormProperties>({
			AssetAccountIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetAsOfDate: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetAvailableBalanceAmount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			AssetCurrentBalanceAmount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			AssetDaysRequestedCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			AssetDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetOwnershipType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetType: new FormControl<AssetDetailAssetType | null | undefined>(undefined, [Validators.required]),
			AssetTypeAdditionalDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetUniqueIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AssetDetailAssetType { CheckingAccount = 'CheckingAccount', SavingsAccount = 'SavingsAccount', Investment = 'Investment', MoneyMarketFund = 'MoneyMarketFund', Other = 'Other' }


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetHolder {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		NAME: AssetHolderName;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetHolderFormProperties {
	}
	export function CreateAssetHolderFormGroup() {
		return new FormGroup<AssetHolderFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetHolderName {

		/**
		 * The unparsed name of either an individual or a legal entity.
		 * Required
		 */
		FullName: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetHolderNameFormProperties {

		/**
		 * The unparsed name of either an individual or a legal entity.
		 * Required
		 */
		FullName: FormControl<string | null | undefined>,
	}
	export function CreateAssetHolderNameFormGroup() {
		return new FormGroup<AssetHolderNameFormProperties>({
			FullName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetOwners {

		/**
		 * Multiple Occurances of Account Owners Full Name up to 4.
		 * Required
		 */
		ASSET_OWNER: Array<AssetOwner>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetOwnersFormProperties {
	}
	export function CreateAssetOwnersFormGroup() {
		return new FormGroup<AssetOwnersFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetOwner {

		/**
		 * Account Owner Full Name.
		 * Required
		 */
		AssetOwnerText: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetOwnerFormProperties {

		/**
		 * Account Owner Full Name.
		 * Required
		 */
		AssetOwnerText: FormControl<string | null | undefined>,
	}
	export function CreateAssetOwnerFormGroup() {
		return new FormGroup<AssetOwnerFormProperties>({
			AssetOwnerText: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetTransactions {

		/** Required */
		ASSET_TRANSACTION: Array<AssetTransaction>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetTransactionsFormProperties {
	}
	export function CreateAssetTransactionsFormGroup() {
		return new FormGroup<AssetTransactionsFormProperties>({
		});

	}


	/** An object representing... */
	export interface AssetTransaction {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTION_DESCRIPTON: Array<AssetTransactionDescription>;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTION_DETAIL: AssetTransactionDetail;
	}

	/** An object representing... */
	export interface AssetTransactionFormProperties {
	}
	export function CreateAssetTransactionFormGroup() {
		return new FormGroup<AssetTransactionFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetTransactionDescription {

		/**
		 * Asset Transaction Description String up to 3 occurances 1 required.
		 * Required
		 */
		AssetTransactionDescription1: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetTransactionDescriptionFormProperties {

		/**
		 * Asset Transaction Description String up to 3 occurances 1 required.
		 * Required
		 */
		AssetTransactionDescription1: FormControl<string | null | undefined>,
	}
	export function CreateAssetTransactionDescriptionFormGroup() {
		return new FormGroup<AssetTransactionDescriptionFormProperties>({
			AssetTransactionDescription1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetTransactionDetail {

		/**
		 * Asset Transaction Amount.
		 * Required
		 * Type: double
		 */
		AssetTransactionAmount: number;

		/**
		 * Asset Transaction Category Type Enumerated derived by Vendor.
		 * Required
		 */
		AssetTransactionCategoryType: AssetTransactionDetailAssetTransactionCategoryType;

		/**
		 * Asset Transaction Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionDate: Date;

		/**
		 * Populate with who did the transaction.
		 * Required
		 */
		AssetTransactionPaidByName: string;

		/**
		 * Asset Transaction Post Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionPostDate: Date;

		/**
		 * Asset Transaction Type.
		 * Required
		 */
		AssetTransactionType: AssetTransactionDetailAssetTransactionType;

		/**
		 * FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
		 * Required
		 */
		AssetTransactionTypeAdditionalDescription: string;

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetTransactionUniqueIdentifier: string;

		/**
		 * FI provided Transaction Identifier.
		 * Required
		 */
		FinancialInstitutionTransactionIdentifier: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetTransactionDetailFormProperties {

		/**
		 * Asset Transaction Amount.
		 * Required
		 * Type: double
		 */
		AssetTransactionAmount: FormControl<number | null | undefined>,

		/**
		 * Asset Transaction Category Type Enumerated derived by Vendor.
		 * Required
		 */
		AssetTransactionCategoryType: FormControl<AssetTransactionDetailAssetTransactionCategoryType | null | undefined>,

		/**
		 * Asset Transaction Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionDate: FormControl<Date | null | undefined>,

		/**
		 * Populate with who did the transaction.
		 * Required
		 */
		AssetTransactionPaidByName: FormControl<string | null | undefined>,

		/**
		 * Asset Transaction Post Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionPostDate: FormControl<Date | null | undefined>,

		/**
		 * Asset Transaction Type.
		 * Required
		 */
		AssetTransactionType: FormControl<AssetTransactionDetailAssetTransactionType | null | undefined>,

		/**
		 * FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
		 * Required
		 */
		AssetTransactionTypeAdditionalDescription: FormControl<string | null | undefined>,

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetTransactionUniqueIdentifier: FormControl<string | null | undefined>,

		/**
		 * FI provided Transaction Identifier.
		 * Required
		 */
		FinancialInstitutionTransactionIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateAssetTransactionDetailFormGroup() {
		return new FormGroup<AssetTransactionDetailFormProperties>({
			AssetTransactionAmount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			AssetTransactionCategoryType: new FormControl<AssetTransactionDetailAssetTransactionCategoryType | null | undefined>(undefined, [Validators.required]),
			AssetTransactionDate: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AssetTransactionPaidByName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetTransactionPostDate: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AssetTransactionType: new FormControl<AssetTransactionDetailAssetTransactionType | null | undefined>(undefined, [Validators.required]),
			AssetTransactionTypeAdditionalDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetTransactionUniqueIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FinancialInstitutionTransactionIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AssetTransactionDetailAssetTransactionCategoryType { ATMFee = 'ATMFee', Advertising = 'Advertising', AirTravel = 'AirTravel', AlcoholBars = 'AlcoholBars', Allowance = 'Allowance', Amusement = 'Amusement', Arts = 'Arts', AutoTransport = 'AutoTransport', AutoInsurance = 'AutoInsurance', AutoPayment = 'AutoPayment', BabySupplies = 'BabySupplies', BabysitterDaycare = 'BabysitterDaycare', BankFee = 'BankFee', BillsUtilities = 'BillsUtilities', Bonus = 'Bonus', BooksSupplies = 'BooksSupplies', 'Business Services' = 'Business Services', Buy = 'Buy', CashATM = 'CashATM', Charity = 'Charity', Check = 'Check', ChildSupport = 'ChildSupport', Clothing = 'Clothing', CoffeeShops = 'CoffeeShops', CreditCardPayment = 'CreditCardPayment', Dentist = 'Dentist', Doctor = 'Doctor', Education = 'Education', ElectronicsSoftware = 'ElectronicsSoftware', Entertainment = 'Entertainment', Eyecare = 'Eyecare', FastFood = 'FastFood', FederalTax = 'FederalTax', FeesCharges = 'FeesCharges', FinanceCharge = 'FinanceCharge', Financial = 'Financial', FinancialAdvisor = 'FinancialAdvisor', FoodDining = 'FoodDining', Furnishings = 'Furnishings', GasFuel = 'GasFuel', GiftsDonations = 'GiftsDonations', Groceries = 'Groceries', Gym = 'Gym', Hair = 'Hair', HealthFitness = 'HealthFitness', HealthInsurance = 'HealthInsurance', Hobbies = 'Hobbies', Home = 'Home', HomeImprovement = 'HomeImprovement', HomeInsurance = 'HomeInsurance', HomePhone = 'HomePhone', HomeServices = 'HomeServices', HomeSupplies = 'HomeSupplies', Hotel = 'Hotel', Income = 'Income', InterestIncome = 'InterestIncome', Internet = 'Internet', Investments = 'Investments', Kids = 'Kids', KidsActivities = 'KidsActivities', LateFee = 'LateFee', Laundry = 'Laundry', LawnGarden = 'LawnGarden', Legal = 'Legal', LifeInsurance = 'LifeInsurance', LoanInsurance = 'LoanInsurance', LoanPayment = 'LoanPayment', Loans = 'Loans', MobilePhone = 'MobilePhone', MortgageRent = 'MortgageRent', MoviesDVDs = 'MoviesDVDs', Music = 'Music', NewspapersMagazines = 'NewspapersMagazines', OfficeSupplies = 'OfficeSupplies', Parking = 'Parking', Paycheck = 'Paycheck', PersonalCare = 'PersonalCare', PetFoodSupplies = 'PetFoodSupplies', PetGrooming = 'PetGrooming', Pets = 'Pets', Pharmacy = 'Pharmacy', Printing = 'Printing', 'Property Tax' = 'Property Tax', 'Public Transportation' = 'Public Transportation', Reimbursement = 'Reimbursement', RentalCarTaxi = 'RentalCarTaxi', Restaurants = 'Restaurants', SalesTax = 'SalesTax', ServiceParts = 'ServiceParts', ServiceFee = 'ServiceFee', Shipping = 'Shipping', Shopping = 'Shopping', SpaMassage = 'SpaMassage', SportingGoods = 'SportingGoods', Sports = 'Sports', StateTax = 'StateTax', 'Student Loan' = 'Student Loan', Taxes = 'Taxes', Television = 'Television', Toys = 'Toys', Transfer = 'Transfer', Travel = 'Travel', Tuition = 'Tuition', Uncategorized = 'Uncategorized', Utilities = 'Utilities', Vacation = 'Vacation', Veterinary = 'Veterinary' }

	export enum AssetTransactionDetailAssetTransactionType { Credit = 'Credit', Debit = 'Debit' }


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface ValidationSources {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		VALIDATION_SOURCE: Array<ValidationSource>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface ValidationSourcesFormProperties {
	}
	export function CreateValidationSourcesFormGroup() {
		return new FormGroup<ValidationSourcesFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface ValidationSource {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ValidationSourceName: string;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ValidationSourceReferenceIdentifier: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface ValidationSourceFormProperties {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ValidationSourceName: FormControl<string | null | undefined>,

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ValidationSourceReferenceIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateValidationSourceFormGroup() {
		return new FormGroup<ValidationSourceFormProperties>({
			ValidationSourceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ValidationSourceReferenceIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing an Asset Report */
	export interface AssetReport {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: string;

		/**
		 * An identifier you determine and submit for the Asset Report.
		 * Required
		 */
		client_report_id: string;

		/**
		 * The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
		 * Required
		 */
		date_generated: Date;

		/**
		 * The duration of transaction history you requested
		 * Required
		 * Type: double
		 */
		days_requested: number;

		/**
		 * Data returned by Plaid about each of the Items included in the Asset Report.
		 * Required
		 */
		items: Array<AssetReportItem>;

		/**
		 * The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Maeâ€™s Day 1 Certaintyâ„¢ program.
		 * Required
		 */
		user: AssetReportUser;
	}

	/** An object representing an Asset Report */
	export interface AssetReportFormProperties {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: FormControl<string | null | undefined>,

		/**
		 * An identifier you determine and submit for the Asset Report.
		 * Required
		 */
		client_report_id: FormControl<string | null | undefined>,

		/**
		 * The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
		 * Required
		 */
		date_generated: FormControl<Date | null | undefined>,

		/**
		 * The duration of transaction history you requested
		 * Required
		 * Type: double
		 */
		days_requested: FormControl<number | null | undefined>,
	}
	export function CreateAssetReportFormGroup() {
		return new FormGroup<AssetReportFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			date_generated: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			days_requested: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A representation of an Item within an Asset Report. */
	export interface AssetReportItem {

		/**
		 * Data about each of the accounts open on the Item.
		 * Required
		 */
		accounts: Array<AccountAssets>;

		/**
		 * The date and time when this Itemâ€™s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		date_last_updated: Date;

		/**
		 * The id of the financial institution associated with the Item.
		 * Required
		 */
		institution_id: string;

		/**
		 * The full financial institution name associated with the Item.
		 * Required
		 */
		institution_name: string;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;
	}

	/** A representation of an Item within an Asset Report. */
	export interface AssetReportItemFormProperties {

		/**
		 * The date and time when this Itemâ€™s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		date_last_updated: FormControl<Date | null | undefined>,

		/**
		 * The id of the financial institution associated with the Item.
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/**
		 * The full financial institution name associated with the Item.
		 * Required
		 */
		institution_name: FormControl<string | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportItemFormGroup() {
		return new FormGroup<AssetReportItemFormProperties>({
			date_last_updated: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Maeâ€™s Day 1 Certaintyâ„¢ program. */
	export interface AssetReportUser {

		/** An identifier you determine and submit for the user. */
		client_user_id?: string | null;

		/** The user's email address. */
		email?: string | null;

		/** The user's first name. Required for the Fannie Mae Day 1 Certaintyâ„¢ program. */
		first_name?: string | null;

		/** The user's last name.  Required for the Fannie Mae Day 1 Certaintyâ„¢ program. */
		last_name?: string | null;

		/** The user's middle name */
		middle_name?: string | null;

		/** The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
		phone_number?: string | null;

		/**
		 * The user's Social Security Number. Required for the Fannie Mae Day 1 Certaintyâ„¢ program.
		 * Format: "ddd-dd-dddd"
		 */
		ssn?: string | null;
	}

	/** The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Maeâ€™s Day 1 Certaintyâ„¢ program. */
	export interface AssetReportUserFormProperties {

		/** An identifier you determine and submit for the user. */
		client_user_id: FormControl<string | null | undefined>,

		/** The user's email address. */
		email: FormControl<string | null | undefined>,

		/** The user's first name. Required for the Fannie Mae Day 1 Certaintyâ„¢ program. */
		first_name: FormControl<string | null | undefined>,

		/** The user's last name.  Required for the Fannie Mae Day 1 Certaintyâ„¢ program. */
		last_name: FormControl<string | null | undefined>,

		/** The user's middle name */
		middle_name: FormControl<string | null | undefined>,

		/** The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
		phone_number: FormControl<string | null | undefined>,

		/**
		 * The user's Social Security Number. Required for the Fannie Mae Day 1 Certaintyâ„¢ program.
		 * Format: "ddd-dd-dddd"
		 */
		ssn: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportUserFormGroup() {
		return new FormGroup<AssetReportUserFormProperties>({
			client_user_id: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
			middle_name: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			ssn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A list of add-ons that should be included in the Asset Report. 
	 * `fast_assets`: When Fast Assets is requested, Plaid will create two versions of the Asset Report: the Fast Asset Report, which will contain only Identity and Balance information, and the Full Asset Report, which will also contain Transactions information. A `PRODUCT_READY` webhook will be fired for each Asset Report when it is ready, and the `report_type` field will indicate whether the webhook is firing for the `full` or `fast` Asset Report. To retrieve the Fast Asset Report, call `/asset_report/get` with `fast_report` set to `true`. There is no additional charge for using Fast Assets.
	 * `investments`: Request an Asset Report with Investments. This add-on is in closed beta and not generally available.
	 */
	export enum AssetReportAddOns { investments = 'investments', fast_assets = 'fast_assets' }


	/** AssetReportAuditCopyCreateRequest defines the request schema for `/asset_report/audit_copy/get` */
	export interface AssetReportAuditCopyCreateRequest {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/** The `auditor_id` of the third party with whom you would like to share the Asset Report. */
		auditor_id?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportAuditCopyCreateRequest defines the request schema for `/asset_report/audit_copy/get` */
	export interface AssetReportAuditCopyCreateRequestFormProperties {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/** The `auditor_id` of the third party with whom you would like to share the Asset Report. */
		auditor_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportAuditCopyCreateRequestFormGroup() {
		return new FormGroup<AssetReportAuditCopyCreateRequestFormProperties>({
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			auditor_id: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportAuditCopyCreateResponse defines the response schema for `/asset_report/audit_copy/get` */
	export interface AssetReportAuditCopyCreateResponse {

		/**
		 * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AssetReportAuditCopyCreateResponse defines the response schema for `/asset_report/audit_copy/get` */
	export interface AssetReportAuditCopyCreateResponseFormProperties {

		/**
		 * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportAuditCopyCreateResponseFormGroup() {
		return new FormGroup<AssetReportAuditCopyCreateResponseFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** AssetReportAuditCopyGetRequest defines the request schema for `/asset_report/audit_copy/get` */
	export interface AssetReportAuditCopyGetRequest {

		/**
		 * The `audit_copy_token` granting access to the Audit Copy you would like to get.
		 * Required
		 */
		audit_copy_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportAuditCopyGetRequest defines the request schema for `/asset_report/audit_copy/get` */
	export interface AssetReportAuditCopyGetRequestFormProperties {

		/**
		 * The `audit_copy_token` granting access to the Audit Copy you would like to get.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportAuditCopyGetRequestFormGroup() {
		return new FormGroup<AssetReportAuditCopyGetRequestFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportAuditCopyRemoveRequest defines the request schema for `/asset_report/audit_copy/remove` */
	export interface AssetReportAuditCopyRemoveRequest {

		/**
		 * The `audit_copy_token` granting access to the Audit Copy you would like to revoke.
		 * Required
		 */
		audit_copy_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportAuditCopyRemoveRequest defines the request schema for `/asset_report/audit_copy/remove` */
	export interface AssetReportAuditCopyRemoveRequestFormProperties {

		/**
		 * The `audit_copy_token` granting access to the Audit Copy you would like to revoke.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportAuditCopyRemoveRequestFormGroup() {
		return new FormGroup<AssetReportAuditCopyRemoveRequestFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportAuditCopyRemoveResponse defines the response schema for `/asset_report/audit_copy/remove` */
	export interface AssetReportAuditCopyRemoveResponse {

		/**
		 * `true` if the Audit Copy was successfully removed.
		 * Required
		 */
		removed: boolean;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AssetReportAuditCopyRemoveResponse defines the response schema for `/asset_report/audit_copy/remove` */
	export interface AssetReportAuditCopyRemoveResponseFormProperties {

		/**
		 * `true` if the Audit Copy was successfully removed.
		 * Required
		 */
		removed: FormControl<boolean | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportAuditCopyRemoveResponseFormGroup() {
		return new FormGroup<AssetReportAuditCopyRemoveResponseFormProperties>({
			removed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** AssetReportCreateRequest defines the request schema for `/asset_report/create` */
	export interface AssetReportCreateRequest {

		/**
		 * An array of access tokens corresponding to the Items that will be included in the report. The `assets` product must have been initialized for the Items during link; the Assets product cannot be added after initialization.
		 * Minimum items: 1
		 * Maximum items: 99
		 */
		access_tokens?: Array<string>;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum integer number of days of history to include in the Asset Report. If using Fannie Mae Day 1 Certainty, `days_requested` must be at least 61 for new originations or at least 31 for refinancings.
		 * An Asset Report requested with "Additional History" (that is, with more than 61 days of transaction history) will incur an Additional History fee.
		 * Required
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_requested: number;

		/** An optional object to filter `/asset_report/create` results. If provided, must be non-`null`. The optional `user` object is required for the report to be eligible for Fannie Mae's Day 1 Certainty program. */
		options?: AssetReportCreateRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user token associated with the User for which to create an asset report for. All items associated with the User will be included in the report. */
		user_token?: string | null;
	}

	/** AssetReportCreateRequest defines the request schema for `/asset_report/create` */
	export interface AssetReportCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum integer number of days of history to include in the Asset Report. If using Fannie Mae Day 1 Certainty, `days_requested` must be at least 61 for new originations or at least 31 for refinancings.
		 * An Asset Report requested with "Additional History" (that is, with more than 61 days of transaction history) will incur an Additional History fee.
		 * Required
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_requested: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user token associated with the User for which to create an asset report for. All items associated with the User will be included in the report. */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportCreateRequestFormGroup() {
		return new FormGroup<AssetReportCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			days_requested: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(731)]),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/asset_report/create` results. If provided, must be non-`null`. The optional `user` object is required for the report to be eligible for Fannie Mae's Day 1 Certainty program. */
	export interface AssetReportCreateRequestOptions {

		/** Use this field to request a `fast_asset` report. When Fast Assets is requested, Plaid will create two versions of the Asset Report: first, the Fast Asset Report, which will contain only current identity and balance information, and later, the Full Asset Report, which will also contain historical balance information and transaction data. A `PRODUCT_READY` webhook will be fired for each Asset Report when it is ready, and the `report_type` field will indicate whether the webhook is firing for the `full` or `fast` Asset Report. To retrieve the Fast Asset Report, call `/asset_report/get` with `fast_report` set to `true`. There is no additional charge for using Fast Assets. */
		add_ons?: Array<AssetReportAddOns>;

		/** Client-generated identifier, which can be used by lenders to track loan applications. */
		client_report_id?: string | null;

		/** true to return balance and identity earlier as a fast report. Defaults to false if omitted. */
		include_fast_report?: boolean | null;

		/** Additional information that can be included in the asset report. Possible values: `"investments"` */
		products?: Array<string>;

		/** The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Maeâ€™s Day 1 Certaintyâ„¢ program. */
		user?: AssetReportUser;

		/** URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
		webhook?: string | null;
	}

	/** An optional object to filter `/asset_report/create` results. If provided, must be non-`null`. The optional `user` object is required for the report to be eligible for Fannie Mae's Day 1 Certainty program. */
	export interface AssetReportCreateRequestOptionsFormProperties {

		/** Client-generated identifier, which can be used by lenders to track loan applications. */
		client_report_id: FormControl<string | null | undefined>,

		/** true to return balance and identity earlier as a fast report. Defaults to false if omitted. */
		include_fast_report: FormControl<boolean | null | undefined>,

		/** URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportCreateRequestOptionsFormGroup() {
		return new FormGroup<AssetReportCreateRequestOptionsFormProperties>({
			client_report_id: new FormControl<string | null | undefined>(undefined),
			include_fast_report: new FormControl<boolean | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportCreateResponse defines the response schema for `/asset_report/create` */
	export interface AssetReportCreateResponse {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: string;

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AssetReportCreateResponse defines the response schema for `/asset_report/create` */
	export interface AssetReportCreateResponseFormProperties {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: FormControl<string | null | undefined>,

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportCreateResponseFormGroup() {
		return new FormGroup<AssetReportCreateResponseFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** AssetReportFilterRequest defines the request schema for `/asset_report/filter` */
	export interface AssetReportFilterRequest {

		/**
		 * The accounts to exclude from the Asset Report, identified by `account_id`.
		 * Required
		 */
		account_ids_to_exclude: Array<string>;

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportFilterRequest defines the request schema for `/asset_report/filter` */
	export interface AssetReportFilterRequestFormProperties {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportFilterRequestFormGroup() {
		return new FormGroup<AssetReportFilterRequestFormProperties>({
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportFilterResponse defines the response schema for `/asset_report/filter` */
	export interface AssetReportFilterResponse {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: string;

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AssetReportFilterResponse defines the response schema for `/asset_report/filter` */
	export interface AssetReportFilterResponseFormProperties {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: FormControl<string | null | undefined>,

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportFilterResponseFormGroup() {
		return new FormGroup<AssetReportFilterResponseFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing an Asset Report with Freddie Mac schema. */
	export interface AssetReportFreddie {

		/**
		 * A collection of loans that are part of a single deal.
		 * Required
		 */
		LOANS: Loans;

		/**
		 * A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
		 * Required
		 */
		PARTIES: Parties;

		/**
		 * A collection of objects that describe requests and responses for services.
		 * Required
		 */
		SERVICES: Services;
	}

	/** An object representing an Asset Report with Freddie Mac schema. */
	export interface AssetReportFreddieFormProperties {
	}
	export function CreateAssetReportFreddieFormGroup() {
		return new FormGroup<AssetReportFreddieFormProperties>({
		});

	}


	/** A collection of loans that are part of a single deal. */
	export interface Loans {

		/**
		 * Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender.
		 * Required
		 */
		LOAN: Loan;
	}

	/** A collection of loans that are part of a single deal. */
	export interface LoansFormProperties {
	}
	export function CreateLoansFormGroup() {
		return new FormGroup<LoansFormProperties>({
		});

	}


	/** Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender. */
	export interface Loan {

		/**
		 * Collection of current and previous identifiers for this loan.
		 * Required
		 */
		LOAN_IDENTIFIERS: LoanIdentifiers;
	}

	/** Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender. */
	export interface LoanFormProperties {
	}
	export function CreateLoanFormGroup() {
		return new FormGroup<LoanFormProperties>({
		});

	}


	/** Collection of current and previous identifiers for this loan. */
	export interface LoanIdentifiers {

		/**
		 * The information used to identify this loan by various parties to the transaction or other organizations.
		 * Required
		 */
		LOAN_IDENTIFIER: LoanIdentifier;
	}

	/** Collection of current and previous identifiers for this loan. */
	export interface LoanIdentifiersFormProperties {
	}
	export function CreateLoanIdentifiersFormGroup() {
		return new FormGroup<LoanIdentifiersFormProperties>({
		});

	}


	/** The information used to identify this loan by various parties to the transaction or other organizations. */
	export interface LoanIdentifier {

		/**
		 * The value of the identifier for the specified type.
		 * Required
		 */
		LoanIdentifier1: string;

		/**
		 * A value from a MISMO prescribed list that specifies the type of loan identifier.
		 * Required
		 */
		LoanIdentifierType: LoanIdentifierLoanIdentifierType;
	}

	/** The information used to identify this loan by various parties to the transaction or other organizations. */
	export interface LoanIdentifierFormProperties {

		/**
		 * The value of the identifier for the specified type.
		 * Required
		 */
		LoanIdentifier1: FormControl<string | null | undefined>,

		/**
		 * A value from a MISMO prescribed list that specifies the type of loan identifier.
		 * Required
		 */
		LoanIdentifierType: FormControl<LoanIdentifierLoanIdentifierType | null | undefined>,
	}
	export function CreateLoanIdentifierFormGroup() {
		return new FormGroup<LoanIdentifierFormProperties>({
			LoanIdentifier1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LoanIdentifierType: new FormControl<LoanIdentifierLoanIdentifierType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum LoanIdentifierLoanIdentifierType { LenderLoan = 'LenderLoan', UniversalLoan = 'UniversalLoan' }


	/** A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider. */
	export interface Parties {

		/** Required */
		PARTY: Array<Party>;
	}

	/** A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider. */
	export interface PartiesFormProperties {
	}
	export function CreatePartiesFormGroup() {
		return new FormGroup<PartiesFormProperties>({
		});

	}


	/** A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider. */
	export interface Party {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		INDIVIDUAL: PartyIndividual;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ROLES: Roles;

		/**
		 * The collection of TAXPAYER_IDENTIFICATION elements
		 * Required
		 */
		TAXPAYER_IDENTIFIERS: TaxpayerIdentifiers;
	}

	/** A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider. */
	export interface PartyFormProperties {
	}
	export function CreatePartyFormGroup() {
		return new FormGroup<PartyFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface PartyIndividual {

		/**
		 * Parent container for name that allows for choice group between parsed and unparsed containers.Parent container for name that allows for choice group between parsed and unparsed containers.
		 * Required
		 */
		NAME: IndividualName;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface PartyIndividualFormProperties {
	}
	export function CreatePartyIndividualFormGroup() {
		return new FormGroup<PartyIndividualFormProperties>({
		});

	}


	/** Parent container for name that allows for choice group between parsed and unparsed containers.Parent container for name that allows for choice group between parsed and unparsed containers. */
	export interface IndividualName {

		/**
		 * The first name of the individual represented by the parent object.
		 * Required
		 */
		FirstName: string;

		/**
		 * The last name of the individual represented by the parent object.
		 * Required
		 */
		LastName: string;
	}

	/** Parent container for name that allows for choice group between parsed and unparsed containers.Parent container for name that allows for choice group between parsed and unparsed containers. */
	export interface IndividualNameFormProperties {

		/**
		 * The first name of the individual represented by the parent object.
		 * Required
		 */
		FirstName: FormControl<string | null | undefined>,

		/**
		 * The last name of the individual represented by the parent object.
		 * Required
		 */
		LastName: FormControl<string | null | undefined>,
	}
	export function CreateIndividualNameFormGroup() {
		return new FormGroup<IndividualNameFormProperties>({
			FirstName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LastName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface Roles {

		/**
		 * ADocumentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ROLE: Role;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface RolesFormProperties {
	}
	export function CreateRolesFormGroup() {
		return new FormGroup<RolesFormProperties>({
		});

	}


	/** ADocumentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface Role {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ROLE_DETAIL: RoleDetail;
	}

	/** ADocumentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface RoleFormProperties {
	}
	export function CreateRoleFormGroup() {
		return new FormGroup<RoleFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface RoleDetail {

		/**
		 * A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.
		 * Required
		 */
		PartyRoleType: RoleDetailPartyRoleType;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface RoleDetailFormProperties {

		/**
		 * A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.
		 * Required
		 */
		PartyRoleType: FormControl<RoleDetailPartyRoleType | null | undefined>,
	}
	export function CreateRoleDetailFormGroup() {
		return new FormGroup<RoleDetailFormProperties>({
			PartyRoleType: new FormControl<RoleDetailPartyRoleType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RoleDetailPartyRoleType { Borrower = 'Borrower' }


	/** The collection of TAXPAYER_IDENTIFICATION elements */
	export interface TaxpayerIdentifiers {

		/**
		 * Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity.
		 * Required
		 */
		TAXPAYER_IDENTIFIER: TaxpayerIdentifier;
	}

	/** The collection of TAXPAYER_IDENTIFICATION elements */
	export interface TaxpayerIdentifiersFormProperties {
	}
	export function CreateTaxpayerIdentifiersFormGroup() {
		return new FormGroup<TaxpayerIdentifiersFormProperties>({
		});

	}


	/** Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity. */
	export interface TaxpayerIdentifier {

		/**
		 * A value from a MISMO prescribed list that classifies identification numbers used by the Internal Revenue Service (IRS) in the administration of tax laws. A Social Security number (SSN) is issued by the SSA; all other taxpayer identification numbers are issued by the IRS.
		 * Required
		 */
		TaxpayerIdentifierType: TaxpayerIdentifierTaxpayerIdentifierType;

		/**
		 * The value of the taxpayer identifier as assigned by the IRS to the individual or legal entity.
		 * Required
		 */
		TaxpayerIdentifierValue: string;
	}

	/** Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity. */
	export interface TaxpayerIdentifierFormProperties {

		/**
		 * A value from a MISMO prescribed list that classifies identification numbers used by the Internal Revenue Service (IRS) in the administration of tax laws. A Social Security number (SSN) is issued by the SSA; all other taxpayer identification numbers are issued by the IRS.
		 * Required
		 */
		TaxpayerIdentifierType: FormControl<TaxpayerIdentifierTaxpayerIdentifierType | null | undefined>,

		/**
		 * The value of the taxpayer identifier as assigned by the IRS to the individual or legal entity.
		 * Required
		 */
		TaxpayerIdentifierValue: FormControl<string | null | undefined>,
	}
	export function CreateTaxpayerIdentifierFormGroup() {
		return new FormGroup<TaxpayerIdentifierFormProperties>({
			TaxpayerIdentifierType: new FormControl<TaxpayerIdentifierTaxpayerIdentifierType | null | undefined>(undefined, [Validators.required]),
			TaxpayerIdentifierValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TaxpayerIdentifierTaxpayerIdentifierType { IndividualTaxpayerIdentificationNumber = 'IndividualTaxpayerIdentificationNumber', SocialSecurityNumber = 'SocialSecurityNumber' }


	/** A collection of objects that describe requests and responses for services. */
	export interface Services {

		/**
		 * A collection of details related to a fulfillment service or product in terms of request, process and result.
		 * Required
		 */
		SERVICE: Service;
	}

	/** A collection of objects that describe requests and responses for services. */
	export interface ServicesFormProperties {
	}
	export function CreateServicesFormGroup() {
		return new FormGroup<ServicesFormProperties>({
		});

	}


	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface Service {

		/**
		 * A collection of STATUS containers.
		 * Required
		 */
		STATUSES: Statuses;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		VERIFICATION_OF_ASSET: VerificationOfAsset;
	}

	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface ServiceFormProperties {
	}
	export function CreateServiceFormGroup() {
		return new FormGroup<ServiceFormProperties>({
		});

	}


	/** A collection of STATUS containers. */
	export interface Statuses {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		STATUS: Status;
	}

	/** A collection of STATUS containers. */
	export interface StatusesFormProperties {
	}
	export function CreateStatusesFormGroup() {
		return new FormGroup<StatusesFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface Status {

		/**
		 * Satus Code.
		 * Required
		 */
		StatusCode: string;

		/**
		 * Status Description.
		 * Required
		 */
		StatusDescription: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface StatusFormProperties {

		/**
		 * Satus Code.
		 * Required
		 */
		StatusCode: FormControl<string | null | undefined>,

		/**
		 * Status Description.
		 * Required
		 */
		StatusDescription: FormControl<string | null | undefined>,
	}
	export function CreateStatusFormGroup() {
		return new FormGroup<StatusFormProperties>({
			StatusCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StatusDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface VerificationOfAsset {

		/**
		 * Information about an report identifier and a report name.
		 * Required
		 */
		REPORTING_INFORMATION: ReportingInformation;

		/**
		 * A collection of details related to a fulfillment service or product in terms of request, process and result.
		 * Required
		 */
		SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		VERIFICATION_OF_ASSET_RESPONSE: VerificationOfAssetResponse;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface VerificationOfAssetFormProperties {
	}
	export function CreateVerificationOfAssetFormGroup() {
		return new FormGroup<VerificationOfAssetFormProperties>({
		});

	}


	/** Information about an report identifier and a report name. */
	export interface ReportingInformation {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ReportingInformationIdentifier: string;
	}

	/** Information about an report identifier and a report name. */
	export interface ReportingInformationFormProperties {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ReportingInformationIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateReportingInformationFormGroup() {
		return new FormGroup<ReportingInformationFormProperties>({
			ReportingInformationIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface ServiceProductFulfillment {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		SERVICE_PRODUCT_FULFILLMENT_DETAIL: ServiceProductFulfillmentDetail;
	}

	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface ServiceProductFulfillmentFormProperties {
	}
	export function CreateServiceProductFulfillmentFormGroup() {
		return new FormGroup<ServiceProductFulfillmentFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface ServiceProductFulfillmentDetail {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ServiceProductFulfillmentIdentifier: ServiceProductFulfillmentDetailServiceProductFulfillmentIdentifier;

		/**
		 * A string that uniquely identifies a type of order Verification of Asset.
		 * Required
		 */
		VendorOrderIdentifier: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface ServiceProductFulfillmentDetailFormProperties {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ServiceProductFulfillmentIdentifier: FormControl<ServiceProductFulfillmentDetailServiceProductFulfillmentIdentifier | null | undefined>,

		/**
		 * A string that uniquely identifies a type of order Verification of Asset.
		 * Required
		 */
		VendorOrderIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateServiceProductFulfillmentDetailFormGroup() {
		return new FormGroup<ServiceProductFulfillmentDetailFormProperties>({
			ServiceProductFulfillmentIdentifier: new FormControl<ServiceProductFulfillmentDetailServiceProductFulfillmentIdentifier | null | undefined>(undefined, [Validators.required]),
			VendorOrderIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ServiceProductFulfillmentDetailServiceProductFulfillmentIdentifier { VOA = 'VOA', VOETRANSACTIONS = 'VOETRANSACTIONS' }


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface VerificationOfAssetResponse {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSETS: Assets;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface VerificationOfAssetResponseFormProperties {
	}
	export function CreateVerificationOfAssetResponseFormGroup() {
		return new FormGroup<VerificationOfAssetResponseFormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface Assets {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET: Array<Asset>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface AssetsFormProperties {
	}
	export function CreateAssetsFormGroup() {
		return new FormGroup<AssetsFormProperties>({
		});

	}


	/** AssetReportFreddieGetRequest defines the request schema for `credit/asset_report/freddie_mac/get` */
	export interface AssetReportFreddieGetRequest {

		/**
		 * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportFreddieGetRequest defines the request schema for `credit/asset_report/freddie_mac/get` */
	export interface AssetReportFreddieGetRequestFormProperties {

		/**
		 * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportFreddieGetRequestFormGroup() {
		return new FormGroup<AssetReportFreddieGetRequestFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportFreddieGetResponse defines the response schema for `/asset_report/get` */
	export interface AssetReportFreddieGetResponse {

		/**
		 * An object representing an Asset Report with Freddie Mac schema.
		 * Required
		 */
		DEAL: AssetReportFreddie;

		/**
		 * The Verification Of Assets (aka VOA or Freddie Mac Schema) schema version.
		 * Required
		 * Type: double
		 */
		SchemaVersion: number;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AssetReportFreddieGetResponse defines the response schema for `/asset_report/get` */
	export interface AssetReportFreddieGetResponseFormProperties {

		/**
		 * The Verification Of Assets (aka VOA or Freddie Mac Schema) schema version.
		 * Required
		 * Type: double
		 */
		SchemaVersion: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportFreddieGetResponseFormGroup() {
		return new FormGroup<AssetReportFreddieGetResponseFormProperties>({
			SchemaVersion: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** AssetReportGetRequest defines the request schema for `/asset_report/get` */
	export interface AssetReportGetRequest {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** `true` to fetch "fast" version of asset report. Defaults to false if omitted. Can only be used if `/asset_report/create` was called with `options.add_ons` set to `["fast_assets"]`. */
		fast_report?: boolean | null;

		/** `true` if you would like to retrieve the Asset Report with Insights, `false` otherwise. This field defaults to `false` if omitted. */
		include_insights?: boolean | null;

		/** An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
		options?: AssetReportGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportGetRequest defines the request schema for `/asset_report/get` */
	export interface AssetReportGetRequestFormProperties {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** `true` to fetch "fast" version of asset report. Defaults to false if omitted. Can only be used if `/asset_report/create` was called with `options.add_ons` set to `["fast_assets"]`. */
		fast_report: FormControl<boolean | null | undefined>,

		/** `true` if you would like to retrieve the Asset Report with Insights, `false` otherwise. This field defaults to `false` if omitted. */
		include_insights: FormControl<boolean | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportGetRequestFormGroup() {
		return new FormGroup<AssetReportGetRequestFormProperties>({
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			fast_report: new FormControl<boolean | null | undefined>(undefined),
			include_insights: new FormControl<boolean | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
	export interface AssetReportGetRequestOptions {

		/**
		 * The maximum number of days of history to include in the Asset Report.
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_to_include?: number | null;
	}

	/** An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
	export interface AssetReportGetRequestOptionsFormProperties {

		/**
		 * The maximum number of days of history to include in the Asset Report.
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_to_include: FormControl<number | null | undefined>,
	}
	export function CreateAssetReportGetRequestOptionsFormGroup() {
		return new FormGroup<AssetReportGetRequestOptionsFormProperties>({
			days_to_include: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(731)]),
		});

	}


	/** AssetReportGetResponse defines the response schema for `/asset_report/get` */
	export interface AssetReportGetResponse {

		/**
		 * An object representing an Asset Report
		 * Required
		 */
		report: AssetReport;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * If the Asset Report generation was successful but identity information cannot be returned, this array will contain information about the errors causing identity information to be missing
		 * Required
		 */
		warnings: Array<Warning>;
	}

	/** AssetReportGetResponse defines the response schema for `/asset_report/get` */
	export interface AssetReportGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportGetResponseFormGroup() {
		return new FormGroup<AssetReportGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed. */
	export interface Warning {

		/**
		 * An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
		 * Required
		 */
		cause: Cause;

		/**
		 * The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
		 * Required
		 */
		warning_code: WarningWarning_code;

		/**
		 * The warning type, which will always be `ASSET_REPORT_WARNING`
		 * Required
		 */
		warning_type: string;
	}

	/** It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed. */
	export interface WarningFormProperties {

		/**
		 * The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
		 * Required
		 */
		warning_code: FormControl<WarningWarning_code | null | undefined>,

		/**
		 * The warning type, which will always be `ASSET_REPORT_WARNING`
		 * Required
		 */
		warning_type: FormControl<string | null | undefined>,
	}
	export function CreateWarningFormGroup() {
		return new FormGroup<WarningFormProperties>({
			warning_code: new FormControl<WarningWarning_code | null | undefined>(undefined, [Validators.required]),
			warning_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
	export interface Cause {
	}

	/** An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
	export interface CauseFormProperties {
	}
	export function CreateCauseFormGroup() {
		return new FormGroup<CauseFormProperties>({
		});

	}

	export enum WarningWarning_code { OWNERS_UNAVAILABLE = 'OWNERS_UNAVAILABLE', INVESTMENTS_UNAVAILABLE = 'INVESTMENTS_UNAVAILABLE', TRANSACTIONS_UNAVAILABLE = 'TRANSACTIONS_UNAVAILABLE' }


	/** AssetReportPDFGetRequest defines the request schema for `/asset_report/pdf/get` */
	export interface AssetReportPDFGetRequest {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
		options?: AssetReportPDFGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportPDFGetRequest defines the request schema for `/asset_report/pdf/get` */
	export interface AssetReportPDFGetRequestFormProperties {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportPDFGetRequestFormGroup() {
		return new FormGroup<AssetReportPDFGetRequestFormProperties>({
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
	export interface AssetReportPDFGetRequestOptions {

		/**
		 * The maximum integer number of days of history to include in the Asset Report.
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_to_include?: number | null;
	}

	/** An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
	export interface AssetReportPDFGetRequestOptionsFormProperties {

		/**
		 * The maximum integer number of days of history to include in the Asset Report.
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_to_include: FormControl<number | null | undefined>,
	}
	export function CreateAssetReportPDFGetRequestOptionsFormGroup() {
		return new FormGroup<AssetReportPDFGetRequestOptionsFormProperties>({
			days_to_include: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(731)]),
		});

	}


	/** AssetReportRefreshRequest defines the request schema for `/asset_report/refresh` */
	export interface AssetReportRefreshRequest {

		/**
		 * The `asset_report_token` returned by the original call to `/asset_report/create`
		 * Required
		 */
		asset_report_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of days of history to include in the Asset Report. Must be an integer. If not specified, the value from the original call to `/asset_report/create` will be used.
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_requested?: number | null;

		/** An optional object to filter `/asset_report/refresh` results. If provided, cannot be `null`. If not specified, the `options` from the original call to `/asset_report/create` will be used. */
		options?: AssetReportRefreshRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportRefreshRequest defines the request schema for `/asset_report/refresh` */
	export interface AssetReportRefreshRequestFormProperties {

		/**
		 * The `asset_report_token` returned by the original call to `/asset_report/create`
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of days of history to include in the Asset Report. Must be an integer. If not specified, the value from the original call to `/asset_report/create` will be used.
		 * Minimum: 0
		 * Maximum: 731
		 */
		days_requested: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportRefreshRequestFormGroup() {
		return new FormGroup<AssetReportRefreshRequestFormProperties>({
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			days_requested: new FormControl<number | null | undefined>(undefined, [Validators.min(0), Validators.max(731)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/asset_report/refresh` results. If provided, cannot be `null`. If not specified, the `options` from the original call to `/asset_report/create` will be used. */
	export interface AssetReportRefreshRequestOptions {

		/** Client-generated identifier, which can be used by lenders to track loan applications. */
		client_report_id?: string | null;

		/** The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Maeâ€™s Day 1 Certaintyâ„¢ program. */
		user?: AssetReportUser;

		/** URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
		webhook?: string | null;
	}

	/** An optional object to filter `/asset_report/refresh` results. If provided, cannot be `null`. If not specified, the `options` from the original call to `/asset_report/create` will be used. */
	export interface AssetReportRefreshRequestOptionsFormProperties {

		/** Client-generated identifier, which can be used by lenders to track loan applications. */
		client_report_id: FormControl<string | null | undefined>,

		/** URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportRefreshRequestOptionsFormGroup() {
		return new FormGroup<AssetReportRefreshRequestOptionsFormProperties>({
			client_report_id: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportRefreshResponse defines the response schema for `/asset_report/refresh` */
	export interface AssetReportRefreshResponse {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: string;

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AssetReportRefreshResponse defines the response schema for `/asset_report/refresh` */
	export interface AssetReportRefreshResponseFormProperties {

		/**
		 * A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
		 * Required
		 */
		asset_report_id: FormControl<string | null | undefined>,

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportRefreshResponseFormGroup() {
		return new FormGroup<AssetReportRefreshResponseFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** AssetReportRemoveRequest defines the request schema for `/asset_report/remove` */
	export interface AssetReportRemoveRequest {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AssetReportRemoveRequest defines the request schema for `/asset_report/remove` */
	export interface AssetReportRemoveRequestFormProperties {

		/**
		 * A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
		 * Required
		 */
		asset_report_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportRemoveRequestFormGroup() {
		return new FormGroup<AssetReportRemoveRequestFormProperties>({
			asset_report_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** AssetReportRemoveResponse defines the response schema for `/asset_report/remove` */
	export interface AssetReportRemoveResponse {

		/**
		 * `true` if the Asset Report was successfully removed.
		 * Required
		 */
		removed: boolean;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AssetReportRemoveResponse defines the response schema for `/asset_report/remove` */
	export interface AssetReportRemoveResponseFormProperties {

		/**
		 * `true` if the Asset Report was successfully removed.
		 * Required
		 */
		removed: FormControl<boolean | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAssetReportRemoveResponseFormGroup() {
		return new FormGroup<AssetReportRemoveResponseFormProperties>({
			removed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Asset Transaction Category Type Enumerated derived by Vendor. */
	export enum AssetTransactionCategoryType { ATMFee = 'ATMFee', Advertising = 'Advertising', AirTravel = 'AirTravel', AlcoholBars = 'AlcoholBars', Allowance = 'Allowance', Amusement = 'Amusement', Arts = 'Arts', AutoTransport = 'AutoTransport', AutoInsurance = 'AutoInsurance', AutoPayment = 'AutoPayment', BabySupplies = 'BabySupplies', BabysitterDaycare = 'BabysitterDaycare', BankFee = 'BankFee', BillsUtilities = 'BillsUtilities', Bonus = 'Bonus', BooksSupplies = 'BooksSupplies', 'Business Services' = 'Business Services', Buy = 'Buy', CashATM = 'CashATM', Charity = 'Charity', Check = 'Check', ChildSupport = 'ChildSupport', Clothing = 'Clothing', CoffeeShops = 'CoffeeShops', CreditCardPayment = 'CreditCardPayment', Dentist = 'Dentist', Doctor = 'Doctor', Education = 'Education', ElectronicsSoftware = 'ElectronicsSoftware', Entertainment = 'Entertainment', Eyecare = 'Eyecare', FastFood = 'FastFood', FederalTax = 'FederalTax', FeesCharges = 'FeesCharges', FinanceCharge = 'FinanceCharge', Financial = 'Financial', FinancialAdvisor = 'FinancialAdvisor', FoodDining = 'FoodDining', Furnishings = 'Furnishings', GasFuel = 'GasFuel', GiftsDonations = 'GiftsDonations', Groceries = 'Groceries', Gym = 'Gym', Hair = 'Hair', HealthFitness = 'HealthFitness', HealthInsurance = 'HealthInsurance', Hobbies = 'Hobbies', Home = 'Home', HomeImprovement = 'HomeImprovement', HomeInsurance = 'HomeInsurance', HomePhone = 'HomePhone', HomeServices = 'HomeServices', HomeSupplies = 'HomeSupplies', Hotel = 'Hotel', Income = 'Income', InterestIncome = 'InterestIncome', Internet = 'Internet', Investments = 'Investments', Kids = 'Kids', KidsActivities = 'KidsActivities', LateFee = 'LateFee', Laundry = 'Laundry', LawnGarden = 'LawnGarden', Legal = 'Legal', LifeInsurance = 'LifeInsurance', LoanInsurance = 'LoanInsurance', LoanPayment = 'LoanPayment', Loans = 'Loans', MobilePhone = 'MobilePhone', MortgageRent = 'MortgageRent', MoviesDVDs = 'MoviesDVDs', Music = 'Music', NewspapersMagazines = 'NewspapersMagazines', OfficeSupplies = 'OfficeSupplies', Parking = 'Parking', Paycheck = 'Paycheck', PersonalCare = 'PersonalCare', PetFoodSupplies = 'PetFoodSupplies', PetGrooming = 'PetGrooming', Pets = 'Pets', Pharmacy = 'Pharmacy', Printing = 'Printing', 'Property Tax' = 'Property Tax', 'Public Transportation' = 'Public Transportation', Reimbursement = 'Reimbursement', RentalCarTaxi = 'RentalCarTaxi', Restaurants = 'Restaurants', SalesTax = 'SalesTax', ServiceParts = 'ServiceParts', ServiceFee = 'ServiceFee', Shipping = 'Shipping', Shopping = 'Shopping', SpaMassage = 'SpaMassage', SportingGoods = 'SportingGoods', Sports = 'Sports', StateTax = 'StateTax', 'Student Loan' = 'Student Loan', Taxes = 'Taxes', Television = 'Television', Toys = 'Toys', Transfer = 'Transfer', Travel = 'Travel', Tuition = 'Tuition', Uncategorized = 'Uncategorized', Utilities = 'Utilities', Vacation = 'Vacation', Veterinary = 'Veterinary' }


	/** Asset Transaction Type. */
	export enum AssetTransactionType { Credit = 'Credit', Debit = 'Debit' }


	/** A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount. */
	export enum AssetType { CheckingAccount = 'CheckingAccount', SavingsAccount = 'SavingsAccount', Investment = 'Investment', MoneyMarketFund = 'MoneyMarketFund', Other = 'Other' }


	/** Fired when Asset Report generation has failed. The resulting `error` will have an `error_type` of `ASSET_REPORT_ERROR`. */
	export interface AssetsErrorWebhook {

		/**
		 * The ID associated with the Asset Report.
		 * Required
		 */
		asset_report_id: string;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
		 * Required
		 */
		error: PlaidError;

		/**
		 * `ERROR`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ASSETS`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when Asset Report generation has failed. The resulting `error` will have an `error_type` of `ASSET_REPORT_ERROR`. */
	export interface AssetsErrorWebhookFormProperties {

		/**
		 * The ID associated with the Asset Report.
		 * Required
		 */
		asset_report_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * `ERROR`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ASSETS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateAssetsErrorWebhookFormGroup() {
		return new FormGroup<AssetsErrorWebhookFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AssetsErrorWebhookEnvironment { development = 'development', sandbox = 'sandbox', production = 'production' }


	/** Fired when the Asset Report has been generated and `/asset_report/get` is ready to be called.  If you attempt to retrieve an Asset Report before this webhook has fired, youâ€™ll receive a response with the HTTP status code 400 and a Plaid error code of `PRODUCT_NOT_READY`. */
	export interface AssetsProductReadyWebhook {

		/**
		 * The `asset_report_id` corresponding to the Asset Report the webhook has fired for.
		 * Required
		 */
		asset_report_id: string;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** The report type, indicating whether the Asset Report is a `full` or `fast` report. */
		report_type?: string | null;

		/**
		 * `PRODUCT_READY`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ASSETS`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when the Asset Report has been generated and `/asset_report/get` is ready to be called.  If you attempt to retrieve an Asset Report before this webhook has fired, youâ€™ll receive a response with the HTTP status code 400 and a Plaid error code of `PRODUCT_NOT_READY`. */
	export interface AssetsProductReadyWebhookFormProperties {

		/**
		 * The `asset_report_id` corresponding to the Asset Report the webhook has fired for.
		 * Required
		 */
		asset_report_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/** The report type, indicating whether the Asset Report is a `full` or `fast` report. */
		report_type: FormControl<string | null | undefined>,

		/**
		 * `PRODUCT_READY`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ASSETS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateAssetsProductReadyWebhookFormGroup() {
		return new FormGroup<AssetsProductReadyWebhookFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			report_type: new FormControl<string | null | undefined>(undefined),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty. */
	export interface AuthGetNumbers {

		/**
		 * An array of ACH numbers identifying accounts.
		 * Required
		 */
		ach: Array<NumbersACH>;

		/**
		 * An array of BACS numbers identifying accounts.
		 * Required
		 */
		bacs: Array<NumbersBACS>;

		/**
		 * An array of EFT numbers identifying accounts.
		 * Required
		 */
		eft: Array<NumbersEFT>;

		/**
		 * An array of IBAN numbers identifying accounts.
		 * Required
		 */
		international: Array<NumbersInternational>;
	}

	/** An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty. */
	export interface AuthGetNumbersFormProperties {
	}
	export function CreateAuthGetNumbersFormGroup() {
		return new FormGroup<AuthGetNumbersFormProperties>({
		});

	}


	/** Identifying information for transferring money to or from a US account via ACH or wire transfer. */
	export interface NumbersACH {

		/**
		 * The ACH account number for the account.
		 * Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue "tokenized" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
		 * Required
		 */
		account: string;

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: string;

		/** Whether the account supports ACH transfers into the account */
		can_transfer_in?: boolean | null;

		/** Whether the account supports ACH transfers out of the account */
		can_transfer_out?: boolean | null;

		/**
		 * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
		 * Required
		 */
		routing: string;

		/**
		 * The wire transfer routing number for the account, if available
		 * Required
		 */
		wire_routing: string;
	}

	/** Identifying information for transferring money to or from a US account via ACH or wire transfer. */
	export interface NumbersACHFormProperties {

		/**
		 * The ACH account number for the account.
		 * Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue "tokenized" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
		 * Required
		 */
		account: FormControl<string | null | undefined>,

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/** Whether the account supports ACH transfers into the account */
		can_transfer_in: FormControl<boolean | null | undefined>,

		/** Whether the account supports ACH transfers out of the account */
		can_transfer_out: FormControl<boolean | null | undefined>,

		/**
		 * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
		 * Required
		 */
		routing: FormControl<string | null | undefined>,

		/**
		 * The wire transfer routing number for the account, if available
		 * Required
		 */
		wire_routing: FormControl<string | null | undefined>,
	}
	export function CreateNumbersACHFormGroup() {
		return new FormGroup<NumbersACHFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			can_transfer_in: new FormControl<boolean | null | undefined>(undefined),
			can_transfer_out: new FormControl<boolean | null | undefined>(undefined),
			routing: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			wire_routing: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Identifying information for transferring money to or from a UK bank account via BACS. */
	export interface NumbersBACS {

		/**
		 * The BACS account number for the account
		 * Required
		 */
		account: string;

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: string;

		/**
		 * The BACS sort code for the account
		 * Required
		 */
		sort_code: string;
	}

	/** Identifying information for transferring money to or from a UK bank account via BACS. */
	export interface NumbersBACSFormProperties {

		/**
		 * The BACS account number for the account
		 * Required
		 */
		account: FormControl<string | null | undefined>,

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The BACS sort code for the account
		 * Required
		 */
		sort_code: FormControl<string | null | undefined>,
	}
	export function CreateNumbersBACSFormGroup() {
		return new FormGroup<NumbersBACSFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sort_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Identifying information for transferring money to or from a Canadian bank account via EFT. */
	export interface NumbersEFT {

		/**
		 * The EFT account number for the account
		 * Required
		 */
		account: string;

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: string;

		/**
		 * The EFT branch number for the account
		 * Required
		 */
		branch: string;

		/**
		 * The EFT institution number for the account
		 * Required
		 */
		institution: string;
	}

	/** Identifying information for transferring money to or from a Canadian bank account via EFT. */
	export interface NumbersEFTFormProperties {

		/**
		 * The EFT account number for the account
		 * Required
		 */
		account: FormControl<string | null | undefined>,

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The EFT branch number for the account
		 * Required
		 */
		branch: FormControl<string | null | undefined>,

		/**
		 * The EFT institution number for the account
		 * Required
		 */
		institution: FormControl<string | null | undefined>,
	}
	export function CreateNumbersEFTFormGroup() {
		return new FormGroup<NumbersEFTFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Identifying information for transferring money to or from an international bank account via wire transfer. */
	export interface NumbersInternational {

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: string;

		/**
		 * The Bank Identifier Code (BIC) for the account
		 * Required
		 */
		bic: string;

		/**
		 * The International Bank Account Number (IBAN) for the account
		 * Required
		 */
		iban: string;
	}

	/** Identifying information for transferring money to or from an international bank account via wire transfer. */
	export interface NumbersInternationalFormProperties {

		/**
		 * The Plaid account ID associated with the account numbers
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Bank Identifier Code (BIC) for the account
		 * Required
		 */
		bic: FormControl<string | null | undefined>,

		/**
		 * The International Bank Account Number (IBAN) for the account
		 * Required
		 */
		iban: FormControl<string | null | undefined>,
	}
	export function CreateNumbersInternationalFormGroup() {
		return new FormGroup<NumbersInternationalFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bic: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iban: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** AuthGetRequest defines the request schema for `/auth/get` */
	export interface AuthGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter `/auth/get` results. */
		options?: AuthGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** AuthGetRequest defines the request schema for `/auth/get` */
	export interface AuthGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateAuthGetRequestFormGroup() {
		return new FormGroup<AuthGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/auth/get` results. */
	export interface AuthGetRequestOptions {

		/**
		 * A list of `account_ids` to retrieve for the Item.
		 * Note: An error will be returned if a provided `account_id` is not associated with the Item.
		 */
		account_ids?: Array<string>;
	}

	/** An optional object to filter `/auth/get` results. */
	export interface AuthGetRequestOptionsFormProperties {
	}
	export function CreateAuthGetRequestOptionsFormGroup() {
		return new FormGroup<AuthGetRequestOptionsFormProperties>({
		});

	}


	/** AuthGetResponse defines the response schema for `/auth/get` */
	export interface AuthGetResponse {

		/**
		 * The `accounts` for which numbers are being retrieved.
		 * Required
		 */
		accounts: Array<AccountBase>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty.
		 * Required
		 */
		numbers: AuthGetNumbers;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** AuthGetResponse defines the response schema for `/auth/get` */
	export interface AuthGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateAuthGetResponseFormGroup() {
		return new FormGroup<AuthGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Metadata that captures information about the Auth features of an institution. */
	export interface AuthMetadata {

		/**
		 * Metadata specifically related to which auth methods an institution supports.
		 * Required
		 */
		supported_methods: AuthSupportedMethods;
	}

	/** Metadata that captures information about the Auth features of an institution. */
	export interface AuthMetadataFormProperties {
	}
	export function CreateAuthMetadataFormGroup() {
		return new FormGroup<AuthMetadataFormProperties>({
		});

	}


	/** Metadata specifically related to which auth methods an institution supports. */
	export interface AuthSupportedMethods {

		/**
		 * Indicates if automated microdeposits are supported.
		 * Required
		 */
		automated_micro_deposits: boolean;

		/**
		 * Indicates if instant auth is supported.
		 * Required
		 */
		instant_auth: boolean;

		/**
		 * Indicates if instant match is supported.
		 * Required
		 */
		instant_match: boolean;
	}

	/** Metadata specifically related to which auth methods an institution supports. */
	export interface AuthSupportedMethodsFormProperties {

		/**
		 * Indicates if automated microdeposits are supported.
		 * Required
		 */
		automated_micro_deposits: FormControl<boolean | null | undefined>,

		/**
		 * Indicates if instant auth is supported.
		 * Required
		 */
		instant_auth: FormControl<boolean | null | undefined>,

		/**
		 * Indicates if instant match is supported.
		 * Required
		 */
		instant_match: FormControl<boolean | null | undefined>,
	}
	export function CreateAuthSupportedMethodsFormGroup() {
		return new FormGroup<AuthSupportedMethodsFormProperties>({
			automated_micro_deposits: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			instant_auth: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			instant_match: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when an Item is verified via automated micro-deposits. We recommend communicating to your users when this event is received to notify them that their account is verified and ready for use. */
	export interface AutomaticallyVerifiedWebhook {

		/**
		 * The `account_id` of the account associated with the webhook
		 * Required
		 */
		account_id: string;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `AUTOMATICALLY_VERIFIED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an Item is verified via automated micro-deposits. We recommend communicating to your users when this event is received to notify them that their account is verified and ready for use. */
	export interface AutomaticallyVerifiedWebhookFormProperties {

		/**
		 * The `account_id` of the account associated with the webhook
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `AUTOMATICALLY_VERIFIED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateAutomaticallyVerifiedWebhookFormGroup() {
		return new FormGroup<AutomaticallyVerifiedWebhookFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: "R01", "R02", "R03", "R04", "R06", "R08",  "R09", "R13", "R16", "R17", "R20", "R23". These returns have a turnaround time of 2 banking days. */
	export interface BankInitiatedReturnRisk {

		/**
		 * In the `bank_initiated_return_risk` object, there are eight risk tiers corresponding to the scores:
		 * 1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%
		 * 2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%
		 * 3: Predicted bank-initiated return incidence rate between 1.5% - 3%
		 * 4: Predicted bank-initiated return incidence rate between 3% - 5%
		 * 5: Predicted bank-initiated return incidence rate between 5% - 10%
		 * 6: Predicted bank-initiated return incidence rate between 10% - 15%
		 * 7: Predicted bank-initiated return incidence rate between 15% and 50%
		 * 8: Predicted bank-initiated return incidence rate greater than 50%
		 * Required
		 * Minimum: 1
		 * Maximum: 8
		 */
		risk_tier: number;

		/**
		 * A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
		 * Required
		 * Minimum: 1
		 * Maximum: 99
		 */
		score: number;
	}

	/** The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: "R01", "R02", "R03", "R04", "R06", "R08",  "R09", "R13", "R16", "R17", "R20", "R23". These returns have a turnaround time of 2 banking days. */
	export interface BankInitiatedReturnRiskFormProperties {

		/**
		 * In the `bank_initiated_return_risk` object, there are eight risk tiers corresponding to the scores:
		 * 1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%
		 * 2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%
		 * 3: Predicted bank-initiated return incidence rate between 1.5% - 3%
		 * 4: Predicted bank-initiated return incidence rate between 3% - 5%
		 * 5: Predicted bank-initiated return incidence rate between 5% - 10%
		 * 6: Predicted bank-initiated return incidence rate between 10% - 15%
		 * 7: Predicted bank-initiated return incidence rate between 15% and 50%
		 * 8: Predicted bank-initiated return incidence rate greater than 50%
		 * Required
		 * Minimum: 1
		 * Maximum: 8
		 */
		risk_tier: FormControl<number | null | undefined>,

		/**
		 * A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
		 * Required
		 * Minimum: 1
		 * Maximum: 99
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreateBankInitiatedReturnRiskFormGroup() {
		return new FormGroup<BankInitiatedReturnRiskFormProperties>({
			risk_tier: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1), Validators.max(8)]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1), Validators.max(99)]),
		});

	}


	/** Represents a bank transfer within the Bank Transfers API. */
	export interface BankTransfer {

		/**
		 * The account ID that should be credited/debited for this bank transfer.
		 * Required
		 */
		account_id: string;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 * Required
		 */
		ach_class: ACHClass;

		/**
		 * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/**
		 * When `true`, you can still cancel this bank transfer.
		 * Required
		 */
		cancellable: boolean;

		/**
		 * The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: Date;

		/**
		 * A string containing the custom tag provided by the client in the create request. Will be null if not provided.
		 * Required
		 */
		custom_tag: string;

		/**
		 * The description of the transfer.
		 * Required
		 */
		description: string;

		/**
		 * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
		 * Required
		 */
		direction: BankTransferDirection;

		/**
		 * The failure reason if the type of this transfer is `"failed"` or `"reversed"`. Null value otherwise.
		 * Required
		 */
		failure_reason: BankTransferFailure;

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		id: string;

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 * Required
		 */
		metadata: BankTransferMetadata;

		/**
		 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
		 * Required
		 */
		network: BankTransferNetwork;

		/**
		 * Plaidâ€™s unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: string;

		/**
		 * The status of the transfer.
		 * Required
		 */
		status: BankTransferStatus;

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: BankTransferUser;
	}

	/** Represents a bank transfer within the Bank Transfers API. */
	export interface BankTransferFormProperties {

		/**
		 * The account ID that should be credited/debited for this bank transfer.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 * Required
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * When `true`, you can still cancel this bank transfer.
		 * Required
		 */
		cancellable: FormControl<boolean | null | undefined>,

		/**
		 * The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * A string containing the custom tag provided by the client in the create request. Will be null if not provided.
		 * Required
		 */
		custom_tag: FormControl<string | null | undefined>,

		/**
		 * The description of the transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
		 * Required
		 */
		direction: FormControl<BankTransferDirection | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
		 * Required
		 */
		network: FormControl<BankTransferNetwork | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * The status of the transfer.
		 * Required
		 */
		status: FormControl<BankTransferStatus | null | undefined>,

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,
	}
	export function CreateBankTransferFormGroup() {
		return new FormGroup<BankTransferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cancellable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			custom_tag: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			direction: new FormControl<BankTransferDirection | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<BankTransferNetwork | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<BankTransferStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum BankTransferDirection { outbound = 'outbound', inbound = 'inbound', _null = 2 }


	/** The failure reason if the type of this transfer is `"failed"` or `"reversed"`. Null value otherwise. */
	export interface BankTransferFailure {

		/** The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `reversed`. For a full listing of ACH return codes, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/#ach-return-codes). */
		ach_return_code?: string | null;

		/** A human-readable description of the reason for the failure or reversal. */
		description?: string | null;
	}

	/** The failure reason if the type of this transfer is `"failed"` or `"reversed"`. Null value otherwise. */
	export interface BankTransferFailureFormProperties {

		/** The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `reversed`. For a full listing of ACH return codes, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/#ach-return-codes). */
		ach_return_code: FormControl<string | null | undefined>,

		/** A human-readable description of the reason for the failure or reversal. */
		description: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferFailureFormGroup() {
		return new FormGroup<BankTransferFailureFormProperties>({
			ach_return_code: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
	 * The JSON values must be Strings (no nested JSON objects allowed)
	 * Only ASCII characters may be used
	 * Maximum of 50 key/value pairs
	 * Maximum key length of 40 characters
	 * Maximum value length of 500 characters
	 */
	export interface BankTransferMetadata {
	}

	/**
	 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
	 * The JSON values must be Strings (no nested JSON objects allowed)
	 * Only ASCII characters may be used
	 * Maximum of 50 key/value pairs
	 * Maximum key length of 40 characters
	 * Maximum value length of 500 characters
	 */
	export interface BankTransferMetadataFormProperties {
	}
	export function CreateBankTransferMetadataFormGroup() {
		return new FormGroup<BankTransferMetadataFormProperties>({
		});

	}

	export enum BankTransferNetwork { ach = 'ach', 'same-day-ach' = 'same-day-ach', wire = 'wire' }

	export enum BankTransferStatus { pending = 'pending', posted = 'posted', cancelled = 'cancelled', failed = 'failed', reversed = 'reversed' }

	export enum BankTransferType { debit = 'debit', credit = 'credit' }


	/** The legal name and other information for the account holder. */
	export interface BankTransferUser {

		/** The account holderâ€™s email. */
		email_address?: string | null;

		/**
		 * The account holderâ€™s full legal name. If the transfer `ach_class` is `ccd`, this should be the business name of the account holder.
		 * Required
		 */
		legal_name: string;

		/** The account holder's routing number. This field is only used in response data. Do not provide this field when making requests. */
		routing_number?: string | null;
	}

	/** The legal name and other information for the account holder. */
	export interface BankTransferUserFormProperties {

		/** The account holderâ€™s email. */
		email_address: FormControl<string | null | undefined>,

		/**
		 * The account holderâ€™s full legal name. If the transfer `ach_class` is `ccd`, this should be the business name of the account holder.
		 * Required
		 */
		legal_name: FormControl<string | null | undefined>,

		/** The account holder's routing number. This field is only used in response data. Do not provide this field when making requests. */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferUserFormGroup() {
		return new FormGroup<BankTransferUserFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about the balance of a bank transfer */
	export interface BankTransferBalance {

		/**
		 * The total available balance - the sum of all successful debit transfer amounts minus all credit transfer amounts.
		 * Required
		 */
		available: string;

		/**
		 * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
		 * Required
		 */
		transactable: string;
	}

	/** Information about the balance of a bank transfer */
	export interface BankTransferBalanceFormProperties {

		/**
		 * The total available balance - the sum of all successful debit transfer amounts minus all credit transfer amounts.
		 * Required
		 */
		available: FormControl<string | null | undefined>,

		/**
		 * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
		 * Required
		 */
		transactable: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferBalanceFormGroup() {
		return new FormGroup<BankTransferBalanceFormProperties>({
			available: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transactable: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/balance/get` */
	export interface BankTransferBalanceGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** If multiple origination accounts are available, `origination_account_id` must be used to specify the account for which balance will be returned. */
		origination_account_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/bank_transfer/balance/get` */
	export interface BankTransferBalanceGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** If multiple origination accounts are available, `origination_account_id` must be used to specify the account for which balance will be returned. */
		origination_account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferBalanceGetRequestFormGroup() {
		return new FormGroup<BankTransferBalanceGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/bank_transfer/balance/get` */
	export interface BankTransferBalanceGetResponse {

		/**
		 * Information about the balance of a bank transfer
		 * Required
		 */
		balance: BankTransferBalance;

		/**
		 * The ID of the origination account that this balance belongs to.
		 * Required
		 */
		origination_account_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/balance/get` */
	export interface BankTransferBalanceGetResponseFormProperties {

		/**
		 * The ID of the origination account that this balance belongs to.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferBalanceGetResponseFormGroup() {
		return new FormGroup<BankTransferBalanceGetResponseFormProperties>({
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/cancel` */
	export interface BankTransferCancelRequest {

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/bank_transfer/cancel` */
	export interface BankTransferCancelRequestFormProperties {

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferCancelRequestFormGroup() {
		return new FormGroup<BankTransferCancelRequestFormProperties>({
			bank_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/bank_transfer/cancel` */
	export interface BankTransferCancelResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/cancel` */
	export interface BankTransferCancelResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferCancelResponseFormGroup() {
		return new FormGroup<BankTransferCancelResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/create` */
	export interface BankTransferCreateRequest {

		/**
		 * The Plaid `access_token` for the account that will be debited or credited.
		 * Required
		 */
		access_token: string;

		/**
		 * The Plaid `account_id` for the account that will be debited or credited.
		 * Required
		 */
		account_id: string;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
		 * Max length: 100
		 */
		custom_tag?: string | null;

		/**
		 * The transfer description. Maximum of 10 characters.
		 * Required
		 * Max length: 10
		 */
		description: string;

		/**
		 * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: string;

		/**
		 * The currency of the transfer amount â€“ should be set to "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 */
		metadata?: BankTransferMetadata;

		/**
		 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
		 * Required
		 */
		network: BankTransferNetwork;

		/** Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank. */
		origination_account_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: BankTransferUser;
	}

	/** Defines the request schema for `/bank_transfer/create` */
	export interface BankTransferCreateRequestFormProperties {

		/**
		 * The Plaid `access_token` for the account that will be debited or credited.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The Plaid `account_id` for the account that will be debited or credited.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
		 * Max length: 100
		 */
		custom_tag: FormControl<string | null | undefined>,

		/**
		 * The transfer description. Maximum of 10 characters.
		 * Required
		 * Max length: 10
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount â€“ should be set to "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
		 * Required
		 */
		network: FormControl<BankTransferNetwork | null | undefined>,

		/** Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank. */
		origination_account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,
	}
	export function CreateBankTransferCreateRequestFormGroup() {
		return new FormGroup<BankTransferCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			custom_tag: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<BankTransferNetwork | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/bank_transfer/create` */
	export interface BankTransferCreateResponse {

		/**
		 * Represents a bank transfer within the Bank Transfers API.
		 * Required
		 */
		bank_transfer: BankTransfer;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/create` */
	export interface BankTransferCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferCreateResponseFormGroup() {
		return new FormGroup<BankTransferCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents an event in the Bank Transfers API. */
	export interface BankTransferEvent {

		/**
		 * The account ID associated with the bank transfer.
		 * Required
		 */
		account_id: string;

		/**
		 * The bank transfer amount.
		 * Required
		 */
		bank_transfer_amount: string;

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: string;

		/**
		 * The currency of the bank transfer amount.
		 * Required
		 */
		bank_transfer_iso_currency_code: string;

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		bank_transfer_type: BankTransferType;

		/**
		 * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
		 * Required
		 */
		direction: BankTransferEventDirection;

		/**
		 * Plaidâ€™s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
		 * Required
		 * Minimum: 0
		 */
		event_id: number;

		/**
		 * The type of event that this bank transfer represents.
		 * `pending`: A new transfer was created; it is in the pending state.
		 * `cancelled`: The transfer was cancelled by the client.
		 * `failed`: The transfer failed, no funds were moved.
		 * `posted`: The transfer has been successfully submitted to the payment network.
		 * `reversed`: A posted transfer was reversed.
		 * Required
		 */
		event_type: BankTransferEventEvent_type;

		/**
		 * The failure reason if the type of this transfer is `"failed"` or `"reversed"`. Null value otherwise.
		 * Required
		 */
		failure_reason: BankTransferFailure;

		/**
		 * The ID of the origination account that this balance belongs to.
		 * Required
		 */
		origination_account_id: string;

		/**
		 * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		timestamp: Date;
	}

	/** Represents an event in the Bank Transfers API. */
	export interface BankTransferEventFormProperties {

		/**
		 * The account ID associated with the bank transfer.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The bank transfer amount.
		 * Required
		 */
		bank_transfer_amount: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: FormControl<string | null | undefined>,

		/**
		 * The currency of the bank transfer amount.
		 * Required
		 */
		bank_transfer_iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		bank_transfer_type: FormControl<BankTransferType | null | undefined>,

		/**
		 * Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
		 * Required
		 */
		direction: FormControl<BankTransferEventDirection | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
		 * Required
		 * Minimum: 0
		 */
		event_id: FormControl<number | null | undefined>,

		/**
		 * The type of event that this bank transfer represents.
		 * `pending`: A new transfer was created; it is in the pending state.
		 * `cancelled`: The transfer was cancelled by the client.
		 * `failed`: The transfer failed, no funds were moved.
		 * `posted`: The transfer has been successfully submitted to the payment network.
		 * `reversed`: A posted transfer was reversed.
		 * Required
		 */
		event_type: FormControl<BankTransferEventEvent_type | null | undefined>,

		/**
		 * The ID of the origination account that this balance belongs to.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateBankTransferEventFormGroup() {
		return new FormGroup<BankTransferEventFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bank_transfer_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bank_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bank_transfer_iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bank_transfer_type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
			direction: new FormControl<BankTransferEventDirection | null | undefined>(undefined, [Validators.required]),
			event_id: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			event_type: new FormControl<BankTransferEventEvent_type | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum BankTransferEventDirection { outbound = 'outbound', inbound = 'inbound', _null = 2 }

	export enum BankTransferEventEvent_type { pending = 'pending', cancelled = 'cancelled', failed = 'failed', posted = 'posted', reversed = 'reversed' }


	/** The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account. */
	export enum BankTransferEventListBankTransferType { debit = 'debit', credit = 'credit', _null = 2 }


	/**
	 * Indicates the direction of the transfer: `outbound`: for API-initiated transfers
	 * `inbound`: for payments received by the FBO account.
	 */
	export enum BankTransferEventListDirection { inbound = 'inbound', outbound = 'outbound', _null = 2 }


	/** Defines the request schema for `/bank_transfer/event/list` */
	export interface BankTransferEventListRequest {

		/** The account ID to get events for all transactions to/from an account. */
		account_id?: string | null;

		/** Plaidâ€™s unique identifier for a bank transfer. */
		bank_transfer_id?: string | null;

		/** The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account. */
		bank_transfer_type?: BankTransferEventListRequestBank_transfer_type | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/**
		 * Indicates the direction of the transfer: `outbound`: for API-initiated transfers
		 * `inbound`: for payments received by the FBO account.
		 */
		direction?: BankTransferEventListRequestDirection | null;

		/** The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date?: Date | null;

		/** Filter events by event type. */
		event_types?: Array<BankTransferEventType>;

		/**
		 * The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** The origination account ID to get events for transfers from a specific origination account. */
		origination_account_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date?: Date | null;
	}

	/** Defines the request schema for `/bank_transfer/event/list` */
	export interface BankTransferEventListRequestFormProperties {

		/** The account ID to get events for all transactions to/from an account. */
		account_id: FormControl<string | null | undefined>,

		/** Plaidâ€™s unique identifier for a bank transfer. */
		bank_transfer_id: FormControl<string | null | undefined>,

		/** The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account. */
		bank_transfer_type: FormControl<BankTransferEventListRequestBank_transfer_type | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * Indicates the direction of the transfer: `outbound`: for API-initiated transfers
		 * `inbound`: for payments received by the FBO account.
		 */
		direction: FormControl<BankTransferEventListRequestDirection | null | undefined>,

		/** The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** The origination account ID to get events for transfers from a specific origination account. */
		origination_account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateBankTransferEventListRequestFormGroup() {
		return new FormGroup<BankTransferEventListRequestFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			bank_transfer_id: new FormControl<string | null | undefined>(undefined),
			bank_transfer_type: new FormControl<BankTransferEventListRequestBank_transfer_type | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			direction: new FormControl<BankTransferEventListRequestDirection | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum BankTransferEventListRequestBank_transfer_type { debit = 'debit', credit = 'credit', _null = 2 }

	export enum BankTransferEventListRequestDirection { inbound = 'inbound', outbound = 'outbound', _null = 2 }


	/**
	 * The type of event that this bank transfer represents.
	 * `pending`: A new transfer was created; it is in the pending state.
	 * `cancelled`: The transfer was cancelled by the client.
	 * `failed`: The transfer failed, no funds were moved.
	 * `posted`: The transfer has been successfully submitted to the payment network.
	 * `reversed`: A posted transfer was reversed.
	 */
	export enum BankTransferEventType { pending = 'pending', cancelled = 'cancelled', failed = 'failed', posted = 'posted', reversed = 'reversed' }


	/** Defines the response schema for `/bank_transfer/event/list` */
	export interface BankTransferEventListResponse {

		/** Required */
		bank_transfer_events: Array<BankTransferEvent>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/event/list` */
	export interface BankTransferEventListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferEventListResponseFormGroup() {
		return new FormGroup<BankTransferEventListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/event/sync` */
	export interface BankTransferEventSyncRequest {

		/**
		 * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.
		 * Required
		 * Minimum: 0
		 */
		after_id: number;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of bank transfer events to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/bank_transfer/event/sync` */
	export interface BankTransferEventSyncRequestFormProperties {

		/**
		 * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.
		 * Required
		 * Minimum: 0
		 */
		after_id: FormControl<number | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of bank transfer events to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferEventSyncRequestFormGroup() {
		return new FormGroup<BankTransferEventSyncRequestFormProperties>({
			after_id: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/bank_transfer/event/sync` */
	export interface BankTransferEventSyncResponse {

		/** Required */
		bank_transfer_events: Array<BankTransferEvent>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/event/sync` */
	export interface BankTransferEventSyncResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferEventSyncResponseFormGroup() {
		return new FormGroup<BankTransferEventSyncResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/get` */
	export interface BankTransferGetRequest {

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/bank_transfer/get` */
	export interface BankTransferGetRequestFormProperties {

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferGetRequestFormGroup() {
		return new FormGroup<BankTransferGetRequestFormProperties>({
			bank_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/bank_transfer/get` */
	export interface BankTransferGetResponse {

		/**
		 * Represents a bank transfer within the Bank Transfers API.
		 * Required
		 */
		bank_transfer: BankTransfer;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/get` */
	export interface BankTransferGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferGetResponseFormGroup() {
		return new FormGroup<BankTransferGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/list` */
	export interface BankTransferListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of bank transfers to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account. */
		direction?: BankTransferListRequestDirection | null;

		/** The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date?: Date | null;

		/**
		 * The number of bank transfers to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** Filter bank transfers to only those originated through the specified origination account. */
		origination_account_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date?: Date | null;
	}

	/** Defines the request schema for `/bank_transfer/list` */
	export interface BankTransferListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of bank transfers to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account. */
		direction: FormControl<BankTransferListRequestDirection | null | undefined>,

		/** The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The number of bank transfers to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Filter bank transfers to only those originated through the specified origination account. */
		origination_account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateBankTransferListRequestFormGroup() {
		return new FormGroup<BankTransferListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			direction: new FormControl<BankTransferListRequestDirection | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum BankTransferListRequestDirection { outbound = 'outbound', inbound = 'inbound', _null = 2 }


	/** Defines the response schema for `/bank_transfer/list` */
	export interface BankTransferListResponse {

		/** Required */
		bank_transfers: Array<BankTransfer>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/list` */
	export interface BankTransferListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferListResponseFormGroup() {
		return new FormGroup<BankTransferListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/migrate_account` */
	export interface BankTransferMigrateAccountRequest {

		/**
		 * The user's account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The type of the bank account (`checking` or `savings`).
		 * Required
		 */
		account_type: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The user's routing number.
		 * Required
		 */
		routing_number: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
		wire_routing_number?: string | null;
	}

	/** Defines the request schema for `/bank_transfer/migrate_account` */
	export interface BankTransferMigrateAccountRequestFormProperties {

		/**
		 * The user's account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The type of the bank account (`checking` or `savings`).
		 * Required
		 */
		account_type: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The user's routing number.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
		wire_routing_number: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferMigrateAccountRequestFormGroup() {
		return new FormGroup<BankTransferMigrateAccountRequestFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			wire_routing_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/bank_transfer/migrate_account` */
	export interface BankTransferMigrateAccountResponse {

		/**
		 * The Plaid `access_token` for the newly created Item.
		 * Required
		 */
		access_token: string;

		/**
		 * The Plaid `account_id` for the newly created Item.
		 * Required
		 */
		account_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/bank_transfer/migrate_account` */
	export interface BankTransferMigrateAccountResponseFormProperties {

		/**
		 * The Plaid `access_token` for the newly created Item.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The Plaid `account_id` for the newly created Item.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferMigrateAccountResponseFormGroup() {
		return new FormGroup<BankTransferMigrateAccountResponseFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** BankTransferSweep describes a sweep transfer. */
	export interface BankTransferSweep {

		/**
		 * The amount of the sweep.
		 * Required
		 */
		amount: string;

		/**
		 * The datetime when the sweep occurred, in RFC 3339 format.
		 * Required
		 */
		created_at: Date;

		/**
		 * Identifier of the sweep.
		 * Required
		 */
		id: string;

		/**
		 * The currency of the sweep, e.g. "USD".
		 * Required
		 */
		iso_currency_code: string;
	}

	/** BankTransferSweep describes a sweep transfer. */
	export interface BankTransferSweepFormProperties {

		/**
		 * The amount of the sweep.
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The datetime when the sweep occurred, in RFC 3339 format.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Identifier of the sweep.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The currency of the sweep, e.g. "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferSweepFormGroup() {
		return new FormGroup<BankTransferSweepFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/bank_transfer/sweep/get` */
	export interface BankTransferSweepGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Identifier of the sweep.
		 * Required
		 */
		sweep_id: string;
	}

	/** Defines the request schema for `/bank_transfer/sweep/get` */
	export interface BankTransferSweepGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Identifier of the sweep.
		 * Required
		 */
		sweep_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferSweepGetRequestFormGroup() {
		return new FormGroup<BankTransferSweepGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			sweep_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** BankTransferSweepGetResponse defines the response schema for `/bank_transfer/sweep/get` */
	export interface BankTransferSweepGetResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * BankTransferSweep describes a sweep transfer.
		 * Required
		 */
		sweep: BankTransferSweep;
	}

	/** BankTransferSweepGetResponse defines the response schema for `/bank_transfer/sweep/get` */
	export interface BankTransferSweepGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferSweepGetResponseFormGroup() {
		return new FormGroup<BankTransferSweepGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** BankTransferSweepListRequest defines the request schema for `/bank_transfer/sweep/list` */
	export interface BankTransferSweepListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of sweeps to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** The end datetime of sweeps to return (RFC 3339 format). */
		end_time?: Date | null;

		/** If multiple origination accounts are available, `origination_account_id` must be used to specify the account that the sweeps belong to. */
		origination_account_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of sweeps to return (RFC 3339 format). */
		start_time?: Date | null;
	}

	/** BankTransferSweepListRequest defines the request schema for `/bank_transfer/sweep/list` */
	export interface BankTransferSweepListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of sweeps to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** The end datetime of sweeps to return (RFC 3339 format). */
		end_time: FormControl<Date | null | undefined>,

		/** If multiple origination accounts are available, `origination_account_id` must be used to specify the account that the sweeps belong to. */
		origination_account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of sweeps to return (RFC 3339 format). */
		start_time: FormControl<Date | null | undefined>,
	}
	export function CreateBankTransferSweepListRequestFormGroup() {
		return new FormGroup<BankTransferSweepListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			end_time: new FormControl<Date | null | undefined>(undefined),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** BankTransferSweepListResponse defines the response schema for `/bank_transfer/sweep/list` */
	export interface BankTransferSweepListResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** Required */
		sweeps: Array<BankTransferSweep>;
	}

	/** BankTransferSweepListResponse defines the response schema for `/bank_transfer/sweep/list` */
	export interface BankTransferSweepListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateBankTransferSweepListResponseFormGroup() {
		return new FormGroup<BankTransferSweepListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when new bank transfer events are available. Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`. */
	export interface BankTransfersEventsUpdateWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * `BANK_TRANSFERS_EVENTS_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `BANK_TRANSFERS`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when new bank transfer events are available. Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`. */
	export interface BankTransfersEventsUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * `BANK_TRANSFERS_EVENTS_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `BANK_TRANSFERS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateBankTransfersEventsUpdateWebhookFormGroup() {
		return new FormGroup<BankTransfersEventsUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when new ACH events are available. To begin receiving this webhook, you must first register your webhook listener endpoint via the [webhooks page in the Dashboard](https://dashboard.plaid.com/team/webhooks). The `BANK_TRANSFERS_EVENTS_UPDATE` webhook can be used to track the progress of ACH transfers used in [micro-deposit verification](/docs/auth/coverage/microdeposit-events/). Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`. Note that [Transfer](https://plaid.com/docs/transfer) customers should use Transfer webhooks instead of using `BANK_TRANSFERS_EVENTS_UPDATE`; see [micro-deposit events documentation](https://plaid.com/docs/auth/coverage/microdeposit-events/) for more details. */
	export interface BankTransfersEventsUpdateWebhookForAuth {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * `BANK_TRANSFERS_EVENTS_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `BANK_TRANSFERS`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when new ACH events are available. To begin receiving this webhook, you must first register your webhook listener endpoint via the [webhooks page in the Dashboard](https://dashboard.plaid.com/team/webhooks). The `BANK_TRANSFERS_EVENTS_UPDATE` webhook can be used to track the progress of ACH transfers used in [micro-deposit verification](/docs/auth/coverage/microdeposit-events/). Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`. Note that [Transfer](https://plaid.com/docs/transfer) customers should use Transfer webhooks instead of using `BANK_TRANSFERS_EVENTS_UPDATE`; see [micro-deposit events documentation](https://plaid.com/docs/auth/coverage/microdeposit-events/) for more details. */
	export interface BankTransfersEventsUpdateWebhookForAuthFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * `BANK_TRANSFERS_EVENTS_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `BANK_TRANSFERS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateBankTransfersEventsUpdateWebhookForAuthFormGroup() {
		return new FormGroup<BankTransfersEventsUpdateWebhookForAuthFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CategoriesGetRequest defines the request schema for `/categories/get` */
	export interface CategoriesGetRequest {
	}

	/** CategoriesGetRequest defines the request schema for `/categories/get` */
	export interface CategoriesGetRequestFormProperties {
	}
	export function CreateCategoriesGetRequestFormGroup() {
		return new FormGroup<CategoriesGetRequestFormProperties>({
		});

	}


	/** CategoriesGetResponse defines the response schema for `/categories/get` */
	export interface CategoriesGetResponse {

		/**
		 * An array of all of the transaction categories used by Plaid.
		 * Required
		 */
		categories: Array<Category>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CategoriesGetResponse defines the response schema for `/categories/get` */
	export interface CategoriesGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCategoriesGetResponseFormGroup() {
		return new FormGroup<CategoriesGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information describing a transaction category */
	export interface Category {

		/**
		 * An identifying number for the category. `category_id` is a Plaid-specific identifier and does not necessarily correspond to merchant category codes.
		 * Required
		 */
		category_id: string;

		/**
		 * `place` for physical transactions or `special` for other transactions such as bank charges.
		 * Required
		 */
		group: string;

		/**
		 * A hierarchical array of the categories to which this `category_id` belongs.
		 * Required
		 */
		hierarchy: Array<string>;
	}

	/** Information describing a transaction category */
	export interface CategoryFormProperties {

		/**
		 * An identifying number for the category. `category_id` is a Plaid-specific identifier and does not necessarily correspond to merchant category codes.
		 * Required
		 */
		category_id: FormControl<string | null | undefined>,

		/**
		 * `place` for physical transactions or `special` for other transactions such as bank charges.
		 * Required
		 */
		group: FormControl<string | null | undefined>,
	}
	export function CreateCategoryFormGroup() {
		return new FormGroup<CategoryFormProperties>({
			category_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			group: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A client-provided transaction that Plaid has enhanced. */
	export interface ClientProvidedEnhancedTransaction {

		/**
		 * The value of the transaction, denominated in the account's currency, as stated in `iso_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
		 * Required
		 * Type: double
		 */
		amount: number;

		/**
		 * The raw description of the transaction.
		 * Required
		 */
		description: string;

		/**
		 * A grouping of the Plaid produced transaction enhancement fields.
		 * Required
		 */
		enhancements: Enhancements;

		/**
		 * Unique transaction identifier to tie transactions back to clients' systems.
		 * Required
		 */
		id: string;

		/**
		 * The ISO-4217 currency code of the transaction.
		 * Required
		 */
		iso_currency_code: string;
	}

	/** A client-provided transaction that Plaid has enhanced. */
	export interface ClientProvidedEnhancedTransactionFormProperties {

		/**
		 * The value of the transaction, denominated in the account's currency, as stated in `iso_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The raw description of the transaction.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Unique transaction identifier to tie transactions back to clients' systems.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the transaction.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateClientProvidedEnhancedTransactionFormGroup() {
		return new FormGroup<ClientProvidedEnhancedTransactionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A grouping of the Plaid produced transaction enhancement fields. */
	export interface Enhancements {

		/**
		 * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * Required
		 */
		category: Array<string>;

		/**
		 * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * Required
		 */
		category_id: string;

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number?: string | null;

		/** The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description. */
		counterparties?: Array<Counterparty>;

		/**
		 * A representation of where a transaction took place
		 * Required
		 */
		location: Location;

		/** The URL of a logo associated with this transaction, if available. The logo is formatted as a 100x100 pixel PNG file. */
		logo_url?: string | null;

		/** The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description. */
		merchant_name?: string | null;

		/**
		 * The channel used to make a payment.
		 * `online:` transactions that took place online.
		 * `in store:` transactions that were made at a physical location.
		 * `other:` transactions that relate to banks, e.g. fees or deposits.
		 * Required
		 */
		payment_channel: EnhancementsPayment_channel;

		/**
		 * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 */
		personal_finance_category?: PersonalFinanceCategory;

		/** A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels. */
		personal_finance_category_icon_url?: string | null;

		/** The website associated with this transaction, if available. */
		website?: string | null;
	}

	/** A grouping of the Plaid produced transaction enhancement fields. */
	export interface EnhancementsFormProperties {

		/**
		 * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * Required
		 */
		category_id: FormControl<string | null | undefined>,

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number: FormControl<string | null | undefined>,

		/** The URL of a logo associated with this transaction, if available. The logo is formatted as a 100x100 pixel PNG file. */
		logo_url: FormControl<string | null | undefined>,

		/** The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description. */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The channel used to make a payment.
		 * `online:` transactions that took place online.
		 * `in store:` transactions that were made at a physical location.
		 * `other:` transactions that relate to banks, e.g. fees or deposits.
		 * Required
		 */
		payment_channel: FormControl<EnhancementsPayment_channel | null | undefined>,

		/** A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels. */
		personal_finance_category_icon_url: FormControl<string | null | undefined>,

		/** The website associated with this transaction, if available. */
		website: FormControl<string | null | undefined>,
	}
	export function CreateEnhancementsFormGroup() {
		return new FormGroup<EnhancementsFormProperties>({
			category_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_number: new FormControl<string | null | undefined>(undefined),
			logo_url: new FormControl<string | null | undefined>(undefined),
			merchant_name: new FormControl<string | null | undefined>(undefined),
			payment_channel: new FormControl<EnhancementsPayment_channel | null | undefined>(undefined, [Validators.required]),
			personal_finance_category_icon_url: new FormControl<string | null | undefined>(undefined),
			website: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description. */
	export interface Counterparty {

		/** A unique, stable, Plaid-generated id that maps to the counterparty. */
		entity_id?: string | null;

		/**
		 * The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG file.
		 * Required
		 */
		logo_url: string;

		/**
		 * The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
		 * Required
		 */
		name: string;

		/**
		 * The counterparty type.
		 * `merchant`: a provider of goods or services for purchase
		 * `financial_institution`: a financial entity (bank, credit union, BNPL, fintech)
		 * `payment_app`: a transfer or P2P app (e.g. Zelle)
		 * `marketplace`: a marketplace (e.g DoorDash, Google Play Store)
		 * `payment_terminal`: a point-of-sale payment terminal (e.g Square, Toast)
		 * Required
		 */
		type: CounterpartyType;

		/**
		 * The website associated with the counterparty.
		 * Required
		 */
		website: string;
	}

	/** The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description. */
	export interface CounterpartyFormProperties {

		/** A unique, stable, Plaid-generated id that maps to the counterparty. */
		entity_id: FormControl<string | null | undefined>,

		/**
		 * The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG file.
		 * Required
		 */
		logo_url: FormControl<string | null | undefined>,

		/**
		 * The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The counterparty type.
		 * `merchant`: a provider of goods or services for purchase
		 * `financial_institution`: a financial entity (bank, credit union, BNPL, fintech)
		 * `payment_app`: a transfer or P2P app (e.g. Zelle)
		 * `marketplace`: a marketplace (e.g DoorDash, Google Play Store)
		 * `payment_terminal`: a point-of-sale payment terminal (e.g Square, Toast)
		 * Required
		 */
		type: FormControl<CounterpartyType | null | undefined>,

		/**
		 * The website associated with the counterparty.
		 * Required
		 */
		website: FormControl<string | null | undefined>,
	}
	export function CreateCounterpartyFormGroup() {
		return new FormGroup<CounterpartyFormProperties>({
			entity_id: new FormControl<string | null | undefined>(undefined),
			logo_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<CounterpartyType | null | undefined>(undefined, [Validators.required]),
			website: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CounterpartyType { merchant = 'merchant', financial_institution = 'financial_institution', payment_app = 'payment_app', marketplace = 'marketplace', payment_terminal = 'payment_terminal' }


	/** A representation of where a transaction took place */
	export interface Location {

		/**
		 * The street address where the transaction occurred.
		 * Required
		 */
		address: string;

		/**
		 * The city where the transaction occurred.
		 * Required
		 */
		city: string;

		/**
		 * The ISO 3166-1 alpha-2 country code where the transaction occurred.
		 * Required
		 */
		country: string;

		/**
		 * The latitude where the transaction occurred.
		 * Required
		 * Type: double
		 */
		lat: number;

		/**
		 * The longitude where the transaction occurred.
		 * Required
		 * Type: double
		 */
		lon: number;

		/**
		 * The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`.
		 * Required
		 */
		postal_code: string;

		/**
		 * The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`.
		 * Required
		 */
		region: string;

		/**
		 * The merchant defined store number where the transaction occurred.
		 * Required
		 */
		store_number: string;
	}

	/** A representation of where a transaction took place */
	export interface LocationFormProperties {

		/**
		 * The street address where the transaction occurred.
		 * Required
		 */
		address: FormControl<string | null | undefined>,

		/**
		 * The city where the transaction occurred.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166-1 alpha-2 country code where the transaction occurred.
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The latitude where the transaction occurred.
		 * Required
		 * Type: double
		 */
		lat: FormControl<number | null | undefined>,

		/**
		 * The longitude where the transaction occurred.
		 * Required
		 * Type: double
		 */
		lon: FormControl<number | null | undefined>,

		/**
		 * The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`.
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The merchant defined store number where the transaction occurred.
		 * Required
		 */
		store_number: FormControl<string | null | undefined>,
	}
	export function CreateLocationFormGroup() {
		return new FormGroup<LocationFormProperties>({
			address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			lat: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			lon: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			store_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EnhancementsPayment_channel { online = 'online', 'in store' = 'in store', other = 'other' }


	/**
	 * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
	 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
	 */
	export interface PersonalFinanceCategory {

		/**
		 * A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category.
		 * Required
		 */
		detailed: string;

		/**
		 * A high level category that communicates the broad category of the transaction.
		 * Required
		 */
		primary: string;
	}

	/**
	 * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
	 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
	 */
	export interface PersonalFinanceCategoryFormProperties {

		/**
		 * A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category.
		 * Required
		 */
		detailed: FormControl<string | null | undefined>,

		/**
		 * A high level category that communicates the broad category of the transaction.
		 * Required
		 */
		primary: FormControl<string | null | undefined>,
	}
	export function CreatePersonalFinanceCategoryFormGroup() {
		return new FormGroup<PersonalFinanceCategoryFormProperties>({
			detailed: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			primary: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A client-provided transaction that Plaid has enriched. */
	export interface ClientProvidedEnrichedTransaction {

		/**
		 * The absolute value of the transaction (>= 0)
		 * Required
		 * Type: double
		 */
		amount: number;

		/**
		 * The raw description of the transaction.
		 * Required
		 */
		description: string;

		/**
		 * The direction of the transaction from the perspective of the account holder:
		 * `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)
		 * `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
		 */
		direction?: ClientProvidedEnrichedTransactionDirection | null;

		/**
		 * A grouping of the Plaid produced transaction enrichment fields.
		 * Required
		 */
		enrichments: Enrichments;

		/**
		 * The unique ID for the transaction as provided by you in the request.
		 * Required
		 */
		id: string;

		/**
		 * The ISO-4217 currency code of the transaction e.g. USD.
		 * Required
		 */
		iso_currency_code: string;
	}

	/** A client-provided transaction that Plaid has enriched. */
	export interface ClientProvidedEnrichedTransactionFormProperties {

		/**
		 * The absolute value of the transaction (>= 0)
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The raw description of the transaction.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The direction of the transaction from the perspective of the account holder:
		 * `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)
		 * `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
		 */
		direction: FormControl<ClientProvidedEnrichedTransactionDirection | null | undefined>,

		/**
		 * The unique ID for the transaction as provided by you in the request.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the transaction e.g. USD.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateClientProvidedEnrichedTransactionFormGroup() {
		return new FormGroup<ClientProvidedEnrichedTransactionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			direction: new FormControl<ClientProvidedEnrichedTransactionDirection | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ClientProvidedEnrichedTransactionDirection { INFLOW = 'INFLOW', OUTFLOW = 'OUTFLOW' }


	/** A grouping of the Plaid produced transaction enrichment fields. */
	export interface Enrichments {

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number?: string | null;

		/**
		 * The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
		 * Required
		 */
		counterparties: Array<Counterparty>;

		/** A unique, stable, Plaid-generated id that maps to the primary counterparty. */
		entity_id?: string | null;

		/**
		 * A hierarchical array of the legacy categories to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
		 */
		legacy_category?: Array<string>;

		/**
		 * The ID of the legacy category to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
		 */
		legacy_category_id?: string | null;

		/**
		 * A representation of where a transaction took place
		 * Required
		 */
		location: Location;

		/**
		 * The URL of a logo associated with this transaction, if available. The logo is formatted as a 100x100 pixel PNG file.
		 * Required
		 */
		logo_url: string;

		/**
		 * The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The channel used to make a payment.
		 * `online:` transactions that took place online.
		 * `in store:` transactions that were made at a physical location.
		 * `other:` transactions that relate to banks, e.g. fees or deposits.
		 * Required
		 */
		payment_channel: EnhancementsPayment_channel;

		/**
		 * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 * Required
		 */
		personal_finance_category: PersonalFinanceCategory;

		/**
		 * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
		 * Required
		 */
		personal_finance_category_icon_url: string;

		/**
		 * Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.
		 * Common examples include loan payments, bill payments, subscriptions, and payroll income.
		 * This is a beta field, available to all users.
		 */
		recurrence?: Recurrence;

		/**
		 * The website associated with this transaction.
		 * Required
		 */
		website: string;
	}

	/** A grouping of the Plaid produced transaction enrichment fields. */
	export interface EnrichmentsFormProperties {

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number: FormControl<string | null | undefined>,

		/** A unique, stable, Plaid-generated id that maps to the primary counterparty. */
		entity_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the legacy category to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
		 */
		legacy_category_id: FormControl<string | null | undefined>,

		/**
		 * The URL of a logo associated with this transaction, if available. The logo is formatted as a 100x100 pixel PNG file.
		 * Required
		 */
		logo_url: FormControl<string | null | undefined>,

		/**
		 * The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The channel used to make a payment.
		 * `online:` transactions that took place online.
		 * `in store:` transactions that were made at a physical location.
		 * `other:` transactions that relate to banks, e.g. fees or deposits.
		 * Required
		 */
		payment_channel: FormControl<EnhancementsPayment_channel | null | undefined>,

		/**
		 * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
		 * Required
		 */
		personal_finance_category_icon_url: FormControl<string | null | undefined>,

		/**
		 * The website associated with this transaction.
		 * Required
		 */
		website: FormControl<string | null | undefined>,
	}
	export function CreateEnrichmentsFormGroup() {
		return new FormGroup<EnrichmentsFormProperties>({
			check_number: new FormControl<string | null | undefined>(undefined),
			entity_id: new FormControl<string | null | undefined>(undefined),
			legacy_category_id: new FormControl<string | null | undefined>(undefined),
			logo_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_channel: new FormControl<EnhancementsPayment_channel | null | undefined>(undefined, [Validators.required]),
			personal_finance_category_icon_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			website: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.
	 * Common examples include loan payments, bill payments, subscriptions, and payroll income.
	 * This is a beta field, available to all users.
	 */
	export interface Recurrence {

		/** Whether or not the transaction is periodically recurring. */
		is_recurring?: boolean | null;
	}

	/**
	 * Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.
	 * Common examples include loan payments, bill payments, subscriptions, and payroll income.
	 * This is a beta field, available to all users.
	 */
	export interface RecurrenceFormProperties {

		/** Whether or not the transaction is periodically recurring. */
		is_recurring: FormControl<boolean | null | undefined>,
	}
	export function CreateRecurrenceFormGroup() {
		return new FormGroup<RecurrenceFormProperties>({
			is_recurring: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A client-provided transaction for Plaid to enhance. */
	export interface ClientProvidedRawTransaction {

		/**
		 * The value of the transaction with direction. (NOTE: this will affect enrichment results, so directions are important):.
		 * Negative (-) for credits (e.g., incoming transfers, refunds)
		 * Positive (+) for debits (e.g., purchases, fees, outgoing transfers)
		 * Required
		 * Type: double
		 */
		amount: number;

		/**
		 * The raw description of the transaction.
		 * Required
		 */
		description: string;

		/**
		 * A unique ID for the transaction used to help you tie data back to your systems.
		 * Required
		 */
		id: string;

		/**
		 * The ISO-4217 currency code of the transaction e.g. USD.
		 * Required
		 */
		iso_currency_code: string;
	}

	/** A client-provided transaction for Plaid to enhance. */
	export interface ClientProvidedRawTransactionFormProperties {

		/**
		 * The value of the transaction with direction. (NOTE: this will affect enrichment results, so directions are important):.
		 * Negative (-) for credits (e.g., incoming transfers, refunds)
		 * Positive (+) for debits (e.g., purchases, fees, outgoing transfers)
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The raw description of the transaction.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * A unique ID for the transaction used to help you tie data back to your systems.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the transaction e.g. USD.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateClientProvidedRawTransactionFormGroup() {
		return new FormGroup<ClientProvidedRawTransactionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A client-provided transaction for Plaid to enrich. */
	export interface ClientProvidedTransaction {

		/**
		 * The absolute value of the transaction (>= 0). When testing Enrich, note that `amount` data should be realistic. Unrealistic or inaccurate `amount` data may result in reduced quality output.
		 * Required
		 * Type: double
		 */
		amount: number;

		/**
		 * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.
		 * Type: DateOnly
		 */
		date_posted?: Date | null;

		/**
		 * The raw description of the transaction. If you have location data in available an unstructured format, it may be appended to the `description` field.
		 * Required
		 */
		description: string;

		/**
		 * The direction of the transaction from the perspective of the account holder:
		 * `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)
		 * `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
		 * Required
		 */
		direction: ClientProvidedEnrichedTransactionDirection;

		/**
		 * A unique ID for the transaction used to help you tie data back to your systems.
		 * Required
		 */
		id: string;

		/**
		 * The ISO-4217 currency code of the transaction e.g. USD.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * A representation of where a transaction took place.
		 * Use this field to pass in structured location information you may have about your transactions. Providing location data is optional but can increase result quality. If you have unstructured location information, it may be appended to the `description` field.
		 */
		location?: ClientProvidedTransactionLocation;

		/** Merchant category codes (MCCs) are four-digit numbers that describe a merchant's primary business activities. */
		mcc?: string | null;
	}

	/** A client-provided transaction for Plaid to enrich. */
	export interface ClientProvidedTransactionFormProperties {

		/**
		 * The absolute value of the transaction (>= 0). When testing Enrich, note that `amount` data should be realistic. Unrealistic or inaccurate `amount` data may result in reduced quality output.
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.
		 * Type: DateOnly
		 */
		date_posted: FormControl<Date | null | undefined>,

		/**
		 * The raw description of the transaction. If you have location data in available an unstructured format, it may be appended to the `description` field.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The direction of the transaction from the perspective of the account holder:
		 * `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)
		 * `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
		 * Required
		 */
		direction: FormControl<ClientProvidedEnrichedTransactionDirection | null | undefined>,

		/**
		 * A unique ID for the transaction used to help you tie data back to your systems.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the transaction e.g. USD.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/** Merchant category codes (MCCs) are four-digit numbers that describe a merchant's primary business activities. */
		mcc: FormControl<string | null | undefined>,
	}
	export function CreateClientProvidedTransactionFormGroup() {
		return new FormGroup<ClientProvidedTransactionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			date_posted: new FormControl<Date | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			direction: new FormControl<ClientProvidedEnrichedTransactionDirection | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mcc: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A representation of where a transaction took place.
	 * Use this field to pass in structured location information you may have about your transactions. Providing location data is optional but can increase result quality. If you have unstructured location information, it may be appended to the `description` field.
	 */
	export interface ClientProvidedTransactionLocation {

		/** The street address where the transaction occurred. */
		address?: string | null;

		/** The city where the transaction occurred. */
		city?: string | null;

		/** The country where the transaction occurred. */
		country?: string | null;

		/** The postal code where the transaction occurred. */
		postal_code?: string | null;

		/** The region or state where the transaction occurred. */
		region?: string | null;
	}

	/**
	 * A representation of where a transaction took place.
	 * Use this field to pass in structured location information you may have about your transactions. Providing location data is optional but can increase result quality. If you have unstructured location information, it may be appended to the `description` field.
	 */
	export interface ClientProvidedTransactionLocationFormProperties {

		/** The street address where the transaction occurred. */
		address: FormControl<string | null | undefined>,

		/** The city where the transaction occurred. */
		city: FormControl<string | null | undefined>,

		/** The country where the transaction occurred. */
		country: FormControl<string | null | undefined>,

		/** The postal code where the transaction occurred. */
		postal_code: FormControl<string | null | undefined>,

		/** The region or state where the transaction occurred. */
		region: FormControl<string | null | undefined>,
	}
	export function CreateClientProvidedTransactionLocationFormGroup() {
		return new FormGroup<ClientProvidedTransactionLocationFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes the connected application for a particular end user. */
	export interface ConnectedApplication {

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: string;

		/** The URL for the application's website */
		application_url?: string | null;

		/**
		 * The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
		 * Required
		 * Type: DateOnly
		 */
		created_at: Date;

		/** A human-readable name of the application for display purposes */
		display_name?: string | null;

		/** A URL that links to the application logo image. */
		logo_url?: string | null;

		/**
		 * The name of the application
		 * Required
		 */
		name: string;

		/** A string provided by the connected app stating why they use their respective enabled products. */
		reason_for_access?: string | null;

		/** The scopes object */
		scopes?: ScopesNullable;
	}

	/** Describes the connected application for a particular end user. */
	export interface ConnectedApplicationFormProperties {

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: FormControl<string | null | undefined>,

		/** The URL for the application's website */
		application_url: FormControl<string | null | undefined>,

		/**
		 * The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
		 * Required
		 * Type: DateOnly
		 */
		created_at: FormControl<Date | null | undefined>,

		/** A human-readable name of the application for display purposes */
		display_name: FormControl<string | null | undefined>,

		/** A URL that links to the application logo image. */
		logo_url: FormControl<string | null | undefined>,

		/**
		 * The name of the application
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** A string provided by the connected app stating why they use their respective enabled products. */
		reason_for_access: FormControl<string | null | undefined>,
	}
	export function CreateConnectedApplicationFormGroup() {
		return new FormGroup<ConnectedApplicationFormProperties>({
			application_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			application_url: new FormControl<string | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			display_name: new FormControl<string | null | undefined>(undefined),
			logo_url: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason_for_access: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ISO-3166-1 alpha-2 country code standard. */
	export enum CountryCode { US = 'US', GB = 'GB', ES = 'ES', NL = 'NL', FR = 'FR', IE = 'IE', CA = 'CA', DE = 'DE', IT = 'IT', PL = 'PL', DK = 'DK', NO = 'NO', SE = 'SE', EE = 'EE', LT = 'LT', LV = 'LV', PT = 'PT' }


	/** An object representing an end user's 1099 tax form */
	export interface Credit1099 {

		/**
		 * Amount reported for April.
		 * Type: double
		 */
		april_amount?: number | null;

		/**
		 * Amount reported for August.
		 * Type: double
		 */
		august_amount?: number | null;

		/**
		 * Amount in card not present transactions.
		 * Type: double
		 */
		card_not_present_transaction?: number | null;

		/**
		 * Amount of crop insurance proceeds.
		 * Type: double
		 */
		crop_insurance_proceeds?: number | null;

		/**
		 * Amount reported for December.
		 * Type: double
		 */
		december_amount?: number | null;

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		document_id: string;

		/** Object representing metadata pertaining to the document. */
		document_metadata?: CreditDocumentMetadata;

		/**
		 * Amount of golden parachute payments made by payer.
		 * Type: double
		 */
		excess_golden_parachute_payments?: number | null;

		/**
		 * Amount reported for February.
		 * Type: double
		 */
		february_amount?: number | null;

		/**
		 * Amount of federal income tax withheld from payer.
		 * Type: double
		 */
		federal_income_tax_withheld?: number | null;

		/** An object representing a filer used by 1099-K tax documents. */
		filer?: Credit1099Filer;

		/**
		 * Amount of fishing boat proceeds from payer.
		 * Type: double
		 */
		fishing_boat_proceeds?: number | null;

		/** Form 1099 Type */
		form_1099_type?: Credit1099Form_1099_type | null;

		/**
		 * Gross amount reported.
		 * Type: double
		 */
		gross_amount?: number | null;

		/**
		 * Amount of gross proceeds paid to an attorney by payer.
		 * Type: double
		 */
		gross_proceeds_paid_to_an_attorney?: number | null;

		/**
		 * Amount reported for January.
		 * Type: double
		 */
		january_amount?: number | null;

		/**
		 * Amount reported for July.
		 * Type: double
		 */
		july_amount?: number | null;

		/**
		 * Amount reported for June.
		 * Type: double
		 */
		june_amount?: number | null;

		/**
		 * Amount reported for March.
		 * Type: double
		 */
		march_amount?: number | null;

		/**
		 * Amount reported for May.
		 * Type: double
		 */
		may_amount?: number | null;

		/**
		 * Amount of medical and healthcare payments from payer.
		 * Type: double
		 */
		medical_and_healthcare_payments?: number | null;

		/** Merchant category of filer. */
		merchant_category_code?: string | null;

		/**
		 * Amount of nonemployee compensation from payer.
		 * Type: double
		 */
		nonemployee_compensation?: number | null;

		/**
		 * Amount reported for November.
		 * Type: double
		 */
		november_amount?: number | null;

		/** Number of payment transactions made. */
		number_of_payment_transactions?: string | null;

		/**
		 * Amount reported for October.
		 * Type: double
		 */
		october_amount?: number | null;

		/**
		 * Amount in other income by payer.
		 * Type: double
		 */
		other_income?: number | null;

		/** An object representing a payer used by 1099-MISC tax documents. */
		payer?: Credit1099Payer;

		/** Whether or not payer made direct sales over $5000 of consumer products. */
		payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer?: string | null;

		/** Primary state ID. */
		payer_state_number?: string | null;

		/** Secondary state ID. */
		payer_state_number_lower?: string | null;

		/** Primary state of business. */
		primary_state?: string | null;

		/** Primary state ID. */
		primary_state_id?: string | null;

		/**
		 * State income tax reported for primary state.
		 * Type: double
		 */
		primary_state_income_tax?: number | null;

		/** Name of the PSE (Payment Settlement Entity). */
		pse_name?: string | null;

		/** Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity). */
		pse_telephone_number?: string | null;

		/** An object representing a recipient used in both 1099-K and 1099-MISC tax documents. */
		recipient?: Credit1099Recipient;

		/**
		 * Amount in rent by payer.
		 * Type: double
		 */
		rents?: number | null;

		/**
		 * Amount in royalties by payer.
		 * Type: double
		 */
		royalties?: number | null;

		/** Secondary state of business. */
		secondary_state?: string | null;

		/** Secondary state ID. */
		secondary_state_id?: string | null;

		/**
		 * State income tax reported for secondary state.
		 * Type: double
		 */
		secondary_state_income_tax?: number | null;

		/**
		 * Amount of 409A deferrals earned by payer.
		 * Type: double
		 */
		section_409a_deferrals?: number | null;

		/**
		 * Amount of 409A income earned by payer.
		 * Type: double
		 */
		section_409a_income?: number | null;

		/**
		 * Amount reported for September.
		 * Type: double
		 */
		september_amount?: number | null;

		/**
		 * State income reported for primary state.
		 * Type: double
		 */
		state_income?: number | null;

		/**
		 * State income reported for secondary state.
		 * Type: double
		 */
		state_income_lower?: number | null;

		/**
		 * Amount of state tax withheld of payer for primary state.
		 * Type: double
		 */
		state_tax_withheld?: number | null;

		/**
		 * Amount of state tax withheld of payer for secondary state.
		 * Type: double
		 */
		state_tax_withheld_lower?: number | null;

		/**
		 * Amount of substitute payments made by payer.
		 * Type: double
		 */
		substitute_payments_in_lieu_of_dividends_or_interest?: number | null;

		/** Tax year of the tax form. */
		tax_year?: string | null;

		/** One of the values will be provided Payment card Third party network */
		transactions_reported?: string | null;
	}

	/** An object representing an end user's 1099 tax form */
	export interface Credit1099FormProperties {

		/**
		 * Amount reported for April.
		 * Type: double
		 */
		april_amount: FormControl<number | null | undefined>,

		/**
		 * Amount reported for August.
		 * Type: double
		 */
		august_amount: FormControl<number | null | undefined>,

		/**
		 * Amount in card not present transactions.
		 * Type: double
		 */
		card_not_present_transaction: FormControl<number | null | undefined>,

		/**
		 * Amount of crop insurance proceeds.
		 * Type: double
		 */
		crop_insurance_proceeds: FormControl<number | null | undefined>,

		/**
		 * Amount reported for December.
		 * Type: double
		 */
		december_amount: FormControl<number | null | undefined>,

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		document_id: FormControl<string | null | undefined>,

		/**
		 * Amount of golden parachute payments made by payer.
		 * Type: double
		 */
		excess_golden_parachute_payments: FormControl<number | null | undefined>,

		/**
		 * Amount reported for February.
		 * Type: double
		 */
		february_amount: FormControl<number | null | undefined>,

		/**
		 * Amount of federal income tax withheld from payer.
		 * Type: double
		 */
		federal_income_tax_withheld: FormControl<number | null | undefined>,

		/**
		 * Amount of fishing boat proceeds from payer.
		 * Type: double
		 */
		fishing_boat_proceeds: FormControl<number | null | undefined>,

		/** Form 1099 Type */
		form_1099_type: FormControl<Credit1099Form_1099_type | null | undefined>,

		/**
		 * Gross amount reported.
		 * Type: double
		 */
		gross_amount: FormControl<number | null | undefined>,

		/**
		 * Amount of gross proceeds paid to an attorney by payer.
		 * Type: double
		 */
		gross_proceeds_paid_to_an_attorney: FormControl<number | null | undefined>,

		/**
		 * Amount reported for January.
		 * Type: double
		 */
		january_amount: FormControl<number | null | undefined>,

		/**
		 * Amount reported for July.
		 * Type: double
		 */
		july_amount: FormControl<number | null | undefined>,

		/**
		 * Amount reported for June.
		 * Type: double
		 */
		june_amount: FormControl<number | null | undefined>,

		/**
		 * Amount reported for March.
		 * Type: double
		 */
		march_amount: FormControl<number | null | undefined>,

		/**
		 * Amount reported for May.
		 * Type: double
		 */
		may_amount: FormControl<number | null | undefined>,

		/**
		 * Amount of medical and healthcare payments from payer.
		 * Type: double
		 */
		medical_and_healthcare_payments: FormControl<number | null | undefined>,

		/** Merchant category of filer. */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * Amount of nonemployee compensation from payer.
		 * Type: double
		 */
		nonemployee_compensation: FormControl<number | null | undefined>,

		/**
		 * Amount reported for November.
		 * Type: double
		 */
		november_amount: FormControl<number | null | undefined>,

		/** Number of payment transactions made. */
		number_of_payment_transactions: FormControl<string | null | undefined>,

		/**
		 * Amount reported for October.
		 * Type: double
		 */
		october_amount: FormControl<number | null | undefined>,

		/**
		 * Amount in other income by payer.
		 * Type: double
		 */
		other_income: FormControl<number | null | undefined>,

		/** Whether or not payer made direct sales over $5000 of consumer products. */
		payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer: FormControl<string | null | undefined>,

		/** Primary state ID. */
		payer_state_number: FormControl<string | null | undefined>,

		/** Secondary state ID. */
		payer_state_number_lower: FormControl<string | null | undefined>,

		/** Primary state of business. */
		primary_state: FormControl<string | null | undefined>,

		/** Primary state ID. */
		primary_state_id: FormControl<string | null | undefined>,

		/**
		 * State income tax reported for primary state.
		 * Type: double
		 */
		primary_state_income_tax: FormControl<number | null | undefined>,

		/** Name of the PSE (Payment Settlement Entity). */
		pse_name: FormControl<string | null | undefined>,

		/** Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity). */
		pse_telephone_number: FormControl<string | null | undefined>,

		/**
		 * Amount in rent by payer.
		 * Type: double
		 */
		rents: FormControl<number | null | undefined>,

		/**
		 * Amount in royalties by payer.
		 * Type: double
		 */
		royalties: FormControl<number | null | undefined>,

		/** Secondary state of business. */
		secondary_state: FormControl<string | null | undefined>,

		/** Secondary state ID. */
		secondary_state_id: FormControl<string | null | undefined>,

		/**
		 * State income tax reported for secondary state.
		 * Type: double
		 */
		secondary_state_income_tax: FormControl<number | null | undefined>,

		/**
		 * Amount of 409A deferrals earned by payer.
		 * Type: double
		 */
		section_409a_deferrals: FormControl<number | null | undefined>,

		/**
		 * Amount of 409A income earned by payer.
		 * Type: double
		 */
		section_409a_income: FormControl<number | null | undefined>,

		/**
		 * Amount reported for September.
		 * Type: double
		 */
		september_amount: FormControl<number | null | undefined>,

		/**
		 * State income reported for primary state.
		 * Type: double
		 */
		state_income: FormControl<number | null | undefined>,

		/**
		 * State income reported for secondary state.
		 * Type: double
		 */
		state_income_lower: FormControl<number | null | undefined>,

		/**
		 * Amount of state tax withheld of payer for primary state.
		 * Type: double
		 */
		state_tax_withheld: FormControl<number | null | undefined>,

		/**
		 * Amount of state tax withheld of payer for secondary state.
		 * Type: double
		 */
		state_tax_withheld_lower: FormControl<number | null | undefined>,

		/**
		 * Amount of substitute payments made by payer.
		 * Type: double
		 */
		substitute_payments_in_lieu_of_dividends_or_interest: FormControl<number | null | undefined>,

		/** Tax year of the tax form. */
		tax_year: FormControl<string | null | undefined>,

		/** One of the values will be provided Payment card Third party network */
		transactions_reported: FormControl<string | null | undefined>,
	}
	export function CreateCredit1099FormGroup() {
		return new FormGroup<Credit1099FormProperties>({
			april_amount: new FormControl<number | null | undefined>(undefined),
			august_amount: new FormControl<number | null | undefined>(undefined),
			card_not_present_transaction: new FormControl<number | null | undefined>(undefined),
			crop_insurance_proceeds: new FormControl<number | null | undefined>(undefined),
			december_amount: new FormControl<number | null | undefined>(undefined),
			document_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			excess_golden_parachute_payments: new FormControl<number | null | undefined>(undefined),
			february_amount: new FormControl<number | null | undefined>(undefined),
			federal_income_tax_withheld: new FormControl<number | null | undefined>(undefined),
			fishing_boat_proceeds: new FormControl<number | null | undefined>(undefined),
			form_1099_type: new FormControl<Credit1099Form_1099_type | null | undefined>(undefined),
			gross_amount: new FormControl<number | null | undefined>(undefined),
			gross_proceeds_paid_to_an_attorney: new FormControl<number | null | undefined>(undefined),
			january_amount: new FormControl<number | null | undefined>(undefined),
			july_amount: new FormControl<number | null | undefined>(undefined),
			june_amount: new FormControl<number | null | undefined>(undefined),
			march_amount: new FormControl<number | null | undefined>(undefined),
			may_amount: new FormControl<number | null | undefined>(undefined),
			medical_and_healthcare_payments: new FormControl<number | null | undefined>(undefined),
			merchant_category_code: new FormControl<string | null | undefined>(undefined),
			nonemployee_compensation: new FormControl<number | null | undefined>(undefined),
			november_amount: new FormControl<number | null | undefined>(undefined),
			number_of_payment_transactions: new FormControl<string | null | undefined>(undefined),
			october_amount: new FormControl<number | null | undefined>(undefined),
			other_income: new FormControl<number | null | undefined>(undefined),
			payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer: new FormControl<string | null | undefined>(undefined),
			payer_state_number: new FormControl<string | null | undefined>(undefined),
			payer_state_number_lower: new FormControl<string | null | undefined>(undefined),
			primary_state: new FormControl<string | null | undefined>(undefined),
			primary_state_id: new FormControl<string | null | undefined>(undefined),
			primary_state_income_tax: new FormControl<number | null | undefined>(undefined),
			pse_name: new FormControl<string | null | undefined>(undefined),
			pse_telephone_number: new FormControl<string | null | undefined>(undefined),
			rents: new FormControl<number | null | undefined>(undefined),
			royalties: new FormControl<number | null | undefined>(undefined),
			secondary_state: new FormControl<string | null | undefined>(undefined),
			secondary_state_id: new FormControl<string | null | undefined>(undefined),
			secondary_state_income_tax: new FormControl<number | null | undefined>(undefined),
			section_409a_deferrals: new FormControl<number | null | undefined>(undefined),
			section_409a_income: new FormControl<number | null | undefined>(undefined),
			september_amount: new FormControl<number | null | undefined>(undefined),
			state_income: new FormControl<number | null | undefined>(undefined),
			state_income_lower: new FormControl<number | null | undefined>(undefined),
			state_tax_withheld: new FormControl<number | null | undefined>(undefined),
			state_tax_withheld_lower: new FormControl<number | null | undefined>(undefined),
			substitute_payments_in_lieu_of_dividends_or_interest: new FormControl<number | null | undefined>(undefined),
			tax_year: new FormControl<string | null | undefined>(undefined),
			transactions_reported: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Object representing metadata pertaining to the document. */
	export interface CreditDocumentMetadata {

		/**
		 * The type of document.
		 * `PAYSTUB`: A paystub.
		 * `BANK_STATEMENT`: A bank statement.
		 * `US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
		 * `US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
		 * `US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
		 * `US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.
		 * `GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
		 * `PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.
		 * `NONE`: Used to indicate that there is no underlying document for the data.
		 * `UNKNOWN`: Document type could not be determined.
		 * Required
		 */
		document_type: string;

		/**
		 * Signed URL to retrieve the underlying file.
		 * Required
		 */
		download_url: string;

		/**
		 * The name of the document.
		 * Required
		 */
		name: string;

		/**
		 * The processing status of the document.
		 * Required
		 */
		status: string;
	}

	/** Object representing metadata pertaining to the document. */
	export interface CreditDocumentMetadataFormProperties {

		/**
		 * The type of document.
		 * `PAYSTUB`: A paystub.
		 * `BANK_STATEMENT`: A bank statement.
		 * `US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
		 * `US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
		 * `US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
		 * `US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.
		 * `GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
		 * `PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.
		 * `NONE`: Used to indicate that there is no underlying document for the data.
		 * `UNKNOWN`: Document type could not be determined.
		 * Required
		 */
		document_type: FormControl<string | null | undefined>,

		/**
		 * Signed URL to retrieve the underlying file.
		 * Required
		 */
		download_url: FormControl<string | null | undefined>,

		/**
		 * The name of the document.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The processing status of the document.
		 * Required
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateCreditDocumentMetadataFormGroup() {
		return new FormGroup<CreditDocumentMetadataFormProperties>({
			document_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing a filer used by 1099-K tax documents. */
	export interface Credit1099Filer {

		/** Address on the pay stub. */
		address?: CreditPayStubAddress;

		/** Name of filer. */
		name?: string | null;

		/** Tax identification number of filer. */
		tin?: string | null;

		/** One of the following values will be provided: Payment Settlement Entity (PSE), Electronic Payment Facilitator (EPF), Other Third Party */
		type?: string | null;
	}

	/** An object representing a filer used by 1099-K tax documents. */
	export interface Credit1099FilerFormProperties {

		/** Name of filer. */
		name: FormControl<string | null | undefined>,

		/** Tax identification number of filer. */
		tin: FormControl<string | null | undefined>,

		/** One of the following values will be provided: Payment Settlement Entity (PSE), Electronic Payment Facilitator (EPF), Other Third Party */
		type: FormControl<string | null | undefined>,
	}
	export function CreateCredit1099FilerFormGroup() {
		return new FormGroup<Credit1099FilerFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			tin: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Address on the pay stub. */
	export interface CreditPayStubAddress {

		/**
		 * The full city name.
		 * Required
		 */
		city: string;

		/**
		 * The ISO 3166-1 alpha-2 country code.
		 * Required
		 */
		country: string;

		/**
		 * The postal code of the address.
		 * Required
		 */
		postal_code: string;

		/**
		 * The region or state.
		 * Example: `"NC"`
		 * Required
		 */
		region: string;

		/**
		 * The full street address.
		 * Required
		 */
		street: string;
	}

	/** Address on the pay stub. */
	export interface CreditPayStubAddressFormProperties {

		/**
		 * The full city name.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166-1 alpha-2 country code.
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code of the address.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state.
		 * Example: `"NC"`
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address.
		 * Required
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayStubAddressFormGroup() {
		return new FormGroup<CreditPayStubAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Credit1099Form_1099_type { FORM_1099_TYPE_UNKNOWN = 'FORM_1099_TYPE_UNKNOWN', FORM_1099_TYPE_MISC = 'FORM_1099_TYPE_MISC', FORM_1099_TYPE_K = 'FORM_1099_TYPE_K' }


	/** An object representing a payer used by 1099-MISC tax documents. */
	export interface Credit1099Payer {

		/** Address on the pay stub. */
		address?: CreditPayStubAddress;

		/** Name of payer. */
		name?: string | null;

		/** Telephone number of payer. */
		telephone_number?: string | null;

		/** Tax identification number of payer. */
		tin?: string | null;
	}

	/** An object representing a payer used by 1099-MISC tax documents. */
	export interface Credit1099PayerFormProperties {

		/** Name of payer. */
		name: FormControl<string | null | undefined>,

		/** Telephone number of payer. */
		telephone_number: FormControl<string | null | undefined>,

		/** Tax identification number of payer. */
		tin: FormControl<string | null | undefined>,
	}
	export function CreateCredit1099PayerFormGroup() {
		return new FormGroup<Credit1099PayerFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			telephone_number: new FormControl<string | null | undefined>(undefined),
			tin: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An object representing a recipient used in both 1099-K and 1099-MISC tax documents. */
	export interface Credit1099Recipient {

		/** Account number number of recipient. */
		account_number?: string | null;

		/** Address on the pay stub. */
		address?: CreditPayStubAddress;

		/** Checked if FACTA is a filing requirement. */
		facta_filing_requirement?: string | null;

		/** Name of recipient. */
		name?: string | null;

		/** Checked if 2nd TIN exists. */
		second_tin_exists?: string | null;

		/** Tax identification number of recipient. */
		tin?: string | null;
	}

	/** An object representing a recipient used in both 1099-K and 1099-MISC tax documents. */
	export interface Credit1099RecipientFormProperties {

		/** Account number number of recipient. */
		account_number: FormControl<string | null | undefined>,

		/** Checked if FACTA is a filing requirement. */
		facta_filing_requirement: FormControl<string | null | undefined>,

		/** Name of recipient. */
		name: FormControl<string | null | undefined>,

		/** Checked if 2nd TIN exists. */
		second_tin_exists: FormControl<string | null | undefined>,

		/** Tax identification number of recipient. */
		tin: FormControl<string | null | undefined>,
	}
	export function CreateCredit1099RecipientFormGroup() {
		return new FormGroup<Credit1099RecipientFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined),
			facta_filing_requirement: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			second_tin_exists: new FormControl<string | null | undefined>(undefined),
			tin: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities. */
	export interface CreditAccount {

		/**
		 * Bank-issued credit card
		 * Required
		 */
		'credit card': string;

		/**
		 * PayPal-issued credit card
		 * Required
		 */
		paypal: string;
	}

	/** A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities. */
	export interface CreditAccountFormProperties {

		/**
		 * Bank-issued credit card
		 * Required
		 */
		'credit card': FormControl<string | null | undefined>,

		/**
		 * PayPal-issued credit card
		 * Required
		 */
		paypal: FormControl<string | null | undefined>,
	}
	export function CreateCreditAccountFormGroup() {
		return new FormGroup<CreditAccountFormProperties>({
			'credit card': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			paypal: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** This contains an amount, denominated in the currency specified by either `iso_currency_code` or `unofficial_currency_code` */
	export interface CreditAmountWithCurrency {

		/**
		 * Value of amount with up to 2 decimal places.
		 * Type: double
		 */
		amount?: number | null;

		/** The ISO 4217 currency code of the amount or balance. */
		iso_currency_code?: string | null;

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 */
		unofficial_currency_code?: string | null;
	}

	/** This contains an amount, denominated in the currency specified by either `iso_currency_code` or `unofficial_currency_code` */
	export interface CreditAmountWithCurrencyFormProperties {

		/**
		 * Value of amount with up to 2 decimal places.
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** The ISO 4217 currency code of the amount or balance. */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateCreditAmountWithCurrencyFormGroup() {
		return new FormGroup<CreditAmountWithCurrencyFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditAuditCopyTokenCreateRequest defines the request schema for `/credit/audit_copy_token/create` */
	export interface CreditAuditCopyTokenCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * List of report tokens; can include at most one VOA/standard Asset Report tokens and one VOE Asset Report Token.
		 * Required
		 */
		report_tokens: Array<string>;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** CreditAuditCopyTokenCreateRequest defines the request schema for `/credit/audit_copy_token/create` */
	export interface CreditAuditCopyTokenCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateCreditAuditCopyTokenCreateRequestFormGroup() {
		return new FormGroup<CreditAuditCopyTokenCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditAuditCopyTokenCreateResponse defines the response schema for `/credit/audit_copy_token/get` */
	export interface CreditAuditCopyTokenCreateResponse {

		/**
		 * A token that can be shared with a third party auditor, which allows them to fetch the Asset Reports attached to the token. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditAuditCopyTokenCreateResponse defines the response schema for `/credit/audit_copy_token/get` */
	export interface CreditAuditCopyTokenCreateResponseFormProperties {

		/**
		 * A token that can be shared with a third party auditor, which allows them to fetch the Asset Reports attached to the token. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditAuditCopyTokenCreateResponseFormGroup() {
		return new FormGroup<CreditAuditCopyTokenCreateResponseFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditAuditCopyTokenRemoveRequest defines the request schema for `/credit/audit_copy_token/remove` */
	export interface CreditAuditCopyTokenRemoveRequest {

		/**
		 * The `audit_copy_token` granting access to the Audit Copy you would like to revoke.
		 * Required
		 */
		audit_copy_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** CreditAuditCopyTokenRemoveRequest defines the request schema for `/credit/audit_copy_token/remove` */
	export interface CreditAuditCopyTokenRemoveRequestFormProperties {

		/**
		 * The `audit_copy_token` granting access to the Audit Copy you would like to revoke.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateCreditAuditCopyTokenRemoveRequestFormGroup() {
		return new FormGroup<CreditAuditCopyTokenRemoveRequestFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditAuditCopyTokenRemoveResponse defines the response schema for `/credit/audit_copy_token/remove` */
	export interface CreditAuditCopyTokenRemoveResponse {

		/**
		 * `true` if the Audit Copy was successfully removed.
		 * Required
		 */
		removed: boolean;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditAuditCopyTokenRemoveResponse defines the response schema for `/credit/audit_copy_token/remove` */
	export interface CreditAuditCopyTokenRemoveResponseFormProperties {

		/**
		 * `true` if the Audit Copy was successfully removed.
		 * Required
		 */
		removed: FormControl<boolean | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditAuditCopyTokenRemoveResponseFormGroup() {
		return new FormGroup<CreditAuditCopyTokenRemoveResponseFormProperties>({
			removed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditAuditCopyTokenUpdateRequest defines the request schema for `/credit/audit_copy_token/update` */
	export interface CreditAuditCopyTokenUpdateRequest {

		/**
		 * The `audit_copy_token` you would like to update.
		 * Required
		 */
		audit_copy_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Array of tokens which the specified Audit Copy Token will be updated with. The types of token supported are asset report token and employment report token. There can be at most 1 of each token type in the array.
		 * Required
		 */
		report_tokens: Array<string>;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** CreditAuditCopyTokenUpdateRequest defines the request schema for `/credit/audit_copy_token/update` */
	export interface CreditAuditCopyTokenUpdateRequestFormProperties {

		/**
		 * The `audit_copy_token` you would like to update.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateCreditAuditCopyTokenUpdateRequestFormGroup() {
		return new FormGroup<CreditAuditCopyTokenUpdateRequestFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditAuditCopyTokenUpdateResponse defines the response schema for `/credit/audit_copy_token/update` */
	export interface CreditAuditCopyTokenUpdateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * `true` if the Audit Copy Token was successfully updated.
		 * Required
		 */
		updated: boolean;
	}

	/** CreditAuditCopyTokenUpdateResponse defines the response schema for `/credit/audit_copy_token/update` */
	export interface CreditAuditCopyTokenUpdateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * `true` if the Audit Copy Token was successfully updated.
		 * Required
		 */
		updated: FormControl<boolean | null | undefined>,
	}
	export function CreateCreditAuditCopyTokenUpdateResponseFormGroup() {
		return new FormGroup<CreditAuditCopyTokenUpdateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object containing employer data. */
	export interface CreditBankEmployer {

		/**
		 * Name of the employer.
		 * Required
		 */
		name: string;
	}

	/** Object containing employer data. */
	export interface CreditBankEmployerFormProperties {

		/**
		 * Name of the employer.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankEmployerFormGroup() {
		return new FormGroup<CreditBankEmployerFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Detailed information for the bank employment. */
	export interface CreditBankEmployment {

		/**
		 * Plaid's unique identifier for the account.
		 * Required
		 */
		account_id: string;

		/**
		 * A unique identifier for the bank employment.
		 * Required
		 */
		bank_employment_id: string;

		/**
		 * The date of the earliest deposit from this employer from within the period of the days requested.
		 * Required
		 * Type: DateOnly
		 */
		earliest_deposit_date: Date;

		/**
		 * Object containing employer data.
		 * Required
		 */
		employer: CreditBankEmployer;

		/**
		 * The date of the most recent deposit from this employer.
		 * Required
		 * Type: DateOnly
		 */
		latest_deposit_date: Date;
	}

	/** Detailed information for the bank employment. */
	export interface CreditBankEmploymentFormProperties {

		/**
		 * Plaid's unique identifier for the account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the bank employment.
		 * Required
		 */
		bank_employment_id: FormControl<string | null | undefined>,

		/**
		 * The date of the earliest deposit from this employer from within the period of the days requested.
		 * Required
		 * Type: DateOnly
		 */
		earliest_deposit_date: FormControl<Date | null | undefined>,

		/**
		 * The date of the most recent deposit from this employer.
		 * Required
		 * Type: DateOnly
		 */
		latest_deposit_date: FormControl<Date | null | undefined>,
	}
	export function CreateCreditBankEmploymentFormGroup() {
		return new FormGroup<CreditBankEmploymentFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bank_employment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			earliest_deposit_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			latest_deposit_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditBankEmploymentGetRequest defines the request schema for `/beta/credit/v1/bank_employment/get`. */
	export interface CreditBankEmploymentGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: string;
	}

	/** CreditBankEmploymentGetRequest defines the request schema for `/beta/credit/v1/bank_employment/get`. */
	export interface CreditBankEmploymentGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankEmploymentGetRequestFormGroup() {
		return new FormGroup<CreditBankEmploymentGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditBankEmploymentGetResponse defines the response schema for `/beta/credit/v1/bank_employment/get`. */
	export interface CreditBankEmploymentGetResponse {

		/**
		 * Bank Employment data. Each entry in the array will be a distinct bank employment report.
		 * Required
		 */
		bank_employment_reports: Array<CreditBankEmploymentReport>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditBankEmploymentGetResponse defines the response schema for `/beta/credit/v1/bank_employment/get`. */
	export interface CreditBankEmploymentGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankEmploymentGetResponseFormGroup() {
		return new FormGroup<CreditBankEmploymentGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The report of the Bank Employment data for an end user. */
	export interface CreditBankEmploymentReport {

		/**
		 * The unique identifier associated with the Bank Employment Report.
		 * Required
		 */
		bank_employment_report_id: string;

		/**
		 * The number of days requested by the customer for the Bank Employment Report.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested: number;

		/**
		 * The time when the Bank Employment Report was generated, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
		 * Required
		 */
		generated_time: Date;

		/**
		 * The list of Items in the report along with the associated metadata about the Item.
		 * Required
		 */
		items: Array<CreditBankEmploymentItem>;

		/**
		 * If data from the Bank Employment report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete.
		 * Required
		 */
		warnings: Array<CreditBankEmploymentWarning>;
	}

	/** The report of the Bank Employment data for an end user. */
	export interface CreditBankEmploymentReportFormProperties {

		/**
		 * The unique identifier associated with the Bank Employment Report.
		 * Required
		 */
		bank_employment_report_id: FormControl<string | null | undefined>,

		/**
		 * The number of days requested by the customer for the Bank Employment Report.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested: FormControl<number | null | undefined>,

		/**
		 * The time when the Bank Employment Report was generated, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
		 * Required
		 */
		generated_time: FormControl<Date | null | undefined>,
	}
	export function CreateCreditBankEmploymentReportFormGroup() {
		return new FormGroup<CreditBankEmploymentReportFormProperties>({
			bank_employment_report_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			days_requested: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			generated_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The details and metadata for an end user's Item. */
	export interface CreditBankEmploymentItem {

		/**
		 * The Item's accounts that have Bank Employment data.
		 * Required
		 */
		bank_employment_accounts: Array<CreditBankIncomeAccount>;

		/**
		 * The bank employment information for this Item. Each entry in the array is a different employer found.
		 * Required
		 */
		bank_employments: Array<CreditBankEmployment>;

		/**
		 * The unique identifier of the institution associated with the Item.
		 * Required
		 */
		institution_id: string;

		/**
		 * The name of the institution associated with the Item.
		 * Required
		 */
		institution_name: string;

		/**
		 * The unique identifier for the Item.
		 * Required
		 */
		item_id: string;

		/**
		 * The time when this Item's data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
		 * Required
		 */
		last_updated_time: Date;
	}

	/** The details and metadata for an end user's Item. */
	export interface CreditBankEmploymentItemFormProperties {

		/**
		 * The unique identifier of the institution associated with the Item.
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/**
		 * The name of the institution associated with the Item.
		 * Required
		 */
		institution_name: FormControl<string | null | undefined>,

		/**
		 * The unique identifier for the Item.
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The time when this Item's data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
		 * Required
		 */
		last_updated_time: FormControl<Date | null | undefined>,
	}
	export function CreateCreditBankEmploymentItemFormGroup() {
		return new FormGroup<CreditBankEmploymentItemFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_updated_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The Item's bank accounts that have the selected data. */
	export interface CreditBankIncomeAccount {

		/**
		 * Plaid's unique identifier for the account.
		 * Required
		 */
		account_id: string;

		/**
		 * The last 2-4 alphanumeric characters of an account's official account number.
		 * Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
		 * Required
		 */
		mask: string;

		/**
		 * The name of the bank account.
		 * Required
		 */
		name: string;

		/**
		 * The official name of the bank account.
		 * Required
		 */
		official_name: string;

		/**
		 * Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array.
		 * Required
		 */
		owners: Array<Owner>;

		/**
		 * Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
		 * Required
		 */
		subtype: DepositoryAccountSubtype;

		/**
		 * The account type. This will always be `depository`.
		 * Required
		 */
		type: CreditBankIncomeAccountType;
	}

	/** The Item's bank accounts that have the selected data. */
	export interface CreditBankIncomeAccountFormProperties {

		/**
		 * Plaid's unique identifier for the account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The last 2-4 alphanumeric characters of an account's official account number.
		 * Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
		 * Required
		 */
		mask: FormControl<string | null | undefined>,

		/**
		 * The name of the bank account.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The official name of the bank account.
		 * Required
		 */
		official_name: FormControl<string | null | undefined>,

		/**
		 * Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
		 * Required
		 */
		subtype: FormControl<DepositoryAccountSubtype | null | undefined>,

		/**
		 * The account type. This will always be `depository`.
		 * Required
		 */
		type: FormControl<CreditBankIncomeAccountType | null | undefined>,
	}
	export function CreateCreditBankIncomeAccountFormGroup() {
		return new FormGroup<CreditBankIncomeAccountFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mask: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			official_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subtype: new FormControl<DepositoryAccountSubtype | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<CreditBankIncomeAccountType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CreditBankIncomeAccountType { depository = 'depository' }


	/** The warning associated with the data that was unavailable for the Bank Employment Report. */
	export interface CreditBankEmploymentWarning {

		/**
		 * An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
		 * Required
		 */
		cause: CreditBankIncomeCause;

		/**
		 * The warning code identifies a specific kind of warning.
		 * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
		 * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
		 * `ITEM_UNAPPROVED`: User exited flow before giving permission to share data for the Item
		 * `REPORT_DELETED`: Report deleted due to customer or consumer request
		 * `DATA_UNAVAILABLE`: No relevant data was found for the Item
		 * Required
		 */
		warning_code: CreditBankEmploymentWarningWarning_code;

		/**
		 * The warning type which will always be `BANK_EMPLOYMENT_WARNING`.
		 * Required
		 */
		warning_type: CreditBankEmploymentWarningWarning_type;
	}

	/** The warning associated with the data that was unavailable for the Bank Employment Report. */
	export interface CreditBankEmploymentWarningFormProperties {

		/**
		 * The warning code identifies a specific kind of warning.
		 * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
		 * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
		 * `ITEM_UNAPPROVED`: User exited flow before giving permission to share data for the Item
		 * `REPORT_DELETED`: Report deleted due to customer or consumer request
		 * `DATA_UNAVAILABLE`: No relevant data was found for the Item
		 * Required
		 */
		warning_code: FormControl<CreditBankEmploymentWarningWarning_code | null | undefined>,

		/**
		 * The warning type which will always be `BANK_EMPLOYMENT_WARNING`.
		 * Required
		 */
		warning_type: FormControl<CreditBankEmploymentWarningWarning_type | null | undefined>,
	}
	export function CreateCreditBankEmploymentWarningFormGroup() {
		return new FormGroup<CreditBankEmploymentWarningFormProperties>({
			warning_code: new FormControl<CreditBankEmploymentWarningWarning_code | null | undefined>(undefined, [Validators.required]),
			warning_type: new FormControl<CreditBankEmploymentWarningWarning_type | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
	export interface CreditBankIncomeCause {

		/**
		 * A user-friendly representation of the error code. null if the error is not related to user action.
		 * This may change over time and is not safe for programmatic use.
		 * Required
		 */
		display_message: string;

		/**
		 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred.
		 * Required
		 */
		error_code: string;

		/**
		 * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
		 * Required
		 */
		error_message: string;

		/**
		 * A broad categorization of the error. Safe for programmatic use.
		 * Required
		 */
		error_type: CreditBankIncomeCauseError_type;

		/**
		 * The `item_id` of the Item associated with this warning.
		 * Required
		 */
		item_id: string;
	}

	/** An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
	export interface CreditBankIncomeCauseFormProperties {

		/**
		 * A user-friendly representation of the error code. null if the error is not related to user action.
		 * This may change over time and is not safe for programmatic use.
		 * Required
		 */
		display_message: FormControl<string | null | undefined>,

		/**
		 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred.
		 * Required
		 */
		error_code: FormControl<string | null | undefined>,

		/**
		 * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
		 * Required
		 */
		error_message: FormControl<string | null | undefined>,

		/**
		 * A broad categorization of the error. Safe for programmatic use.
		 * Required
		 */
		error_type: FormControl<CreditBankIncomeCauseError_type | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this warning.
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeCauseFormGroup() {
		return new FormGroup<CreditBankIncomeCauseFormProperties>({
			display_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error_type: new FormControl<CreditBankIncomeCauseError_type | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CreditBankIncomeCauseError_type { INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR', INSUFFICIENT_CREDENTIALS = 'INSUFFICIENT_CREDENTIALS', ITEM_LOCKED = 'ITEM_LOCKED', USER_SETUP_REQUIRED = 'USER_SETUP_REQUIRED', COUNTRY_NOT_SUPPORTED = 'COUNTRY_NOT_SUPPORTED', INSTITUTION_DOWN = 'INSTITUTION_DOWN', INSTITUTION_NO_LONGER_SUPPORTED = 'INSTITUTION_NO_LONGER_SUPPORTED', INSTITUTION_NOT_RESPONDING = 'INSTITUTION_NOT_RESPONDING', INVALID_CREDENTIALS = 'INVALID_CREDENTIALS', INVALID_MFA = 'INVALID_MFA', INVALID_SEND_METHOD = 'INVALID_SEND_METHOD', ITEM_LOGIN_REQUIRED = 'ITEM_LOGIN_REQUIRED', MFA_NOT_SUPPORTED = 'MFA_NOT_SUPPORTED', NO_ACCOUNTS = 'NO_ACCOUNTS', ITEM_NOT_SUPPORTED = 'ITEM_NOT_SUPPORTED', ACCESS_NOT_GRANTED = 'ACCESS_NOT_GRANTED' }

	export enum CreditBankEmploymentWarningWarning_code { IDENTITY_UNAVAILABLE = 'IDENTITY_UNAVAILABLE', TRANSACTIONS_UNAVAILABLE = 'TRANSACTIONS_UNAVAILABLE', ITEM_UNAPPROVED = 'ITEM_UNAPPROVED', REPORT_DELETED = 'REPORT_DELETED', DATA_UNAVAILABLE = 'DATA_UNAVAILABLE' }

	export enum CreditBankEmploymentWarningWarning_type { BANK_EMPLOYMENT_WARNING = 'BANK_EMPLOYMENT_WARNING' }


	/** The warning type which will always be `BANK_EMPLOYMENT_WARNING`. */
	export enum CreditBankEmploymentWarningType { BANK_EMPLOYMENT_WARNING = 'BANK_EMPLOYMENT_WARNING' }


	/** The report of the Bank Income data for an end user. */
	export interface CreditBankIncome {

		/** The unique identifier associated with the Bank Income Report. */
		bank_income_id?: string | null;

		/** Summary for bank income across all income sources and items (max history of 730 days). */
		bank_income_summary?: CreditBankIncomeSummary;

		/**
		 * The number of days requested by the customer for the Bank Income Report.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested?: number | null;

		/** The time when the Bank Income Report was generated. */
		generated_time?: Date | null;

		/** The list of Items in the report along with the associated metadata about the Item. */
		items?: Array<CreditBankIncomeItem>;

		/** If data from the Bank Income report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete. */
		warnings?: Array<CreditBankIncomeWarning>;
	}

	/** The report of the Bank Income data for an end user. */
	export interface CreditBankIncomeFormProperties {

		/** The unique identifier associated with the Bank Income Report. */
		bank_income_id: FormControl<string | null | undefined>,

		/**
		 * The number of days requested by the customer for the Bank Income Report.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested: FormControl<number | null | undefined>,

		/** The time when the Bank Income Report was generated. */
		generated_time: FormControl<Date | null | undefined>,
	}
	export function CreateCreditBankIncomeFormGroup() {
		return new FormGroup<CreditBankIncomeFormProperties>({
			bank_income_id: new FormControl<string | null | undefined>(undefined),
			days_requested: new FormControl<number | null | undefined>(undefined),
			generated_time: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Summary for bank income across all income sources and items (max history of 730 days). */
	export interface CreditBankIncomeSummary {

		/**
		 * The latest date in which all income sources identified by Plaid appear in the user's account.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date?: Date | null;
		historical_summary?: Array<CreditBankIncomeHistoricalSummary>;

		/**
		 * Number of income categories per end user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		income_categories_count?: number | null;

		/**
		 * Number of income sources per end user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		income_sources_count?: number | null;

		/**
		 * Number of income transactions per end user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		income_transactions_count?: number | null;

		/**
		 * The ISO 4217 currency code of the amount or balance.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
		 */
		iso_currency_code?: string | null;

		/**
		 * The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date?: Date | null;

		/**
		 * Total amount of earnings across all the income sources in the end user's Items for the days requested by the client.
		 * This may return an incorrect value if the summary includes income sources in multiple currencies.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
		 * Type: double
		 */
		total_amount?: number | null;

		/**
		 * Total amount of earnings across all the income sources in the end user's Items for the days requested by the client.
		 * This can contain multiple amounts, with each amount denominated in one unique currency.
		 */
		total_amounts?: Array<CreditAmountWithCurrency>;

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
		 */
		unofficial_currency_code?: string | null;
	}

	/** Summary for bank income across all income sources and items (max history of 730 days). */
	export interface CreditBankIncomeSummaryFormProperties {

		/**
		 * The latest date in which all income sources identified by Plaid appear in the user's account.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * Number of income categories per end user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		income_categories_count: FormControl<number | null | undefined>,

		/**
		 * Number of income sources per end user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		income_sources_count: FormControl<number | null | undefined>,

		/**
		 * Number of income transactions per end user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		income_transactions_count: FormControl<number | null | undefined>,

		/**
		 * The ISO 4217 currency code of the amount or balance.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,

		/**
		 * Total amount of earnings across all the income sources in the end user's Items for the days requested by the client.
		 * This may return an incorrect value if the summary includes income sources in multiple currencies.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
		 * Type: double
		 */
		total_amount: FormControl<number | null | undefined>,

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeSummaryFormGroup() {
		return new FormGroup<CreditBankIncomeSummaryFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined),
			income_categories_count: new FormControl<number | null | undefined>(undefined),
			income_sources_count: new FormControl<number | null | undefined>(undefined),
			income_transactions_count: new FormControl<number | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
			total_amount: new FormControl<number | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The end user's monthly summary for the income source(s). */
	export interface CreditBankIncomeHistoricalSummary {

		/**
		 * The end date of the period included in this monthly summary.
		 * This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date?: Date | null;

		/**
		 * The ISO 4217 currency code of the amount or balance.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
		 */
		iso_currency_code?: string | null;

		/**
		 * The start date of the period covered in this monthly summary.
		 * This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date?: Date | null;

		/**
		 * Total amount of earnings for the income source(s) of the user for the month in the summary.
		 * This may return an incorrect value if the summary includes income sources in multiple currencies.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
		 * Type: double
		 */
		total_amount?: number | null;

		/**
		 * Total amount of earnings for the income source(s) of the user for the month in the summary.
		 * This can contain multiple amounts, with each amount denominated in one unique currency.
		 */
		total_amounts?: Array<CreditAmountWithCurrency>;
		transactions?: Array<CreditBankIncomeTransaction>;

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
		 */
		unofficial_currency_code?: string | null;
	}

	/** The end user's monthly summary for the income source(s). */
	export interface CreditBankIncomeHistoricalSummaryFormProperties {

		/**
		 * The end date of the period included in this monthly summary.
		 * This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The ISO 4217 currency code of the amount or balance.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The start date of the period covered in this monthly summary.
		 * This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,

		/**
		 * Total amount of earnings for the income source(s) of the user for the month in the summary.
		 * This may return an incorrect value if the summary includes income sources in multiple currencies.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
		 * Type: double
		 */
		total_amount: FormControl<number | null | undefined>,

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeHistoricalSummaryFormGroup() {
		return new FormGroup<CreditBankIncomeHistoricalSummaryFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
			total_amount: new FormControl<number | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The transactions data for the end user's income source(s). */
	export interface CreditBankIncomeTransaction {

		/**
		 * The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`.
		 * Positive values when money moves out of the account; negative values when money moves in.
		 * For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
		 * Type: double
		 */
		amount?: number | null;

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number?: string | null;

		/**
		 * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted.
		 * Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		date?: Date | null;

		/** The ISO 4217 currency code of the amount or balance. */
		iso_currency_code?: string | null;

		/** The merchant name or transaction description. */
		name?: string | null;

		/** The string returned by the financial institution to describe the transaction. */
		original_description?: string | null;

		/**
		 * When true, identifies the transaction as pending or unsettled.
		 * Pending transaction details (name, type, amount, category ID) may change before they are settled.
		 */
		pending?: boolean | null;

		/** The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
		transaction_id?: string | null;

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 */
		unofficial_currency_code?: string | null;
	}

	/** The transactions data for the end user's income source(s). */
	export interface CreditBankIncomeTransactionFormProperties {

		/**
		 * The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`.
		 * Positive values when money moves out of the account; negative values when money moves in.
		 * For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number: FormControl<string | null | undefined>,

		/**
		 * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted.
		 * Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		date: FormControl<Date | null | undefined>,

		/** The ISO 4217 currency code of the amount or balance. */
		iso_currency_code: FormControl<string | null | undefined>,

		/** The merchant name or transaction description. */
		name: FormControl<string | null | undefined>,

		/** The string returned by the financial institution to describe the transaction. */
		original_description: FormControl<string | null | undefined>,

		/**
		 * When true, identifies the transaction as pending or unsettled.
		 * Pending transaction details (name, type, amount, category ID) may change before they are settled.
		 */
		pending: FormControl<boolean | null | undefined>,

		/** The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
		 * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeTransactionFormGroup() {
		return new FormGroup<CreditBankIncomeTransactionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			check_number: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<Date | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			original_description: new FormControl<string | null | undefined>(undefined),
			pending: new FormControl<boolean | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The details and metadata for an end user's Item. */
	export interface CreditBankIncomeItem {

		/** The Item's accounts that have Bank Income data. */
		bank_income_accounts?: Array<CreditBankIncomeAccount>;

		/** The income sources for this Item. Each entry in the array is a single income source. */
		bank_income_sources?: Array<CreditBankIncomeSource>;

		/** The unique identifier of the institution associated with the Item. */
		institution_id?: string | null;

		/** The name of the institution associated with the Item. */
		institution_name?: string | null;

		/** The unique identifier for the Item. */
		item_id?: string | null;

		/** The time when this Item's data was last retrieved from the financial institution. */
		last_updated_time?: Date | null;
	}

	/** The details and metadata for an end user's Item. */
	export interface CreditBankIncomeItemFormProperties {

		/** The unique identifier of the institution associated with the Item. */
		institution_id: FormControl<string | null | undefined>,

		/** The name of the institution associated with the Item. */
		institution_name: FormControl<string | null | undefined>,

		/** The unique identifier for the Item. */
		item_id: FormControl<string | null | undefined>,

		/** The time when this Item's data was last retrieved from the financial institution. */
		last_updated_time: FormControl<Date | null | undefined>,
	}
	export function CreateCreditBankIncomeItemFormGroup() {
		return new FormGroup<CreditBankIncomeItemFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined),
			institution_name: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			last_updated_time: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Detailed information for the income source. */
	export interface CreditBankIncomeSource {

		/** Plaid's unique identifier for the account. */
		account_id?: string | null;

		/**
		 * Maximum of all dates within the specific income sources in the userâ€™s bank account for days requested by the client.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date?: Date | null;
		historical_summary?: Array<CreditBankIncomeHistoricalSummary>;

		/** The income category. */
		income_category?: CreditBankIncomeSourceIncome_category | null;

		/** The most common name or original description for the underlying income transactions. */
		income_description?: string | null;

		/** A unique identifier for an income source. */
		income_source_id?: string | null;

		/** The income pay frequency. */
		pay_frequency?: CreditBankIncomeSourcePay_frequency | null;

		/**
		 * Minimum of all dates within the specific income sources in the user's bank account for days requested by the client.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date?: Date | null;

		/**
		 * Total amount of earnings in the userâ€™s bank account for the specific income source for days requested by the client.
		 * Type: double
		 */
		total_amount?: number | null;

		/**
		 * Number of transactions for the income source within the start and end date.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		transaction_count?: number | null;
	}

	/** Detailed information for the income source. */
	export interface CreditBankIncomeSourceFormProperties {

		/** Plaid's unique identifier for the account. */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Maximum of all dates within the specific income sources in the userâ€™s bank account for days requested by the client.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/** The income category. */
		income_category: FormControl<CreditBankIncomeSourceIncome_category | null | undefined>,

		/** The most common name or original description for the underlying income transactions. */
		income_description: FormControl<string | null | undefined>,

		/** A unique identifier for an income source. */
		income_source_id: FormControl<string | null | undefined>,

		/** The income pay frequency. */
		pay_frequency: FormControl<CreditBankIncomeSourcePay_frequency | null | undefined>,

		/**
		 * Minimum of all dates within the specific income sources in the user's bank account for days requested by the client.
		 * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,

		/**
		 * Total amount of earnings in the userâ€™s bank account for the specific income source for days requested by the client.
		 * Type: double
		 */
		total_amount: FormControl<number | null | undefined>,

		/**
		 * Number of transactions for the income source within the start and end date.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		transaction_count: FormControl<number | null | undefined>,
	}
	export function CreateCreditBankIncomeSourceFormGroup() {
		return new FormGroup<CreditBankIncomeSourceFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
			income_category: new FormControl<CreditBankIncomeSourceIncome_category | null | undefined>(undefined),
			income_description: new FormControl<string | null | undefined>(undefined),
			income_source_id: new FormControl<string | null | undefined>(undefined),
			pay_frequency: new FormControl<CreditBankIncomeSourcePay_frequency | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
			total_amount: new FormControl<number | null | undefined>(undefined),
			transaction_count: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum CreditBankIncomeSourceIncome_category { SALARY = 'SALARY', UNEMPLOYMENT = 'UNEMPLOYMENT', CASH = 'CASH', GIG_ECONOMY = 'GIG_ECONOMY', RENTAL = 'RENTAL', CHILD_SUPPORT = 'CHILD_SUPPORT', MILITARY = 'MILITARY', RETIREMENT = 'RETIREMENT', LONG_TERM_DISABILITY = 'LONG_TERM_DISABILITY', BANK_INTEREST = 'BANK_INTEREST', CASH_DEPOSIT = 'CASH_DEPOSIT', TRANSFER_FROM_APPLICATION = 'TRANSFER_FROM_APPLICATION', TAX_REFUND = 'TAX_REFUND', OTHER = 'OTHER' }

	export enum CreditBankIncomeSourcePay_frequency { WEEKLY = 'WEEKLY', BIWEEKLY = 'BIWEEKLY', SEMI_MONTHLY = 'SEMI_MONTHLY', MONTHLY = 'MONTHLY', DAILY = 'DAILY', UNKNOWN = 'UNKNOWN' }


	/** The warning associated with the data that was unavailable for the Bank Income Report. */
	export interface CreditBankIncomeWarning {

		/** An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
		cause?: CreditBankIncomeCause;

		/**
		 * The warning code identifies a specific kind of warning.
		 * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
		 * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
		 * `ITEM_UNAPPROVED`: User exited flow before giving permission to share data for the Item
		 * `REPORT_DELETED`: Report deleted due to customer or consumer request
		 * `DATA_UNAVAILABLE`: No relevant data was found for the Item
		 */
		warning_code?: CreditBankEmploymentWarningWarning_code | null;

		/** The warning type which will always be `BANK_INCOME_WARNING`. */
		warning_type?: CreditBankIncomeWarningWarning_type | null;
	}

	/** The warning associated with the data that was unavailable for the Bank Income Report. */
	export interface CreditBankIncomeWarningFormProperties {

		/**
		 * The warning code identifies a specific kind of warning.
		 * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
		 * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
		 * `ITEM_UNAPPROVED`: User exited flow before giving permission to share data for the Item
		 * `REPORT_DELETED`: Report deleted due to customer or consumer request
		 * `DATA_UNAVAILABLE`: No relevant data was found for the Item
		 */
		warning_code: FormControl<CreditBankEmploymentWarningWarning_code | null | undefined>,

		/** The warning type which will always be `BANK_INCOME_WARNING`. */
		warning_type: FormControl<CreditBankIncomeWarningWarning_type | null | undefined>,
	}
	export function CreateCreditBankIncomeWarningFormGroup() {
		return new FormGroup<CreditBankIncomeWarningFormProperties>({
			warning_code: new FormControl<CreditBankEmploymentWarningWarning_code | null | undefined>(undefined),
			warning_type: new FormControl<CreditBankIncomeWarningWarning_type | null | undefined>(undefined),
		});

	}

	export enum CreditBankIncomeWarningWarning_type { BANK_INCOME_WARNING = 'BANK_INCOME_WARNING' }


	/** The income category. */
	export enum CreditBankIncomeCategory { SALARY = 'SALARY', UNEMPLOYMENT = 'UNEMPLOYMENT', CASH = 'CASH', GIG_ECONOMY = 'GIG_ECONOMY', RENTAL = 'RENTAL', CHILD_SUPPORT = 'CHILD_SUPPORT', MILITARY = 'MILITARY', RETIREMENT = 'RETIREMENT', LONG_TERM_DISABILITY = 'LONG_TERM_DISABILITY', BANK_INTEREST = 'BANK_INTEREST', CASH_DEPOSIT = 'CASH_DEPOSIT', TRANSFER_FROM_APPLICATION = 'TRANSFER_FROM_APPLICATION', TAX_REFUND = 'TAX_REFUND', OTHER = 'OTHER' }


	/** A broad categorization of the error. Safe for programmatic use. */
	export enum CreditBankIncomeErrorType { INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR', INSUFFICIENT_CREDENTIALS = 'INSUFFICIENT_CREDENTIALS', ITEM_LOCKED = 'ITEM_LOCKED', USER_SETUP_REQUIRED = 'USER_SETUP_REQUIRED', COUNTRY_NOT_SUPPORTED = 'COUNTRY_NOT_SUPPORTED', INSTITUTION_DOWN = 'INSTITUTION_DOWN', INSTITUTION_NO_LONGER_SUPPORTED = 'INSTITUTION_NO_LONGER_SUPPORTED', INSTITUTION_NOT_RESPONDING = 'INSTITUTION_NOT_RESPONDING', INVALID_CREDENTIALS = 'INVALID_CREDENTIALS', INVALID_MFA = 'INVALID_MFA', INVALID_SEND_METHOD = 'INVALID_SEND_METHOD', ITEM_LOGIN_REQUIRED = 'ITEM_LOGIN_REQUIRED', MFA_NOT_SUPPORTED = 'MFA_NOT_SUPPORTED', NO_ACCOUNTS = 'NO_ACCOUNTS', ITEM_NOT_SUPPORTED = 'ITEM_NOT_SUPPORTED', ACCESS_NOT_GRANTED = 'ACCESS_NOT_GRANTED' }


	/** CreditBankIncomeGetRequest defines the request schema for `/credit/bank_income/get`. */
	export interface CreditBankIncomeGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object for `/credit/bank_income/get` request options. */
		options?: CreditBankIncomeGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user token associated with the User data is being requested for. */
		user_token?: string | null;
	}

	/** CreditBankIncomeGetRequest defines the request schema for `/credit/bank_income/get`. */
	export interface CreditBankIncomeGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user token associated with the User data is being requested for. */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeGetRequestFormGroup() {
		return new FormGroup<CreditBankIncomeGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object for `/credit/bank_income/get` request options. */
	export interface CreditBankIncomeGetRequestOptions {

		/**
		 * How many Bank Income Reports should be fetched. Multiple reports may be available if the report has been re-created or refreshed. If more than one report is available, the most recent reports will be returned first.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		count?: number | null;
	}

	/** An optional object for `/credit/bank_income/get` request options. */
	export interface CreditBankIncomeGetRequestOptionsFormProperties {

		/**
		 * How many Bank Income Reports should be fetched. Multiple reports may be available if the report has been re-created or refreshed. If more than one report is available, the most recent reports will be returned first.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		count: FormControl<number | null | undefined>,
	}
	export function CreateCreditBankIncomeGetRequestOptionsFormGroup() {
		return new FormGroup<CreditBankIncomeGetRequestOptionsFormProperties>({
			count: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** CreditBankIncomeGetResponse defines the response schema for `/credit/bank_income/get` */
	export interface CreditBankIncomeGetResponse {
		bank_income?: Array<CreditBankIncome>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditBankIncomeGetResponse defines the response schema for `/credit/bank_income/get` */
	export interface CreditBankIncomeGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeGetResponseFormGroup() {
		return new FormGroup<CreditBankIncomeGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditBankIncomePDFGetRequest defines the request schema for `/credit/bank_income/pdf/get` */
	export interface CreditBankIncomePDFGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: string;
	}

	/** CreditBankIncomePDFGetRequest defines the request schema for `/credit/bank_income/pdf/get` */
	export interface CreditBankIncomePDFGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomePDFGetRequestFormGroup() {
		return new FormGroup<CreditBankIncomePDFGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The income pay frequency. */
	export enum CreditBankIncomePayFrequency { WEEKLY = 'WEEKLY', BIWEEKLY = 'BIWEEKLY', SEMI_MONTHLY = 'SEMI_MONTHLY', MONTHLY = 'MONTHLY', DAILY = 'DAILY', UNKNOWN = 'UNKNOWN' }


	/** CreditBankIncomeRefreshRequest defines the request schema for `/credit/bank_income/refresh`. */
	export interface CreditBankIncomeRefreshRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object for `/credit/bank_income/refresh` request options. */
		options?: CreditBankIncomeRefreshRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: string;
	}

	/** CreditBankIncomeRefreshRequest defines the request schema for `/credit/bank_income/refresh`. */
	export interface CreditBankIncomeRefreshRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeRefreshRequestFormGroup() {
		return new FormGroup<CreditBankIncomeRefreshRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An optional object for `/credit/bank_income/refresh` request options. */
	export interface CreditBankIncomeRefreshRequestOptions {

		/**
		 * How many days of data to include in the refresh. If not specified, this will default to the days requested in the most recently generated bank income report for the user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested?: number | null;

		/** The URL where Plaid will send the bank income webhook. */
		webhook?: string | null;
	}

	/** An optional object for `/credit/bank_income/refresh` request options. */
	export interface CreditBankIncomeRefreshRequestOptionsFormProperties {

		/**
		 * How many days of data to include in the refresh. If not specified, this will default to the days requested in the most recently generated bank income report for the user.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested: FormControl<number | null | undefined>,

		/** The URL where Plaid will send the bank income webhook. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeRefreshRequestOptionsFormGroup() {
		return new FormGroup<CreditBankIncomeRefreshRequestOptionsFormProperties>({
			days_requested: new FormControl<number | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditBankIncomeRefreshResponse defines the response schema for `/credit/bank_income/refresh`. */
	export interface CreditBankIncomeRefreshResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditBankIncomeRefreshResponse defines the response schema for `/credit/bank_income/refresh`. */
	export interface CreditBankIncomeRefreshResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditBankIncomeRefreshResponseFormGroup() {
		return new FormGroup<CreditBankIncomeRefreshResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The warning code identifies a specific kind of warning.
	 * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
	 * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
	 * `ITEM_UNAPPROVED`: User exited flow before giving permission to share data for the Item
	 * `REPORT_DELETED`: Report deleted due to customer or consumer request
	 * `DATA_UNAVAILABLE`: No relevant data was found for the Item
	 */
	export enum CreditBankIncomeWarningCode { IDENTITY_UNAVAILABLE = 'IDENTITY_UNAVAILABLE', TRANSACTIONS_UNAVAILABLE = 'TRANSACTIONS_UNAVAILABLE', ITEM_UNAPPROVED = 'ITEM_UNAPPROVED', REPORT_DELETED = 'REPORT_DELETED', DATA_UNAVAILABLE = 'DATA_UNAVAILABLE' }


	/** The warning type which will always be `BANK_INCOME_WARNING`. */
	export enum CreditBankIncomeWarningType { BANK_INCOME_WARNING = 'BANK_INCOME_WARNING' }


	/** An object representing a credit card account. */
	export interface CreditCardLiability {

		/**
		 * The ID of the account that this liability belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty.
		 * Required
		 */
		aprs: Array<APR>;

		/**
		 * true if a payment is currently overdue. Availability for this field is limited.
		 * Required
		 */
		is_overdue: boolean;

		/**
		 * The amount of the last payment.
		 * Required
		 * Type: double
		 */
		last_payment_amount: number;

		/**
		 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
		 * Required
		 * Type: DateOnly
		 */
		last_payment_date: Date;

		/**
		 * The total amount owed as of the last statement issued
		 * Required
		 * Type: double
		 */
		last_statement_balance: number;

		/**
		 * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_statement_issue_date: Date;

		/**
		 * The minimum payment due for the next billing cycle.
		 * Required
		 * Type: double
		 */
		minimum_payment_amount: number;

		/**
		 * The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		next_payment_due_date: Date;
	}

	/** An object representing a credit card account. */
	export interface CreditCardLiabilityFormProperties {

		/**
		 * The ID of the account that this liability belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * true if a payment is currently overdue. Availability for this field is limited.
		 * Required
		 */
		is_overdue: FormControl<boolean | null | undefined>,

		/**
		 * The amount of the last payment.
		 * Required
		 * Type: double
		 */
		last_payment_amount: FormControl<number | null | undefined>,

		/**
		 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
		 * Required
		 * Type: DateOnly
		 */
		last_payment_date: FormControl<Date | null | undefined>,

		/**
		 * The total amount owed as of the last statement issued
		 * Required
		 * Type: double
		 */
		last_statement_balance: FormControl<number | null | undefined>,

		/**
		 * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_statement_issue_date: FormControl<Date | null | undefined>,

		/**
		 * The minimum payment due for the next billing cycle.
		 * Required
		 * Type: double
		 */
		minimum_payment_amount: FormControl<number | null | undefined>,

		/**
		 * The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		next_payment_due_date: FormControl<Date | null | undefined>,
	}
	export function CreateCreditCardLiabilityFormGroup() {
		return new FormGroup<CreditCardLiabilityFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_overdue: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			last_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			last_payment_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			last_statement_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			last_statement_issue_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			minimum_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			next_payment_due_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing employer data. */
	export interface CreditEmployerVerification {

		/**
		 * Name of employer.
		 * Required
		 */
		name: string;
	}

	/** An object containing employer data. */
	export interface CreditEmployerVerificationFormProperties {

		/**
		 * Name of employer.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreditEmployerVerificationFormGroup() {
		return new FormGroup<CreditEmployerVerificationFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditEmploymentGetRequest defines the request schema for `/credit/employment/get`. */
	export interface CreditEmploymentGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: string;
	}

	/** CreditEmploymentGetRequest defines the request schema for `/credit/employment/get`. */
	export interface CreditEmploymentGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditEmploymentGetRequestFormGroup() {
		return new FormGroup<CreditEmploymentGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditEmploymentGetResponse defines the response schema for `/credit/employment/get`. */
	export interface CreditEmploymentGetResponse {

		/**
		 * Array of employment items.
		 * Required
		 */
		items: Array<CreditEmploymentItem>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditEmploymentGetResponse defines the response schema for `/credit/employment/get`. */
	export interface CreditEmploymentGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditEmploymentGetResponseFormGroup() {
		return new FormGroup<CreditEmploymentGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The object containing employment items. */
	export interface CreditEmploymentItem {

		/** Token to represent the underlying Employment data */
		employment_report_token?: string | null;

		/** Required */
		employments: Array<CreditEmploymentVerification>;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;
	}

	/** The object containing employment items. */
	export interface CreditEmploymentItemFormProperties {

		/** Token to represent the underlying Employment data */
		employment_report_token: FormControl<string | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditEmploymentItemFormGroup() {
		return new FormGroup<CreditEmploymentItemFormProperties>({
			employment_report_token: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The object containing proof of employment data for an individual. */
	export interface CreditEmploymentVerification {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: string;

		/**
		 * The type of employment for the individual.
		 * `"FULL_TIME"`: A full-time employee.
		 * `"PART_TIME"`: A part-time employee.
		 * `"CONTRACTOR"`: An employee typically hired externally through a contracting group.
		 * `"TEMPORARY"`: A temporary employee.
		 * `"OTHER"`: The employee type is not one of the above defined types.
		 * Required
		 */
		employee_type: string;

		/**
		 * An object containing employer data.
		 * Required
		 */
		employer: CreditEmployerVerification;

		/**
		 * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		end_date: Date;

		/**
		 * The date of the employee's most recent paystub in ISO 8601 format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_paystub_date: Date;

		/**
		 * The object containing a set of ids related to an employee.
		 * Required
		 */
		platform_ids: CreditPlatformIds;

		/**
		 * Start of employment in ISO 8601 format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		start_date: Date;

		/**
		 * Current employment status.
		 * Required
		 */
		status: string;

		/**
		 * Current title of employee.
		 * Required
		 */
		title: string;
	}

	/** The object containing proof of employment data for an individual. */
	export interface CreditEmploymentVerificationFormProperties {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The type of employment for the individual.
		 * `"FULL_TIME"`: A full-time employee.
		 * `"PART_TIME"`: A part-time employee.
		 * `"CONTRACTOR"`: An employee typically hired externally through a contracting group.
		 * `"TEMPORARY"`: A temporary employee.
		 * `"OTHER"`: The employee type is not one of the above defined types.
		 * Required
		 */
		employee_type: FormControl<string | null | undefined>,

		/**
		 * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The date of the employee's most recent paystub in ISO 8601 format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_paystub_date: FormControl<Date | null | undefined>,

		/**
		 * Start of employment in ISO 8601 format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,

		/**
		 * Current employment status.
		 * Required
		 */
		status: FormControl<string | null | undefined>,

		/**
		 * Current title of employee.
		 * Required
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateCreditEmploymentVerificationFormGroup() {
		return new FormGroup<CreditEmploymentVerificationFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			employee_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			end_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			last_paystub_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The object containing a set of ids related to an employee. */
	export interface CreditPlatformIds {

		/**
		 * The ID of an employee as given by their employer.
		 * Required
		 */
		employee_id: string;

		/**
		 * The ID of an employee as given by their payroll.
		 * Required
		 */
		payroll_id: string;

		/**
		 * The ID of the position of the employee.
		 * Required
		 */
		position_id: string;
	}

	/** The object containing a set of ids related to an employee. */
	export interface CreditPlatformIdsFormProperties {

		/**
		 * The ID of an employee as given by their employer.
		 * Required
		 */
		employee_id: FormControl<string | null | undefined>,

		/**
		 * The ID of an employee as given by their payroll.
		 * Required
		 */
		payroll_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the position of the employee.
		 * Required
		 */
		position_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditPlatformIdsFormGroup() {
		return new FormGroup<CreditPlatformIdsFormProperties>({
			employee_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payroll_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			position_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Details about an asset. */
	export interface CreditFreddieMacAssetDetail_VOE_2_5 {

		/**
		 * A unique alphanumeric string identifying an asset.
		 * Required
		 */
		AssetAccountIdentifier: string;

		/**
		 * Account Report As of Date / Create Date. Format YYYY-MM-DD
		 * Required
		 */
		AssetAsOfDate: string;

		/**
		 * The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		AssetDaysRequestedCount: number;

		/**
		 * A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
		 * Required
		 */
		AssetDescription: string;

		/**
		 * Ownership type of the asset account.
		 * Required
		 */
		AssetOwnershipType: string;

		/**
		 * A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount.
		 * Required
		 */
		AssetType: AssetDetailAssetType;

		/**
		 * Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
		 * Required
		 */
		AssetTypeAdditionalDescription: string;

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetUniqueIdentifier: string;
	}

	/** Details about an asset. */
	export interface CreditFreddieMacAssetDetail_VOE_2_5FormProperties {

		/**
		 * A unique alphanumeric string identifying an asset.
		 * Required
		 */
		AssetAccountIdentifier: FormControl<string | null | undefined>,

		/**
		 * Account Report As of Date / Create Date. Format YYYY-MM-DD
		 * Required
		 */
		AssetAsOfDate: FormControl<string | null | undefined>,

		/**
		 * The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		AssetDaysRequestedCount: FormControl<number | null | undefined>,

		/**
		 * A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset.
		 * Required
		 */
		AssetDescription: FormControl<string | null | undefined>,

		/**
		 * Ownership type of the asset account.
		 * Required
		 */
		AssetOwnershipType: FormControl<string | null | undefined>,

		/**
		 * A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount.
		 * Required
		 */
		AssetType: FormControl<AssetDetailAssetType | null | undefined>,

		/**
		 * Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit.
		 * Required
		 */
		AssetTypeAdditionalDescription: FormControl<string | null | undefined>,

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetUniqueIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateCreditFreddieMacAssetDetail_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacAssetDetail_VOE_2_5FormProperties>({
			AssetAccountIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetAsOfDate: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetDaysRequestedCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			AssetDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetOwnershipType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetType: new FormControl<AssetDetailAssetType | null | undefined>(undefined, [Validators.required]),
			AssetTypeAdditionalDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetUniqueIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssetTransactionDetail_VOE_2_5 {

		/**
		 * Asset Transaction Category Type Enumerated derived by Vendor.
		 * Required
		 */
		AssetTransactionCategoryType: AssetTransactionDetailAssetTransactionCategoryType;

		/**
		 * Asset Transaction Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionDate: Date;

		/**
		 * Populate with who did the transaction.
		 * Required
		 */
		AssetTransactionPaidByName: string;

		/**
		 * Populate with for whom the transaction is done.
		 * Required
		 */
		AssetTransactionPaidToName: string;

		/**
		 * Asset Transaction Post Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionPostDate: Date;

		/**
		 * Asset Transaction Type.
		 * Required
		 */
		AssetTransactionType: AssetTransactionDetailAssetTransactionType;

		/**
		 * FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
		 * Required
		 */
		AssetTransactionTypeAdditionalDescription: string;

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetTransactionUniqueIdentifier: string;

		/**
		 * FI provided Transaction Identifier.
		 * Required
		 */
		FinancialInstitutionTransactionIdentifier: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssetTransactionDetail_VOE_2_5FormProperties {

		/**
		 * Asset Transaction Category Type Enumerated derived by Vendor.
		 * Required
		 */
		AssetTransactionCategoryType: FormControl<AssetTransactionDetailAssetTransactionCategoryType | null | undefined>,

		/**
		 * Asset Transaction Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionDate: FormControl<Date | null | undefined>,

		/**
		 * Populate with who did the transaction.
		 * Required
		 */
		AssetTransactionPaidByName: FormControl<string | null | undefined>,

		/**
		 * Populate with for whom the transaction is done.
		 * Required
		 */
		AssetTransactionPaidToName: FormControl<string | null | undefined>,

		/**
		 * Asset Transaction Post Date.
		 * Required
		 * Type: DateOnly
		 */
		AssetTransactionPostDate: FormControl<Date | null | undefined>,

		/**
		 * Asset Transaction Type.
		 * Required
		 */
		AssetTransactionType: FormControl<AssetTransactionDetailAssetTransactionType | null | undefined>,

		/**
		 * FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer.
		 * Required
		 */
		AssetTransactionTypeAdditionalDescription: FormControl<string | null | undefined>,

		/**
		 * A vendor created unique Identifier.
		 * Required
		 */
		AssetTransactionUniqueIdentifier: FormControl<string | null | undefined>,

		/**
		 * FI provided Transaction Identifier.
		 * Required
		 */
		FinancialInstitutionTransactionIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateCreditFreddieMacAssetTransactionDetail_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacAssetTransactionDetail_VOE_2_5FormProperties>({
			AssetTransactionCategoryType: new FormControl<AssetTransactionDetailAssetTransactionCategoryType | null | undefined>(undefined, [Validators.required]),
			AssetTransactionDate: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AssetTransactionPaidByName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetTransactionPaidToName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetTransactionPostDate: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AssetTransactionType: new FormControl<AssetTransactionDetailAssetTransactionType | null | undefined>(undefined, [Validators.required]),
			AssetTransactionTypeAdditionalDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssetTransactionUniqueIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FinancialInstitutionTransactionIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing... */
	export interface CreditFreddieMacAssetTransaction_VOA_2_4 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTION_DESCRIPTION: Array<AssetTransactionDescription>;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTION_DETAIL: AssetTransactionDetail;
	}

	/** An object representing... */
	export interface CreditFreddieMacAssetTransaction_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacAssetTransaction_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacAssetTransaction_VOA_2_4FormProperties>({
		});

	}


	/** An object representing... */
	export interface CreditFreddieMacAssetTransaction_VOE_2_5 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTION_DESCRIPTION: Array<AssetTransactionDescription>;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTION_DETAIL: CreditFreddieMacAssetTransactionDetail_VOE_2_5;
	}

	/** An object representing... */
	export interface CreditFreddieMacAssetTransaction_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacAssetTransaction_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacAssetTransaction_VOE_2_5FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssetTransactions_VOA_2_4 {

		/** Required */
		ASSET_TRANSACTION: Array<CreditFreddieMacAssetTransaction_VOA_2_4>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssetTransactions_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacAssetTransactions_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacAssetTransactions_VOA_2_4FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssetTransactions_VOE_2_5 {

		/** Required */
		ASSET_TRANSACTION: Array<CreditFreddieMacAssetTransaction_VOE_2_5>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssetTransactions_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacAssetTransactions_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacAssetTransactions_VOE_2_5FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAsset_VOA_2_4 {

		/**
		 * Details about an asset.
		 * Required
		 */
		ASSET_DETAIL: AssetDetail;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_HOLDER: AssetHolder;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_OWNERS: AssetOwners;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTIONS: CreditFreddieMacAssetTransactions_VOA_2_4;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		VALIDATION_SOURCES: ValidationSources;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAsset_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacAsset_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacAsset_VOA_2_4FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAsset_VOE_2_5 {

		/**
		 * Details about an asset.
		 * Required
		 */
		ASSET_DETAIL: CreditFreddieMacAssetDetail_VOE_2_5;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_HOLDER: AssetHolder;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_OWNERS: AssetOwners;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET_TRANSACTIONS: CreditFreddieMacAssetTransactions_VOE_2_5;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAsset_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacAsset_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacAsset_VOE_2_5FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssets_VOA_2_4 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET: Array<CreditFreddieMacAsset_VOA_2_4>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssets_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacAssets_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacAssets_VOA_2_4FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssets_VOE_2_5 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSET: Array<CreditFreddieMacAsset_VOE_2_5>;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacAssets_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacAssets_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacAssets_VOE_2_5FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacIndividualName_VOA_2_4 {

		/**
		 * The first name of the individual represented by the parent object.
		 * Required
		 */
		FirstName: string;

		/**
		 * The last name of the individual represented by the parent object.
		 * Required
		 */
		LastName: string;

		/**
		 * The middle name of the individual represented by the parent object.
		 * Required
		 */
		MiddleName: string;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacIndividualName_VOA_2_4FormProperties {

		/**
		 * The first name of the individual represented by the parent object.
		 * Required
		 */
		FirstName: FormControl<string | null | undefined>,

		/**
		 * The last name of the individual represented by the parent object.
		 * Required
		 */
		LastName: FormControl<string | null | undefined>,

		/**
		 * The middle name of the individual represented by the parent object.
		 * Required
		 */
		MiddleName: FormControl<string | null | undefined>,
	}
	export function CreateCreditFreddieMacIndividualName_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacIndividualName_VOA_2_4FormProperties>({
			FirstName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LastName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MiddleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Collection of current and previous identifiers for this loan. */
	export interface CreditFreddieMacLoanIdentifiers_VOA_2_4 {

		/** Required */
		LOAN_IDENTIFIER: Array<LoanIdentifier>;
	}

	/** Collection of current and previous identifiers for this loan. */
	export interface CreditFreddieMacLoanIdentifiers_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacLoanIdentifiers_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacLoanIdentifiers_VOA_2_4FormProperties>({
		});

	}


	/** Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender. */
	export interface CreditFreddieMacLoan_VOA_2_4 {

		/**
		 * Collection of current and previous identifiers for this loan.
		 * Required
		 */
		LOAN_IDENTIFIERS: CreditFreddieMacLoanIdentifiers_VOA_2_4;

		/**
		 * Type of loan. The value can only be "SubjectLoan"
		 * Required
		 */
		LoanRoleType: string;
	}

	/** Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender. */
	export interface CreditFreddieMacLoan_VOA_2_4FormProperties {

		/**
		 * Type of loan. The value can only be "SubjectLoan"
		 * Required
		 */
		LoanRoleType: FormControl<string | null | undefined>,
	}
	export function CreateCreditFreddieMacLoan_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacLoan_VOA_2_4FormProperties>({
			LoanRoleType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A collection of loans that are part of a single deal. */
	export interface CreditFreddieMacLoans_VOA_2_4 {

		/**
		 * Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender.
		 * Required
		 */
		LOAN: CreditFreddieMacLoan_VOA_2_4;
	}

	/** A collection of loans that are part of a single deal. */
	export interface CreditFreddieMacLoans_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacLoans_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacLoans_VOA_2_4FormProperties>({
		});

	}


	/** A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider. */
	export interface CreditFreddieMacParties_VOA_2_4 {

		/** Required */
		PARTY: Array<CreditFreddieMacParty_VOA_2_4>;
	}

	/** A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider. */
	export interface CreditFreddieMacParties_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacParties_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacParties_VOA_2_4FormProperties>({
		});

	}


	/** A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider. */
	export interface CreditFreddieMacParty_VOA_2_4 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		INDIVIDUAL: CreditFreddieMacPartyIndividual_VOA_2_4;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ROLES: Roles;

		/**
		 * The collection of TAXPAYER_IDENTIFICATION elements
		 * Required
		 */
		TAXPAYER_IDENTIFIERS: TaxpayerIdentifiers;
	}

	/** A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider. */
	export interface CreditFreddieMacParty_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacParty_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacParty_VOA_2_4FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacPartyIndividual_VOA_2_4 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		NAME: CreditFreddieMacIndividualName_VOA_2_4;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacPartyIndividual_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacPartyIndividual_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacPartyIndividual_VOA_2_4FormProperties>({
		});

	}


	/** Information about an report identifier and a report name. */
	export interface CreditFreddieMacReportingInformation_VOA_2_4 {

		/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
		ReportDateTime?: string | null;

		/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. The value can only be "ReportID" */
		ReportIdentifierType?: string | null;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ReportingInformationIdentifier: string;
	}

	/** Information about an report identifier and a report name. */
	export interface CreditFreddieMacReportingInformation_VOA_2_4FormProperties {

		/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
		ReportDateTime: FormControl<string | null | undefined>,

		/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. The value can only be "ReportID" */
		ReportIdentifierType: FormControl<string | null | undefined>,

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ReportingInformationIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateCreditFreddieMacReportingInformation_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacReportingInformation_VOA_2_4FormProperties>({
			ReportDateTime: new FormControl<string | null | undefined>(undefined),
			ReportIdentifierType: new FormControl<string | null | undefined>(undefined),
			ReportingInformationIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditFreddieMacReportsGetRequest defines the request schema for `credit/asset_report/freddie_mac/get` */
	export interface CreditFreddieMacReportsGetRequest {

		/**
		 * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** CreditFreddieMacReportsGetRequest defines the request schema for `credit/asset_report/freddie_mac/get` */
	export interface CreditFreddieMacReportsGetRequestFormProperties {

		/**
		 * A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely.
		 * Required
		 */
		audit_copy_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateCreditFreddieMacReportsGetRequestFormGroup() {
		return new FormGroup<CreditFreddieMacReportsGetRequestFormProperties>({
			audit_copy_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditFreddieMacReportsGetResponse defines the response schema for `/credit/freddie_mac/reports/get` */
	export interface CreditFreddieMacReportsGetResponse {

		/** Verification of Assets Report */
		VOA?: CreditFreddieMacVerificationOfAssets_VOA_2_4;

		/** Verification of Employment Report */
		VOE?: CreditFreddieVerificationOfEmployment_VOE_2_5;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditFreddieMacReportsGetResponse defines the response schema for `/credit/freddie_mac/reports/get` */
	export interface CreditFreddieMacReportsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditFreddieMacReportsGetResponseFormGroup() {
		return new FormGroup<CreditFreddieMacReportsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Verification of Assets Report */
	export interface CreditFreddieMacVerificationOfAssets_VOA_2_4 {

		/**
		 * An object representing an Asset Report with Freddie Mac schema.
		 * Required
		 */
		DEAL: CreditFreddieMacVerificationOfAssetsDeal_VOA_2_4;

		/**
		 * The Verification Of Assets (VOA) schema version.
		 * Required
		 * Type: double
		 */
		SchemaVersion: number;
	}

	/** Verification of Assets Report */
	export interface CreditFreddieMacVerificationOfAssets_VOA_2_4FormProperties {

		/**
		 * The Verification Of Assets (VOA) schema version.
		 * Required
		 * Type: double
		 */
		SchemaVersion: FormControl<number | null | undefined>,
	}
	export function CreateCreditFreddieMacVerificationOfAssets_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacVerificationOfAssets_VOA_2_4FormProperties>({
			SchemaVersion: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing an Asset Report with Freddie Mac schema. */
	export interface CreditFreddieMacVerificationOfAssetsDeal_VOA_2_4 {

		/**
		 * A collection of loans that are part of a single deal.
		 * Required
		 */
		LOANS: CreditFreddieMacLoans_VOA_2_4;

		/**
		 * A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
		 * Required
		 */
		PARTIES: CreditFreddieMacParties_VOA_2_4;

		/**
		 * A collection of objects that describe requests and responses for services.
		 * Required
		 */
		SERVICES: CreditFreddieMacServices_VOA_2_4;
	}

	/** An object representing an Asset Report with Freddie Mac schema. */
	export interface CreditFreddieMacVerificationOfAssetsDeal_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacVerificationOfAssetsDeal_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacVerificationOfAssetsDeal_VOA_2_4FormProperties>({
		});

	}


	/** A collection of objects that describe requests and responses for services. */
	export interface CreditFreddieMacServices_VOA_2_4 {

		/**
		 * A collection of details related to a fulfillment service or product in terms of request, process and result.
		 * Required
		 */
		SERVICE: CreditFreddieMacService_VOA_2_4;
	}

	/** A collection of objects that describe requests and responses for services. */
	export interface CreditFreddieMacServices_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacServices_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacServices_VOA_2_4FormProperties>({
		});

	}


	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface CreditFreddieMacService_VOA_2_4 {

		/**
		 * A collection of STATUS containers.
		 * Required
		 */
		STATUSES: Statuses;

		/** Required */
		VERIFICATION_OF_ASSET: Array<CreditFreddieMacVerificationOfAsset_VOA_2_4>;
	}

	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface CreditFreddieMacService_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacService_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacService_VOA_2_4FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAsset_VOA_2_4 {

		/**
		 * Information about an report identifier and a report name.
		 * Required
		 */
		REPORTING_INFORMATION: CreditFreddieMacReportingInformation_VOA_2_4;

		/**
		 * A collection of details related to a fulfillment service or product in terms of request, process and result.
		 * Required
		 */
		SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		VERIFICATION_OF_ASSET_RESPONSE: CreditFreddieMacVerificationOfAssetResponse_VOA_2_4;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAsset_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacVerificationOfAsset_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacVerificationOfAsset_VOA_2_4FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAssetResponse_VOA_2_4 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSETS: CreditFreddieMacAssets_VOA_2_4;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAssetResponse_VOA_2_4FormProperties {
	}
	export function CreateCreditFreddieMacVerificationOfAssetResponse_VOA_2_4FormGroup() {
		return new FormGroup<CreditFreddieMacVerificationOfAssetResponse_VOA_2_4FormProperties>({
		});

	}


	/** Verification of Employment Report */
	export interface CreditFreddieVerificationOfEmployment_VOE_2_5 {

		/**
		 * An object representing a Verification of Employment report.
		 * Required
		 */
		DEAL: CreditFreddieVerificationOfEmploymentDeal_VOE_2_5;

		/**
		 * The Verification Of Employment (VOE) schema version.
		 * Required
		 * Type: double
		 */
		SchemaVersion: number;
	}

	/** Verification of Employment Report */
	export interface CreditFreddieVerificationOfEmployment_VOE_2_5FormProperties {

		/**
		 * The Verification Of Employment (VOE) schema version.
		 * Required
		 * Type: double
		 */
		SchemaVersion: FormControl<number | null | undefined>,
	}
	export function CreateCreditFreddieVerificationOfEmployment_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieVerificationOfEmployment_VOE_2_5FormProperties>({
			SchemaVersion: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing a Verification of Employment report. */
	export interface CreditFreddieVerificationOfEmploymentDeal_VOE_2_5 {

		/**
		 * A collection of loans that are part of a single deal.
		 * Required
		 */
		LOANS: CreditFreddieMacLoans_VOA_2_4;

		/**
		 * A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
		 * Required
		 */
		PARTIES: CreditFreddieMacParties_VOA_2_4;

		/**
		 * A collection of objects that describe requests and responses for services.
		 * Required
		 */
		SERVICES: CreditFreddieMacServices_VOE_2_5;
	}

	/** An object representing a Verification of Employment report. */
	export interface CreditFreddieVerificationOfEmploymentDeal_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieVerificationOfEmploymentDeal_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieVerificationOfEmploymentDeal_VOE_2_5FormProperties>({
		});

	}


	/** A collection of objects that describe requests and responses for services. */
	export interface CreditFreddieMacServices_VOE_2_5 {

		/**
		 * A collection of details related to a fulfillment service or product in terms of request, process and result.
		 * Required
		 */
		SERVICE: CreditFreddieMacService_VOE_2_5;
	}

	/** A collection of objects that describe requests and responses for services. */
	export interface CreditFreddieMacServices_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacServices_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacServices_VOE_2_5FormProperties>({
		});

	}


	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface CreditFreddieMacService_VOE_2_5 {

		/**
		 * A collection of STATUS containers.
		 * Required
		 */
		STATUSES: Statuses;

		/** Required */
		VERIFICATION_OF_ASSET: Array<CreditFreddieMacVerificationOfAsset_VOE_2_5>;
	}

	/** A collection of details related to a fulfillment service or product in terms of request, process and result. */
	export interface CreditFreddieMacService_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacService_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacService_VOE_2_5FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAsset_VOE_2_5 {

		/**
		 * Information about an report identifier and a report name.
		 * Required
		 */
		REPORTING_INFORMATION: CreditFreddieMacReportingInformation_VOA_2_4;

		/**
		 * A collection of details related to a fulfillment service or product in terms of request, process and result.
		 * Required
		 */
		SERVICE_PRODUCT_FULFILLMENT: ServiceProductFulfillment;

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		VERIFICATION_OF_ASSET_RESPONSE: CreditFreddieMacVerificationOfAssetResponse_VOE_2_5;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAsset_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacVerificationOfAsset_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacVerificationOfAsset_VOE_2_5FormProperties>({
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAssetResponse_VOE_2_5 {

		/**
		 * Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
		 * Required
		 */
		ASSETS: CreditFreddieMacAssets_VOE_2_5;
	}

	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export interface CreditFreddieMacVerificationOfAssetResponse_VOE_2_5FormProperties {
	}
	export function CreateCreditFreddieMacVerificationOfAssetResponse_VOE_2_5FormGroup() {
		return new FormGroup<CreditFreddieMacVerificationOfAssetResponse_VOE_2_5FormProperties>({
		});

	}


	/** An object representing an end user's pay stub. */
	export interface CreditPayStub {

		/**
		 * An object with the deduction information found on a pay stub.
		 * Required
		 */
		deductions: CreditPayStubDeductions;

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		document_id: string;

		/**
		 * Object representing metadata pertaining to the document.
		 * Required
		 */
		document_metadata: CreditDocumentMetadata;

		/**
		 * An object representing both a breakdown of earnings on a pay stub and the total earnings.
		 * Required
		 */
		earnings: CreditPayStubEarnings;

		/**
		 * Data about the employee.
		 * Required
		 */
		employee: CreditPayStubEmployee;

		/**
		 * Information about the employer on the pay stub.
		 * Required
		 */
		employer: CreditPayStubEmployer;

		/**
		 * An object representing information about the net pay amount on the pay stub.
		 * Required
		 */
		net_pay: CreditPayStubNetPay;

		/**
		 * Details about the pay period.
		 * Required
		 */
		pay_period_details: PayStubPayPeriodDetails;
	}

	/** An object representing an end user's pay stub. */
	export interface CreditPayStubFormProperties {

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		document_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayStubFormGroup() {
		return new FormGroup<CreditPayStubFormProperties>({
			document_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object with the deduction information found on a pay stub. */
	export interface CreditPayStubDeductions {

		/** Required */
		breakdown: Array<PayStubDeductionsBreakdown>;

		/**
		 * An object representing the total deductions for the pay period
		 * Required
		 */
		total: PayStubDeductionsTotal;
	}

	/** An object with the deduction information found on a pay stub. */
	export interface CreditPayStubDeductionsFormProperties {
	}
	export function CreateCreditPayStubDeductionsFormGroup() {
		return new FormGroup<CreditPayStubDeductionsFormProperties>({
		});

	}


	/** An object representing the deduction line items for the pay period */
	export interface PayStubDeductionsBreakdown {

		/**
		 * Raw amount of the deduction
		 * Required
		 * Type: double
		 */
		current_amount: number;

		/**
		 * Description of the deduction line item
		 * Required
		 */
		description: string;

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;

		/**
		 * The year-to-date amount of the deduction
		 * Required
		 * Type: double
		 */
		ytd_amount: number;
	}

	/** An object representing the deduction line items for the pay period */
	export interface PayStubDeductionsBreakdownFormProperties {

		/**
		 * Raw amount of the deduction
		 * Required
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/**
		 * Description of the deduction line item
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date amount of the deduction
		 * Required
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreatePayStubDeductionsBreakdownFormGroup() {
		return new FormGroup<PayStubDeductionsBreakdownFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ytd_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing the total deductions for the pay period */
	export interface PayStubDeductionsTotal {

		/**
		 * Raw amount of the deduction
		 * Required
		 * Type: double
		 */
		current_amount: number;

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;

		/**
		 * The year-to-date total amount of the deductions
		 * Required
		 * Type: double
		 */
		ytd_amount: number;
	}

	/** An object representing the total deductions for the pay period */
	export interface PayStubDeductionsTotalFormProperties {

		/**
		 * Raw amount of the deduction
		 * Required
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date total amount of the deductions
		 * Required
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreatePayStubDeductionsTotalFormGroup() {
		return new FormGroup<PayStubDeductionsTotalFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ytd_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing both a breakdown of earnings on a pay stub and the total earnings. */
	export interface CreditPayStubEarnings {

		/** Required */
		breakdown: Array<PayStubEarningsBreakdown>;

		/**
		 * An object representing both the current pay period and year to date amount for an earning category.
		 * Required
		 */
		total: PayStubEarningsTotal;
	}

	/** An object representing both a breakdown of earnings on a pay stub and the total earnings. */
	export interface CreditPayStubEarningsFormProperties {
	}
	export function CreateCreditPayStubEarningsFormGroup() {
		return new FormGroup<CreditPayStubEarningsFormProperties>({
		});

	}


	/** An object representing the earnings line items for the pay period. */
	export interface PayStubEarningsBreakdown {

		/**
		 * Commonly used term to describe the earning line item.
		 * Required
		 */
		canonical_description: string;

		/**
		 * Raw amount of the earning line item.
		 * Required
		 * Type: double
		 */
		current_amount: number;

		/**
		 * Description of the earning line item.
		 * Required
		 */
		description: string;

		/**
		 * Number of hours applicable for this earning.
		 * Required
		 * Type: double
		 */
		hours: number;

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * Hourly rate applicable for this earning.
		 * Required
		 * Type: double
		 */
		rate: number;

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;

		/**
		 * The year-to-date amount of the deduction.
		 * Required
		 * Type: double
		 */
		ytd_amount: number;
	}

	/** An object representing the earnings line items for the pay period. */
	export interface PayStubEarningsBreakdownFormProperties {

		/**
		 * Commonly used term to describe the earning line item.
		 * Required
		 */
		canonical_description: FormControl<string | null | undefined>,

		/**
		 * Raw amount of the earning line item.
		 * Required
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/**
		 * Description of the earning line item.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Number of hours applicable for this earning.
		 * Required
		 * Type: double
		 */
		hours: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * Hourly rate applicable for this earning.
		 * Required
		 * Type: double
		 */
		rate: FormControl<number | null | undefined>,

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date amount of the deduction.
		 * Required
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreatePayStubEarningsBreakdownFormGroup() {
		return new FormGroup<PayStubEarningsBreakdownFormProperties>({
			canonical_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			current_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hours: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rate: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ytd_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing both the current pay period and year to date amount for an earning category. */
	export interface PayStubEarningsTotal {

		/**
		 * Total amount of the earnings for this pay period.
		 * Required
		 * Type: double
		 */
		current_amount: number;

		/**
		 * Total number of hours worked for this pay period.
		 * Required
		 * Type: double
		 */
		hours: number;

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;

		/**
		 * The total year-to-date amount of the earnings.
		 * Required
		 * Type: double
		 */
		ytd_amount: number;
	}

	/** An object representing both the current pay period and year to date amount for an earning category. */
	export interface PayStubEarningsTotalFormProperties {

		/**
		 * Total amount of the earnings for this pay period.
		 * Required
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/**
		 * Total number of hours worked for this pay period.
		 * Required
		 * Type: double
		 */
		hours: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The total year-to-date amount of the earnings.
		 * Required
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreatePayStubEarningsTotalFormGroup() {
		return new FormGroup<PayStubEarningsTotalFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			hours: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ytd_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data about the employee. */
	export interface CreditPayStubEmployee {

		/**
		 * Address on the pay stub.
		 * Required
		 */
		address: CreditPayStubAddress;

		/**
		 * Marital status of the employee - either `SINGLE` or `MARRIED`.
		 * Required
		 */
		marital_status: string;

		/**
		 * The name of the employee.
		 * Required
		 */
		name: string;

		/**
		 * Taxpayer ID of the individual receiving the paystub.
		 * Required
		 */
		taxpayer_id: PayStubTaxpayerID;
	}

	/** Data about the employee. */
	export interface CreditPayStubEmployeeFormProperties {

		/**
		 * Marital status of the employee - either `SINGLE` or `MARRIED`.
		 * Required
		 */
		marital_status: FormControl<string | null | undefined>,

		/**
		 * The name of the employee.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayStubEmployeeFormGroup() {
		return new FormGroup<CreditPayStubEmployeeFormProperties>({
			marital_status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Taxpayer ID of the individual receiving the paystub. */
	export interface PayStubTaxpayerID {

		/**
		 * ID mask; i.e. last 4 digits of the taxpayer ID.
		 * Required
		 */
		id_mask: string;

		/**
		 * Type of ID, e.g. 'SSN'.
		 * Required
		 */
		id_type: string;
	}

	/** Taxpayer ID of the individual receiving the paystub. */
	export interface PayStubTaxpayerIDFormProperties {

		/**
		 * ID mask; i.e. last 4 digits of the taxpayer ID.
		 * Required
		 */
		id_mask: FormControl<string | null | undefined>,

		/**
		 * Type of ID, e.g. 'SSN'.
		 * Required
		 */
		id_type: FormControl<string | null | undefined>,
	}
	export function CreatePayStubTaxpayerIDFormGroup() {
		return new FormGroup<PayStubTaxpayerIDFormProperties>({
			id_mask: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the employer on the pay stub. */
	export interface CreditPayStubEmployer {

		/**
		 * Address on the pay stub.
		 * Required
		 */
		address: CreditPayStubAddress;

		/**
		 * The name of the employer on the pay stub.
		 * Required
		 */
		name: string;
	}

	/** Information about the employer on the pay stub. */
	export interface CreditPayStubEmployerFormProperties {

		/**
		 * The name of the employer on the pay stub.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayStubEmployerFormGroup() {
		return new FormGroup<CreditPayStubEmployerFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing information about the net pay amount on the pay stub. */
	export interface CreditPayStubNetPay {

		/**
		 * Raw amount of the net pay for the pay period.
		 * Required
		 * Type: double
		 */
		current_amount: number;

		/**
		 * Description of the net pay.
		 * Required
		 */
		description: string;

		/**
		 * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;

		/**
		 * The year-to-date amount of the net pay.
		 * Required
		 * Type: double
		 */
		ytd_amount: number;
	}

	/** An object representing information about the net pay amount on the pay stub. */
	export interface CreditPayStubNetPayFormProperties {

		/**
		 * Raw amount of the net pay for the pay period.
		 * Required
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/**
		 * Description of the net pay.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date amount of the net pay.
		 * Required
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreateCreditPayStubNetPayFormGroup() {
		return new FormGroup<CreditPayStubNetPayFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ytd_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Details about the pay period. */
	export interface PayStubPayPeriodDetails {

		/** Required */
		distribution_breakdown: Array<PayStubDistributionBreakdown>;

		/**
		 * The date on which the pay period ended, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		end_date: Date;

		/**
		 * Total earnings before tax/deductions.
		 * Required
		 * Type: double
		 */
		gross_earnings: number;

		/**
		 * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The amount of the paycheck.
		 * Required
		 * Type: double
		 */
		pay_amount: number;

		/** The explicit pay basis on the paystub (if present). */
		pay_basis?: PayStubPayPeriodDetailsPay_basis | null;

		/**
		 * The date on which the pay stub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		pay_date: Date;

		/**
		 * The frequency at which an individual is paid.
		 * Required
		 */
		pay_frequency: string;

		/**
		 * The date on which the pay period started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		start_date: Date;

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;
	}

	/** Details about the pay period. */
	export interface PayStubPayPeriodDetailsFormProperties {

		/**
		 * The date on which the pay period ended, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * Total earnings before tax/deductions.
		 * Required
		 * Type: double
		 */
		gross_earnings: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The amount of the paycheck.
		 * Required
		 * Type: double
		 */
		pay_amount: FormControl<number | null | undefined>,

		/** The explicit pay basis on the paystub (if present). */
		pay_basis: FormControl<PayStubPayPeriodDetailsPay_basis | null | undefined>,

		/**
		 * The date on which the pay stub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		pay_date: FormControl<Date | null | undefined>,

		/**
		 * The frequency at which an individual is paid.
		 * Required
		 */
		pay_frequency: FormControl<string | null | undefined>,

		/**
		 * The date on which the pay period started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreatePayStubPayPeriodDetailsFormGroup() {
		return new FormGroup<PayStubPayPeriodDetailsFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			gross_earnings: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pay_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			pay_basis: new FormControl<PayStubPayPeriodDetailsPay_basis | null | undefined>(undefined),
			pay_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			pay_frequency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the accounts that the payment was distributed to. */
	export interface PayStubDistributionBreakdown {

		/**
		 * Name of the account for the given distribution.
		 * Required
		 */
		account_name: string;

		/**
		 * The name of the bank that the payment is being deposited to.
		 * Required
		 */
		bank_name: string;

		/**
		 * The amount distributed to this account.
		 * Required
		 * Type: double
		 */
		current_amount: number;

		/**
		 * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The last 2-4 alphanumeric characters of an account's official account number.
		 * Required
		 */
		mask: string;

		/**
		 * Type of the account that the paystub was sent to (e.g. 'checking').
		 * Required
		 */
		type: string;

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;
	}

	/** Information about the accounts that the payment was distributed to. */
	export interface PayStubDistributionBreakdownFormProperties {

		/**
		 * Name of the account for the given distribution.
		 * Required
		 */
		account_name: FormControl<string | null | undefined>,

		/**
		 * The name of the bank that the payment is being deposited to.
		 * Required
		 */
		bank_name: FormControl<string | null | undefined>,

		/**
		 * The amount distributed to this account.
		 * Required
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The last 2-4 alphanumeric characters of an account's official account number.
		 * Required
		 */
		mask: FormControl<string | null | undefined>,

		/**
		 * Type of the account that the paystub was sent to (e.g. 'checking').
		 * Required
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreatePayStubDistributionBreakdownFormGroup() {
		return new FormGroup<PayStubDistributionBreakdownFormProperties>({
			account_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bank_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			current_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mask: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PayStubPayPeriodDetailsPay_basis { SALARY = 'SALARY', HOURLY = 'HOURLY', COMMISSION = 'COMMISSION' }


	/** The explicit pay basis on the paystub (if present). */
	export enum CreditPayStubPayBasisType { SALARY = 'SALARY', HOURLY = 'HOURLY', COMMISSION = 'COMMISSION' }


	/** CreditPayrollIncomeGetRequest defines the request schema for `/credit/payroll_income/get`. */
	export interface CreditPayrollIncomeGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user token associated with the User data is being requested for. */
		user_token?: string | null;
	}

	/** CreditPayrollIncomeGetRequest defines the request schema for `/credit/payroll_income/get`. */
	export interface CreditPayrollIncomeGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user token associated with the User data is being requested for. */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomeGetRequestFormGroup() {
		return new FormGroup<CreditPayrollIncomeGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response body for `/credit/payroll_income/get`. */
	export interface CreditPayrollIncomeGetResponse {

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * Array of payroll items.
		 * Required
		 */
		items: Array<PayrollItem>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response body for `/credit/payroll_income/get`. */
	export interface CreditPayrollIncomeGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomeGetResponseFormGroup() {
		return new FormGroup<CreditPayrollIncomeGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing information about the payroll item. */
	export interface PayrollItem {

		/** Required */
		accounts: Array<PayrollIncomeAccountData>;

		/**
		 * The unique identifier of the institution associated with the Item.
		 * Required
		 */
		institution_id: string;

		/**
		 * The name of the institution associated with the Item.
		 * Required
		 */
		institution_name: string;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/** Required */
		payroll_income: Array<PayrollIncomeObject>;

		/**
		 * Details about the status of the payroll item.
		 * Required
		 */
		status: PayrollItemStatus;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated.
		 * Required
		 */
		updated_at: Date;
	}

	/** An object containing information about the payroll item. */
	export interface PayrollItemFormProperties {

		/**
		 * The unique identifier of the institution associated with the Item.
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/**
		 * The name of the institution associated with the Item.
		 * Required
		 */
		institution_name: FormControl<string | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated.
		 * Required
		 */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePayrollItemFormGroup() {
		return new FormGroup<PayrollItemFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing account level data. */
	export interface PayrollIncomeAccountData {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: string;

		/**
		 * The frequency at which an individual is paid.
		 * Required
		 */
		pay_frequency: string;

		/**
		 * An object representing the rate at which an individual is paid.
		 * Required
		 */
		rate_of_pay: PayrollIncomeRateOfPay;
	}

	/** An object containing account level data. */
	export interface PayrollIncomeAccountDataFormProperties {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The frequency at which an individual is paid.
		 * Required
		 */
		pay_frequency: FormControl<string | null | undefined>,
	}
	export function CreatePayrollIncomeAccountDataFormGroup() {
		return new FormGroup<PayrollIncomeAccountDataFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pay_frequency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing the rate at which an individual is paid. */
	export interface PayrollIncomeRateOfPay {

		/**
		 * The amount at which an employee is paid.
		 * Type: double
		 */
		pay_amount?: number | null;

		/** The rate at which an employee is paid. */
		pay_rate?: string | null;
	}

	/** An object representing the rate at which an individual is paid. */
	export interface PayrollIncomeRateOfPayFormProperties {

		/**
		 * The amount at which an employee is paid.
		 * Type: double
		 */
		pay_amount: FormControl<number | null | undefined>,

		/** The rate at which an employee is paid. */
		pay_rate: FormControl<string | null | undefined>,
	}
	export function CreatePayrollIncomeRateOfPayFormGroup() {
		return new FormGroup<PayrollIncomeRateOfPayFormProperties>({
			pay_amount: new FormControl<number | null | undefined>(undefined),
			pay_rate: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An object representing payroll data. */
	export interface PayrollIncomeObject {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: string;

		/**
		 * Array of tax form 1099s.
		 * Required
		 */
		form1099s: Array<Credit1099>;

		/**
		 * Array of pay stubs for the user.
		 * Required
		 */
		pay_stubs: Array<CreditPayStub>;

		/**
		 * Array of tax form W-2s.
		 * Required
		 */
		w2s: Array<CreditW2>;
	}

	/** An object representing payroll data. */
	export interface PayrollIncomeObjectFormProperties {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,
	}
	export function CreatePayrollIncomeObjectFormGroup() {
		return new FormGroup<PayrollIncomeObjectFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** W2 is an object that represents income data taken from a W2 tax document. */
	export interface CreditW2 {

		/**
		 * Allocated tips.
		 * Required
		 */
		allocated_tips: string;

		/** Required */
		box_12: Array<W2Box12>;

		/**
		 * Contents from box 9 on the W2.
		 * Required
		 */
		box_9: string;

		/**
		 * Dependent care benefits.
		 * Required
		 */
		dependent_care_benefits: string;

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		document_id: string;

		/**
		 * Object representing metadata pertaining to the document.
		 * Required
		 */
		document_metadata: CreditDocumentMetadata;

		/**
		 * Data about the employee.
		 * Required
		 */
		employee: CreditPayStubEmployee;

		/**
		 * Information about the employer on the pay stub.
		 * Required
		 */
		employer: CreditPayStubEmployer;

		/**
		 * An employee identification number or EIN.
		 * Required
		 */
		employer_id_number: string;

		/**
		 * Federal income tax withheld for the tax year.
		 * Required
		 */
		federal_income_tax_withheld: string;

		/**
		 * Medicare tax withheld for the tax year.
		 * Required
		 */
		medicare_tax_withheld: string;

		/**
		 * Wages and tips from medicare.
		 * Required
		 */
		medicare_wages_and_tips: string;

		/**
		 * Nonqualified plans.
		 * Required
		 */
		nonqualified_plans: string;

		/**
		 * Other.
		 * Required
		 */
		other: string;

		/**
		 * Retirement plan.
		 * Required
		 */
		retirement_plan: string;

		/**
		 * Social security tax withheld for the tax year.
		 * Required
		 */
		social_security_tax_withheld: string;

		/**
		 * Tips from social security.
		 * Required
		 */
		social_security_tips: string;

		/**
		 * Wages from social security.
		 * Required
		 */
		social_security_wages: string;

		/** Required */
		state_and_local_wages: Array<W2StateAndLocalWages>;

		/**
		 * Statutory employee.
		 * Required
		 */
		statutory_employee: string;

		/**
		 * The tax year of the W2 document.
		 * Required
		 */
		tax_year: string;

		/**
		 * Third party sick pay.
		 * Required
		 */
		third_party_sick_pay: string;

		/**
		 * Wages from tips and other compensation.
		 * Required
		 */
		wages_tips_other_comp: string;
	}

	/** W2 is an object that represents income data taken from a W2 tax document. */
	export interface CreditW2FormProperties {

		/**
		 * Allocated tips.
		 * Required
		 */
		allocated_tips: FormControl<string | null | undefined>,

		/**
		 * Contents from box 9 on the W2.
		 * Required
		 */
		box_9: FormControl<string | null | undefined>,

		/**
		 * Dependent care benefits.
		 * Required
		 */
		dependent_care_benefits: FormControl<string | null | undefined>,

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		document_id: FormControl<string | null | undefined>,

		/**
		 * An employee identification number or EIN.
		 * Required
		 */
		employer_id_number: FormControl<string | null | undefined>,

		/**
		 * Federal income tax withheld for the tax year.
		 * Required
		 */
		federal_income_tax_withheld: FormControl<string | null | undefined>,

		/**
		 * Medicare tax withheld for the tax year.
		 * Required
		 */
		medicare_tax_withheld: FormControl<string | null | undefined>,

		/**
		 * Wages and tips from medicare.
		 * Required
		 */
		medicare_wages_and_tips: FormControl<string | null | undefined>,

		/**
		 * Nonqualified plans.
		 * Required
		 */
		nonqualified_plans: FormControl<string | null | undefined>,

		/**
		 * Other.
		 * Required
		 */
		other: FormControl<string | null | undefined>,

		/**
		 * Retirement plan.
		 * Required
		 */
		retirement_plan: FormControl<string | null | undefined>,

		/**
		 * Social security tax withheld for the tax year.
		 * Required
		 */
		social_security_tax_withheld: FormControl<string | null | undefined>,

		/**
		 * Tips from social security.
		 * Required
		 */
		social_security_tips: FormControl<string | null | undefined>,

		/**
		 * Wages from social security.
		 * Required
		 */
		social_security_wages: FormControl<string | null | undefined>,

		/**
		 * Statutory employee.
		 * Required
		 */
		statutory_employee: FormControl<string | null | undefined>,

		/**
		 * The tax year of the W2 document.
		 * Required
		 */
		tax_year: FormControl<string | null | undefined>,

		/**
		 * Third party sick pay.
		 * Required
		 */
		third_party_sick_pay: FormControl<string | null | undefined>,

		/**
		 * Wages from tips and other compensation.
		 * Required
		 */
		wages_tips_other_comp: FormControl<string | null | undefined>,
	}
	export function CreateCreditW2FormGroup() {
		return new FormGroup<CreditW2FormProperties>({
			allocated_tips: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			box_9: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			dependent_care_benefits: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			document_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			employer_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			federal_income_tax_withheld: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			medicare_tax_withheld: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			medicare_wages_and_tips: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			nonqualified_plans: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			other: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			retirement_plan: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			social_security_tax_withheld: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			social_security_tips: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			social_security_wages: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statutory_employee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tax_year: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			third_party_sick_pay: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			wages_tips_other_comp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data on the W2 Box 12 */
	export interface W2Box12 {

		/** W2 Box 12 amount. */
		amount?: string | null;

		/** W2 Box 12 code. */
		code?: string | null;
	}

	/** Data on the W2 Box 12 */
	export interface W2Box12FormProperties {

		/** W2 Box 12 amount. */
		amount: FormControl<string | null | undefined>,

		/** W2 Box 12 code. */
		code: FormControl<string | null | undefined>,
	}
	export function CreateW2Box12FormGroup() {
		return new FormGroup<W2Box12FormProperties>({
			amount: new FormControl<string | null | undefined>(undefined),
			code: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** W2 state and local wages */
	export interface W2StateAndLocalWages {

		/** State identification number of the employer. */
		employer_state_id_number?: string | null;

		/** Income tax from the locality. */
		local_income_tax?: string | null;

		/** Wages and tips from the locality. */
		local_wages_tips?: string | null;

		/** Name of the locality. */
		locality_name?: string | null;

		/** State associated with the wage. */
		state?: string | null;

		/** Income tax from the specified state. */
		state_income_tax?: string | null;

		/** Wages and tips from the specified state. */
		state_wages_tips?: string | null;
	}

	/** W2 state and local wages */
	export interface W2StateAndLocalWagesFormProperties {

		/** State identification number of the employer. */
		employer_state_id_number: FormControl<string | null | undefined>,

		/** Income tax from the locality. */
		local_income_tax: FormControl<string | null | undefined>,

		/** Wages and tips from the locality. */
		local_wages_tips: FormControl<string | null | undefined>,

		/** Name of the locality. */
		locality_name: FormControl<string | null | undefined>,

		/** State associated with the wage. */
		state: FormControl<string | null | undefined>,

		/** Income tax from the specified state. */
		state_income_tax: FormControl<string | null | undefined>,

		/** Wages and tips from the specified state. */
		state_wages_tips: FormControl<string | null | undefined>,
	}
	export function CreateW2StateAndLocalWagesFormGroup() {
		return new FormGroup<W2StateAndLocalWagesFormProperties>({
			employer_state_id_number: new FormControl<string | null | undefined>(undefined),
			local_income_tax: new FormControl<string | null | undefined>(undefined),
			local_wages_tips: new FormControl<string | null | undefined>(undefined),
			locality_name: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			state_income_tax: new FormControl<string | null | undefined>(undefined),
			state_wages_tips: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details about the status of the payroll item. */
	export interface PayrollItemStatus {

		/**
		 * Denotes the processing status for the verification.
		 * `UNKNOWN`: The processing status could not be determined.
		 * `PROCESSING_COMPLETE`: The processing has completed and the user has approved for sharing. The data is available to be retrieved.
		 * `PROCESSING`: The verification is still processing. The data is not available yet.
		 * `FAILED`: The processing failed to complete successfully.
		 * `APPROVAL_STATUS_PENDING`: The processing has completed but the user has not yet approved the sharing of the data.
		 */
		processing_status?: string | null;
	}

	/** Details about the status of the payroll item. */
	export interface PayrollItemStatusFormProperties {

		/**
		 * Denotes the processing status for the verification.
		 * `UNKNOWN`: The processing status could not be determined.
		 * `PROCESSING_COMPLETE`: The processing has completed and the user has approved for sharing. The data is available to be retrieved.
		 * `PROCESSING`: The verification is still processing. The data is not available yet.
		 * `FAILED`: The processing failed to complete successfully.
		 * `APPROVAL_STATUS_PENDING`: The processing has completed but the user has not yet approved the sharing of the data.
		 */
		processing_status: FormControl<string | null | undefined>,
	}
	export function CreatePayrollItemStatusFormGroup() {
		return new FormGroup<PayrollItemStatusFormProperties>({
			processing_status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the request schema for `/credit/payroll_income/precheck`. */
	export interface CreditPayrollIncomePrecheckRequest {

		/** An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
		access_tokens?: Array<string>;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Information about the end user's employer */
		employer?: IncomeVerificationPrecheckEmployer;

		/** Information about the end user's payroll institution */
		payroll_institution?: IncomeVerificationPrecheckPayrollInstitution;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** Data about military info in the income verification precheck. */
		us_military_info?: IncomeVerificationPrecheckMilitaryInfo;

		/** The user token associated with the User data is being requested for. */
		user_token?: string | null;
	}

	/** Defines the request schema for `/credit/payroll_income/precheck`. */
	export interface CreditPayrollIncomePrecheckRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user token associated with the User data is being requested for. */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomePrecheckRequestFormGroup() {
		return new FormGroup<CreditPayrollIncomePrecheckRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about the end user's employer */
	export interface IncomeVerificationPrecheckEmployer {

		/** The address of the employer */
		address?: IncomeVerificationPrecheckEmployerAddress;

		/** The employer's name */
		name?: string | null;

		/** The employer's tax id */
		tax_id?: string | null;

		/** The URL for the employer's public website */
		url?: string | null;
	}

	/** Information about the end user's employer */
	export interface IncomeVerificationPrecheckEmployerFormProperties {

		/** The employer's name */
		name: FormControl<string | null | undefined>,

		/** The employer's tax id */
		tax_id: FormControl<string | null | undefined>,

		/** The URL for the employer's public website */
		url: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPrecheckEmployerFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckEmployerFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			tax_id: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The address of the employer */
	export interface IncomeVerificationPrecheckEmployerAddress {
	}

	/** The address of the employer */
	export interface IncomeVerificationPrecheckEmployerAddressFormProperties {
	}
	export function CreateIncomeVerificationPrecheckEmployerAddressFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckEmployerAddressFormProperties>({
		});

	}


	/** Information about the end user's payroll institution */
	export interface IncomeVerificationPrecheckPayrollInstitution {

		/** The name of payroll institution */
		name?: string | null;
	}

	/** Information about the end user's payroll institution */
	export interface IncomeVerificationPrecheckPayrollInstitutionFormProperties {

		/** The name of payroll institution */
		name: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPrecheckPayrollInstitutionFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckPayrollInstitutionFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Data about military info in the income verification precheck. */
	export interface IncomeVerificationPrecheckMilitaryInfo {

		/**
		 * If the user is currently serving in the US military, the branch of the military in which they are serving
		 * Valid values: 'AIR FORCE', 'ARMY', 'COAST GUARD', 'MARINES', 'NAVY', 'UNKNOWN'
		 */
		branch?: string | null;

		/** Is the user currently active duty in the US military */
		is_active_duty?: boolean | null;
	}

	/** Data about military info in the income verification precheck. */
	export interface IncomeVerificationPrecheckMilitaryInfoFormProperties {

		/**
		 * If the user is currently serving in the US military, the branch of the military in which they are serving
		 * Valid values: 'AIR FORCE', 'ARMY', 'COAST GUARD', 'MARINES', 'NAVY', 'UNKNOWN'
		 */
		branch: FormControl<string | null | undefined>,

		/** Is the user currently active duty in the US military */
		is_active_duty: FormControl<boolean | null | undefined>,
	}
	export function CreateIncomeVerificationPrecheckMilitaryInfoFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckMilitaryInfoFormProperties>({
			branch: new FormControl<string | null | undefined>(undefined),
			is_active_duty: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/credit/payroll_income/precheck`. */
	export interface CreditPayrollIncomePrecheckResponse {

		/**
		 * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:
		 * `"HIGH"`: It is very likely that this user can use the digital income verification flow.
		 * "`LOW`": It is unlikely that this user can use the digital income verification flow.
		 * `"UNKNOWN"`: It was not possible to determine if the user is supportable with the information passed.
		 * Required
		 */
		confidence: CreditPayrollIncomePrecheckResponseConfidence;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/credit/payroll_income/precheck`. */
	export interface CreditPayrollIncomePrecheckResponseFormProperties {

		/**
		 * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:
		 * `"HIGH"`: It is very likely that this user can use the digital income verification flow.
		 * "`LOW`": It is unlikely that this user can use the digital income verification flow.
		 * `"UNKNOWN"`: It was not possible to determine if the user is supportable with the information passed.
		 * Required
		 */
		confidence: FormControl<CreditPayrollIncomePrecheckResponseConfidence | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomePrecheckResponseFormGroup() {
		return new FormGroup<CreditPayrollIncomePrecheckResponseFormProperties>({
			confidence: new FormControl<CreditPayrollIncomePrecheckResponseConfidence | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CreditPayrollIncomePrecheckResponseConfidence { HIGH = 'HIGH', LOW = 'LOW', UNKNOWN = 'UNKNOWN' }


	/** CreditPayrollIncomeRefreshRequest defines the request schema for `/credit/payroll_income/refresh` */
	export interface CreditPayrollIncomeRefreshRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object for `/credit/payroll_income/refresh` request options. */
		options?: CreditPayrollIncomeRefreshRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: string;
	}

	/** CreditPayrollIncomeRefreshRequest defines the request schema for `/credit/payroll_income/refresh` */
	export interface CreditPayrollIncomeRefreshRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomeRefreshRequestFormGroup() {
		return new FormGroup<CreditPayrollIncomeRefreshRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An optional object for `/credit/payroll_income/refresh` request options. */
	export interface CreditPayrollIncomeRefreshRequestOptions {

		/** An array of `item_id`s to be refreshed. Each `item_id` should uniquely identify a payroll income item. */
		item_ids?: Array<string>;

		/** The URL where Plaid will send the payroll income refresh webhook. */
		webhook?: string | null;
	}

	/** An optional object for `/credit/payroll_income/refresh` request options. */
	export interface CreditPayrollIncomeRefreshRequestOptionsFormProperties {

		/** The URL where Plaid will send the payroll income refresh webhook. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomeRefreshRequestOptionsFormGroup() {
		return new FormGroup<CreditPayrollIncomeRefreshRequestOptionsFormProperties>({
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditPayrollIncomeRefreshResponse defines the response schema for `/credit/payroll_income/refresh` */
	export interface CreditPayrollIncomeRefreshResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The verification refresh status. One of the following:
		 * `"USER_PRESENCE_REQUIRED"` User presence is required to refresh an income verification.
		 * `"SUCCESSFUL"` The income verification refresh was successful.
		 * `"NOT_FOUND"` No new data was found after the income verification refresh.
		 * Required
		 */
		verification_refresh_status: string;
	}

	/** CreditPayrollIncomeRefreshResponse defines the response schema for `/credit/payroll_income/refresh` */
	export interface CreditPayrollIncomeRefreshResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The verification refresh status. One of the following:
		 * `"USER_PRESENCE_REQUIRED"` User presence is required to refresh an income verification.
		 * `"SUCCESSFUL"` The income verification refresh was successful.
		 * `"NOT_FOUND"` No new data was found after the income verification refresh.
		 * Required
		 */
		verification_refresh_status: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomeRefreshResponseFormGroup() {
		return new FormGroup<CreditPayrollIncomeRefreshResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verification_refresh_status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditPayrollIncomeRiskSignalsGetRequest defines the request schema for `/beta/credit/payroll_income/risk_signals/get` */
	export interface CreditPayrollIncomeRiskSignalsGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user token associated with the User data is being requested for. */
		user_token?: string | null;
	}

	/** CreditPayrollIncomeRiskSignalsGetRequest defines the request schema for `/beta/credit/payroll_income/risk_signals/get` */
	export interface CreditPayrollIncomeRiskSignalsGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user token associated with the User data is being requested for. */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomeRiskSignalsGetRequestFormGroup() {
		return new FormGroup<CreditPayrollIncomeRiskSignalsGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditPayrollIncomeRiskSignalsGetRequest defines the response schema for `/beta/credit/payroll_income/risk_signals/get` */
	export interface CreditPayrollIncomeRiskSignalsGetResponse {

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * Array of payroll items.
		 * Required
		 */
		items: Array<PayrollRiskSignalsItem>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditPayrollIncomeRiskSignalsGetRequest defines the response schema for `/beta/credit/payroll_income/risk_signals/get` */
	export interface CreditPayrollIncomeRiskSignalsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditPayrollIncomeRiskSignalsGetResponseFormGroup() {
		return new FormGroup<CreditPayrollIncomeRiskSignalsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object containing fraud risk data pertaining to the Item linked as part of the verification. */
	export interface PayrollRiskSignalsItem {

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * Array of payroll income document authenticity data retrieved for each of the user's accounts.
		 * Required
		 */
		verification_risk_signals: Array<DocumentRiskSignalsObject>;
	}

	/** Object containing fraud risk data pertaining to the Item linked as part of the verification. */
	export interface PayrollRiskSignalsItemFormProperties {

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,
	}
	export function CreatePayrollRiskSignalsItemFormGroup() {
		return new FormGroup<PayrollRiskSignalsItemFormProperties>({
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object containing fraud risk data for a set of income documents. */
	export interface DocumentRiskSignalsObject {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: string;

		/**
		 * Array of risk signals computed from a set of uploaded documents and the associated documents' metadata
		 * Required
		 */
		multi_document_risk_signals: Array<MultiDocumentRiskSignal>;

		/**
		 * Array of document metadata and associated risk signals per document
		 * Required
		 */
		single_document_risk_signals: Array<SingleDocumentRiskSignal>;
	}

	/** Object containing fraud risk data for a set of income documents. */
	export interface DocumentRiskSignalsObjectFormProperties {

		/**
		 * ID of the payroll provider account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,
	}
	export function CreateDocumentRiskSignalsObjectFormGroup() {
		return new FormGroup<DocumentRiskSignalsObjectFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object containing risk signals and relevant metadata for a set of uploaded documents */
	export interface MultiDocumentRiskSignal {

		/**
		 * Array of objects containing attributes that could indicate if a document is fraudulent
		 * Required
		 */
		document_references: Array<RiskSignalDocumentReference>;

		/**
		 * Array of attributes that indicate whether or not there is fraud risk with a set of documents
		 * Required
		 */
		risk_signals: Array<DocumentRiskSignal>;
	}

	/** Object containing risk signals and relevant metadata for a set of uploaded documents */
	export interface MultiDocumentRiskSignalFormProperties {
	}
	export function CreateMultiDocumentRiskSignalFormGroup() {
		return new FormGroup<MultiDocumentRiskSignalFormProperties>({
		});

	}


	/** Object containing metadata for the document */
	export interface RiskSignalDocumentReference {

		/** An identifier of the document referenced by the document metadata. */
		document_id?: string | null;

		/** The name of the document */
		document_name?: string | null;
	}

	/** Object containing metadata for the document */
	export interface RiskSignalDocumentReferenceFormProperties {

		/** An identifier of the document referenced by the document metadata. */
		document_id: FormControl<string | null | undefined>,

		/** The name of the document */
		document_name: FormControl<string | null | undefined>,
	}
	export function CreateRiskSignalDocumentReferenceFormGroup() {
		return new FormGroup<RiskSignalDocumentReferenceFormProperties>({
			document_id: new FormControl<string | null | undefined>(undefined),
			document_name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details about a certain reason as to why a document could potentially be fraudulent. */
	export interface DocumentRiskSignal {

		/**
		 * The derived value obtained in the risk signal calculation process for this field
		 * Required
		 */
		actual_value: string;

		/**
		 * The expected value of the field, as seen on the document
		 * Required
		 */
		expected_value: string;

		/**
		 * The field which the risk signal was computed for
		 * Required
		 */
		field: string;

		/**
		 * A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
		 * Required
		 */
		has_fraud_risk: boolean;

		/**
		 * An object which contains additional metadata about the institution used to compute the verification attribute
		 * Required
		 */
		institution_metadata: DocumentRiskSignalInstitutionMetadata;

		/**
		 * The relevant page associated with the risk signal
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		page_number: number;

		/**
		 * A human-readable explanation providing more detail into the particular risk signal
		 * Required
		 */
		signal_description: string;

		/**
		 * The result from the risk signal check.
		 * Required
		 */
		type: string;
	}

	/** Details about a certain reason as to why a document could potentially be fraudulent. */
	export interface DocumentRiskSignalFormProperties {

		/**
		 * The derived value obtained in the risk signal calculation process for this field
		 * Required
		 */
		actual_value: FormControl<string | null | undefined>,

		/**
		 * The expected value of the field, as seen on the document
		 * Required
		 */
		expected_value: FormControl<string | null | undefined>,

		/**
		 * The field which the risk signal was computed for
		 * Required
		 */
		field: FormControl<string | null | undefined>,

		/**
		 * A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
		 * Required
		 */
		has_fraud_risk: FormControl<boolean | null | undefined>,

		/**
		 * The relevant page associated with the risk signal
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		page_number: FormControl<number | null | undefined>,

		/**
		 * A human-readable explanation providing more detail into the particular risk signal
		 * Required
		 */
		signal_description: FormControl<string | null | undefined>,

		/**
		 * The result from the risk signal check.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateDocumentRiskSignalFormGroup() {
		return new FormGroup<DocumentRiskSignalFormProperties>({
			actual_value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expected_value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			field: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			has_fraud_risk: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			page_number: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			signal_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object which contains additional metadata about the institution used to compute the verification attribute */
	export interface DocumentRiskSignalInstitutionMetadata {

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;
	}

	/** An object which contains additional metadata about the institution used to compute the verification attribute */
	export interface DocumentRiskSignalInstitutionMetadataFormProperties {

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,
	}
	export function CreateDocumentRiskSignalInstitutionMetadataFormGroup() {
		return new FormGroup<DocumentRiskSignalInstitutionMetadataFormProperties>({
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object containing all risk signals and relevant metadata for a single document */
	export interface SingleDocumentRiskSignal {

		/**
		 * Object containing metadata for the document
		 * Required
		 */
		document_reference: RiskSignalDocumentReference;

		/**
		 * Array of attributes that indicate whether or not there is fraud risk with a document
		 * Required
		 */
		risk_signals: Array<DocumentRiskSignal>;

		/**
		 * A summary across all risk signals associated with a document
		 * Required
		 */
		risk_summary: DocumentRiskSummary;
	}

	/** Object containing all risk signals and relevant metadata for a single document */
	export interface SingleDocumentRiskSignalFormProperties {
	}
	export function CreateSingleDocumentRiskSignalFormGroup() {
		return new FormGroup<SingleDocumentRiskSignalFormProperties>({
		});

	}


	/** A summary across all risk signals associated with a document */
	export interface DocumentRiskSummary {

		/**
		 * A number between 0 and 100, inclusive, where a score closer to 0 indicates a document is likely to be trustworthy and a score closer to 100 indicates a document is likely to be fraudulent
		 * Required
		 * Type: double
		 */
		risk_score: number;
	}

	/** A summary across all risk signals associated with a document */
	export interface DocumentRiskSummaryFormProperties {

		/**
		 * A number between 0 and 100, inclusive, where a score closer to 0 indicates a document is likely to be trustworthy and a score closer to 100 indicates a document is likely to be fraudulent
		 * Required
		 * Type: double
		 */
		risk_score: FormControl<number | null | undefined>,
	}
	export function CreateDocumentRiskSummaryFormGroup() {
		return new FormGroup<DocumentRiskSummaryFormProperties>({
			risk_score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditRelayCreateRequest defines the request schema for `/credit/relay/create` */
	export interface CreditRelayCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * List of report token strings, with at most one token of each report type. Currently only Asset Report token is supported.
		 * Required
		 */
		report_tokens: Array<string>;

		/**
		 * The `secondary_client_id` is the client id of the third party with whom you would like to share the relay token.
		 * Required
		 */
		secondary_client_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** URL to which Plaid will send webhooks when the Secondary Client successfully retrieves an Asset Report by calling `/credit/relay/get`. */
		webhook?: string | null;
	}

	/** CreditRelayCreateRequest defines the request schema for `/credit/relay/create` */
	export interface CreditRelayCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The `secondary_client_id` is the client id of the third party with whom you would like to share the relay token.
		 * Required
		 */
		secondary_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** URL to which Plaid will send webhooks when the Secondary Client successfully retrieves an Asset Report by calling `/credit/relay/get`. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateCreditRelayCreateRequestFormGroup() {
		return new FormGroup<CreditRelayCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secondary_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditRelayCreateResponse defines the response schema for `/credit/relay/create` */
	export interface CreditRelayCreateResponse {

		/**
		 * A token that can be shared with a third party to allow them to access the Asset Report. This token should be stored securely.
		 * Required
		 */
		relay_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditRelayCreateResponse defines the response schema for `/credit/relay/create` */
	export interface CreditRelayCreateResponseFormProperties {

		/**
		 * A token that can be shared with a third party to allow them to access the Asset Report. This token should be stored securely.
		 * Required
		 */
		relay_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditRelayCreateResponseFormGroup() {
		return new FormGroup<CreditRelayCreateResponseFormProperties>({
			relay_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditRelayGetRequest defines the request schema for `/credit/relay/get` */
	export interface CreditRelayGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The `relay_token` granting access to the report you would like to get.
		 * Required
		 */
		relay_token: string;

		/**
		 * The report type. It can be `assets` or `income`.
		 * Required
		 */
		report_type: CreditRelayGetRequestReport_type;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** CreditRelayGetRequest defines the request schema for `/credit/relay/get` */
	export interface CreditRelayGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The `relay_token` granting access to the report you would like to get.
		 * Required
		 */
		relay_token: FormControl<string | null | undefined>,

		/**
		 * The report type. It can be `assets` or `income`.
		 * Required
		 */
		report_type: FormControl<CreditRelayGetRequestReport_type | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateCreditRelayGetRequestFormGroup() {
		return new FormGroup<CreditRelayGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			relay_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			report_type: new FormControl<CreditRelayGetRequestReport_type | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum CreditRelayGetRequestReport_type { assets = 'assets', income = 'income' }


	/** CreditRelayRefreshRequest defines the request schema for `/credit/relay/refresh` */
	export interface CreditRelayRefreshRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The `relay_token` granting access to the report you would like to refresh.
		 * Required
		 */
		relay_token: string;

		/**
		 * The report type. It can be `assets` or `income`.
		 * Required
		 */
		report_type: CreditRelayGetRequestReport_type;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The URL registered to receive webhooks when the report of a relay token has been refreshed. */
		webhook?: string | null;
	}

	/** CreditRelayRefreshRequest defines the request schema for `/credit/relay/refresh` */
	export interface CreditRelayRefreshRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The `relay_token` granting access to the report you would like to refresh.
		 * Required
		 */
		relay_token: FormControl<string | null | undefined>,

		/**
		 * The report type. It can be `assets` or `income`.
		 * Required
		 */
		report_type: FormControl<CreditRelayGetRequestReport_type | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The URL registered to receive webhooks when the report of a relay token has been refreshed. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateCreditRelayRefreshRequestFormGroup() {
		return new FormGroup<CreditRelayRefreshRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			relay_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			report_type: new FormControl<CreditRelayGetRequestReport_type | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditRelayRefreshResponse defines the response schema for `/credit/relay/refresh` */
	export interface CreditRelayRefreshResponse {

		/** A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive. */
		asset_report_id?: string | null;

		/** Required */
		relay_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditRelayRefreshResponse defines the response schema for `/credit/relay/refresh` */
	export interface CreditRelayRefreshResponseFormProperties {

		/** A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive. */
		asset_report_id: FormControl<string | null | undefined>,

		/** Required */
		relay_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditRelayRefreshResponseFormGroup() {
		return new FormGroup<CreditRelayRefreshResponseFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined),
			relay_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditRelayRemoveRequest defines the request schema for `/credit/relay/remove` */
	export interface CreditRelayRemoveRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The `relay_token` you would like to revoke.
		 * Required
		 */
		relay_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** CreditRelayRemoveRequest defines the request schema for `/credit/relay/remove` */
	export interface CreditRelayRemoveRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The `relay_token` you would like to revoke.
		 * Required
		 */
		relay_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateCreditRelayRemoveRequestFormGroup() {
		return new FormGroup<CreditRelayRemoveRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			relay_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** CreditRelayRemoveResponse defines the response schema for `/credit/relay/remove` */
	export interface CreditRelayRemoveResponse {

		/**
		 * `true` if the relay token was successfully removed.
		 * Required
		 */
		removed: boolean;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** CreditRelayRemoveResponse defines the response schema for `/credit/relay/remove` */
	export interface CreditRelayRemoveResponseFormProperties {

		/**
		 * `true` if the relay token was successfully removed.
		 * Required
		 */
		removed: FormControl<boolean | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditRelayRemoveResponseFormGroup() {
		return new FormGroup<CreditRelayRemoveResponseFormProperties>({
			removed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Metadata and results for a Link session */
	export interface CreditSession {

		/** The set of errors that occurred during the Link session. */
		errors?: Array<CreditSessionError>;

		/** The unique identifier associated with the Link session. This identifier matches the `link_session_id` returned in the onSuccess/onExit callbacks. */
		link_session_id?: string | null;

		/** The set of results for a Link session. */
		results?: CreditSessionResults;

		/** The time when the Link session started */
		session_start_time?: Date | null;
	}

	/** Metadata and results for a Link session */
	export interface CreditSessionFormProperties {

		/** The unique identifier associated with the Link session. This identifier matches the `link_session_id` returned in the onSuccess/onExit callbacks. */
		link_session_id: FormControl<string | null | undefined>,

		/** The time when the Link session started */
		session_start_time: FormControl<Date | null | undefined>,
	}
	export function CreateCreditSessionFormGroup() {
		return new FormGroup<CreditSessionFormProperties>({
			link_session_id: new FormControl<string | null | undefined>(undefined),
			session_start_time: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The details of a Link error. */
	export interface CreditSessionError {

		/** A user-friendly representation of the error code. `null` if the error is not related to user action. */
		display_message?: string | null;

		/** The particular error code. */
		error_code?: string | null;

		/** A developer-friendly representation of the error code. */
		error_message?: string | null;

		/** A broad categorization of the error. */
		error_type?: string | null;
	}

	/** The details of a Link error. */
	export interface CreditSessionErrorFormProperties {

		/** A user-friendly representation of the error code. `null` if the error is not related to user action. */
		display_message: FormControl<string | null | undefined>,

		/** The particular error code. */
		error_code: FormControl<string | null | undefined>,

		/** A developer-friendly representation of the error code. */
		error_message: FormControl<string | null | undefined>,

		/** A broad categorization of the error. */
		error_type: FormControl<string | null | undefined>,
	}
	export function CreateCreditSessionErrorFormGroup() {
		return new FormGroup<CreditSessionErrorFormProperties>({
			display_message: new FormControl<string | null | undefined>(undefined),
			error_code: new FormControl<string | null | undefined>(undefined),
			error_message: new FormControl<string | null | undefined>(undefined),
			error_type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The set of results for a Link session. */
	export interface CreditSessionResults {

		/** The set of bank employment verifications for the Link session. */
		bank_employment_results?: Array<CreditSessionBankEmploymentResult>;

		/** The set of bank income verifications for the Link session. */
		bank_income_results?: Array<CreditSessionBankIncomeResult>;

		/** The details of a document income verification in Link */
		document_income_results?: CreditSessionDocumentIncomeResult;

		/** The set of Item adds for the Link session. */
		item_add_results?: Array<CreditSessionItemAddResult>;

		/** The set of payroll income verifications for the Link session. */
		payroll_income_results?: Array<CreditSessionPayrollIncomeResult>;
	}

	/** The set of results for a Link session. */
	export interface CreditSessionResultsFormProperties {
	}
	export function CreateCreditSessionResultsFormGroup() {
		return new FormGroup<CreditSessionResultsFormProperties>({
		});

	}


	/** The details of a bank employment verification in Link. */
	export interface CreditSessionBankEmploymentResult {

		/** The Plaid Institution ID associated with the Item. */
		institution_id?: string | null;

		/** The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
		item_id?: string | null;

		/**
		 * The terminal status of the bank employment verification.
		 * `APPROVED`: User has approved and verified their employment.
		 * `NO_EMPLOYMENTS_FOUND`: We attempted, but were unable to find any employment in the connected account.
		 * `EMPLOYER_NOT_LISTED`: The user explicitly indicated that they did not see their current or previous employer in the list of employer names found.
		 */
		status?: CreditSessionBankEmploymentResultStatus | null;
	}

	/** The details of a bank employment verification in Link. */
	export interface CreditSessionBankEmploymentResultFormProperties {

		/** The Plaid Institution ID associated with the Item. */
		institution_id: FormControl<string | null | undefined>,

		/** The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The terminal status of the bank employment verification.
		 * `APPROVED`: User has approved and verified their employment.
		 * `NO_EMPLOYMENTS_FOUND`: We attempted, but were unable to find any employment in the connected account.
		 * `EMPLOYER_NOT_LISTED`: The user explicitly indicated that they did not see their current or previous employer in the list of employer names found.
		 */
		status: FormControl<CreditSessionBankEmploymentResultStatus | null | undefined>,
	}
	export function CreateCreditSessionBankEmploymentResultFormGroup() {
		return new FormGroup<CreditSessionBankEmploymentResultFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<CreditSessionBankEmploymentResultStatus | null | undefined>(undefined),
		});

	}

	export enum CreditSessionBankEmploymentResultStatus { APPROVED = 'APPROVED', NO_EMPLOYERS_FOUND = 'NO_EMPLOYERS_FOUND', EMPLOYER_NOT_LISTED = 'EMPLOYER_NOT_LISTED' }


	/** The details of a bank income verification in Link */
	export interface CreditSessionBankIncomeResult {

		/** The Plaid Institution ID associated with the Item. */
		institution_id?: string | null;

		/** The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
		item_id?: string | null;

		/**
		 * The terminal status of the bank income verification.
		 * `APPROVED`: User has approved and verified their income
		 * `NO_DEPOSITS_FOUND`: We attempted, but were unable to find any income in the connected account.
		 * `USER_REPORTED_NO_INCOME`: The user explicitly indicated that they don't receive income in the connected account.
		 */
		status?: CreditSessionBankIncomeResultStatus | null;
	}

	/** The details of a bank income verification in Link */
	export interface CreditSessionBankIncomeResultFormProperties {

		/** The Plaid Institution ID associated with the Item. */
		institution_id: FormControl<string | null | undefined>,

		/** The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The terminal status of the bank income verification.
		 * `APPROVED`: User has approved and verified their income
		 * `NO_DEPOSITS_FOUND`: We attempted, but were unable to find any income in the connected account.
		 * `USER_REPORTED_NO_INCOME`: The user explicitly indicated that they don't receive income in the connected account.
		 */
		status: FormControl<CreditSessionBankIncomeResultStatus | null | undefined>,
	}
	export function CreateCreditSessionBankIncomeResultFormGroup() {
		return new FormGroup<CreditSessionBankIncomeResultFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<CreditSessionBankIncomeResultStatus | null | undefined>(undefined),
		});

	}

	export enum CreditSessionBankIncomeResultStatus { APPROVED = 'APPROVED', NO_DEPOSITS_FOUND = 'NO_DEPOSITS_FOUND', USER_REPORTED_NO_INCOME = 'USER_REPORTED_NO_INCOME' }


	/** The details of a document income verification in Link */
	export interface CreditSessionDocumentIncomeResult {

		/**
		 * The number of paystubs uploaded by the user.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_paystubs_uploaded: number;

		/**
		 * The number of w2s uploaded by the user.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_w2s_uploaded: number;
	}

	/** The details of a document income verification in Link */
	export interface CreditSessionDocumentIncomeResultFormProperties {

		/**
		 * The number of paystubs uploaded by the user.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_paystubs_uploaded: FormControl<number | null | undefined>,

		/**
		 * The number of w2s uploaded by the user.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_w2s_uploaded: FormControl<number | null | undefined>,
	}
	export function CreateCreditSessionDocumentIncomeResultFormGroup() {
		return new FormGroup<CreditSessionDocumentIncomeResultFormProperties>({
			num_paystubs_uploaded: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			num_w2s_uploaded: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The details of an Item add in Link. */
	export interface CreditSessionItemAddResult {

		/** The Plaid Institution ID associated with the Item. */
		institution_id?: string | null;

		/** The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
		item_id?: string | null;

		/** Returned once a user has successfully linked their Item. */
		public_token?: string | null;
	}

	/** The details of an Item add in Link. */
	export interface CreditSessionItemAddResultFormProperties {

		/** The Plaid Institution ID associated with the Item. */
		institution_id: FormControl<string | null | undefined>,

		/** The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
		item_id: FormControl<string | null | undefined>,

		/** Returned once a user has successfully linked their Item. */
		public_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditSessionItemAddResultFormGroup() {
		return new FormGroup<CreditSessionItemAddResultFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			public_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The details of a digital payroll income verification in Link */
	export interface CreditSessionPayrollIncomeResult {

		/** The Plaid Institution ID associated with the Item. */
		institution_id?: string | null;

		/** The Institution Name associated with the Item. */
		institution_name?: string | null;

		/**
		 * The number of paystubs retrieved from a payroll provider.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_paystubs_retrieved?: number | null;

		/**
		 * The number of w2s retrieved from a payroll provider.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_w2s_retrieved?: number | null;
	}

	/** The details of a digital payroll income verification in Link */
	export interface CreditSessionPayrollIncomeResultFormProperties {

		/** The Plaid Institution ID associated with the Item. */
		institution_id: FormControl<string | null | undefined>,

		/** The Institution Name associated with the Item. */
		institution_name: FormControl<string | null | undefined>,

		/**
		 * The number of paystubs retrieved from a payroll provider.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_paystubs_retrieved: FormControl<number | null | undefined>,

		/**
		 * The number of w2s retrieved from a payroll provider.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		num_w2s_retrieved: FormControl<number | null | undefined>,
	}
	export function CreateCreditSessionPayrollIncomeResultFormGroup() {
		return new FormGroup<CreditSessionPayrollIncomeResultFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined),
			institution_name: new FormControl<string | null | undefined>(undefined),
			num_paystubs_retrieved: new FormControl<number | null | undefined>(undefined),
			num_w2s_retrieved: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * The terminal status of the bank employment verification.
	 * `APPROVED`: User has approved and verified their employment.
	 * `NO_EMPLOYMENTS_FOUND`: We attempted, but were unable to find any employment in the connected account.
	 * `EMPLOYER_NOT_LISTED`: The user explicitly indicated that they did not see their current or previous employer in the list of employer names found.
	 */
	export enum CreditSessionBankEmploymentStatus { APPROVED = 'APPROVED', NO_EMPLOYERS_FOUND = 'NO_EMPLOYERS_FOUND', EMPLOYER_NOT_LISTED = 'EMPLOYER_NOT_LISTED' }


	/**
	 * The terminal status of the bank income verification.
	 * `APPROVED`: User has approved and verified their income
	 * `NO_DEPOSITS_FOUND`: We attempted, but were unable to find any income in the connected account.
	 * `USER_REPORTED_NO_INCOME`: The user explicitly indicated that they don't receive income in the connected account.
	 */
	export enum CreditSessionBankIncomeStatus { APPROVED = 'APPROVED', NO_DEPOSITS_FOUND = 'NO_DEPOSITS_FOUND', USER_REPORTED_NO_INCOME = 'USER_REPORTED_NO_INCOME' }


	/** CreditSessionsGetRequest defines the request schema for `/credit/sessions/get` */
	export interface CreditSessionsGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: string;
	}

	/** CreditSessionsGetRequest defines the request schema for `/credit/sessions/get` */
	export interface CreditSessionsGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateCreditSessionsGetRequestFormGroup() {
		return new FormGroup<CreditSessionsGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** CreditSessionsGetResponse defines the response schema for `/credit/sessions/get` */
	export interface CreditSessionsGetResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** A list of Link sessions for the user. Sessions will be sorted in reverse chronological order. */
		sessions?: Array<CreditSession>;
	}

	/** CreditSessionsGetResponse defines the response schema for `/credit/sessions/get` */
	export interface CreditSessionsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateCreditSessionsGetResponseFormGroup() {
		return new FormGroup<CreditSessionsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: "R05", "R07", "R10", "R11", "R29". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized. */
	export interface CustomerInitiatedReturnRisk {

		/**
		 * A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.
		 * In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:
		 * 1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%
		 * 2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%
		 * 3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%
		 * 4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%
		 * 5: Predicted customer-initiated return incidence rate greater than 0.5%
		 * Required
		 * Minimum: 1
		 * Maximum: 5
		 */
		risk_tier: number;

		/**
		 * A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
		 * Required
		 * Minimum: 1
		 * Maximum: 99
		 */
		score: number;
	}

	/** The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: "R05", "R07", "R10", "R11", "R29". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized. */
	export interface CustomerInitiatedReturnRiskFormProperties {

		/**
		 * A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.
		 * In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:
		 * 1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%
		 * 2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%
		 * 3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%
		 * 4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%
		 * 5: Predicted customer-initiated return incidence rate greater than 0.5%
		 * Required
		 * Minimum: 1
		 * Maximum: 5
		 */
		risk_tier: FormControl<number | null | undefined>,

		/**
		 * A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
		 * Required
		 * Minimum: 1
		 * Maximum: 99
		 */
		score: FormControl<number | null | undefined>,
	}
	export function CreateCustomerInitiatedReturnRiskFormGroup() {
		return new FormGroup<CustomerInitiatedReturnRiskFormProperties>({
			risk_tier: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1), Validators.max(5)]),
			score: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1), Validators.max(99)]),
		});

	}


	/** Account information associated with a team member with access to the Plaid dashboard. */
	export interface DashboardUser {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: string;

		/**
		 * ID of the associated user.
		 * Required
		 */
		id: string;

		/**
		 * The current status of the user.
		 * Required
		 */
		status: DashboardUserStatus;
	}

	/** Account information associated with a team member with access to the Plaid dashboard. */
	export interface DashboardUserFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/**
		 * ID of the associated user.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The current status of the user.
		 * Required
		 */
		status: FormControl<DashboardUserStatus | null | undefined>,
	}
	export function CreateDashboardUserFormGroup() {
		return new FormGroup<DashboardUserFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<DashboardUserStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DashboardUserStatus { invited = 'invited', active = 'active', deactivated = 'deactivated' }


	/** Request input for fetching a dashboard user */
	export interface DashboardUserGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * ID of the associated user.
		 * Required
		 */
		dashboard_user_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for fetching a dashboard user */
	export interface DashboardUserGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated user.
		 * Required
		 */
		dashboard_user_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateDashboardUserGetRequestFormGroup() {
		return new FormGroup<DashboardUserGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			dashboard_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Account information associated with a team member with access to the Plaid dashboard. */
	export interface DashboardUserGetResponse {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: string;

		/**
		 * ID of the associated user.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The current status of the user.
		 * Required
		 */
		status: DashboardUserStatus;
	}

	/** Account information associated with a team member with access to the Plaid dashboard. */
	export interface DashboardUserGetResponseFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/**
		 * ID of the associated user.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The current status of the user.
		 * Required
		 */
		status: FormControl<DashboardUserStatus | null | undefined>,
	}
	export function CreateDashboardUserGetResponseFormGroup() {
		return new FormGroup<DashboardUserGetResponseFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<DashboardUserStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing dashboard users */
	export interface DashboardUserListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for listing dashboard users */
	export interface DashboardUserListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateDashboardUserListRequestFormGroup() {
		return new FormGroup<DashboardUserListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Paginated list of dashboard users */
	export interface DashboardUserListResponse {

		/**
		 * List of dashboard users
		 * Required
		 */
		dashboard_users: Array<DashboardUser>;

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Paginated list of dashboard users */
	export interface DashboardUserListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateDashboardUserListResponseFormGroup() {
		return new FormGroup<DashboardUserListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A date range with a start and end date */
	export interface DateRange {

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		beginning: Date;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		ending: Date;
	}

	/** A date range with a start and end date */
	export interface DateRangeFormProperties {

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		beginning: FormControl<Date | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		ending: FormControl<Date | null | undefined>,
	}
	export function CreateDateRangeFormGroup() {
		return new FormGroup<DateRangeFormProperties>({
			beginning: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ending: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object with the deduction information found on a paystub. */
	export interface Deductions {

		/** Required */
		breakdown: Array<DeductionsBreakdown>;
		subtotals?: Array<Total>;

		/**
		 * An object representing the total deductions for the pay period
		 * Required
		 */
		total: DeductionsTotal;
		totals?: Array<Total>;
	}

	/** An object with the deduction information found on a paystub. */
	export interface DeductionsFormProperties {
	}
	export function CreateDeductionsFormGroup() {
		return new FormGroup<DeductionsFormProperties>({
		});

	}


	/** An object representing the deduction line items for the pay period */
	export interface DeductionsBreakdown {

		/**
		 * Raw amount of the deduction
		 * Type: double
		 */
		current_amount?: number | null;

		/** Description of the deduction line item */
		description?: string | null;

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code?: string | null;

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code?: string | null;

		/**
		 * The year-to-date amount of the deduction
		 * Type: double
		 */
		ytd_amount?: number | null;
	}

	/** An object representing the deduction line items for the pay period */
	export interface DeductionsBreakdownFormProperties {

		/**
		 * Raw amount of the deduction
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/** Description of the deduction line item */
		description: FormControl<string | null | undefined>,

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date amount of the deduction
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreateDeductionsBreakdownFormGroup() {
		return new FormGroup<DeductionsBreakdownFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
			ytd_amount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An object representing both the current pay period and year to date amount for a category. */
	export interface Total {

		/** Commonly used term to describe the line item. */
		canonical_description?: TotalCanonical_description | null;

		/** An object representing a monetary amount. */
		current_pay?: Pay;

		/** Text of the line item as printed on the paystub. */
		description?: string | null;

		/** An object representing a monetary amount. */
		ytd_pay?: Pay;
	}

	/** An object representing both the current pay period and year to date amount for a category. */
	export interface TotalFormProperties {

		/** Commonly used term to describe the line item. */
		canonical_description: FormControl<TotalCanonical_description | null | undefined>,

		/** Text of the line item as printed on the paystub. */
		description: FormControl<string | null | undefined>,
	}
	export function CreateTotalFormGroup() {
		return new FormGroup<TotalFormProperties>({
			canonical_description: new FormControl<TotalCanonical_description | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TotalCanonical_description { BONUS = 'BONUS', COMMISSION = 'COMMISSION', OVERTIME = 'OVERTIME', 'PAID TIME OFF' = 'PAID TIME OFF', 'REGULAR PAY' = 'REGULAR PAY', VACATION = 'VACATION', 'EMPLOYEE MEDICARE' = 'EMPLOYEE MEDICARE', FICA = 'FICA', 'SOCIAL SECURITY EMPLOYEE TAX' = 'SOCIAL SECURITY EMPLOYEE TAX', MEDICAL = 'MEDICAL', VISION = 'VISION', DENTAL = 'DENTAL', 'NET PAY' = 'NET PAY', TAXES = 'TAXES', NOT_FOUND = 'NOT_FOUND', OTHER = 'OTHER', _null = 16 }


	/** An object representing a monetary amount. */
	export interface Pay {

		/**
		 * A numerical amount of a specific currency.
		 * Type: double
		 */
		amount?: number | null;

		/** Currency code, e.g. USD */
		currency?: string | null;
	}

	/** An object representing a monetary amount. */
	export interface PayFormProperties {

		/**
		 * A numerical amount of a specific currency.
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** Currency code, e.g. USD */
		currency: FormControl<string | null | undefined>,
	}
	export function CreatePayFormGroup() {
		return new FormGroup<PayFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			currency: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An object representing the total deductions for the pay period */
	export interface DeductionsTotal {

		/**
		 * Raw amount of the deduction
		 * Type: double
		 */
		current_amount?: number | null;

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code?: string | null;

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code?: string | null;

		/**
		 * The year-to-date total amount of the deductions
		 * Type: double
		 */
		ytd_amount?: number | null;
	}

	/** An object representing the total deductions for the pay period */
	export interface DeductionsTotalFormProperties {

		/**
		 * Raw amount of the deduction
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date total amount of the deductions
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreateDeductionsTotalFormGroup() {
		return new FormGroup<DeductionsTotalFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
			ytd_amount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * Fired when new transaction data is available for an Item. Plaid will typically check for new transaction data several times a day.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface DefaultUpdateWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item the webhook relates to.
		 * Required
		 */
		item_id: string;

		/**
		 * The number of new transactions detected since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		new_transactions: number;

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: string;
	}

	/**
	 * Fired when new transaction data is available for an Item. Plaid will typically check for new transaction data several times a day.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface DefaultUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item the webhook relates to.
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The number of new transactions detected since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		new_transactions: FormControl<number | null | undefined>,

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateDefaultUpdateWebhookFormGroup() {
		return new FormGroup<DefaultUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			new_transactions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The user's address. */
	export interface DepositSwitchAddressData {

		/**
		 * The full city name
		 * Required
		 */
		city: string;

		/**
		 * The ISO 3166-1 alpha-2 country code
		 * Required
		 */
		country: string;

		/**
		 * The postal code
		 * Required
		 */
		postal_code: string;

		/**
		 * The region or state
		 * Example: `"NC"`
		 * Required
		 */
		region: string;

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 * Required
		 */
		street: string;
	}

	/** The user's address. */
	export interface DepositSwitchAddressDataFormProperties {

		/**
		 * The full city name
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166-1 alpha-2 country code
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state
		 * Example: `"NC"`
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 * Required
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchAddressDataFormGroup() {
		return new FormGroup<DepositSwitchAddressDataFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create` */
	export interface DepositSwitchAltCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** ISO-3166-1 alpha-2 country code standard. */
		country_code?: DepositSwitchAltCreateRequestCountry_code | null;

		/** Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`. */
		options?: DepositSwitchCreateRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The deposit switch destination account
		 * Required
		 */
		target_account: DepositSwitchTargetAccount;

		/**
		 * The deposit switch target user
		 * Required
		 */
		target_user: DepositSwitchTargetUser;
	}

	/** DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create` */
	export interface DepositSwitchAltCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** ISO-3166-1 alpha-2 country code standard. */
		country_code: FormControl<DepositSwitchAltCreateRequestCountry_code | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchAltCreateRequestFormGroup() {
		return new FormGroup<DepositSwitchAltCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<DepositSwitchAltCreateRequestCountry_code | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DepositSwitchAltCreateRequestCountry_code { US = 'US', CA = 'CA' }


	/** Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`. */
	export interface DepositSwitchCreateRequestOptions {

		/**
		 * An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product.
		 * Minimum items: 1
		 * Maximum items: 99
		 */
		transaction_item_access_tokens?: Array<string>;

		/**
		 * The URL registered to receive webhooks when the status of a deposit switch request has changed.
		 */
		webhook?: string | null;
	}

	/** Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`. */
	export interface DepositSwitchCreateRequestOptionsFormProperties {

		/**
		 * The URL registered to receive webhooks when the status of a deposit switch request has changed.
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchCreateRequestOptionsFormGroup() {
		return new FormGroup<DepositSwitchCreateRequestOptionsFormProperties>({
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The deposit switch destination account */
	export interface DepositSwitchTargetAccount {

		/**
		 * The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking.
		 * Required
		 */
		account_name: string;

		/**
		 * Account number for deposit switch destination
		 * Required
		 */
		account_number: string;

		/**
		 * The account subtype of the account, either `checking` or `savings`.
		 * Required
		 */
		account_subtype: DepositSwitchTargetAccountAccount_subtype;

		/**
		 * Routing number for deposit switch destination
		 * Required
		 */
		routing_number: string;
	}

	/** The deposit switch destination account */
	export interface DepositSwitchTargetAccountFormProperties {

		/**
		 * The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking.
		 * Required
		 */
		account_name: FormControl<string | null | undefined>,

		/**
		 * Account number for deposit switch destination
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The account subtype of the account, either `checking` or `savings`.
		 * Required
		 */
		account_subtype: FormControl<DepositSwitchTargetAccountAccount_subtype | null | undefined>,

		/**
		 * Routing number for deposit switch destination
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchTargetAccountFormGroup() {
		return new FormGroup<DepositSwitchTargetAccountFormProperties>({
			account_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_subtype: new FormControl<DepositSwitchTargetAccountAccount_subtype | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DepositSwitchTargetAccountAccount_subtype { checking = 'checking', savings = 'savings' }


	/** The deposit switch target user */
	export interface DepositSwitchTargetUser {

		/** The user's address. */
		address?: DepositSwitchAddressData;

		/**
		 * The email address of the user.
		 * Required
		 */
		email: string;

		/**
		 * The family name (last name) of the user.
		 * Required
		 */
		family_name: string;

		/**
		 * The given name (first name) of the user.
		 * Required
		 */
		given_name: string;

		/**
		 * The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164.
		 * Required
		 */
		phone: string;

		/** The taxpayer ID of the user, generally their SSN, EIN, or TIN. */
		tax_payer_id?: string | null;
	}

	/** The deposit switch target user */
	export interface DepositSwitchTargetUserFormProperties {

		/**
		 * The email address of the user.
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The family name (last name) of the user.
		 * Required
		 */
		family_name: FormControl<string | null | undefined>,

		/**
		 * The given name (first name) of the user.
		 * Required
		 */
		given_name: FormControl<string | null | undefined>,

		/**
		 * The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164.
		 * Required
		 */
		phone: FormControl<string | null | undefined>,

		/** The taxpayer ID of the user, generally their SSN, EIN, or TIN. */
		tax_payer_id: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchTargetUserFormGroup() {
		return new FormGroup<DepositSwitchTargetUserFormProperties>({
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			family_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			given_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tax_payer_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** DepositSwitchAltCreateResponse defines the response schema for `/deposit_switch/alt/create` */
	export interface DepositSwitchAltCreateResponse {

		/**
		 * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.
		 * Required
		 */
		deposit_switch_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** DepositSwitchAltCreateResponse defines the response schema for `/deposit_switch/alt/create` */
	export interface DepositSwitchAltCreateResponseFormProperties {

		/**
		 * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.
		 * Required
		 */
		deposit_switch_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchAltCreateResponseFormGroup() {
		return new FormGroup<DepositSwitchAltCreateResponseFormProperties>({
			deposit_switch_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** DepositSwitchCreateRequest defines the request schema for `/deposit_switch/create` */
	export interface DepositSwitchCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** ISO-3166-1 alpha-2 country code standard. */
		country_code?: DepositSwitchAltCreateRequestCountry_code | null;

		/** Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`. */
		options?: DepositSwitchCreateRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Access token for the target Item, typically provided in the Import Item response.
		 * Required
		 */
		target_access_token: string;

		/**
		 * Plaid Account ID that specifies the target bank account. This account will become the recipient for a user's direct deposit.
		 * Required
		 */
		target_account_id: string;
	}

	/** DepositSwitchCreateRequest defines the request schema for `/deposit_switch/create` */
	export interface DepositSwitchCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** ISO-3166-1 alpha-2 country code standard. */
		country_code: FormControl<DepositSwitchAltCreateRequestCountry_code | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Access token for the target Item, typically provided in the Import Item response.
		 * Required
		 */
		target_access_token: FormControl<string | null | undefined>,

		/**
		 * Plaid Account ID that specifies the target bank account. This account will become the recipient for a user's direct deposit.
		 * Required
		 */
		target_account_id: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchCreateRequestFormGroup() {
		return new FormGroup<DepositSwitchCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<DepositSwitchAltCreateRequestCountry_code | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			target_access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			target_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** DepositSwitchCreateResponse defines the response schema for `/deposit_switch/create` */
	export interface DepositSwitchCreateResponse {

		/**
		 * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.
		 * Required
		 */
		deposit_switch_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** DepositSwitchCreateResponse defines the response schema for `/deposit_switch/create` */
	export interface DepositSwitchCreateResponseFormProperties {

		/**
		 * ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch.
		 * Required
		 */
		deposit_switch_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchCreateResponseFormGroup() {
		return new FormGroup<DepositSwitchCreateResponseFormProperties>({
			deposit_switch_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** DepositSwitchGetRequest defines the request schema for `/deposit_switch/get` */
	export interface DepositSwitchGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The ID of the deposit switch
		 * Required
		 */
		deposit_switch_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** DepositSwitchGetRequest defines the request schema for `/deposit_switch/get` */
	export interface DepositSwitchGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the deposit switch
		 * Required
		 */
		deposit_switch_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchGetRequestFormGroup() {
		return new FormGroup<DepositSwitchGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			deposit_switch_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** DepositSwitchGetResponse defines the response schema for `/deposit_switch/get` */
	export interface DepositSwitchGetResponse {

		/**
		 * When `true`, userâ€™s direct deposit goes to multiple banks. When false, userâ€™s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.
		 * Required
		 */
		account_has_multiple_allocations: boolean;

		/**
		 * The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
		 * Required
		 * Type: double
		 */
		amount_allocated: number;

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed.
		 * Required
		 * Type: DateOnly
		 */
		date_completed: Date;

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created.
		 * Required
		 * Type: DateOnly
		 */
		date_created: Date;

		/**
		 * The ID of the deposit switch.
		 * Required
		 */
		deposit_switch_id: string;

		/** The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
		employer_id?: string | null;

		/** The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
		employer_name?: string | null;

		/** The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
		institution_id?: string | null;

		/** The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
		institution_name?: string | null;

		/**
		 * When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, userâ€™s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.
		 * Required
		 */
		is_allocated_remainder: boolean;

		/**
		 * The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
		 * Required
		 * Type: double
		 */
		percent_allocated: number;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The state, or status, of the deposit switch.
		 * - `initialized` â€“ The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
		 * - `processing` â€“ The deposit switch request has been submitted and is being processed.
		 * - `completed` â€“ The user's employer has fulfilled the deposit switch request.
		 * - `error` â€“ There was an error processing the deposit switch request.
		 * Required
		 */
		state: DepositSwitchGetResponseState;

		/**
		 * The method used to make the deposit switch.
		 * - `instant` â€“ User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.
		 * - `mail` â€“ User requested that Plaid contact their employer by mail to make the direct deposit switch.
		 * - `pdf` â€“ User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
		 */
		switch_method?: DepositSwitchGetResponseSwitch_method | null;

		/**
		 * The ID of the bank account the direct deposit was switched to.
		 * Required
		 */
		target_account_id: string;

		/**
		 * The ID of the Item the direct deposit was switched to.
		 * Required
		 */
		target_item_id: string;
	}

	/** DepositSwitchGetResponse defines the response schema for `/deposit_switch/get` */
	export interface DepositSwitchGetResponseFormProperties {

		/**
		 * When `true`, userâ€™s direct deposit goes to multiple banks. When false, userâ€™s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.
		 * Required
		 */
		account_has_multiple_allocations: FormControl<boolean | null | undefined>,

		/**
		 * The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
		 * Required
		 * Type: double
		 */
		amount_allocated: FormControl<number | null | undefined>,

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed.
		 * Required
		 * Type: DateOnly
		 */
		date_completed: FormControl<Date | null | undefined>,

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created.
		 * Required
		 * Type: DateOnly
		 */
		date_created: FormControl<Date | null | undefined>,

		/**
		 * The ID of the deposit switch.
		 * Required
		 */
		deposit_switch_id: FormControl<string | null | undefined>,

		/** The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
		employer_id: FormControl<string | null | undefined>,

		/** The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
		employer_name: FormControl<string | null | undefined>,

		/** The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
		institution_id: FormControl<string | null | undefined>,

		/** The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
		institution_name: FormControl<string | null | undefined>,

		/**
		 * When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, userâ€™s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.
		 * Required
		 */
		is_allocated_remainder: FormControl<boolean | null | undefined>,

		/**
		 * The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
		 * Required
		 * Type: double
		 */
		percent_allocated: FormControl<number | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The state, or status, of the deposit switch.
		 * - `initialized` â€“ The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
		 * - `processing` â€“ The deposit switch request has been submitted and is being processed.
		 * - `completed` â€“ The user's employer has fulfilled the deposit switch request.
		 * - `error` â€“ There was an error processing the deposit switch request.
		 * Required
		 */
		state: FormControl<DepositSwitchGetResponseState | null | undefined>,

		/**
		 * The method used to make the deposit switch.
		 * - `instant` â€“ User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.
		 * - `mail` â€“ User requested that Plaid contact their employer by mail to make the direct deposit switch.
		 * - `pdf` â€“ User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
		 */
		switch_method: FormControl<DepositSwitchGetResponseSwitch_method | null | undefined>,

		/**
		 * The ID of the bank account the direct deposit was switched to.
		 * Required
		 */
		target_account_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the Item the direct deposit was switched to.
		 * Required
		 */
		target_item_id: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchGetResponseFormGroup() {
		return new FormGroup<DepositSwitchGetResponseFormProperties>({
			account_has_multiple_allocations: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			amount_allocated: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			date_completed: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			date_created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			deposit_switch_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			employer_id: new FormControl<string | null | undefined>(undefined),
			employer_name: new FormControl<string | null | undefined>(undefined),
			institution_id: new FormControl<string | null | undefined>(undefined),
			institution_name: new FormControl<string | null | undefined>(undefined),
			is_allocated_remainder: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			percent_allocated: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<DepositSwitchGetResponseState | null | undefined>(undefined, [Validators.required]),
			switch_method: new FormControl<DepositSwitchGetResponseSwitch_method | null | undefined>(undefined),
			target_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			target_item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DepositSwitchGetResponseState { initialized = 'initialized', processing = 'processing', completed = 'completed', error = 'error' }

	export enum DepositSwitchGetResponseSwitch_method { instant = 'instant', mail = 'mail', pdf = 'pdf', _null = 3 }


	/** Fired when the status of a deposit switch request has changed. */
	export interface DepositSwitchStateUpdateWebhook {

		/** The ID of the deposit switch. */
		deposit_switch_id?: string | null;

		/** The Plaid environment the webhook was sent from */
		environment?: AssetsErrorWebhookEnvironment | null;

		/**
		 * The state, or status, of the deposit switch.
		 * `initialized`: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
		 * `processing`: The deposit switch request has been submitted and is being processed.
		 * `completed`: The user's employer has fulfilled and completed the deposit switch request.
		 * `error`: There was an error processing the deposit switch request.
		 * For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).
		 */
		state?: string | null;

		/** `"SWITCH_STATE_UPDATE"` */
		webhook_code?: string | null;

		/** `"DEPOSIT_SWITCH"` */
		webhook_type?: string | null;
	}

	/** Fired when the status of a deposit switch request has changed. */
	export interface DepositSwitchStateUpdateWebhookFormProperties {

		/** The ID of the deposit switch. */
		deposit_switch_id: FormControl<string | null | undefined>,

		/** The Plaid environment the webhook was sent from */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The state, or status, of the deposit switch.
		 * `initialized`: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
		 * `processing`: The deposit switch request has been submitted and is being processed.
		 * `completed`: The user's employer has fulfilled and completed the deposit switch request.
		 * `error`: There was an error processing the deposit switch request.
		 * For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).
		 */
		state: FormControl<string | null | undefined>,

		/** `"SWITCH_STATE_UPDATE"` */
		webhook_code: FormControl<string | null | undefined>,

		/** `"DEPOSIT_SWITCH"` */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchStateUpdateWebhookFormGroup() {
		return new FormGroup<DepositSwitchStateUpdateWebhookFormProperties>({
			deposit_switch_id: new FormControl<string | null | undefined>(undefined),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
			webhook_code: new FormControl<string | null | undefined>(undefined),
			webhook_type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** DepositSwitchTokenCreateRequest defines the request schema for `/deposit_switch/token/create` */
	export interface DepositSwitchTokenCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The ID of the deposit switch
		 * Required
		 */
		deposit_switch_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** DepositSwitchTokenCreateRequest defines the request schema for `/deposit_switch/token/create` */
	export interface DepositSwitchTokenCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the deposit switch
		 * Required
		 */
		deposit_switch_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchTokenCreateRequestFormGroup() {
		return new FormGroup<DepositSwitchTokenCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			deposit_switch_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** DepositSwitchTokenCreateResponse defines the response schema for `/deposit_switch/token/create` */
	export interface DepositSwitchTokenCreateResponse {

		/**
		 * Deposit switch token, used to initialize Link for the Deposit Switch product
		 * Required
		 */
		deposit_switch_token: string;

		/**
		 * Expiration time of the token, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
		 * Required
		 */
		deposit_switch_token_expiration_time: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** DepositSwitchTokenCreateResponse defines the response schema for `/deposit_switch/token/create` */
	export interface DepositSwitchTokenCreateResponseFormProperties {

		/**
		 * Deposit switch token, used to initialize Link for the Deposit Switch product
		 * Required
		 */
		deposit_switch_token: FormControl<string | null | undefined>,

		/**
		 * Expiration time of the token, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
		 * Required
		 */
		deposit_switch_token_expiration_time: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateDepositSwitchTokenCreateResponseFormGroup() {
		return new FormGroup<DepositSwitchTokenCreateResponseFormProperties>({
			deposit_switch_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deposit_switch_token_expiration_time: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets. */
	export interface DepositoryAccount {

		/**
		 * A cash management account, typically a cash account at a brokerage
		 * Required
		 */
		'cash management': string;

		/**
		 * Certificate of deposit account
		 * Required
		 */
		cd: string;

		/**
		 * Checking account
		 * Required
		 */
		checking: string;

		/**
		 * An Electronic Benefit Transfer (EBT) account, used by certain public assistance programs to distribute funds (US only)
		 * Required
		 */
		ebt: string;

		/**
		 * Health Savings Account (US only) that can only hold cash
		 * Required
		 */
		hsa: string;

		/**
		 * Money market account
		 * Required
		 */
		'money market': string;

		/**
		 * PayPal depository account
		 * Required
		 */
		paypal: string;

		/**
		 * Prepaid debit card
		 * Required
		 */
		prepaid: string;

		/**
		 * Savings account
		 * Required
		 */
		savings: string;
	}

	/** An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets. */
	export interface DepositoryAccountFormProperties {

		/**
		 * A cash management account, typically a cash account at a brokerage
		 * Required
		 */
		'cash management': FormControl<string | null | undefined>,

		/**
		 * Certificate of deposit account
		 * Required
		 */
		cd: FormControl<string | null | undefined>,

		/**
		 * Checking account
		 * Required
		 */
		checking: FormControl<string | null | undefined>,

		/**
		 * An Electronic Benefit Transfer (EBT) account, used by certain public assistance programs to distribute funds (US only)
		 * Required
		 */
		ebt: FormControl<string | null | undefined>,

		/**
		 * Health Savings Account (US only) that can only hold cash
		 * Required
		 */
		hsa: FormControl<string | null | undefined>,

		/**
		 * Money market account
		 * Required
		 */
		'money market': FormControl<string | null | undefined>,

		/**
		 * PayPal depository account
		 * Required
		 */
		paypal: FormControl<string | null | undefined>,

		/**
		 * Prepaid debit card
		 * Required
		 */
		prepaid: FormControl<string | null | undefined>,

		/**
		 * Savings account
		 * Required
		 */
		savings: FormControl<string | null | undefined>,
	}
	export function CreateDepositoryAccountFormGroup() {
		return new FormGroup<DepositoryAccountFormProperties>({
			'cash management': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cd: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			checking: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ebt: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hsa: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'money market': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			paypal: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			prepaid: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			savings: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Originator and their status. */
	export interface DetailedOriginator {

		/**
		 * Originatorâ€™s client ID.
		 * Required
		 */
		client_id: string;

		/** Required */
		company_name: string;

		/**
		 * Originatorâ€™s diligence status.
		 * Required
		 */
		transfer_diligence_status: DetailedOriginatorTransfer_diligence_status;
	}

	/** Originator and their status. */
	export interface DetailedOriginatorFormProperties {

		/**
		 * Originatorâ€™s client ID.
		 * Required
		 */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		company_name: FormControl<string | null | undefined>,

		/**
		 * Originatorâ€™s diligence status.
		 * Required
		 */
		transfer_diligence_status: FormControl<DetailedOriginatorTransfer_diligence_status | null | undefined>,
	}
	export function CreateDetailedOriginatorFormGroup() {
		return new FormGroup<DetailedOriginatorFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_diligence_status: new FormControl<DetailedOriginatorTransfer_diligence_status | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DetailedOriginatorTransfer_diligence_status { under_review = 'under_review', approved = 'approved', denied = 'denied' }


	/** Information about the accounts that the payment was distributed to. */
	export interface DistributionBreakdown {

		/** Name of the account for the given distribution. */
		account_name?: string | null;

		/** The name of the bank that the payment is being deposited to. */
		bank_name?: string | null;

		/**
		 * The amount distributed to this account.
		 * Type: double
		 */
		current_amount?: number | null;

		/** An object representing a monetary amount. */
		current_pay?: Pay;

		/** The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code?: string | null;

		/** The last 2-4 alphanumeric characters of an account's official account number. */
		mask?: string | null;

		/** Type of the account that the paystub was sent to (e.g. 'checking'). */
		type?: string | null;

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code?: string | null;
	}

	/** Information about the accounts that the payment was distributed to. */
	export interface DistributionBreakdownFormProperties {

		/** Name of the account for the given distribution. */
		account_name: FormControl<string | null | undefined>,

		/** The name of the bank that the payment is being deposited to. */
		bank_name: FormControl<string | null | undefined>,

		/**
		 * The amount distributed to this account.
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/** The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code: FormControl<string | null | undefined>,

		/** The last 2-4 alphanumeric characters of an account's official account number. */
		mask: FormControl<string | null | undefined>,

		/** Type of the account that the paystub was sent to (e.g. 'checking'). */
		type: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateDistributionBreakdownFormGroup() {
		return new FormGroup<DistributionBreakdownFormProperties>({
			account_name: new FormControl<string | null | undefined>(undefined),
			bank_name: new FormControl<string | null | undefined>(undefined),
			current_amount: new FormControl<number | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			mask: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The type of document.
	 * `DOCUMENT_TYPE_PAYSTUB`: A paystub.
	 * `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.
	 * `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
	 * `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
	 * `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
	 * `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statement (CLES) issued by the US military.
	 * `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
	 * `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.
	 * `DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.
	 * `UNKNOWN`: Document type could not be determined.
	 */
	export enum DocType { UNKNOWN = 'UNKNOWN', DOCUMENT_TYPE_PAYSTUB = 'DOCUMENT_TYPE_PAYSTUB', DOCUMENT_TYPE_BANK_STATEMENT = 'DOCUMENT_TYPE_BANK_STATEMENT', DOCUMENT_TYPE_US_TAX_W2 = 'DOCUMENT_TYPE_US_TAX_W2', DOCUMENT_TYPE_US_MILITARY_ERAS = 'DOCUMENT_TYPE_US_MILITARY_ERAS', DOCUMENT_TYPE_US_MILITARY_LES = 'DOCUMENT_TYPE_US_MILITARY_LES', DOCUMENT_TYPE_US_MILITARY_CLES = 'DOCUMENT_TYPE_US_MILITARY_CLES', DOCUMENT_TYPE_GIG = 'DOCUMENT_TYPE_GIG', DOCUMENT_TYPE_NONE = 'DOCUMENT_TYPE_NONE', DOCUMENT_TYPE_US_TAX_1099_MISC = 'DOCUMENT_TYPE_US_TAX_1099_MISC', DOCUMENT_TYPE_US_TAX_1099_K = 'DOCUMENT_TYPE_US_TAX_1099_K', DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF = 'DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF' }


	/** High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected. */
	export interface DocumentAnalysis {

		/**
		 * High level summary of whether the document in the provided image matches the formatting rules and security checks for the associated jurisdiction.
		 * For example, most identity documents have formatting rules like the following:
		 * The image of the person's face must have a certain contrast in order to highlight skin tone
		 * The subject in the document's image must remove eye glasses and pose in a certain way
		 * The informational fields (name, date of birth, ID number, etc.) must be colored and aligned according to specific rules
		 * Security features like watermarks and background patterns must be present
		 * So a `match` status for this field indicates that the document in the provided image seems to conform to the various formatting and security rules associated with the detected document.
		 * Required
		 */
		authenticity: DocumentAnalysisAuthenticity;

		/**
		 * Analysis of the data extracted from the submitted document.
		 * Required
		 */
		extracted_data: PhysicalDocumentExtractedDataAnalysis;

		/**
		 * A high level description of the quality of the image the user submitted.
		 * For example, an image that is blurry, distorted by glare from a nearby light source, or improperly framed might be marked as low or medium quality. Poor quality images are more likely to fail OCR and/or template conformity checks.
		 * Note: By default, Plaid will let a user recapture document images twice before failing the entire session if we attribute the failure to low image quality.
		 * Required
		 */
		image_quality: DocumentAnalysisImage_quality;
	}

	/** High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected. */
	export interface DocumentAnalysisFormProperties {

		/**
		 * High level summary of whether the document in the provided image matches the formatting rules and security checks for the associated jurisdiction.
		 * For example, most identity documents have formatting rules like the following:
		 * The image of the person's face must have a certain contrast in order to highlight skin tone
		 * The subject in the document's image must remove eye glasses and pose in a certain way
		 * The informational fields (name, date of birth, ID number, etc.) must be colored and aligned according to specific rules
		 * Security features like watermarks and background patterns must be present
		 * So a `match` status for this field indicates that the document in the provided image seems to conform to the various formatting and security rules associated with the detected document.
		 * Required
		 */
		authenticity: FormControl<DocumentAnalysisAuthenticity | null | undefined>,

		/**
		 * A high level description of the quality of the image the user submitted.
		 * For example, an image that is blurry, distorted by glare from a nearby light source, or improperly framed might be marked as low or medium quality. Poor quality images are more likely to fail OCR and/or template conformity checks.
		 * Note: By default, Plaid will let a user recapture document images twice before failing the entire session if we attribute the failure to low image quality.
		 * Required
		 */
		image_quality: FormControl<DocumentAnalysisImage_quality | null | undefined>,
	}
	export function CreateDocumentAnalysisFormGroup() {
		return new FormGroup<DocumentAnalysisFormProperties>({
			authenticity: new FormControl<DocumentAnalysisAuthenticity | null | undefined>(undefined, [Validators.required]),
			image_quality: new FormControl<DocumentAnalysisImage_quality | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DocumentAnalysisAuthenticity { match = 'match', partial_match = 'partial_match', no_match = 'no_match', no_data = 'no_data' }


	/** Analysis of the data extracted from the submitted document. */
	export interface PhysicalDocumentExtractedDataAnalysis {

		/**
		 * A match summary describing the cross comparison between the subject's date of birth, extracted from the document image, and the date of birth they separately provided to the identity verification attempt.
		 * Required
		 */
		date_of_birth: PhysicalDocumentExtractedDataAnalysisDate_of_birth;

		/**
		 * A description of whether the associated document was expired when the verification was performed.
		 * Note: In the case where an expiration date is not present on the document or failed to be extracted, this value will be `no_data`.
		 * Required
		 */
		expiration_date: PhysicalDocumentExtractedDataAnalysisExpiration_date;

		/**
		 * A binary match indicator specifying whether the country that issued the provided document matches the country that the user separately provided to Plaid.
		 * Note: You can configure whether a `no_match` on `issuing_country` fails the `documentary_verification` by editing your Plaid Template.
		 * Required
		 */
		issuing_country: PhysicalDocumentExtractedDataAnalysisIssuing_country;

		/**
		 * A match summary describing the cross comparison between the subject's name, extracted from the document image, and the name they separately provided to identity verification attempt.
		 * Required
		 */
		name: PhysicalDocumentExtractedDataAnalysisDate_of_birth;
	}

	/** Analysis of the data extracted from the submitted document. */
	export interface PhysicalDocumentExtractedDataAnalysisFormProperties {

		/**
		 * A match summary describing the cross comparison between the subject's date of birth, extracted from the document image, and the date of birth they separately provided to the identity verification attempt.
		 * Required
		 */
		date_of_birth: FormControl<PhysicalDocumentExtractedDataAnalysisDate_of_birth | null | undefined>,

		/**
		 * A description of whether the associated document was expired when the verification was performed.
		 * Note: In the case where an expiration date is not present on the document or failed to be extracted, this value will be `no_data`.
		 * Required
		 */
		expiration_date: FormControl<PhysicalDocumentExtractedDataAnalysisExpiration_date | null | undefined>,

		/**
		 * A binary match indicator specifying whether the country that issued the provided document matches the country that the user separately provided to Plaid.
		 * Note: You can configure whether a `no_match` on `issuing_country` fails the `documentary_verification` by editing your Plaid Template.
		 * Required
		 */
		issuing_country: FormControl<PhysicalDocumentExtractedDataAnalysisIssuing_country | null | undefined>,

		/**
		 * A match summary describing the cross comparison between the subject's name, extracted from the document image, and the name they separately provided to identity verification attempt.
		 * Required
		 */
		name: FormControl<PhysicalDocumentExtractedDataAnalysisDate_of_birth | null | undefined>,
	}
	export function CreatePhysicalDocumentExtractedDataAnalysisFormGroup() {
		return new FormGroup<PhysicalDocumentExtractedDataAnalysisFormProperties>({
			date_of_birth: new FormControl<PhysicalDocumentExtractedDataAnalysisDate_of_birth | null | undefined>(undefined, [Validators.required]),
			expiration_date: new FormControl<PhysicalDocumentExtractedDataAnalysisExpiration_date | null | undefined>(undefined, [Validators.required]),
			issuing_country: new FormControl<PhysicalDocumentExtractedDataAnalysisIssuing_country | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<PhysicalDocumentExtractedDataAnalysisDate_of_birth | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PhysicalDocumentExtractedDataAnalysisDate_of_birth { match = 'match', partial_match = 'partial_match', no_match = 'no_match' }

	export enum PhysicalDocumentExtractedDataAnalysisExpiration_date { not_expired = 'not_expired', expired = 'expired', no_data = 'no_data' }

	export enum PhysicalDocumentExtractedDataAnalysisIssuing_country { match = 'match', no_match = 'no_match' }

	export enum DocumentAnalysisImage_quality { high = 'high', medium = 'medium', low = 'low' }


	/**
	 * High level summary of whether the document in the provided image matches the formatting rules and security checks for the associated jurisdiction.
	 * For example, most identity documents have formatting rules like the following:
	 * The image of the person's face must have a certain contrast in order to highlight skin tone
	 * The subject in the document's image must remove eye glasses and pose in a certain way
	 * The informational fields (name, date of birth, ID number, etc.) must be colored and aligned according to specific rules
	 * Security features like watermarks and background patterns must be present
	 * So a `match` status for this field indicates that the document in the provided image seems to conform to the various formatting and security rules associated with the detected document.
	 */
	export enum DocumentAuthenticityMatchCode { match = 'match', partial_match = 'partial_match', no_match = 'no_match', no_data = 'no_data' }


	/** A match summary describing the cross comparison between the subject's date of birth, extracted from the document image, and the date of birth they separately provided to the identity verification attempt. */
	export enum DocumentDateOfBirthMatchCode { match = 'match', partial_match = 'partial_match', no_match = 'no_match' }


	/** An object representing metadata from the end user's uploaded document. */
	export interface DocumentMetadata {

		/** An identifier of the document that is also present in the paystub response. */
		doc_id?: string | null;

		/**
		 * The type of document.
		 * `DOCUMENT_TYPE_PAYSTUB`: A paystub.
		 * `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.
		 * `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
		 * `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
		 * `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
		 * `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statement (CLES) issued by the US military.
		 * `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
		 * `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.
		 * `DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.
		 * `UNKNOWN`: Document type could not be determined.
		 */
		doc_type?: DocType | null;

		/** The name of the document. */
		name?: string | null;

		/**
		 * The processing status of the document.
		 * `PROCESSING_COMPLETE`: The document was successfully processed.
		 * `DOCUMENT_ERROR`: The document could not be processed. Possible causes include: The document was an unacceptable document type such as an offer letter or bank statement, the document image was cropped or blurry, or the document was corrupted.
		 * `UNKNOWN` or `null`: An internal error occured. If this happens repeatedly, contact support or your Plaid account manager.
		 */
		status?: string | null;
	}

	/** An object representing metadata from the end user's uploaded document. */
	export interface DocumentMetadataFormProperties {

		/** An identifier of the document that is also present in the paystub response. */
		doc_id: FormControl<string | null | undefined>,

		/**
		 * The type of document.
		 * `DOCUMENT_TYPE_PAYSTUB`: A paystub.
		 * `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.
		 * `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
		 * `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
		 * `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
		 * `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statement (CLES) issued by the US military.
		 * `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
		 * `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.
		 * `DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.
		 * `UNKNOWN`: Document type could not be determined.
		 */
		doc_type: FormControl<DocType | null | undefined>,

		/** The name of the document. */
		name: FormControl<string | null | undefined>,

		/**
		 * The processing status of the document.
		 * `PROCESSING_COMPLETE`: The document was successfully processed.
		 * `DOCUMENT_ERROR`: The document could not be processed. Possible causes include: The document was an unacceptable document type such as an offer letter or bank statement, the document image was cropped or blurry, or the document was corrupted.
		 * `UNKNOWN` or `null`: An internal error occured. If this happens repeatedly, contact support or your Plaid account manager.
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateDocumentMetadataFormGroup() {
		return new FormGroup<DocumentMetadataFormProperties>({
			doc_id: new FormControl<string | null | undefined>(undefined),
			doc_type: new FormControl<DocType | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A match summary describing the cross comparison between the subject's name, extracted from the document image, and the name they separately provided to identity verification attempt. */
	export enum DocumentNameMatchCode { match = 'match', partial_match = 'partial_match', no_match = 'no_match' }


	/** An outcome status for this specific document submission. Distinct from the overall `documentary_verification.status` that summarizes the verification outcome from one or more documents. */
	export enum DocumentStatus { success = 'success', failed = 'failed', manually_approved = 'manually_approved' }


	/** Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`. */
	export interface DocumentaryVerification {

		/**
		 * An array of documents submitted to the `documentary_verification` step. Each entry represents one user submission, where each submission will contain both a front and back image, or just a front image, depending on the document type.
		 * Note: Plaid will automatically let a user submit a new set of document images up to three times if we detect that a previous attempt might have failed due to user error. For example, if the first set of document images are blurry or obscured by glare, the user will be asked to capture their documents again, resulting in at least two separate entries within `documents`. If the overall `documentary_verification` is `failed`, the user has exhausted their retry attempts.
		 * Required
		 */
		documents: Array<DocumentaryVerificationDocument>;

		/**
		 * The outcome status for the associated Identity Verification attempt's `documentary_verification` step. This field will always have the same value as `steps.documentary_verification`.
		 * Required
		 */
		status: string;
	}

	/** Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`. */
	export interface DocumentaryVerificationFormProperties {

		/**
		 * The outcome status for the associated Identity Verification attempt's `documentary_verification` step. This field will always have the same value as `steps.documentary_verification`.
		 * Required
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateDocumentaryVerificationFormGroup() {
		return new FormGroup<DocumentaryVerificationFormProperties>({
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Images, extracted data, and analysis from a user's identity document */
	export interface DocumentaryVerificationDocument {

		/**
		 * High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected.
		 * Required
		 */
		analysis: DocumentAnalysis;

		/**
		 * The `attempt` field begins with 1 and increments with each subsequent document upload.
		 * Required
		 * Type: double
		 */
		attempt: number;

		/**
		 * Data extracted from a user-submitted document.
		 * Required
		 */
		extracted_data: PhysicalDocumentExtractedData;

		/**
		 * URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires.
		 * Required
		 */
		images: PhysicalDocumentImages;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: Date;

		/**
		 * An outcome status for this specific document submission. Distinct from the overall `documentary_verification.status` that summarizes the verification outcome from one or more documents.
		 * Required
		 */
		status: DocumentStatus;
	}

	/** Images, extracted data, and analysis from a user's identity document */
	export interface DocumentaryVerificationDocumentFormProperties {

		/**
		 * The `attempt` field begins with 1 and increments with each subsequent document upload.
		 * Required
		 * Type: double
		 */
		attempt: FormControl<number | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: FormControl<Date | null | undefined>,

		/**
		 * An outcome status for this specific document submission. Distinct from the overall `documentary_verification.status` that summarizes the verification outcome from one or more documents.
		 * Required
		 */
		status: FormControl<DocumentStatus | null | undefined>,
	}
	export function CreateDocumentaryVerificationDocumentFormGroup() {
		return new FormGroup<DocumentaryVerificationDocumentFormProperties>({
			attempt: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			redacted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<DocumentStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data extracted from a user-submitted document. */
	export interface PhysicalDocumentExtractedData {

		/**
		 * The type of identity document detected in the images provided. Will always be one of the following values:
		 * `drivers_license` - A driver's license for the associated country
		 * `id_card` - A general national identification card, distinct from driver's licenses
		 * `passport` - A passport for the associated country
		 * `residence_permit_card` - An identity document permitting a foreign citizen to <em>temporarily</em> reside in the associated country
		 * `resident_card` - An identity document permitting a foreign citizen to <em>permanently</em> reside in the associated country
		 * Note: This value may be different from the ID type that the user selects within Link. For example, if they select "Driver's License" but then submit a picture of a passport, this field will say `passport`
		 * Required
		 */
		category: PhysicalDocumentExtractedDataCategory;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		expiration_date: Date;

		/**
		 * Alpha-numeric ID number extracted via OCR from the user's document image.
		 * Required
		 */
		id_number: string;

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		issuing_country: string;

		/**
		 * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
		 * Required
		 */
		issuing_region: string;
	}

	/** Data extracted from a user-submitted document. */
	export interface PhysicalDocumentExtractedDataFormProperties {

		/**
		 * The type of identity document detected in the images provided. Will always be one of the following values:
		 * `drivers_license` - A driver's license for the associated country
		 * `id_card` - A general national identification card, distinct from driver's licenses
		 * `passport` - A passport for the associated country
		 * `residence_permit_card` - An identity document permitting a foreign citizen to <em>temporarily</em> reside in the associated country
		 * `resident_card` - An identity document permitting a foreign citizen to <em>permanently</em> reside in the associated country
		 * Note: This value may be different from the ID type that the user selects within Link. For example, if they select "Driver's License" but then submit a picture of a passport, this field will say `passport`
		 * Required
		 */
		category: FormControl<PhysicalDocumentExtractedDataCategory | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * Alpha-numeric ID number extracted via OCR from the user's document image.
		 * Required
		 */
		id_number: FormControl<string | null | undefined>,

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		issuing_country: FormControl<string | null | undefined>,

		/**
		 * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
		 * Required
		 */
		issuing_region: FormControl<string | null | undefined>,
	}
	export function CreatePhysicalDocumentExtractedDataFormGroup() {
		return new FormGroup<PhysicalDocumentExtractedDataFormProperties>({
			category: new FormControl<PhysicalDocumentExtractedDataCategory | null | undefined>(undefined, [Validators.required]),
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issuing_country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2)]),
			issuing_region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PhysicalDocumentExtractedDataCategory { drivers_license = 'drivers_license', id_card = 'id_card', passport = 'passport', residence_permit_card = 'residence_permit_card', resident_card = 'resident_card' }


	/** URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires. */
	export interface PhysicalDocumentImages {

		/**
		 * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
		 * Required
		 */
		cropped_back: string;

		/**
		 * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
		 * Required
		 */
		cropped_front: string;

		/**
		 * Temporary URL that expires after 60 seconds for downloading a crop of just the user's face from the document image. Might be null if the document does not contain a face photo.
		 * Required
		 */
		face: string;

		/**
		 * Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
		 * Required
		 */
		original_back: string;

		/**
		 * Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
		 * Required
		 */
		original_front: string;
	}

	/** URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires. */
	export interface PhysicalDocumentImagesFormProperties {

		/**
		 * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
		 * Required
		 */
		cropped_back: FormControl<string | null | undefined>,

		/**
		 * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
		 * Required
		 */
		cropped_front: FormControl<string | null | undefined>,

		/**
		 * Temporary URL that expires after 60 seconds for downloading a crop of just the user's face from the document image. Might be null if the document does not contain a face photo.
		 * Required
		 */
		face: FormControl<string | null | undefined>,

		/**
		 * Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
		 * Required
		 */
		original_back: FormControl<string | null | undefined>,

		/**
		 * Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
		 * Required
		 */
		original_front: FormControl<string | null | undefined>,
	}
	export function CreatePhysicalDocumentImagesFormGroup() {
		return new FormGroup<PhysicalDocumentImagesFormProperties>({
			cropped_back: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cropped_front: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			face: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_back: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_front: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing both a breakdown of earnings on a paystub and the total earnings. */
	export interface Earnings {
		breakdown?: Array<EarningsBreakdown>;
		subtotals?: Array<EarningsTotal>;

		/** An object representing both the current pay period and year to date amount for an earning category. */
		total?: EarningsTotal;
		totals?: Array<EarningsTotal>;
	}

	/** An object representing both a breakdown of earnings on a paystub and the total earnings. */
	export interface EarningsFormProperties {
	}
	export function CreateEarningsFormGroup() {
		return new FormGroup<EarningsFormProperties>({
		});

	}


	/** An object representing the earnings line items for the pay period. */
	export interface EarningsBreakdown {

		/** Commonly used term to describe the earning line item. */
		canonical_description?: EarningsBreakdownCanonical_description | null;

		/**
		 * Raw amount of the earning line item.
		 * Type: double
		 */
		current_amount?: number | null;

		/** Description of the earning line item. */
		description?: string | null;

		/**
		 * Number of hours applicable for this earning.
		 * Type: double
		 */
		hours?: number | null;

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code?: string | null;

		/**
		 * Hourly rate applicable for this earning.
		 * Type: double
		 */
		rate?: number | null;

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code?: string | null;

		/**
		 * The year-to-date amount of the deduction.
		 * Type: double
		 */
		ytd_amount?: number | null;
	}

	/** An object representing the earnings line items for the pay period. */
	export interface EarningsBreakdownFormProperties {

		/** Commonly used term to describe the earning line item. */
		canonical_description: FormControl<EarningsBreakdownCanonical_description | null | undefined>,

		/**
		 * Raw amount of the earning line item.
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/** Description of the earning line item. */
		description: FormControl<string | null | undefined>,

		/**
		 * Number of hours applicable for this earning.
		 * Type: double
		 */
		hours: FormControl<number | null | undefined>,

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * Hourly rate applicable for this earning.
		 * Type: double
		 */
		rate: FormControl<number | null | undefined>,

		/**
		 * The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date amount of the deduction.
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreateEarningsBreakdownFormGroup() {
		return new FormGroup<EarningsBreakdownFormProperties>({
			canonical_description: new FormControl<EarningsBreakdownCanonical_description | null | undefined>(undefined),
			current_amount: new FormControl<number | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			hours: new FormControl<number | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			rate: new FormControl<number | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
			ytd_amount: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum EarningsBreakdownCanonical_description { BONUS = 'BONUS', COMMISSION = 'COMMISSION', OVERTIME = 'OVERTIME', 'PAID TIME OFF' = 'PAID TIME OFF', 'REGULAR PAY' = 'REGULAR PAY', VACATION = 'VACATION', 'BASIC ALLOWANCE HOUSING' = 'BASIC ALLOWANCE HOUSING', 'BASIC ALLOWANCE SUBSISTENCE' = 'BASIC ALLOWANCE SUBSISTENCE', OTHER = 'OTHER', _null = 9 }


	/** An object representing both the current pay period and year to date amount for an earning category. */
	export interface EarningsTotal {

		/**
		 * Total amount of the earnings for this pay period
		 * Type: double
		 */
		current_amount?: number | null;

		/** An object representing a monetary amount. */
		current_pay?: Pay;

		/**
		 * Total number of hours worked for this pay period
		 * Type: double
		 */
		hours?: number | null;

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code?: string | null;

		/**
		 * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code?: string | null;

		/**
		 * The total year-to-date amount of the earnings
		 * Type: double
		 */
		ytd_amount?: number | null;

		/** An object representing a monetary amount. */
		ytd_pay?: Pay;
	}

	/** An object representing both the current pay period and year to date amount for an earning category. */
	export interface EarningsTotalFormProperties {

		/**
		 * Total amount of the earnings for this pay period
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/**
		 * Total number of hours worked for this pay period
		 * Type: double
		 */
		hours: FormControl<number | null | undefined>,

		/** The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The total year-to-date amount of the earnings
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreateEarningsTotalFormGroup() {
		return new FormGroup<EarningsTotalFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined),
			hours: new FormControl<number | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
			ytd_amount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Commonly used term to describe the earning line item. */
	export enum EarningsBreakdownCanonicalDescription { BONUS = 'BONUS', COMMISSION = 'COMMISSION', OVERTIME = 'OVERTIME', 'PAID TIME OFF' = 'PAID TIME OFF', 'REGULAR PAY' = 'REGULAR PAY', VACATION = 'VACATION', 'BASIC ALLOWANCE HOUSING' = 'BASIC ALLOWANCE HOUSING', 'BASIC ALLOWANCE SUBSISTENCE' = 'BASIC ALLOWANCE SUBSISTENCE', OTHER = 'OTHER', _null = 9 }


	/** Data about the employee. */
	export interface Employee {

		/**
		 * Address on the paystub
		 * Required
		 */
		address: PaystubAddress;

		/** Marital status of the employee - either `single` or `married`. */
		marital_status?: string | null;

		/**
		 * The name of the employee.
		 * Required
		 */
		name: string;

		/** Taxpayer ID of the individual receiving the paystub. */
		taxpayer_id?: TaxpayerID;
	}

	/** Data about the employee. */
	export interface EmployeeFormProperties {

		/** Marital status of the employee - either `single` or `married`. */
		marital_status: FormControl<string | null | undefined>,

		/**
		 * The name of the employee.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEmployeeFormGroup() {
		return new FormGroup<EmployeeFormProperties>({
			marital_status: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Address on the paystub */
	export interface PaystubAddress {

		/** The full city name. */
		city?: string | null;

		/** The ISO 3166-1 alpha-2 country code. */
		country?: string | null;

		/** Street address line 1. */
		line1?: string | null;

		/** Street address line 2. */
		line2?: string | null;

		/** The postal code of the address. */
		postal_code?: string | null;

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		region?: string | null;

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		state_code?: string | null;

		/** The full street address. */
		street?: string | null;
	}

	/** Address on the paystub */
	export interface PaystubAddressFormProperties {

		/** The full city name. */
		city: FormControl<string | null | undefined>,

		/** The ISO 3166-1 alpha-2 country code. */
		country: FormControl<string | null | undefined>,

		/** Street address line 1. */
		line1: FormControl<string | null | undefined>,

		/** Street address line 2. */
		line2: FormControl<string | null | undefined>,

		/** The postal code of the address. */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		state_code: FormControl<string | null | undefined>,

		/** The full street address. */
		street: FormControl<string | null | undefined>,
	}
	export function CreatePaystubAddressFormGroup() {
		return new FormGroup<PaystubAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			line1: new FormControl<string | null | undefined>(undefined),
			line2: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			state_code: new FormControl<string | null | undefined>(undefined),
			street: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Taxpayer ID of the individual receiving the paystub. */
	export interface TaxpayerID {

		/** ID mask; i.e. last 4 digits of the taxpayer ID */
		id_mask?: string | null;

		/** Type of ID, e.g. 'SSN' */
		id_type?: string | null;

		/**
		 * Last 4 digits of unique number of ID.
		 * Min length: 4
		 * Max length: 4
		 */
		last_4_digits?: string | null;
	}

	/** Taxpayer ID of the individual receiving the paystub. */
	export interface TaxpayerIDFormProperties {

		/** ID mask; i.e. last 4 digits of the taxpayer ID */
		id_mask: FormControl<string | null | undefined>,

		/** Type of ID, e.g. 'SSN' */
		id_type: FormControl<string | null | undefined>,

		/**
		 * Last 4 digits of unique number of ID.
		 * Min length: 4
		 * Max length: 4
		 */
		last_4_digits: FormControl<string | null | undefined>,
	}
	export function CreateTaxpayerIDFormGroup() {
		return new FormGroup<TaxpayerIDFormProperties>({
			id_mask: new FormControl<string | null | undefined>(undefined),
			id_type: new FormControl<string | null | undefined>(undefined),
			last_4_digits: new FormControl<string | null | undefined>(undefined, [Validators.minLength(4), Validators.maxLength(4)]),
		});

	}


	/** The name of the employee, as reported on the paystub. */
	export interface EmployeeIncomeSummaryFieldString extends IncomeSummaryFieldString {
	}

	/** The name of the employee, as reported on the paystub. */
	export interface EmployeeIncomeSummaryFieldStringFormProperties extends IncomeSummaryFieldStringFormProperties {
	}
	export function CreateEmployeeIncomeSummaryFieldStringFormGroup() {
		return new FormGroup<EmployeeIncomeSummaryFieldStringFormProperties>({
			value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data about the employer. */
	export interface Employer {

		/**
		 * Data about the components comprising an address.
		 * Required
		 */
		address: AddressDataNullable;

		/**
		 * A number from 0 to 1 indicating Plaid's level of confidence in the pairing between the employer and the institution (not yet implemented).
		 * Required
		 * Type: double
		 */
		confidence_score: number;

		/**
		 * Plaid's unique identifier for the employer.
		 * Required
		 */
		employer_id: string;

		/**
		 * The name of the employer
		 * Required
		 */
		name: string;
	}

	/** Data about the employer. */
	export interface EmployerFormProperties {

		/**
		 * A number from 0 to 1 indicating Plaid's level of confidence in the pairing between the employer and the institution (not yet implemented).
		 * Required
		 * Type: double
		 */
		confidence_score: FormControl<number | null | undefined>,

		/**
		 * Plaid's unique identifier for the employer.
		 * Required
		 */
		employer_id: FormControl<string | null | undefined>,

		/**
		 * The name of the employer
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEmployerFormGroup() {
		return new FormGroup<EmployerFormProperties>({
			confidence_score: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			employer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The name of the employer, as reported on the paystub. */
	export interface EmployerIncomeSummaryFieldString extends IncomeSummaryFieldString {
	}

	/** The name of the employer, as reported on the paystub. */
	export interface EmployerIncomeSummaryFieldStringFormProperties extends IncomeSummaryFieldStringFormProperties {
	}
	export function CreateEmployerIncomeSummaryFieldStringFormGroup() {
		return new FormGroup<EmployerIncomeSummaryFieldStringFormProperties>({
			value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing employer data. */
	export interface EmployerVerification {

		/** Name of employer. */
		name?: string | null;
	}

	/** An object containing employer data. */
	export interface EmployerVerificationFormProperties {

		/** Name of employer. */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEmployerVerificationFormGroup() {
		return new FormGroup<EmployerVerificationFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** EmployersSearchRequest defines the request schema for `/employers/search`. */
	export interface EmployersSearchRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The Plaid products the returned employers should support. Currently, this field must be set to `"deposit_switch"`.
		 * Required
		 */
		products: Array<string>;

		/**
		 * The employer name to be searched for.
		 * Required
		 */
		query: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** EmployersSearchRequest defines the request schema for `/employers/search`. */
	export interface EmployersSearchRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The employer name to be searched for.
		 * Required
		 */
		query: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateEmployersSearchRequestFormGroup() {
		return new FormGroup<EmployersSearchRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			query: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** EmployersSearchResponse defines the response schema for `/employers/search`. */
	export interface EmployersSearchResponse {

		/**
		 * A list of employers matching the search criteria.
		 * Required
		 */
		employers: Array<Employer>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** EmployersSearchResponse defines the response schema for `/employers/search`. */
	export interface EmployersSearchResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateEmployersSearchResponseFormGroup() {
		return new FormGroup<EmployersSearchResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing employment details found on a paystub. */
	export interface EmploymentDetails {

		/** An object representing a monetary amount. */
		annual_salary?: Pay;

		/**
		 * Date on which the employee was hired, in the YYYY-MM-DD format.
		 * Type: DateOnly
		 */
		hire_date?: Date | null;
	}

	/** An object representing employment details found on a paystub. */
	export interface EmploymentDetailsFormProperties {

		/**
		 * Date on which the employee was hired, in the YYYY-MM-DD format.
		 * Type: DateOnly
		 */
		hire_date: FormControl<Date | null | undefined>,
	}
	export function CreateEmploymentDetailsFormGroup() {
		return new FormGroup<EmploymentDetailsFormProperties>({
			hire_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The types of source employment data that users should be able to share */
	export enum EmploymentSourceType { bank = 'bank', payroll = 'payroll' }


	/** An object containing proof of employment data for an individual */
	export interface EmploymentVerification {

		/** An object containing employer data. */
		employer?: EmployerVerification;

		/**
		 * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date?: Date | null;

		/** An object containing a set of ids related to an employee */
		platform_ids?: PlatformIds;

		/**
		 * Start of employment in ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date?: Date | null;

		/** Current employment status. */
		status?: EmploymentVerificationStatus | null;

		/** Current title of employee. */
		title?: string | null;
	}

	/** An object containing proof of employment data for an individual */
	export interface EmploymentVerificationFormProperties {

		/**
		 * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * Start of employment in ISO 8601 format (YYYY-MM-DD).
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,

		/** Current employment status. */
		status: FormControl<EmploymentVerificationStatus | null | undefined>,

		/** Current title of employee. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateEmploymentVerificationFormGroup() {
		return new FormGroup<EmploymentVerificationFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
			status: new FormControl<EmploymentVerificationStatus | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An object containing a set of ids related to an employee */
	export interface PlatformIds {

		/** The ID of an employee as given by their employer */
		employee_id?: string | null;

		/** The ID of an employee as given by their payroll */
		payroll_id?: string | null;

		/** The ID of the position of the employee */
		position_id?: string | null;
	}

	/** An object containing a set of ids related to an employee */
	export interface PlatformIdsFormProperties {

		/** The ID of an employee as given by their employer */
		employee_id: FormControl<string | null | undefined>,

		/** The ID of an employee as given by their payroll */
		payroll_id: FormControl<string | null | undefined>,

		/** The ID of the position of the employee */
		position_id: FormControl<string | null | undefined>,
	}
	export function CreatePlatformIdsFormGroup() {
		return new FormGroup<PlatformIdsFormProperties>({
			employee_id: new FormControl<string | null | undefined>(undefined),
			payroll_id: new FormControl<string | null | undefined>(undefined),
			position_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum EmploymentVerificationStatus { EMPLOYMENT_STATUS_ACTIVE = 'EMPLOYMENT_STATUS_ACTIVE', EMPLOYMENT_STATUS_INACTIVE = 'EMPLOYMENT_STATUS_INACTIVE', _null = 2 }


	/** EmploymentVerificationGetRequest defines the request schema for `/employment/verification/get`. */
	export interface EmploymentVerificationGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** EmploymentVerificationGetRequest defines the request schema for `/employment/verification/get`. */
	export interface EmploymentVerificationGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateEmploymentVerificationGetRequestFormGroup() {
		return new FormGroup<EmploymentVerificationGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** EmploymentVerificationGetResponse defines the response schema for `/employment/verification/get`. */
	export interface EmploymentVerificationGetResponse {

		/**
		 * A list of employment verification summaries.
		 * Required
		 */
		employments: Array<EmploymentVerification>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** EmploymentVerificationGetResponse defines the response schema for `/employment/verification/get`. */
	export interface EmploymentVerificationGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateEmploymentVerificationGetResponseFormGroup() {
		return new FormGroup<EmploymentVerificationGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The direction of the transaction from the perspective of the account holder:
	 * `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)
	 * `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
	 */
	export enum EnrichTransactionDirection { INFLOW = 'INFLOW', OUTFLOW = 'OUTFLOW' }


	/** An official document, usually issued by a governing body or institution, with an associated identifier. */
	export interface EntityDocument {

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		number: string;

		/**
		 * The kind of official document represented by this object.
		 * `bik` - Russian bank code
		 * `business_number` - A number that uniquely identifies the business within a category of businesses
		 * `imo` - Number assigned to the entity by the International Maritime Organization
		 * `other` - Any document not covered by other categories
		 * `swift` - Number identifying a bank and branch.
		 * `tax_id` - Identification issued for the purpose of collecting taxes
		 * Required
		 */
		type: EntityDocumentType;
	}

	/** An official document, usually issued by a governing body or institution, with an associated identifier. */
	export interface EntityDocumentFormProperties {

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		number: FormControl<string | null | undefined>,

		/**
		 * The kind of official document represented by this object.
		 * `bik` - Russian bank code
		 * `business_number` - A number that uniquely identifies the business within a category of businesses
		 * `imo` - Number assigned to the entity by the International Maritime Organization
		 * `other` - Any document not covered by other categories
		 * `swift` - Number identifying a bank and branch.
		 * `tax_id` - Identification issued for the purpose of collecting taxes
		 * Required
		 */
		type: FormControl<EntityDocumentType | null | undefined>,
	}
	export function CreateEntityDocumentFormGroup() {
		return new FormGroup<EntityDocumentFormProperties>({
			number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4)]),
			type: new FormControl<EntityDocumentType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EntityDocumentType { bik = 'bik', business_number = 'business_number', imo = 'imo', other = 'other', swift = 'swift', tax_id = 'tax_id' }


	/** Analysis information describing why a screening hit matched the provided entity information */
	export interface EntityScreeningHitAnalysis {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		documents?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		email_addresses?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		locations?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		names?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		phone_numbers?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * The version of the entity screening's `search_terms` that were compared when the entity screening hit was added. entity screening hits are immutable once they have been reviewed. If changes are detected due to updates to the entity screening's `search_terms`, the associated entity program, or the list's source data prior to review, the entity screening hit will be updated to reflect those changes.
		 * Required
		 * Type: double
		 */
		search_terms_version: number;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		urls?: EntityScreeningHitAnalysisDocuments | null;
	}

	/** Analysis information describing why a screening hit matched the provided entity information */
	export interface EntityScreeningHitAnalysisFormProperties {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		documents: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		email_addresses: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		locations: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		names: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		phone_numbers: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * The version of the entity screening's `search_terms` that were compared when the entity screening hit was added. entity screening hits are immutable once they have been reviewed. If changes are detected due to updates to the entity screening's `search_terms`, the associated entity program, or the list's source data prior to review, the entity screening hit will be updated to reflect those changes.
		 * Required
		 * Type: double
		 */
		search_terms_version: FormControl<number | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		urls: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,
	}
	export function CreateEntityScreeningHitAnalysisFormGroup() {
		return new FormGroup<EntityScreeningHitAnalysisFormProperties>({
			documents: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			email_addresses: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			locations: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			names: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			phone_numbers: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			search_terms_version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			urls: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
		});

	}

	export enum EntityScreeningHitAnalysisDocuments { match = 'match', partial_match = 'partial_match', no_match = 'no_match', no_data = 'no_data', no_input = 'no_input' }


	/** Information associated with the entity watchlist hit */
	export interface EntityScreeningHitData {

		/** Documents associated with the watchlist hit */
		documents?: Array<EntityScreeningHitDocumentsItems>;

		/** Email addresses associated with the watchlist hit */
		email_addresses?: Array<EntityScreeningHitEmailsItems>;

		/** Locations associated with the watchlist hit */
		locations?: Array<GenericScreeningHitLocationItems>;

		/** Names associated with the watchlist hit */
		names?: Array<EntityScreeningHitNamesItems>;

		/** Phone numbers associated with the watchlist hit */
		phone_numbers?: Array<EntityScreeningHitsPhoneNumberItems>;

		/** URLs associated with the watchlist hit */
		urls?: Array<EntityScreeningHitUrlsItems>;
	}

	/** Information associated with the entity watchlist hit */
	export interface EntityScreeningHitDataFormProperties {
	}
	export function CreateEntityScreeningHitDataFormGroup() {
		return new FormGroup<EntityScreeningHitDataFormProperties>({
		});

	}


	/** Analyzed documents for the associated hit */
	export interface EntityScreeningHitDocumentsItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** An official document, usually issued by a governing body or institution, with an associated identifier. */
		data?: EntityDocument;
	}

	/** Analyzed documents for the associated hit */
	export interface EntityScreeningHitDocumentsItemsFormProperties {
	}
	export function CreateEntityScreeningHitDocumentsItemsFormGroup() {
		return new FormGroup<EntityScreeningHitDocumentsItemsFormProperties>({
		});

	}


	/** Summary object reflecting the match result of the associated data */
	export interface MatchSummary {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: EntityScreeningHitAnalysisDocuments;
	}

	/** Summary object reflecting the match result of the associated data */
	export interface MatchSummaryFormProperties {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,
	}
	export function CreateMatchSummaryFormGroup() {
		return new FormGroup<MatchSummaryFormProperties>({
			summary: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Analyzed emails for the associated hit */
	export interface EntityScreeningHitEmailsItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** Email address information for the associated entity watchlist hit */
		data?: EntityScreeningHitEmails;
	}

	/** Analyzed emails for the associated hit */
	export interface EntityScreeningHitEmailsItemsFormProperties {
	}
	export function CreateEntityScreeningHitEmailsItemsFormGroup() {
		return new FormGroup<EntityScreeningHitEmailsItemsFormProperties>({
		});

	}


	/** Email address information for the associated entity watchlist hit */
	export interface EntityScreeningHitEmails {

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: string;
	}

	/** Email address information for the associated entity watchlist hit */
	export interface EntityScreeningHitEmailsFormProperties {

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,
	}
	export function CreateEntityScreeningHitEmailsFormGroup() {
		return new FormGroup<EntityScreeningHitEmailsFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Analyzed location information for the associated hit */
	export interface GenericScreeningHitLocationItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** Location information for the associated individual watchlist hit */
		data?: WatchlistScreeningHitLocations;
	}

	/** Analyzed location information for the associated hit */
	export interface GenericScreeningHitLocationItemsFormProperties {
	}
	export function CreateGenericScreeningHitLocationItemsFormGroup() {
		return new FormGroup<GenericScreeningHitLocationItemsFormProperties>({
		});

	}


	/** Location information for the associated individual watchlist hit */
	export interface WatchlistScreeningHitLocations {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: string;

		/**
		 * The full location string, potentially including elements like street, city, postal codes and country codes. Note that this is not necessarily a complete or well-formatted address.
		 * Required
		 */
		full: string;
	}

	/** Location information for the associated individual watchlist hit */
	export interface WatchlistScreeningHitLocationsFormProperties {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The full location string, potentially including elements like street, city, postal codes and country codes. Note that this is not necessarily a complete or well-formatted address.
		 * Required
		 */
		full: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningHitLocationsFormGroup() {
		return new FormGroup<WatchlistScreeningHitLocationsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2)]),
			full: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Analyzed names for the associated hit */
	export interface EntityScreeningHitNamesItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** Name information for the associated entity watchlist hit */
		data?: EntityScreeningHitNames;
	}

	/** Analyzed names for the associated hit */
	export interface EntityScreeningHitNamesItemsFormProperties {
	}
	export function CreateEntityScreeningHitNamesItemsFormGroup() {
		return new FormGroup<EntityScreeningHitNamesItemsFormProperties>({
		});

	}


	/** Name information for the associated entity watchlist hit */
	export interface EntityScreeningHitNames {

		/**
		 * The full name of the entity.
		 * Required
		 */
		full: string;

		/**
		 * Primary names are those most commonly used to refer to this entity. Only one name will ever be marked as primary.
		 * Required
		 */
		is_primary: boolean;

		/**
		 * Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`.
		 * Required
		 */
		weak_alias_determination: EntityScreeningHitNamesWeak_alias_determination;
	}

	/** Name information for the associated entity watchlist hit */
	export interface EntityScreeningHitNamesFormProperties {

		/**
		 * The full name of the entity.
		 * Required
		 */
		full: FormControl<string | null | undefined>,

		/**
		 * Primary names are those most commonly used to refer to this entity. Only one name will ever be marked as primary.
		 * Required
		 */
		is_primary: FormControl<boolean | null | undefined>,

		/**
		 * Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`.
		 * Required
		 */
		weak_alias_determination: FormControl<EntityScreeningHitNamesWeak_alias_determination | null | undefined>,
	}
	export function CreateEntityScreeningHitNamesFormGroup() {
		return new FormGroup<EntityScreeningHitNamesFormProperties>({
			full: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_primary: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			weak_alias_determination: new FormControl<EntityScreeningHitNamesWeak_alias_determination | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EntityScreeningHitNamesWeak_alias_determination { none = 'none', source = 'source', plaid = 'plaid' }


	/** Analyzed phone numbers for the associated hit */
	export interface EntityScreeningHitsPhoneNumberItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** Phone number information associated with the entity screening hit */
		data?: EntityScreeningHitPhoneNumbers;
	}

	/** Analyzed phone numbers for the associated hit */
	export interface EntityScreeningHitsPhoneNumberItemsFormProperties {
	}
	export function CreateEntityScreeningHitsPhoneNumberItemsFormGroup() {
		return new FormGroup<EntityScreeningHitsPhoneNumberItemsFormProperties>({
		});

	}


	/** Phone number information associated with the entity screening hit */
	export interface EntityScreeningHitPhoneNumbers {

		/**
		 * A phone number in E.164 format.
		 * Required
		 */
		phone_number: string;

		/**
		 * An enum indicating whether a phone number is a phone line or a fax line.
		 * Required
		 */
		type: EntityScreeningHitPhoneNumbersType;
	}

	/** Phone number information associated with the entity screening hit */
	export interface EntityScreeningHitPhoneNumbersFormProperties {

		/**
		 * A phone number in E.164 format.
		 * Required
		 */
		phone_number: FormControl<string | null | undefined>,

		/**
		 * An enum indicating whether a phone number is a phone line or a fax line.
		 * Required
		 */
		type: FormControl<EntityScreeningHitPhoneNumbersType | null | undefined>,
	}
	export function CreateEntityScreeningHitPhoneNumbersFormGroup() {
		return new FormGroup<EntityScreeningHitPhoneNumbersFormProperties>({
			phone_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<EntityScreeningHitPhoneNumbersType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EntityScreeningHitPhoneNumbersType { phone = 'phone', fax = 'fax' }


	/** Analyzed URLs for the associated hit */
	export interface EntityScreeningHitUrlsItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** URLs associated with the entity screening hit */
		data?: EntityScreeningHitUrls;
	}

	/** Analyzed URLs for the associated hit */
	export interface EntityScreeningHitUrlsItemsFormProperties {
	}
	export function CreateEntityScreeningHitUrlsItemsFormGroup() {
		return new FormGroup<EntityScreeningHitUrlsItemsFormProperties>({
		});

	}


	/** URLs associated with the entity screening hit */
	export interface EntityScreeningHitUrls {

		/**
		 * An 'http' or 'https' URL (must begin with either of those).
		 * Required
		 */
		url: string;
	}

	/** URLs associated with the entity screening hit */
	export interface EntityScreeningHitUrlsFormProperties {

		/**
		 * An 'http' or 'https' URL (must begin with either of those).
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateEntityScreeningHitUrlsFormGroup() {
		return new FormGroup<EntityScreeningHitUrlsFormProperties>({
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when an entity screening status has changed, which can occur manually via the dashboard or during ongoing monitoring. */
	export interface EntityScreeningStatusUpdatedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The ID of the associated screening.
		 * Required
		 */
		screening_id: string;

		/**
		 * `STATUS_UPDATED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ENTITY_SCREENING`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an entity screening status has changed, which can occur manually via the dashboard or during ongoing monitoring. */
	export interface EntityScreeningStatusUpdatedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The ID of the associated screening.
		 * Required
		 */
		screening_id: FormControl<string | null | undefined>,

		/**
		 * `STATUS_UPDATED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ENTITY_SCREENING`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateEntityScreeningStatusUpdatedWebhookFormGroup() {
		return new FormGroup<EntityScreeningStatusUpdatedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Shorthand identifier for a specific screening list for entities. */
	export enum EntityWatchlistCode { CA_CON = 'CA_CON', EU_CON = 'EU_CON', IZ_SOE = 'IZ_SOE', IZ_UNC = 'IZ_UNC', IZ_WBK = 'IZ_WBK', US_CAP = 'US_CAP', US_FSE = 'US_FSE', US_MBS = 'US_MBS', US_SDN = 'US_SDN', US_SSI = 'US_SSI', US_CMC = 'US_CMC', US_UVL = 'US_UVL', AU_CON = 'AU_CON', UK_HMC = 'UK_HMC' }


	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities. */
	export interface EntityWatchlistProgram {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		id: string;

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: boolean;

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: boolean;

		/**
		 * Watchlists enabled for the associated program
		 * Required
		 */
		lists_enabled: Array<EntityWatchlistCode>;

		/**
		 * A name for the entity program to define its purpose. For example, "High Risk Organizations" or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: EntityWatchlistProgramName_sensitivity;
	}

	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities. */
	export interface EntityWatchlistProgramFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: FormControl<boolean | null | undefined>,

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: FormControl<boolean | null | undefined>,

		/**
		 * A name for the entity program to define its purpose. For example, "High Risk Organizations" or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>,
	}
	export function CreateEntityWatchlistProgramFormGroup() {
		return new FormGroup<EntityWatchlistProgramFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			is_rescanning_enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			name_sensitivity: new FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the last change made to the parent object specifying what caused the change as well as when it occurred. */
	export interface WatchlistScreeningAuditTrail {

		/**
		 * ID of the associated user.
		 * Required
		 */
		dashboard_user_id: string;

		/**
		 * A type indicating whether a dashboard user, an API-based user, or Plaid last touched this object.
		 * Required
		 */
		source: WatchlistScreeningAuditTrailSource;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		timestamp: Date;
	}

	/** Information about the last change made to the parent object specifying what caused the change as well as when it occurred. */
	export interface WatchlistScreeningAuditTrailFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		dashboard_user_id: FormControl<string | null | undefined>,

		/**
		 * A type indicating whether a dashboard user, an API-based user, or Plaid last touched this object.
		 * Required
		 */
		source: FormControl<WatchlistScreeningAuditTrailSource | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateWatchlistScreeningAuditTrailFormGroup() {
		return new FormGroup<WatchlistScreeningAuditTrailFormProperties>({
			dashboard_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source: new FormControl<WatchlistScreeningAuditTrailSource | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum WatchlistScreeningAuditTrailSource { dashboard = 'dashboard', link = 'link', api = 'api', system = 'system' }

	export enum EntityWatchlistProgramName_sensitivity { coarse = 'coarse', balanced = 'balanced', strict = 'strict', exact = 'exact' }


	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface EntityWatchlistScreening {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: string;

		/**
		 * Search terms associated with an entity used for searching against watchlists
		 * Required
		 */
		search_terms: EntityWatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface EntityWatchlistScreeningFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateEntityWatchlistScreeningFormGroup() {
		return new FormGroup<EntityWatchlistScreeningFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Search terms associated with an entity used for searching against watchlists */
	export interface EntityWatchlistScreeningSearchTerms {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: string;

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		document_number: string;

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: string;

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: string;

		/**
		 * The name of the organization being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: string;

		/**
		 * A phone number in E.164 format.
		 * Required
		 */
		phone_number: string;

		/**
		 * An 'http' or 'https' URL (must begin with either of those).
		 * Required
		 */
		url: string;

		/**
		 * The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
		 * Required
		 * Type: double
		 */
		version: number;
	}

	/** Search terms associated with an entity used for searching against watchlists */
	export interface EntityWatchlistScreeningSearchTermsFormProperties {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		document_number: FormControl<string | null | undefined>,

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: FormControl<string | null | undefined>,

		/**
		 * The name of the organization being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: FormControl<string | null | undefined>,

		/**
		 * A phone number in E.164 format.
		 * Required
		 */
		phone_number: FormControl<string | null | undefined>,

		/**
		 * An 'http' or 'https' URL (must begin with either of those).
		 * Required
		 */
		url: FormControl<string | null | undefined>,

		/**
		 * The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
		 * Required
		 * Type: double
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateEntityWatchlistScreeningSearchTermsFormGroup() {
		return new FormGroup<EntityWatchlistScreeningSearchTermsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2)]),
			document_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4)]),
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			entity_watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			phone_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EntityWatchlistScreeningStatus { rejected = 'rejected', pending_review = 'pending_review', cleared = 'cleared' }


	/** Data from a government watchlist that has been attached to the screening. */
	export interface EntityWatchlistScreeningHit {

		/** Analysis information describing why a screening hit matched the provided entity information */
		analysis?: EntityScreeningHitAnalysis;

		/** Information associated with the entity watchlist hit */
		data?: EntityScreeningHitData;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		first_active: Date;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		historical_since: Date;

		/**
		 * ID of the associated entity screening hit.
		 * Required
		 */
		id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		inactive_since: Date;

		/**
		 * Shorthand identifier for a specific screening list for entities.
		 * Required
		 */
		list_code: EntityWatchlistCode;

		/**
		 * A universal identifier for a watchlist individual that is stable across searches and updates.
		 * Required
		 */
		plaid_uid: string;

		/**
		 * The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted.
		 * Required
		 */
		review_status: EntityWatchlistScreeningHitReview_status;

		/**
		 * The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
		 * Required
		 * Min length: 1
		 */
		source_uid: string;
	}

	/** Data from a government watchlist that has been attached to the screening. */
	export interface EntityWatchlistScreeningHitFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		first_active: FormControl<Date | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		historical_since: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated entity screening hit.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		inactive_since: FormControl<Date | null | undefined>,

		/**
		 * Shorthand identifier for a specific screening list for entities.
		 * Required
		 */
		list_code: FormControl<EntityWatchlistCode | null | undefined>,

		/**
		 * A universal identifier for a watchlist individual that is stable across searches and updates.
		 * Required
		 */
		plaid_uid: FormControl<string | null | undefined>,

		/**
		 * The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted.
		 * Required
		 */
		review_status: FormControl<EntityWatchlistScreeningHitReview_status | null | undefined>,

		/**
		 * The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
		 * Required
		 * Min length: 1
		 */
		source_uid: FormControl<string | null | undefined>,
	}
	export function CreateEntityWatchlistScreeningHitFormGroup() {
		return new FormGroup<EntityWatchlistScreeningHitFormProperties>({
			first_active: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			historical_since: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inactive_since: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			list_code: new FormControl<EntityWatchlistCode | null | undefined>(undefined, [Validators.required]),
			plaid_uid: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			review_status: new FormControl<EntityWatchlistScreeningHitReview_status | null | undefined>(undefined, [Validators.required]),
			source_uid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}

	export enum EntityWatchlistScreeningHitReview_status { confirmed = 'confirmed', pending_review = 'pending_review', dismissed = 'dismissed' }


	/**
	 * A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface EntityWatchlistScreeningReview {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: string;

		/**
		 * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
		 * Required
		 */
		confirmed_hits: Array<string>;

		/**
		 * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
		 * Required
		 */
		dismissed_hits: Array<string>;

		/**
		 * ID of the associated entity review.
		 * Required
		 */
		id: string;
	}

	/**
	 * A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface EntityWatchlistScreeningReviewFormProperties {

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity review.
		 * Required
		 */
		id: FormControl<string | null | undefined>,
	}
	export function CreateEntityWatchlistScreeningReviewFormGroup() {
		return new FormGroup<EntityWatchlistScreeningReviewFormProperties>({
			comment: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Search inputs for creating an entity watchlist screening */
	export interface EntityWatchlistSearchTerms {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country?: string | null;

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number?: string | null;

		/** A valid email address. */
		email_address?: string | null;

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: string;

		/**
		 * The name of the organization being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: string;

		/** A phone number in E.164 format. */
		phone_number?: string | null;

		/** An 'http' or 'https' URL (must begin with either of those). */
		url?: string | null;
	}

	/** Search inputs for creating an entity watchlist screening */
	export interface EntityWatchlistSearchTermsFormProperties {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number: FormControl<string | null | undefined>,

		/** A valid email address. */
		email_address: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: FormControl<string | null | undefined>,

		/**
		 * The name of the organization being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: FormControl<string | null | undefined>,

		/** A phone number in E.164 format. */
		phone_number: FormControl<string | null | undefined>,

		/** An 'http' or 'https' URL (must begin with either of those). */
		url: FormControl<string | null | undefined>,
	}
	export function CreateEntityWatchlistSearchTermsFormGroup() {
		return new FormGroup<EntityWatchlistSearchTermsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2)]),
			document_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(4)]),
			email_address: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			phone_number: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A description of whether the associated document was expired when the verification was performed.
	 * Note: In the case where an expiration date is not present on the document or failed to be extracted, this value will be `no_data`.
	 */
	export enum ExpirationDate { not_expired = 'not_expired', expired = 'expired', no_data = 'no_data' }


	/** Additional payment consent options */
	export interface ExternalPaymentInitiationConsentOptions {

		/** An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account. */
		bacs?: PaymentInitiationOptionalRestrictionBacs;

		/**
		 * The International Bank Account Number (IBAN) for the payer's account. Where possible, the end user will be able to set up payment consent using only the specified bank account if provided.
		 * Min length: 15
		 * Max length: 34
		 */
		iban?: string | null;

		/** When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
		request_refund_details?: boolean | null;
	}

	/** Additional payment consent options */
	export interface ExternalPaymentInitiationConsentOptionsFormProperties {

		/**
		 * The International Bank Account Number (IBAN) for the payer's account. Where possible, the end user will be able to set up payment consent using only the specified bank account if provided.
		 * Min length: 15
		 * Max length: 34
		 */
		iban: FormControl<string | null | undefined>,

		/** When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
		request_refund_details: FormControl<boolean | null | undefined>,
	}
	export function CreateExternalPaymentInitiationConsentOptionsFormGroup() {
		return new FormGroup<ExternalPaymentInitiationConsentOptionsFormProperties>({
			iban: new FormControl<string | null | undefined>(undefined, [Validators.minLength(15), Validators.maxLength(34)]),
			request_refund_details: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Additional payment options */
	export interface ExternalPaymentOptions {

		/** An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account. */
		bacs?: PaymentInitiationOptionalRestrictionBacs;

		/**
		 * The International Bank Account Number (IBAN) for the payer's account. Where possible, the end user will be able to send payments only from the specified bank account if provided.
		 * Min length: 15
		 * Max length: 34
		 */
		iban?: string | null;

		/** When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
		request_refund_details?: boolean | null;

		/**
		 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
		 * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
		 * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
		 * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
		 * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
		 */
		scheme?: ExternalPaymentOptionsScheme | null;
	}

	/** Additional payment options */
	export interface ExternalPaymentOptionsFormProperties {

		/**
		 * The International Bank Account Number (IBAN) for the payer's account. Where possible, the end user will be able to send payments only from the specified bank account if provided.
		 * Min length: 15
		 * Max length: 34
		 */
		iban: FormControl<string | null | undefined>,

		/** When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
		request_refund_details: FormControl<boolean | null | undefined>,

		/**
		 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
		 * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
		 * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
		 * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
		 * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
		 */
		scheme: FormControl<ExternalPaymentOptionsScheme | null | undefined>,
	}
	export function CreateExternalPaymentOptionsFormGroup() {
		return new FormGroup<ExternalPaymentOptionsFormProperties>({
			iban: new FormControl<string | null | undefined>(undefined, [Validators.minLength(15), Validators.maxLength(34)]),
			request_refund_details: new FormControl<boolean | null | undefined>(undefined),
			scheme: new FormControl<ExternalPaymentOptionsScheme | null | undefined>(undefined),
		});

	}

	export enum ExternalPaymentOptionsScheme { _null = 0, LOCAL_DEFAULT = 'LOCAL_DEFAULT', LOCAL_INSTANT = 'LOCAL_INSTANT', SEPA_CREDIT_TRANSFER = 'SEPA_CREDIT_TRANSFER', SEPA_CREDIT_TRANSFER_INSTANT = 'SEPA_CREDIT_TRANSFER_INSTANT' }


	/** Details about external payment refund */
	export interface ExternalPaymentRefundDetails {

		/**
		 * An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required.
		 * Required
		 */
		bacs: RecipientBACSNullable;

		/**
		 * The International Bank Account Number (IBAN) for the account.
		 * Required
		 */
		iban: string;

		/**
		 * The name of the account holder.
		 * Required
		 */
		name: string;
	}

	/** Details about external payment refund */
	export interface ExternalPaymentRefundDetailsFormProperties {

		/**
		 * The International Bank Account Number (IBAN) for the account.
		 * Required
		 */
		iban: FormControl<string | null | undefined>,

		/**
		 * The name of the account holder.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateExternalPaymentRefundDetailsFormGroup() {
		return new FormGroup<ExternalPaymentRefundDetailsFormProperties>({
			iban: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
	export interface ExternalPaymentScheduleBase {

		/**
		 * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
		 * Type: DateOnly
		 */
		adjusted_start_date?: Date | null;

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`.
		 * If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
		 * Type: DateOnly
		 */
		end_date?: Date | null;

		/**
		 * The frequency interval of the payment.
		 * Min length: 1
		 */
		interval?: ExternalPaymentScheduleBaseInterval | null;

		/**
		 * The day of the interval on which to schedule the payment.
		 * If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).
		 * If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		interval_execution_day?: number | null;

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.
		 * If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
		 * Type: DateOnly
		 */
		start_date?: Date | null;
	}

	/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
	export interface ExternalPaymentScheduleBaseFormProperties {

		/**
		 * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
		 * Type: DateOnly
		 */
		adjusted_start_date: FormControl<Date | null | undefined>,

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`.
		 * If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The frequency interval of the payment.
		 * Min length: 1
		 */
		interval: FormControl<ExternalPaymentScheduleBaseInterval | null | undefined>,

		/**
		 * The day of the interval on which to schedule the payment.
		 * If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).
		 * If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		interval_execution_day: FormControl<number | null | undefined>,

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.
		 * If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateExternalPaymentScheduleBaseFormGroup() {
		return new FormGroup<ExternalPaymentScheduleBaseFormProperties>({
			adjusted_start_date: new FormControl<Date | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
			interval: new FormControl<ExternalPaymentScheduleBaseInterval | null | undefined>(undefined, [Validators.minLength(1)]),
			interval_execution_day: new FormControl<number | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum ExternalPaymentScheduleBaseInterval { WEEKLY = 'WEEKLY', MONTHLY = 'MONTHLY' }


	/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
	export interface ExternalPaymentScheduleGet extends ExternalPaymentScheduleBase {
	}

	/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
	export interface ExternalPaymentScheduleGetFormProperties extends ExternalPaymentScheduleBaseFormProperties {
	}
	export function CreateExternalPaymentScheduleGetFormGroup() {
		return new FormGroup<ExternalPaymentScheduleGetFormProperties>({
			adjusted_start_date: new FormControl<Date | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
			interval: new FormControl<ExternalPaymentScheduleBaseInterval | null | undefined>(undefined, [Validators.minLength(1)]),
			interval_execution_day: new FormControl<number | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
	export interface ExternalPaymentScheduleRequest extends ExternalPaymentScheduleBase {
	}

	/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
	export interface ExternalPaymentScheduleRequestFormProperties extends ExternalPaymentScheduleBaseFormProperties {
	}
	export function CreateExternalPaymentScheduleRequestFormGroup() {
		return new FormGroup<ExternalPaymentScheduleRequestFormProperties>({
			adjusted_start_date: new FormControl<Date | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
			interval: new FormControl<ExternalPaymentScheduleBaseInterval | null | undefined>(undefined, [Validators.minLength(1)]),
			interval_execution_day: new FormControl<number | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Types of document formats. (Suggested values) */
	export enum FDXContentTypes { 'application/pdf' = 'application/pdf', 'image/gif' = 'image/gif', 'image/jpeg' = 'image/jpeg', 'image/tiff' = 'image/tiff', 'image/png' = 'image/png', 'application/json' = 'application/json' }


	/** Financial Institution provider-specific attribute */
	export interface FDXFiAttribute {

		/** Name of attribute */
		name?: string | null;

		/** Value of attribute */
		value?: string | null;
	}

	/** Financial Institution provider-specific attribute */
	export interface FDXFiAttributeFormProperties {

		/** Name of attribute */
		name: FormControl<string | null | undefined>,

		/** Value of attribute */
		value: FormControl<string | null | undefined>,
	}
	export function CreateFDXFiAttributeFormGroup() {
		return new FormGroup<FDXFiAttributeFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** REST application constraint (Hypermedia As The Engine Of Application State) */
	export interface FDXHateoasLink {

		/** HTTP Method to use for the request */
		action?: FDXHateoasLinkAction | null;

		/**
		 * URL to invoke the action on the resource
		 * Required
		 */
		href: string;

		/** Relation of this link to its containing entity, as defined by and with many example relation values at [IETF RFC5988](https://datatracker.ietf.org/doc/html/rfc5988) */
		rel?: string | null;

		/** Content-types that can be used in the Accept header */
		types?: Array<FDXContentTypes>;
	}

	/** REST application constraint (Hypermedia As The Engine Of Application State) */
	export interface FDXHateoasLinkFormProperties {

		/** HTTP Method to use for the request */
		action: FormControl<FDXHateoasLinkAction | null | undefined>,

		/**
		 * URL to invoke the action on the resource
		 * Required
		 */
		href: FormControl<string | null | undefined>,

		/** Relation of this link to its containing entity, as defined by and with many example relation values at [IETF RFC5988](https://datatracker.ietf.org/doc/html/rfc5988) */
		rel: FormControl<string | null | undefined>,
	}
	export function CreateFDXHateoasLinkFormGroup() {
		return new FormGroup<FDXHateoasLinkFormProperties>({
			action: new FormControl<FDXHateoasLinkAction | null | undefined>(undefined),
			href: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rel: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum FDXHateoasLinkAction { GET = 'GET', POST = 'POST', PATCH = 'PATCH', DELETE = 'DELETE', PUT = 'PUT' }


	/** Provides the base fields of a notification. Clients will read the `type` property to determine the expected notification payload */
	export interface FDXNotification {

		/**
		 * Category of Notification
		 * Required
		 */
		category: FDXNotificationCategory;

		/**
		 * Id of notification
		 * Required
		 */
		notificationId: string;

		/**
		 * Custom key-value pairs payload for a notification
		 * Required
		 */
		notificationPayload: FDXNotificationPayload;

		/** Priority of notification */
		priority?: FDXNotificationPriority | null;

		/**
		 * FDX Participant - an entity or person that is a part of a FDX API transaction
		 * Required
		 */
		publisher: FDXParty;

		/**
		 * ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
		 * Required
		 */
		sentOn: Date;

		/** Severity level of notification */
		severity?: FDXNotificationSeverity | null;

		/** FDX Participant - an entity or person that is a part of a FDX API transaction */
		subscriber?: FDXParty;

		/**
		 * Type of Notification
		 * Required
		 */
		type: FDXNotificationType;

		/** REST application constraint (Hypermedia As The Engine Of Application State) */
		url?: FDXHateoasLink;
	}

	/** Provides the base fields of a notification. Clients will read the `type` property to determine the expected notification payload */
	export interface FDXNotificationFormProperties {

		/**
		 * Category of Notification
		 * Required
		 */
		category: FormControl<FDXNotificationCategory | null | undefined>,

		/**
		 * Id of notification
		 * Required
		 */
		notificationId: FormControl<string | null | undefined>,

		/** Priority of notification */
		priority: FormControl<FDXNotificationPriority | null | undefined>,

		/**
		 * ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
		 * Required
		 */
		sentOn: FormControl<Date | null | undefined>,

		/** Severity level of notification */
		severity: FormControl<FDXNotificationSeverity | null | undefined>,

		/**
		 * Type of Notification
		 * Required
		 */
		type: FormControl<FDXNotificationType | null | undefined>,
	}
	export function CreateFDXNotificationFormGroup() {
		return new FormGroup<FDXNotificationFormProperties>({
			category: new FormControl<FDXNotificationCategory | null | undefined>(undefined, [Validators.required]),
			notificationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			priority: new FormControl<FDXNotificationPriority | null | undefined>(undefined),
			sentOn: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			severity: new FormControl<FDXNotificationSeverity | null | undefined>(undefined),
			type: new FormControl<FDXNotificationType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum FDXNotificationCategory { SECURITY = 'SECURITY', MAINTENANCE = 'MAINTENANCE', FRAUD = 'FRAUD', CONSENT = 'CONSENT', NEW_DATA = 'NEW_DATA' }


	/** Custom key-value pairs payload for a notification */
	export interface FDXNotificationPayload {

		/** Financial Institution provider-specific attribute */
		customFields?: FDXFiAttribute;

		/** ID for the origination entity related to the notification */
		id?: string | null;

		/** Type of entity causing origination of a notification */
		idType?: FDXNotificationPayloadIdType | null;
	}

	/** Custom key-value pairs payload for a notification */
	export interface FDXNotificationPayloadFormProperties {

		/** ID for the origination entity related to the notification */
		id: FormControl<string | null | undefined>,

		/** Type of entity causing origination of a notification */
		idType: FormControl<FDXNotificationPayloadIdType | null | undefined>,
	}
	export function CreateFDXNotificationPayloadFormGroup() {
		return new FormGroup<FDXNotificationPayloadFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			idType: new FormControl<FDXNotificationPayloadIdType | null | undefined>(undefined),
		});

	}

	export enum FDXNotificationPayloadIdType { ACCOUNT = 'ACCOUNT', CUSTOMER = 'CUSTOMER', PARTY = 'PARTY', MAINTENANCE = 'MAINTENANCE', CONSENT = 'CONSENT' }

	export enum FDXNotificationPriority { HIGH = 'HIGH', MEDIUM = 'MEDIUM', LOW = 'LOW' }


	/** FDX Participant - an entity or person that is a part of a FDX API transaction */
	export interface FDXParty {

		/** URI for party, where an end user could learn more about the company or application involved in the data sharing chain */
		homeUri?: string | null;

		/** URI for a logo asset to be displayed to the end user */
		logoUri?: string | null;

		/**
		 * Human recognizable common name
		 * Required
		 */
		name: string;

		/** Registered id of party */
		registeredEntityId?: string | null;

		/** Registered name of party */
		registeredEntityName?: string | null;

		/** The registry containing the partyâ€™s registration with name and id */
		registry?: FDXPartyRegistry | null;

		/**
		 * Identifies the type of a party
		 * Required
		 */
		type: FDXPartyType;
	}

	/** FDX Participant - an entity or person that is a part of a FDX API transaction */
	export interface FDXPartyFormProperties {

		/** URI for party, where an end user could learn more about the company or application involved in the data sharing chain */
		homeUri: FormControl<string | null | undefined>,

		/** URI for a logo asset to be displayed to the end user */
		logoUri: FormControl<string | null | undefined>,

		/**
		 * Human recognizable common name
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/** Registered id of party */
		registeredEntityId: FormControl<string | null | undefined>,

		/** Registered name of party */
		registeredEntityName: FormControl<string | null | undefined>,

		/** The registry containing the partyâ€™s registration with name and id */
		registry: FormControl<FDXPartyRegistry | null | undefined>,

		/**
		 * Identifies the type of a party
		 * Required
		 */
		type: FormControl<FDXPartyType | null | undefined>,
	}
	export function CreateFDXPartyFormGroup() {
		return new FormGroup<FDXPartyFormProperties>({
			homeUri: new FormControl<string | null | undefined>(undefined),
			logoUri: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			registeredEntityId: new FormControl<string | null | undefined>(undefined),
			registeredEntityName: new FormControl<string | null | undefined>(undefined),
			registry: new FormControl<FDXPartyRegistry | null | undefined>(undefined),
			type: new FormControl<FDXPartyType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum FDXPartyRegistry { FDX = 'FDX', GLEIF = 'GLEIF', ICANN = 'ICANN', PRIVATE = 'PRIVATE' }

	export enum FDXPartyType { DATA_ACCESS_PLATFORM = 'DATA_ACCESS_PLATFORM', DATA_PROVIDER = 'DATA_PROVIDER', DATA_RECIPIENT = 'DATA_RECIPIENT', INDIVIDUAL = 'INDIVIDUAL', MERCHANT = 'MERCHANT', VENDOR = 'VENDOR' }

	export enum FDXNotificationSeverity { EMERGENCY = 'EMERGENCY', ALERT = 'ALERT', WARNING = 'WARNING', NOTICE = 'NOTICE', INFO = 'INFO' }

	export enum FDXNotificationType { CONSENT_REVOKED = 'CONSENT_REVOKED', CONSENT_UPDATED = 'CONSENT_UPDATED', CUSTOM = 'CUSTOM', SERVICE = 'SERVICE', BALANCE = 'BALANCE', PLANNED_OUTAGE = 'PLANNED_OUTAGE' }


	/** Fires when an account is automatically verified using micro-deposits */
	export interface FallbackAuthMicrodepositAutoVerifiedWebhook {

		/**
		 * The external account ID associated with the micro-deposit
		 * Required
		 */
		account_id: string;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** The error code associated with the webhook. */
		error?: string | null;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `AUTOMATICALLY_VERIFIED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fires when an account is automatically verified using micro-deposits */
	export interface FallbackAuthMicrodepositAutoVerifiedWebhookFormProperties {

		/**
		 * The external account ID associated with the micro-deposit
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/** The error code associated with the webhook. */
		error: FormControl<string | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `AUTOMATICALLY_VERIFIED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateFallbackAuthMicrodepositAutoVerifiedWebhookFormGroup() {
		return new FormGroup<FallbackAuthMicrodepositAutoVerifiedWebhookFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			error: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fires when an account has an expired verification when using micro-deposits */
	export interface FallbackAuthMicrodepositVerificationExpiredWebhook {

		/**
		 * The external account ID associated with the micro-deposit
		 * Required
		 */
		account_id: string;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** The error code associated with the webhook. */
		error?: string | null;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `VERIFICATION_EXPIRED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fires when an account has an expired verification when using micro-deposits */
	export interface FallbackAuthMicrodepositVerificationExpiredWebhookFormProperties {

		/**
		 * The external account ID associated with the micro-deposit
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/** The error code associated with the webhook. */
		error: FormControl<string | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `VERIFICATION_EXPIRED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateFallbackAuthMicrodepositVerificationExpiredWebhookFormGroup() {
		return new FormGroup<FallbackAuthMicrodepositVerificationExpiredWebhookFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			error: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Form 1099 Type */
	export enum Form1099Type { FORM_1099_TYPE_UNKNOWN = 'FORM_1099_TYPE_UNKNOWN', FORM_1099_TYPE_MISC = 'FORM_1099_TYPE_MISC', FORM_1099_TYPE_K = 'FORM_1099_TYPE_K' }


	/** A status health incident */
	export interface HealthIncident {

		/** The end date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`. */
		end_date?: Date | null;

		/**
		 * Updates on the health incident.
		 * Required
		 */
		incident_updates: Array<IncidentUpdate>;

		/**
		 * The start date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
		 * Required
		 */
		start_date: Date;

		/**
		 * The title of the incident
		 * Required
		 */
		title: string;
	}

	/** A status health incident */
	export interface HealthIncidentFormProperties {

		/** The end date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`. */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The start date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
		 * Required
		 */
		start_date: FormControl<Date | null | undefined>,

		/**
		 * The title of the incident
		 * Required
		 */
		title: FormControl<string | null | undefined>,
	}
	export function CreateHealthIncidentFormGroup() {
		return new FormGroup<HealthIncidentFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An update on the health incident */
	export interface IncidentUpdate {

		/** The content of the update. */
		description?: string | null;

		/** The status of the incident. */
		status?: IncidentUpdateStatus | null;

		/** The date when the update was published, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`. */
		updated_date?: Date | null;
	}

	/** An update on the health incident */
	export interface IncidentUpdateFormProperties {

		/** The content of the update. */
		description: FormControl<string | null | undefined>,

		/** The status of the incident. */
		status: FormControl<IncidentUpdateStatus | null | undefined>,

		/** The date when the update was published, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`. */
		updated_date: FormControl<Date | null | undefined>,
	}
	export function CreateIncidentUpdateFormGroup() {
		return new FormGroup<IncidentUpdateFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<IncidentUpdateStatus | null | undefined>(undefined),
			updated_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum IncidentUpdateStatus { INVESTIGATING = 'INVESTIGATING', IDENTIFIED = 'IDENTIFIED', SCHEDULED = 'SCHEDULED', RESOLVED = 'RESOLVED', UNKNOWN = 'UNKNOWN' }


	/**
	 * Fired when an Item's historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface HistoricalUpdateWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * The number of new, unfetched transactions available
		 * Required
		 * Type: double
		 */
		new_transactions: number;

		/**
		 * `HISTORICAL_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: string;
	}

	/**
	 * Fired when an Item's historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface HistoricalUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The number of new, unfetched transactions available
		 * Required
		 * Type: double
		 */
		new_transactions: FormControl<number | null | undefined>,

		/**
		 * `HISTORICAL_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateHistoricalUpdateWebhookFormGroup() {
		return new FormGroup<HistoricalUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			new_transactions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A securities holding at an institution. */
	export interface Holding {

		/**
		 * The Plaid `account_id` associated with the holding.
		 * Required
		 */
		account_id: string;

		/**
		 * The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
		 * Required
		 * Type: double
		 */
		cost_basis: number;

		/**
		 * The last price given by the institution for this security.
		 * Required
		 * Type: double
		 */
		institution_price: number;

		/**
		 * The date at which `institution_price` was current.
		 * Type: DateOnly
		 */
		institution_price_as_of?: Date | null;

		/**
		 * Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
		 * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
		 */
		institution_price_datetime?: Date | null;

		/**
		 * The value of the holding, as reported by the institution.
		 * Required
		 * Type: double
		 */
		institution_value: number;

		/**
		 * The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
		 * Required
		 * Type: double
		 */
		quantity: number;

		/**
		 * The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
		 * Required
		 */
		security_id: string;

		/**
		 * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;
	}

	/** A securities holding at an institution. */
	export interface HoldingFormProperties {

		/**
		 * The Plaid `account_id` associated with the holding.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
		 * Required
		 * Type: double
		 */
		cost_basis: FormControl<number | null | undefined>,

		/**
		 * The last price given by the institution for this security.
		 * Required
		 * Type: double
		 */
		institution_price: FormControl<number | null | undefined>,

		/**
		 * The date at which `institution_price` was current.
		 * Type: DateOnly
		 */
		institution_price_as_of: FormControl<Date | null | undefined>,

		/**
		 * Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
		 * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
		 */
		institution_price_datetime: FormControl<Date | null | undefined>,

		/**
		 * The value of the holding, as reported by the institution.
		 * Required
		 * Type: double
		 */
		institution_value: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
		 * Required
		 * Type: double
		 */
		quantity: FormControl<number | null | undefined>,

		/**
		 * The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
		 * Required
		 */
		security_id: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateHoldingFormGroup() {
		return new FormGroup<HoldingFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cost_basis: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			institution_price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			institution_price_as_of: new FormControl<Date | null | undefined>(undefined),
			institution_price_datetime: new FormControl<Date | null | undefined>(undefined),
			institution_value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			security_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when new or updated holdings have been detected on an investment account. The webhook typically fires in response to any newly added holdings or price changes to existing holdings, most commonly after market close. */
	export interface HoldingsDefaultUpdateWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * The number of new holdings reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		new_holdings: number;

		/**
		 * The number of updated holdings reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		updated_holdings: number;

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `HOLDINGS`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when new or updated holdings have been detected on an investment account. The webhook typically fires in response to any newly added holdings or price changes to existing holdings, most commonly after market close. */
	export interface HoldingsDefaultUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The number of new holdings reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		new_holdings: FormControl<number | null | undefined>,

		/**
		 * The number of updated holdings reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		updated_holdings: FormControl<number | null | undefined>,

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `HOLDINGS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateHoldingsDefaultUpdateWebhookFormGroup() {
		return new FormGroup<HoldingsDefaultUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			new_holdings: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			updated_holdings: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specify the holdings on the account. */
	export interface HoldingsOverride {

		/**
		 * The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.
		 * Type: double
		 */
		cost_basis?: number | null;

		/**
		 * Either a valid `iso_currency_code` or `unofficial_currency_code`
		 * Required
		 */
		currency: string;

		/**
		 * The last price given by the institution for this security
		 * Required
		 * Type: double
		 */
		institution_price: number;

		/**
		 * The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
		 * Type: DateOnly
		 */
		institution_price_as_of?: Date | null;

		/**
		 * The total quantity of the asset held, as reported by the financial institution.
		 * Required
		 * Type: double
		 */
		quantity: number;

		/**
		 * Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required.
		 * Required
		 */
		security: SecurityOverride;
	}

	/** Specify the holdings on the account. */
	export interface HoldingsOverrideFormProperties {

		/**
		 * The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.
		 * Type: double
		 */
		cost_basis: FormControl<number | null | undefined>,

		/**
		 * Either a valid `iso_currency_code` or `unofficial_currency_code`
		 * Required
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * The last price given by the institution for this security
		 * Required
		 * Type: double
		 */
		institution_price: FormControl<number | null | undefined>,

		/**
		 * The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
		 * Type: DateOnly
		 */
		institution_price_as_of: FormControl<Date | null | undefined>,

		/**
		 * The total quantity of the asset held, as reported by the financial institution.
		 * Required
		 * Type: double
		 */
		quantity: FormControl<number | null | undefined>,
	}
	export function CreateHoldingsOverrideFormGroup() {
		return new FormGroup<HoldingsOverrideFormProperties>({
			cost_basis: new FormControl<number | null | undefined>(undefined),
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			institution_price_as_of: new FormControl<Date | null | undefined>(undefined),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required. */
	export interface SecurityOverride {

		/** Either a valid `iso_currency_code` or `unofficial_currency_code` */
		currency?: string | null;

		/** 9-character CUSIP, an identifier assigned to North American securities. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com. */
		cusip?: string | null;

		/** 12-character ISIN, a globally unique securities identifier. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com. */
		isin?: string | null;

		/** A descriptive name for the security, suitable for display. */
		name?: string | null;

		/** 7-character SEDOL, an identifier assigned to securities in the UK. */
		sedol?: string | null;

		/** The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
		ticker_symbol?: string | null;
	}

	/** Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required. */
	export interface SecurityOverrideFormProperties {

		/** Either a valid `iso_currency_code` or `unofficial_currency_code` */
		currency: FormControl<string | null | undefined>,

		/** 9-character CUSIP, an identifier assigned to North American securities. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com. */
		cusip: FormControl<string | null | undefined>,

		/** 12-character ISIN, a globally unique securities identifier. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com. */
		isin: FormControl<string | null | undefined>,

		/** A descriptive name for the security, suitable for display. */
		name: FormControl<string | null | undefined>,

		/** 7-character SEDOL, an identifier assigned to securities in the UK. */
		sedol: FormControl<string | null | undefined>,

		/** The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
		ticker_symbol: FormControl<string | null | undefined>,
	}
	export function CreateSecurityOverrideFormGroup() {
		return new FormGroup<SecurityOverrideFormProperties>({
			currency: new FormControl<string | null | undefined>(undefined),
			cusip: new FormControl<string | null | undefined>(undefined),
			isin: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			sedol: new FormControl<string | null | undefined>(undefined),
			ticker_symbol: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://plaid.com/docs/identity-verification/hybrid-input-validation). */
	export enum IDNumberType { ar_dni = 'ar_dni', au_drivers_license = 'au_drivers_license', au_passport = 'au_passport', br_cpf = 'br_cpf', ca_sin = 'ca_sin', cl_run = 'cl_run', cn_resident_card = 'cn_resident_card', co_nit = 'co_nit', dk_cpr = 'dk_cpr', eg_national_id = 'eg_national_id', es_dni = 'es_dni', es_nie = 'es_nie', hk_hkid = 'hk_hkid', in_pan = 'in_pan', it_cf = 'it_cf', jo_civil_id = 'jo_civil_id', jp_my_number = 'jp_my_number', ke_huduma_namba = 'ke_huduma_namba', kw_civil_id = 'kw_civil_id', mx_curp = 'mx_curp', mx_rfc = 'mx_rfc', my_nric = 'my_nric', ng_nin = 'ng_nin', nz_drivers_license = 'nz_drivers_license', om_civil_id = 'om_civil_id', ph_psn = 'ph_psn', pl_pesel = 'pl_pesel', ro_cnp = 'ro_cnp', sa_national_id = 'sa_national_id', se_pin = 'se_pin', sg_nric = 'sg_nric', tr_tc_kimlik = 'tr_tc_kimlik', us_ssn = 'us_ssn', us_ssn_last_4 = 'us_ssn_last_4', za_smart_id = 'za_smart_id' }


	/** Fired when a change to identity data has been detected on an Item. Items are checked for identity updates every 30-90 days. We recommend that upon receiving this webhook you make another call to `/identity/get` to fetch the user's latest identity data. */
	export interface IdentityDefaultUpdateWebhook {

		/**
		 * An object with keys of `account_id`'s that are mapped to their respective identity attributes that changed.
		 * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["PHONES"] }`
		 * Required
		 */
		account_ids_with_updated_identity: AccountIdsWithUpdatedIdentity;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
		 * Required
		 */
		error: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `IDENTITY`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when a change to identity data has been detected on an Item. Items are checked for identity updates every 30-90 days. We recommend that upon receiving this webhook you make another call to `/identity/get` to fetch the user's latest identity data. */
	export interface IdentityDefaultUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `IDENTITY`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateIdentityDefaultUpdateWebhookFormGroup() {
		return new FormGroup<IdentityDefaultUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** IdentityGetRequest defines the request schema for `/identity/get` */
	export interface IdentityGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter `/identity/get` results. */
		options?: IdentityGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** IdentityGetRequest defines the request schema for `/identity/get` */
	export interface IdentityGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateIdentityGetRequestFormGroup() {
		return new FormGroup<IdentityGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/identity/get` results. */
	export interface IdentityGetRequestOptions {

		/**
		 * A list of `account_ids` to retrieve for the Item.
		 * Note: An error will be returned if a provided `account_id` is not associated with the Item.
		 */
		account_ids?: Array<string>;
	}

	/** An optional object to filter `/identity/get` results. */
	export interface IdentityGetRequestOptionsFormProperties {
	}
	export function CreateIdentityGetRequestOptionsFormGroup() {
		return new FormGroup<IdentityGetRequestOptionsFormProperties>({
		});

	}


	/** IdentityGetResponse defines the response schema for `/identity/get` */
	export interface IdentityGetResponse {

		/**
		 * The accounts for which Identity data has been requested
		 * Required
		 */
		accounts: Array<AccountIdentity>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** IdentityGetResponse defines the response schema for `/identity/get` */
	export interface IdentityGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityGetResponseFormGroup() {
		return new FormGroup<IdentityGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** IdentityMatchRequest defines the request schema for `/identity/match` */
	export interface IdentityMatchRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** ID of the associated Identity Verification attempt. This field can be used instead of `user` to perform fuzzy match against the data collected during identity verification. */
		identity_verification_id?: string | null;

		/** An optional object to filter /identity/match results */
		options?: IdentityMatchRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user's legal name, phone number, email address and address used to perform fuzzy match. */
		user?: IdentityMatchUser;
	}

	/** IdentityMatchRequest defines the request schema for `/identity/match` */
	export interface IdentityMatchRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** ID of the associated Identity Verification attempt. This field can be used instead of `user` to perform fuzzy match against the data collected during identity verification. */
		identity_verification_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateIdentityMatchRequestFormGroup() {
		return new FormGroup<IdentityMatchRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			identity_verification_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter /identity/match results */
	export interface IdentityMatchRequestOptions {

		/** An array of `account_ids` to perform fuzzy match */
		account_ids?: Array<string>;
	}

	/** An optional object to filter /identity/match results */
	export interface IdentityMatchRequestOptionsFormProperties {
	}
	export function CreateIdentityMatchRequestOptionsFormGroup() {
		return new FormGroup<IdentityMatchRequestOptionsFormProperties>({
		});

	}


	/** The user's legal name, phone number, email address and address used to perform fuzzy match. */
	export interface IdentityMatchUser {

		/** Data about the components comprising an address. */
		address?: AddressDataNullable;

		/** The user's email address. */
		email_address?: string | null;

		/** The user's full legal name. */
		legal_name?: string | null;

		/** The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
		phone_number?: string | null;
	}

	/** The user's legal name, phone number, email address and address used to perform fuzzy match. */
	export interface IdentityMatchUserFormProperties {

		/** The user's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The user's full legal name. */
		legal_name: FormControl<string | null | undefined>,

		/** The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateIdentityMatchUserFormGroup() {
		return new FormGroup<IdentityMatchUserFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			legal_name: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** IdentityMatchResponse defines the response schema for `/identity/match` */
	export interface IdentityMatchResponse {

		/**
		 * The accounts for which Identity match has been requested
		 * Required
		 */
		accounts: Array<AccountIdentityMatchScore>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** IdentityMatchResponse defines the response schema for `/identity/match` */
	export interface IdentityMatchResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityMatchResponseFormGroup() {
		return new FormGroup<IdentityMatchResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The possible types of identity data that may have changed. */
	export enum IdentityUpdateTypes { PHONES = 'PHONES', ADDRESSES = 'ADDRESSES', EMAILS = 'EMAILS', NAMES = 'NAMES' }


	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerification {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: Date;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		documentary_verification: DocumentaryVerification;

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: string;

		/**
		 * Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		kyc_check: KYCCheckDetails;

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: Date;

		/**
		 * Additional information for the `risk_check` step.
		 * Required
		 */
		risk_check: RiskCheckDetails;

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: string;

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: IdentityVerificationStatus;

		/**
		 * Each step will be one of the following values:
		 * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
		 * `success` - The Identity Verification attempt has completed this step.
		 * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
		 * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
		 * `not_applicable` - This step will not be run for this session.
		 * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
		 * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
		 * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
		 * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
		 * Required
		 */
		steps: IdentityVerificationStepSummary;

		/**
		 * The resource ID and version number of the template configuring the behavior of a given identity verification.
		 * Required
		 */
		template: IdentityVerificationTemplateReference;

		/**
		 * The identity data that was either collected from the user or provided via API in order to perform an identity verification.
		 * Required
		 */
		user: IdentityVerificationUserData;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerificationFormProperties {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: FormControl<Date | null | undefined>,

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: FormControl<string | null | undefined>,

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: FormControl<IdentityVerificationStatus | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationFormGroup() {
		return new FormGroup<IdentityVerificationFormProperties>({
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_attempt_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			redacted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			shareable_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<IdentityVerificationStatus | null | undefined>(undefined, [Validators.required]),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`. */
	export interface KYCCheckDetails {

		/**
		 * Result summary object specifying how the `address` field matched.
		 * Required
		 */
		address: KYCCheckAddressSummary;

		/**
		 * Result summary object specifying how the `date_of_birth` field matched.
		 * Required
		 */
		date_of_birth: KYCCheckDateOfBirthSummary;

		/**
		 * Result summary object specifying how the `id_number` field matched.
		 * Required
		 */
		id_number: KYCCheckIDNumberSummary;

		/**
		 * Result summary object specifying how the `name` field matched.
		 * Required
		 */
		name: KYCCheckNameSummary;

		/**
		 * Result summary object specifying how the `phone` field matched.
		 * Required
		 */
		phone_number: KYCCheckPhoneSummary;

		/**
		 * The outcome status for the associated Identity Verification attempt's `kyc_check` step. This field will always have the same value as `steps.kyc_check`.
		 * Required
		 */
		status: string;
	}

	/** Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`. */
	export interface KYCCheckDetailsFormProperties {

		/**
		 * The outcome status for the associated Identity Verification attempt's `kyc_check` step. This field will always have the same value as `steps.kyc_check`.
		 * Required
		 */
		status: FormControl<string | null | undefined>,
	}
	export function CreateKYCCheckDetailsFormGroup() {
		return new FormGroup<KYCCheckDetailsFormProperties>({
			status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Result summary object specifying how the `address` field matched. */
	export interface KYCCheckAddressSummary {

		/**
		 * Field describing whether the associated address is a post office box. Will be `yes` when a P.O. box is detected, `no` when Plaid confirmed the address is not a P.O. box, and `no_data` when Plaid was not able to determine if the address is a P.O. box.
		 * Required
		 */
		po_box: KYCCheckAddressSummaryPo_box;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: EntityScreeningHitAnalysisDocuments;

		/**
		 * Field describing whether the associated address is being used for commercial or residential purposes.
		 * Note: This value will be `no_data` when Plaid does not have sufficient data to determine the address's use.
		 * Required
		 */
		type: AddressPurposeLabel;
	}

	/** Result summary object specifying how the `address` field matched. */
	export interface KYCCheckAddressSummaryFormProperties {

		/**
		 * Field describing whether the associated address is a post office box. Will be `yes` when a P.O. box is detected, `no` when Plaid confirmed the address is not a P.O. box, and `no_data` when Plaid was not able to determine if the address is a P.O. box.
		 * Required
		 */
		po_box: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * Field describing whether the associated address is being used for commercial or residential purposes.
		 * Note: This value will be `no_data` when Plaid does not have sufficient data to determine the address's use.
		 * Required
		 */
		type: FormControl<AddressPurposeLabel | null | undefined>,
	}
	export function CreateKYCCheckAddressSummaryFormGroup() {
		return new FormGroup<KYCCheckAddressSummaryFormProperties>({
			po_box: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
			summary: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<AddressPurposeLabel | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum KYCCheckAddressSummaryPo_box { yes = 'yes', no = 'no', no_data = 'no_data' }


	/** Result summary object specifying how the `date_of_birth` field matched. */
	export interface KYCCheckDateOfBirthSummary {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: EntityScreeningHitAnalysisDocuments;
	}

	/** Result summary object specifying how the `date_of_birth` field matched. */
	export interface KYCCheckDateOfBirthSummaryFormProperties {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,
	}
	export function CreateKYCCheckDateOfBirthSummaryFormGroup() {
		return new FormGroup<KYCCheckDateOfBirthSummaryFormProperties>({
			summary: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Result summary object specifying how the `id_number` field matched. */
	export interface KYCCheckIDNumberSummary {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: EntityScreeningHitAnalysisDocuments;
	}

	/** Result summary object specifying how the `id_number` field matched. */
	export interface KYCCheckIDNumberSummaryFormProperties {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,
	}
	export function CreateKYCCheckIDNumberSummaryFormGroup() {
		return new FormGroup<KYCCheckIDNumberSummaryFormProperties>({
			summary: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Result summary object specifying how the `name` field matched. */
	export interface KYCCheckNameSummary {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: EntityScreeningHitAnalysisDocuments;
	}

	/** Result summary object specifying how the `name` field matched. */
	export interface KYCCheckNameSummaryFormProperties {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,
	}
	export function CreateKYCCheckNameSummaryFormGroup() {
		return new FormGroup<KYCCheckNameSummaryFormProperties>({
			summary: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Result summary object specifying how the `phone` field matched. */
	export interface KYCCheckPhoneSummary {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: EntityScreeningHitAnalysisDocuments;
	}

	/** Result summary object specifying how the `phone` field matched. */
	export interface KYCCheckPhoneSummaryFormProperties {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 * Required
		 */
		summary: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,
	}
	export function CreateKYCCheckPhoneSummaryFormGroup() {
		return new FormGroup<KYCCheckPhoneSummaryFormProperties>({
			summary: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Additional information for the `risk_check` step. */
	export interface RiskCheckDetails {

		/**
		 * Result summary object specifying values for `behavior` attributes of risk check, when available.
		 * Required
		 */
		behavior: RiskCheckBehavior;

		/**
		 * Array of result summary objects specifying values for `device` attributes of risk check.
		 * Required
		 */
		devices: Array<RiskCheckDevice>;

		/**
		 * Result summary object specifying values for `email` attributes of risk check.
		 * Required
		 */
		email: RiskCheckEmail;

		/**
		 * Result summary object specifying values for `phone` attributes of risk check.
		 * Required
		 */
		phone: RiskCheckPhone;

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		status: RiskCheckDetailsStatus;
	}

	/** Additional information for the `risk_check` step. */
	export interface RiskCheckDetailsFormProperties {

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		status: FormControl<RiskCheckDetailsStatus | null | undefined>,
	}
	export function CreateRiskCheckDetailsFormGroup() {
		return new FormGroup<RiskCheckDetailsFormProperties>({
			status: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Result summary object specifying values for `behavior` attributes of risk check, when available. */
	export interface RiskCheckBehavior {

		/**
		 * Field describing the outcome of a bot detection behavior risk check.
		 * `yes` indicates that automated activity was detected.
		 * `no` indicates that automated activity was not detected.
		 * `no_data` indicates there was not enough information available to give an accurate signal.
		 * Required
		 */
		bot_detected: KYCCheckAddressSummaryPo_box;

		/**
		 * Field describing the outcome of a fraud ring behavior risk check.
		 * `yes` indicates that fraud ring activity was detected.
		 * `no` indicates that fraud ring activity was not detected.
		 * `no_data` indicates there was not enough information available to give an accurate signal.
		 * Required
		 */
		fraud_ring_detected: KYCCheckAddressSummaryPo_box;

		/**
		 * Field describing the overall user interaction signals of a behavior risk check. This value represents how familiar the user is with the personal data they provide, based on a number of signals that are collected during their session.
		 * `genuine` indicates the user has high familiarity with the data they are providing, and that fraud is unlikely.
		 * `neutral` indicates some signals are present in between `risky` and `genuine`, but there are not enough clear signals to determine an outcome.
		 * `risky` indicates the user has low familiarity with the data they are providing, and that fraud is likely.
		 * `no_data` indicates there is not sufficient information to give an accurate signal.
		 * Required
		 */
		user_interactions: RiskCheckBehaviorUser_interactions;
	}

	/** Result summary object specifying values for `behavior` attributes of risk check, when available. */
	export interface RiskCheckBehaviorFormProperties {

		/**
		 * Field describing the outcome of a bot detection behavior risk check.
		 * `yes` indicates that automated activity was detected.
		 * `no` indicates that automated activity was not detected.
		 * `no_data` indicates there was not enough information available to give an accurate signal.
		 * Required
		 */
		bot_detected: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,

		/**
		 * Field describing the outcome of a fraud ring behavior risk check.
		 * `yes` indicates that fraud ring activity was detected.
		 * `no` indicates that fraud ring activity was not detected.
		 * `no_data` indicates there was not enough information available to give an accurate signal.
		 * Required
		 */
		fraud_ring_detected: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,

		/**
		 * Field describing the overall user interaction signals of a behavior risk check. This value represents how familiar the user is with the personal data they provide, based on a number of signals that are collected during their session.
		 * `genuine` indicates the user has high familiarity with the data they are providing, and that fraud is unlikely.
		 * `neutral` indicates some signals are present in between `risky` and `genuine`, but there are not enough clear signals to determine an outcome.
		 * `risky` indicates the user has low familiarity with the data they are providing, and that fraud is likely.
		 * `no_data` indicates there is not sufficient information to give an accurate signal.
		 * Required
		 */
		user_interactions: FormControl<RiskCheckBehaviorUser_interactions | null | undefined>,
	}
	export function CreateRiskCheckBehaviorFormGroup() {
		return new FormGroup<RiskCheckBehaviorFormProperties>({
			bot_detected: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
			fraud_ring_detected: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
			user_interactions: new FormControl<RiskCheckBehaviorUser_interactions | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RiskCheckBehaviorUser_interactions { genuine = 'genuine', neutral = 'neutral', risky = 'risky', no_data = 'no_data' }


	/** Result summary object specifying values for `device` attributes of risk check. */
	export interface RiskCheckDevice {

		/**
		 * An enum indicating whether a network proxy is present and if so what type it is.
		 * `none_detected` indicates the user is not on a detectable proxy network.
		 * `tor` indicates the user was using a Tor browser, which sends encrypted traffic on a decentralized network and is somewhat similar to a VPN (Virtual Private Network).
		 * `vpn` indicates the user is on a VPN (Virtual Private Network)
		 * `web_proxy` indicates the user is on a web proxy server, which may allow them to conceal information such as their IP address or other identifying information.
		 * `public_proxy` indicates the user is on a public web proxy server, which is similar to a web proxy but can be shared by multiple users. This may allow multiple users to appear as if they have the same IP address for instance.
		 * Required
		 */
		ip_proxy_type: RiskCheckDeviceIp_proxy_type;

		/**
		 * Count of spam lists the IP address is associated with if known.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ip_spam_list_count: number;

		/**
		 * UTC offset of the timezone associated with the IP address.
		 * Required
		 */
		ip_timezone_offset: string;
	}

	/** Result summary object specifying values for `device` attributes of risk check. */
	export interface RiskCheckDeviceFormProperties {

		/**
		 * An enum indicating whether a network proxy is present and if so what type it is.
		 * `none_detected` indicates the user is not on a detectable proxy network.
		 * `tor` indicates the user was using a Tor browser, which sends encrypted traffic on a decentralized network and is somewhat similar to a VPN (Virtual Private Network).
		 * `vpn` indicates the user is on a VPN (Virtual Private Network)
		 * `web_proxy` indicates the user is on a web proxy server, which may allow them to conceal information such as their IP address or other identifying information.
		 * `public_proxy` indicates the user is on a public web proxy server, which is similar to a web proxy but can be shared by multiple users. This may allow multiple users to appear as if they have the same IP address for instance.
		 * Required
		 */
		ip_proxy_type: FormControl<RiskCheckDeviceIp_proxy_type | null | undefined>,

		/**
		 * Count of spam lists the IP address is associated with if known.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		ip_spam_list_count: FormControl<number | null | undefined>,

		/**
		 * UTC offset of the timezone associated with the IP address.
		 * Required
		 */
		ip_timezone_offset: FormControl<string | null | undefined>,
	}
	export function CreateRiskCheckDeviceFormGroup() {
		return new FormGroup<RiskCheckDeviceFormProperties>({
			ip_proxy_type: new FormControl<RiskCheckDeviceIp_proxy_type | null | undefined>(undefined, [Validators.required]),
			ip_spam_list_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ip_timezone_offset: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RiskCheckDeviceIp_proxy_type { none_detected = 'none_detected', tor = 'tor', vpn = 'vpn', web_proxy = 'web_proxy', public_proxy = 'public_proxy' }


	/** Result summary object specifying values for `email` attributes of risk check. */
	export interface RiskCheckEmail {

		/**
		 * Count of all known breaches of this email address if known.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		breach_count: number;

		/**
		 * Indicates whether the email address domain is custom if known, i.e. a company domain and not free or disposable.
		 * Required
		 */
		domain_is_custom: KYCCheckAddressSummaryPo_box;

		/**
		 * Indicates whether the email domain is listed as disposable if known. Disposable domains are often used to create email addresses that are part of a fake set of user details.
		 * Required
		 */
		domain_is_disposable: KYCCheckAddressSummaryPo_box;

		/**
		 * Indicates whether the email address domain is a free provider such as Gmail or Hotmail if known.
		 * Required
		 */
		domain_is_free_provider: KYCCheckAddressSummaryPo_box;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		domain_registered_at: Date;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		first_breached_at: Date;

		/**
		 * SMTP-MX check to confirm the email address exists if known.
		 * Required
		 */
		is_deliverable: KYCCheckAddressSummaryPo_box;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		last_breached_at: Date;

		/** Required */
		linked_services: Array<RiskCheckLinkedService>;

		/**
		 * Indicates whether the email address top level domain, which is the last part of the domain, is fraudulent or risky if known. In most cases, a suspicious top level domain is also associated with a disposable or high-risk domain.
		 * Required
		 */
		top_level_domain_is_suspicious: KYCCheckAddressSummaryPo_box;
	}

	/** Result summary object specifying values for `email` attributes of risk check. */
	export interface RiskCheckEmailFormProperties {

		/**
		 * Count of all known breaches of this email address if known.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		breach_count: FormControl<number | null | undefined>,

		/**
		 * Indicates whether the email address domain is custom if known, i.e. a company domain and not free or disposable.
		 * Required
		 */
		domain_is_custom: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,

		/**
		 * Indicates whether the email domain is listed as disposable if known. Disposable domains are often used to create email addresses that are part of a fake set of user details.
		 * Required
		 */
		domain_is_disposable: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,

		/**
		 * Indicates whether the email address domain is a free provider such as Gmail or Hotmail if known.
		 * Required
		 */
		domain_is_free_provider: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		domain_registered_at: FormControl<Date | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		first_breached_at: FormControl<Date | null | undefined>,

		/**
		 * SMTP-MX check to confirm the email address exists if known.
		 * Required
		 */
		is_deliverable: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		last_breached_at: FormControl<Date | null | undefined>,

		/**
		 * Indicates whether the email address top level domain, which is the last part of the domain, is fraudulent or risky if known. In most cases, a suspicious top level domain is also associated with a disposable or high-risk domain.
		 * Required
		 */
		top_level_domain_is_suspicious: FormControl<KYCCheckAddressSummaryPo_box | null | undefined>,
	}
	export function CreateRiskCheckEmailFormGroup() {
		return new FormGroup<RiskCheckEmailFormProperties>({
			breach_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			domain_is_custom: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
			domain_is_disposable: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
			domain_is_free_provider: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
			domain_registered_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			first_breached_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			is_deliverable: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
			last_breached_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			top_level_domain_is_suspicious: new FormControl<KYCCheckAddressSummaryPo_box | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An enum indicating the type of a linked service. */
	export enum RiskCheckLinkedService { apple = 'apple', ebay = 'ebay', facebook = 'facebook', flickr = 'flickr', foursquare = 'foursquare', github = 'github', google = 'google', gravatar = 'gravatar', instagram = 'instagram', lastfm = 'lastfm', linkedin = 'linkedin', microsoft = 'microsoft', myspace = 'myspace', pinterest = 'pinterest', skype = 'skype', spotify = 'spotify', telegram = 'telegram', tumblr = 'tumblr', twitter = 'twitter', viber = 'viber', vimeo = 'vimeo', weibo = 'weibo', whatsapp = 'whatsapp', yahoo = 'yahoo', airbnb = 'airbnb', amazon = 'amazon', booking = 'booking', discord = 'discord', kakao = 'kakao', ok = 'ok', qzone = 'qzone', line = 'line', snapchat = 'snapchat', zalo = 'zalo' }


	/** Result summary object specifying values for `phone` attributes of risk check. */
	export interface RiskCheckPhone {

		/** Required */
		linked_services: Array<RiskCheckLinkedService>;
	}

	/** Result summary object specifying values for `phone` attributes of risk check. */
	export interface RiskCheckPhoneFormProperties {
	}
	export function CreateRiskCheckPhoneFormGroup() {
		return new FormGroup<RiskCheckPhoneFormProperties>({
		});

	}

	export enum RiskCheckDetailsStatus { success = 'success', active = 'active', failed = 'failed', waiting_for_prerequisite = 'waiting_for_prerequisite', not_applicable = 'not_applicable', skipped = 'skipped', expired = 'expired', canceled = 'canceled', pending_review = 'pending_review', manually_approved = 'manually_approved', manually_rejected = 'manually_rejected' }

	export enum IdentityVerificationStatus { active = 'active', success = 'success', failed = 'failed', expired = 'expired', canceled = 'canceled', pending_review = 'pending_review' }


	/**
	 * Each step will be one of the following values:
	 * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
	 * `success` - The Identity Verification attempt has completed this step.
	 * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
	 * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
	 * `not_applicable` - This step will not be run for this session.
	 * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
	 * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
	 * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
	 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
	 * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
	 * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
	 */
	export interface IdentityVerificationStepSummary {

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		accept_tos: RiskCheckDetailsStatus;

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		documentary_verification: RiskCheckDetailsStatus;

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		kyc_check: RiskCheckDetailsStatus;

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		risk_check: RiskCheckDetailsStatus;

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		selfie_check: RiskCheckDetailsStatus;

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		verify_sms: RiskCheckDetailsStatus;

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		watchlist_screening: RiskCheckDetailsStatus;
	}

	/**
	 * Each step will be one of the following values:
	 * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
	 * `success` - The Identity Verification attempt has completed this step.
	 * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
	 * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
	 * `not_applicable` - This step will not be run for this session.
	 * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
	 * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
	 * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
	 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
	 * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
	 * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
	 */
	export interface IdentityVerificationStepSummaryFormProperties {

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		accept_tos: FormControl<RiskCheckDetailsStatus | null | undefined>,

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		documentary_verification: FormControl<RiskCheckDetailsStatus | null | undefined>,

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		kyc_check: FormControl<RiskCheckDetailsStatus | null | undefined>,

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		risk_check: FormControl<RiskCheckDetailsStatus | null | undefined>,

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		selfie_check: FormControl<RiskCheckDetailsStatus | null | undefined>,

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		verify_sms: FormControl<RiskCheckDetailsStatus | null | undefined>,

		/**
		 * The status of a step in the identity verification process.
		 * Required
		 */
		watchlist_screening: FormControl<RiskCheckDetailsStatus | null | undefined>,
	}
	export function CreateIdentityVerificationStepSummaryFormGroup() {
		return new FormGroup<IdentityVerificationStepSummaryFormProperties>({
			accept_tos: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
			documentary_verification: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
			kyc_check: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
			risk_check: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
			selfie_check: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
			verify_sms: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
			watchlist_screening: new FormControl<RiskCheckDetailsStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The resource ID and version number of the template configuring the behavior of a given identity verification. */
	export interface IdentityVerificationTemplateReference {

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		id: string;

		/**
		 * Version of the associated Identity Verification template.
		 * Required
		 * Type: double
		 */
		version: number;
	}

	/** The resource ID and version number of the template configuring the behavior of a given identity verification. */
	export interface IdentityVerificationTemplateReferenceFormProperties {

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Version of the associated Identity Verification template.
		 * Required
		 * Type: double
		 */
		version: FormControl<number | null | undefined>,
	}
	export function CreateIdentityVerificationTemplateReferenceFormGroup() {
		return new FormGroup<IdentityVerificationTemplateReferenceFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The identity data that was either collected from the user or provided via API in order to perform an identity verification. */
	export interface IdentityVerificationUserData {

		/**
		 * Even if an address has been collected, some fields may be null depending on the region's addressing system. For example:
		 * Addresses from the United Kingdom will not include a region
		 * Addresses from Hong Kong will not include postal code
		 * Required
		 */
		address: IdentityVerificationUserAddress;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		date_of_birth: Date;

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: string;

		/**
		 * ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled.
		 * Required
		 */
		id_number: UserIDNumber;

		/**
		 * An IPv4 or IPV6 address.
		 * Required
		 */
		ip_address: string;

		/**
		 * The full name provided by the user. If the user has not submitted their name, this field will be null. Otherwise, both fields are guaranteed to be filled.
		 * Required
		 */
		name: IdentityVerificationResponseUserName;

		/** A phone number in E.164 format. */
		phone_number?: string | null;
	}

	/** The identity data that was either collected from the user or provided via API in order to perform an identity verification. */
	export interface IdentityVerificationUserDataFormProperties {

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * A valid email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/**
		 * An IPv4 or IPV6 address.
		 * Required
		 */
		ip_address: FormControl<string | null | undefined>,

		/** A phone number in E.164 format. */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationUserDataFormGroup() {
		return new FormGroup<IdentityVerificationUserDataFormProperties>({
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ip_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * Even if an address has been collected, some fields may be null depending on the region's addressing system. For example:
	 * Addresses from the United Kingdom will not include a region
	 * Addresses from Hong Kong will not include postal code
	 */
	export interface IdentityVerificationUserAddress {

		/**
		 * City from the end user's address
		 * Required
		 */
		city: string;

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: string;

		/**
		 * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
		 * Required
		 */
		postal_code: string;

		/**
		 * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
		 * Required
		 */
		region: string;

		/**
		 * The primary street portion of an address. If the user has submitted their address, this field will always be filled.
		 * Required
		 */
		street: string;

		/**
		 * Extra street information, like an apartment or suite number.
		 * Required
		 */
		street2: string;
	}

	/**
	 * Even if an address has been collected, some fields may be null depending on the region's addressing system. For example:
	 * Addresses from the United Kingdom will not include a region
	 * Addresses from Hong Kong will not include postal code
	 */
	export interface IdentityVerificationUserAddressFormProperties {

		/**
		 * City from the end user's address
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The primary street portion of an address. If the user has submitted their address, this field will always be filled.
		 * Required
		 */
		street: FormControl<string | null | undefined>,

		/**
		 * Extra street information, like an apartment or suite number.
		 * Required
		 */
		street2: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationUserAddressFormGroup() {
		return new FormGroup<IdentityVerificationUserAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled. */
	export interface UserIDNumber {

		/**
		 * A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://plaid.com/docs/identity-verification/hybrid-input-validation).
		 * Required
		 */
		type: IDNumberType;

		/**
		 * Value of identity document value typed in by user. Alpha-numeric, with all formatting characters stripped.
		 * Required
		 */
		value: string;
	}

	/** ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled. */
	export interface UserIDNumberFormProperties {

		/**
		 * A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://plaid.com/docs/identity-verification/hybrid-input-validation).
		 * Required
		 */
		type: FormControl<IDNumberType | null | undefined>,

		/**
		 * Value of identity document value typed in by user. Alpha-numeric, with all formatting characters stripped.
		 * Required
		 */
		value: FormControl<string | null | undefined>,
	}
	export function CreateUserIDNumberFormGroup() {
		return new FormGroup<UserIDNumberFormProperties>({
			type: new FormControl<IDNumberType | null | undefined>(undefined, [Validators.required]),
			value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The full name provided by the user. If the user has not submitted their name, this field will be null. Otherwise, both fields are guaranteed to be filled. */
	export interface IdentityVerificationResponseUserName {

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		family_name: string;

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		given_name: string;
	}

	/** The full name provided by the user. If the user has not submitted their name, this field will be null. Otherwise, both fields are guaranteed to be filled. */
	export interface IdentityVerificationResponseUserNameFormProperties {

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		family_name: FormControl<string | null | undefined>,

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		given_name: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationResponseUserNameFormGroup() {
		return new FormGroup<IdentityVerificationResponseUserNameFormProperties>({
			family_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			given_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request schema for '/identity_verification/create' */
	export interface IdentityVerificationCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.
		 * If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
		 * Required
		 */
		gave_consent: boolean;

		/**
		 * An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`.
		 * If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
		 */
		is_idempotent?: boolean | null;

		/**
		 * A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
		 * Required
		 */
		is_shareable: boolean;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: string;

		/**
		 * User information collected outside of Link, most likely via your own onboarding process.
		 * Each of the following identity fields are optional:
		 * `email_address`
		 * `phone_number`
		 * `date_of_birth`
		 * `name`
		 * `address`
		 * `id_number`
		 * Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value.
		 * Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
		 * Required
		 */
		user: IdentityVerificationRequestUser;
	}

	/** Request schema for '/identity_verification/create' */
	export interface IdentityVerificationCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.
		 * If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
		 * Required
		 */
		gave_consent: FormControl<boolean | null | undefined>,

		/**
		 * An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`.
		 * If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
		 */
		is_idempotent: FormControl<boolean | null | undefined>,

		/**
		 * A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
		 * Required
		 */
		is_shareable: FormControl<boolean | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationCreateRequestFormGroup() {
		return new FormGroup<IdentityVerificationCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			gave_consent: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			is_idempotent: new FormControl<boolean | null | undefined>(undefined),
			is_shareable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * User information collected outside of Link, most likely via your own onboarding process.
	 * Each of the following identity fields are optional:
	 * `email_address`
	 * `phone_number`
	 * `date_of_birth`
	 * `name`
	 * `address`
	 * `id_number`
	 * Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value.
	 * Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
	 */
	export interface IdentityVerificationRequestUser {

		/** Home address for the user. */
		address?: UserAddress;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Type: DateOnly
		 */
		date_of_birth?: Date | null;

		/** A valid email address. */
		email_address?: string | null;

		/** ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled. */
		id_number?: UserIDNumber;

		/** You can use this field to pre-populate the user's legal name; if it is provided here, they will not be prompted to enter their name in the identity verification attempt. */
		name?: IdentityVerificationRequestUserName;

		/** A phone number in E.164 format. */
		phone_number?: string | null;
	}

	/**
	 * User information collected outside of Link, most likely via your own onboarding process.
	 * Each of the following identity fields are optional:
	 * `email_address`
	 * `phone_number`
	 * `date_of_birth`
	 * `name`
	 * `address`
	 * `id_number`
	 * Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value.
	 * Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
	 */
	export interface IdentityVerificationRequestUserFormProperties {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Type: DateOnly
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/** A valid email address. */
		email_address: FormControl<string | null | undefined>,

		/** A phone number in E.164 format. */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationRequestUserFormGroup() {
		return new FormGroup<IdentityVerificationRequestUserFormProperties>({
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			date_of_birth: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Home address for the user. */
	export interface UserAddress {

		/**
		 * City from the end user's address
		 * Required
		 */
		city: string;

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: string;

		/**
		 * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
		 * Required
		 */
		postal_code: string;

		/**
		 * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
		 * Required
		 */
		region: string;

		/**
		 * The primary street portion of an address. If the user has submitted their address, this field will always be filled.
		 * Required
		 */
		street: string;

		/** Extra street information, like an apartment or suite number. */
		street2?: string | null;
	}

	/** Home address for the user. */
	export interface UserAddressFormProperties {

		/**
		 * City from the end user's address
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The primary street portion of an address. If the user has submitted their address, this field will always be filled.
		 * Required
		 */
		street: FormControl<string | null | undefined>,

		/** Extra street information, like an apartment or suite number. */
		street2: FormControl<string | null | undefined>,
	}
	export function CreateUserAddressFormGroup() {
		return new FormGroup<UserAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street2: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** You can use this field to pre-populate the user's legal name; if it is provided here, they will not be prompted to enter their name in the identity verification attempt. */
	export interface IdentityVerificationRequestUserName {

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		family_name: string;

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		given_name: string;
	}

	/** You can use this field to pre-populate the user's legal name; if it is provided here, they will not be prompted to enter their name in the identity verification attempt. */
	export interface IdentityVerificationRequestUserNameFormProperties {

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		family_name: FormControl<string | null | undefined>,

		/**
		 * A string with at least one non-whitespace character, with a max length of 100 characters.
		 * Required
		 */
		given_name: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationRequestUserNameFormGroup() {
		return new FormGroup<IdentityVerificationRequestUserNameFormProperties>({
			family_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			given_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerificationCreateResponse {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: Date;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		documentary_verification: DocumentaryVerification;

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: string;

		/**
		 * Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		kyc_check: KYCCheckDetails;

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: Date;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Additional information for the `risk_check` step.
		 * Required
		 */
		risk_check: RiskCheckDetails;

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: string;

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: IdentityVerificationStatus;

		/**
		 * Each step will be one of the following values:
		 * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
		 * `success` - The Identity Verification attempt has completed this step.
		 * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
		 * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
		 * `not_applicable` - This step will not be run for this session.
		 * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
		 * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
		 * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
		 * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
		 * Required
		 */
		steps: IdentityVerificationStepSummary;

		/**
		 * The resource ID and version number of the template configuring the behavior of a given identity verification.
		 * Required
		 */
		template: IdentityVerificationTemplateReference;

		/**
		 * The identity data that was either collected from the user or provided via API in order to perform an identity verification.
		 * Required
		 */
		user: IdentityVerificationUserData;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerificationCreateResponseFormProperties {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: FormControl<string | null | undefined>,

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: FormControl<IdentityVerificationStatus | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationCreateResponseFormGroup() {
		return new FormGroup<IdentityVerificationCreateResponseFormProperties>({
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_attempt_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			redacted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			shareable_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<IdentityVerificationStatus | null | undefined>(undefined, [Validators.required]),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for fetching an identity verification */
	export interface IdentityVerificationGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for fetching an identity verification */
	export interface IdentityVerificationGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationGetRequestFormGroup() {
		return new FormGroup<IdentityVerificationGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			identity_verification_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerificationGetResponse {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: Date;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		documentary_verification: DocumentaryVerification;

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: string;

		/**
		 * Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		kyc_check: KYCCheckDetails;

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: Date;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Additional information for the `risk_check` step.
		 * Required
		 */
		risk_check: RiskCheckDetails;

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: string;

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: IdentityVerificationStatus;

		/**
		 * Each step will be one of the following values:
		 * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
		 * `success` - The Identity Verification attempt has completed this step.
		 * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
		 * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
		 * `not_applicable` - This step will not be run for this session.
		 * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
		 * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
		 * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
		 * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
		 * Required
		 */
		steps: IdentityVerificationStepSummary;

		/**
		 * The resource ID and version number of the template configuring the behavior of a given identity verification.
		 * Required
		 */
		template: IdentityVerificationTemplateReference;

		/**
		 * The identity data that was either collected from the user or provided via API in order to perform an identity verification.
		 * Required
		 */
		user: IdentityVerificationUserData;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerificationGetResponseFormProperties {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: FormControl<string | null | undefined>,

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: FormControl<IdentityVerificationStatus | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationGetResponseFormGroup() {
		return new FormGroup<IdentityVerificationGetResponseFormProperties>({
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_attempt_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			redacted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			shareable_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<IdentityVerificationStatus | null | undefined>(undefined, [Validators.required]),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing identity verifications */
	export interface IdentityVerificationListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: string;
	}

	/** Request input for listing identity verifications */
	export interface IdentityVerificationListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationListRequestFormGroup() {
		return new FormGroup<IdentityVerificationListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			template_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Paginated list of Plaid sessions. */
	export interface IdentityVerificationListResponse {

		/**
		 * List of Plaid sessions
		 * Required
		 */
		identity_verifications: Array<IdentityVerification>;

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Paginated list of Plaid sessions. */
	export interface IdentityVerificationListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationListResponseFormGroup() {
		return new FormGroup<IdentityVerificationListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when identity verification has been retried, which can be triggered via the dashboard or the API. */
	export interface IdentityVerificationRetriedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: string;

		/**
		 * `RETRIED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `IDENTITY_VERIFICATION`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when identity verification has been retried, which can be triggered via the dashboard or the API. */
	export interface IdentityVerificationRetriedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: FormControl<string | null | undefined>,

		/**
		 * `RETRIED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `IDENTITY_VERIFICATION`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationRetriedWebhookFormGroup() {
		return new FormGroup<IdentityVerificationRetriedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			identity_verification_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for retrying an identity verification attempt */
	export interface IdentityVerificationRetryRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Instructions for the `custom` retry strategy specifying which steps should be required or skipped.
		 * Note:
		 * This field must be provided when the retry strategy is `custom` and must be omitted otherwise.
		 * Custom retries override settings in your Plaid Template. For example, if your Plaid Template has `verify_sms` disabled, a custom retry with `verify_sms` enabled will still require the step.
		 * The `selfie_check` step is currently not supported on the sandbox server. Sandbox requests will silently disable the `selfie_check` step when provided.
		 */
		steps?: IdentityVerificationRetryRequestStepsObject;

		/**
		 * An instruction specifying what steps the new Identity Verification attempt should require the user to complete:
		 * `reset` - Restart the user at the beginning of the session, regardless of whether they successfully completed part of their previous session.
		 * `incomplete` - Start the new session at the step that the user failed in the previous session, skipping steps that have already been successfully completed.
		 * `infer` - If the most recent Identity Verification attempt associated with the given `client_user_id` has a status of `failed` or `expired`, retry using the `incomplete` strategy. Otherwise, use the `reset` strategy.
		 * `custom` - Start the new session with a custom configuration, specified by the value of the `steps` field
		 * Note:
		 * The `incomplete` strategy cannot be applied if the session's failing step is `screening` or `risk_check`.
		 * The `infer` strategy cannot be applied if the session's status is still `active`
		 * Required
		 */
		strategy: IdentityVerificationRetryRequestStrategy;

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: string;
	}

	/** Request input for retrying an identity verification attempt */
	export interface IdentityVerificationRetryRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * An instruction specifying what steps the new Identity Verification attempt should require the user to complete:
		 * `reset` - Restart the user at the beginning of the session, regardless of whether they successfully completed part of their previous session.
		 * `incomplete` - Start the new session at the step that the user failed in the previous session, skipping steps that have already been successfully completed.
		 * `infer` - If the most recent Identity Verification attempt associated with the given `client_user_id` has a status of `failed` or `expired`, retry using the `incomplete` strategy. Otherwise, use the `reset` strategy.
		 * `custom` - Start the new session with a custom configuration, specified by the value of the `steps` field
		 * Note:
		 * The `incomplete` strategy cannot be applied if the session's failing step is `screening` or `risk_check`.
		 * The `infer` strategy cannot be applied if the session's status is still `active`
		 * Required
		 */
		strategy: FormControl<IdentityVerificationRetryRequestStrategy | null | undefined>,

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationRetryRequestFormGroup() {
		return new FormGroup<IdentityVerificationRetryRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
			strategy: new FormControl<IdentityVerificationRetryRequestStrategy | null | undefined>(undefined, [Validators.required]),
			template_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Instructions for the `custom` retry strategy specifying which steps should be required or skipped.
	 * Note:
	 * This field must be provided when the retry strategy is `custom` and must be omitted otherwise.
	 * Custom retries override settings in your Plaid Template. For example, if your Plaid Template has `verify_sms` disabled, a custom retry with `verify_sms` enabled will still require the step.
	 * The `selfie_check` step is currently not supported on the sandbox server. Sandbox requests will silently disable the `selfie_check` step when provided.
	 */
	export interface IdentityVerificationRetryRequestStepsObject {

		/**
		 * A boolean field specifying whether the new session should require or skip the `documentary_verification` step.
		 * Required
		 */
		documentary_verification: boolean;

		/**
		 * A boolean field specifying whether the new session should require or skip the `kyc_check` step.
		 * Required
		 */
		kyc_check: boolean;

		/**
		 * A boolean field specifying whether the new session should require or skip the `selfie_check` step.
		 * Required
		 */
		selfie_check: boolean;

		/**
		 * A boolean field specifying whether the new session should require or skip the `verify_sms` step.
		 * Required
		 */
		verify_sms: boolean;
	}

	/**
	 * Instructions for the `custom` retry strategy specifying which steps should be required or skipped.
	 * Note:
	 * This field must be provided when the retry strategy is `custom` and must be omitted otherwise.
	 * Custom retries override settings in your Plaid Template. For example, if your Plaid Template has `verify_sms` disabled, a custom retry with `verify_sms` enabled will still require the step.
	 * The `selfie_check` step is currently not supported on the sandbox server. Sandbox requests will silently disable the `selfie_check` step when provided.
	 */
	export interface IdentityVerificationRetryRequestStepsObjectFormProperties {

		/**
		 * A boolean field specifying whether the new session should require or skip the `documentary_verification` step.
		 * Required
		 */
		documentary_verification: FormControl<boolean | null | undefined>,

		/**
		 * A boolean field specifying whether the new session should require or skip the `kyc_check` step.
		 * Required
		 */
		kyc_check: FormControl<boolean | null | undefined>,

		/**
		 * A boolean field specifying whether the new session should require or skip the `selfie_check` step.
		 * Required
		 */
		selfie_check: FormControl<boolean | null | undefined>,

		/**
		 * A boolean field specifying whether the new session should require or skip the `verify_sms` step.
		 * Required
		 */
		verify_sms: FormControl<boolean | null | undefined>,
	}
	export function CreateIdentityVerificationRetryRequestStepsObjectFormGroup() {
		return new FormGroup<IdentityVerificationRetryRequestStepsObjectFormProperties>({
			documentary_verification: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			kyc_check: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			selfie_check: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			verify_sms: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum IdentityVerificationRetryRequestStrategy { reset = 'reset', incomplete = 'incomplete', infer = 'infer', custom = 'custom' }


	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerificationRetryResponse {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: Date;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		documentary_verification: DocumentaryVerification;

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: string;

		/**
		 * Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`.
		 * Required
		 */
		kyc_check: KYCCheckDetails;

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: Date;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Additional information for the `risk_check` step.
		 * Required
		 */
		risk_check: RiskCheckDetails;

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: string;

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: IdentityVerificationStatus;

		/**
		 * Each step will be one of the following values:
		 * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
		 * `success` - The Identity Verification attempt has completed this step.
		 * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
		 * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
		 * `not_applicable` - This step will not be run for this session.
		 * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
		 * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
		 * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
		 * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
		 * Required
		 */
		steps: IdentityVerificationStepSummary;

		/**
		 * The resource ID and version number of the template configuring the behavior of a given identity verification.
		 * Required
		 */
		template: IdentityVerificationTemplateReference;

		/**
		 * The identity data that was either collected from the user or provided via API in order to perform an identity verification.
		 * Required
		 */
		user: IdentityVerificationUserData;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
	export interface IdentityVerificationRetryResponseFormProperties {

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated Identity Verification attempt.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
		 * Required
		 */
		previous_attempt_id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		redacted_at: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A shareable URL that can be sent directly to the user to complete verification
		 * Required
		 */
		shareable_url: FormControl<string | null | undefined>,

		/**
		 * The status of this Identity Verification attempt.
		 * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
		 * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
		 * `failed` - The user failed one or more steps in the session and was told to contact support.
		 * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
		 * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
		 * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
		 * Required
		 */
		status: FormControl<IdentityVerificationStatus | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationRetryResponseFormGroup() {
		return new FormGroup<IdentityVerificationRetryResponseFormProperties>({
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_attempt_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			redacted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			shareable_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<IdentityVerificationStatus | null | undefined>(undefined, [Validators.required]),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when the status of an identity verification has been updated, which can be triggered via the dashboard or the API. */
	export interface IdentityVerificationStatusUpdatedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: string;

		/**
		 * `STATUS_UPDATED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `IDENTITY_VERIFICATION`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when the status of an identity verification has been updated, which can be triggered via the dashboard or the API. */
	export interface IdentityVerificationStatusUpdatedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: FormControl<string | null | undefined>,

		/**
		 * `STATUS_UPDATED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `IDENTITY_VERIFICATION`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationStatusUpdatedWebhookFormGroup() {
		return new FormGroup<IdentityVerificationStatusUpdatedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			identity_verification_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The status of a step in the identity verification process. */
	export enum IdentityVerificationStepStatus { success = 'success', active = 'active', failed = 'failed', waiting_for_prerequisite = 'waiting_for_prerequisite', not_applicable = 'not_applicable', skipped = 'skipped', expired = 'expired', canceled = 'canceled', pending_review = 'pending_review', manually_approved = 'manually_approved', manually_rejected = 'manually_rejected' }


	/** Fired when an end user has completed a step of the Identity Verification process. */
	export interface IdentityVerificationStepUpdatedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: string;

		/**
		 * `STEP_UPDATED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `IDENTITY_VERIFICATION`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an end user has completed a step of the Identity Verification process. */
	export interface IdentityVerificationStepUpdatedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The ID of the associated Identity Verification attempt.
		 * Required
		 */
		identity_verification_id: FormControl<string | null | undefined>,

		/**
		 * `STEP_UPDATED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `IDENTITY_VERIFICATION`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateIdentityVerificationStepUpdatedWebhookFormGroup() {
		return new FormGroup<IdentityVerificationStepUpdatedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			identity_verification_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A high level description of the quality of the image the user submitted.
	 * For example, an image that is blurry, distorted by glare from a nearby light source, or improperly framed might be marked as low or medium quality. Poor quality images are more likely to fail OCR and/or template conformity checks.
	 * Note: By default, Plaid will let a user recapture document images twice before failing the entire session if we attribute the failure to low image quality.
	 */
	export enum ImageQuality { high = 'high', medium = 'medium', low = 'low' }


	/** An object representing a breakdown of the different income types on the paystub. */
	export interface IncomeBreakdown {

		/**
		 * The number of hours logged for this income for this pay period.
		 * Required
		 * Type: double
		 */
		hours: number;

		/**
		 * The hourly rate at which the income is paid.
		 * Required
		 * Type: double
		 */
		rate: number;

		/**
		 * The total pay for this pay period.
		 * Required
		 * Type: double
		 */
		total: number;

		/**
		 * The type of income. Possible values include:
		 * `"regular"`: regular income
		 * `"overtime"`: overtime income
		 * `"bonus"`: bonus income
		 * Required
		 */
		type: IncomeBreakdownType;
	}

	/** An object representing a breakdown of the different income types on the paystub. */
	export interface IncomeBreakdownFormProperties {

		/**
		 * The number of hours logged for this income for this pay period.
		 * Required
		 * Type: double
		 */
		hours: FormControl<number | null | undefined>,

		/**
		 * The hourly rate at which the income is paid.
		 * Required
		 * Type: double
		 */
		rate: FormControl<number | null | undefined>,

		/**
		 * The total pay for this pay period.
		 * Required
		 * Type: double
		 */
		total: FormControl<number | null | undefined>,

		/**
		 * The type of income. Possible values include:
		 * `"regular"`: regular income
		 * `"overtime"`: overtime income
		 * `"bonus"`: bonus income
		 * Required
		 */
		type: FormControl<IncomeBreakdownType | null | undefined>,
	}
	export function CreateIncomeBreakdownFormGroup() {
		return new FormGroup<IncomeBreakdownFormProperties>({
			hours: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			rate: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<IncomeBreakdownType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum IncomeBreakdownType { bonus = 'bonus', overtime = 'overtime', regular = 'regular', _null = 3 }


	/** Specify payroll data on the account. */
	export interface IncomeOverride {

		/** A list of paystubs associated with the account. */
		paystubs?: Array<PaystubOverride>;
	}

	/** Specify payroll data on the account. */
	export interface IncomeOverrideFormProperties {
	}
	export function CreateIncomeOverrideFormGroup() {
		return new FormGroup<IncomeOverrideFormProperties>({
		});

	}


	/** An object representing data from a paystub. */
	export interface PaystubOverride {

		/** The employee on the paystub. */
		employee?: PaystubOverrideEmployee;

		/** The employer on the paystub. */
		employer?: PaystubOverrideEmployer;
		income_breakdown?: Array<IncomeBreakdown>;

		/** Details about the pay period. */
		pay_period_details?: PayPeriodDetails;
	}

	/** An object representing data from a paystub. */
	export interface PaystubOverrideFormProperties {
	}
	export function CreatePaystubOverrideFormGroup() {
		return new FormGroup<PaystubOverrideFormProperties>({
		});

	}


	/** The employee on the paystub. */
	export interface PaystubOverrideEmployee {

		/** The address of the employee. */
		address?: PaystubOverrideEmployeeAddress;

		/** The name of the employee. */
		name?: string | null;
	}

	/** The employee on the paystub. */
	export interface PaystubOverrideEmployeeFormProperties {

		/** The name of the employee. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePaystubOverrideEmployeeFormGroup() {
		return new FormGroup<PaystubOverrideEmployeeFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The address of the employee. */
	export interface PaystubOverrideEmployeeAddress {

		/** The full city name. */
		city?: string | null;

		/** The country of the address. */
		country?: string | null;

		/** 5 digit postal code. */
		postal_code?: string | null;

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		region?: string | null;

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 */
		street?: string | null;
	}

	/** The address of the employee. */
	export interface PaystubOverrideEmployeeAddressFormProperties {

		/** The full city name. */
		city: FormControl<string | null | undefined>,

		/** The country of the address. */
		country: FormControl<string | null | undefined>,

		/** 5 digit postal code. */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreatePaystubOverrideEmployeeAddressFormGroup() {
		return new FormGroup<PaystubOverrideEmployeeAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			street: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The employer on the paystub. */
	export interface PaystubOverrideEmployer {

		/** The name of the employer. */
		name?: string | null;
	}

	/** The employer on the paystub. */
	export interface PaystubOverrideEmployerFormProperties {

		/** The name of the employer. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePaystubOverrideEmployerFormGroup() {
		return new FormGroup<PaystubOverrideEmployerFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details about the pay period. */
	export interface PayPeriodDetails {

		/**
		 * The amount of the paycheck.
		 * Type: double
		 */
		check_amount?: number | null;
		distribution_breakdown?: Array<DistributionBreakdown>;

		/**
		 * The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
		 * Type: DateOnly
		 */
		end_date?: Date | null;

		/**
		 * Total earnings before tax/deductions.
		 * Type: double
		 */
		gross_earnings?: number | null;

		/**
		 * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Type: DateOnly
		 */
		pay_date?: Date | null;

		/**
		 * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Type: DateOnly
		 */
		pay_day?: Date | null;

		/** The frequency at which an individual is paid. */
		pay_frequency?: PayPeriodDetailsPay_frequency | null;

		/**
		 * The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
		 * Type: DateOnly
		 */
		start_date?: Date | null;
	}

	/** Details about the pay period. */
	export interface PayPeriodDetailsFormProperties {

		/**
		 * The amount of the paycheck.
		 * Type: double
		 */
		check_amount: FormControl<number | null | undefined>,

		/**
		 * The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * Total earnings before tax/deductions.
		 * Type: double
		 */
		gross_earnings: FormControl<number | null | undefined>,

		/**
		 * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Type: DateOnly
		 */
		pay_date: FormControl<Date | null | undefined>,

		/**
		 * The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Type: DateOnly
		 */
		pay_day: FormControl<Date | null | undefined>,

		/** The frequency at which an individual is paid. */
		pay_frequency: FormControl<PayPeriodDetailsPay_frequency | null | undefined>,

		/**
		 * The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreatePayPeriodDetailsFormGroup() {
		return new FormGroup<PayPeriodDetailsFormProperties>({
			check_amount: new FormControl<number | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined),
			gross_earnings: new FormControl<number | null | undefined>(undefined),
			pay_date: new FormControl<Date | null | undefined>(undefined),
			pay_day: new FormControl<Date | null | undefined>(undefined),
			pay_frequency: new FormControl<PayPeriodDetailsPay_frequency | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum PayPeriodDetailsPay_frequency { PAY_FREQUENCY_UNKNOWN = 'PAY_FREQUENCY_UNKNOWN', PAY_FREQUENCY_WEEKLY = 'PAY_FREQUENCY_WEEKLY', PAY_FREQUENCY_BIWEEKLY = 'PAY_FREQUENCY_BIWEEKLY', PAY_FREQUENCY_SEMIMONTHLY = 'PAY_FREQUENCY_SEMIMONTHLY', PAY_FREQUENCY_MONTHLY = 'PAY_FREQUENCY_MONTHLY', _null = 5 }


	/** The verified fields from a paystub verification. All fields are provided as reported on the paystub. */
	export interface IncomeSummary {

		/**
		 * The name of the employee, as reported on the paystub.
		 * Required
		 */
		employee_name: EmployeeIncomeSummaryFieldString;

		/**
		 * The name of the employer, as reported on the paystub.
		 * Required
		 */
		employer_name: EmployerIncomeSummaryFieldString;

		/**
		 * The frequency of the pay period.
		 * Required
		 */
		pay_frequency: PayFrequency;

		/**
		 * The employee's estimated annual salary, as derived from information reported on the paystub.
		 * Required
		 */
		projected_wage: ProjectedIncomeSummaryFieldNumber;

		/**
		 * Information about the matched direct deposit transaction used to verify a user's payroll information.
		 * Required
		 */
		verified_transaction: TransactionData;

		/**
		 * Year-to-date pre-tax earnings, as reported on the paystub.
		 * Required
		 */
		ytd_gross_income: YTDGrossIncomeSummaryFieldNumber;

		/**
		 * Year-to-date earnings after any tax withholdings, benefit payments or deductions, as reported on the paystub.
		 * Required
		 */
		ytd_net_income: YTDNetIncomeSummaryFieldNumber;
	}

	/** The verified fields from a paystub verification. All fields are provided as reported on the paystub. */
	export interface IncomeSummaryFormProperties {
	}
	export function CreateIncomeSummaryFormGroup() {
		return new FormGroup<IncomeSummaryFormProperties>({
		});

	}


	/** The frequency of the pay period. */
	export interface PayFrequency {

		/**
		 * The frequency of the pay period.
		 * Required
		 */
		value: PayFrequencyValue;

		/**
		 * The verification status. One of the following:
		 * `"VERIFIED"`: The information was successfully verified.
		 * `"UNVERIFIED"`: The verification has not yet been performed.
		 * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
		 * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
		 * `"UNKNOWN"`: The verification status is unknown.
		 * Required
		 */
		verification_status: PayFrequencyVerification_status;
	}

	/** The frequency of the pay period. */
	export interface PayFrequencyFormProperties {

		/**
		 * The frequency of the pay period.
		 * Required
		 */
		value: FormControl<PayFrequencyValue | null | undefined>,

		/**
		 * The verification status. One of the following:
		 * `"VERIFIED"`: The information was successfully verified.
		 * `"UNVERIFIED"`: The verification has not yet been performed.
		 * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
		 * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
		 * `"UNKNOWN"`: The verification status is unknown.
		 * Required
		 */
		verification_status: FormControl<PayFrequencyVerification_status | null | undefined>,
	}
	export function CreatePayFrequencyFormGroup() {
		return new FormGroup<PayFrequencyFormProperties>({
			value: new FormControl<PayFrequencyValue | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PayFrequencyValue { monthly = 'monthly', semimonthly = 'semimonthly', weekly = 'weekly', biweekly = 'biweekly', unknown = 'unknown', _null = 5 }

	export enum PayFrequencyVerification_status { VERIFIED = 'VERIFIED', UNVERIFIED = 'UNVERIFIED', NEEDS_INFO = 'NEEDS_INFO', UNABLE_TO_VERIFY = 'UNABLE_TO_VERIFY', UNKNOWN = 'UNKNOWN' }


	/** Information about the matched direct deposit transaction used to verify a user's payroll information. */
	export interface TransactionData {

		/**
		 * A unique identifier for the end user's account.
		 * Required
		 */
		account_id: string;

		/**
		 * The amount of the transaction.
		 * Required
		 * Type: double
		 */
		amount: number;

		/**
		 * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		date: Date;

		/**
		 * The description of the transaction.
		 * Required
		 */
		description: string;

		/**
		 * A unique identifier for the transaction.
		 * Required
		 */
		transaction_id: string;
	}

	/** Information about the matched direct deposit transaction used to verify a user's payroll information. */
	export interface TransactionDataFormProperties {

		/**
		 * A unique identifier for the end user's account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The amount of the transaction.
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
		 * Required
		 * Type: DateOnly
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * The description of the transaction.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionDataFormGroup() {
		return new FormGroup<TransactionDataFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Field number for income summary */
	export interface IncomeSummaryFieldNumber {

		/**
		 * The value of the field.
		 * Required
		 * Type: double
		 */
		value: number;

		/**
		 * The verification status. One of the following:
		 * `"VERIFIED"`: The information was successfully verified.
		 * `"UNVERIFIED"`: The verification has not yet been performed.
		 * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
		 * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
		 * `"UNKNOWN"`: The verification status is unknown.
		 * Required
		 */
		verification_status: PayFrequencyVerification_status;
	}

	/** Field number for income summary */
	export interface IncomeSummaryFieldNumberFormProperties {

		/**
		 * The value of the field.
		 * Required
		 * Type: double
		 */
		value: FormControl<number | null | undefined>,

		/**
		 * The verification status. One of the following:
		 * `"VERIFIED"`: The information was successfully verified.
		 * `"UNVERIFIED"`: The verification has not yet been performed.
		 * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
		 * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
		 * `"UNKNOWN"`: The verification status is unknown.
		 * Required
		 */
		verification_status: FormControl<PayFrequencyVerification_status | null | undefined>,
	}
	export function CreateIncomeSummaryFieldNumberFormGroup() {
		return new FormGroup<IncomeSummaryFieldNumberFormProperties>({
			value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data about the income summary */
	export interface IncomeSummaryFieldString {

		/**
		 * The value of the field.
		 * Required
		 */
		value: string;

		/**
		 * The verification status. One of the following:
		 * `"VERIFIED"`: The information was successfully verified.
		 * `"UNVERIFIED"`: The verification has not yet been performed.
		 * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
		 * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
		 * `"UNKNOWN"`: The verification status is unknown.
		 * Required
		 */
		verification_status: PayFrequencyVerification_status;
	}

	/** Data about the income summary */
	export interface IncomeSummaryFieldStringFormProperties {

		/**
		 * The value of the field.
		 * Required
		 */
		value: FormControl<string | null | undefined>,

		/**
		 * The verification status. One of the following:
		 * `"VERIFIED"`: The information was successfully verified.
		 * `"UNVERIFIED"`: The verification has not yet been performed.
		 * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
		 * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
		 * `"UNKNOWN"`: The verification status is unknown.
		 * Required
		 */
		verification_status: FormControl<PayFrequencyVerification_status | null | undefined>,
	}
	export function CreateIncomeSummaryFieldStringFormGroup() {
		return new FormGroup<IncomeSummaryFieldStringFormProperties>({
			value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** IncomeVerificationCreateRequest defines the request schema for `/income/verification/create` */
	export interface IncomeVerificationCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Optional arguments for `/income/verification/create` */
		options?: IncomeVerificationCreateRequestOptions;

		/** The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow. */
		precheck_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The URL endpoint to which Plaid should send webhooks related to the progress of the income verification process.
		 * Required
		 */
		webhook: string;
	}

	/** IncomeVerificationCreateRequest defines the request schema for `/income/verification/create` */
	export interface IncomeVerificationCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow. */
		precheck_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL endpoint to which Plaid should send webhooks related to the progress of the income verification process.
		 * Required
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationCreateRequestFormGroup() {
		return new FormGroup<IncomeVerificationCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			precheck_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Optional arguments for `/income/verification/create` */
	export interface IncomeVerificationCreateRequestOptions {

		/** An array of access tokens corresponding to the Items that will be cross-referenced with the product data. Plaid will attempt to correlate transaction history from these Items with data from the user's paystub, such as date and amount. The `verification` status of the paystub as returned by `/income/verification/paystubs/get` will indicate if the verification status was successful, or, if not, why it failed. If the `transactions` product was not initialized for the Items during Link, it will be initialized after this Link session. */
		access_tokens?: Array<string>;
	}

	/** Optional arguments for `/income/verification/create` */
	export interface IncomeVerificationCreateRequestOptionsFormProperties {
	}
	export function CreateIncomeVerificationCreateRequestOptionsFormGroup() {
		return new FormGroup<IncomeVerificationCreateRequestOptionsFormProperties>({
		});

	}


	/** IncomeVerificationCreateResponse defines the response schema for `/income/verification/create`. */
	export interface IncomeVerificationCreateResponse {

		/**
		 * ID of the verification. This ID is persisted throughout the lifetime of the verification.
		 * Required
		 */
		income_verification_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** IncomeVerificationCreateResponse defines the response schema for `/income/verification/create`. */
	export interface IncomeVerificationCreateResponseFormProperties {

		/**
		 * ID of the verification. This ID is persisted throughout the lifetime of the verification.
		 * Required
		 */
		income_verification_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationCreateResponseFormGroup() {
		return new FormGroup<IncomeVerificationCreateResponseFormProperties>({
			income_verification_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** IncomeVerificationDocumentsDownloadRequest defines the request schema for `/income/verification/documents/download`. */
	export interface IncomeVerificationDocumentsDownloadRequest {

		/** The access token associated with the Item data is being requested for. */
		access_token?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document */
		document_id?: string | null;

		/** The ID of the verification. */
		income_verification_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** IncomeVerificationDocumentsDownloadRequest defines the request schema for `/income/verification/documents/download`. */
	export interface IncomeVerificationDocumentsDownloadRequestFormProperties {

		/** The access token associated with the Item data is being requested for. */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document */
		document_id: FormControl<string | null | undefined>,

		/** The ID of the verification. */
		income_verification_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationDocumentsDownloadRequestFormGroup() {
		return new FormGroup<IncomeVerificationDocumentsDownloadRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			document_id: new FormControl<string | null | undefined>(undefined),
			income_verification_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Flow types to retrieve payroll income data */
	export enum IncomeVerificationPayrollFlowType { payroll_digital_income = 'payroll_digital_income', payroll_document_income = 'payroll_document_income' }


	/** IncomeVerificationPaystubsGetRequest defines the request schema for `/income/verification/paystubs/get`. */
	export interface IncomeVerificationPaystubsGetRequest {

		/** The access token associated with the Item data is being requested for. */
		access_token?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The ID of the verification for which to get paystub information. */
		income_verification_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** IncomeVerificationPaystubsGetRequest defines the request schema for `/income/verification/paystubs/get`. */
	export interface IncomeVerificationPaystubsGetRequestFormProperties {

		/** The access token associated with the Item data is being requested for. */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The ID of the verification for which to get paystub information. */
		income_verification_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPaystubsGetRequestFormGroup() {
		return new FormGroup<IncomeVerificationPaystubsGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			income_verification_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** IncomeVerificationPaystubsGetResponse defines the response schema for `/income/verification/paystubs/get`. */
	export interface IncomeVerificationPaystubsGetResponse {

		/** Metadata for an income document. */
		document_metadata?: Array<DocumentMetadata>;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/** Required */
		paystubs: Array<Paystub>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** IncomeVerificationPaystubsGetResponse defines the response schema for `/income/verification/paystubs/get`. */
	export interface IncomeVerificationPaystubsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPaystubsGetResponseFormGroup() {
		return new FormGroup<IncomeVerificationPaystubsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing data extracted from the end user's paystub. */
	export interface Paystub {

		/**
		 * An object with the deduction information found on a paystub.
		 * Required
		 */
		deductions: Deductions;

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		doc_id: string;

		/**
		 * An object representing both a breakdown of earnings on a paystub and the total earnings.
		 * Required
		 */
		earnings: Earnings;

		/**
		 * Data about the employee.
		 * Required
		 */
		employee: Employee;

		/**
		 * Information about the employer on the paystub
		 * Required
		 */
		employer: PaystubEmployer;

		/** An object representing employment details found on a paystub. */
		employment_details?: EmploymentDetails;
		income_breakdown?: Array<IncomeBreakdown>;

		/**
		 * An object representing information about the net pay amount on the paystub.
		 * Required
		 */
		net_pay: NetPay;

		/**
		 * Details about the pay period.
		 * Required
		 */
		pay_period_details: PayPeriodDetails;

		/** An object representing details that can be found on the paystub. */
		paystub_details?: PaystubDetails;

		/** The amount of income earned year to date, as based on paystub data. */
		ytd_earnings?: PaystubYTDDetails;
	}

	/** An object representing data extracted from the end user's paystub. */
	export interface PaystubFormProperties {

		/**
		 * An identifier of the document referenced by the document metadata.
		 * Required
		 */
		doc_id: FormControl<string | null | undefined>,
	}
	export function CreatePaystubFormGroup() {
		return new FormGroup<PaystubFormProperties>({
			doc_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the employer on the paystub */
	export interface PaystubEmployer {

		/** Address on the paystub */
		address?: PaystubAddress;

		/**
		 * The name of the employer on the paystub.
		 * Required
		 */
		name: string;
	}

	/** Information about the employer on the paystub */
	export interface PaystubEmployerFormProperties {

		/**
		 * The name of the employer on the paystub.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePaystubEmployerFormGroup() {
		return new FormGroup<PaystubEmployerFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing information about the net pay amount on the paystub. */
	export interface NetPay {

		/**
		 * Raw amount of the net pay for the pay period
		 * Type: double
		 */
		current_amount?: number | null;

		/** Description of the net pay */
		description?: string | null;

		/** The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code?: string | null;

		/** An object representing both the current pay period and year to date amount for a category. */
		total?: Total;

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code?: string | null;

		/**
		 * The year-to-date amount of the net pay
		 * Type: double
		 */
		ytd_amount?: number | null;
	}

	/** An object representing information about the net pay amount on the paystub. */
	export interface NetPayFormProperties {

		/**
		 * Raw amount of the net pay for the pay period
		 * Type: double
		 */
		current_amount: FormControl<number | null | undefined>,

		/** Description of the net pay */
		description: FormControl<string | null | undefined>,

		/** The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/**
		 * The year-to-date amount of the net pay
		 * Type: double
		 */
		ytd_amount: FormControl<number | null | undefined>,
	}
	export function CreateNetPayFormGroup() {
		return new FormGroup<NetPayFormProperties>({
			current_amount: new FormControl<number | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
			ytd_amount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An object representing details that can be found on the paystub. */
	export interface PaystubDetails {

		/**
		 * Pay date on the paystub in the 'YYYY-MM-DD' format.
		 * Type: DateOnly
		 */
		pay_date?: Date | null;

		/** The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`. */
		pay_frequency?: PaystubDetailsPay_frequency | null;

		/**
		 * Ending date of the pay period on the paystub in the 'YYYY-MM-DD' format.
		 * Type: DateOnly
		 */
		pay_period_end_date?: Date | null;

		/**
		 * Beginning date of the pay period on the paystub in the 'YYYY-MM-DD' format.
		 * Type: DateOnly
		 */
		pay_period_start_date?: Date | null;

		/** The name of the payroll provider that generated the paystub, e.g. ADP */
		paystub_provider?: string | null;
	}

	/** An object representing details that can be found on the paystub. */
	export interface PaystubDetailsFormProperties {

		/**
		 * Pay date on the paystub in the 'YYYY-MM-DD' format.
		 * Type: DateOnly
		 */
		pay_date: FormControl<Date | null | undefined>,

		/** The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`. */
		pay_frequency: FormControl<PaystubDetailsPay_frequency | null | undefined>,

		/**
		 * Ending date of the pay period on the paystub in the 'YYYY-MM-DD' format.
		 * Type: DateOnly
		 */
		pay_period_end_date: FormControl<Date | null | undefined>,

		/**
		 * Beginning date of the pay period on the paystub in the 'YYYY-MM-DD' format.
		 * Type: DateOnly
		 */
		pay_period_start_date: FormControl<Date | null | undefined>,

		/** The name of the payroll provider that generated the paystub, e.g. ADP */
		paystub_provider: FormControl<string | null | undefined>,
	}
	export function CreatePaystubDetailsFormGroup() {
		return new FormGroup<PaystubDetailsFormProperties>({
			pay_date: new FormControl<Date | null | undefined>(undefined),
			pay_frequency: new FormControl<PaystubDetailsPay_frequency | null | undefined>(undefined),
			pay_period_end_date: new FormControl<Date | null | undefined>(undefined),
			pay_period_start_date: new FormControl<Date | null | undefined>(undefined),
			paystub_provider: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PaystubDetailsPay_frequency { MONTHLY = 'MONTHLY', 'BI-WEEKLY' = 'BI-WEEKLY', WEEKLY = 'WEEKLY', 'SEMI-MONTHLY' = 'SEMI-MONTHLY', _null = 4 }


	/** The amount of income earned year to date, as based on paystub data. */
	export interface PaystubYTDDetails {

		/**
		 * Year-to-date gross earnings.
		 * Type: double
		 */
		gross_earnings?: number | null;

		/**
		 * Year-to-date net (take home) earnings.
		 * Type: double
		 */
		net_earnings?: number | null;
	}

	/** The amount of income earned year to date, as based on paystub data. */
	export interface PaystubYTDDetailsFormProperties {

		/**
		 * Year-to-date gross earnings.
		 * Type: double
		 */
		gross_earnings: FormControl<number | null | undefined>,

		/**
		 * Year-to-date net (take home) earnings.
		 * Type: double
		 */
		net_earnings: FormControl<number | null | undefined>,
	}
	export function CreatePaystubYTDDetailsFormGroup() {
		return new FormGroup<PaystubYTDDetailsFormProperties>({
			gross_earnings: new FormControl<number | null | undefined>(undefined),
			net_earnings: new FormControl<number | null | undefined>(undefined),
		});

	}


	/**
	 * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:
	 * `"HIGH"`: It is very likely that this user can use the digital income verification flow.
	 * "`LOW`": It is unlikely that this user can use the digital income verification flow.
	 * `"UNKNOWN"`: It was not possible to determine if the user is supportable with the information passed.
	 */
	export enum IncomeVerificationPrecheckConfidence { HIGH = 'HIGH', LOW = 'LOW', UNKNOWN = 'UNKNOWN' }


	/** Data about the components comprising an address. */
	export interface IncomeVerificationPrecheckEmployerAddressData {

		/** The full city name */
		city?: string | null;

		/** The ISO 3166-1 alpha-2 country code */
		country?: string | null;

		/** The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
		postal_code?: string | null;

		/**
		 * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
		 * Example: `"NC"`
		 */
		region?: string | null;

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 */
		street?: string | null;
	}

	/** Data about the components comprising an address. */
	export interface IncomeVerificationPrecheckEmployerAddressDataFormProperties {

		/** The full city name */
		city: FormControl<string | null | undefined>,

		/** The ISO 3166-1 alpha-2 country code */
		country: FormControl<string | null | undefined>,

		/** The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
		 * Example: `"NC"`
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPrecheckEmployerAddressDataFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckEmployerAddressDataFormProperties>({
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			street: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** IncomeVerificationPrecheckRequest defines the request schema for `/income/verification/precheck` */
	export interface IncomeVerificationPrecheckRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Information about the end user's employer */
		employer?: IncomeVerificationPrecheckEmployer;

		/** Information about the end user's payroll institution */
		payroll_institution?: IncomeVerificationPrecheckPayrollInstitution;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
		transactions_access_token?: string;

		/** An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
		transactions_access_tokens?: Array<string>;

		/** Data about military info in the income verification precheck. */
		us_military_info?: IncomeVerificationPrecheckMilitaryInfo;

		/** Information about the user whose eligibility is being evaluated. */
		user?: IncomeVerificationPrecheckUser;
	}

	/** IncomeVerificationPrecheckRequest defines the request schema for `/income/verification/precheck` */
	export interface IncomeVerificationPrecheckRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
		transactions_access_token: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPrecheckRequestFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			transactions_access_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about the user whose eligibility is being evaluated. */
	export interface IncomeVerificationPrecheckUser {

		/** The user's email address */
		email_address?: string | null;

		/** The user's first name */
		first_name?: string | null;

		/** Data about the components comprising an address. */
		home_address?: SignalAddressData;

		/** The user's last name */
		last_name?: string | null;
	}

	/** Information about the user whose eligibility is being evaluated. */
	export interface IncomeVerificationPrecheckUserFormProperties {

		/** The user's email address */
		email_address: FormControl<string | null | undefined>,

		/** The user's first name */
		first_name: FormControl<string | null | undefined>,

		/** The user's last name */
		last_name: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPrecheckUserFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckUserFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			first_name: new FormControl<string | null | undefined>(undefined),
			last_name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Data about the components comprising an address. */
	export interface SignalAddressData {

		/** The full city name */
		city?: string | null;

		/** The ISO 3166-1 alpha-2 country code */
		country?: string | null;

		/** The postal code */
		postal_code?: string | null;

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		region?: string | null;

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 */
		street?: string | null;
	}

	/** Data about the components comprising an address. */
	export interface SignalAddressDataFormProperties {

		/** The full city name */
		city: FormControl<string | null | undefined>,

		/** The ISO 3166-1 alpha-2 country code */
		country: FormControl<string | null | undefined>,

		/** The postal code */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state
		 * Example: `"NC"`
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateSignalAddressDataFormGroup() {
		return new FormGroup<SignalAddressDataFormProperties>({
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			street: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** IncomeVerificationPrecheckResponse defines the response schema for `/income/verification/precheck`. */
	export interface IncomeVerificationPrecheckResponse {

		/**
		 * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:
		 * `"HIGH"`: It is very likely that this user can use the digital income verification flow.
		 * "`LOW`": It is unlikely that this user can use the digital income verification flow.
		 * `"UNKNOWN"`: It was not possible to determine if the user is supportable with the information passed.
		 * Required
		 */
		confidence: CreditPayrollIncomePrecheckResponseConfidence;

		/**
		 * ID of the precheck. Provide this value when calling `/link/token/create` in order to optimize Link conversion.
		 * Required
		 */
		precheck_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** IncomeVerificationPrecheckResponse defines the response schema for `/income/verification/precheck`. */
	export interface IncomeVerificationPrecheckResponseFormProperties {

		/**
		 * The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:
		 * `"HIGH"`: It is very likely that this user can use the digital income verification flow.
		 * "`LOW`": It is unlikely that this user can use the digital income verification flow.
		 * `"UNKNOWN"`: It was not possible to determine if the user is supportable with the information passed.
		 * Required
		 */
		confidence: FormControl<CreditPayrollIncomePrecheckResponseConfidence | null | undefined>,

		/**
		 * ID of the precheck. Provide this value when calling `/link/token/create` in order to optimize Link conversion.
		 * Required
		 */
		precheck_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationPrecheckResponseFormGroup() {
		return new FormGroup<IncomeVerificationPrecheckResponseFormProperties>({
			confidence: new FormControl<CreditPayrollIncomePrecheckResponseConfidence | null | undefined>(undefined, [Validators.required]),
			precheck_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The types of source income data that users should be able to share */
	export enum IncomeVerificationSourceType { bank = 'bank', payroll = 'payroll' }


	/** Fired when the status of an income verification instance has changed. It will typically take several minutes for this webhook to fire after the end user has uploaded their documents in the Document Income flow. */
	export interface IncomeVerificationStatusWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The Item ID associated with the verification.
		 * Required
		 */
		item_id: string;

		/** The Plaid `user_id` of the User associated with this webhook, warning, or error. */
		user_id?: string | null;

		/**
		 * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
		 * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
		 * `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
		 * Required
		 */
		verification_status: string;

		/**
		 * `INCOME_VERIFICATION`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `"INCOME"`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when the status of an income verification instance has changed. It will typically take several minutes for this webhook to fire after the end user has uploaded their documents in the Document Income flow. */
	export interface IncomeVerificationStatusWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The Item ID associated with the verification.
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/** The Plaid `user_id` of the User associated with this webhook, warning, or error. */
		user_id: FormControl<string | null | undefined>,

		/**
		 * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
		 * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
		 * `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
		 * Required
		 */
		verification_status: FormControl<string | null | undefined>,

		/**
		 * `INCOME_VERIFICATION`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `"INCOME"`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationStatusWebhookFormGroup() {
		return new FormGroup<IncomeVerificationStatusWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_id: new FormControl<string | null | undefined>(undefined),
			verification_status: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** IncomeVerificationTaxformsGetRequest defines the request schema for `/income/verification/taxforms/get` */
	export interface IncomeVerificationTaxformsGetRequest {

		/** The access token associated with the Item data is being requested for. */
		access_token?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The ID of the verification. */
		income_verification_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** IncomeVerificationTaxformsGetRequest defines the request schema for `/income/verification/taxforms/get` */
	export interface IncomeVerificationTaxformsGetRequestFormProperties {

		/** The access token associated with the Item data is being requested for. */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The ID of the verification. */
		income_verification_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationTaxformsGetRequestFormGroup() {
		return new FormGroup<IncomeVerificationTaxformsGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			income_verification_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** IncomeVerificationTaxformsGetResponse defines the response schema for `/income/verification/taxforms/get` */
	export interface IncomeVerificationTaxformsGetResponse {

		/** Required */
		document_metadata: Array<DocumentMetadata>;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;

		/**
		 * A list of forms.
		 * Required
		 */
		taxforms: Array<Taxform>;
	}

	/** IncomeVerificationTaxformsGetResponse defines the response schema for `/income/verification/taxforms/get` */
	export interface IncomeVerificationTaxformsGetResponseFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationTaxformsGetResponseFormGroup() {
		return new FormGroup<IncomeVerificationTaxformsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Data about an official document used to report the user's income to the IRS. */
	export interface Taxform {

		/** An identifier of the document referenced by the document metadata. */
		doc_id?: string | null;

		/**
		 * The type of tax document. Currently, the only supported value is `w2`.
		 * Required
		 */
		document_type: string;

		/** W2 is an object that represents income data taken from a W2 tax document. */
		w2?: W2;
	}

	/** Data about an official document used to report the user's income to the IRS. */
	export interface TaxformFormProperties {

		/** An identifier of the document referenced by the document metadata. */
		doc_id: FormControl<string | null | undefined>,

		/**
		 * The type of tax document. Currently, the only supported value is `w2`.
		 * Required
		 */
		document_type: FormControl<string | null | undefined>,
	}
	export function CreateTaxformFormGroup() {
		return new FormGroup<TaxformFormProperties>({
			doc_id: new FormControl<string | null | undefined>(undefined),
			document_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** W2 is an object that represents income data taken from a W2 tax document. */
	export interface W2 {

		/** Allocated tips. */
		allocated_tips?: string | null;
		box_12?: Array<W2Box12>;

		/** Contents from box 9 on the W2. */
		box_9?: string | null;

		/** Dependent care benefits. */
		dependent_care_benefits?: string | null;

		/** Data about the employee. */
		employee?: Employee;

		/** Information about the employer on the paystub */
		employer?: PaystubEmployer;

		/** An employee identification number or EIN. */
		employer_id_number?: string | null;

		/** Federal income tax withheld for the tax year. */
		federal_income_tax_withheld?: string | null;

		/** Medicare tax withheld for the tax year. */
		medicare_tax_withheld?: string | null;

		/** Wages and tips from medicare. */
		medicare_wages_and_tips?: string | null;

		/** Nonqualified plans. */
		nonqualified_plans?: string | null;

		/** Other. */
		other?: string | null;

		/** Retirement plan. */
		retirement_plan?: string | null;

		/** Social security tax withheld for the tax year. */
		social_security_tax_withheld?: string | null;

		/** Tips from social security. */
		social_security_tips?: string | null;

		/** Wages from social security. */
		social_security_wages?: string | null;
		state_and_local_wages?: Array<W2StateAndLocalWages>;

		/** Statutory employee. */
		statutory_employee?: string | null;

		/** The tax year of the W2 document. */
		tax_year?: string | null;

		/** Third party sick pay. */
		third_party_sick_pay?: string | null;

		/** Wages from tips and other compensation. */
		wages_tips_other_comp?: string | null;
	}

	/** W2 is an object that represents income data taken from a W2 tax document. */
	export interface W2FormProperties {

		/** Allocated tips. */
		allocated_tips: FormControl<string | null | undefined>,

		/** Contents from box 9 on the W2. */
		box_9: FormControl<string | null | undefined>,

		/** Dependent care benefits. */
		dependent_care_benefits: FormControl<string | null | undefined>,

		/** An employee identification number or EIN. */
		employer_id_number: FormControl<string | null | undefined>,

		/** Federal income tax withheld for the tax year. */
		federal_income_tax_withheld: FormControl<string | null | undefined>,

		/** Medicare tax withheld for the tax year. */
		medicare_tax_withheld: FormControl<string | null | undefined>,

		/** Wages and tips from medicare. */
		medicare_wages_and_tips: FormControl<string | null | undefined>,

		/** Nonqualified plans. */
		nonqualified_plans: FormControl<string | null | undefined>,

		/** Other. */
		other: FormControl<string | null | undefined>,

		/** Retirement plan. */
		retirement_plan: FormControl<string | null | undefined>,

		/** Social security tax withheld for the tax year. */
		social_security_tax_withheld: FormControl<string | null | undefined>,

		/** Tips from social security. */
		social_security_tips: FormControl<string | null | undefined>,

		/** Wages from social security. */
		social_security_wages: FormControl<string | null | undefined>,

		/** Statutory employee. */
		statutory_employee: FormControl<string | null | undefined>,

		/** The tax year of the W2 document. */
		tax_year: FormControl<string | null | undefined>,

		/** Third party sick pay. */
		third_party_sick_pay: FormControl<string | null | undefined>,

		/** Wages from tips and other compensation. */
		wages_tips_other_comp: FormControl<string | null | undefined>,
	}
	export function CreateW2FormGroup() {
		return new FormGroup<W2FormProperties>({
			allocated_tips: new FormControl<string | null | undefined>(undefined),
			box_9: new FormControl<string | null | undefined>(undefined),
			dependent_care_benefits: new FormControl<string | null | undefined>(undefined),
			employer_id_number: new FormControl<string | null | undefined>(undefined),
			federal_income_tax_withheld: new FormControl<string | null | undefined>(undefined),
			medicare_tax_withheld: new FormControl<string | null | undefined>(undefined),
			medicare_wages_and_tips: new FormControl<string | null | undefined>(undefined),
			nonqualified_plans: new FormControl<string | null | undefined>(undefined),
			other: new FormControl<string | null | undefined>(undefined),
			retirement_plan: new FormControl<string | null | undefined>(undefined),
			social_security_tax_withheld: new FormControl<string | null | undefined>(undefined),
			social_security_tips: new FormControl<string | null | undefined>(undefined),
			social_security_wages: new FormControl<string | null | undefined>(undefined),
			statutory_employee: new FormControl<string | null | undefined>(undefined),
			tax_year: new FormControl<string | null | undefined>(undefined),
			third_party_sick_pay: new FormControl<string | null | undefined>(undefined),
			wages_tips_other_comp: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Status of the income verification webhook */
	export interface IncomeVerificationWebhookStatus {

		/** Required */
		id: string;
	}

	/** Status of the income verification webhook */
	export interface IncomeVerificationWebhookStatusFormProperties {

		/** Required */
		id: FormControl<string | null | undefined>,
	}
	export function CreateIncomeVerificationWebhookStatusFormGroup() {
		return new FormGroup<IncomeVerificationWebhookStatusFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Name information for the associated individual watchlist hit */
	export interface IndividualScreeningHitNames {

		/**
		 * The full name of the individual, including all parts.
		 * Required
		 */
		full: string;

		/**
		 * Primary names are those most commonly used to refer to this person. Only one name will ever be marked as primary.
		 * Required
		 */
		is_primary: boolean;

		/**
		 * Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`.
		 * Required
		 */
		weak_alias_determination: EntityScreeningHitNamesWeak_alias_determination;
	}

	/** Name information for the associated individual watchlist hit */
	export interface IndividualScreeningHitNamesFormProperties {

		/**
		 * The full name of the individual, including all parts.
		 * Required
		 */
		full: FormControl<string | null | undefined>,

		/**
		 * Primary names are those most commonly used to refer to this person. Only one name will ever be marked as primary.
		 * Required
		 */
		is_primary: FormControl<boolean | null | undefined>,

		/**
		 * Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`.
		 * Required
		 */
		weak_alias_determination: FormControl<EntityScreeningHitNamesWeak_alias_determination | null | undefined>,
	}
	export function CreateIndividualScreeningHitNamesFormGroup() {
		return new FormGroup<IndividualScreeningHitNamesFormProperties>({
			full: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_primary: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			weak_alias_determination: new FormControl<EntityScreeningHitNamesWeak_alias_determination | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Shorthand identifier for a specific screening list for individuals. */
	export enum IndividualWatchlistCode { AU_CON = 'AU_CON', CA_CON = 'CA_CON', EU_CON = 'EU_CON', IZ_CIA = 'IZ_CIA', IZ_IPL = 'IZ_IPL', IZ_PEP = 'IZ_PEP', IZ_UNC = 'IZ_UNC', IZ_WBK = 'IZ_WBK', UK_HMC = 'UK_HMC', US_DPL = 'US_DPL', US_DTC = 'US_DTC', US_FBI = 'US_FBI', US_FSE = 'US_FSE', US_ISN = 'US_ISN', US_MBS = 'US_MBS', US_PLC = 'US_PLC', US_SDN = 'US_SDN', US_SSI = 'US_SSI', SG_SOF = 'SG_SOF', TR_TWL = 'TR_TWL', TR_DFD = 'TR_DFD', TR_FOR = 'TR_FOR', TR_WMD = 'TR_WMD', TR_CMB = 'TR_CMB' }


	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals. */
	export interface IndividualWatchlistProgram {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * ID of the associated program.
		 * Required
		 */
		id: string;

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: boolean;

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: boolean;

		/**
		 * Watchlists enabled for the associated program
		 * Required
		 */
		lists_enabled: Array<IndividualWatchlistCode>;

		/**
		 * A name for the program to define its purpose. For example, "High Risk Individuals", "US Cardholders", or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: EntityWatchlistProgramName_sensitivity;
	}

	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals. */
	export interface IndividualWatchlistProgramFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated program.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: FormControl<boolean | null | undefined>,

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: FormControl<boolean | null | undefined>,

		/**
		 * A name for the program to define its purpose. For example, "High Risk Individuals", "US Cardholders", or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>,
	}
	export function CreateIndividualWatchlistProgramFormGroup() {
		return new FormGroup<IndividualWatchlistProgramFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			is_rescanning_enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			name_sensitivity: new FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`. */
	export interface InflowModel {

		/**
		 * Amount of income per month. This value is required if `type` is `monthly-income`.
		 * Required
		 * Type: double
		 */
		income_amount: number;

		/**
		 * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
		 * Required
		 * Type: double
		 */
		payment_day_of_month: number;

		/**
		 * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.
		 * Required
		 */
		statement_day_of_month: string;

		/**
		 * The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
		 * Required
		 */
		transaction_name: string;

		/**
		 * Inflow model. One of the following:
		 * `none`: No income
		 * `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.
		 * `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.
		 * Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
		 * Required
		 */
		type: string;
	}

	/** The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`. */
	export interface InflowModelFormProperties {

		/**
		 * Amount of income per month. This value is required if `type` is `monthly-income`.
		 * Required
		 * Type: double
		 */
		income_amount: FormControl<number | null | undefined>,

		/**
		 * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
		 * Required
		 * Type: double
		 */
		payment_day_of_month: FormControl<number | null | undefined>,

		/**
		 * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.
		 * Required
		 */
		statement_day_of_month: FormControl<string | null | undefined>,

		/**
		 * The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
		 * Required
		 */
		transaction_name: FormControl<string | null | undefined>,

		/**
		 * Inflow model. One of the following:
		 * `none`: No income
		 * `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.
		 * `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.
		 * Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateInflowModelFormGroup() {
		return new FormGroup<InflowModelFormProperties>({
			income_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			payment_day_of_month: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			statement_day_of_month: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Fired when an Item's initial transaction pull is completed. Once this webhook has been fired, transaction data for the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface InitialUpdateWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** The error code associated with the webhook. */
		error?: string | null;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * The number of new, unfetched transactions available.
		 * Required
		 * Type: double
		 */
		new_transactions: number;

		/**
		 * `INITIAL_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: string;
	}

	/**
	 * Fired when an Item's initial transaction pull is completed. Once this webhook has been fired, transaction data for the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface InitialUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/** The error code associated with the webhook. */
		error: FormControl<string | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The number of new, unfetched transactions available.
		 * Required
		 * Type: double
		 */
		new_transactions: FormControl<number | null | undefined>,

		/**
		 * `INITIAL_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateInitialUpdateWebhookFormGroup() {
		return new FormGroup<InitialUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			error: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			new_transactions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Details relating to a specific financial institution */
	export interface Institution {

		/** Metadata that captures information about the Auth features of an institution. */
		auth_metadata?: AuthMetadata;

		/**
		 * A list of the country codes supported by the institution.
		 * Required
		 */
		country_codes: Array<CountryCode>;

		/** A partial list of DTC numbers associated with the institution. */
		dtc_numbers?: Array<string>;

		/**
		 * Unique identifier for the institution
		 * Required
		 */
		institution_id: string;

		/** Base64 encoded representation of the institution's logo, returned as a base64 encoded 152x152 PNG. Not all institutions' logos are available. */
		logo?: string | null;

		/**
		 * The official name of the institution
		 * Required
		 */
		name: string;

		/**
		 * Indicates that the institution has a mandatory OAuth login flow. Note that `oauth` may be `false` even for institutions that support OAuth, if the institution is in the process of migrating to OAuth and some active Items still exist that do not use OAuth.
		 * Required
		 */
		oauth: boolean;

		/** Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests. */
		payment_initiation_metadata?: PaymentInitiationMetadata;

		/** Hexadecimal representation of the primary color used by the institution */
		primary_color?: string | null;

		/**
		 * A list of the Plaid products supported by the institution. Note that only institutions that support Instant Auth will return `auth` in the product array; institutions that do not list `auth` may still support other Auth methods such as Instant Match or Automated Micro-deposit Verification. To identify institutions that support those methods, use the `auth_metadata` object. For more details, see [Full Auth coverage](https://plaid.com/docs/auth/coverage/).
		 * Required
		 */
		products: Array<Products>;

		/**
		 * A partial list of routing numbers associated with the institution. This list is provided for the purpose of looking up institutions by routing number. It is not comprehensive and should never be used as a complete list of routing numbers for an institution.
		 * Required
		 */
		routing_numbers: Array<string>;

		/**
		 * The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution's status, Plaid will return null rather than potentially inaccurate data.
		 * Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment.
		 */
		status?: InstitutionStatus;

		/** The URL for the institution's website */
		url?: string | null;
	}

	/** Details relating to a specific financial institution */
	export interface InstitutionFormProperties {

		/**
		 * Unique identifier for the institution
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/** Base64 encoded representation of the institution's logo, returned as a base64 encoded 152x152 PNG. Not all institutions' logos are available. */
		logo: FormControl<string | null | undefined>,

		/**
		 * The official name of the institution
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * Indicates that the institution has a mandatory OAuth login flow. Note that `oauth` may be `false` even for institutions that support OAuth, if the institution is in the process of migrating to OAuth and some active Items still exist that do not use OAuth.
		 * Required
		 */
		oauth: FormControl<boolean | null | undefined>,

		/** Hexadecimal representation of the primary color used by the institution */
		primary_color: FormControl<string | null | undefined>,

		/** The URL for the institution's website */
		url: FormControl<string | null | undefined>,
	}
	export function CreateInstitutionFormGroup() {
		return new FormGroup<InstitutionFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			logo: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			oauth: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			primary_color: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests. */
	export interface PaymentInitiationMetadata {

		/**
		 * A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.
		 * Example: `{"GBP": "10000"}`
		 * Required
		 */
		maximum_payment_amount: PaymentInitiationMaximumPaymentAmount;

		/**
		 * Metadata specifically related to valid Payment Initiation standing order configurations for the institution.
		 * Required
		 */
		standing_order_metadata: PaymentInitiationStandingOrderMetadata;

		/**
		 * Indicates whether the institution supports payments from a different country.
		 * Required
		 */
		supports_international_payments: boolean;

		/**
		 * Indicates whether the institution supports returning refund details when initiating a payment.
		 * Required
		 */
		supports_refund_details: boolean;

		/**
		 * Indicates whether the institution supports SEPA Instant payments.
		 * Required
		 */
		supports_sepa_instant: boolean;
	}

	/** Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests. */
	export interface PaymentInitiationMetadataFormProperties {

		/**
		 * Indicates whether the institution supports payments from a different country.
		 * Required
		 */
		supports_international_payments: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether the institution supports returning refund details when initiating a payment.
		 * Required
		 */
		supports_refund_details: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether the institution supports SEPA Instant payments.
		 * Required
		 */
		supports_sepa_instant: FormControl<boolean | null | undefined>,
	}
	export function CreatePaymentInitiationMetadataFormGroup() {
		return new FormGroup<PaymentInitiationMetadataFormProperties>({
			supports_international_payments: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			supports_refund_details: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			supports_sepa_instant: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.
	 * Example: `{"GBP": "10000"}`
	 */
	export interface PaymentInitiationMaximumPaymentAmount {
	}

	/**
	 * A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.
	 * Example: `{"GBP": "10000"}`
	 */
	export interface PaymentInitiationMaximumPaymentAmountFormProperties {
	}
	export function CreatePaymentInitiationMaximumPaymentAmountFormGroup() {
		return new FormGroup<PaymentInitiationMaximumPaymentAmountFormProperties>({
		});

	}


	/** Metadata specifically related to valid Payment Initiation standing order configurations for the institution. */
	export interface PaymentInitiationStandingOrderMetadata {

		/**
		 * Indicates whether the institution supports closed-ended standing orders by providing an end date.
		 * Required
		 */
		supports_standing_order_end_date: boolean;

		/**
		 * This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month.
		 * Required
		 */
		supports_standing_order_negative_execution_days: boolean;

		/**
		 * A list of the valid standing order intervals supported by the institution.
		 * Required
		 */
		valid_standing_order_intervals: Array<PaymentScheduleInterval>;
	}

	/** Metadata specifically related to valid Payment Initiation standing order configurations for the institution. */
	export interface PaymentInitiationStandingOrderMetadataFormProperties {

		/**
		 * Indicates whether the institution supports closed-ended standing orders by providing an end date.
		 * Required
		 */
		supports_standing_order_end_date: FormControl<boolean | null | undefined>,

		/**
		 * This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month.
		 * Required
		 */
		supports_standing_order_negative_execution_days: FormControl<boolean | null | undefined>,
	}
	export function CreatePaymentInitiationStandingOrderMetadataFormGroup() {
		return new FormGroup<PaymentInitiationStandingOrderMetadataFormProperties>({
			supports_standing_order_end_date: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			supports_standing_order_negative_execution_days: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The frequency interval of the payment. */
	export enum PaymentScheduleInterval { WEEKLY = 'WEEKLY', MONTHLY = 'MONTHLY' }


	/**
	 * The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution's status, Plaid will return null rather than potentially inaccurate data.
	 * Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment.
	 */
	export interface InstitutionStatus {

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		auth?: ProductStatus;

		/** Details of recent health incidents associated with the institution. */
		health_incidents?: Array<HealthIncident>;

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		identity?: ProductStatus;

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		investments?: ProductStatus;

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		investments_updates?: ProductStatus;

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		item_logins?: ProductStatus;

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		liabilities?: ProductStatus;

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		liabilities_updates?: ProductStatus;

		/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
		transactions_updates?: ProductStatus;
	}

	/**
	 * The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution's status, Plaid will return null rather than potentially inaccurate data.
	 * Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment.
	 */
	export interface InstitutionStatusFormProperties {
	}
	export function CreateInstitutionStatusFormGroup() {
		return new FormGroup<InstitutionStatusFormProperties>({
		});

	}


	/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
	export interface ProductStatus {

		/**
		 * A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details).
		 * Required
		 */
		breakdown: ProductStatusBreakdown;

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution.
		 * Required
		 */
		last_status_change: Date;

		/**
		 * This field is deprecated in favor of the `breakdown` object, which provides more granular institution health data.
		 * `HEALTHY`: the majority of requests are successful
		 * `DEGRADED`: only some requests are successful
		 * `DOWN`: all requests are failing
		 * Required
		 */
		status: ProductStatusStatus;
	}

	/** A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object. */
	export interface ProductStatusFormProperties {

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution.
		 * Required
		 */
		last_status_change: FormControl<Date | null | undefined>,

		/**
		 * This field is deprecated in favor of the `breakdown` object, which provides more granular institution health data.
		 * `HEALTHY`: the majority of requests are successful
		 * `DEGRADED`: only some requests are successful
		 * `DOWN`: all requests are failing
		 * Required
		 */
		status: FormControl<ProductStatusStatus | null | undefined>,
	}
	export function CreateProductStatusFormGroup() {
		return new FormGroup<ProductStatusFormProperties>({
			last_status_change: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<ProductStatusStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details). */
	export interface ProductStatusBreakdown {

		/**
		 * The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
		 * Required
		 * Type: double
		 */
		error_institution: number;

		/**
		 * The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal.
		 * Required
		 * Type: double
		 */
		error_plaid: number;

		/** The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns. */
		refresh_interval?: ProductStatusBreakdownRefresh_interval | null;

		/**
		 * The percentage of login attempts that are successful, expressed as a decimal.
		 * Required
		 * Type: double
		 */
		success: number;
	}

	/** A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details). */
	export interface ProductStatusBreakdownFormProperties {

		/**
		 * The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
		 * Required
		 * Type: double
		 */
		error_institution: FormControl<number | null | undefined>,

		/**
		 * The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal.
		 * Required
		 * Type: double
		 */
		error_plaid: FormControl<number | null | undefined>,

		/** The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns. */
		refresh_interval: FormControl<ProductStatusBreakdownRefresh_interval | null | undefined>,

		/**
		 * The percentage of login attempts that are successful, expressed as a decimal.
		 * Required
		 * Type: double
		 */
		success: FormControl<number | null | undefined>,
	}
	export function CreateProductStatusBreakdownFormGroup() {
		return new FormGroup<ProductStatusBreakdownFormProperties>({
			error_institution: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			error_plaid: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			refresh_interval: new FormControl<ProductStatusBreakdownRefresh_interval | null | undefined>(undefined),
			success: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ProductStatusBreakdownRefresh_interval { NORMAL = 'NORMAL', DELAYED = 'DELAYED', STOPPED = 'STOPPED' }

	export enum ProductStatusStatus { HEALTHY = 'HEALTHY', DEGRADED = 'DEGRADED', DOWN = 'DOWN' }


	/** Contains the RTP network and types supported by the linked Item's institution. */
	export interface InstitutionSupportedNetworks {

		/**
		 * Contains the supported service types in RTP
		 * Required
		 */
		rtp: TransferCapabilitiesGetRTP;
	}

	/** Contains the RTP network and types supported by the linked Item's institution. */
	export interface InstitutionSupportedNetworksFormProperties {
	}
	export function CreateInstitutionSupportedNetworksFormGroup() {
		return new FormGroup<InstitutionSupportedNetworksFormProperties>({
		});

	}


	/** Contains the supported service types in RTP */
	export interface TransferCapabilitiesGetRTP {

		/** When `true`, the linked Item's institution supports RTP credit transfer. */
		credit?: boolean | null;
	}

	/** Contains the supported service types in RTP */
	export interface TransferCapabilitiesGetRTPFormProperties {

		/** When `true`, the linked Item's institution supports RTP credit transfer. */
		credit: FormControl<boolean | null | undefined>,
	}
	export function CreateTransferCapabilitiesGetRTPFormGroup() {
		return new FormGroup<TransferCapabilitiesGetRTPFormProperties>({
			credit: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** InstitutionsGetByIdRequest defines the request schema for `/institutions/get_by_id` */
	export interface InstitutionsGetByIdRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.
		 * Required
		 */
		country_codes: Array<CountryCode>;

		/**
		 * The ID of the institution to get details about
		 * Required
		 * Min length: 1
		 */
		institution_id: string;

		/** Specifies optional parameters for `/institutions/get_by_id`. If provided, must not be `null`. */
		options?: InstitutionsGetByIdRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** InstitutionsGetByIdRequest defines the request schema for `/institutions/get_by_id` */
	export interface InstitutionsGetByIdRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the institution to get details about
		 * Required
		 * Min length: 1
		 */
		institution_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateInstitutionsGetByIdRequestFormGroup() {
		return new FormGroup<InstitutionsGetByIdRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies optional parameters for `/institutions/get_by_id`. If provided, must not be `null`. */
	export interface InstitutionsGetByIdRequestOptions {

		/** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
		include_auth_metadata?: boolean | null;

		/**
		 * When `true`, return an institution's logo, brand color, and URL. When available, the bank's logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is `false`.
		 * Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
		 */
		include_optional_metadata?: boolean | null;

		/** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
		include_payment_initiation_metadata?: boolean | null;

		/** If `true`, the response will include status information about the institution. Default value is `false`. */
		include_status?: boolean | null;
	}

	/** Specifies optional parameters for `/institutions/get_by_id`. If provided, must not be `null`. */
	export interface InstitutionsGetByIdRequestOptionsFormProperties {

		/** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
		include_auth_metadata: FormControl<boolean | null | undefined>,

		/**
		 * When `true`, return an institution's logo, brand color, and URL. When available, the bank's logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is `false`.
		 * Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
		 */
		include_optional_metadata: FormControl<boolean | null | undefined>,

		/** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
		include_payment_initiation_metadata: FormControl<boolean | null | undefined>,

		/** If `true`, the response will include status information about the institution. Default value is `false`. */
		include_status: FormControl<boolean | null | undefined>,
	}
	export function CreateInstitutionsGetByIdRequestOptionsFormGroup() {
		return new FormGroup<InstitutionsGetByIdRequestOptionsFormProperties>({
			include_auth_metadata: new FormControl<boolean | null | undefined>(undefined),
			include_optional_metadata: new FormControl<boolean | null | undefined>(undefined),
			include_payment_initiation_metadata: new FormControl<boolean | null | undefined>(undefined),
			include_status: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** InstitutionsGetByIdResponse defines the response schema for `/institutions/get_by_id` */
	export interface InstitutionsGetByIdResponse {

		/**
		 * Details relating to a specific financial institution
		 * Required
		 */
		institution: Institution;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** InstitutionsGetByIdResponse defines the response schema for `/institutions/get_by_id` */
	export interface InstitutionsGetByIdResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateInstitutionsGetByIdResponseFormGroup() {
		return new FormGroup<InstitutionsGetByIdResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** InstitutionsGetRequest defines the request schema for `/institutions/get` */
	export interface InstitutionsGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The total number of Institutions to return.
		 * Required
		 * Minimum: 1
		 * Maximum: 500
		 */
		count: number;

		/**
		 * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard.
		 * In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.
		 * Required
		 * Minimum items: 1
		 */
		country_codes: Array<CountryCode>;

		/**
		 * The number of Institutions to skip.
		 * Required
		 * Minimum: 0
		 */
		offset: number;

		/** An optional object to filter `/institutions/get` results. */
		options?: InstitutionsGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** InstitutionsGetRequest defines the request schema for `/institutions/get` */
	export interface InstitutionsGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The total number of Institutions to return.
		 * Required
		 * Minimum: 1
		 * Maximum: 500
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * The number of Institutions to skip.
		 * Required
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateInstitutionsGetRequestFormGroup() {
		return new FormGroup<InstitutionsGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1), Validators.max(500)]),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/institutions/get` results. */
	export interface InstitutionsGetRequestOptions {

		/** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
		include_auth_metadata?: boolean | null;

		/**
		 * When `true`, return the institution's homepage URL, logo and primary brand color.
		 * Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
		 */
		include_optional_metadata?: boolean | null;

		/** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
		include_payment_initiation_metadata?: boolean | null;

		/** Limit results to institutions with or without mandatory OAuth login flows. Note that institutions will only have `oauth` set to `true` if *all* Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth may have the `oauth` attribute set to `false` even if they support OAuth. */
		oauth?: boolean | null;

		/**
		 * Filter the Institutions based on which products they support.
		 * Minimum items: 1
		 */
		products?: Array<Products>;

		/** Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid. */
		routing_numbers?: Array<string>;
	}

	/** An optional object to filter `/institutions/get` results. */
	export interface InstitutionsGetRequestOptionsFormProperties {

		/** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
		include_auth_metadata: FormControl<boolean | null | undefined>,

		/**
		 * When `true`, return the institution's homepage URL, logo and primary brand color.
		 * Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
		 */
		include_optional_metadata: FormControl<boolean | null | undefined>,

		/** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
		include_payment_initiation_metadata: FormControl<boolean | null | undefined>,

		/** Limit results to institutions with or without mandatory OAuth login flows. Note that institutions will only have `oauth` set to `true` if *all* Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth may have the `oauth` attribute set to `false` even if they support OAuth. */
		oauth: FormControl<boolean | null | undefined>,
	}
	export function CreateInstitutionsGetRequestOptionsFormGroup() {
		return new FormGroup<InstitutionsGetRequestOptionsFormProperties>({
			include_auth_metadata: new FormControl<boolean | null | undefined>(undefined),
			include_optional_metadata: new FormControl<boolean | null | undefined>(undefined),
			include_payment_initiation_metadata: new FormControl<boolean | null | undefined>(undefined),
			oauth: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** InstitutionsGetResponse defines the response schema for `/institutions/get` */
	export interface InstitutionsGetResponse {

		/**
		 * A list of Plaid institutions
		 * Required
		 */
		institutions: Array<Institution>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The total number of institutions available via this endpoint
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total: number;
	}

	/** InstitutionsGetResponse defines the response schema for `/institutions/get` */
	export interface InstitutionsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The total number of institutions available via this endpoint
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total: FormControl<number | null | undefined>,
	}
	export function CreateInstitutionsGetResponseFormGroup() {
		return new FormGroup<InstitutionsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An account filter to apply to institutions search requests */
	export interface InstitutionsSearchAccountFilter {
		credit?: Array<AccountSubtype>;
		depository?: Array<AccountSubtype>;
		investment?: Array<AccountSubtype>;
		loan?: Array<AccountSubtype>;
	}

	/** An account filter to apply to institutions search requests */
	export interface InstitutionsSearchAccountFilterFormProperties {
	}
	export function CreateInstitutionsSearchAccountFilterFormGroup() {
		return new FormGroup<InstitutionsSearchAccountFilterFormProperties>({
		});

	}


	/** Additional options that will be used to filter institutions by various Payment Initiation configurations. */
	export interface InstitutionsSearchPaymentInitiationOptions {

		/** A unique ID identifying the payment consent */
		consent_id?: string | null;

		/** A unique ID identifying the payment */
		payment_id?: string | null;
	}

	/** Additional options that will be used to filter institutions by various Payment Initiation configurations. */
	export interface InstitutionsSearchPaymentInitiationOptionsFormProperties {

		/** A unique ID identifying the payment consent */
		consent_id: FormControl<string | null | undefined>,

		/** A unique ID identifying the payment */
		payment_id: FormControl<string | null | undefined>,
	}
	export function CreateInstitutionsSearchPaymentInitiationOptionsFormGroup() {
		return new FormGroup<InstitutionsSearchPaymentInitiationOptionsFormProperties>({
			consent_id: new FormControl<string | null | undefined>(undefined),
			payment_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** InstitutionsSearchRequest defines the request schema for `/institutions/search` */
	export interface InstitutionsSearchRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.
		 * Required
		 */
		country_codes: Array<CountryCode>;

		/** An optional object to filter `/institutions/search` results. */
		options?: InstitutionsSearchRequestOptions;

		/**
		 * Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array.
		 * Required
		 * Minimum items: 1
		 */
		products: Array<Products>;

		/**
		 * The search query. Institutions with names matching the query are returned
		 * Required
		 * Min length: 1
		 */
		query: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** InstitutionsSearchRequest defines the request schema for `/institutions/search` */
	export interface InstitutionsSearchRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The search query. Institutions with names matching the query are returned
		 * Required
		 * Min length: 1
		 */
		query: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateInstitutionsSearchRequestFormGroup() {
		return new FormGroup<InstitutionsSearchRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			query: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/institutions/search` results. */
	export interface InstitutionsSearchRequestOptions {

		/** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
		include_auth_metadata?: boolean | null;

		/** When true, return the institution's homepage URL, logo and primary brand color. */
		include_optional_metadata?: boolean | null;

		/** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
		include_payment_initiation_metadata?: boolean | null;

		/** Limit results to institutions with or without mandatory OAuth login flows. Note that institutions will only have `oauth` set to `true` if *all* Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth may have the `oauth` attribute set to `false` even if they support OAuth. */
		oauth?: boolean | null;

		/** Additional options that will be used to filter institutions by various Payment Initiation configurations. */
		payment_initiation?: InstitutionsSearchPaymentInitiationOptions;
	}

	/** An optional object to filter `/institutions/search` results. */
	export interface InstitutionsSearchRequestOptionsFormProperties {

		/** When `true`, returns metadata related to the Auth product indicating which auth methods are supported. */
		include_auth_metadata: FormControl<boolean | null | undefined>,

		/** When true, return the institution's homepage URL, logo and primary brand color. */
		include_optional_metadata: FormControl<boolean | null | undefined>,

		/** When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported. */
		include_payment_initiation_metadata: FormControl<boolean | null | undefined>,

		/** Limit results to institutions with or without mandatory OAuth login flows. Note that institutions will only have `oauth` set to `true` if *all* Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth may have the `oauth` attribute set to `false` even if they support OAuth. */
		oauth: FormControl<boolean | null | undefined>,
	}
	export function CreateInstitutionsSearchRequestOptionsFormGroup() {
		return new FormGroup<InstitutionsSearchRequestOptionsFormProperties>({
			include_auth_metadata: new FormControl<boolean | null | undefined>(undefined),
			include_optional_metadata: new FormControl<boolean | null | undefined>(undefined),
			include_payment_initiation_metadata: new FormControl<boolean | null | undefined>(undefined),
			oauth: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** InstitutionsSearchResponse defines the response schema for `/institutions/search` */
	export interface InstitutionsSearchResponse {

		/**
		 * An array of institutions matching the search criteria
		 * Required
		 */
		institutions: Array<Institution>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** InstitutionsSearchResponse defines the response schema for `/institutions/search` */
	export interface InstitutionsSearchResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateInstitutionsSearchResponseFormGroup() {
		return new FormGroup<InstitutionsSearchResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`. */
	export interface InvestmentAccountSubtypeStandalone {

		/**
		 * Tax-advantaged college savings and prepaid tuition 529 plans (US)
		 * Required
		 */
		'529': string;

		/**
		 * Employer-sponsored money-purchase 401(a) retirement plan (US)
		 * Required
		 */
		'401a': string;

		/**
		 * Standard 401(k) retirement account (US)
		 * Required
		 */
		'401k': string;

		/**
		 * 403(b) retirement savings account for non-profits and schools (US)
		 * Required
		 */
		'403B': string;

		/**
		 * Tax-advantaged deferred-compensation 457(b) retirement plan for governments and non-profits (US)
		 * Required
		 */
		'457b': string;

		/**
		 * Standard brokerage account
		 * Required
		 */
		brokerage: string;

		/**
		 * Individual Savings Account (ISA) that pays interest tax-free (UK)
		 * Required
		 */
		'cash isa': string;

		/**
		 * Standard cryptocurrency exchange account
		 * Required
		 */
		'crypto exchange': string;

		/**
		 * Tax-advantaged Coverdell Education Savings Account (ESA) (US)
		 * Required
		 */
		'education savings account': string;

		/**
		 * Fixed annuity
		 * Required
		 */
		'fixed annuity': string;

		/**
		 * Guaranteed Investment Certificate (Canada)
		 * Required
		 */
		gic: string;

		/**
		 * Tax-advantaged Health Reimbursement Arrangement (HRA) benefit plan (US)
		 * Required
		 */
		'health reimbursement arrangement': string;

		/**
		 * Non-cash tax-advantaged medical Health Savings Account (HSA) (US)
		 * Required
		 */
		hsa: string;

		/**
		 * Traditional Individual Retirement Account (IRA) (US)
		 * Required
		 */
		ira: string;

		/**
		 * Non-cash Individual Savings Account (ISA) (UK)
		 * Required
		 */
		isa: string;

		/**
		 * Keogh self-employed retirement plan (US)
		 * Required
		 */
		keogh: string;

		/**
		 * Life Income Fund (LIF) retirement account (Canada)
		 * Required
		 */
		lif: string;

		/**
		 * Life insurance account
		 * Required
		 */
		'life insurance': string;

		/**
		 * Locked-in Retirement Account (LIRA) (Canada)
		 * Required
		 */
		lira: string;

		/**
		 * Locked-in Retirement Income Fund (LRIF) (Canada)
		 * Required
		 */
		lrif: string;

		/**
		 * Locked-in Retirement Savings Plan (Canada)
		 * Required
		 */
		lrsp: string;

		/**
		 * Mutual fund account
		 * Required
		 */
		'mutual fund': string;

		/**
		 * A cryptocurrency wallet where the user controls the private key
		 * Required
		 */
		'non-custodial wallet': string;

		/**
		 * A non-taxable brokerage account that is not covered by a more specific subtype
		 * Required
		 */
		'non-taxable brokerage account': string;

		/**
		 * An account whose type could not be determined
		 * Required
		 */
		other: string;

		/**
		 * An annuity account not covered by other subtypes
		 * Required
		 */
		'other annuity': string;

		/**
		 * An insurance account not covered by other subtypes
		 * Required
		 */
		'other insurance': string;

		/**
		 * Standard pension account
		 * Required
		 */
		pension: string;

		/**
		 * Prescribed Registered Retirement Income Fund (Canada)
		 * Required
		 */
		prif: string;

		/**
		 * Plan that gives employees share of company profits
		 * Required
		 */
		'profit sharing plan': string;

		/**
		 * Qualifying share account
		 * Required
		 */
		qshr: string;

		/**
		 * Registered Disability Savings Plan (RSDP) (Canada)
		 * Required
		 */
		rdsp: string;

		/**
		 * Registered Education Savings Plan (Canada)
		 * Required
		 */
		resp: string;

		/**
		 * Retirement account not covered by other subtypes
		 * Required
		 */
		retirement: string;

		/**
		 * Restricted Life Income Fund (RLIF) (Canada)
		 * Required
		 */
		rlif: string;

		/**
		 * Roth IRA (US)
		 * Required
		 */
		roth: string;

		/**
		 * Employer-sponsored Roth 401(k) plan (US)
		 * Required
		 */
		'roth 401k': string;

		/**
		 * Registered Retirement Income Fund (RRIF) (Canada)
		 * Required
		 */
		rrif: string;

		/**
		 * Registered Retirement Savings Plan (Canadian, similar to US 401(k))
		 * Required
		 */
		rrsp: string;

		/**
		 * Salary Reduction Simplified Employee Pension Plan (SARSEP), discontinued retirement plan (US)
		 * Required
		 */
		sarsep: string;

		/**
		 * Simplified Employee Pension IRA (SEP IRA), retirement plan for small businesses and self-employed (US)
		 * Required
		 */
		'sep ira': string;

		/**
		 * Savings Incentive Match Plan for Employees IRA, retirement plan for small businesses (US)
		 * Required
		 */
		'simple ira': string;

		/**
		 * Self-Invested Personal Pension (SIPP) (UK)
		 * Required
		 */
		sipp: string;

		/**
		 * Standard stock plan account
		 * Required
		 */
		'stock plan': string;

		/**
		 * Tax-Free Savings Account (TFSA), a retirement plan similar to a Roth IRA (Canada)
		 * Required
		 */
		tfsa: string;

		/**
		 * Account representing funds or assets held by a trustee for the benefit of a beneficiary. Includes both revocable and irrevocable trusts.
		 * Required
		 */
		trust: string;

		/**
		 * 'Uniform Gift to Minors Act' (brokerage account for minors, US)
		 * Required
		 */
		ugma: string;

		/**
		 * 'Uniform Transfers to Minors Act' (brokerage account for minors, US)
		 * Required
		 */
		utma: string;

		/**
		 * Tax-deferred capital accumulation annuity contract
		 * Required
		 */
		'variable annuity': string;
	}

	/** An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`. */
	export interface InvestmentAccountSubtypeStandaloneFormProperties {

		/**
		 * Tax-advantaged college savings and prepaid tuition 529 plans (US)
		 * Required
		 */
		'529': FormControl<string | null | undefined>,

		/**
		 * Employer-sponsored money-purchase 401(a) retirement plan (US)
		 * Required
		 */
		'401a': FormControl<string | null | undefined>,

		/**
		 * Standard 401(k) retirement account (US)
		 * Required
		 */
		'401k': FormControl<string | null | undefined>,

		/**
		 * 403(b) retirement savings account for non-profits and schools (US)
		 * Required
		 */
		'403B': FormControl<string | null | undefined>,

		/**
		 * Tax-advantaged deferred-compensation 457(b) retirement plan for governments and non-profits (US)
		 * Required
		 */
		'457b': FormControl<string | null | undefined>,

		/**
		 * Standard brokerage account
		 * Required
		 */
		brokerage: FormControl<string | null | undefined>,

		/**
		 * Individual Savings Account (ISA) that pays interest tax-free (UK)
		 * Required
		 */
		'cash isa': FormControl<string | null | undefined>,

		/**
		 * Standard cryptocurrency exchange account
		 * Required
		 */
		'crypto exchange': FormControl<string | null | undefined>,

		/**
		 * Tax-advantaged Coverdell Education Savings Account (ESA) (US)
		 * Required
		 */
		'education savings account': FormControl<string | null | undefined>,

		/**
		 * Fixed annuity
		 * Required
		 */
		'fixed annuity': FormControl<string | null | undefined>,

		/**
		 * Guaranteed Investment Certificate (Canada)
		 * Required
		 */
		gic: FormControl<string | null | undefined>,

		/**
		 * Tax-advantaged Health Reimbursement Arrangement (HRA) benefit plan (US)
		 * Required
		 */
		'health reimbursement arrangement': FormControl<string | null | undefined>,

		/**
		 * Non-cash tax-advantaged medical Health Savings Account (HSA) (US)
		 * Required
		 */
		hsa: FormControl<string | null | undefined>,

		/**
		 * Traditional Individual Retirement Account (IRA) (US)
		 * Required
		 */
		ira: FormControl<string | null | undefined>,

		/**
		 * Non-cash Individual Savings Account (ISA) (UK)
		 * Required
		 */
		isa: FormControl<string | null | undefined>,

		/**
		 * Keogh self-employed retirement plan (US)
		 * Required
		 */
		keogh: FormControl<string | null | undefined>,

		/**
		 * Life Income Fund (LIF) retirement account (Canada)
		 * Required
		 */
		lif: FormControl<string | null | undefined>,

		/**
		 * Life insurance account
		 * Required
		 */
		'life insurance': FormControl<string | null | undefined>,

		/**
		 * Locked-in Retirement Account (LIRA) (Canada)
		 * Required
		 */
		lira: FormControl<string | null | undefined>,

		/**
		 * Locked-in Retirement Income Fund (LRIF) (Canada)
		 * Required
		 */
		lrif: FormControl<string | null | undefined>,

		/**
		 * Locked-in Retirement Savings Plan (Canada)
		 * Required
		 */
		lrsp: FormControl<string | null | undefined>,

		/**
		 * Mutual fund account
		 * Required
		 */
		'mutual fund': FormControl<string | null | undefined>,

		/**
		 * A cryptocurrency wallet where the user controls the private key
		 * Required
		 */
		'non-custodial wallet': FormControl<string | null | undefined>,

		/**
		 * A non-taxable brokerage account that is not covered by a more specific subtype
		 * Required
		 */
		'non-taxable brokerage account': FormControl<string | null | undefined>,

		/**
		 * An account whose type could not be determined
		 * Required
		 */
		other: FormControl<string | null | undefined>,

		/**
		 * An annuity account not covered by other subtypes
		 * Required
		 */
		'other annuity': FormControl<string | null | undefined>,

		/**
		 * An insurance account not covered by other subtypes
		 * Required
		 */
		'other insurance': FormControl<string | null | undefined>,

		/**
		 * Standard pension account
		 * Required
		 */
		pension: FormControl<string | null | undefined>,

		/**
		 * Prescribed Registered Retirement Income Fund (Canada)
		 * Required
		 */
		prif: FormControl<string | null | undefined>,

		/**
		 * Plan that gives employees share of company profits
		 * Required
		 */
		'profit sharing plan': FormControl<string | null | undefined>,

		/**
		 * Qualifying share account
		 * Required
		 */
		qshr: FormControl<string | null | undefined>,

		/**
		 * Registered Disability Savings Plan (RSDP) (Canada)
		 * Required
		 */
		rdsp: FormControl<string | null | undefined>,

		/**
		 * Registered Education Savings Plan (Canada)
		 * Required
		 */
		resp: FormControl<string | null | undefined>,

		/**
		 * Retirement account not covered by other subtypes
		 * Required
		 */
		retirement: FormControl<string | null | undefined>,

		/**
		 * Restricted Life Income Fund (RLIF) (Canada)
		 * Required
		 */
		rlif: FormControl<string | null | undefined>,

		/**
		 * Roth IRA (US)
		 * Required
		 */
		roth: FormControl<string | null | undefined>,

		/**
		 * Employer-sponsored Roth 401(k) plan (US)
		 * Required
		 */
		'roth 401k': FormControl<string | null | undefined>,

		/**
		 * Registered Retirement Income Fund (RRIF) (Canada)
		 * Required
		 */
		rrif: FormControl<string | null | undefined>,

		/**
		 * Registered Retirement Savings Plan (Canadian, similar to US 401(k))
		 * Required
		 */
		rrsp: FormControl<string | null | undefined>,

		/**
		 * Salary Reduction Simplified Employee Pension Plan (SARSEP), discontinued retirement plan (US)
		 * Required
		 */
		sarsep: FormControl<string | null | undefined>,

		/**
		 * Simplified Employee Pension IRA (SEP IRA), retirement plan for small businesses and self-employed (US)
		 * Required
		 */
		'sep ira': FormControl<string | null | undefined>,

		/**
		 * Savings Incentive Match Plan for Employees IRA, retirement plan for small businesses (US)
		 * Required
		 */
		'simple ira': FormControl<string | null | undefined>,

		/**
		 * Self-Invested Personal Pension (SIPP) (UK)
		 * Required
		 */
		sipp: FormControl<string | null | undefined>,

		/**
		 * Standard stock plan account
		 * Required
		 */
		'stock plan': FormControl<string | null | undefined>,

		/**
		 * Tax-Free Savings Account (TFSA), a retirement plan similar to a Roth IRA (Canada)
		 * Required
		 */
		tfsa: FormControl<string | null | undefined>,

		/**
		 * Account representing funds or assets held by a trustee for the benefit of a beneficiary. Includes both revocable and irrevocable trusts.
		 * Required
		 */
		trust: FormControl<string | null | undefined>,

		/**
		 * 'Uniform Gift to Minors Act' (brokerage account for minors, US)
		 * Required
		 */
		ugma: FormControl<string | null | undefined>,

		/**
		 * 'Uniform Transfers to Minors Act' (brokerage account for minors, US)
		 * Required
		 */
		utma: FormControl<string | null | undefined>,

		/**
		 * Tax-deferred capital accumulation annuity contract
		 * Required
		 */
		'variable annuity': FormControl<string | null | undefined>,
	}
	export function CreateInvestmentAccountSubtypeStandaloneFormGroup() {
		return new FormGroup<InvestmentAccountSubtypeStandaloneFormProperties>({
			'529': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'401a': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'401k': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'403B': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'457b': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			brokerage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'cash isa': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'crypto exchange': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'education savings account': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'fixed annuity': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			gic: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'health reimbursement arrangement': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			hsa: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ira: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			isa: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			keogh: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			lif: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'life insurance': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			lira: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			lrif: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			lrsp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'mutual fund': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'non-custodial wallet': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'non-taxable brokerage account': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			other: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'other annuity': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'other insurance': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pension: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			prif: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'profit sharing plan': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			qshr: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rdsp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			retirement: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rlif: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			roth: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'roth 401k': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rrif: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rrsp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sarsep: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'sep ira': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'simple ira': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sipp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'stock plan': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tfsa: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trust: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ugma: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			utma: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'variable annuity': new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An optional object to filter `/investments/holdings/get` results. If provided, must not be `null`. */
	export interface InvestmentHoldingsGetRequestOptions {

		/** An array of `account_id`s to retrieve for the Item. An error will be returned if a provided `account_id` is not associated with the Item. */
		account_ids?: Array<string>;
	}

	/** An optional object to filter `/investments/holdings/get` results. If provided, must not be `null`. */
	export interface InvestmentHoldingsGetRequestOptionsFormProperties {
	}
	export function CreateInvestmentHoldingsGetRequestOptionsFormGroup() {
		return new FormGroup<InvestmentHoldingsGetRequestOptionsFormProperties>({
		});

	}


	/** A transaction within an investment account. */
	export interface InvestmentTransaction {

		/**
		 * The `account_id` of the account against which this transaction posted.
		 * Required
		 */
		account_id: string;

		/**
		 * The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
		 * Required
		 * Type: double
		 */
		amount: number;

		/** A legacy field formerly used internally by Plaid to identify certain canceled transactions. */
		cancel_transaction_id?: string | null;

		/**
		 * The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
		 * Required
		 * Type: DateOnly
		 */
		date: Date;

		/**
		 * The combined value of all fees applied to this transaction
		 * Required
		 * Type: double
		 */
		fees: number;

		/**
		 * The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
		 * Required
		 */
		investment_transaction_id: string;

		/**
		 * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The institutionâ€™s description of the transaction.
		 * Required
		 */
		name: string;

		/**
		 * The price of the security at which this transaction occurred.
		 * Required
		 * Type: double
		 */
		price: number;

		/**
		 * The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
		 * Required
		 * Type: double
		 */
		quantity: number;

		/**
		 * The `security_id` to which this transaction is related.
		 * Required
		 */
		security_id: string;

		/**
		 * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
		 * Required
		 */
		subtype: InvestmentTransactionSubtype;

		/**
		 * Value is one of the following:
		 * `buy`: Buying an investment
		 * `sell`: Selling an investment
		 * `cancel`: A cancellation of a pending transaction
		 * `cash`: Activity that modifies a cash position
		 * `fee`: A fee on the account
		 * `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
		 * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
		 * Required
		 */
		type: InvestmentTransactionType;

		/**
		 * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;
	}

	/** A transaction within an investment account. */
	export interface InvestmentTransactionFormProperties {

		/**
		 * The `account_id` of the account against which this transaction posted.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** A legacy field formerly used internally by Plaid to identify certain canceled transactions. */
		cancel_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
		 * Required
		 * Type: DateOnly
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * The combined value of all fees applied to this transaction
		 * Required
		 * Type: double
		 */
		fees: FormControl<number | null | undefined>,

		/**
		 * The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
		 * Required
		 */
		investment_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The institutionâ€™s description of the transaction.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The price of the security at which this transaction occurred.
		 * Required
		 * Type: double
		 */
		price: FormControl<number | null | undefined>,

		/**
		 * The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
		 * Required
		 * Type: double
		 */
		quantity: FormControl<number | null | undefined>,

		/**
		 * The `security_id` to which this transaction is related.
		 * Required
		 */
		security_id: FormControl<string | null | undefined>,

		/**
		 * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
		 * Required
		 */
		subtype: FormControl<InvestmentTransactionSubtype | null | undefined>,

		/**
		 * Value is one of the following:
		 * `buy`: Buying an investment
		 * `sell`: Selling an investment
		 * `cancel`: A cancellation of a pending transaction
		 * `cash`: Activity that modifies a cash position
		 * `fee`: A fee on the account
		 * `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
		 * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
		 * Required
		 */
		type: FormControl<InvestmentTransactionType | null | undefined>,

		/**
		 * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateInvestmentTransactionFormGroup() {
		return new FormGroup<InvestmentTransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			cancel_transaction_id: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			fees: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			investment_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			security_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			subtype: new FormControl<InvestmentTransactionSubtype | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<InvestmentTransactionType | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum InvestmentTransactionSubtype { 'account fee' = 'account fee', adjustment = 'adjustment', assignment = 'assignment', buy = 'buy', 'buy to cover' = 'buy to cover', contribution = 'contribution', deposit = 'deposit', distribution = 'distribution', dividend = 'dividend', 'dividend reinvestment' = 'dividend reinvestment', exercise = 'exercise', expire = 'expire', 'fund fee' = 'fund fee', interest = 'interest', 'interest receivable' = 'interest receivable', 'interest reinvestment' = 'interest reinvestment', 'legal fee' = 'legal fee', 'loan payment' = 'loan payment', 'long-term capital gain' = 'long-term capital gain', 'long-term capital gain reinvestment' = 'long-term capital gain reinvestment', 'management fee' = 'management fee', 'margin expense' = 'margin expense', merger = 'merger', 'miscellaneous fee' = 'miscellaneous fee', 'non-qualified dividend' = 'non-qualified dividend', 'non-resident tax' = 'non-resident tax', 'pending credit' = 'pending credit', 'pending debit' = 'pending debit', 'qualified dividend' = 'qualified dividend', rebalance = 'rebalance', 'return of principal' = 'return of principal', request = 'request', sell = 'sell', 'sell short' = 'sell short', send = 'send', 'short-term capital gain' = 'short-term capital gain', 'short-term capital gain reinvestment' = 'short-term capital gain reinvestment', 'spin off' = 'spin off', split = 'split', 'stock distribution' = 'stock distribution', tax = 'tax', 'tax withheld' = 'tax withheld', trade = 'trade', transfer = 'transfer', 'transfer fee' = 'transfer fee', 'trust fee' = 'trust fee', 'unqualified gain' = 'unqualified gain', withdrawal = 'withdrawal' }

	export enum InvestmentTransactionType { buy = 'buy', sell = 'sell', cancel = 'cancel', cash = 'cash', fee = 'fee', transfer = 'transfer' }


	/** Fired when new transactions have been detected on an investment account. */
	export interface InvestmentsDefaultUpdateWebhook {

		/**
		 * The number of canceled transactions reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		canceled_investments_transactions: number;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * The number of new transactions reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		new_investments_transactions: number;

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `INVESTMENTS_TRANSACTIONS`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when new transactions have been detected on an investment account. */
	export interface InvestmentsDefaultUpdateWebhookFormProperties {

		/**
		 * The number of canceled transactions reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		canceled_investments_transactions: FormControl<number | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The number of new transactions reported since the last time this webhook was fired.
		 * Required
		 * Type: double
		 */
		new_investments_transactions: FormControl<number | null | undefined>,

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `INVESTMENTS_TRANSACTIONS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateInvestmentsDefaultUpdateWebhookFormGroup() {
		return new FormGroup<InvestmentsDefaultUpdateWebhookFormProperties>({
			canceled_investments_transactions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			new_investments_transactions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** InvestmentsHoldingsGetRequest defines the request schema for `/investments/holdings/get` */
	export interface InvestmentsHoldingsGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter `/investments/holdings/get` results. If provided, must not be `null`. */
		options?: InvestmentHoldingsGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** InvestmentsHoldingsGetRequest defines the request schema for `/investments/holdings/get` */
	export interface InvestmentsHoldingsGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateInvestmentsHoldingsGetRequestFormGroup() {
		return new FormGroup<InvestmentsHoldingsGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** InvestmentsHoldingsGetResponse defines the response schema for `/investments/holdings/get` */
	export interface InvestmentsHoldingsGetResponse {

		/**
		 * The accounts associated with the Item
		 * Required
		 */
		accounts: Array<AccountBase>;

		/**
		 * The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field.
		 * Required
		 */
		holdings: Array<Holding>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Objects describing the securities held in the accounts associated with the Item.
		 * Required
		 */
		securities: Array<Security>;
	}

	/** InvestmentsHoldingsGetResponse defines the response schema for `/investments/holdings/get` */
	export interface InvestmentsHoldingsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateInvestmentsHoldingsGetResponseFormGroup() {
		return new FormGroup<InvestmentsHoldingsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Contains details about a security */
	export interface Security {

		/**
		 * Price of the security at the close of the previous trading session. Null for non-public securities.
		 * If the security is a foreign currency this field will be updated daily and will be priced in USD.
		 * If the security is a cryptocurrency, this field will be updated multiple times a day. As crypto prices can fluctuate quickly and data may become stale sooner than other asset classes, refer to `update_datetime` with the time when the price was last updated.
		 * Required
		 * Type: double
		 */
		close_price: number;

		/**
		 * Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
		 * Required
		 * Type: DateOnly
		 */
		close_price_as_of: Date;

		/**
		 * 9-character CUSIP, an identifier assigned to North American securities. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
		 * Required
		 */
		cusip: string;

		/**
		 * If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.
		 * Required
		 */
		institution_id: string;

		/**
		 * An identifier given to the security by the institution
		 * Required
		 */
		institution_security_id: string;

		/**
		 * Indicates that a security is a highly liquid asset and can be treated like cash.
		 * Required
		 */
		is_cash_equivalent: boolean;

		/**
		 * 12-character ISIN, a globally unique securities identifier. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
		 * Required
		 */
		isin: string;

		/**
		 * The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * A descriptive name for the security, suitable for display.
		 * Required
		 */
		name: string;

		/**
		 * In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
		 * Required
		 */
		proxy_security_id: string;

		/**
		 * A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
		 * Required
		 */
		security_id: string;

		/**
		 * 7-character SEDOL, an identifier assigned to securities in the UK.
		 * Required
		 */
		sedol: string;

		/**
		 * The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.
		 * Required
		 */
		ticker_symbol: string;

		/**
		 * The security type of the holding. Valid security types are:
		 * `cash`: Cash, currency, and money market funds
		 * `cryptocurrency`: Digital or virtual currencies
		 * `derivative`: Options, warrants, and other derivative instruments
		 * `equity`: Domestic and foreign equities
		 * `etf`: Multi-asset exchange-traded investment funds
		 * `fixed income`: Bonds and certificates of deposit (CDs)
		 * `loan`: Loans and loan receivables
		 * `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors
		 * `other`: Unknown or other investment types
		 * Required
		 */
		type: string;

		/**
		 * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;

		/** Date and time at which `close_price` is accurate, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Always `null` if `close_price` is `null`. */
		update_datetime?: Date | null;
	}

	/** Contains details about a security */
	export interface SecurityFormProperties {

		/**
		 * Price of the security at the close of the previous trading session. Null for non-public securities.
		 * If the security is a foreign currency this field will be updated daily and will be priced in USD.
		 * If the security is a cryptocurrency, this field will be updated multiple times a day. As crypto prices can fluctuate quickly and data may become stale sooner than other asset classes, refer to `update_datetime` with the time when the price was last updated.
		 * Required
		 * Type: double
		 */
		close_price: FormControl<number | null | undefined>,

		/**
		 * Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
		 * Required
		 * Type: DateOnly
		 */
		close_price_as_of: FormControl<Date | null | undefined>,

		/**
		 * 9-character CUSIP, an identifier assigned to North American securities. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
		 * Required
		 */
		cusip: FormControl<string | null | undefined>,

		/**
		 * If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/**
		 * An identifier given to the security by the institution
		 * Required
		 */
		institution_security_id: FormControl<string | null | undefined>,

		/**
		 * Indicates that a security is a highly liquid asset and can be treated like cash.
		 * Required
		 */
		is_cash_equivalent: FormControl<boolean | null | undefined>,

		/**
		 * 12-character ISIN, a globally unique securities identifier. Please note that Plaid's customers must hold a license directly from CUSIP Global Services to receive CUSIP & ISIN data. This field will be null by default for new customers. For existing customers, this field will be null by default starting on Sept 15, 2023. If you would like access to this field, please contact your Plaid Account Manager or reach out to investments-vendors@plaid.com.
		 * Required
		 */
		isin: FormControl<string | null | undefined>,

		/**
		 * The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * A descriptive name for the security, suitable for display.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
		 * Required
		 */
		proxy_security_id: FormControl<string | null | undefined>,

		/**
		 * A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
		 * Required
		 */
		security_id: FormControl<string | null | undefined>,

		/**
		 * 7-character SEDOL, an identifier assigned to securities in the UK.
		 * Required
		 */
		sedol: FormControl<string | null | undefined>,

		/**
		 * The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.
		 * Required
		 */
		ticker_symbol: FormControl<string | null | undefined>,

		/**
		 * The security type of the holding. Valid security types are:
		 * `cash`: Cash, currency, and money market funds
		 * `cryptocurrency`: Digital or virtual currencies
		 * `derivative`: Options, warrants, and other derivative instruments
		 * `equity`: Domestic and foreign equities
		 * `etf`: Multi-asset exchange-traded investment funds
		 * `fixed income`: Bonds and certificates of deposit (CDs)
		 * `loan`: Loans and loan receivables
		 * `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors
		 * `other`: Unknown or other investment types
		 * Required
		 */
		type: FormControl<string | null | undefined>,

		/**
		 * The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/** Date and time at which `close_price` is accurate, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Always `null` if `close_price` is `null`. */
		update_datetime: FormControl<Date | null | undefined>,
	}
	export function CreateSecurityFormGroup() {
		return new FormGroup<SecurityFormProperties>({
			close_price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			close_price_as_of: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			cusip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_security_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_cash_equivalent: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			isin: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			proxy_security_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			security_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sedol: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ticker_symbol: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			update_datetime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** InvestmentsTransactionsGetRequest defines the request schema for `/investments/transactions/get` */
	export interface InvestmentsTransactionsGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		end_date: Date;

		/** An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`. */
		options?: InvestmentsTransactionsGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		start_date: Date;
	}

	/** InvestmentsTransactionsGetRequest defines the request schema for `/investments/transactions/get` */
	export interface InvestmentsTransactionsGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateInvestmentsTransactionsGetRequestFormGroup() {
		return new FormGroup<InvestmentsTransactionsGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`. */
	export interface InvestmentsTransactionsGetRequestOptions {

		/** An array of `account_ids` to retrieve for the Item. */
		account_ids?: Array<string>;

		/**
		 * The number of transactions to fetch.
		 * Minimum: 1
		 * Maximum: 500
		 */
		count?: number | null;

		/**
		 * The number of transactions to skip when fetching transaction history
		 * Minimum: 0
		 */
		offset?: number | null;
	}

	/** An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`. */
	export interface InvestmentsTransactionsGetRequestOptionsFormProperties {

		/**
		 * The number of transactions to fetch.
		 * Minimum: 1
		 * Maximum: 500
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * The number of transactions to skip when fetching transaction history
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,
	}
	export function CreateInvestmentsTransactionsGetRequestOptionsFormGroup() {
		return new FormGroup<InvestmentsTransactionsGetRequestOptionsFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(500)]),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
		});

	}


	/** InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get` */
	export interface InvestmentsTransactionsGetResponse {

		/**
		 * The accounts for which transaction history is being fetched.
		 * Required
		 */
		accounts: Array<AccountBase>;

		/**
		 * The transactions being fetched
		 * Required
		 */
		investment_transactions: Array<InvestmentTransaction>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * All securities for which there is a corresponding transaction being fetched.
		 * Required
		 */
		securities: Array<Security>;

		/**
		 * The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total_investment_transactions: number;
	}

	/** InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get` */
	export interface InvestmentsTransactionsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total_investment_transactions: FormControl<number | null | undefined>,
	}
	export function CreateInvestmentsTransactionsGetResponseFormGroup() {
		return new FormGroup<InvestmentsTransactionsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total_investment_transactions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specify the list of investments transactions on the account. */
	export interface Investments_TransactionsOverride {

		/**
		 * Either a valid `iso_currency_code` or `unofficial_currency_code`
		 * Required
		 */
		currency: string;

		/**
		 * Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
		 * Required
		 * Type: DateOnly
		 */
		date: Date;

		/**
		 * The combined value of all fees applied to this transaction.
		 * Type: double
		 */
		fees?: number | null;

		/**
		 * The institution's description of the transaction.
		 * Required
		 */
		name: string;

		/**
		 * The price of the security at which this transaction occurred.
		 * Required
		 * Type: double
		 */
		price: number;

		/**
		 * The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
		 * Required
		 * Type: double
		 */
		quantity: number;

		/** Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required. */
		security?: SecurityOverride;

		/**
		 * The type of the investment transaction. Possible values are:
		 * `buy`: Buying an investment
		 * `sell`: Selling an investment
		 * `cash`: Activity that modifies a cash position
		 * `fee`: A fee on the account
		 * `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
		 * Required
		 */
		type: string;
	}

	/** Specify the list of investments transactions on the account. */
	export interface Investments_TransactionsOverrideFormProperties {

		/**
		 * Either a valid `iso_currency_code` or `unofficial_currency_code`
		 * Required
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
		 * Required
		 * Type: DateOnly
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * The combined value of all fees applied to this transaction.
		 * Type: double
		 */
		fees: FormControl<number | null | undefined>,

		/**
		 * The institution's description of the transaction.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The price of the security at which this transaction occurred.
		 * Required
		 * Type: double
		 */
		price: FormControl<number | null | undefined>,

		/**
		 * The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
		 * Required
		 * Type: double
		 */
		quantity: FormControl<number | null | undefined>,

		/**
		 * The type of the investment transaction. Possible values are:
		 * `buy`: Buying an investment
		 * `sell`: Selling an investment
		 * `cash`: Activity that modifies a cash position
		 * `fee`: A fee on the account
		 * `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateInvestments_TransactionsOverrideFormGroup() {
		return new FormGroup<Investments_TransactionsOverrideFormProperties>({
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			fees: new FormControl<number | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			price: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			quantity: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A binary match indicator specifying whether the country that issued the provided document matches the country that the user separately provided to Plaid.
	 * Note: You can configure whether a `no_match` on `issuing_country` fails the `documentary_verification` by editing your Plaid Template.
	 */
	export enum IssuingCountry { match = 'match', no_match = 'no_match' }


	/** ItemAccessTokenInvalidateRequest defines the request schema for `/item/access_token/invalidate` */
	export interface ItemAccessTokenInvalidateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ItemAccessTokenInvalidateRequest defines the request schema for `/item/access_token/invalidate` */
	export interface ItemAccessTokenInvalidateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemAccessTokenInvalidateRequestFormGroup() {
		return new FormGroup<ItemAccessTokenInvalidateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ItemAccessTokenInvalidateResponse defines the response schema for `/item/access_token/invalidate` */
	export interface ItemAccessTokenInvalidateResponse {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		new_access_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ItemAccessTokenInvalidateResponse defines the response schema for `/item/access_token/invalidate` */
	export interface ItemAccessTokenInvalidateResponseFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		new_access_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemAccessTokenInvalidateResponseFormGroup() {
		return new FormGroup<ItemAccessTokenInvalidateResponseFormProperties>({
			new_access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request to list a historical log of user consent events. */
	export interface ItemActivityListRequest {

		/** The access token associated with the Item data is being requested for. */
		access_token?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Minimum: 1
		 * Maximum: 50
		 */
		count?: number | null;

		/** Cursor used for pagination. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request to list a historical log of user consent events. */
	export interface ItemActivityListRequestFormProperties {

		/** The access token associated with the Item data is being requested for. */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Minimum: 1
		 * Maximum: 50
		 */
		count: FormControl<number | null | undefined>,

		/** Cursor used for pagination. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemActivityListRequestFormGroup() {
		return new FormGroup<ItemActivityListRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(50)]),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes a historical log of user consent events. */
	export interface ItemActivityListResponse {

		/**
		 * A list of activities.
		 * Required
		 */
		activities: Array<Activity>;

		/** Cursor used for pagination. */
		cursor?: string | null;

		/**
		 * An array of objects containing timestamps for the last time each data type was accessed per application.
		 * Required
		 */
		last_data_access_times: Array<LastDataAccessTimes>;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** Describes a historical log of user consent events. */
	export interface ItemActivityListResponseFormProperties {

		/** Cursor used for pagination. */
		cursor: FormControl<string | null | undefined>,

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemActivityListResponseFormGroup() {
		return new FormGroup<ItemActivityListResponseFormProperties>({
			cursor: new FormControl<string | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes the last time each datatype was accessed by an application. */
	export interface LastDataAccessTimes {

		/**
		 * The last time account_balance_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		account_balance_info: Date;

		/**
		 * The last time account_routing_number was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		account_routing_number: Date;

		/**
		 * ID of the application accessing data.
		 * Required
		 */
		application_id: string;

		/**
		 * The last time contact_details was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		contact_details: Date;

		/**
		 * The last time credit_and_loans was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		credit_and_loans: Date;

		/**
		 * The last time investments was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		investments: Date;

		/**
		 * The last time payroll_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		payroll_info: Date;

		/**
		 * The last time transaction_risk_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		transaction_risk_info: Date;

		/**
		 * The last time transactions was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		transactions: Date;
	}

	/** Describes the last time each datatype was accessed by an application. */
	export interface LastDataAccessTimesFormProperties {

		/**
		 * The last time account_balance_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		account_balance_info: FormControl<Date | null | undefined>,

		/**
		 * The last time account_routing_number was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		account_routing_number: FormControl<Date | null | undefined>,

		/**
		 * ID of the application accessing data.
		 * Required
		 */
		application_id: FormControl<string | null | undefined>,

		/**
		 * The last time contact_details was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		contact_details: FormControl<Date | null | undefined>,

		/**
		 * The last time credit_and_loans was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		credit_and_loans: FormControl<Date | null | undefined>,

		/**
		 * The last time investments was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		investments: FormControl<Date | null | undefined>,

		/**
		 * The last time payroll_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		payroll_info: FormControl<Date | null | undefined>,

		/**
		 * The last time transaction_risk_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		transaction_risk_info: FormControl<Date | null | undefined>,

		/**
		 * The last time transactions was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
		 * Required
		 */
		transactions: FormControl<Date | null | undefined>,
	}
	export function CreateLastDataAccessTimesFormGroup() {
		return new FormGroup<LastDataAccessTimesFormProperties>({
			account_balance_info: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			account_routing_number: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			application_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contact_details: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			credit_and_loans: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			investments: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payroll_info: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_risk_info: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transactions: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request to list connected applications for a user. */
	export interface ItemApplicationListRequest {

		/** The access token associated with the Item data is being requested for. */
		access_token?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request to list connected applications for a user. */
	export interface ItemApplicationListRequestFormProperties {

		/** The access token associated with the Item data is being requested for. */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemApplicationListRequestFormGroup() {
		return new FormGroup<ItemApplicationListRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes the connected application for a particular end user. */
	export interface ItemApplicationListResponse {

		/**
		 * A list of connected applications.
		 * Required
		 */
		applications: Array<ConnectedApplication>;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** Describes the connected application for a particular end user. */
	export interface ItemApplicationListResponseFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemApplicationListResponseFormGroup() {
		return new FormGroup<ItemApplicationListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** User authentication parameters, for clients making a request without an `access_token`. This is only allowed for select clients and will not be supported in the future. Most clients should call /item/import to obtain an access token before making a request. */
	export interface ItemApplicationListUserAuth {

		/** Account username hashed by FI. */
		fi_username_hash?: string | null;

		/** Account username. */
		user_id?: string | null;
	}

	/** User authentication parameters, for clients making a request without an `access_token`. This is only allowed for select clients and will not be supported in the future. Most clients should call /item/import to obtain an access token before making a request. */
	export interface ItemApplicationListUserAuthFormProperties {

		/** Account username hashed by FI. */
		fi_username_hash: FormControl<string | null | undefined>,

		/** Account username. */
		user_id: FormControl<string | null | undefined>,
	}
	export function CreateItemApplicationListUserAuthFormGroup() {
		return new FormGroup<ItemApplicationListUserAuthFormProperties>({
			fi_username_hash: new FormControl<string | null | undefined>(undefined),
			user_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update` */
	export interface ItemApplicationScopesUpdateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.
		 * Required
		 */
		context: ItemApplicationScopesUpdateRequestContext;

		/**
		 * The scopes object
		 * Required
		 */
		scopes: Scopes;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`. */
		state?: string | null;
	}

	/** ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update` */
	export interface ItemApplicationScopesUpdateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
		 * Required
		 */
		application_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.
		 * Required
		 */
		context: FormControl<ItemApplicationScopesUpdateRequestContext | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`. */
		state: FormControl<string | null | undefined>,
	}
	export function CreateItemApplicationScopesUpdateRequestFormGroup() {
		return new FormGroup<ItemApplicationScopesUpdateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			application_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			context: new FormControl<ItemApplicationScopesUpdateRequestContext | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ItemApplicationScopesUpdateRequestContext { ENROLLMENT = 'ENROLLMENT', PORTAL = 'PORTAL' }


	/** The scopes object */
	export interface Scopes {
		accounts?: Array<AccountAccess>;

		/** Allow access to newly opened accounts as they are opened. If unset, defaults to `true`. */
		new_accounts?: boolean | null;

		/** The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed. */
		product_access?: ProductAccess;
	}

	/** The scopes object */
	export interface ScopesFormProperties {

		/** Allow access to newly opened accounts as they are opened. If unset, defaults to `true`. */
		new_accounts: FormControl<boolean | null | undefined>,
	}
	export function CreateScopesFormGroup() {
		return new FormGroup<ScopesFormProperties>({
			new_accounts: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed. */
	export interface ProductAccess {

		/** Allow access to "accounts_details_transactions". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_details_transactions?: boolean | null;

		/** Allow access to "accounts_routing_number". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_routing_number?: boolean | null;

		/** Allow access to "accounts_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_statements?: boolean | null;

		/** Allow access to "accounts_tax_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_tax_statements?: boolean | null;

		/** Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		auth?: boolean | null;

		/** Allow access to "customers_profiles". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		customers_profiles?: boolean | null;

		/** Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		identity?: boolean | null;

		/** Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		statements?: boolean | null;

		/** Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		transactions?: boolean | null;
	}

	/** The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed. */
	export interface ProductAccessFormProperties {

		/** Allow access to "accounts_details_transactions". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_details_transactions: FormControl<boolean | null | undefined>,

		/** Allow access to "accounts_routing_number". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_routing_number: FormControl<boolean | null | undefined>,

		/** Allow access to "accounts_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_statements: FormControl<boolean | null | undefined>,

		/** Allow access to "accounts_tax_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		accounts_tax_statements: FormControl<boolean | null | undefined>,

		/** Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		auth: FormControl<boolean | null | undefined>,

		/** Allow access to "customers_profiles". Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		customers_profiles: FormControl<boolean | null | undefined>,

		/** Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		identity: FormControl<boolean | null | undefined>,

		/** Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		statements: FormControl<boolean | null | undefined>,

		/** Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`. */
		transactions: FormControl<boolean | null | undefined>,
	}
	export function CreateProductAccessFormGroup() {
		return new FormGroup<ProductAccessFormProperties>({
			accounts_details_transactions: new FormControl<boolean | null | undefined>(undefined),
			accounts_routing_number: new FormControl<boolean | null | undefined>(undefined),
			accounts_statements: new FormControl<boolean | null | undefined>(undefined),
			accounts_tax_statements: new FormControl<boolean | null | undefined>(undefined),
			auth: new FormControl<boolean | null | undefined>(undefined),
			customers_profiles: new FormControl<boolean | null | undefined>(undefined),
			identity: new FormControl<boolean | null | undefined>(undefined),
			statements: new FormControl<boolean | null | undefined>(undefined),
			transactions: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** ItemApplicationScopesUpdateResponse defines the response schema for `/item/application/scopes/update` */
	export interface ItemApplicationScopesUpdateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ItemApplicationScopesUpdateResponse defines the response schema for `/item/application/scopes/update` */
	export interface ItemApplicationScopesUpdateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemApplicationScopesUpdateResponseFormGroup() {
		return new FormGroup<ItemApplicationScopesUpdateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when an error is encountered with an Item. The error can be resolved by having the user go through Linkâ€™s update mode. */
	export interface ItemErrorWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
		 * Required
		 */
		error: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `ERROR`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an error is encountered with an Item. The error can be resolved by having the user go through Linkâ€™s update mode. */
	export interface ItemErrorWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `ERROR`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateItemErrorWebhookFormGroup() {
		return new FormGroup<ItemErrorWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ItemGetRequest defines the request schema for `/item/get` */
	export interface ItemGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ItemGetRequest defines the request schema for `/item/get` */
	export interface ItemGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemGetRequestFormGroup() {
		return new FormGroup<ItemGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ItemGetResponse defines the response schema for `/item/get` and `/item/webhook/update` */
	export interface ItemGetResponse {

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** Information about the last successful and failed transactions update for the Item. */
		status?: ItemStatusNullable;
	}

	/** ItemGetResponse defines the response schema for `/item/get` and `/item/webhook/update` */
	export interface ItemGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemGetResponseFormGroup() {
		return new FormGroup<ItemGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ItemImportRequest defines the request schema for `/item/import` */
	export interface ItemImportRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to configure `/item/import` request. */
		options?: ItemImportRequestOptions;

		/**
		 * Array of product strings
		 * Required
		 * Minimum items: 1
		 */
		products: Array<Products>;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Object of user ID and auth token pair, permitting Plaid to aggregate a userâ€™s accounts
		 * Required
		 */
		user_auth: ItemImportRequestUserAuth;
	}

	/** ItemImportRequest defines the request schema for `/item/import` */
	export interface ItemImportRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemImportRequestFormGroup() {
		return new FormGroup<ItemImportRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to configure `/item/import` request. */
	export interface ItemImportRequestOptions {

		/**
		 * Specifies a webhook URL to associate with an Item. Plaid fires a webhook if credentials fail.
		 */
		webhook?: string | null;
	}

	/** An optional object to configure `/item/import` request. */
	export interface ItemImportRequestOptionsFormProperties {

		/**
		 * Specifies a webhook URL to associate with an Item. Plaid fires a webhook if credentials fail.
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateItemImportRequestOptionsFormGroup() {
		return new FormGroup<ItemImportRequestOptionsFormProperties>({
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Object of user ID and auth token pair, permitting Plaid to aggregate a userâ€™s accounts */
	export interface ItemImportRequestUserAuth {

		/**
		 * Authorization token Plaid will use to aggregate this userâ€™s accounts
		 * Required
		 */
		auth_token: string;

		/**
		 * Opaque user identifier
		 * Required
		 */
		user_id: string;
	}

	/** Object of user ID and auth token pair, permitting Plaid to aggregate a userâ€™s accounts */
	export interface ItemImportRequestUserAuthFormProperties {

		/**
		 * Authorization token Plaid will use to aggregate this userâ€™s accounts
		 * Required
		 */
		auth_token: FormControl<string | null | undefined>,

		/**
		 * Opaque user identifier
		 * Required
		 */
		user_id: FormControl<string | null | undefined>,
	}
	export function CreateItemImportRequestUserAuthFormGroup() {
		return new FormGroup<ItemImportRequestUserAuthFormProperties>({
			auth_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ItemImportResponse defines the response schema for `/item/import` */
	export interface ItemImportResponse {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ItemImportResponse defines the response schema for `/item/import` */
	export interface ItemImportResponseFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemImportResponseFormGroup() {
		return new FormGroup<ItemImportResponseFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when an Item login is repaired and the Item no longer needs to go through update mode. This will occur when the user completed the update mode flow for the Item, either in your application or in another Plaid-connected app. If you have messaging that tells the user to complete the update mode flow (such as in-app banners or out-of-band notifications) you should silence this messaging upon receiving the `LOGIN_REPAIRED` webhook. */
	export interface ItemLoginRepairedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `LOGIN_REPAIRED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an Item login is repaired and the Item no longer needs to go through update mode. This will occur when the user completed the update mode flow for the Item, either in your application or in another Plaid-connected app. If you have messaging that tells the user to complete the update mode flow (such as in-app banners or out-of-band notifications) you should silence this messaging upon receiving the `LOGIN_REPAIRED` webhook. */
	export interface ItemLoginRepairedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `LOGIN_REPAIRED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateItemLoginRepairedWebhookFormGroup() {
		return new FormGroup<ItemLoginRepairedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired once Plaid calculates income from an Item. */
	export interface ItemProductReadyWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `PRODUCT_READY`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `INCOME`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired once Plaid calculates income from an Item. */
	export interface ItemProductReadyWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `PRODUCT_READY`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `INCOME`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateItemProductReadyWebhookFormGroup() {
		return new FormGroup<ItemProductReadyWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ItemPublicTokenCreateRequest defines the request schema for `/item/public_token/create` */
	export interface ItemPublicTokenCreateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ItemPublicTokenCreateRequest defines the request schema for `/item/public_token/create` */
	export interface ItemPublicTokenCreateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemPublicTokenCreateRequestFormGroup() {
		return new FormGroup<ItemPublicTokenCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ItemPublicTokenCreateResponse defines the response schema for `/item/public_token/create` */
	export interface ItemPublicTokenCreateResponse {
		expiration?: Date | null;

		/**
		 * A `public_token` for the particular Item corresponding to the specified `access_token`
		 * Required
		 */
		public_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ItemPublicTokenCreateResponse defines the response schema for `/item/public_token/create` */
	export interface ItemPublicTokenCreateResponseFormProperties {
		expiration: FormControl<Date | null | undefined>,

		/**
		 * A `public_token` for the particular Item corresponding to the specified `access_token`
		 * Required
		 */
		public_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemPublicTokenCreateResponseFormGroup() {
		return new FormGroup<ItemPublicTokenCreateResponseFormProperties>({
			expiration: new FormControl<Date | null | undefined>(undefined),
			public_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ItemPublicTokenExchangeRequest defines the request schema for `/item/public_token/exchange` */
	export interface ItemPublicTokenExchangeRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Your `public_token`, obtained from the Link `onSuccess` callback or `/sandbox/item/public_token/create`.
		 * Required
		 */
		public_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ItemPublicTokenExchangeRequest defines the request schema for `/item/public_token/exchange` */
	export interface ItemPublicTokenExchangeRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Your `public_token`, obtained from the Link `onSuccess` callback or `/sandbox/item/public_token/create`.
		 * Required
		 */
		public_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemPublicTokenExchangeRequestFormGroup() {
		return new FormGroup<ItemPublicTokenExchangeRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			public_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ItemPublicTokenExchangeResponse defines the response schema for `/item/public_token/exchange` */
	export interface ItemPublicTokenExchangeResponse {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * The `item_id` value of the Item associated with the returned `access_token`
		 * Required
		 */
		item_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ItemPublicTokenExchangeResponse defines the response schema for `/item/public_token/exchange` */
	export interface ItemPublicTokenExchangeResponseFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The `item_id` value of the Item associated with the returned `access_token`
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemPublicTokenExchangeResponseFormGroup() {
		return new FormGroup<ItemPublicTokenExchangeResponseFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ItemRemoveRequest defines the request schema for `/item/remove` */
	export interface ItemRemoveRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ItemRemoveRequest defines the request schema for `/item/remove` */
	export interface ItemRemoveRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateItemRemoveRequestFormGroup() {
		return new FormGroup<ItemRemoveRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ItemRemoveResponse defines the response schema for `/item/remove` */
	export interface ItemRemoveResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ItemRemoveResponse defines the response schema for `/item/remove` */
	export interface ItemRemoveResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemRemoveResponseFormGroup() {
		return new FormGroup<ItemRemoveResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object with information about the status of the Item. */
	export interface ItemStatus {

		/** Information about the last successful and failed investments update for the Item. */
		investments?: ItemStatusInvestments;

		/** Information about the last webhook fired for the Item. */
		last_webhook?: ItemStatusLastWebhook;

		/** Information about the last successful and failed transactions update for the Item. */
		transactions?: ItemStatusTransactions;
	}

	/** An object with information about the status of the Item. */
	export interface ItemStatusFormProperties {
	}
	export function CreateItemStatusFormGroup() {
		return new FormGroup<ItemStatusFormProperties>({
		});

	}


	/** Information about the last successful and failed investments update for the Item. */
	export interface ItemStatusInvestments {

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed investments update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update. */
		last_failed_update?: Date | null;

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful investments update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update. */
		last_successful_update?: Date | null;
	}

	/** Information about the last successful and failed investments update for the Item. */
	export interface ItemStatusInvestmentsFormProperties {

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed investments update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update. */
		last_failed_update: FormControl<Date | null | undefined>,

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful investments update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update. */
		last_successful_update: FormControl<Date | null | undefined>,
	}
	export function CreateItemStatusInvestmentsFormGroup() {
		return new FormGroup<ItemStatusInvestmentsFormProperties>({
			last_failed_update: new FormControl<Date | null | undefined>(undefined),
			last_successful_update: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Information about the last webhook fired for the Item. */
	export interface ItemStatusLastWebhook {

		/** The last webhook code sent. */
		code_sent?: string | null;

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of when the webhook was fired.
		 */
		sent_at?: Date | null;
	}

	/** Information about the last webhook fired for the Item. */
	export interface ItemStatusLastWebhookFormProperties {

		/** The last webhook code sent. */
		code_sent: FormControl<string | null | undefined>,

		/**
		 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of when the webhook was fired.
		 */
		sent_at: FormControl<Date | null | undefined>,
	}
	export function CreateItemStatusLastWebhookFormGroup() {
		return new FormGroup<ItemStatusLastWebhookFormProperties>({
			code_sent: new FormControl<string | null | undefined>(undefined),
			sent_at: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Information about the last successful and failed transactions update for the Item. */
	export interface ItemStatusTransactions {

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed transactions update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update. */
		last_failed_update?: Date | null;

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful transactions update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update. */
		last_successful_update?: Date | null;
	}

	/** Information about the last successful and failed transactions update for the Item. */
	export interface ItemStatusTransactionsFormProperties {

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed transactions update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update. */
		last_failed_update: FormControl<Date | null | undefined>,

		/** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful transactions update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update. */
		last_successful_update: FormControl<Date | null | undefined>,
	}
	export function CreateItemStatusTransactionsFormGroup() {
		return new FormGroup<ItemStatusTransactionsFormProperties>({
			last_failed_update: new FormControl<Date | null | undefined>(undefined),
			last_successful_update: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Information about the last successful and failed transactions update for the Item. */
	export interface ItemStatusNullable extends ItemStatus {
	}

	/** Information about the last successful and failed transactions update for the Item. */
	export interface ItemStatusNullableFormProperties extends ItemStatusFormProperties {
	}
	export function CreateItemStatusNullableFormGroup() {
		return new FormGroup<ItemStatusNullableFormProperties>({
		});

	}


	/** ItemWebhookUpdateRequest defines the request schema for `/item/webhook/update` */
	export interface ItemWebhookUpdateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The new webhook URL to associate with the Item. To remove a webhook from an Item, set to `null`. */
		webhook?: string | null;
	}

	/** ItemWebhookUpdateRequest defines the request schema for `/item/webhook/update` */
	export interface ItemWebhookUpdateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The new webhook URL to associate with the Item. To remove a webhook from an Item, set to `null`. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateItemWebhookUpdateRequestFormGroup() {
		return new FormGroup<ItemWebhookUpdateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ItemWebhookUpdateResponse defines the response schema for `/item/webhook/update` */
	export interface ItemWebhookUpdateResponse {

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ItemWebhookUpdateResponse defines the response schema for `/item/webhook/update` */
	export interface ItemWebhookUpdateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateItemWebhookUpdateResponseFormGroup() {
		return new FormGroup<ItemWebhookUpdateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks */
	export interface JWKPublicKey {

		/**
		 * The alg member identifies the cryptographic algorithm family used with the key.
		 * Required
		 */
		alg: string;

		/**
		 * The timestamp when the key was created, in Unix time.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		created_at: number;

		/**
		 * The crv member identifies the cryptographic curve used with the key.
		 * Required
		 */
		crv: string;

		/**
		 * The timestamp when the key expired, in Unix time.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		expired_at: number;

		/**
		 * The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.
		 * Required
		 */
		kid: string;

		/**
		 * The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.
		 * Required
		 */
		kty: string;

		/**
		 * The use (public key use) parameter identifies the intended use of the public key.
		 * Required
		 */
		use: string;

		/**
		 * The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
		 * Required
		 */
		x: string;

		/**
		 * The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
		 * Required
		 */
		y: string;
	}

	/** A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks */
	export interface JWKPublicKeyFormProperties {

		/**
		 * The alg member identifies the cryptographic algorithm family used with the key.
		 * Required
		 */
		alg: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the key was created, in Unix time.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		created_at: FormControl<number | null | undefined>,

		/**
		 * The crv member identifies the cryptographic curve used with the key.
		 * Required
		 */
		crv: FormControl<string | null | undefined>,

		/**
		 * The timestamp when the key expired, in Unix time.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		expired_at: FormControl<number | null | undefined>,

		/**
		 * The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.
		 * Required
		 */
		kid: FormControl<string | null | undefined>,

		/**
		 * The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.
		 * Required
		 */
		kty: FormControl<string | null | undefined>,

		/**
		 * The use (public key use) parameter identifies the intended use of the public key.
		 * Required
		 */
		use: FormControl<string | null | undefined>,

		/**
		 * The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
		 * Required
		 */
		x: FormControl<string | null | undefined>,

		/**
		 * The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
		 * Required
		 */
		y: FormControl<string | null | undefined>,
	}
	export function CreateJWKPublicKeyFormGroup() {
		return new FormGroup<JWKPublicKeyFormProperties>({
			alg: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			crv: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expired_at: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			kid: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			kty: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			use: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			x: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			y: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A JWT Header, used for webhook validation */
	export interface JWTHeader {

		/** Required */
		id: string;
	}

	/** A JWT Header, used for webhook validation */
	export interface JWTHeaderFormProperties {

		/** Required */
		id: FormControl<string | null | undefined>,
	}
	export function CreateJWTHeaderFormGroup() {
		return new FormGroup<JWTHeaderFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * An object with keys of `account_id`'s that are mapped to their respective liabilities fields that changed.
	 * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["past_amount_due"] }`
	 */
	export interface LiabilitiesAccountIdsWithUpdatedLiabilities {
	}

	/**
	 * An object with keys of `account_id`'s that are mapped to their respective liabilities fields that changed.
	 * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["past_amount_due"] }`
	 */
	export interface LiabilitiesAccountIdsWithUpdatedLiabilitiesFormProperties {
	}
	export function CreateLiabilitiesAccountIdsWithUpdatedLiabilitiesFormGroup() {
		return new FormGroup<LiabilitiesAccountIdsWithUpdatedLiabilitiesFormProperties>({
		});

	}


	/** The webhook of type `LIABILITIES` and code `DEFAULT_UPDATE` will be fired when new or updated liabilities have been detected on a liabilities item. */
	export interface LiabilitiesDefaultUpdateWebhook {

		/**
		 * An array of `account_id`'s for accounts that contain new liabilities.'
		 * Required
		 */
		account_ids_with_new_liabilities: Array<string>;

		/**
		 * An object with keys of `account_id`'s that are mapped to their respective liabilities fields that changed.
		 * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["past_amount_due"] }`
		 * Required
		 */
		account_ids_with_updated_liabilities: LiabilitiesAccountIdsWithUpdatedLiabilities;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
		 * Required
		 */
		error: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `LIABILITIES`
		 * Required
		 */
		webhook_type: string;
	}

	/** The webhook of type `LIABILITIES` and code `DEFAULT_UPDATE` will be fired when new or updated liabilities have been detected on a liabilities item. */
	export interface LiabilitiesDefaultUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `DEFAULT_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `LIABILITIES`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateLiabilitiesDefaultUpdateWebhookFormGroup() {
		return new FormGroup<LiabilitiesDefaultUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** LiabilitiesGetRequest defines the request schema for `/liabilities/get` */
	export interface LiabilitiesGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter `/liabilities/get` results. If provided, `options` cannot be null. */
		options?: LiabilitiesGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** LiabilitiesGetRequest defines the request schema for `/liabilities/get` */
	export interface LiabilitiesGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateLiabilitiesGetRequestFormGroup() {
		return new FormGroup<LiabilitiesGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/liabilities/get` results. If provided, `options` cannot be null. */
	export interface LiabilitiesGetRequestOptions {

		/**
		 * A list of accounts to retrieve for the Item.
		 * An error will be returned if a provided `account_id` is not associated with the Item
		 */
		account_ids?: Array<string>;
	}

	/** An optional object to filter `/liabilities/get` results. If provided, `options` cannot be null. */
	export interface LiabilitiesGetRequestOptionsFormProperties {
	}
	export function CreateLiabilitiesGetRequestOptionsFormGroup() {
		return new FormGroup<LiabilitiesGetRequestOptionsFormProperties>({
		});

	}


	/** LiabilitiesGetResponse defines the response schema for `/liabilities/get` */
	export interface LiabilitiesGetResponse {

		/**
		 * An array of accounts associated with the Item
		 * Required
		 */
		accounts: Array<AccountBase>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * An object containing liability accounts
		 * Required
		 */
		liabilities: LiabilitiesObject;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** LiabilitiesGetResponse defines the response schema for `/liabilities/get` */
	export interface LiabilitiesGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateLiabilitiesGetResponseFormGroup() {
		return new FormGroup<LiabilitiesGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing liability accounts */
	export interface LiabilitiesObject {

		/**
		 * The credit accounts returned.
		 * Required
		 */
		credit: Array<CreditCardLiability>;

		/**
		 * The mortgage accounts returned.
		 * Required
		 */
		mortgage: Array<MortgageLiability>;

		/**
		 * The student loan accounts returned.
		 * Required
		 */
		student: Array<StudentLoan>;
	}

	/** An object containing liability accounts */
	export interface LiabilitiesObjectFormProperties {
	}
	export function CreateLiabilitiesObjectFormGroup() {
		return new FormGroup<LiabilitiesObjectFormProperties>({
		});

	}


	/** Contains details about a mortgage account. */
	export interface MortgageLiability {

		/**
		 * The ID of the account that this liability belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The account number of the loan.
		 * Required
		 */
		account_number: string;

		/**
		 * The current outstanding amount charged for late payment.
		 * Required
		 * Type: double
		 */
		current_late_fee: number;

		/**
		 * Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
		 * Required
		 * Type: double
		 */
		escrow_balance: number;

		/**
		 * Indicates whether the borrower has private mortgage insurance in effect.
		 * Required
		 */
		has_pmi: boolean;

		/**
		 * Indicates whether the borrower will pay a penalty for early payoff of mortgage.
		 * Required
		 */
		has_prepayment_penalty: boolean;

		/**
		 * Object containing metadata about the interest rate for the mortgage.
		 * Required
		 */
		interest_rate: MortgageInterestRate;

		/**
		 * The amount of the last payment.
		 * Required
		 * Type: double
		 */
		last_payment_amount: number;

		/**
		 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_payment_date: Date;

		/**
		 * Full duration of mortgage as at origination (e.g. `10 year`).
		 * Required
		 */
		loan_term: string;

		/**
		 * Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
		 * Required
		 */
		loan_type_description: string;

		/**
		 * Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		maturity_date: Date;

		/**
		 * The amount of the next payment.
		 * Required
		 * Type: double
		 */
		next_monthly_payment: number;

		/**
		 * The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		next_payment_due_date: Date;

		/**
		 * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		origination_date: Date;

		/**
		 * The original principal balance of the mortgage.
		 * Required
		 * Type: double
		 */
		origination_principal_amount: number;

		/**
		 * Amount of loan (principal + interest) past due for payment.
		 * Required
		 * Type: double
		 */
		past_due_amount: number;

		/**
		 * Object containing fields describing property address.
		 * Required
		 */
		property_address: MortgagePropertyAddress;

		/**
		 * The year to date (YTD) interest paid.
		 * Required
		 * Type: double
		 */
		ytd_interest_paid: number;

		/**
		 * The YTD principal paid.
		 * Required
		 * Type: double
		 */
		ytd_principal_paid: number;
	}

	/** Contains details about a mortgage account. */
	export interface MortgageLiabilityFormProperties {

		/**
		 * The ID of the account that this liability belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The account number of the loan.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The current outstanding amount charged for late payment.
		 * Required
		 * Type: double
		 */
		current_late_fee: FormControl<number | null | undefined>,

		/**
		 * Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
		 * Required
		 * Type: double
		 */
		escrow_balance: FormControl<number | null | undefined>,

		/**
		 * Indicates whether the borrower has private mortgage insurance in effect.
		 * Required
		 */
		has_pmi: FormControl<boolean | null | undefined>,

		/**
		 * Indicates whether the borrower will pay a penalty for early payoff of mortgage.
		 * Required
		 */
		has_prepayment_penalty: FormControl<boolean | null | undefined>,

		/**
		 * The amount of the last payment.
		 * Required
		 * Type: double
		 */
		last_payment_amount: FormControl<number | null | undefined>,

		/**
		 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_payment_date: FormControl<Date | null | undefined>,

		/**
		 * Full duration of mortgage as at origination (e.g. `10 year`).
		 * Required
		 */
		loan_term: FormControl<string | null | undefined>,

		/**
		 * Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
		 * Required
		 */
		loan_type_description: FormControl<string | null | undefined>,

		/**
		 * Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		maturity_date: FormControl<Date | null | undefined>,

		/**
		 * The amount of the next payment.
		 * Required
		 * Type: double
		 */
		next_monthly_payment: FormControl<number | null | undefined>,

		/**
		 * The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		next_payment_due_date: FormControl<Date | null | undefined>,

		/**
		 * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		origination_date: FormControl<Date | null | undefined>,

		/**
		 * The original principal balance of the mortgage.
		 * Required
		 * Type: double
		 */
		origination_principal_amount: FormControl<number | null | undefined>,

		/**
		 * Amount of loan (principal + interest) past due for payment.
		 * Required
		 * Type: double
		 */
		past_due_amount: FormControl<number | null | undefined>,

		/**
		 * The year to date (YTD) interest paid.
		 * Required
		 * Type: double
		 */
		ytd_interest_paid: FormControl<number | null | undefined>,

		/**
		 * The YTD principal paid.
		 * Required
		 * Type: double
		 */
		ytd_principal_paid: FormControl<number | null | undefined>,
	}
	export function CreateMortgageLiabilityFormGroup() {
		return new FormGroup<MortgageLiabilityFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			current_late_fee: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			escrow_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			has_pmi: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			has_prepayment_penalty: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			last_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			last_payment_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			loan_term: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			loan_type_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			maturity_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			next_monthly_payment: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			next_payment_due_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			origination_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			origination_principal_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			past_due_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ytd_interest_paid: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ytd_principal_paid: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object containing metadata about the interest rate for the mortgage. */
	export interface MortgageInterestRate {

		/**
		 * Percentage value (interest rate of current mortgage, not APR) of interest payable on a loan.
		 * Required
		 * Type: double
		 */
		percentage: number;

		/**
		 * The type of interest charged (fixed or variable).
		 * Required
		 */
		type: string;
	}

	/** Object containing metadata about the interest rate for the mortgage. */
	export interface MortgageInterestRateFormProperties {

		/**
		 * Percentage value (interest rate of current mortgage, not APR) of interest payable on a loan.
		 * Required
		 * Type: double
		 */
		percentage: FormControl<number | null | undefined>,

		/**
		 * The type of interest charged (fixed or variable).
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateMortgageInterestRateFormGroup() {
		return new FormGroup<MortgageInterestRateFormProperties>({
			percentage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object containing fields describing property address. */
	export interface MortgagePropertyAddress {

		/**
		 * The city name.
		 * Required
		 */
		city: string;

		/**
		 * The ISO 3166-1 alpha-2 country code.
		 * Required
		 */
		country: string;

		/**
		 * The five or nine digit postal code.
		 * Required
		 */
		postal_code: string;

		/**
		 * The region or state (example "NC").
		 * Required
		 */
		region: string;

		/**
		 * The full street address (example "564 Main Street, Apt 15").
		 * Required
		 */
		street: string;
	}

	/** Object containing fields describing property address. */
	export interface MortgagePropertyAddressFormProperties {

		/**
		 * The city name.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166-1 alpha-2 country code.
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The five or nine digit postal code.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state (example "NC").
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address (example "564 Main Street, Apt 15").
		 * Required
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateMortgagePropertyAddressFormGroup() {
		return new FormGroup<MortgagePropertyAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Contains details about a student loan account */
	export interface StudentLoan {

		/**
		 * The ID of the account that this liability belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
		 * Required
		 */
		account_number: string;

		/**
		 * The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 */
		disbursement_dates: Array<string>;

		/**
		 * The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		expected_payoff_date: Date;

		/**
		 * The guarantor of the student loan.
		 * Required
		 */
		guarantor: string;

		/**
		 * The interest rate on the loan as a percentage.
		 * Required
		 * Type: double
		 */
		interest_rate_percentage: number;

		/**
		 * `true` if a payment is currently overdue. Availability for this field is limited.
		 * Required
		 */
		is_overdue: boolean;

		/**
		 * The amount of the last payment.
		 * Required
		 * Type: double
		 */
		last_payment_amount: number;

		/**
		 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_payment_date: Date;

		/**
		 * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_statement_issue_date: Date;

		/**
		 * The type of loan, e.g., "Consolidation Loans".
		 * Required
		 */
		loan_name: string;

		/**
		 * An object representing the status of the student loan
		 * Required
		 */
		loan_status: StudentLoanStatus;

		/**
		 * The minimum payment due for the next billing cycle. There are some exceptions:
		 * Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`).
		 * Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
		 * Required
		 * Type: double
		 */
		minimum_payment_amount: number;

		/**
		 * The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		next_payment_due_date: Date;

		/**
		 * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		origination_date: Date;

		/**
		 * The original principal balance of the loan.
		 * Required
		 * Type: double
		 */
		origination_principal_amount: number;

		/**
		 * The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
		 * Required
		 * Type: double
		 */
		outstanding_interest_amount: number;

		/**
		 * The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
		 * Required
		 */
		payment_reference_number: string;

		/**
		 * Information about the student's eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is FedLoan (`ins_116527`).
		 * Required
		 */
		pslf_status: PSLFStatus;

		/**
		 * An object representing the repayment plan for the student loan
		 * Required
		 */
		repayment_plan: StudentRepaymentPlan;

		/**
		 * The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
		 * Required
		 */
		sequence_number: string;

		/**
		 * The address of the student loan servicer. This is generally the remittance address to which payments should be sent.
		 * Required
		 */
		servicer_address: ServicerAddressData;

		/**
		 * The year to date (YTD) interest paid. Availability for this field is limited.
		 * Required
		 * Type: double
		 */
		ytd_interest_paid: number;

		/**
		 * The year to date (YTD) principal paid. Availability for this field is limited.
		 * Required
		 * Type: double
		 */
		ytd_principal_paid: number;
	}

	/** Contains details about a student loan account */
	export interface StudentLoanFormProperties {

		/**
		 * The ID of the account that this liability belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		expected_payoff_date: FormControl<Date | null | undefined>,

		/**
		 * The guarantor of the student loan.
		 * Required
		 */
		guarantor: FormControl<string | null | undefined>,

		/**
		 * The interest rate on the loan as a percentage.
		 * Required
		 * Type: double
		 */
		interest_rate_percentage: FormControl<number | null | undefined>,

		/**
		 * `true` if a payment is currently overdue. Availability for this field is limited.
		 * Required
		 */
		is_overdue: FormControl<boolean | null | undefined>,

		/**
		 * The amount of the last payment.
		 * Required
		 * Type: double
		 */
		last_payment_amount: FormControl<number | null | undefined>,

		/**
		 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_payment_date: FormControl<Date | null | undefined>,

		/**
		 * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		last_statement_issue_date: FormControl<Date | null | undefined>,

		/**
		 * The type of loan, e.g., "Consolidation Loans".
		 * Required
		 */
		loan_name: FormControl<string | null | undefined>,

		/**
		 * The minimum payment due for the next billing cycle. There are some exceptions:
		 * Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`).
		 * Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
		 * Required
		 * Type: double
		 */
		minimum_payment_amount: FormControl<number | null | undefined>,

		/**
		 * The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		next_payment_due_date: FormControl<Date | null | undefined>,

		/**
		 * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		origination_date: FormControl<Date | null | undefined>,

		/**
		 * The original principal balance of the loan.
		 * Required
		 * Type: double
		 */
		origination_principal_amount: FormControl<number | null | undefined>,

		/**
		 * The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
		 * Required
		 * Type: double
		 */
		outstanding_interest_amount: FormControl<number | null | undefined>,

		/**
		 * The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
		 * Required
		 */
		payment_reference_number: FormControl<string | null | undefined>,

		/**
		 * The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
		 * Required
		 */
		sequence_number: FormControl<string | null | undefined>,

		/**
		 * The year to date (YTD) interest paid. Availability for this field is limited.
		 * Required
		 * Type: double
		 */
		ytd_interest_paid: FormControl<number | null | undefined>,

		/**
		 * The year to date (YTD) principal paid. Availability for this field is limited.
		 * Required
		 * Type: double
		 */
		ytd_principal_paid: FormControl<number | null | undefined>,
	}
	export function CreateStudentLoanFormGroup() {
		return new FormGroup<StudentLoanFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expected_payoff_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			guarantor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			interest_rate_percentage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_overdue: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			last_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			last_payment_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			last_statement_issue_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			loan_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			minimum_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			next_payment_due_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			origination_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			origination_principal_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			outstanding_interest_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			payment_reference_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ytd_interest_paid: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ytd_principal_paid: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing the status of the student loan */
	export interface StudentLoanStatus {

		/**
		 * The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		end_date: Date;

		/**
		 * The status type of the student loan
		 * Required
		 */
		type: StudentLoanStatusType;
	}

	/** An object representing the status of the student loan */
	export interface StudentLoanStatusFormProperties {

		/**
		 * The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The status type of the student loan
		 * Required
		 */
		type: FormControl<StudentLoanStatusType | null | undefined>,
	}
	export function CreateStudentLoanStatusFormGroup() {
		return new FormGroup<StudentLoanStatusFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<StudentLoanStatusType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum StudentLoanStatusType { cancelled = 'cancelled', 'charged off' = 'charged off', claim = 'claim', consolidated = 'consolidated', deferment = 'deferment', delinquent = 'delinquent', discharged = 'discharged', extension = 'extension', forbearance = 'forbearance', 'in grace' = 'in grace', 'in military' = 'in military', 'in school' = 'in school', 'not fully disbursed' = 'not fully disbursed', other = 'other', 'paid in full' = 'paid in full', refunded = 'refunded', repayment = 'repayment', transferred = 'transferred' }


	/** Information about the student's eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is FedLoan (`ins_116527`).  */
	export interface PSLFStatus {

		/**
		 * The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		estimated_eligibility_date: Date;

		/**
		 * The number of qualifying payments that have been made.
		 * Required
		 * Type: double
		 */
		payments_made: number;

		/**
		 * The number of qualifying payments remaining.
		 * Required
		 * Type: double
		 */
		payments_remaining: number;
	}

	/** Information about the student's eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is FedLoan (`ins_116527`).  */
	export interface PSLFStatusFormProperties {

		/**
		 * The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * Required
		 * Type: DateOnly
		 */
		estimated_eligibility_date: FormControl<Date | null | undefined>,

		/**
		 * The number of qualifying payments that have been made.
		 * Required
		 * Type: double
		 */
		payments_made: FormControl<number | null | undefined>,

		/**
		 * The number of qualifying payments remaining.
		 * Required
		 * Type: double
		 */
		payments_remaining: FormControl<number | null | undefined>,
	}
	export function CreatePSLFStatusFormGroup() {
		return new FormGroup<PSLFStatusFormProperties>({
			estimated_eligibility_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payments_made: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			payments_remaining: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing the repayment plan for the student loan */
	export interface StudentRepaymentPlan {

		/**
		 * The description of the repayment plan as provided by the servicer.
		 * Required
		 */
		description: string;

		/**
		 * The type of the repayment plan.
		 * Required
		 */
		type: StudentRepaymentPlanType;
	}

	/** An object representing the repayment plan for the student loan */
	export interface StudentRepaymentPlanFormProperties {

		/**
		 * The description of the repayment plan as provided by the servicer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The type of the repayment plan.
		 * Required
		 */
		type: FormControl<StudentRepaymentPlanType | null | undefined>,
	}
	export function CreateStudentRepaymentPlanFormGroup() {
		return new FormGroup<StudentRepaymentPlanFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<StudentRepaymentPlanType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum StudentRepaymentPlanType { 'extended graduated' = 'extended graduated', 'extended standard' = 'extended standard', graduated = 'graduated', 'income-contingent repayment' = 'income-contingent repayment', 'income-based repayment' = 'income-based repayment', 'interest-only' = 'interest-only', other = 'other', 'pay as you earn' = 'pay as you earn', 'revised pay as you earn' = 'revised pay as you earn', standard = 'standard', _null = 10 }


	/** The address of the student loan servicer. This is generally the remittance address to which payments should be sent. */
	export interface ServicerAddressData {

		/**
		 * The full city name
		 * Required
		 */
		city: string;

		/**
		 * The ISO 3166-1 alpha-2 country code
		 * Required
		 */
		country: string;

		/**
		 * The postal code
		 * Required
		 */
		postal_code: string;

		/**
		 * The region or state
		 * Example: `"NC"`
		 * Required
		 */
		region: string;

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 * Required
		 */
		street: string;
	}

	/** The address of the student loan servicer. This is generally the remittance address to which payments should be sent. */
	export interface ServicerAddressDataFormProperties {

		/**
		 * The full city name
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166-1 alpha-2 country code
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The region or state
		 * Example: `"NC"`
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The full street address
		 * Example: `"564 Main Street, APT 15"`
		 * Required
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateServicerAddressDataFormGroup() {
		return new FormGroup<ServicerAddressDataFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Used to configure Sandbox test data for the Liabilities product */
	export interface LiabilityOverride {

		/**
		 * The balance transfer APR percentage value. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		balance_transfer_apr: number;

		/**
		 * The cash APR percentage value. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		cash_apr: number;

		/**
		 * Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
		 * Required
		 * Type: DateOnly
		 */
		expected_payoff_date: Date;

		/**
		 * Override the `guarantor` field. Can only be set if `type` is `student`.
		 * Required
		 */
		guarantor: string;

		/**
		 * If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.
		 * Required
		 * Type: double
		 */
		interest_capitalization_grace_period_months: number;

		/**
		 * Override the `is_federal` field. Can only be set if `type` is `student`.
		 * Required
		 */
		is_federal: boolean;

		/**
		 * Override the `is_overdue` field
		 * Required
		 */
		is_overdue: boolean;

		/**
		 * Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		last_payment_amount: number;

		/**
		 * Override the `loan_name` field. Can only be set if `type` is `student`.
		 * Required
		 */
		loan_name: string;

		/**
		 * An object representing the status of the student loan
		 * Required
		 */
		loan_status: StudentLoanStatus;

		/**
		 * Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
		 * Required
		 * Type: double
		 */
		minimum_payment_amount: number;

		/**
		 * The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
		 * Required
		 * Type: double
		 */
		nominal_apr: number;

		/**
		 * The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
		 * Required
		 * Type: DateOnly
		 */
		origination_date: Date;

		/**
		 * Override the `payment_reference_number` field. Can only be set if `type` is `student`.
		 * Required
		 */
		payment_reference_number: string;

		/**
		 * The original loan principal. Can only be set if `type` is `student`.
		 * Required
		 * Type: double
		 */
		principal: number;

		/**
		 * Information about the student's eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is FedLoan (`ins_116527`).
		 * Required
		 */
		pslf_status: PSLFStatus;

		/**
		 * The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		purchase_apr: number;

		/**
		 * Student loan repayment information used to configure Sandbox test data for the Liabilities product
		 * Required
		 */
		repayment_model: StudentLoanRepaymentModel;

		/**
		 * Override the `repayment_plan.description` field. Can only be set if `type` is `student`.
		 * Required
		 */
		repayment_plan_description: string;

		/**
		 * Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `"extended graduated"`, `"extended standard"`, `"graduated"`, `"income-contingent repayment"`, `"income-based repayment"`, `"interest only"`, `"other"`, `"pay as you earn"`, `"revised pay as you earn"`, or `"standard"`.
		 * Required
		 */
		repayment_plan_type: string;

		/**
		 * Override the `sequence_number` field. Can only be set if `type` is `student`.
		 * Required
		 */
		sequence_number: string;

		/**
		 * A physical mailing address.
		 * Required
		 */
		servicer_address: Address;

		/**
		 * The special APR percentage value. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		special_apr: number;

		/**
		 * The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.
		 * Required
		 */
		type: string;
	}

	/** Used to configure Sandbox test data for the Liabilities product */
	export interface LiabilityOverrideFormProperties {

		/**
		 * The balance transfer APR percentage value. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		balance_transfer_apr: FormControl<number | null | undefined>,

		/**
		 * The cash APR percentage value. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		cash_apr: FormControl<number | null | undefined>,

		/**
		 * Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
		 * Required
		 * Type: DateOnly
		 */
		expected_payoff_date: FormControl<Date | null | undefined>,

		/**
		 * Override the `guarantor` field. Can only be set if `type` is `student`.
		 * Required
		 */
		guarantor: FormControl<string | null | undefined>,

		/**
		 * If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.
		 * Required
		 * Type: double
		 */
		interest_capitalization_grace_period_months: FormControl<number | null | undefined>,

		/**
		 * Override the `is_federal` field. Can only be set if `type` is `student`.
		 * Required
		 */
		is_federal: FormControl<boolean | null | undefined>,

		/**
		 * Override the `is_overdue` field
		 * Required
		 */
		is_overdue: FormControl<boolean | null | undefined>,

		/**
		 * Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		last_payment_amount: FormControl<number | null | undefined>,

		/**
		 * Override the `loan_name` field. Can only be set if `type` is `student`.
		 * Required
		 */
		loan_name: FormControl<string | null | undefined>,

		/**
		 * Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
		 * Required
		 * Type: double
		 */
		minimum_payment_amount: FormControl<number | null | undefined>,

		/**
		 * The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
		 * Required
		 * Type: double
		 */
		nominal_apr: FormControl<number | null | undefined>,

		/**
		 * The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
		 * Required
		 * Type: DateOnly
		 */
		origination_date: FormControl<Date | null | undefined>,

		/**
		 * Override the `payment_reference_number` field. Can only be set if `type` is `student`.
		 * Required
		 */
		payment_reference_number: FormControl<string | null | undefined>,

		/**
		 * The original loan principal. Can only be set if `type` is `student`.
		 * Required
		 * Type: double
		 */
		principal: FormControl<number | null | undefined>,

		/**
		 * The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		purchase_apr: FormControl<number | null | undefined>,

		/**
		 * Override the `repayment_plan.description` field. Can only be set if `type` is `student`.
		 * Required
		 */
		repayment_plan_description: FormControl<string | null | undefined>,

		/**
		 * Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `"extended graduated"`, `"extended standard"`, `"graduated"`, `"income-contingent repayment"`, `"income-based repayment"`, `"interest only"`, `"other"`, `"pay as you earn"`, `"revised pay as you earn"`, or `"standard"`.
		 * Required
		 */
		repayment_plan_type: FormControl<string | null | undefined>,

		/**
		 * Override the `sequence_number` field. Can only be set if `type` is `student`.
		 * Required
		 */
		sequence_number: FormControl<string | null | undefined>,

		/**
		 * The special APR percentage value. Can only be set if `type` is `credit`.
		 * Required
		 * Type: double
		 */
		special_apr: FormControl<number | null | undefined>,

		/**
		 * The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateLiabilityOverrideFormGroup() {
		return new FormGroup<LiabilityOverrideFormProperties>({
			balance_transfer_apr: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			cash_apr: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			expected_payoff_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			guarantor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			interest_capitalization_grace_period_months: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			is_federal: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			is_overdue: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			last_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			loan_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			minimum_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			nominal_apr: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			origination_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payment_reference_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			principal: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			purchase_apr: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repayment_plan_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repayment_plan_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			special_apr: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Student loan repayment information used to configure Sandbox test data for the Liabilities product */
	export interface StudentLoanRepaymentModel {

		/**
		 * Configures the number of months before repayment starts.
		 * Required
		 * Type: double
		 */
		non_repayment_months: number;

		/**
		 * Configures the number of months of repayments before the loan is paid off.
		 * Required
		 * Type: double
		 */
		repayment_months: number;

		/**
		 * The only currently supported value for this field is `standard`.
		 * Required
		 */
		type: string;
	}

	/** Student loan repayment information used to configure Sandbox test data for the Liabilities product */
	export interface StudentLoanRepaymentModelFormProperties {

		/**
		 * Configures the number of months before repayment starts.
		 * Required
		 * Type: double
		 */
		non_repayment_months: FormControl<number | null | undefined>,

		/**
		 * Configures the number of months of repayments before the loan is paid off.
		 * Required
		 * Type: double
		 */
		repayment_months: FormControl<number | null | undefined>,

		/**
		 * The only currently supported value for this field is `standard`.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateStudentLoanRepaymentModelFormGroup() {
		return new FormGroup<StudentLoanRepaymentModelFormProperties>({
			non_repayment_months: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			repayment_months: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information related to the callback from the hosted Link session. */
	export interface LinkCallbackMetadata {

		/** A list of accounts attached to the connected Item. If Account Select is enabled via the developer dashboard, accounts will only include selected accounts. */
		accounts?: Array<LinkDeliveryAccount>;

		/** The type of Link callback event */
		callback_type?: LinkCallbackMetadataCallback_type | null;

		/** A string representing the event that has just occurred in the Link flow. */
		event_name?: LinkCallbackMetadataEvent_name | null;

		/** Information related to the financial institution. */
		institution?: LinkDeliveryInstitution;

		/** A unique identifier associated with a user's actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround. */
		link_session_id?: string | null;

		/** The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. */
		request_id?: string | null;

		/** Indicates where in the flow the Link user exited */
		status?: string | null;
	}

	/** Information related to the callback from the hosted Link session. */
	export interface LinkCallbackMetadataFormProperties {

		/** The type of Link callback event */
		callback_type: FormControl<LinkCallbackMetadataCallback_type | null | undefined>,

		/** A string representing the event that has just occurred in the Link flow. */
		event_name: FormControl<LinkCallbackMetadataEvent_name | null | undefined>,

		/** A unique identifier associated with a user's actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround. */
		link_session_id: FormControl<string | null | undefined>,

		/** The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. */
		request_id: FormControl<string | null | undefined>,

		/** Indicates where in the flow the Link user exited */
		status: FormControl<string | null | undefined>,
	}
	export function CreateLinkCallbackMetadataFormGroup() {
		return new FormGroup<LinkCallbackMetadataFormProperties>({
			callback_type: new FormControl<LinkCallbackMetadataCallback_type | null | undefined>(undefined),
			event_name: new FormControl<LinkCallbackMetadataEvent_name | null | undefined>(undefined),
			link_session_id: new FormControl<string | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information related to account attached to the connected Item */
	export interface LinkDeliveryAccount {

		/** If micro-deposit verification is being used, indicates whether the account being verified is a `business` or `personal` account. */
		class_type?: string | null;

		/** The Plaid `account_id` */
		id?: string | null;

		/** The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts. It may also not match the mask that the bank displays to the user. */
		mask?: string | null;

		/** The official account name */
		name?: string | null;

		/** The account subtype. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
		subtype?: string | null;

		/** The account type. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
		type?: string | null;

		/** Indicates an Item's micro-deposit-based verification status. */
		verification_status?: AccountBaseVerification_status | null;
	}

	/** Information related to account attached to the connected Item */
	export interface LinkDeliveryAccountFormProperties {

		/** If micro-deposit verification is being used, indicates whether the account being verified is a `business` or `personal` account. */
		class_type: FormControl<string | null | undefined>,

		/** The Plaid `account_id` */
		id: FormControl<string | null | undefined>,

		/** The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts. It may also not match the mask that the bank displays to the user. */
		mask: FormControl<string | null | undefined>,

		/** The official account name */
		name: FormControl<string | null | undefined>,

		/** The account subtype. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
		subtype: FormControl<string | null | undefined>,

		/** The account type. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
		type: FormControl<string | null | undefined>,

		/** Indicates an Item's micro-deposit-based verification status. */
		verification_status: FormControl<AccountBaseVerification_status | null | undefined>,
	}
	export function CreateLinkDeliveryAccountFormGroup() {
		return new FormGroup<LinkDeliveryAccountFormProperties>({
			class_type: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			mask: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			subtype: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
			verification_status: new FormControl<AccountBaseVerification_status | null | undefined>(undefined),
		});

	}

	export enum LinkCallbackMetadataCallback_type { ON_SUCCESS = 'ON_SUCCESS', ON_EVENT = 'ON_EVENT', ON_EXIT = 'ON_EXIT' }

	export enum LinkCallbackMetadataEvent_name { BANK_INCOME_INSIGHTS_COMPLETED = 'BANK_INCOME_INSIGHTS_COMPLETED', CLOSE_OAUTH = 'CLOSE_OAUTH', ERROR = 'ERROR', EXIT = 'EXIT', FAIL_OAUTH = 'FAIL_OAUTH', HANDOFF = 'HANDOFF', OPEN = 'OPEN', OPEN_MY_PLAID = 'OPEN_MY_PLAID', OPEN_OAUTH = 'OPEN_OAUTH', SEARCH_INSTITUTION = 'SEARCH_INSTITUTION', SELECT_AUTH_TYPE = 'SELECT_AUTH_TYPE', SELECT_BRAND = 'SELECT_BRAND', SELECT_DEGRADED_INSTITUTION = 'SELECT_DEGRADED_INSTITUTION', SELECT_DOWN_INSTITUTION = 'SELECT_DOWN_INSTITUTION', SELECT_INSTITUTION = 'SELECT_INSTITUTION', SUBMIT_ACCOUNT_NUMBER = 'SUBMIT_ACCOUNT_NUMBER', SUBMIT_CREDENTIALS = 'SUBMIT_CREDENTIALS', SUBMIT_DOCUMENTS = 'SUBMIT_DOCUMENTS', SUBMIT_DOCUMENTS_ERROR = 'SUBMIT_DOCUMENTS_ERROR', SUBMIT_DOCUMENTS_SUCCESS = 'SUBMIT_DOCUMENTS_SUCCESS', SUBMIT_MFA = 'SUBMIT_MFA', SUBMIT_ROUTING_NUMBER = 'SUBMIT_ROUTING_NUMBER', TRANSITION_VIEW = 'TRANSITION_VIEW', VIEW_DATA_TYPES = 'VIEW_DATA_TYPES' }


	/** Information related to the financial institution. */
	export interface LinkDeliveryInstitution {

		/** The Plaid institution identifier */
		institution_id?: string | null;

		/** The full institution name, such as 'Wells Fargo' */
		name?: string | null;
	}

	/** Information related to the financial institution. */
	export interface LinkDeliveryInstitutionFormProperties {

		/** The Plaid institution identifier */
		institution_id: FormControl<string | null | undefined>,

		/** The full institution name, such as 'Wells Fargo' */
		name: FormControl<string | null | undefined>,
	}
	export function CreateLinkDeliveryInstitutionFormGroup() {
		return new FormGroup<LinkDeliveryInstitutionFormProperties>({
			institution_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Webhook containing metadata proxied over from Link callback e.g `onEvent`, `onExit`, `onSuccess`. */
	export interface LinkDeliveryCallbackWebhook {

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * Information related to the callback from the hosted Link session.
		 * Required
		 */
		link_callback_metadata: LinkCallbackMetadata;

		/**
		 * The ID of the link delivery session.
		 * Required
		 */
		link_delivery_session_id: string;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		timestamp: string;

		/**
		 * `LINK_CALLBACK`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `LINK_DELIVERY`
		 * Required
		 */
		webhook_type: string;
	}

	/** Webhook containing metadata proxied over from Link callback e.g `onEvent`, `onExit`, `onSuccess`. */
	export interface LinkDeliveryCallbackWebhookFormProperties {

		/**
		 * The ID of the link delivery session.
		 * Required
		 */
		link_delivery_session_id: FormControl<string | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		timestamp: FormControl<string | null | undefined>,

		/**
		 * `LINK_CALLBACK`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `LINK_DELIVERY`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateLinkDeliveryCallbackWebhookFormGroup() {
		return new FormGroup<LinkDeliveryCallbackWebhookFormProperties>({
			link_delivery_session_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The communication method containing both the type and address to send the URL. */
	export interface LinkDeliveryCommunicationMethod {

		/** The phone number / email address that link delivery sessions are delivered to. Phone numbers must be in E.164 format. */
		address?: string | null;

		/**
		 * The delivery method to be used to deliver the Link Delivery URL.
		 * `SMS`: The URL will be delivered through SMS
		 * `EMAIL`: The URL will be delivered through email
		 */
		method?: LinkDeliveryCommunicationMethodMethod | null;
	}

	/** The communication method containing both the type and address to send the URL. */
	export interface LinkDeliveryCommunicationMethodFormProperties {

		/** The phone number / email address that link delivery sessions are delivered to. Phone numbers must be in E.164 format. */
		address: FormControl<string | null | undefined>,

		/**
		 * The delivery method to be used to deliver the Link Delivery URL.
		 * `SMS`: The URL will be delivered through SMS
		 * `EMAIL`: The URL will be delivered through email
		 */
		method: FormControl<LinkDeliveryCommunicationMethodMethod | null | undefined>,
	}
	export function CreateLinkDeliveryCommunicationMethodFormGroup() {
		return new FormGroup<LinkDeliveryCommunicationMethodFormProperties>({
			address: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<LinkDeliveryCommunicationMethodMethod | null | undefined>(undefined),
		});

	}

	export enum LinkDeliveryCommunicationMethodMethod { SMS = 'SMS', EMAIL = 'EMAIL' }


	/** LinkDeliveryCreateRequest defines the request schema for `/link_delivery/create` */
	export interface LinkDeliveryCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A `link_token` from a previous invocation of `/link/token/create` with Link Delivery enabled.
		 * Required
		 */
		link_token: string;

		/** Optional metadata related to the link delivery session */
		options?: LinkDeliveryOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** LinkDeliveryCreateRequest defines the request schema for `/link_delivery/create` */
	export interface LinkDeliveryCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A `link_token` from a previous invocation of `/link/token/create` with Link Delivery enabled.
		 * Required
		 */
		link_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateLinkDeliveryCreateRequestFormGroup() {
		return new FormGroup<LinkDeliveryCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			link_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Optional metadata related to the link delivery session */
	export interface LinkDeliveryOptions {

		/** Metadata related to the recipient. If the information required to populate this field is not available, leave it blank. */
		recipient?: LinkDeliveryRecipient;
	}

	/** Optional metadata related to the link delivery session */
	export interface LinkDeliveryOptionsFormProperties {
	}
	export function CreateLinkDeliveryOptionsFormGroup() {
		return new FormGroup<LinkDeliveryOptionsFormProperties>({
		});

	}


	/** Metadata related to the recipient. If the information required to populate this field is not available, leave it blank. */
	export interface LinkDeliveryRecipient {

		/** The list of communication methods to send the Link Delivery URL to. If delivery is not required, leave this field blank. */
		communication_methods?: Array<LinkDeliveryCommunicationMethod>;

		/** First name of the recipient. Will be used in the body of the email / text (if configured). If this information is not available, leave this field blank. */
		first_name?: string | null;
	}

	/** Metadata related to the recipient. If the information required to populate this field is not available, leave it blank. */
	export interface LinkDeliveryRecipientFormProperties {

		/** First name of the recipient. Will be used in the body of the email / text (if configured). If this information is not available, leave this field blank. */
		first_name: FormControl<string | null | undefined>,
	}
	export function CreateLinkDeliveryRecipientFormGroup() {
		return new FormGroup<LinkDeliveryRecipientFormProperties>({
			first_name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** LinkDeliveryCreateResponse defines the response schema for `/link_delivery/create` */
	export interface LinkDeliveryCreateResponse {

		/**
		 * The ID for the Link Delivery session. Same as the `link_token` string excluding the "link-{env}-" prefix.
		 * Required
		 */
		link_delivery_session_id: string;

		/**
		 * The URL to the Link Delivery session, which will be delivered by the specified delivery method.
		 * Required
		 */
		link_delivery_url: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** LinkDeliveryCreateResponse defines the response schema for `/link_delivery/create` */
	export interface LinkDeliveryCreateResponseFormProperties {

		/**
		 * The ID for the Link Delivery session. Same as the `link_token` string excluding the "link-{env}-" prefix.
		 * Required
		 */
		link_delivery_session_id: FormControl<string | null | undefined>,

		/**
		 * The URL to the Link Delivery session, which will be delivered by the specified delivery method.
		 * Required
		 */
		link_delivery_url: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkDeliveryCreateResponseFormGroup() {
		return new FormGroup<LinkDeliveryCreateResponseFormProperties>({
			link_delivery_session_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			link_delivery_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The delivery method to be used to deliver the Link Delivery URL.
	 * `SMS`: The URL will be delivered through SMS
	 * `EMAIL`: The URL will be delivered through email
	 */
	export enum LinkDeliveryDeliveryMethod { SMS = 'SMS', EMAIL = 'EMAIL' }


	/** LinkDeliveryGetRequest defines the request schema for `/link_delivery/get` */
	export interface LinkDeliveryGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The ID for the Link Delivery session from a previous invocation of `/link_delivery/create`.
		 * Required
		 */
		link_delivery_session_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** LinkDeliveryGetRequest defines the request schema for `/link_delivery/get` */
	export interface LinkDeliveryGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID for the Link Delivery session from a previous invocation of `/link_delivery/create`.
		 * Required
		 */
		link_delivery_session_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateLinkDeliveryGetRequestFormGroup() {
		return new FormGroup<LinkDeliveryGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			link_delivery_session_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** LinkDeliveryGetRequest defines the response schema for `/link_delivery/get` */
	export interface LinkDeliveryGetResponse {

		/** An array of access tokens associated with the Link Delivery session. */
		access_tokens?: Array<string>;

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Link Delivery Session was completed at. */
		completed_at?: Date | null;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Link Delivery Session was created at.
		 * Required
		 */
		created_at: Date;

		/** An array of `item_id`s associated with the Link Delivery session. */
		item_ids?: Array<string>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The status of the given Link Delivery Session.
		 * `CREATED`: The session is created but not yet accessed by the user
		 * `OPENED`: The session is opened by the user but not yet completed
		 * `COMPLETED`: The session has been completed by the user
		 * `EXPIRED`: The session has expired
		 * Required
		 */
		status: LinkDeliveryGetResponseStatus;
	}

	/** LinkDeliveryGetRequest defines the response schema for `/link_delivery/get` */
	export interface LinkDeliveryGetResponseFormProperties {

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Link Delivery Session was completed at. */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Link Delivery Session was created at.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The status of the given Link Delivery Session.
		 * `CREATED`: The session is created but not yet accessed by the user
		 * `OPENED`: The session is opened by the user but not yet completed
		 * `COMPLETED`: The session has been completed by the user
		 * `EXPIRED`: The session has expired
		 * Required
		 */
		status: FormControl<LinkDeliveryGetResponseStatus | null | undefined>,
	}
	export function CreateLinkDeliveryGetResponseFormGroup() {
		return new FormGroup<LinkDeliveryGetResponseFormProperties>({
			completed_at: new FormControl<Date | null | undefined>(undefined),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<LinkDeliveryGetResponseStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum LinkDeliveryGetResponseStatus { CREATED = 'CREATED', OPENED = 'OPENED', COMPLETED = 'COMPLETED', EXPIRED = 'EXPIRED' }


	/** Information related to the related to the delivery of the link session to users */
	export interface LinkDeliveryMetadata {

		/** The communication method used to deliver the hosted link session */
		communication_method?: LinkDeliveryMetadataCommunication_method | null;

		/** The status of the delivery of the hosted link to the user */
		delivery_status?: LinkDeliveryMetadataDelivery_status | null;
	}

	/** Information related to the related to the delivery of the link session to users */
	export interface LinkDeliveryMetadataFormProperties {

		/** The communication method used to deliver the hosted link session */
		communication_method: FormControl<LinkDeliveryMetadataCommunication_method | null | undefined>,

		/** The status of the delivery of the hosted link to the user */
		delivery_status: FormControl<LinkDeliveryMetadataDelivery_status | null | undefined>,
	}
	export function CreateLinkDeliveryMetadataFormGroup() {
		return new FormGroup<LinkDeliveryMetadataFormProperties>({
			communication_method: new FormControl<LinkDeliveryMetadataCommunication_method | null | undefined>(undefined),
			delivery_status: new FormControl<LinkDeliveryMetadataDelivery_status | null | undefined>(undefined),
		});

	}

	export enum LinkDeliveryMetadataCommunication_method { sms = 'sms', email = 'email' }

	export enum LinkDeliveryMetadataDelivery_status { succeeded = 'succeeded', failed = 'failed' }


	/**
	 * The status of the given Link Delivery Session.
	 * `CREATED`: The session is created but not yet accessed by the user
	 * `OPENED`: The session is opened by the user but not yet completed
	 * `COMPLETED`: The session has been completed by the user
	 * `EXPIRED`: The session has expired
	 */
	export enum LinkDeliverySessionStatus { CREATED = 'CREATED', OPENED = 'OPENED', COMPLETED = 'COMPLETED', EXPIRED = 'EXPIRED' }


	/** Indicates an Item's micro-deposit-based verification status. */
	export enum LinkDeliveryVerificationStatus { automatically_verified = 'automatically_verified', pending_automatic_verification = 'pending_automatic_verification', pending_manual_verification = 'pending_manual_verification', manually_verified = 'manually_verified', verification_expired = 'verification_expired', verification_failed = 'verification_failed' }


	/** The type of Link callback event */
	export enum LinkDeliveryWebhookCallbackType { ON_SUCCESS = 'ON_SUCCESS', ON_EVENT = 'ON_EVENT', ON_EXIT = 'ON_EXIT' }


	/** The communication method used to deliver the hosted link session */
	export enum LinkDeliveryWebhookCommunicationMethod { sms = 'sms', email = 'email' }


	/** The status of the delivery of the hosted link to the user */
	export enum LinkDeliveryWebhookDeliveryStatus { succeeded = 'succeeded', failed = 'failed' }


	/** A string representing the event that has just occurred in the Link flow. */
	export enum LinkEventName { BANK_INCOME_INSIGHTS_COMPLETED = 'BANK_INCOME_INSIGHTS_COMPLETED', CLOSE_OAUTH = 'CLOSE_OAUTH', ERROR = 'ERROR', EXIT = 'EXIT', FAIL_OAUTH = 'FAIL_OAUTH', HANDOFF = 'HANDOFF', OPEN = 'OPEN', OPEN_MY_PLAID = 'OPEN_MY_PLAID', OPEN_OAUTH = 'OPEN_OAUTH', SEARCH_INSTITUTION = 'SEARCH_INSTITUTION', SELECT_AUTH_TYPE = 'SELECT_AUTH_TYPE', SELECT_BRAND = 'SELECT_BRAND', SELECT_DEGRADED_INSTITUTION = 'SELECT_DEGRADED_INSTITUTION', SELECT_DOWN_INSTITUTION = 'SELECT_DOWN_INSTITUTION', SELECT_INSTITUTION = 'SELECT_INSTITUTION', SUBMIT_ACCOUNT_NUMBER = 'SUBMIT_ACCOUNT_NUMBER', SUBMIT_CREDENTIALS = 'SUBMIT_CREDENTIALS', SUBMIT_DOCUMENTS = 'SUBMIT_DOCUMENTS', SUBMIT_DOCUMENTS_ERROR = 'SUBMIT_DOCUMENTS_ERROR', SUBMIT_DOCUMENTS_SUCCESS = 'SUBMIT_DOCUMENTS_SUCCESS', SUBMIT_MFA = 'SUBMIT_MFA', SUBMIT_ROUTING_NUMBER = 'SUBMIT_ROUTING_NUMBER', TRANSITION_VIEW = 'TRANSITION_VIEW', VIEW_DATA_TYPES = 'VIEW_DATA_TYPES' }


	/** LinkOAuthCorrelationIdExchangeRequest defines the request schema for `/link/oauth/correlation_id/exchange` */
	export interface LinkOAuthCorrelationIdExchangeRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A `link_correlation_id` from a received OAuth redirect URI callback
		 * Required
		 */
		link_correlation_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** LinkOAuthCorrelationIdExchangeRequest defines the request schema for `/link/oauth/correlation_id/exchange` */
	export interface LinkOAuthCorrelationIdExchangeRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A `link_correlation_id` from a received OAuth redirect URI callback
		 * Required
		 */
		link_correlation_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateLinkOAuthCorrelationIdExchangeRequestFormGroup() {
		return new FormGroup<LinkOAuthCorrelationIdExchangeRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			link_correlation_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** LinkOAuthCorrelationIdExchangeResponse defines the response schema for `/link/oauth/correlation_id/exchange` */
	export interface LinkOAuthCorrelationIdExchangeResponse {

		/**
		 * The `link_token` associated to the given `link_correlation_id`, which can be used to re-initialize Link.
		 * Required
		 */
		link_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** LinkOAuthCorrelationIdExchangeResponse defines the response schema for `/link/oauth/correlation_id/exchange` */
	export interface LinkOAuthCorrelationIdExchangeResponseFormProperties {

		/**
		 * The `link_token` associated to the given `link_correlation_id`, which can be used to re-initialize Link.
		 * Required
		 */
		link_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkOAuthCorrelationIdExchangeResponseFormGroup() {
		return new FormGroup<LinkOAuthCorrelationIdExchangeResponseFormProperties>({
			link_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
	 * For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window.
	 */
	export interface LinkTokenAccountFilters {

		/** A filter to apply to `credit`-type accounts */
		credit?: CreditFilter;

		/** A filter to apply to `depository`-type accounts */
		depository?: DepositoryFilter;

		/** A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
		investment?: InvestmentFilter;

		/** A filter to apply to `loan`-type accounts */
		loan?: LoanFilter;
	}

	/**
	 * By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
	 * For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window.
	 */
	export interface LinkTokenAccountFiltersFormProperties {
	}
	export function CreateLinkTokenAccountFiltersFormGroup() {
		return new FormGroup<LinkTokenAccountFiltersFormProperties>({
		});

	}


	/** A filter to apply to `credit`-type accounts */
	export interface LinkTokenCreateCreditFilter {

		/** An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
		account_subtypes?: Array<CreditAccountSubtype>;
	}

	/** A filter to apply to `credit`-type accounts */
	export interface LinkTokenCreateCreditFilterFormProperties {
	}
	export function CreateLinkTokenCreateCreditFilterFormGroup() {
		return new FormGroup<LinkTokenCreateCreditFilterFormProperties>({
		});

	}


	/** A filter to apply to `depository`-type accounts */
	export interface LinkTokenCreateDepositoryFilter {

		/** An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
		account_subtypes?: Array<DepositoryAccountSubtype>;
	}

	/** A filter to apply to `depository`-type accounts */
	export interface LinkTokenCreateDepositoryFilterFormProperties {
	}
	export function CreateLinkTokenCreateDepositoryFilterFormGroup() {
		return new FormGroup<LinkTokenCreateDepositoryFilterFormProperties>({
		});

	}


	/** A map containing data used to highlight institutions in Link. */
	export interface LinkTokenCreateInstitutionData {

		/** The routing number of the bank to highlight. */
		routing_number?: string | null;
	}

	/** A map containing data used to highlight institutions in Link. */
	export interface LinkTokenCreateInstitutionDataFormProperties {

		/** The routing number of the bank to highlight. */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateInstitutionDataFormGroup() {
		return new FormGroup<LinkTokenCreateInstitutionDataFormProperties>({
			routing_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
	export interface LinkTokenCreateInvestmentFilter {

		/** An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
		account_subtypes?: Array<InvestmentAccountSubtype>;
	}

	/** A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
	export interface LinkTokenCreateInvestmentFilterFormProperties {
	}
	export function CreateLinkTokenCreateInvestmentFilterFormGroup() {
		return new FormGroup<LinkTokenCreateInvestmentFilterFormProperties>({
		});

	}


	/** A filter to apply to `loan`-type accounts */
	export interface LinkTokenCreateLoanFilter {

		/** An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
		account_subtypes?: Array<LoanAccountSubtype>;
	}

	/** A filter to apply to `loan`-type accounts */
	export interface LinkTokenCreateLoanFilterFormProperties {
	}
	export function CreateLinkTokenCreateLoanFilterFormGroup() {
		return new FormGroup<LinkTokenCreateLoanFilterFormProperties>({
		});

	}


	/** LinkTokenCreateRequest defines the request schema for `/link/token/create` */
	export interface LinkTokenCreateRequest {

		/** The `access_token` associated with the Item to update or reference, used when updating, modifying, or accessing an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link for a returning user as part of the Transfer UI flow. */
		access_token?: string | null;

		/**
		 * By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
		 * For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window.
		 */
		account_filters?: LinkTokenAccountFilters;

		/**
		 * (Beta) This field has no effect unless you are participating in the Product Scope Transparency beta program.
		 * List of additional Plaid product(s) you wish to collect consent for. These products will not be billed until you start using them by calling the relevant endpoints.
		 * `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically have consent collected.
		 * Institutions that do not support these products will still be shown in Link
		 */
		additional_consented_products?: Array<Products>;

		/** The name of your app's Android package. Required if using the `link_token` to initialize Link on Android. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). When creating a `link_token` for initializing Link on other platforms, `android_package_name` must be left blank and `redirect_uri` should be used instead. */
		android_package_name?: string | null;

		/** Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager. */
		auth?: LinkTokenCreateRequestAuth;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display "This Application" instead.
		 * Required
		 */
		client_name: string;

		/**
		 * Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown. For a complete mapping of supported products by country, see https://plaid.com/global/.
		 * If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. Access to European institutions requires additional compliance steps. To request access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.
		 * If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`, or the customization may not be applied.
		 * If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `['US']`.
		 * Required
		 * Minimum items: 1
		 */
		country_codes: Array<CountryCode>;

		/** Specifies options for initializing Link for use with the Deposit Switch (beta) product. This field is required if `deposit_switch` is included in the `products` array. */
		deposit_switch?: LinkTokenCreateRequestDepositSwitch;

		/** Specifies options for initializing Link for use with the Employment product. This field is required if `employment` is included in the `products` array. */
		employment?: LinkTokenCreateRequestEmployment;

		/** Configuration parameters for EU flows */
		eu_config?: LinkTokenEUConfig;

		/** Specifies option for initializing Link for use with the Identity Verification product. */
		identity_verification?: LinkTokenCreateRequestIdentityVerification;

		/** Specifies options for initializing Link for use with the Income product. This field is required if `income_verification` is included in the `products` array. */
		income_verification?: LinkTokenCreateRequestIncomeVerification;

		/** A map containing data used to highlight institutions in Link. */
		institution_data?: LinkTokenCreateInstitutionData;

		/** Used for certain Europe-only configurations, as well as certain legacy use cases in other regions. */
		institution_id?: string | null;

		/** Configuration parameters for the Investments product */
		investments?: LinkTokenInvestments;

		/**
		 * The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).
		 * Supported languages are:
		 * - Danish (`'da'`)
		 * - Dutch (`'nl'`)
		 * - English (`'en'`)
		 * - Estonian (`'et'`)
		 * - French (`'fr'`)
		 * - German (`'de'`)
		 * - Italian (`'it'`)
		 * - Latvian (`'lv'`)
		 * - Lithuanian (`'lt'`)
		 * - Norwegian (`'no'`)
		 * - Polish (`'pl'`)
		 * - Portuguese (`'pt'`)
		 * - Romanian (`'ro'`)
		 * - Spanish (`'es'`)
		 * - Swedish (`'se'`)
		 * When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
		 * Required
		 */
		language: string;

		/** The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`. */
		link_customization_name?: string | null;

		/** Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array. Either `payment_id` or `consent_id` must be provided. */
		payment_initiation?: LinkTokenCreateRequestPaymentInitiation;

		/**
		 * List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted (unless you are using update mode to add Income or Assets to an Item); required otherwise.
		 * `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.
		 * The products specified here will determine which institutions will be available to your users in Link. Only institutions that support *all* requested products can be selected; a if a user attempts to select an institution that does not support a listed product, a "Connectivity not supported" error message will appear in Link. To maximize the number of institutions available, initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/initializing-products/).
		 * Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.
		 * In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
		 */
		products?: Array<Products>;

		/** A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). If initializing on Android, `android_package_name` must be specified instead and `redirect_uri` should be left blank. */
		redirect_uri?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** Specifies options for initializing Link for use with the Transfer product. */
		transfer?: LinkTokenCreateRequestTransfer;

		/** Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode). */
		update?: LinkTokenCreateRequestUpdate;

		/**
		 * An object specifying information about the end user who will be linking their account.
		 * Required
		 */
		user: LinkTokenCreateRequestUser;

		/** A user token generated using `/user/create`. Any Item created during the Link session will be associated with the user. */
		user_token?: string | null;

		/** The destination URL to which any webhooks should be sent. Note that webhooks for Payment Initiation (e-wallet transactions only), Transfer, Bank Transfer (including Auth micro-deposit notification webhooks) and Identity Verification are configured via the Dashboard instead. */
		webhook?: string | null;
	}

	/** LinkTokenCreateRequest defines the request schema for `/link/token/create` */
	export interface LinkTokenCreateRequestFormProperties {

		/** The `access_token` associated with the Item to update or reference, used when updating, modifying, or accessing an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link for a returning user as part of the Transfer UI flow. */
		access_token: FormControl<string | null | undefined>,

		/** The name of your app's Android package. Required if using the `link_token` to initialize Link on Android. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). When creating a `link_token` for initializing Link on other platforms, `android_package_name` must be left blank and `redirect_uri` should be used instead. */
		android_package_name: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display "This Application" instead.
		 * Required
		 */
		client_name: FormControl<string | null | undefined>,

		/** Used for certain Europe-only configurations, as well as certain legacy use cases in other regions. */
		institution_id: FormControl<string | null | undefined>,

		/**
		 * The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).
		 * Supported languages are:
		 * - Danish (`'da'`)
		 * - Dutch (`'nl'`)
		 * - English (`'en'`)
		 * - Estonian (`'et'`)
		 * - French (`'fr'`)
		 * - German (`'de'`)
		 * - Italian (`'it'`)
		 * - Latvian (`'lv'`)
		 * - Lithuanian (`'lt'`)
		 * - Norwegian (`'no'`)
		 * - Polish (`'pl'`)
		 * - Portuguese (`'pt'`)
		 * - Romanian (`'ro'`)
		 * - Spanish (`'es'`)
		 * - Swedish (`'se'`)
		 * When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
		 * Required
		 */
		language: FormControl<string | null | undefined>,

		/** The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`. */
		link_customization_name: FormControl<string | null | undefined>,

		/** A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). If initializing on Android, `android_package_name` must be specified instead and `redirect_uri` should be left blank. */
		redirect_uri: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** A user token generated using `/user/create`. Any Item created during the Link session will be associated with the user. */
		user_token: FormControl<string | null | undefined>,

		/** The destination URL to which any webhooks should be sent. Note that webhooks for Payment Initiation (e-wallet transactions only), Transfer, Bank Transfer (including Auth micro-deposit notification webhooks) and Identity Verification are configured via the Dashboard instead. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestFormGroup() {
		return new FormGroup<LinkTokenCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			android_package_name: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_id: new FormControl<string | null | undefined>(undefined),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			link_customization_name: new FormControl<string | null | undefined>(undefined),
			redirect_uri: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager. */
	export interface LinkTokenCreateRequestAuth {

		/** Specifies whether Auth Type Select is enabled for the Link session, allowing the end user to choose between linking instantly or manually prior to selecting their financial institution. Note that this can only be true if `same_day_microdeposits_enabled` is set to true. */
		auth_type_select_enabled?: boolean | null;

		/** Specifies whether the Link session is enabled for the Automated Micro-deposits flow. */
		automated_microdeposits_enabled?: boolean | null;

		/** This field has been deprecated in favor of `auth_type_select_enabled`. */
		flow_type?: LinkTokenCreateRequestAuthFlow_type | null;

		/** Specifies whether the Link session is enabled for the Instant Match flow. As of November 2022, Instant Match will be enabled by default. Instant Match can be disabled by setting this field to `false`. */
		instant_match_enabled?: boolean | null;

		/** Specifies whether the Link session is enabled for the Same Day Micro-deposits flow. */
		same_day_microdeposits_enabled?: boolean | null;
	}

	/** Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager. */
	export interface LinkTokenCreateRequestAuthFormProperties {

		/** Specifies whether Auth Type Select is enabled for the Link session, allowing the end user to choose between linking instantly or manually prior to selecting their financial institution. Note that this can only be true if `same_day_microdeposits_enabled` is set to true. */
		auth_type_select_enabled: FormControl<boolean | null | undefined>,

		/** Specifies whether the Link session is enabled for the Automated Micro-deposits flow. */
		automated_microdeposits_enabled: FormControl<boolean | null | undefined>,

		/** This field has been deprecated in favor of `auth_type_select_enabled`. */
		flow_type: FormControl<LinkTokenCreateRequestAuthFlow_type | null | undefined>,

		/** Specifies whether the Link session is enabled for the Instant Match flow. As of November 2022, Instant Match will be enabled by default. Instant Match can be disabled by setting this field to `false`. */
		instant_match_enabled: FormControl<boolean | null | undefined>,

		/** Specifies whether the Link session is enabled for the Same Day Micro-deposits flow. */
		same_day_microdeposits_enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestAuthFormGroup() {
		return new FormGroup<LinkTokenCreateRequestAuthFormProperties>({
			auth_type_select_enabled: new FormControl<boolean | null | undefined>(undefined),
			automated_microdeposits_enabled: new FormControl<boolean | null | undefined>(undefined),
			flow_type: new FormControl<LinkTokenCreateRequestAuthFlow_type | null | undefined>(undefined),
			instant_match_enabled: new FormControl<boolean | null | undefined>(undefined),
			same_day_microdeposits_enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum LinkTokenCreateRequestAuthFlow_type { FLEXIBLE_AUTH = 'FLEXIBLE_AUTH' }


	/** Specifies options for initializing Link for use with the Deposit Switch (beta) product. This field is required if `deposit_switch` is included in the `products` array. */
	export interface LinkTokenCreateRequestDepositSwitch {

		/**
		 * The `deposit_switch_id` provided by the `/deposit_switch/create` endpoint.
		 * Required
		 */
		deposit_switch_id: string;
	}

	/** Specifies options for initializing Link for use with the Deposit Switch (beta) product. This field is required if `deposit_switch` is included in the `products` array. */
	export interface LinkTokenCreateRequestDepositSwitchFormProperties {

		/**
		 * The `deposit_switch_id` provided by the `/deposit_switch/create` endpoint.
		 * Required
		 */
		deposit_switch_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestDepositSwitchFormGroup() {
		return new FormGroup<LinkTokenCreateRequestDepositSwitchFormProperties>({
			deposit_switch_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specifies options for initializing Link for use with the Employment product. This field is required if `employment` is included in the `products` array. */
	export interface LinkTokenCreateRequestEmployment {

		/** Specifies options for initializing Link for use with Bank Employment. This field is required if `employment` is included in the `products` array and `bank` is specified in `employment_source_types`. */
		bank_employment?: LinkTokenCreateRequestEmploymentBankIncome;

		/** The types of source employment data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
		employment_source_types?: Array<EmploymentSourceType>;
	}

	/** Specifies options for initializing Link for use with the Employment product. This field is required if `employment` is included in the `products` array. */
	export interface LinkTokenCreateRequestEmploymentFormProperties {
	}
	export function CreateLinkTokenCreateRequestEmploymentFormGroup() {
		return new FormGroup<LinkTokenCreateRequestEmploymentFormProperties>({
		});

	}


	/** Specifies options for initializing Link for use with Bank Employment. This field is required if `employment` is included in the `products` array and `bank` is specified in `employment_source_types`. */
	export interface LinkTokenCreateRequestEmploymentBankIncome {

		/**
		 * The number of days of data to request for the Bank Employment product.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested: number;
	}

	/** Specifies options for initializing Link for use with Bank Employment. This field is required if `employment` is included in the `products` array and `bank` is specified in `employment_source_types`. */
	export interface LinkTokenCreateRequestEmploymentBankIncomeFormProperties {

		/**
		 * The number of days of data to request for the Bank Employment product.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested: FormControl<number | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestEmploymentBankIncomeFormGroup() {
		return new FormGroup<LinkTokenCreateRequestEmploymentBankIncomeFormProperties>({
			days_requested: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration parameters for EU flows */
	export interface LinkTokenEUConfig {

		/** If `true`, open Link without an initial UI. Defaults to `false`. */
		headless?: boolean | null;
	}

	/** Configuration parameters for EU flows */
	export interface LinkTokenEUConfigFormProperties {

		/** If `true`, open Link without an initial UI. Defaults to `false`. */
		headless: FormControl<boolean | null | undefined>,
	}
	export function CreateLinkTokenEUConfigFormGroup() {
		return new FormGroup<LinkTokenEUConfigFormProperties>({
			headless: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Specifies option for initializing Link for use with the Identity Verification product. */
	export interface LinkTokenCreateRequestIdentityVerification {
		consent?: boolean | null;

		/**
		 * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.
		 * If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
		 */
		gave_consent?: boolean | null;

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: string;
	}

	/** Specifies option for initializing Link for use with the Identity Verification product. */
	export interface LinkTokenCreateRequestIdentityVerificationFormProperties {
		consent: FormControl<boolean | null | undefined>,

		/**
		 * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.
		 * If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
		 */
		gave_consent: FormControl<boolean | null | undefined>,

		/**
		 * ID of the associated Identity Verification template.
		 * Required
		 */
		template_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestIdentityVerificationFormGroup() {
		return new FormGroup<LinkTokenCreateRequestIdentityVerificationFormProperties>({
			consent: new FormControl<boolean | null | undefined>(undefined),
			gave_consent: new FormControl<boolean | null | undefined>(undefined),
			template_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specifies options for initializing Link for use with the Income product. This field is required if `income_verification` is included in the `products` array. */
	export interface LinkTokenCreateRequestIncomeVerification {

		/**
		 * An array of access tokens corresponding to Items that a user has previously connected with. Data from these institutions will be cross-referenced with document data received during the Document Income flow to help verify that the uploaded documents are accurate. If the `transactions` product was not initialized for these Items during link, it will be initialized after this Link session.
		 * This field should only be used with the `payroll` income source type.
		 */
		access_tokens?: Array<string>;

		/** The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped. */
		asset_report_id?: string | null;

		/** Specifies options for initializing Link for use with Bank Income. This field is required if `income_verification` is included in the `products` array and `bank` is specified in `income_source_types`. */
		bank_income?: LinkTokenCreateRequestIncomeVerificationBankIncome;

		/** The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
		income_source_types?: Array<IncomeVerificationSourceType>;

		/** The `income_verification_id` of the verification instance, as provided by `/income/verification/create`. */
		income_verification_id?: string | null;

		/** Specifies options for initializing Link for use with Payroll Income. */
		payroll_income?: LinkTokenCreateRequestIncomeVerificationPayrollIncome;

		/** The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user. */
		precheck_id?: string | null;

		/** A list of user stated income sources */
		stated_income_sources?: Array<LinkTokenCreateRequestUserStatedIncomeSource>;
	}

	/** Specifies options for initializing Link for use with the Income product. This field is required if `income_verification` is included in the `products` array. */
	export interface LinkTokenCreateRequestIncomeVerificationFormProperties {

		/** The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped. */
		asset_report_id: FormControl<string | null | undefined>,

		/** The `income_verification_id` of the verification instance, as provided by `/income/verification/create`. */
		income_verification_id: FormControl<string | null | undefined>,

		/** The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user. */
		precheck_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestIncomeVerificationFormGroup() {
		return new FormGroup<LinkTokenCreateRequestIncomeVerificationFormProperties>({
			asset_report_id: new FormControl<string | null | undefined>(undefined),
			income_verification_id: new FormControl<string | null | undefined>(undefined),
			precheck_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies options for initializing Link for use with Bank Income. This field is required if `income_verification` is included in the `products` array and `bank` is specified in `income_source_types`. */
	export interface LinkTokenCreateRequestIncomeVerificationBankIncome {

		/**
		 * The number of days of data to request for the Bank Income product
		 * Required
		 * Minimum: 1
		 * Maximum: 731
		 */
		days_requested: number;

		/** Whether to enable multiple Items to be added in the Link session */
		enable_multiple_items?: boolean | null;
	}

	/** Specifies options for initializing Link for use with Bank Income. This field is required if `income_verification` is included in the `products` array and `bank` is specified in `income_source_types`. */
	export interface LinkTokenCreateRequestIncomeVerificationBankIncomeFormProperties {

		/**
		 * The number of days of data to request for the Bank Income product
		 * Required
		 * Minimum: 1
		 * Maximum: 731
		 */
		days_requested: FormControl<number | null | undefined>,

		/** Whether to enable multiple Items to be added in the Link session */
		enable_multiple_items: FormControl<boolean | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestIncomeVerificationBankIncomeFormGroup() {
		return new FormGroup<LinkTokenCreateRequestIncomeVerificationBankIncomeFormProperties>({
			days_requested: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1), Validators.max(731)]),
			enable_multiple_items: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Specifies options for initializing Link for use with Payroll Income. */
	export interface LinkTokenCreateRequestIncomeVerificationPayrollIncome {

		/** The types of payroll income verification to enable for the Link session. If none are specified, then users will see both document and digital payroll income. */
		flow_types?: Array<IncomeVerificationPayrollFlowType>;

		/** An identifier to indicate whether the income verification Link token will be used for an update or not */
		is_update_mode?: boolean | null;

		/** Uniquely identify a payroll income item to update with. It should only be used for update mode. */
		item_id_to_update?: string | null;
	}

	/** Specifies options for initializing Link for use with Payroll Income. */
	export interface LinkTokenCreateRequestIncomeVerificationPayrollIncomeFormProperties {

		/** An identifier to indicate whether the income verification Link token will be used for an update or not */
		is_update_mode: FormControl<boolean | null | undefined>,

		/** Uniquely identify a payroll income item to update with. It should only be used for update mode. */
		item_id_to_update: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestIncomeVerificationPayrollIncomeFormGroup() {
		return new FormGroup<LinkTokenCreateRequestIncomeVerificationPayrollIncomeFormProperties>({
			is_update_mode: new FormControl<boolean | null | undefined>(undefined),
			item_id_to_update: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies user stated income sources for the Income product */
	export interface LinkTokenCreateRequestUserStatedIncomeSource {

		/** The income category for a specified income source */
		category?: LinkTokenCreateRequestUserStatedIncomeSourceCategory | null;

		/** The employer corresponding to an income source specified by the user */
		employer?: string | null;

		/**
		 * The income amount paid annually for a specified income source
		 * Type: double
		 */
		pay_annual?: number | null;

		/** The pay frequency of a specified income source */
		pay_frequency?: LinkTokenCreateRequestUserStatedIncomeSourcePay_frequency | null;

		/**
		 * The income amount paid per cycle for a specified income source
		 * Type: double
		 */
		pay_per_cycle?: number | null;

		/** The pay type - `GROSS`, `NET`, or `UNKNOWN` for a specified income source */
		pay_type?: LinkTokenCreateRequestUserStatedIncomeSourcePay_type | null;
	}

	/** Specifies user stated income sources for the Income product */
	export interface LinkTokenCreateRequestUserStatedIncomeSourceFormProperties {

		/** The income category for a specified income source */
		category: FormControl<LinkTokenCreateRequestUserStatedIncomeSourceCategory | null | undefined>,

		/** The employer corresponding to an income source specified by the user */
		employer: FormControl<string | null | undefined>,

		/**
		 * The income amount paid annually for a specified income source
		 * Type: double
		 */
		pay_annual: FormControl<number | null | undefined>,

		/** The pay frequency of a specified income source */
		pay_frequency: FormControl<LinkTokenCreateRequestUserStatedIncomeSourcePay_frequency | null | undefined>,

		/**
		 * The income amount paid per cycle for a specified income source
		 * Type: double
		 */
		pay_per_cycle: FormControl<number | null | undefined>,

		/** The pay type - `GROSS`, `NET`, or `UNKNOWN` for a specified income source */
		pay_type: FormControl<LinkTokenCreateRequestUserStatedIncomeSourcePay_type | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestUserStatedIncomeSourceFormGroup() {
		return new FormGroup<LinkTokenCreateRequestUserStatedIncomeSourceFormProperties>({
			category: new FormControl<LinkTokenCreateRequestUserStatedIncomeSourceCategory | null | undefined>(undefined),
			employer: new FormControl<string | null | undefined>(undefined),
			pay_annual: new FormControl<number | null | undefined>(undefined),
			pay_frequency: new FormControl<LinkTokenCreateRequestUserStatedIncomeSourcePay_frequency | null | undefined>(undefined),
			pay_per_cycle: new FormControl<number | null | undefined>(undefined),
			pay_type: new FormControl<LinkTokenCreateRequestUserStatedIncomeSourcePay_type | null | undefined>(undefined),
		});

	}

	export enum LinkTokenCreateRequestUserStatedIncomeSourceCategory { OTHER = 'OTHER', SALARY = 'SALARY', UNEMPLOYMENT = 'UNEMPLOYMENT', CASH = 'CASH', GIG_ECONOMY = 'GIG_ECONOMY', RENTAL = 'RENTAL', CHILD_SUPPORT = 'CHILD_SUPPORT', MILITARY = 'MILITARY', RETIREMENT = 'RETIREMENT', LONG_TERM_DISABILITY = 'LONG_TERM_DISABILITY', BANK_INTEREST = 'BANK_INTEREST' }

	export enum LinkTokenCreateRequestUserStatedIncomeSourcePay_frequency { UNKNOWN = 'UNKNOWN', WEEKLY = 'WEEKLY', BIWEEKLY = 'BIWEEKLY', SEMI_MONTHLY = 'SEMI_MONTHLY', MONTHLY = 'MONTHLY' }

	export enum LinkTokenCreateRequestUserStatedIncomeSourcePay_type { UNKNOWN = 'UNKNOWN', GROSS = 'GROSS', NET = 'NET' }


	/** Configuration parameters for the Investments product */
	export interface LinkTokenInvestments {

		/** If `true`, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to `false`. */
		allow_unverified_crypto_wallets?: boolean | null;
	}

	/** Configuration parameters for the Investments product */
	export interface LinkTokenInvestmentsFormProperties {

		/** If `true`, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to `false`. */
		allow_unverified_crypto_wallets: FormControl<boolean | null | undefined>,
	}
	export function CreateLinkTokenInvestmentsFormGroup() {
		return new FormGroup<LinkTokenInvestmentsFormProperties>({
			allow_unverified_crypto_wallets: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array. Either `payment_id` or `consent_id` must be provided. */
	export interface LinkTokenCreateRequestPaymentInitiation {

		/** The `consent_id` provided by the `/payment_initiation/consent/create` endpoint. */
		consent_id?: string | null;

		/** The `payment_id` provided by the `/payment_initiation/payment/create` endpoint. */
		payment_id?: string | null;
	}

	/** Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array. Either `payment_id` or `consent_id` must be provided. */
	export interface LinkTokenCreateRequestPaymentInitiationFormProperties {

		/** The `consent_id` provided by the `/payment_initiation/consent/create` endpoint. */
		consent_id: FormControl<string | null | undefined>,

		/** The `payment_id` provided by the `/payment_initiation/payment/create` endpoint. */
		payment_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestPaymentInitiationFormGroup() {
		return new FormGroup<LinkTokenCreateRequestPaymentInitiationFormProperties>({
			consent_id: new FormControl<string | null | undefined>(undefined),
			payment_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies options for initializing Link for use with the Transfer product. */
	export interface LinkTokenCreateRequestTransfer {

		/** The `id` returned by the `/transfer/intent/create` endpoint. */
		intent_id?: string | null;

		/** The `payment_profile_token` returned by the `/payment_profile/create` endpoint. */
		payment_profile_token?: string | null;
	}

	/** Specifies options for initializing Link for use with the Transfer product. */
	export interface LinkTokenCreateRequestTransferFormProperties {

		/** The `id` returned by the `/transfer/intent/create` endpoint. */
		intent_id: FormControl<string | null | undefined>,

		/** The `payment_profile_token` returned by the `/payment_profile/create` endpoint. */
		payment_profile_token: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestTransferFormGroup() {
		return new FormGroup<LinkTokenCreateRequestTransferFormProperties>({
			intent_id: new FormControl<string | null | undefined>(undefined),
			payment_profile_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode). */
	export interface LinkTokenCreateRequestUpdate {

		/** If `true`, enables [update mode with Account Select](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts). */
		account_selection_enabled?: boolean | null;
	}

	/** Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode). */
	export interface LinkTokenCreateRequestUpdateFormProperties {

		/** If `true`, enables [update mode with Account Select](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts). */
		account_selection_enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestUpdateFormGroup() {
		return new FormGroup<LinkTokenCreateRequestUpdateFormProperties>({
			account_selection_enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** An object specifying information about the end user who will be linking their account. */
	export interface LinkTokenCreateRequestUser {

		/** Home address for the user. */
		address?: UserAddress;

		/**
		 * A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard.
		 * Required
		 */
		client_user_id: string;

		/**
		 * To be provided in the format "yyyy-mm-dd". Not currently used.
		 * Type: DateOnly
		 */
		date_of_birth?: Date | null;

		/** The user's email address. This field is optional, but required to enable the [pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#pre-authenticated-rux). */
		email_address?: string | null;

		/**
		 * The date and time the email address was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.
		 * Only pass a verification time for an email address that you have verified. If you have performed verification but donâ€™t have the time, you may supply a signal value of the start of the UNIX epoch.
		 * Example: `2020-01-01T00:00:00Z`
		 */
		email_address_verified_time?: Date | null;

		/** ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled. */
		id_number?: UserIDNumber;

		/** The user's full legal name, used for [micro-deposit based verification flows](https://plaid.com/docs/auth/coverage/). For a small number of customers on legacy flows, providing this field is required to enable micro-deposit-based flows. For all other customers, this field is optional, but providing the user's name in this field when using micro-deposit-based verification will enable certain risk checks and can reduce micro-deposit fraud. */
		legal_name?: string | null;
		name?: IdentityVerificationRequestUserName;

		/** The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. This field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user). */
		phone_number?: string | null;

		/**
		 * The date and time the phone number was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.
		 * Only pass a verification time for a phone number that you have verified. If you have performed verification but donâ€™t have the time, you may supply a signal value of the start of the UNIX epoch.
		 * Example: `2020-01-01T00:00:00Z`
		 */
		phone_number_verified_time?: Date | null;

		/** To be provided in the format "ddd-dd-dddd". Not currently used. */
		ssn?: string | null;
	}

	/** An object specifying information about the end user who will be linking their account. */
	export interface LinkTokenCreateRequestUserFormProperties {

		/**
		 * A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard.
		 * Required
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * To be provided in the format "yyyy-mm-dd". Not currently used.
		 * Type: DateOnly
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/** The user's email address. This field is optional, but required to enable the [pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#pre-authenticated-rux). */
		email_address: FormControl<string | null | undefined>,

		/**
		 * The date and time the email address was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.
		 * Only pass a verification time for an email address that you have verified. If you have performed verification but donâ€™t have the time, you may supply a signal value of the start of the UNIX epoch.
		 * Example: `2020-01-01T00:00:00Z`
		 */
		email_address_verified_time: FormControl<Date | null | undefined>,

		/** The user's full legal name, used for [micro-deposit based verification flows](https://plaid.com/docs/auth/coverage/). For a small number of customers on legacy flows, providing this field is required to enable micro-deposit-based flows. For all other customers, this field is optional, but providing the user's name in this field when using micro-deposit-based verification will enable certain risk checks and can reduce micro-deposit fraud. */
		legal_name: FormControl<string | null | undefined>,

		/** The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. This field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user). */
		phone_number: FormControl<string | null | undefined>,

		/**
		 * The date and time the phone number was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.
		 * Only pass a verification time for a phone number that you have verified. If you have performed verification but donâ€™t have the time, you may supply a signal value of the start of the UNIX epoch.
		 * Example: `2020-01-01T00:00:00Z`
		 */
		phone_number_verified_time: FormControl<Date | null | undefined>,

		/** To be provided in the format "ddd-dd-dddd". Not currently used. */
		ssn: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateRequestUserFormGroup() {
		return new FormGroup<LinkTokenCreateRequestUserFormProperties>({
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			date_of_birth: new FormControl<Date | null | undefined>(undefined),
			email_address: new FormControl<string | null | undefined>(undefined),
			email_address_verified_time: new FormControl<Date | null | undefined>(undefined),
			legal_name: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
			phone_number_verified_time: new FormControl<Date | null | undefined>(undefined),
			ssn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.
	 * For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
	 * For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window.
	 */
	export interface LinkTokenCreateRequestAccountSubtypes {

		/** A filter to apply to `credit`-type accounts */
		credit?: LinkTokenCreateCreditFilter;

		/** A filter to apply to `depository`-type accounts */
		depository?: LinkTokenCreateDepositoryFilter;

		/** A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
		investment?: LinkTokenCreateInvestmentFilter;

		/** A filter to apply to `loan`-type accounts */
		loan?: LinkTokenCreateLoanFilter;
	}

	/**
	 * By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.
	 * For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
	 * For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window.
	 */
	export interface LinkTokenCreateRequestAccountSubtypesFormProperties {
	}
	export function CreateLinkTokenCreateRequestAccountSubtypesFormGroup() {
		return new FormGroup<LinkTokenCreateRequestAccountSubtypesFormProperties>({
		});

	}


	/** LinkTokenCreateResponse defines the response schema for `/link/token/create` */
	export interface LinkTokenCreateResponse {

		/**
		 * The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.
		 * Required
		 */
		expiration: Date;

		/**
		 * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
		 * Required
		 */
		link_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** LinkTokenCreateResponse defines the response schema for `/link/token/create` */
	export interface LinkTokenCreateResponseFormProperties {

		/**
		 * The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.
		 * Required
		 */
		expiration: FormControl<Date | null | undefined>,

		/**
		 * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
		 * Required
		 */
		link_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenCreateResponseFormGroup() {
		return new FormGroup<LinkTokenCreateResponseFormProperties>({
			expiration: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			link_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object specifying the arguments originally provided to the `/link/token/create` call. */
	export interface LinkTokenGetMetadataResponse {

		/**
		 * The `account_filters` specified in the original call to `/link/token/create`.
		 */
		account_filters?: AccountFiltersResponse;

		/**
		 * The `client_name` specified in the `/link/token/create` call.
		 * Required
		 */
		client_name: string;

		/**
		 * The `country_codes` specified in the `/link/token/create` call.
		 * Required
		 */
		country_codes: Array<CountryCode>;

		/**
		 * The `products` specified in the `/link/token/create` call.
		 * Required
		 */
		initial_products: Array<Products>;

		/** A map containing data used to highlight institutions in Link. */
		institution_data?: LinkTokenCreateInstitutionData;

		/**
		 * The `language` specified in the `/link/token/create` call.
		 * Required
		 */
		language: string;

		/**
		 * The `redirect_uri` specified in the `/link/token/create` call.
		 * Required
		 */
		redirect_uri: string;

		/**
		 * The `webhook` specified in the `/link/token/create` call.
		 * Required
		 */
		webhook: string;
	}

	/** An object specifying the arguments originally provided to the `/link/token/create` call. */
	export interface LinkTokenGetMetadataResponseFormProperties {

		/**
		 * The `client_name` specified in the `/link/token/create` call.
		 * Required
		 */
		client_name: FormControl<string | null | undefined>,

		/**
		 * The `language` specified in the `/link/token/create` call.
		 * Required
		 */
		language: FormControl<string | null | undefined>,

		/**
		 * The `redirect_uri` specified in the `/link/token/create` call.
		 * Required
		 */
		redirect_uri: FormControl<string | null | undefined>,

		/**
		 * The `webhook` specified in the `/link/token/create` call.
		 * Required
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenGetMetadataResponseFormGroup() {
		return new FormGroup<LinkTokenGetMetadataResponseFormProperties>({
			client_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			language: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			redirect_uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** LinkTokenGetRequest defines the request schema for `/link/token/get` */
	export interface LinkTokenGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A `link_token` from a previous invocation of `/link/token/create`
		 * Required
		 */
		link_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** LinkTokenGetRequest defines the request schema for `/link/token/get` */
	export interface LinkTokenGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A `link_token` from a previous invocation of `/link/token/create`
		 * Required
		 */
		link_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenGetRequestFormGroup() {
		return new FormGroup<LinkTokenGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			link_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** LinkTokenGetResponse defines the response schema for `/link/token/get` */
	export interface LinkTokenGetResponse {

		/**
		 * The creation timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		created_at: Date;

		/**
		 * The expiration timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		expiration: Date;

		/**
		 * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
		 * Required
		 */
		link_token: string;

		/**
		 * An object specifying the arguments originally provided to the `/link/token/create` call.
		 * Required
		 */
		metadata: LinkTokenGetMetadataResponse;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** LinkTokenGetResponse defines the response schema for `/link/token/get` */
	export interface LinkTokenGetResponseFormProperties {

		/**
		 * The creation timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The expiration timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		expiration: FormControl<Date | null | undefined>,

		/**
		 * A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`.
		 * Required
		 */
		link_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateLinkTokenGetResponseFormGroup() {
		return new FormGroup<LinkTokenGetResponseFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			expiration: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			link_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Webhook indicating that the status of the delivery of the hosted link session to a user */
	export interface LinkUserDeliveryStatusWebhook {

		/**
		 * Information related to the related to the delivery of the link session to users
		 * Required
		 */
		link_delivery_metadata: LinkDeliveryMetadata;

		/**
		 * The ID of the link delivery session.
		 * Required
		 */
		link_delivery_session_id: string;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		timestamp: string;

		/**
		 * `DELIVERY_STATUS`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `LINK_DELIVERY`
		 * Required
		 */
		webhook_type: string;
	}

	/** Webhook indicating that the status of the delivery of the hosted link session to a user */
	export interface LinkUserDeliveryStatusWebhookFormProperties {

		/**
		 * The ID of the link delivery session.
		 * Required
		 */
		link_delivery_session_id: FormControl<string | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		timestamp: FormControl<string | null | undefined>,

		/**
		 * `DELIVERY_STATUS`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `LINK_DELIVERY`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateLinkUserDeliveryStatusWebhookFormGroup() {
		return new FormGroup<LinkUserDeliveryStatusWebhookFormProperties>({
			link_delivery_session_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions. */
	export interface LoanAccount {

		/**
		 * Auto loan
		 * Required
		 */
		auto: string;

		/**
		 * Business loan
		 * Required
		 */
		business: string;

		/**
		 * Commercial loan
		 * Required
		 */
		commercial: string;

		/**
		 * Construction loan
		 * Required
		 */
		construction: string;

		/**
		 * Consumer loan
		 * Required
		 */
		consumer: string;

		/**
		 * Home Equity Line of Credit (HELOC)
		 * Required
		 */
		'home equity': string;

		/**
		 * Pre-approved line of credit
		 * Required
		 */
		'line of credit': string;

		/**
		 * General loan
		 * Required
		 */
		loan: string;

		/**
		 * Mortgage loan
		 * Required
		 */
		mortgage: string;

		/**
		 * Other loan type or unknown loan type
		 * Required
		 */
		other: string;

		/**
		 * Pre-approved overdraft account, usually tied to a checking account
		 * Required
		 */
		overdraft: string;

		/**
		 * Student loan
		 * Required
		 */
		student: string;
	}

	/** A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions. */
	export interface LoanAccountFormProperties {

		/**
		 * Auto loan
		 * Required
		 */
		auto: FormControl<string | null | undefined>,

		/**
		 * Business loan
		 * Required
		 */
		business: FormControl<string | null | undefined>,

		/**
		 * Commercial loan
		 * Required
		 */
		commercial: FormControl<string | null | undefined>,

		/**
		 * Construction loan
		 * Required
		 */
		construction: FormControl<string | null | undefined>,

		/**
		 * Consumer loan
		 * Required
		 */
		consumer: FormControl<string | null | undefined>,

		/**
		 * Home Equity Line of Credit (HELOC)
		 * Required
		 */
		'home equity': FormControl<string | null | undefined>,

		/**
		 * Pre-approved line of credit
		 * Required
		 */
		'line of credit': FormControl<string | null | undefined>,

		/**
		 * General loan
		 * Required
		 */
		loan: FormControl<string | null | undefined>,

		/**
		 * Mortgage loan
		 * Required
		 */
		mortgage: FormControl<string | null | undefined>,

		/**
		 * Other loan type or unknown loan type
		 * Required
		 */
		other: FormControl<string | null | undefined>,

		/**
		 * Pre-approved overdraft account, usually tied to a checking account
		 * Required
		 */
		overdraft: FormControl<string | null | undefined>,

		/**
		 * Student loan
		 * Required
		 */
		student: FormControl<string | null | undefined>,
	}
	export function CreateLoanAccountFormGroup() {
		return new FormGroup<LoanAccountFormProperties>({
			auto: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			business: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			commercial: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			construction: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			consumer: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'home equity': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			'line of credit': new FormControl<string | null | undefined>(undefined, [Validators.required]),
			loan: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mortgage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			other: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			overdraft: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			student: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A value from a MISMO prescribed list that specifies the type of loan identifier. */
	export enum LoanIdentifierType { LenderLoan = 'LenderLoan', UniversalLoan = 'UniversalLoan' }


	/** Specifies the multi-factor authentication settings to use with this test account */
	export interface MFA {

		/**
		 * Number of rounds of questions. Required if value of `type` is `questions`.
		 * Required
		 * Type: double
		 */
		question_rounds: number;

		/**
		 * Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.
		 * Required
		 * Type: double
		 */
		questions_per_round: number;

		/**
		 * Number of rounds of selections, used if `type` is `selections`. Defaults to 1.
		 * Required
		 * Type: double
		 */
		selection_rounds: number;

		/**
		 * Number of available answers per question, used if `type` is `selection`. Defaults to 2.
		 * Required
		 * Type: double
		 */
		selections_per_question: number;

		/**
		 * Possible values are `device`, `selections`, or `questions`.
		 * If value is `device`, the MFA answer is `1234`.
		 * If value is `selections`, the MFA answer is always the first option.
		 * If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
		 * Required
		 */
		type: string;
	}

	/** Specifies the multi-factor authentication settings to use with this test account */
	export interface MFAFormProperties {

		/**
		 * Number of rounds of questions. Required if value of `type` is `questions`.
		 * Required
		 * Type: double
		 */
		question_rounds: FormControl<number | null | undefined>,

		/**
		 * Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.
		 * Required
		 * Type: double
		 */
		questions_per_round: FormControl<number | null | undefined>,

		/**
		 * Number of rounds of selections, used if `type` is `selections`. Defaults to 1.
		 * Required
		 * Type: double
		 */
		selection_rounds: FormControl<number | null | undefined>,

		/**
		 * Number of available answers per question, used if `type` is `selection`. Defaults to 2.
		 * Required
		 * Type: double
		 */
		selections_per_question: FormControl<number | null | undefined>,

		/**
		 * Possible values are `device`, `selections`, or `questions`.
		 * If value is `device`, the MFA answer is `1234`.
		 * If value is `selections`, the MFA answer is always the first option.
		 * If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreateMFAFormGroup() {
		return new FormGroup<MFAFormProperties>({
			question_rounds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			questions_per_round: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			selection_rounds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			selections_per_question: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * An enum indicating the match type between data provided by user and data checked against an external data source.
	 * `match` indicates that the provided input data was a strong match against external data.
	 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
	 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
	 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
	 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
	 */
	export enum MatchSummaryCode { match = 'match', partial_match = 'partial_match', no_match = 'no_match', no_data = 'no_data', no_input = 'no_input' }


	/** Allows specifying the metadata of the test account */
	export interface Meta {

		/**
		 * The account's limit
		 * Required
		 * Type: double
		 */
		limit: number;

		/**
		 * The account's mask. Should be a string of 2-4 alphanumeric characters. This allows you to model a mask which does not match the account number (such as with a virtual account number).
		 * Required
		 * Min length: 2
		 * Max length: 4
		 */
		mask: string;

		/**
		 * The account's name
		 * Required
		 */
		name: string;

		/**
		 * The account's official name
		 * Required
		 */
		official_name: string;
	}

	/** Allows specifying the metadata of the test account */
	export interface MetaFormProperties {

		/**
		 * The account's limit
		 * Required
		 * Type: double
		 */
		limit: FormControl<number | null | undefined>,

		/**
		 * The account's mask. Should be a string of 2-4 alphanumeric characters. This allows you to model a mask which does not match the account number (such as with a virtual account number).
		 * Required
		 * Min length: 2
		 * Max length: 4
		 */
		mask: FormControl<string | null | undefined>,

		/**
		 * The account's name
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The account's official name
		 * Required
		 */
		official_name: FormControl<string | null | undefined>,
	}
	export function CreateMetaFormGroup() {
		return new FormGroup<MetaFormProperties>({
			limit: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			mask: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(4), Validators.pattern('^[A-Za-z0-9]{2,4}$')]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			official_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when Plaid detects a new account for Items created or updated with [Account Select v2](https://plaid.com/docs/link/customization/#account-select). Upon receiving this webhook, you can prompt your users to share new accounts with you through [Account Select v2 update mode](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts). */
	export interface NewAccountsAvailableWebhook {

		/** The Plaid environment the webhook was sent from */
		environment?: AssetsErrorWebhookEnvironment | null;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/** The `item_id` of the Item associated with this webhook, warning, or error */
		item_id?: string | null;

		/** `NEW_ACCOUNTS_AVAILABLE` */
		webhook_code?: string | null;

		/** `ITEM` */
		webhook_type?: string | null;
	}

	/** Fired when Plaid detects a new account for Items created or updated with [Account Select v2](https://plaid.com/docs/link/customization/#account-select). Upon receiving this webhook, you can prompt your users to share new accounts with you through [Account Select v2 update mode](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts). */
	export interface NewAccountsAvailableWebhookFormProperties {

		/** The Plaid environment the webhook was sent from */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/** The `item_id` of the Item associated with this webhook, warning, or error */
		item_id: FormControl<string | null | undefined>,

		/** `NEW_ACCOUNTS_AVAILABLE` */
		webhook_code: FormControl<string | null | undefined>,

		/** `ITEM` */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateNewAccountsAvailableWebhookFormGroup() {
		return new FormGroup<NewAccountsAvailableWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			webhook_code: new FormControl<string | null | undefined>(undefined),
			webhook_type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Account and bank identifier number data used to configure the test account. All values are optional. */
	export interface Numbers {

		/** Will be used for the account number. */
		account?: string | null;

		/** Must be a valid ACH routing number. */
		ach_routing?: string | null;

		/** Must be a valid wire transfer routing number. */
		ach_wire_routing?: string | null;

		/** BACS sort code */
		bacs_sort_code?: string | null;

		/** EFT branch number. Must be specified alongside `eft_institution`. */
		eft_branch?: string | null;

		/** EFT institution number. Must be specified alongside `eft_branch`. */
		eft_institution?: string | null;

		/** Bank identifier code (BIC). Must be specified alongside `international_iban`. */
		international_bic?: string | null;

		/** International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`. */
		international_iban?: string | null;
	}

	/** Account and bank identifier number data used to configure the test account. All values are optional. */
	export interface NumbersFormProperties {

		/** Will be used for the account number. */
		account: FormControl<string | null | undefined>,

		/** Must be a valid ACH routing number. */
		ach_routing: FormControl<string | null | undefined>,

		/** Must be a valid wire transfer routing number. */
		ach_wire_routing: FormControl<string | null | undefined>,

		/** BACS sort code */
		bacs_sort_code: FormControl<string | null | undefined>,

		/** EFT branch number. Must be specified alongside `eft_institution`. */
		eft_branch: FormControl<string | null | undefined>,

		/** EFT institution number. Must be specified alongside `eft_branch`. */
		eft_institution: FormControl<string | null | undefined>,

		/** Bank identifier code (BIC). Must be specified alongside `international_iban`. */
		international_bic: FormControl<string | null | undefined>,

		/** International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`. */
		international_iban: FormControl<string | null | undefined>,
	}
	export function CreateNumbersFormGroup() {
		return new FormGroup<NumbersFormProperties>({
			account: new FormControl<string | null | undefined>(undefined),
			ach_routing: new FormControl<string | null | undefined>(undefined),
			ach_wire_routing: new FormControl<string | null | undefined>(undefined),
			bacs_sort_code: new FormControl<string | null | undefined>(undefined),
			eft_branch: new FormControl<string | null | undefined>(undefined),
			eft_institution: new FormControl<string | null | undefined>(undefined),
			international_bic: new FormControl<string | null | undefined>(undefined),
			international_iban: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Identifying information for transferring money to or from a US account via ACH or wire transfer. */
	export interface NumbersACHNullable extends NumbersACH {
	}

	/** Identifying information for transferring money to or from a US account via ACH or wire transfer. */
	export interface NumbersACHNullableFormProperties extends NumbersACHFormProperties {
	}
	export function CreateNumbersACHNullableFormGroup() {
		return new FormGroup<NumbersACHNullableFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			can_transfer_in: new FormControl<boolean | null | undefined>(undefined),
			can_transfer_out: new FormControl<boolean | null | undefined>(undefined),
			routing: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			wire_routing: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Identifying information for transferring money to or from a UK bank account via BACS. */
	export interface NumbersBACSNullable extends NumbersBACS {
	}

	/** Identifying information for transferring money to or from a UK bank account via BACS. */
	export interface NumbersBACSNullableFormProperties extends NumbersBACSFormProperties {
	}
	export function CreateNumbersBACSNullableFormGroup() {
		return new FormGroup<NumbersBACSNullableFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sort_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Identifying information for transferring money to or from a Canadian bank account via EFT. */
	export interface NumbersEFTNullable extends NumbersEFT {
	}

	/** Identifying information for transferring money to or from a Canadian bank account via EFT. */
	export interface NumbersEFTNullableFormProperties extends NumbersEFTFormProperties {
	}
	export function CreateNumbersEFTNullableFormGroup() {
		return new FormGroup<NumbersEFTNullableFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			branch: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Account numbers using the International Bank Account Number and BIC/SWIFT code format. */
	export interface NumbersInternationalIBAN {

		/**
		 * The Business Identifier Code, also known as SWIFT code, for this bank account.
		 * Required
		 * Min length: 8
		 * Max length: 11
		 */
		bic: string;

		/**
		 * International Bank Account Number (IBAN).
		 * Required
		 * Min length: 15
		 * Max length: 34
		 */
		iban: string;
	}

	/** Account numbers using the International Bank Account Number and BIC/SWIFT code format. */
	export interface NumbersInternationalIBANFormProperties {

		/**
		 * The Business Identifier Code, also known as SWIFT code, for this bank account.
		 * Required
		 * Min length: 8
		 * Max length: 11
		 */
		bic: FormControl<string | null | undefined>,

		/**
		 * International Bank Account Number (IBAN).
		 * Required
		 * Min length: 15
		 * Max length: 34
		 */
		iban: FormControl<string | null | undefined>,
	}
	export function CreateNumbersInternationalIBANFormGroup() {
		return new FormGroup<NumbersInternationalIBANFormProperties>({
			bic: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(8), Validators.maxLength(11)]),
			iban: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(15), Validators.maxLength(34)]),
		});

	}


	/** Identifying information for transferring money to or from an international bank account via wire transfer. */
	export interface NumbersInternationalNullable extends NumbersInternational {
	}

	/** Identifying information for transferring money to or from an international bank account via wire transfer. */
	export interface NumbersInternationalNullableFormProperties extends NumbersInternationalFormProperties {
	}
	export function CreateNumbersInternationalNullableFormGroup() {
		return new FormGroup<NumbersInternationalNullableFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			bic: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iban: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Originator and their status. */
	export interface Originator {

		/**
		 * Originatorâ€™s client ID.
		 * Required
		 */
		client_id: string;

		/**
		 * Originatorâ€™s diligence status.
		 * Required
		 */
		transfer_diligence_status: DetailedOriginatorTransfer_diligence_status;
	}

	/** Originator and their status. */
	export interface OriginatorFormProperties {

		/**
		 * Originatorâ€™s client ID.
		 * Required
		 */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Originatorâ€™s diligence status.
		 * Required
		 */
		transfer_diligence_status: FormControl<DetailedOriginatorTransfer_diligence_status | null | undefined>,
	}
	export function CreateOriginatorFormGroup() {
		return new FormGroup<OriginatorFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_diligence_status: new FormControl<DetailedOriginatorTransfer_diligence_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * `investment:` Investment account.
	 * `credit:` Credit card
	 * `depository:` Depository account
	 * `loan:` Loan account
	 * `payroll:` Payroll account
	 * `other:` Non-specified account type
	 * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
	 */
	export enum OverrideAccountType { investment = 'investment', credit = 'credit', depository = 'depository', loan = 'loan', payroll = 'payroll', other = 'other' }


	/** Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data. */
	export interface OverrideAccounts {

		/**
		 * ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
		 * Required
		 */
		currency: string;

		/**
		 * If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
		 * Required
		 * Type: double
		 */
		force_available_balance: number;

		/** Specify the holdings on the account. */
		holdings?: HoldingsOverride;

		/**
		 * Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information.
		 * Required
		 */
		identity: OwnerOverride;

		/** Specify payroll data on the account. */
		income?: IncomeOverride;

		/**
		 * The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.
		 * Required
		 */
		inflow_model: InflowModel;

		/** Specify the list of investments transactions on the account. */
		investment_transactions?: Investments_TransactionsOverride;

		/**
		 * Used to configure Sandbox test data for the Liabilities product
		 * Required
		 */
		liability: LiabilityOverride;

		/**
		 * Allows specifying the metadata of the test account
		 * Required
		 */
		meta: Meta;

		/**
		 * Account and bank identifier number data used to configure the test account. All values are optional.
		 * Required
		 */
		numbers: Numbers;

		/**
		 * If provided, the account will start with this amount as the current balance.
		 * Required
		 * Type: double
		 */
		starting_balance: number;

		/**
		 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		subtype: OverrideAccountsSubtype;

		/**
		 * Specify the list of transactions on the account.
		 * Required
		 */
		transactions: Array<TransactionOverride>;

		/**
		 * `investment:` Investment account.
		 * `credit:` Credit card
		 * `depository:` Depository account
		 * `loan:` Loan account
		 * `payroll:` Payroll account
		 * `other:` Non-specified account type
		 * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		type: OverrideAccountType;
	}

	/** Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data. */
	export interface OverrideAccountsFormProperties {

		/**
		 * ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
		 * Required
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
		 * Required
		 * Type: double
		 */
		force_available_balance: FormControl<number | null | undefined>,

		/**
		 * If provided, the account will start with this amount as the current balance.
		 * Required
		 * Type: double
		 */
		starting_balance: FormControl<number | null | undefined>,

		/**
		 * See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		subtype: FormControl<OverrideAccountsSubtype | null | undefined>,

		/**
		 * `investment:` Investment account.
		 * `credit:` Credit card
		 * `depository:` Depository account
		 * `loan:` Loan account
		 * `payroll:` Payroll account
		 * `other:` Non-specified account type
		 * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
		 * Required
		 */
		type: FormControl<OverrideAccountType | null | undefined>,
	}
	export function CreateOverrideAccountsFormGroup() {
		return new FormGroup<OverrideAccountsFormProperties>({
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			force_available_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			starting_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			subtype: new FormControl<OverrideAccountsSubtype | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<OverrideAccountType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information. */
	export interface OwnerOverride {

		/**
		 * Data about the various addresses associated with the account.
		 * Required
		 */
		addresses: Array<Address>;

		/**
		 * A list of email addresses associated with the account.
		 * Required
		 */
		emails: Array<Email>;

		/**
		 * A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item.
		 * Required
		 */
		names: Array<string>;

		/**
		 * A list of phone numbers associated with the account.
		 * Required
		 */
		phone_numbers: Array<PhoneNumber>;
	}

	/** Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information. */
	export interface OwnerOverrideFormProperties {
	}
	export function CreateOwnerOverrideFormGroup() {
		return new FormGroup<OwnerOverrideFormProperties>({
		});

	}

	export enum OverrideAccountsSubtype { '401a' = '401a', '401k' = '401k', '403B' = '403B', '457b' = '457b', _529 = '529', brokerage = 'brokerage', 'cash isa' = 'cash isa', 'crypto exchange' = 'crypto exchange', 'education savings account' = 'education savings account', ebt = 'ebt', 'fixed annuity' = 'fixed annuity', gic = 'gic', 'health reimbursement arrangement' = 'health reimbursement arrangement', hsa = 'hsa', isa = 'isa', ira = 'ira', lif = 'lif', 'life insurance' = 'life insurance', lira = 'lira', lrif = 'lrif', lrsp = 'lrsp', 'non-custodial wallet' = 'non-custodial wallet', 'non-taxable brokerage account' = 'non-taxable brokerage account', other = 'other', 'other insurance' = 'other insurance', 'other annuity' = 'other annuity', prif = 'prif', rdsp = 'rdsp', resp = 'resp', rlif = 'rlif', rrif = 'rrif', pension = 'pension', 'profit sharing plan' = 'profit sharing plan', retirement = 'retirement', roth = 'roth', 'roth 401k' = 'roth 401k', rrsp = 'rrsp', 'sep ira' = 'sep ira', 'simple ira' = 'simple ira', sipp = 'sipp', 'stock plan' = 'stock plan', 'thrift savings plan' = 'thrift savings plan', tfsa = 'tfsa', trust = 'trust', ugma = 'ugma', utma = 'utma', 'variable annuity' = 'variable annuity', 'credit card' = 'credit card', paypal = 'paypal', cd = 'cd', checking = 'checking', savings = 'savings', 'money market' = 'money market', prepaid = 'prepaid', auto = 'auto', business = 'business', commercial = 'commercial', construction = 'construction', consumer = 'consumer', 'home equity' = 'home equity', loan = 'loan', mortgage = 'mortgage', overdraft = 'overdraft', 'line of credit' = 'line of credit', student = 'student', 'cash management' = 'cash management', keogh = 'keogh', 'mutual fund' = 'mutual fund', recurring = 'recurring', rewards = 'rewards', 'safe deposit' = 'safe deposit', sarsep = 'sarsep', payroll = 'payroll', _null = 73 }


	/** Data to populate as test transaction data. If not specified, random transactions will be generated instead. */
	export interface TransactionOverride {

		/**
		 * The transaction amount. Can be negative.
		 * Required
		 * Type: double
		 */
		amount: number;

		/** The ISO-4217 format currency code for the transaction. */
		currency?: string | null;

		/**
		 * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
		 * Required
		 * Type: DateOnly
		 */
		date_posted: Date;

		/**
		 * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
		 * Required
		 * Type: DateOnly
		 */
		date_transacted: Date;

		/**
		 * The transaction description.
		 * Required
		 */
		description: string;
	}

	/** Data to populate as test transaction data. If not specified, random transactions will be generated instead. */
	export interface TransactionOverrideFormProperties {

		/**
		 * The transaction amount. Can be negative.
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** The ISO-4217 format currency code for the transaction. */
		currency: FormControl<string | null | undefined>,

		/**
		 * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
		 * Required
		 * Type: DateOnly
		 */
		date_posted: FormControl<Date | null | undefined>,

		/**
		 * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
		 * Required
		 * Type: DateOnly
		 */
		date_transacted: FormControl<Date | null | undefined>,

		/**
		 * The transaction description.
		 * Required
		 */
		description: FormControl<string | null | undefined>,
	}
	export function CreateTransactionOverrideFormGroup() {
		return new FormGroup<TransactionOverrideFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<string | null | undefined>(undefined),
			date_posted: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			date_transacted: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * How an asset is owned.
	 * `association`: Ownership by a corporation, partnership, or unincorporated association, including for-profit and not-for-profit organizations.
	 * `individual`: Ownership by an individual.
	 * `joint`: Joint ownership by multiple parties.
	 * `trust`: Ownership by a revocable or irrevocable trust.
	 */
	export enum OwnershipType { _null = 0, individual = 'individual', joint = 'joint', association = 'association', trust = 'trust' }


	/** Field describing whether the associated address is a post office box. Will be `yes` when a P.O. box is detected, `no` when Plaid confirmed the address is not a P.O. box, and `no_data` when Plaid was not able to determine if the address is a P.O. box. */
	export enum POBoxStatus { yes = 'yes', no = 'no', no_data = 'no_data' }


	/** Request schema for `/partner/customer/create`. */
	export interface PartnerCustomerCreateRequest {

		/**
		 * The end customer's address.
		 * Required
		 */
		address: PartnerEndCustomerAddress;

		/**
		 * The name of the end customer's application. This will be shown to end users when they go through the Plaid Link flow.
		 * Required
		 */
		application_name: string;

		/** Assets under management for the given end customer. Required for end customers with monthly service commitments. */
		assets_under_management?: PartnerEndCustomerAssetsUnderManagement;

		/** The billing contact for the end customer. Defaults to partner's billing contact if omitted. */
		billing_contact?: PartnerEndCustomerBillingContact;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users.
		 * Required
		 */
		company_name: string;

		/** If `true`, the end customer's default Link customization will be set to match the partner's. You can always change the end customer's Link customization in the Plaid Dashboard. See the [Link Customization docs](https://plaid.com/docs/link/customization/) for more information. */
		create_link_customization?: boolean | null;

		/** This information is public. Users of your app will see this information when managing connections between your app and their bank accounts in Plaid Portal. Defaults to partner's customer support info if omitted. */
		customer_support_info?: PartnerEndCustomerCustomerSupportInfo;

		/**
		 * Denotes whether the partner has forwarded the Plaid bank addendum to the end customer.
		 * Required
		 */
		is_bank_addendum_completed: boolean;

		/**
		 * Denotes whether or not the partner has completed attestation of diligence for the end customer to be created.
		 * Required
		 */
		is_diligence_attested: boolean;

		/**
		 * The end customer's legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users.
		 * Required
		 */
		legal_entity_name: string;

		/** Base64-encoded representation of the end customer's logo. Must be a PNG of size 1024x1024 under 4MB. The logo will be shared with financial institutions and shown to the end user during Link flows. A logo is required if `create_link_customization` is `true`. If `create_link_customization` is `false` and the logo is omitted, a stock logo will be used. */
		logo?: string | null;

		/**
		 * The products to be enabled for the end customer.
		 * Required
		 */
		products: Array<Products>;

		/** A list of URIs indicating the destination(s) where a user can be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. URIs should not contain any query parameters. When used in Production or Development, URIs must use https. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. To modify redirect URIs for an end customer after creating them, go to the end customer's [API page](https://dashboard.plaid.com/team/api) in the Dashboard. */
		redirect_uris?: Array<string>;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The technical contact for the end customer. Defaults to partner's technical contact if omitted. */
		technical_contact?: PartnerEndCustomerTechnicalContact;

		/**
		 * The end customer's website.
		 * Required
		 */
		website: string;
	}

	/** Request schema for `/partner/customer/create`. */
	export interface PartnerCustomerCreateRequestFormProperties {

		/**
		 * The name of the end customer's application. This will be shown to end users when they go through the Plaid Link flow.
		 * Required
		 */
		application_name: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users.
		 * Required
		 */
		company_name: FormControl<string | null | undefined>,

		/** If `true`, the end customer's default Link customization will be set to match the partner's. You can always change the end customer's Link customization in the Plaid Dashboard. See the [Link Customization docs](https://plaid.com/docs/link/customization/) for more information. */
		create_link_customization: FormControl<boolean | null | undefined>,

		/**
		 * Denotes whether the partner has forwarded the Plaid bank addendum to the end customer.
		 * Required
		 */
		is_bank_addendum_completed: FormControl<boolean | null | undefined>,

		/**
		 * Denotes whether or not the partner has completed attestation of diligence for the end customer to be created.
		 * Required
		 */
		is_diligence_attested: FormControl<boolean | null | undefined>,

		/**
		 * The end customer's legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users.
		 * Required
		 */
		legal_entity_name: FormControl<string | null | undefined>,

		/** Base64-encoded representation of the end customer's logo. Must be a PNG of size 1024x1024 under 4MB. The logo will be shared with financial institutions and shown to the end user during Link flows. A logo is required if `create_link_customization` is `true`. If `create_link_customization` is `false` and the logo is omitted, a stock logo will be used. */
		logo: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The end customer's website.
		 * Required
		 */
		website: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerCreateRequestFormGroup() {
		return new FormGroup<PartnerCustomerCreateRequestFormProperties>({
			application_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			create_link_customization: new FormControl<boolean | null | undefined>(undefined),
			is_bank_addendum_completed: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			is_diligence_attested: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			legal_entity_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			logo: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			website: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The end customer's address. */
	export interface PartnerEndCustomerAddress {
		city?: string | null;

		/** ISO-3166-1 alpha-2 country code standard. */
		country_code?: string | null;
		postal_code?: string | null;
		region?: string | null;
		street?: string | null;
	}

	/** The end customer's address. */
	export interface PartnerEndCustomerAddressFormProperties {
		city: FormControl<string | null | undefined>,

		/** ISO-3166-1 alpha-2 country code standard. */
		country_code: FormControl<string | null | undefined>,
		postal_code: FormControl<string | null | undefined>,
		region: FormControl<string | null | undefined>,
		street: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerAddressFormGroup() {
		return new FormGroup<PartnerEndCustomerAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined),
			country_code: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			street: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Assets under management for the given end customer. Required for end customers with monthly service commitments. */
	export interface PartnerEndCustomerAssetsUnderManagement {

		/**
		 * Required
		 * Type: double
		 */
		amount: number;

		/** Required */
		iso_currency_code: string;
	}

	/** Assets under management for the given end customer. Required for end customers with monthly service commitments. */
	export interface PartnerEndCustomerAssetsUnderManagementFormProperties {

		/**
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		iso_currency_code: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerAssetsUnderManagementFormGroup() {
		return new FormGroup<PartnerEndCustomerAssetsUnderManagementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The billing contact for the end customer. Defaults to partner's billing contact if omitted. */
	export interface PartnerEndCustomerBillingContact {
		email?: string | null;
		family_name?: string | null;
		given_name?: string | null;
	}

	/** The billing contact for the end customer. Defaults to partner's billing contact if omitted. */
	export interface PartnerEndCustomerBillingContactFormProperties {
		email: FormControl<string | null | undefined>,
		family_name: FormControl<string | null | undefined>,
		given_name: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerBillingContactFormGroup() {
		return new FormGroup<PartnerEndCustomerBillingContactFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This information is public. Users of your app will see this information when managing connections between your app and their bank accounts in Plaid Portal. Defaults to partner's customer support info if omitted. */
	export interface PartnerEndCustomerCustomerSupportInfo {
		contact_url?: string | null;
		email?: string | null;
		link_update_url?: string | null;
		phone_number?: string | null;
	}

	/** This information is public. Users of your app will see this information when managing connections between your app and their bank accounts in Plaid Portal. Defaults to partner's customer support info if omitted. */
	export interface PartnerEndCustomerCustomerSupportInfoFormProperties {
		contact_url: FormControl<string | null | undefined>,
		email: FormControl<string | null | undefined>,
		link_update_url: FormControl<string | null | undefined>,
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerCustomerSupportInfoFormGroup() {
		return new FormGroup<PartnerEndCustomerCustomerSupportInfoFormProperties>({
			contact_url: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined),
			link_update_url: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The technical contact for the end customer. Defaults to partner's technical contact if omitted. */
	export interface PartnerEndCustomerTechnicalContact {
		email?: string | null;
		family_name?: string | null;
		given_name?: string | null;
	}

	/** The technical contact for the end customer. Defaults to partner's technical contact if omitted. */
	export interface PartnerEndCustomerTechnicalContactFormProperties {
		email: FormControl<string | null | undefined>,
		family_name: FormControl<string | null | undefined>,
		given_name: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerTechnicalContactFormGroup() {
		return new FormGroup<PartnerEndCustomerTechnicalContactFormProperties>({
			email: new FormControl<string | null | undefined>(undefined),
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response schema for `/partner/customer/create`. */
	export interface PartnerCustomerCreateResponse {

		/** The details for the newly created end customer, including secrets for non-Production environments. */
		end_customer?: PartnerEndCustomerWithSecrets;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** Response schema for `/partner/customer/create`. */
	export interface PartnerCustomerCreateResponseFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerCreateResponseFormGroup() {
		return new FormGroup<PartnerCustomerCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The details for the newly created end customer, including secrets for non-Production environments. */
	export interface PartnerEndCustomerWithSecrets {
	}

	/** The details for the newly created end customer, including secrets for non-Production environments. */
	export interface PartnerEndCustomerWithSecretsFormProperties {
	}
	export function CreatePartnerEndCustomerWithSecretsFormGroup() {
		return new FormGroup<PartnerEndCustomerWithSecretsFormProperties>({
		});

	}


	/** Request schema for `/partner/customer/enable`. */
	export interface PartnerCustomerEnableRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Required */
		end_customer_client_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request schema for `/partner/customer/enable`. */
	export interface PartnerCustomerEnableRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		end_customer_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerEnableRequestFormGroup() {
		return new FormGroup<PartnerCustomerEnableRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			end_customer_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response schema for `/partner/customer/enable`. */
	export interface PartnerCustomerEnableResponse {

		/** The end customer's secret key for the Production environment. */
		production_secret?: string | null;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** Response schema for `/partner/customer/enable`. */
	export interface PartnerCustomerEnableResponseFormProperties {

		/** The end customer's secret key for the Production environment. */
		production_secret: FormControl<string | null | undefined>,

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerEnableResponseFormGroup() {
		return new FormGroup<PartnerCustomerEnableResponseFormProperties>({
			production_secret: new FormControl<string | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Request schema for `/partner/customer/get`. */
	export interface PartnerCustomerGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Required */
		end_customer_client_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request schema for `/partner/customer/get`. */
	export interface PartnerCustomerGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		end_customer_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerGetRequestFormGroup() {
		return new FormGroup<PartnerCustomerGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			end_customer_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response schema for `/partner/customer/get`. */
	export interface PartnerCustomerGetResponse {

		/** The details for an end customer. */
		end_customer?: PartnerEndCustomer;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** Response schema for `/partner/customer/get`. */
	export interface PartnerCustomerGetResponseFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerGetResponseFormGroup() {
		return new FormGroup<PartnerCustomerGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The details for an end customer. */
	export interface PartnerEndCustomer {
		client_id?: string | null;
		company_name?: string | null;

		/**
		 * The status of the given end customer.
		 * `UNDER_REVIEW`: The end customer has been created and enabled in the non-Production environments. The end customer must be manually reviewed by the Plaid team before it can be enabled in production, at which point its status will automatically transition to `PENDING_ENABLEMENT` or `DENIED`.
		 * `PENDING_ENABLEMENT`: The end customer is ready to be enabled in the Production environment. Call the `/partner/customer/enable` endpoint to enable the end customer in Production.
		 * `ACTIVE`: The end customer has been enabled in all environments.
		 * `DENIED`: The end customer has been created and enabled in the non-Production environments, but it did not pass review by the Plaid team and therefore cannot be enabled in the Production environment. Talk to your Account Manager for more information.
		 */
		status?: PartnerEndCustomerStatus | null;
	}

	/** The details for an end customer. */
	export interface PartnerEndCustomerFormProperties {
		client_id: FormControl<string | null | undefined>,
		company_name: FormControl<string | null | undefined>,

		/**
		 * The status of the given end customer.
		 * `UNDER_REVIEW`: The end customer has been created and enabled in the non-Production environments. The end customer must be manually reviewed by the Plaid team before it can be enabled in production, at which point its status will automatically transition to `PENDING_ENABLEMENT` or `DENIED`.
		 * `PENDING_ENABLEMENT`: The end customer is ready to be enabled in the Production environment. Call the `/partner/customer/enable` endpoint to enable the end customer in Production.
		 * `ACTIVE`: The end customer has been enabled in all environments.
		 * `DENIED`: The end customer has been created and enabled in the non-Production environments, but it did not pass review by the Plaid team and therefore cannot be enabled in the Production environment. Talk to your Account Manager for more information.
		 */
		status: FormControl<PartnerEndCustomerStatus | null | undefined>,
	}
	export function CreatePartnerEndCustomerFormGroup() {
		return new FormGroup<PartnerEndCustomerFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<PartnerEndCustomerStatus | null | undefined>(undefined),
		});

	}

	export enum PartnerEndCustomerStatus { UNDER_REVIEW = 'UNDER_REVIEW', PENDING_ENABLEMENT = 'PENDING_ENABLEMENT', ACTIVE = 'ACTIVE', DENIED = 'DENIED' }


	/** Request schema for `/partner/customer/oauth_institutions/get`. */
	export interface PartnerCustomerOAuthInstitutionsGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Required */
		end_customer_client_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request schema for `/partner/customer/oauth_institutions/get`. */
	export interface PartnerCustomerOAuthInstitutionsGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		end_customer_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerOAuthInstitutionsGetRequestFormGroup() {
		return new FormGroup<PartnerCustomerOAuthInstitutionsGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			end_customer_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response schema for `/partner/customer/oauth_institutions/get`. */
	export interface PartnerCustomerOAuthInstitutionsGetResponse {

		/** The status of the addendum to the Plaid MSA ("flowdown") for the end customer. */
		flowdown_status?: PartnerCustomerOAuthInstitutionsGetResponseFlowdown_status | null;

		/** The OAuth institutions with which the end customer's application is being registered. */
		institutions?: Array<PartnerEndCustomerOAuthInstitution>;

		/** The status of the end customer's security questionnaire. */
		questionnaire_status?: PartnerCustomerOAuthInstitutionsGetResponseQuestionnaire_status | null;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** Response schema for `/partner/customer/oauth_institutions/get`. */
	export interface PartnerCustomerOAuthInstitutionsGetResponseFormProperties {

		/** The status of the addendum to the Plaid MSA ("flowdown") for the end customer. */
		flowdown_status: FormControl<PartnerCustomerOAuthInstitutionsGetResponseFlowdown_status | null | undefined>,

		/** The status of the end customer's security questionnaire. */
		questionnaire_status: FormControl<PartnerCustomerOAuthInstitutionsGetResponseQuestionnaire_status | null | undefined>,

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerOAuthInstitutionsGetResponseFormGroup() {
		return new FormGroup<PartnerCustomerOAuthInstitutionsGetResponseFormProperties>({
			flowdown_status: new FormControl<PartnerCustomerOAuthInstitutionsGetResponseFlowdown_status | null | undefined>(undefined),
			questionnaire_status: new FormControl<PartnerCustomerOAuthInstitutionsGetResponseQuestionnaire_status | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PartnerCustomerOAuthInstitutionsGetResponseFlowdown_status { NOT_STARTED = 'NOT_STARTED', IN_REVIEW = 'IN_REVIEW', NEGOTIATION = 'NEGOTIATION', COMPLETE = 'COMPLETE' }


	/** The OAuth registration information for an institution. */
	export interface PartnerEndCustomerOAuthInstitution {

		/** The date on which non-OAuth Item adds will no longer be supported for this institution, or an empty string if no such date has been set by the institution. */
		classic_disablement_date?: string | null;

		/** Registration statuses by environment. */
		environments?: PartnerEndCustomerOAuthInstitutionEnvironments;
		institution_id?: string | null;
		name?: string | null;

		/** The date on which the end customer's application was approved by the institution, or an empty string if their application has not yet been approved. */
		production_enablement_date?: string | null;
	}

	/** The OAuth registration information for an institution. */
	export interface PartnerEndCustomerOAuthInstitutionFormProperties {

		/** The date on which non-OAuth Item adds will no longer be supported for this institution, or an empty string if no such date has been set by the institution. */
		classic_disablement_date: FormControl<string | null | undefined>,
		institution_id: FormControl<string | null | undefined>,
		name: FormControl<string | null | undefined>,

		/** The date on which the end customer's application was approved by the institution, or an empty string if their application has not yet been approved. */
		production_enablement_date: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerOAuthInstitutionFormGroup() {
		return new FormGroup<PartnerEndCustomerOAuthInstitutionFormProperties>({
			classic_disablement_date: new FormControl<string | null | undefined>(undefined),
			institution_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			production_enablement_date: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Registration statuses by environment. */
	export interface PartnerEndCustomerOAuthInstitutionEnvironments {

		/** The registration status for the end customer's application. */
		development?: PartnerEndCustomerOAuthInstitutionEnvironmentsDevelopment | null;

		/** The registration status for the end customer's application. */
		production?: PartnerEndCustomerOAuthInstitutionEnvironmentsDevelopment | null;
	}

	/** Registration statuses by environment. */
	export interface PartnerEndCustomerOAuthInstitutionEnvironmentsFormProperties {

		/** The registration status for the end customer's application. */
		development: FormControl<PartnerEndCustomerOAuthInstitutionEnvironmentsDevelopment | null | undefined>,

		/** The registration status for the end customer's application. */
		production: FormControl<PartnerEndCustomerOAuthInstitutionEnvironmentsDevelopment | null | undefined>,
	}
	export function CreatePartnerEndCustomerOAuthInstitutionEnvironmentsFormGroup() {
		return new FormGroup<PartnerEndCustomerOAuthInstitutionEnvironmentsFormProperties>({
			development: new FormControl<PartnerEndCustomerOAuthInstitutionEnvironmentsDevelopment | null | undefined>(undefined),
			production: new FormControl<PartnerEndCustomerOAuthInstitutionEnvironmentsDevelopment | null | undefined>(undefined),
		});

	}

	export enum PartnerEndCustomerOAuthInstitutionEnvironmentsDevelopment { NOT_STARTED = 'NOT_STARTED', PROCESSING = 'PROCESSING', APPROVED = 'APPROVED', ENABLED = 'ENABLED', ATTENTION_REQUIRED = 'ATTENTION_REQUIRED' }

	export enum PartnerCustomerOAuthInstitutionsGetResponseQuestionnaire_status { NOT_STARTED = 'NOT_STARTED', RECEIVED = 'RECEIVED', COMPLETE = 'COMPLETE' }


	/** Request schema for `/partner/customer/remove`. */
	export interface PartnerCustomerRemoveRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Required */
		end_customer_client_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request schema for `/partner/customer/remove`. */
	export interface PartnerCustomerRemoveRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Required */
		end_customer_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerRemoveRequestFormGroup() {
		return new FormGroup<PartnerCustomerRemoveRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			end_customer_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response schema for `/partner/customer/remove`. */
	export interface PartnerCustomerRemoveResponse {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** Response schema for `/partner/customer/remove`. */
	export interface PartnerCustomerRemoveResponseFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePartnerCustomerRemoveResponseFormGroup() {
		return new FormGroup<PartnerCustomerRemoveResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The status of the addendum to the Plaid MSA ("flowdown") for the end customer. */
	export enum PartnerEndCustomerFlowdownStatus { NOT_STARTED = 'NOT_STARTED', IN_REVIEW = 'IN_REVIEW', NEGOTIATION = 'NEGOTIATION', COMPLETE = 'COMPLETE' }


	/** The registration status for the end customer's application. */
	export enum PartnerEndCustomerOAuthInstitutionApplicationStatus { NOT_STARTED = 'NOT_STARTED', PROCESSING = 'PROCESSING', APPROVED = 'APPROVED', ENABLED = 'ENABLED', ATTENTION_REQUIRED = 'ATTENTION_REQUIRED' }


	/** The OAuth status of the update */
	export enum PartnerEndCustomerOAuthStatusUpdatedValues { 'not-started' = 'not-started', processing = 'processing', approved = 'approved', enabled = 'enabled', 'attention-required' = 'attention-required' }


	/** The webhook of type `PARTNER` and code `END_CUSTOMER_OAUTH_STATUS_UPDATED` will be fired when a partner's end customer has an update on their OAuth registration status with an institution. */
	export interface PartnerEndCustomerOAuthStatusUpdatedWebhook {

		/**
		 * The client ID of the end customer
		 * Required
		 */
		end_customer_client_id: string;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The institution ID
		 * Required
		 */
		institution_id: string;

		/**
		 * The institution name
		 * Required
		 */
		institution_name: string;

		/**
		 * The OAuth status of the update
		 * Required
		 */
		status: PartnerEndCustomerOAuthStatusUpdatedValues;

		/**
		 * `END_CUSTOMER_OAUTH_STATUS_UPDATED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `PARTNER`
		 * Required
		 */
		webhook_type: string;
	}

	/** The webhook of type `PARTNER` and code `END_CUSTOMER_OAUTH_STATUS_UPDATED` will be fired when a partner's end customer has an update on their OAuth registration status with an institution. */
	export interface PartnerEndCustomerOAuthStatusUpdatedWebhookFormProperties {

		/**
		 * The client ID of the end customer
		 * Required
		 */
		end_customer_client_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The institution ID
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/**
		 * The institution name
		 * Required
		 */
		institution_name: FormControl<string | null | undefined>,

		/**
		 * The OAuth status of the update
		 * Required
		 */
		status: FormControl<PartnerEndCustomerOAuthStatusUpdatedValues | null | undefined>,

		/**
		 * `END_CUSTOMER_OAUTH_STATUS_UPDATED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `PARTNER`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerOAuthStatusUpdatedWebhookFormGroup() {
		return new FormGroup<PartnerEndCustomerOAuthStatusUpdatedWebhookFormProperties>({
			end_customer_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PartnerEndCustomerOAuthStatusUpdatedValues | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The status of the end customer's security questionnaire. */
	export enum PartnerEndCustomerQuestionnaireStatus { NOT_STARTED = 'NOT_STARTED', RECEIVED = 'RECEIVED', COMPLETE = 'COMPLETE' }


	/** The secrets for the newly created end customer in non-Production environments. */
	export interface PartnerEndCustomerSecrets {

		/** The end customer's secret key for the Development environment. */
		development?: string | null;

		/** The end customer's secret key for the Sandbox environment. */
		sandbox?: string | null;
	}

	/** The secrets for the newly created end customer in non-Production environments. */
	export interface PartnerEndCustomerSecretsFormProperties {

		/** The end customer's secret key for the Development environment. */
		development: FormControl<string | null | undefined>,

		/** The end customer's secret key for the Sandbox environment. */
		sandbox: FormControl<string | null | undefined>,
	}
	export function CreatePartnerEndCustomerSecretsFormGroup() {
		return new FormGroup<PartnerEndCustomerSecretsFormProperties>({
			development: new FormControl<string | null | undefined>(undefined),
			sandbox: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction. */
	export enum PartyRoleType { Borrower = 'Borrower' }


	/** The amount and currency of a payment */
	export interface PaymentAmount {

		/**
		 * The ISO-4217 currency code of the payment. For standing orders and payment consents, `"GBP"` must be used.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		currency: PaymentAmountCurrency;

		/**
		 * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.
		 * Required
		 * Type: double
		 */
		value: number;
	}

	/** The amount and currency of a payment */
	export interface PaymentAmountFormProperties {

		/**
		 * The ISO-4217 currency code of the payment. For standing orders and payment consents, `"GBP"` must be used.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		currency: FormControl<PaymentAmountCurrency | null | undefined>,

		/**
		 * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.
		 * Required
		 * Type: double
		 */
		value: FormControl<number | null | undefined>,
	}
	export function CreatePaymentAmountFormGroup() {
		return new FormGroup<PaymentAmountFormProperties>({
			currency: new FormControl<PaymentAmountCurrency | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(3)]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PaymentAmountCurrency { GBP = 'GBP', EUR = 'EUR', PLN = 'PLN', SEK = 'SEK', DKK = 'DKK', NOK = 'NOK' }


	/** The amount and currency of a payment */
	export interface PaymentAmountNullable {

		/**
		 * The ISO-4217 currency code of the payment. For standing orders and payment consents, `"GBP"` must be used.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		currency: PaymentAmountCurrency;

		/**
		 * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`.
		 * Required
		 * Minimum: 0.01
		 */
		value: number;
	}

	/** The amount and currency of a payment */
	export interface PaymentAmountNullableFormProperties {

		/**
		 * The ISO-4217 currency code of the payment. For standing orders and payment consents, `"GBP"` must be used.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		currency: FormControl<PaymentAmountCurrency | null | undefined>,

		/**
		 * The amount of the payment. Must contain at most two digits of precision e.g. `1.23`.
		 * Required
		 * Minimum: 0.01
		 */
		value: FormControl<number | null | undefined>,
	}
	export function CreatePaymentAmountNullableFormGroup() {
		return new FormGroup<PaymentAmountNullableFormProperties>({
			currency: new FormControl<PaymentAmountCurrency | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(3)]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0.01)]),
		});

	}


	/** The amount and currency of a payment */
	export interface PaymentAmountRefunded extends PaymentAmountNullable {
	}

	/** The amount and currency of a payment */
	export interface PaymentAmountRefundedFormProperties extends PaymentAmountNullableFormProperties {
	}
	export function CreatePaymentAmountRefundedFormGroup() {
		return new FormGroup<PaymentAmountRefundedFormProperties>({
			currency: new FormControl<PaymentAmountCurrency | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(3)]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0.01)]),
		});

	}


	/** The amount and currency of a payment */
	export interface PaymentAmountToRefund extends PaymentAmountNullable {
	}

	/** The amount and currency of a payment */
	export interface PaymentAmountToRefundFormProperties extends PaymentAmountNullableFormProperties {
	}
	export function CreatePaymentAmountToRefundFormGroup() {
		return new FormGroup<PaymentAmountToRefundFormProperties>({
			currency: new FormControl<PaymentAmountCurrency | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(3)]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0.01)]),
		});

	}


	/**
	 * The channel used to make a payment.
	 * `online:` transactions that took place online.
	 * `in store:` transactions that were made at a physical location.
	 * `other:` transactions that relate to banks, e.g. fees or deposits.
	 */
	export enum PaymentChannel { online = 'online', 'in store' = 'in store', other = 'other' }


	/** Maximum amount of a single payment initiated using the payment consent. */
	export interface PaymentConsentMaxPaymentAmount {
	}

	/** Maximum amount of a single payment initiated using the payment consent. */
	export interface PaymentConsentMaxPaymentAmountFormProperties {
	}
	export function CreatePaymentConsentMaxPaymentAmountFormGroup() {
		return new FormGroup<PaymentConsentMaxPaymentAmountFormProperties>({
		});

	}


	/**
	 * Where the payment consent period should start.
	 * `CALENDAR`: line up with a calendar.
	 * `CONSENT`: on the date of consent creation.
	 */
	export enum PaymentConsentPeriodicAlignment { CALENDAR = 'CALENDAR', CONSENT = 'CONSENT' }


	/** Defines consent payments limitations per period. */
	export interface PaymentConsentPeriodicAmount {

		/**
		 * Where the payment consent period should start.
		 * `CALENDAR`: line up with a calendar.
		 * `CONSENT`: on the date of consent creation.
		 * Required
		 */
		alignment: PaymentConsentPeriodicAlignment;

		/**
		 * Maximum cumulative amount for all payments in the specified interval.
		 * Required
		 */
		amount: PaymentConsentPeriodicAmountAmount;

		/**
		 * Payment consent periodic interval.
		 * Required
		 */
		interval: PaymentConsentPeriodicAmountInterval;
	}

	/** Defines consent payments limitations per period. */
	export interface PaymentConsentPeriodicAmountFormProperties {

		/**
		 * Where the payment consent period should start.
		 * `CALENDAR`: line up with a calendar.
		 * `CONSENT`: on the date of consent creation.
		 * Required
		 */
		alignment: FormControl<PaymentConsentPeriodicAlignment | null | undefined>,

		/**
		 * Payment consent periodic interval.
		 * Required
		 */
		interval: FormControl<PaymentConsentPeriodicAmountInterval | null | undefined>,
	}
	export function CreatePaymentConsentPeriodicAmountFormGroup() {
		return new FormGroup<PaymentConsentPeriodicAmountFormProperties>({
			alignment: new FormControl<PaymentConsentPeriodicAlignment | null | undefined>(undefined, [Validators.required]),
			interval: new FormControl<PaymentConsentPeriodicAmountInterval | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PaymentConsentPeriodicAmountInterval { DAY = 'DAY', WEEK = 'WEEK', MONTH = 'MONTH', YEAR = 'YEAR' }


	/** Maximum cumulative amount for all payments in the specified interval. */
	export interface PaymentConsentPeriodicAmountAmount {
	}

	/** Maximum cumulative amount for all payments in the specified interval. */
	export interface PaymentConsentPeriodicAmountAmountFormProperties {
	}
	export function CreatePaymentConsentPeriodicAmountAmountFormGroup() {
		return new FormGroup<PaymentConsentPeriodicAmountAmountFormProperties>({
		});

	}


	/** Payment consent periodic interval. */
	export enum PaymentConsentPeriodicInterval { DAY = 'DAY', WEEK = 'WEEK', MONTH = 'MONTH', YEAR = 'YEAR' }


	/** Life span for the payment consent. After the `to` date the payment consent expires and can no longer be used for payment initiation. */
	export interface PaymentConsentValidDateTime {

		/** The date and time from which the consent should be active, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
		from?: Date | null;

		/** The date and time at which the consent expires, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
		to?: Date | null;
	}

	/** Life span for the payment consent. After the `to` date the payment consent expires and can no longer be used for payment initiation. */
	export interface PaymentConsentValidDateTimeFormProperties {

		/** The date and time from which the consent should be active, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
		from: FormControl<Date | null | undefined>,

		/** The date and time at which the consent expires, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
		to: FormControl<Date | null | undefined>,
	}
	export function CreatePaymentConsentValidDateTimeFormGroup() {
		return new FormGroup<PaymentConsentValidDateTimeFormProperties>({
			from: new FormControl<Date | null | undefined>(undefined),
			to: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The optional address of the payment recipient. Required by most institutions outside of the UK. */
	export interface PaymentInitiationAddress {

		/**
		 * The city where the recipient is located. Maximum of 35 characters.
		 * Required
		 * Min length: 1
		 * Max length: 35
		 */
		city: string;

		/**
		 * The ISO 3166-1 alpha-2 country code where the recipient is located.
		 * Required
		 * Min length: 2
		 * Max length: 2
		 */
		country: string;

		/**
		 * The postal code where the recipient is located. Maximum of 16 characters.
		 * Required
		 * Min length: 1
		 * Max length: 16
		 */
		postal_code: string;

		/**
		 * An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters.
		 * Required
		 * Minimum items: 1
		 */
		street: Array<string>;
	}

	/** The optional address of the payment recipient. Required by most institutions outside of the UK. */
	export interface PaymentInitiationAddressFormProperties {

		/**
		 * The city where the recipient is located. Maximum of 35 characters.
		 * Required
		 * Min length: 1
		 * Max length: 35
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The ISO 3166-1 alpha-2 country code where the recipient is located.
		 * Required
		 * Min length: 2
		 * Max length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code where the recipient is located. Maximum of 16 characters.
		 * Required
		 * Min length: 1
		 * Max length: 16
		 */
		postal_code: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationAddressFormGroup() {
		return new FormGroup<PaymentInitiationAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(35)]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(16)]),
		});

	}


	/** PaymentInitiationConsent defines a payment initiation consent. */
	export interface PaymentInitiationConsent {

		/**
		 * The consent ID.
		 * Required
		 * Min length: 1
		 */
		consent_id: string;

		/**
		 * Limitations that will be applied to payments initiated using the payment consent.
		 * Required
		 */
		constraints: PaymentInitiationConsentConstraints;

		/**
		 * Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		created_at: Date;

		/**
		 * The ID of the recipient the payment consent is for.
		 * Required
		 * Min length: 1
		 */
		recipient_id: string;

		/**
		 * A reference for the payment consent.
		 * Required
		 */
		reference: string;

		/**
		 * An array of payment consent scopes.
		 * Required
		 */
		scopes: Array<PaymentInitiationConsentScope>;

		/**
		 * The status of the payment consent.
		 * `UNAUTHORISED`: Consent created, but requires user authorisation.
		 * `REJECTED`: Consent authorisation was rejected by the user and/or the bank.
		 * `AUTHORISED`: Consent is active and ready to be used.
		 * `REVOKED`: Consent has been revoked and can no longer be used.
		 * `EXPIRED`: Consent is no longer valid.
		 * Required
		 */
		status: PaymentInitiationConsentStatus;
	}

	/** PaymentInitiationConsent defines a payment initiation consent. */
	export interface PaymentInitiationConsentFormProperties {

		/**
		 * The consent ID.
		 * Required
		 * Min length: 1
		 */
		consent_id: FormControl<string | null | undefined>,

		/**
		 * Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The ID of the recipient the payment consent is for.
		 * Required
		 * Min length: 1
		 */
		recipient_id: FormControl<string | null | undefined>,

		/**
		 * A reference for the payment consent.
		 * Required
		 */
		reference: FormControl<string | null | undefined>,

		/**
		 * The status of the payment consent.
		 * `UNAUTHORISED`: Consent created, but requires user authorisation.
		 * `REJECTED`: Consent authorisation was rejected by the user and/or the bank.
		 * `AUTHORISED`: Consent is active and ready to be used.
		 * `REVOKED`: Consent has been revoked and can no longer be used.
		 * `EXPIRED`: Consent is no longer valid.
		 * Required
		 */
		status: FormControl<PaymentInitiationConsentStatus | null | undefined>,
	}
	export function CreatePaymentInitiationConsentFormGroup() {
		return new FormGroup<PaymentInitiationConsentFormProperties>({
			consent_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentInitiationConsentStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Limitations that will be applied to payments initiated using the payment consent. */
	export interface PaymentInitiationConsentConstraints {

		/**
		 * Maximum amount of a single payment initiated using the payment consent.
		 * Required
		 */
		max_payment_amount: PaymentConsentMaxPaymentAmount;

		/**
		 * A list of amount limitations per period of time.
		 * Required
		 * Minimum items: 1
		 */
		periodic_amounts: Array<PaymentConsentPeriodicAmount>;

		/** Life span for the payment consent. After the `to` date the payment consent expires and can no longer be used for payment initiation. */
		valid_date_time?: PaymentConsentValidDateTime;
	}

	/** Limitations that will be applied to payments initiated using the payment consent. */
	export interface PaymentInitiationConsentConstraintsFormProperties {
	}
	export function CreatePaymentInitiationConsentConstraintsFormGroup() {
		return new FormGroup<PaymentInitiationConsentConstraintsFormProperties>({
		});

	}


	/**
	 * Payment consent scope. Defines possible directions for payments made with the given consent.
	 * `ME_TO_ME`: Allows moving money between accounts owned by the same user.
	 * `EXTERNAL`: Allows initiating payments from the user's account to third parties.
	 */
	export enum PaymentInitiationConsentScope { ME_TO_ME = 'ME_TO_ME', EXTERNAL = 'EXTERNAL' }

	export enum PaymentInitiationConsentStatus { UNAUTHORISED = 'UNAUTHORISED', AUTHORISED = 'AUTHORISED', REVOKED = 'REVOKED', REJECTED = 'REJECTED', EXPIRED = 'EXPIRED' }


	/** PaymentInitiationConsentCreateRequest defines the request schema for `/payment_initiation/consent/create` */
	export interface PaymentInitiationConsentCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Limitations that will be applied to payments initiated using the payment consent.
		 * Required
		 */
		constraints: PaymentInitiationConsentConstraints;

		/** Additional payment consent options */
		options?: ExternalPaymentInitiationConsentOptions;

		/**
		 * The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only.
		 * Required
		 */
		recipient_id: string;

		/**
		 * A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters.
		 * Required
		 * Min length: 1
		 * Max length: 18
		 */
		reference: string;

		/**
		 * An array of payment consent scopes.
		 * Required
		 * Minimum items: 1
		 */
		scopes: Array<PaymentInitiationConsentScope>;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationConsentCreateRequest defines the request schema for `/payment_initiation/consent/create` */
	export interface PaymentInitiationConsentCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only.
		 * Required
		 */
		recipient_id: FormControl<string | null | undefined>,

		/**
		 * A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters.
		 * Required
		 * Min length: 1
		 * Max length: 18
		 */
		reference: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationConsentCreateRequestFormGroup() {
		return new FormGroup<PaymentInitiationConsentCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(18)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationConsentCreateResponse defines the response schema for `/payment_initiation/consent/create` */
	export interface PaymentInitiationConsentCreateResponse {

		/**
		 * A unique ID identifying the payment consent.
		 * Required
		 */
		consent_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The status of the payment consent.
		 * `UNAUTHORISED`: Consent created, but requires user authorisation.
		 * `REJECTED`: Consent authorisation was rejected by the user and/or the bank.
		 * `AUTHORISED`: Consent is active and ready to be used.
		 * `REVOKED`: Consent has been revoked and can no longer be used.
		 * `EXPIRED`: Consent is no longer valid.
		 * Required
		 */
		status: PaymentInitiationConsentStatus;
	}

	/** PaymentInitiationConsentCreateResponse defines the response schema for `/payment_initiation/consent/create` */
	export interface PaymentInitiationConsentCreateResponseFormProperties {

		/**
		 * A unique ID identifying the payment consent.
		 * Required
		 */
		consent_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The status of the payment consent.
		 * `UNAUTHORISED`: Consent created, but requires user authorisation.
		 * `REJECTED`: Consent authorisation was rejected by the user and/or the bank.
		 * `AUTHORISED`: Consent is active and ready to be used.
		 * `REVOKED`: Consent has been revoked and can no longer be used.
		 * `EXPIRED`: Consent is no longer valid.
		 * Required
		 */
		status: FormControl<PaymentInitiationConsentStatus | null | undefined>,
	}
	export function CreatePaymentInitiationConsentCreateResponseFormGroup() {
		return new FormGroup<PaymentInitiationConsentCreateResponseFormProperties>({
			consent_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentInitiationConsentStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** PaymentInitiationConsentGetRequest defines the request schema for `/payment_initiation/consent/get` */
	export interface PaymentInitiationConsentGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The `consent_id` returned from `/payment_initiation/consent/create`.
		 * Required
		 */
		consent_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationConsentGetRequest defines the request schema for `/payment_initiation/consent/get` */
	export interface PaymentInitiationConsentGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The `consent_id` returned from `/payment_initiation/consent/create`.
		 * Required
		 */
		consent_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationConsentGetRequestFormGroup() {
		return new FormGroup<PaymentInitiationConsentGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			consent_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationConsentGetResponse defines the response schema for `/payment_initation/consent/get` */
	export interface PaymentInitiationConsentGetResponse {
	}

	/** PaymentInitiationConsentGetResponse defines the response schema for `/payment_initation/consent/get` */
	export interface PaymentInitiationConsentGetResponseFormProperties {
	}
	export function CreatePaymentInitiationConsentGetResponseFormGroup() {
		return new FormGroup<PaymentInitiationConsentGetResponseFormProperties>({
		});

	}


	/** PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute` */
	export interface PaymentInitiationConsentPaymentExecuteRequest {

		/**
		 * The amount and currency of a payment
		 * Required
		 */
		amount: PaymentAmount;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The consent ID.
		 * Required
		 */
		consent_id: string;

		/**
		 * A random key provided by the client, per unique consent payment. Maximum of 128 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		idempotency_key: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute` */
	export interface PaymentInitiationConsentPaymentExecuteRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The consent ID.
		 * Required
		 */
		consent_id: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique consent payment. Maximum of 128 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationConsentPaymentExecuteRequestFormGroup() {
		return new FormGroup<PaymentInitiationConsentPaymentExecuteRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			consent_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationConsentPaymentExecuteResponse defines the response schema for `/payment_initiation/consent/payment/execute` */
	export interface PaymentInitiationConsentPaymentExecuteResponse {

		/**
		 * A unique ID identifying the payment
		 * Required
		 */
		payment_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		status: PaymentInitiationConsentPaymentExecuteResponseStatus;
	}

	/** PaymentInitiationConsentPaymentExecuteResponse defines the response schema for `/payment_initiation/consent/payment/execute` */
	export interface PaymentInitiationConsentPaymentExecuteResponseFormProperties {

		/**
		 * A unique ID identifying the payment
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		status: FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>,
	}
	export function CreatePaymentInitiationConsentPaymentExecuteResponseFormGroup() {
		return new FormGroup<PaymentInitiationConsentPaymentExecuteResponseFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PaymentInitiationConsentPaymentExecuteResponseStatus { PAYMENT_STATUS_INPUT_NEEDED = 'PAYMENT_STATUS_INPUT_NEEDED', PAYMENT_STATUS_PROCESSING = 'PAYMENT_STATUS_PROCESSING', PAYMENT_STATUS_INITIATED = 'PAYMENT_STATUS_INITIATED', PAYMENT_STATUS_COMPLETED = 'PAYMENT_STATUS_COMPLETED', PAYMENT_STATUS_INSUFFICIENT_FUNDS = 'PAYMENT_STATUS_INSUFFICIENT_FUNDS', PAYMENT_STATUS_FAILED = 'PAYMENT_STATUS_FAILED', PAYMENT_STATUS_BLOCKED = 'PAYMENT_STATUS_BLOCKED', PAYMENT_STATUS_UNKNOWN = 'PAYMENT_STATUS_UNKNOWN', PAYMENT_STATUS_EXECUTED = 'PAYMENT_STATUS_EXECUTED', PAYMENT_STATUS_SETTLED = 'PAYMENT_STATUS_SETTLED', PAYMENT_STATUS_AUTHORISING = 'PAYMENT_STATUS_AUTHORISING', PAYMENT_STATUS_CANCELLED = 'PAYMENT_STATUS_CANCELLED', PAYMENT_STATUS_ESTABLISHED = 'PAYMENT_STATUS_ESTABLISHED', PAYMENT_STATUS_REJECTED = 'PAYMENT_STATUS_REJECTED' }


	/** PaymentInitiationConsentRevokeRequest defines the request schema for `/payment_initiation/consent/revoke` */
	export interface PaymentInitiationConsentRevokeRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The consent ID.
		 * Required
		 */
		consent_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationConsentRevokeRequest defines the request schema for `/payment_initiation/consent/revoke` */
	export interface PaymentInitiationConsentRevokeRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The consent ID.
		 * Required
		 */
		consent_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationConsentRevokeRequestFormGroup() {
		return new FormGroup<PaymentInitiationConsentRevokeRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			consent_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationConsentRevokeResponse defines the response schema for `/payment_initation/consent/revoke` */
	export interface PaymentInitiationConsentRevokeResponse {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** PaymentInitiationConsentRevokeResponse defines the response schema for `/payment_initation/consent/revoke` */
	export interface PaymentInitiationConsentRevokeResponseFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationConsentRevokeResponseFormGroup() {
		return new FormGroup<PaymentInitiationConsentRevokeResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account. */
	export interface PaymentInitiationOptionalRestrictionBacs extends RecipientBACS {
	}

	/** An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account. */
	export interface PaymentInitiationOptionalRestrictionBacsFormProperties extends RecipientBACSFormProperties {
	}
	export function CreatePaymentInitiationOptionalRestrictionBacsFormGroup() {
		return new FormGroup<PaymentInitiationOptionalRestrictionBacsFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			sort_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(6), Validators.maxLength(6)]),
		});

	}


	/** PaymentInitiationPayment defines a payment initiation payment */
	export interface PaymentInitiationPayment {

		/** The value of the reference sent to the bank after adjustment to pass bank validation rules. */
		adjusted_reference?: string | null;

		/**
		 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
		 * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
		 * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
		 * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
		 * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
		 */
		adjusted_scheme?: PaymentInitiationPaymentAdjusted_scheme | null;

		/**
		 * The amount and currency of a payment
		 * Required
		 */
		amount: PaymentAmount;

		/** The amount and currency of a payment */
		amount_refunded?: PaymentAmountRefunded;

		/**
		 * An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required.
		 * Required
		 */
		bacs: SenderBACSNullable;

		/** The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent. */
		consent_id?: string | null;

		/**
		 * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
		 * Required
		 */
		iban: string;

		/**
		 * The date and time of the last time the `status` was updated, in IS0 8601 format
		 * Required
		 */
		last_status_update: Date;

		/**
		 * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
		 * Required
		 */
		payment_id: string;

		/**
		 * The ID of the recipient
		 * Required
		 */
		recipient_id: string;

		/**
		 * A reference for the payment.
		 * Required
		 */
		reference: string;

		/** Details about external payment refund */
		refund_details?: ExternalPaymentRefundDetails;

		/** Refund IDs associated with the payment. */
		refund_ids?: Array<string>;

		/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
		schedule?: ExternalPaymentScheduleGet;

		/**
		 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
		 * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
		 * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
		 * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
		 * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
		 */
		scheme?: PaymentInitiationPaymentScheme | null;

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		status: PaymentInitiationConsentPaymentExecuteResponseStatus;

		/** The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts. */
		transaction_id?: string | null;

		/** The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
		wallet_id?: string | null;
	}

	/** PaymentInitiationPayment defines a payment initiation payment */
	export interface PaymentInitiationPaymentFormProperties {

		/** The value of the reference sent to the bank after adjustment to pass bank validation rules. */
		adjusted_reference: FormControl<string | null | undefined>,

		/**
		 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
		 * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
		 * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
		 * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
		 * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
		 */
		adjusted_scheme: FormControl<PaymentInitiationPaymentAdjusted_scheme | null | undefined>,

		/** The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent. */
		consent_id: FormControl<string | null | undefined>,

		/**
		 * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
		 * Required
		 */
		iban: FormControl<string | null | undefined>,

		/**
		 * The date and time of the last time the `status` was updated, in IS0 8601 format
		 * Required
		 */
		last_status_update: FormControl<Date | null | undefined>,

		/**
		 * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the recipient
		 * Required
		 */
		recipient_id: FormControl<string | null | undefined>,

		/**
		 * A reference for the payment.
		 * Required
		 */
		reference: FormControl<string | null | undefined>,

		/**
		 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
		 * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
		 * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
		 * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
		 * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
		 */
		scheme: FormControl<PaymentInitiationPaymentScheme | null | undefined>,

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		status: FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>,

		/** The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts. */
		transaction_id: FormControl<string | null | undefined>,

		/** The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
		wallet_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentFormGroup() {
		return new FormGroup<PaymentInitiationPaymentFormProperties>({
			adjusted_reference: new FormControl<string | null | undefined>(undefined),
			adjusted_scheme: new FormControl<PaymentInitiationPaymentAdjusted_scheme | null | undefined>(undefined),
			consent_id: new FormControl<string | null | undefined>(undefined),
			iban: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_status_update: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			scheme: new FormControl<PaymentInitiationPaymentScheme | null | undefined>(undefined),
			status: new FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined),
			wallet_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PaymentInitiationPaymentAdjusted_scheme { _null = 0, LOCAL_DEFAULT = 'LOCAL_DEFAULT', LOCAL_INSTANT = 'LOCAL_INSTANT', SEPA_CREDIT_TRANSFER = 'SEPA_CREDIT_TRANSFER', SEPA_CREDIT_TRANSFER_INSTANT = 'SEPA_CREDIT_TRANSFER_INSTANT' }

	export enum PaymentInitiationPaymentScheme { _null = 0, LOCAL_DEFAULT = 'LOCAL_DEFAULT', LOCAL_INSTANT = 'LOCAL_INSTANT', SEPA_CREDIT_TRANSFER = 'SEPA_CREDIT_TRANSFER', SEPA_CREDIT_TRANSFER_INSTANT = 'SEPA_CREDIT_TRANSFER_INSTANT' }


	/** PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create` */
	export interface PaymentInitiationPaymentCreateRequest {

		/**
		 * The amount and currency of a payment
		 * Required
		 */
		amount: PaymentAmount;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Additional payment options */
		options?: ExternalPaymentOptions;

		/**
		 * The ID of the recipient the payment is for.
		 * Required
		 */
		recipient_id: string;

		/**
		 * A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them).
		 * In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it.
		 * Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
		 * Required
		 * Min length: 1
		 * Max length: 18
		 */
		reference: string;

		/** The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once. */
		schedule?: ExternalPaymentScheduleRequest;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create` */
	export interface PaymentInitiationPaymentCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the recipient the payment is for.
		 * Required
		 */
		recipient_id: FormControl<string | null | undefined>,

		/**
		 * A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them).
		 * In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it.
		 * Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
		 * Required
		 * Min length: 1
		 * Max length: 18
		 */
		reference: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentCreateRequestFormGroup() {
		return new FormGroup<PaymentInitiationPaymentCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(18)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationPaymentCreateResponse defines the response schema for `/payment_initiation/payment/create` */
	export interface PaymentInitiationPaymentCreateResponse {

		/**
		 * A unique ID identifying the payment
		 * Required
		 */
		payment_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * For a payment returned by this endpoint, there is only one possible value:
		 * `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment
		 * Required
		 */
		status: PaymentInitiationPaymentCreateResponseStatus;
	}

	/** PaymentInitiationPaymentCreateResponse defines the response schema for `/payment_initiation/payment/create` */
	export interface PaymentInitiationPaymentCreateResponseFormProperties {

		/**
		 * A unique ID identifying the payment
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * For a payment returned by this endpoint, there is only one possible value:
		 * `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment
		 * Required
		 */
		status: FormControl<PaymentInitiationPaymentCreateResponseStatus | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentCreateResponseFormGroup() {
		return new FormGroup<PaymentInitiationPaymentCreateResponseFormProperties>({
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentInitiationPaymentCreateResponseStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PaymentInitiationPaymentCreateResponseStatus { PAYMENT_STATUS_INPUT_NEEDED = 'PAYMENT_STATUS_INPUT_NEEDED' }


	/**
	 * For a payment returned by this endpoint, there is only one possible value:
	 * `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment
	 */
	export enum PaymentInitiationPaymentCreateStatus { PAYMENT_STATUS_INPUT_NEEDED = 'PAYMENT_STATUS_INPUT_NEEDED' }


	/** PaymentInitiationPaymentGetRequest defines the request schema for `/payment_initiation/payment/get` */
	export interface PaymentInitiationPaymentGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The `payment_id` returned from `/payment_initiation/payment/create`.
		 * Required
		 */
		payment_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationPaymentGetRequest defines the request schema for `/payment_initiation/payment/get` */
	export interface PaymentInitiationPaymentGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The `payment_id` returned from `/payment_initiation/payment/create`.
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentGetRequestFormGroup() {
		return new FormGroup<PaymentInitiationPaymentGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get` */
	export interface PaymentInitiationPaymentGetResponse extends PaymentInitiationPayment {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get` */
	export interface PaymentInitiationPaymentGetResponseFormProperties extends PaymentInitiationPaymentFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentGetResponseFormGroup() {
		return new FormGroup<PaymentInitiationPaymentGetResponseFormProperties>({
			adjusted_reference: new FormControl<string | null | undefined>(undefined),
			adjusted_scheme: new FormControl<PaymentInitiationPaymentAdjusted_scheme | null | undefined>(undefined),
			consent_id: new FormControl<string | null | undefined>(undefined),
			iban: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last_status_update: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			scheme: new FormControl<PaymentInitiationPaymentScheme | null | undefined>(undefined),
			status: new FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined),
			wallet_id: new FormControl<string | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationPaymentListRequest defines the request schema for `/payment_initiation/payment/list` */
	export interface PaymentInitiationPaymentListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The consent ID. If specified, only payments, executed using this consent, will be returned. */
		consent_id?: string | null;

		/**
		 * The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified).
		 * Minimum: 1
		 * Maximum: 200
		 */
		count?: number | null;

		/** A string in RFC 3339 format (i.e. "2019-12-06T22:35:49Z"). Only payments created before the cursor will be returned. */
		cursor?: Date | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationPaymentListRequest defines the request schema for `/payment_initiation/payment/list` */
	export interface PaymentInitiationPaymentListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The consent ID. If specified, only payments, executed using this consent, will be returned. */
		consent_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified).
		 * Minimum: 1
		 * Maximum: 200
		 */
		count: FormControl<number | null | undefined>,

		/** A string in RFC 3339 format (i.e. "2019-12-06T22:35:49Z"). Only payments created before the cursor will be returned. */
		cursor: FormControl<Date | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentListRequestFormGroup() {
		return new FormGroup<PaymentInitiationPaymentListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			consent_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(200)]),
			cursor: new FormControl<Date | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationPaymentListResponse defines the response schema for `/payment_initiation/payment/list` */
	export interface PaymentInitiationPaymentListResponse {

		/**
		 * The value that, when used as the optional `cursor` parameter to `/payment_initiation/payment/list`, will return the next unreturned payment as its first payment.
		 * Required
		 */
		next_cursor: Date;

		/**
		 * An array of payments that have been created, associated with the given `client_id`.
		 * Required
		 */
		payments: Array<PaymentInitiationPayment>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** PaymentInitiationPaymentListResponse defines the response schema for `/payment_initiation/payment/list` */
	export interface PaymentInitiationPaymentListResponseFormProperties {

		/**
		 * The value that, when used as the optional `cursor` parameter to `/payment_initiation/payment/list`, will return the next unreturned payment as its first payment.
		 * Required
		 */
		next_cursor: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentListResponseFormGroup() {
		return new FormGroup<PaymentInitiationPaymentListResponseFormProperties>({
			next_cursor: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** PaymentInitiationPaymentReverseRequest defines the request schema for `/payment_initiation/payment/reverse` */
	export interface PaymentInitiationPaymentReverseRequest {

		/** The amount and currency of a payment */
		amount?: PaymentAmountToRefund;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		idempotency_key: string;

		/**
		 * The ID of the payment to reverse
		 * Required
		 */
		payment_id: string;

		/**
		 * A reference for the refund. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
		 * Required
		 * Min length: 6
		 * Max length: 18
		 */
		reference: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationPaymentReverseRequest defines the request schema for `/payment_initiation/payment/reverse` */
	export interface PaymentInitiationPaymentReverseRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The ID of the payment to reverse
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A reference for the refund. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
		 * Required
		 * Min length: 6
		 * Max length: 18
		 */
		reference: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentReverseRequestFormGroup() {
		return new FormGroup<PaymentInitiationPaymentReverseRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(18)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse` */
	export interface PaymentInitiationPaymentReverseResponse {

		/**
		 * A unique ID identifying the refund
		 * Required
		 */
		refund_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		status: PaymentInitiationPaymentReverseResponseStatus;
	}

	/** PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse` */
	export interface PaymentInitiationPaymentReverseResponseFormProperties {

		/**
		 * A unique ID identifying the refund
		 * Required
		 */
		refund_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		status: FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentReverseResponseFormGroup() {
		return new FormGroup<PaymentInitiationPaymentReverseResponseFormProperties>({
			refund_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PaymentInitiationPaymentReverseResponseStatus { AUTHORISING = 'AUTHORISING', INITIATED = 'INITIATED', EXECUTED = 'EXECUTED', SETTLED = 'SETTLED', BLOCKED = 'BLOCKED', FAILED = 'FAILED' }


	/**
	 * The status of the payment.
	 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
	 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
	 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
	 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
	 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
	 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
	 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
	 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
	 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
	 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
	 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
	 * Deprecated:
	 * These statuses will be removed in a future release.
	 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
	 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
	 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
	 */
	export enum PaymentInitiationPaymentStatus { PAYMENT_STATUS_INPUT_NEEDED = 'PAYMENT_STATUS_INPUT_NEEDED', PAYMENT_STATUS_PROCESSING = 'PAYMENT_STATUS_PROCESSING', PAYMENT_STATUS_INITIATED = 'PAYMENT_STATUS_INITIATED', PAYMENT_STATUS_COMPLETED = 'PAYMENT_STATUS_COMPLETED', PAYMENT_STATUS_INSUFFICIENT_FUNDS = 'PAYMENT_STATUS_INSUFFICIENT_FUNDS', PAYMENT_STATUS_FAILED = 'PAYMENT_STATUS_FAILED', PAYMENT_STATUS_BLOCKED = 'PAYMENT_STATUS_BLOCKED', PAYMENT_STATUS_UNKNOWN = 'PAYMENT_STATUS_UNKNOWN', PAYMENT_STATUS_EXECUTED = 'PAYMENT_STATUS_EXECUTED', PAYMENT_STATUS_SETTLED = 'PAYMENT_STATUS_SETTLED', PAYMENT_STATUS_AUTHORISING = 'PAYMENT_STATUS_AUTHORISING', PAYMENT_STATUS_CANCELLED = 'PAYMENT_STATUS_CANCELLED', PAYMENT_STATUS_ESTABLISHED = 'PAYMENT_STATUS_ESTABLISHED', PAYMENT_STATUS_REJECTED = 'PAYMENT_STATUS_REJECTED' }


	/** PaymentInitiationPaymentTokenCreateRequest defines the request schema for `/payment_initiation/payment/token/create` */
	export interface PaymentInitiationPaymentTokenCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The `payment_id` returned from `/payment_initiation/payment/create`.
		 * Required
		 */
		payment_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationPaymentTokenCreateRequest defines the request schema for `/payment_initiation/payment/token/create` */
	export interface PaymentInitiationPaymentTokenCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The `payment_id` returned from `/payment_initiation/payment/create`.
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentTokenCreateRequestFormGroup() {
		return new FormGroup<PaymentInitiationPaymentTokenCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationPaymentTokenCreateResponse defines the response schema for `/payment_initiation/payment/token/create` */
	export interface PaymentInitiationPaymentTokenCreateResponse {

		/**
		 * A `payment_token` that can be provided to Link initialization to enter the payment initiation flow
		 * Required
		 */
		payment_token: string;

		/**
		 * The date and time at which the token will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `payment_token` expires after 15 minutes.
		 * Required
		 */
		payment_token_expiration_time: Date;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** PaymentInitiationPaymentTokenCreateResponse defines the response schema for `/payment_initiation/payment/token/create` */
	export interface PaymentInitiationPaymentTokenCreateResponseFormProperties {

		/**
		 * A `payment_token` that can be provided to Link initialization to enter the payment initiation flow
		 * Required
		 */
		payment_token: FormControl<string | null | undefined>,

		/**
		 * The date and time at which the token will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `payment_token` expires after 15 minutes.
		 * Required
		 */
		payment_token_expiration_time: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationPaymentTokenCreateResponseFormGroup() {
		return new FormGroup<PaymentInitiationPaymentTokenCreateResponseFormProperties>({
			payment_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_token_expiration_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** PaymentInitiationRecipient defines a payment initiation recipient */
	export interface PaymentInitiationRecipient {

		/** The optional address of the payment recipient. Required by most institutions outside of the UK. */
		address?: PaymentInitiationAddress;

		/** An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
		bacs?: RecipientBACSNullable;

		/** The International Bank Account Number (IBAN) for the recipient. */
		iban?: string | null;

		/**
		 * The name of the recipient.
		 * Required
		 */
		name: string;

		/**
		 * The ID of the recipient.
		 * Required
		 */
		recipient_id: string;
	}

	/** PaymentInitiationRecipient defines a payment initiation recipient */
	export interface PaymentInitiationRecipientFormProperties {

		/** The International Bank Account Number (IBAN) for the recipient. */
		iban: FormControl<string | null | undefined>,

		/**
		 * The name of the recipient.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The ID of the recipient.
		 * Required
		 */
		recipient_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationRecipientFormGroup() {
		return new FormGroup<PaymentInitiationRecipientFormProperties>({
			iban: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** PaymentInitiationRecipientCreateRequest defines the request schema for `/payment_initiation/recipient/create` */
	export interface PaymentInitiationRecipientCreateRequest {

		/** The optional address of the payment recipient. Required by most institutions outside of the UK. */
		address?: PaymentInitiationAddress;

		/** An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
		bacs?: RecipientBACSNullable;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The International Bank Account Number (IBAN) for the recipient. If BACS data is not provided, an IBAN is required.
		 * Min length: 15
		 * Max length: 34
		 */
		iban?: string | null;

		/**
		 * The name of the recipient. We recommend using strings of length 18 or less and avoid special characters to ensure compatibility with all institutions.
		 * Required
		 * Min length: 1
		 */
		name: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationRecipientCreateRequest defines the request schema for `/payment_initiation/recipient/create` */
	export interface PaymentInitiationRecipientCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The International Bank Account Number (IBAN) for the recipient. If BACS data is not provided, an IBAN is required.
		 * Min length: 15
		 * Max length: 34
		 */
		iban: FormControl<string | null | undefined>,

		/**
		 * The name of the recipient. We recommend using strings of length 18 or less and avoid special characters to ensure compatibility with all institutions.
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationRecipientCreateRequestFormGroup() {
		return new FormGroup<PaymentInitiationRecipientCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			iban: new FormControl<string | null | undefined>(undefined, [Validators.minLength(15), Validators.maxLength(34)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationRecipientCreateResponse defines the response schema for `/payment_initation/recipient/create` */
	export interface PaymentInitiationRecipientCreateResponse {

		/**
		 * A unique ID identifying the recipient
		 * Required
		 */
		recipient_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** PaymentInitiationRecipientCreateResponse defines the response schema for `/payment_initation/recipient/create` */
	export interface PaymentInitiationRecipientCreateResponseFormProperties {

		/**
		 * A unique ID identifying the recipient
		 * Required
		 */
		recipient_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationRecipientCreateResponseFormGroup() {
		return new FormGroup<PaymentInitiationRecipientCreateResponseFormProperties>({
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** PaymentInitiationRecipientGetRequest defines the request schema for `/payment_initiation/recipient/get` */
	export interface PaymentInitiationRecipientGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The ID of the recipient
		 * Required
		 */
		recipient_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationRecipientGetRequest defines the request schema for `/payment_initiation/recipient/get` */
	export interface PaymentInitiationRecipientGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the recipient
		 * Required
		 */
		recipient_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationRecipientGetRequestFormGroup() {
		return new FormGroup<PaymentInitiationRecipientGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationRecipientGetResponse defines the response schema for `/payment_initiation/recipient/get` */
	export interface PaymentInitiationRecipientGetResponse extends PaymentInitiationRecipient {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** PaymentInitiationRecipientGetResponse defines the response schema for `/payment_initiation/recipient/get` */
	export interface PaymentInitiationRecipientGetResponseFormProperties extends PaymentInitiationRecipientFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationRecipientGetResponseFormGroup() {
		return new FormGroup<PaymentInitiationRecipientGetResponseFormProperties>({
			iban: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationRecipientListRequest defines the request schema for `/payment_initiation/recipient/list` */
	export interface PaymentInitiationRecipientListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentInitiationRecipientListRequest defines the request schema for `/payment_initiation/recipient/list` */
	export interface PaymentInitiationRecipientListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationRecipientListRequestFormGroup() {
		return new FormGroup<PaymentInitiationRecipientListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentInitiationRecipientListResponse defines the response schema for `/payment_initiation/recipient/list` */
	export interface PaymentInitiationRecipientListResponse {

		/**
		 * An array of payment recipients created for Payment Initiation
		 * Required
		 */
		recipients: Array<PaymentInitiationRecipient>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** PaymentInitiationRecipientListResponse defines the response schema for `/payment_initiation/recipient/list` */
	export interface PaymentInitiationRecipientListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentInitiationRecipientListResponseFormGroup() {
		return new FormGroup<PaymentInitiationRecipientListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.
	 * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
	 */
	export interface PaymentMeta {

		/**
		 * The party initiating a wire transfer. Will be `null` if the transaction is not a wire transfer.
		 * Required
		 */
		by_order_of: string;

		/**
		 * For transfers, the party that is receiving the transaction.
		 * Required
		 */
		payee: string;

		/**
		 * For transfers, the party that is paying the transaction.
		 * Required
		 */
		payer: string;

		/**
		 * The type of transfer, e.g. 'ACH'
		 * Required
		 */
		payment_method: string;

		/**
		 * The name of the payment processor
		 * Required
		 */
		payment_processor: string;

		/**
		 * The ACH PPD ID for the payer.
		 * Required
		 */
		ppd_id: string;

		/**
		 * The payer-supplied description of the transfer.
		 * Required
		 */
		reason: string;

		/**
		 * The transaction reference number supplied by the financial institution.
		 * Required
		 */
		reference_number: string;
	}

	/**
	 * Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.
	 * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
	 */
	export interface PaymentMetaFormProperties {

		/**
		 * The party initiating a wire transfer. Will be `null` if the transaction is not a wire transfer.
		 * Required
		 */
		by_order_of: FormControl<string | null | undefined>,

		/**
		 * For transfers, the party that is receiving the transaction.
		 * Required
		 */
		payee: FormControl<string | null | undefined>,

		/**
		 * For transfers, the party that is paying the transaction.
		 * Required
		 */
		payer: FormControl<string | null | undefined>,

		/**
		 * The type of transfer, e.g. 'ACH'
		 * Required
		 */
		payment_method: FormControl<string | null | undefined>,

		/**
		 * The name of the payment processor
		 * Required
		 */
		payment_processor: FormControl<string | null | undefined>,

		/**
		 * The ACH PPD ID for the payer.
		 * Required
		 */
		ppd_id: FormControl<string | null | undefined>,

		/**
		 * The payer-supplied description of the transfer.
		 * Required
		 */
		reason: FormControl<string | null | undefined>,

		/**
		 * The transaction reference number supplied by the financial institution.
		 * Required
		 */
		reference_number: FormControl<string | null | undefined>,
	}
	export function CreatePaymentMetaFormGroup() {
		return new FormGroup<PaymentMetaFormProperties>({
			by_order_of: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payer: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_method: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_processor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ppd_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reference_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** PaymentProfileCreateRequest defines the request schema for `/payment_profile/create` */
	export interface PaymentProfileCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentProfileCreateRequest defines the request schema for `/payment_profile/create` */
	export interface PaymentProfileCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentProfileCreateRequestFormGroup() {
		return new FormGroup<PaymentProfileCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentProfileCreateResponse defines the response schema for `/payment_profile/create` */
	export interface PaymentProfileCreateResponse {

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** PaymentProfileCreateResponse defines the response schema for `/payment_profile/create` */
	export interface PaymentProfileCreateResponseFormProperties {

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentProfileCreateResponseFormGroup() {
		return new FormGroup<PaymentProfileCreateResponseFormProperties>({
			payment_profile_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** PaymentProfileGetRequest defines the request schema for `/payment_profile/get` */
	export interface PaymentProfileGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentProfileGetRequest defines the request schema for `/payment_profile/get` */
	export interface PaymentProfileGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentProfileGetRequestFormGroup() {
		return new FormGroup<PaymentProfileGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			payment_profile_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentProfileGetResponse defines the response schema for `/payment_profile/get` */
	export interface PaymentProfileGetResponse {

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was created at
		 * Required
		 */
		created_at: Date;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was deleted at. Always `null` if the Payment Profile has not been deleted
		 * Required
		 */
		deleted_at: Date;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The status of the given Payment Profile.
		 * `READY`: This Payment Profile is ready to be used to create transfers using `/transfer/authorization/create` and `/transfer/create`.
		 * `PENDING`: This Payment Profile is not ready to be used. Youâ€™ll need to call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field to initiate the account linking experience.
		 * `REMOVED`: This Payment Profile has been removed.
		 * Required
		 */
		status: PaymentProfileGetResponseStatus;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time the given Payment Profile was updated at
		 * Required
		 */
		updated_at: Date;
	}

	/** PaymentProfileGetResponse defines the response schema for `/payment_profile/get` */
	export interface PaymentProfileGetResponseFormProperties {

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was created at
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was deleted at. Always `null` if the Payment Profile has not been deleted
		 * Required
		 */
		deleted_at: FormControl<Date | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The status of the given Payment Profile.
		 * `READY`: This Payment Profile is ready to be used to create transfers using `/transfer/authorization/create` and `/transfer/create`.
		 * `PENDING`: This Payment Profile is not ready to be used. Youâ€™ll need to call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field to initiate the account linking experience.
		 * `REMOVED`: This Payment Profile has been removed.
		 * Required
		 */
		status: FormControl<PaymentProfileGetResponseStatus | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time the given Payment Profile was updated at
		 * Required
		 */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreatePaymentProfileGetResponseFormGroup() {
		return new FormGroup<PaymentProfileGetResponseFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			deleted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentProfileGetResponseStatus | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum PaymentProfileGetResponseStatus { PENDING = 'PENDING', READY = 'READY', REMOVED = 'REMOVED' }


	/** PaymentProfileRemoveRequest defines the request schema for `/payment_profile/remove` */
	export interface PaymentProfileRemoveRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** PaymentProfileRemoveRequest defines the request schema for `/payment_profile/remove` */
	export interface PaymentProfileRemoveRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreatePaymentProfileRemoveRequestFormGroup() {
		return new FormGroup<PaymentProfileRemoveRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			payment_profile_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** PaymentProfileRemoveResponse defines the response schema for `/payment_profile/remove` */
	export interface PaymentProfileRemoveResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** PaymentProfileRemoveResponse defines the response schema for `/payment_profile/remove` */
	export interface PaymentProfileRemoveResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreatePaymentProfileRemoveResponseFormGroup() {
		return new FormGroup<PaymentProfileRemoveResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The status of the given Payment Profile.
	 * `READY`: This Payment Profile is ready to be used to create transfers using `/transfer/authorization/create` and `/transfer/create`.
	 * `PENDING`: This Payment Profile is not ready to be used. Youâ€™ll need to call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field to initiate the account linking experience.
	 * `REMOVED`: This Payment Profile has been removed.
	 */
	export enum PaymentProfileStatus { PENDING = 'PENDING', READY = 'READY', REMOVED = 'REMOVED' }


	/**
	 * Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
	 * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
	 * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
	 * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
	 * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
	 */
	export enum PaymentScheme { _null = 0, LOCAL_DEFAULT = 'LOCAL_DEFAULT', LOCAL_INSTANT = 'LOCAL_INSTANT', SEPA_CREDIT_TRANSFER = 'SEPA_CREDIT_TRANSFER', SEPA_CREDIT_TRANSFER_INSTANT = 'SEPA_CREDIT_TRANSFER_INSTANT' }


	/** Fired when the status of a payment has changed. */
	export interface PaymentStatusUpdateWebhook {

		/** The value of the reference sent to the bank after adjustment to pass bank validation rules. */
		adjusted_reference?: string | null;

		/**
		 * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.
		 * Required
		 * Type: DateOnly
		 */
		adjusted_start_date: Date;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		new_payment_status: PaymentInitiationConsentPaymentExecuteResponseStatus;

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		old_payment_status: PaymentInitiationConsentPaymentExecuteResponseStatus;

		/**
		 * The original value of the reference when creating the payment.
		 * Required
		 */
		original_reference: string;

		/**
		 * The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.
		 * Required
		 * Type: DateOnly
		 */
		original_start_date: Date;

		/**
		 * The `payment_id` for the payment being updated
		 * Required
		 */
		payment_id: string;

		/**
		 * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
		 * Required
		 */
		timestamp: Date;

		/** The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts. */
		transaction_id?: string | null;

		/**
		 * `PAYMENT_STATUS_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `PAYMENT_INITIATION`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when the status of a payment has changed. */
	export interface PaymentStatusUpdateWebhookFormProperties {

		/** The value of the reference sent to the bank after adjustment to pass bank validation rules. */
		adjusted_reference: FormControl<string | null | undefined>,

		/**
		 * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.
		 * Required
		 * Type: DateOnly
		 */
		adjusted_start_date: FormControl<Date | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		new_payment_status: FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>,

		/**
		 * The status of the payment.
		 * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
		 * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
		 * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
		 * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
		 * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
		 * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
		 * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
		 * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
		 * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
		 * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
		 * Deprecated:
		 * These statuses will be removed in a future release.
		 * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
		 * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
		 * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
		 * Required
		 */
		old_payment_status: FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>,

		/**
		 * The original value of the reference when creating the payment.
		 * Required
		 */
		original_reference: FormControl<string | null | undefined>,

		/**
		 * The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.
		 * Required
		 * Type: DateOnly
		 */
		original_start_date: FormControl<Date | null | undefined>,

		/**
		 * The `payment_id` for the payment being updated
		 * Required
		 */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
		 * Required
		 */
		timestamp: FormControl<Date | null | undefined>,

		/** The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts. */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * `PAYMENT_STATUS_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `PAYMENT_INITIATION`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreatePaymentStatusUpdateWebhookFormGroup() {
		return new FormGroup<PaymentStatusUpdateWebhookFormProperties>({
			adjusted_reference: new FormControl<string | null | undefined>(undefined),
			adjusted_start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			new_payment_status: new FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>(undefined, [Validators.required]),
			old_payment_status: new FormControl<PaymentInitiationConsentPaymentExecuteResponseStatus | null | undefined>(undefined, [Validators.required]),
			original_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			original_start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Deduction on the paystub */
	export interface PaystubDeduction {

		/**
		 * `true` if the deduction is pre-tax; `false` otherwise.
		 * Required
		 */
		is_pretax: boolean;

		/**
		 * The amount of the deduction.
		 * Required
		 * Type: double
		 */
		total: number;

		/**
		 * The description of the deduction, as provided on the paystub. For example: `"401(k)"`, `"FICA MED TAX"`.
		 * Required
		 */
		type: string;
	}

	/** Deduction on the paystub */
	export interface PaystubDeductionFormProperties {

		/**
		 * `true` if the deduction is pre-tax; `false` otherwise.
		 * Required
		 */
		is_pretax: FormControl<boolean | null | undefined>,

		/**
		 * The amount of the deduction.
		 * Required
		 * Type: double
		 */
		total: FormControl<number | null | undefined>,

		/**
		 * The description of the deduction, as provided on the paystub. For example: `"401(k)"`, `"FICA MED TAX"`.
		 * Required
		 */
		type: FormControl<string | null | undefined>,
	}
	export function CreatePaystubDeductionFormGroup() {
		return new FormGroup<PaystubDeductionFormProperties>({
			is_pretax: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			total: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`. */
	export enum PaystubPayFrequency { MONTHLY = 'MONTHLY', 'BI-WEEKLY' = 'BI-WEEKLY', WEEKLY = 'WEEKLY', 'SEMI-MONTHLY' = 'SEMI-MONTHLY', _null = 4 }


	/** Fired when an Itemâ€™s access consent is expiring in 7 days. Some Items have explicit expiration times and we try to relay this when possible to reduce service disruption. This can be resolved by having the user go through Linkâ€™s update mode. */
	export interface PendingExpirationWebhook {

		/**
		 * The date and time at which the Item's access consent will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
		 * Required
		 */
		consent_expiration_time: Date;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `PENDING_EXPIRATION`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an Itemâ€™s access consent is expiring in 7 days. Some Items have explicit expiration times and we try to relay this when possible to reduce service disruption. This can be resolved by having the user go through Linkâ€™s update mode. */
	export interface PendingExpirationWebhookFormProperties {

		/**
		 * The date and time at which the Item's access consent will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
		 * Required
		 */
		consent_expiration_time: FormControl<Date | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `PENDING_EXPIRATION`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreatePendingExpirationWebhookFormGroup() {
		return new FormGroup<PendingExpirationWebhookFormProperties>({
			consent_expiration_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An enum indicating whether a phone number is a phone line or a fax line. */
	export enum PhoneType { phone = 'phone', fax = 'fax' }


	/**
	 * The type of identity document detected in the images provided. Will always be one of the following values:
	 *   `drivers_license` - A driver's license for the associated country
	 *   `id_card` - A general national identification card, distinct from driver's licenses
	 *   `passport` - A passport for the associated country
	 *   `residence_permit_card` - An identity document permitting a foreign citizen to <em>temporarily</em> reside in the associated country
	 *   `resident_card` - An identity document permitting a foreign citizen to <em>permanently</em> reside in the associated country
	 * Note: This value may be different from the ID type that the user selects within Link. For example, if they select "Driver's License" but then submit a picture of a passport, this field will say `passport`
	 */
	export enum PhysicalDocumentCategory { drivers_license = 'drivers_license', id_card = 'id_card', passport = 'passport', residence_permit_card = 'residence_permit_card', resident_card = 'resident_card' }


	/** A broad categorization of the error. Safe for programmatic use. */
	export enum PlaidErrorType { INVALID_REQUEST = 'INVALID_REQUEST', INVALID_RESULT = 'INVALID_RESULT', INVALID_INPUT = 'INVALID_INPUT', INSTITUTION_ERROR = 'INSTITUTION_ERROR', RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED', API_ERROR = 'API_ERROR', ITEM_ERROR = 'ITEM_ERROR', ASSET_REPORT_ERROR = 'ASSET_REPORT_ERROR', RECAPTCHA_ERROR = 'RECAPTCHA_ERROR', OAUTH_ERROR = 'OAUTH_ERROR', PAYMENT_ERROR = 'PAYMENT_ERROR', BANK_TRANSFER_ERROR = 'BANK_TRANSFER_ERROR', INCOME_VERIFICATION_ERROR = 'INCOME_VERIFICATION_ERROR', MICRODEPOSITS_ERROR = 'MICRODEPOSITS_ERROR' }


	/** ProcessorApexProcessorTokenCreateRequest defines the request schema for `/processor/apex/processor_token/create` */
	export interface ProcessorApexProcessorTokenCreateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * The `account_id` value obtained from the `onSuccess` callback in Link
		 * Required
		 */
		account_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorApexProcessorTokenCreateRequest defines the request schema for `/processor/apex/processor_token/create` */
	export interface ProcessorApexProcessorTokenCreateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The `account_id` value obtained from the `onSuccess` callback in Link
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorApexProcessorTokenCreateRequestFormGroup() {
		return new FormGroup<ProcessorApexProcessorTokenCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ProcessorAuthGetRequest defines the request schema for `/processor/auth/get` */
	export interface ProcessorAuthGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorAuthGetRequest defines the request schema for `/processor/auth/get` */
	export interface ProcessorAuthGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorAuthGetRequestFormGroup() {
		return new FormGroup<ProcessorAuthGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ProcessorAuthGetResponse defines the response schema for `/processor/auth/get` */
	export interface ProcessorAuthGetResponse {

		/**
		 * A single account at a financial institution.
		 * Required
		 */
		account: AccountBase;

		/**
		 * An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned.
		 * Required
		 */
		numbers: ProcessorNumber;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ProcessorAuthGetResponse defines the response schema for `/processor/auth/get` */
	export interface ProcessorAuthGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorAuthGetResponseFormGroup() {
		return new FormGroup<ProcessorAuthGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned. */
	export interface ProcessorNumber {

		/** Identifying information for transferring money to or from a US account via ACH or wire transfer. */
		ach?: NumbersACHNullable;

		/** Identifying information for transferring money to or from a UK bank account via BACS. */
		bacs?: NumbersBACSNullable;

		/** Identifying information for transferring money to or from a Canadian bank account via EFT. */
		eft?: NumbersEFTNullable;

		/** Identifying information for transferring money to or from an international bank account via wire transfer. */
		international?: NumbersInternationalNullable;
	}

	/** An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned. */
	export interface ProcessorNumberFormProperties {
	}
	export function CreateProcessorNumberFormGroup() {
		return new FormGroup<ProcessorNumberFormProperties>({
		});

	}


	/** ProcessorBalanceGetRequest defines the request schema for `/processor/balance/get` */
	export interface ProcessorBalanceGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to filter `/processor/balance/get` results. */
		options?: ProcessorBalanceGetRequestOptions;

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorBalanceGetRequest defines the request schema for `/processor/balance/get` */
	export interface ProcessorBalanceGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorBalanceGetRequestFormGroup() {
		return new FormGroup<ProcessorBalanceGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to filter `/processor/balance/get` results. */
	export interface ProcessorBalanceGetRequestOptions {

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.
		 * If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.
		 * This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
		 */
		min_last_updated_datetime?: Date | null;
	}

	/** An optional object to filter `/processor/balance/get` results. */
	export interface ProcessorBalanceGetRequestOptionsFormProperties {

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.
		 * If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.
		 * This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
		 */
		min_last_updated_datetime: FormControl<Date | null | undefined>,
	}
	export function CreateProcessorBalanceGetRequestOptionsFormGroup() {
		return new FormGroup<ProcessorBalanceGetRequestOptionsFormProperties>({
			min_last_updated_datetime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** ProcessorBalanceGetResponse defines the response schema for `/processor/balance/get` */
	export interface ProcessorBalanceGetResponse {

		/**
		 * A single account at a financial institution.
		 * Required
		 */
		account: AccountBase;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ProcessorBalanceGetResponse defines the response schema for `/processor/balance/get` */
	export interface ProcessorBalanceGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorBalanceGetResponseFormGroup() {
		return new FormGroup<ProcessorBalanceGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/processor/bank_transfer/create` */
	export interface ProcessorBankTransferCreateRequest {

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
		 * Max length: 100
		 */
		custom_tag?: string | null;

		/**
		 * The transfer description. Maximum of 10 characters.
		 * Required
		 * Max length: 10
		 */
		description: string;

		/**
		 * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: string;

		/**
		 * The currency of the transfer amount â€“ should be set to "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 */
		metadata?: BankTransferMetadata;

		/**
		 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
		 * Required
		 */
		network: BankTransferNetwork;

		/** Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. */
		origination_account_id?: string | null;

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: BankTransferUser;
	}

	/** Defines the request schema for `/processor/bank_transfer/create` */
	export interface ProcessorBankTransferCreateRequestFormProperties {

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
		 * Max length: 100
		 */
		custom_tag: FormControl<string | null | undefined>,

		/**
		 * The transfer description. Maximum of 10 characters.
		 * Required
		 * Max length: 10
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount â€“ should be set to "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
		 * Required
		 */
		network: FormControl<BankTransferNetwork | null | undefined>,

		/** Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,
	}
	export function CreateProcessorBankTransferCreateRequestFormGroup() {
		return new FormGroup<ProcessorBankTransferCreateRequestFormProperties>({
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			custom_tag: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<BankTransferNetwork | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/processor/bank_transfer/create` */
	export interface ProcessorBankTransferCreateResponse {

		/**
		 * Represents a bank transfer within the Bank Transfers API.
		 * Required
		 */
		bank_transfer: BankTransfer;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/processor/bank_transfer/create` */
	export interface ProcessorBankTransferCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorBankTransferCreateResponseFormGroup() {
		return new FormGroup<ProcessorBankTransferCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ProcessorIdentityGetRequest defines the request schema for `/processor/identity/get` */
	export interface ProcessorIdentityGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorIdentityGetRequest defines the request schema for `/processor/identity/get` */
	export interface ProcessorIdentityGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorIdentityGetRequestFormGroup() {
		return new FormGroup<ProcessorIdentityGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ProcessorIdentityGetResponse defines the response schema for `/processor/identity/get` */
	export interface ProcessorIdentityGetResponse {

		/**
		 * Identity information about an account
		 * Required
		 */
		account: AccountIdentity;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ProcessorIdentityGetResponse defines the response schema for `/processor/identity/get` */
	export interface ProcessorIdentityGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorIdentityGetResponseFormGroup() {
		return new FormGroup<ProcessorIdentityGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ProcessorSignalDecisionReportRequest defines the request schema for `/processor/signal/decision/report` */
	export interface ProcessorSignalDecisionReportRequest {

		/**
		 * The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
		 * Type: double
		 */
		amount_instantly_available?: number | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: string;

		/**
		 * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.
		 * For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
		 * Minimum: 0
		 */
		days_funds_on_hold?: number | null;

		/**
		 * The payment decision from the risk assessment.
		 * `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.
		 * `REVIEW`: the transaction requires manual review
		 * `REJECT`: reject the transaction
		 * `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication
		 * `NOT_EVALUATED`: if only logging the Signal results without using them
		 * Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`
		 */
		decision_outcome?: ProcessorSignalDecisionReportRequestDecision_outcome | null;

		/**
		 * `true` if the ACH transaction was initiated, `false` otherwise.
		 * This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		initiated: boolean;

		/**
		 * The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		payment_method?: ProcessorSignalDecisionReportRequestPayment_method | null;

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorSignalDecisionReportRequest defines the request schema for `/processor/signal/decision/report` */
	export interface ProcessorSignalDecisionReportRequestFormProperties {

		/**
		 * The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
		 * Type: double
		 */
		amount_instantly_available: FormControl<number | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.
		 * For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
		 * Minimum: 0
		 */
		days_funds_on_hold: FormControl<number | null | undefined>,

		/**
		 * The payment decision from the risk assessment.
		 * `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.
		 * `REVIEW`: the transaction requires manual review
		 * `REJECT`: reject the transaction
		 * `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication
		 * `NOT_EVALUATED`: if only logging the Signal results without using them
		 * Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`
		 */
		decision_outcome: FormControl<ProcessorSignalDecisionReportRequestDecision_outcome | null | undefined>,

		/**
		 * `true` if the ACH transaction was initiated, `false` otherwise.
		 * This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		initiated: FormControl<boolean | null | undefined>,

		/**
		 * The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		payment_method: FormControl<ProcessorSignalDecisionReportRequestPayment_method | null | undefined>,

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorSignalDecisionReportRequestFormGroup() {
		return new FormGroup<ProcessorSignalDecisionReportRequestFormProperties>({
			amount_instantly_available: new FormControl<number | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			days_funds_on_hold: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			decision_outcome: new FormControl<ProcessorSignalDecisionReportRequestDecision_outcome | null | undefined>(undefined),
			initiated: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			payment_method: new FormControl<ProcessorSignalDecisionReportRequestPayment_method | null | undefined>(undefined),
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ProcessorSignalDecisionReportRequestDecision_outcome { APPROVE = 'APPROVE', REVIEW = 'REVIEW', REJECT = 'REJECT', TAKE_OTHER_RISK_MEASURES = 'TAKE_OTHER_RISK_MEASURES', NOT_EVALUATED = 'NOT_EVALUATED' }

	export enum ProcessorSignalDecisionReportRequestPayment_method { SAME_DAY_ACH = 'SAME_DAY_ACH', NEXT_DAY_ACH = 'NEXT_DAY_ACH', STANDARD_ACH = 'STANDARD_ACH', REAL_TIME_PAYMENTS = 'REAL_TIME_PAYMENTS', DEBIT_CARD = 'DEBIT_CARD', MULTIPLE_PAYMENT_METHODS = 'MULTIPLE_PAYMENT_METHODS' }


	/** ProcessorSignalDecisionReportResponse defines the response schema for `/processor/signal/decision/report` */
	export interface ProcessorSignalDecisionReportResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ProcessorSignalDecisionReportResponse defines the response schema for `/processor/signal/decision/report` */
	export interface ProcessorSignalDecisionReportResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorSignalDecisionReportResponseFormGroup() {
		return new FormGroup<ProcessorSignalDecisionReportResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ProcessorSignalEvaluateRequest defines the request schema for `/processor/signal/evaluate` */
	export interface ProcessorSignalEvaluateRequest {

		/**
		 * The transaction amount, in USD (e.g. `102.05`)
		 * Required
		 * Type: double
		 */
		amount: number;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: string;

		/**
		 * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
		 * Max length: 36
		 */
		client_user_id?: string | null;

		/**
		 * The default ACH or non-ACH payment method to complete the transaction.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		default_payment_method?: string | null;

		/** Details about the end user's device */
		device?: SignalDevice;

		/** **true** if the ACH transaction is a recurring transaction; **false** otherwise */
		is_recurring?: boolean | null;

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** Details about the end user initiating the transaction (i.e., the account holder). */
		user?: SignalUser;

		/** `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing). */
		user_present?: boolean | null;
	}

	/** ProcessorSignalEvaluateRequest defines the request schema for `/processor/signal/evaluate` */
	export interface ProcessorSignalEvaluateRequestFormProperties {

		/**
		 * The transaction amount, in USD (e.g. `102.05`)
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
		 * Max length: 36
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * The default ACH or non-ACH payment method to complete the transaction.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		default_payment_method: FormControl<string | null | undefined>,

		/** **true** if the ACH transaction is a recurring transaction; **false** otherwise */
		is_recurring: FormControl<boolean | null | undefined>,

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing). */
		user_present: FormControl<boolean | null | undefined>,
	}
	export function CreateProcessorSignalEvaluateRequestFormGroup() {
		return new FormGroup<ProcessorSignalEvaluateRequestFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
			default_payment_method: new FormControl<string | null | undefined>(undefined),
			is_recurring: new FormControl<boolean | null | undefined>(undefined),
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			user_present: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Details about the end user's device */
	export interface SignalDevice {

		/** The IP address of the device that initiated the transaction */
		ip_address?: string | null;

		/** The user agent of the device that initiated the transaction (e.g. "Mozilla/5.0") */
		user_agent?: string | null;
	}

	/** Details about the end user's device */
	export interface SignalDeviceFormProperties {

		/** The IP address of the device that initiated the transaction */
		ip_address: FormControl<string | null | undefined>,

		/** The user agent of the device that initiated the transaction (e.g. "Mozilla/5.0") */
		user_agent: FormControl<string | null | undefined>,
	}
	export function CreateSignalDeviceFormGroup() {
		return new FormGroup<SignalDeviceFormProperties>({
			ip_address: new FormControl<string | null | undefined>(undefined),
			user_agent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details about the end user initiating the transaction (i.e., the account holder). */
	export interface SignalUser {

		/** Data about the components comprising an address. */
		address?: SignalAddressData;

		/** The user's email address. */
		email_address?: string | null;

		/** The user's legal name */
		name?: SignalPersonName;

		/** The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567" */
		phone_number?: string | null;
	}

	/** Details about the end user initiating the transaction (i.e., the account holder). */
	export interface SignalUserFormProperties {

		/** The user's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567" */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateSignalUserFormGroup() {
		return new FormGroup<SignalUserFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The user's legal name */
	export interface SignalPersonName {

		/** The user's family name / surname */
		family_name?: string | null;

		/** The user's given name. If the user has a one-word name, it should be provided in this field. */
		given_name?: string | null;

		/** The user's middle name */
		middle_name?: string | null;

		/** The user's name prefix (e.g. "Mr.") */
		prefix?: string | null;

		/** The user's name suffix (e.g. "II") */
		suffix?: string | null;
	}

	/** The user's legal name */
	export interface SignalPersonNameFormProperties {

		/** The user's family name / surname */
		family_name: FormControl<string | null | undefined>,

		/** The user's given name. If the user has a one-word name, it should be provided in this field. */
		given_name: FormControl<string | null | undefined>,

		/** The user's middle name */
		middle_name: FormControl<string | null | undefined>,

		/** The user's name prefix (e.g. "Mr.") */
		prefix: FormControl<string | null | undefined>,

		/** The user's name suffix (e.g. "II") */
		suffix: FormControl<string | null | undefined>,
	}
	export function CreateSignalPersonNameFormGroup() {
		return new FormGroup<SignalPersonNameFormProperties>({
			family_name: new FormControl<string | null | undefined>(undefined),
			given_name: new FormControl<string | null | undefined>(undefined),
			middle_name: new FormControl<string | null | undefined>(undefined),
			prefix: new FormControl<string | null | undefined>(undefined),
			suffix: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ProcessorSignalEvaluateResponse defines the response schema for `/processor/signal/evaluate` */
	export interface ProcessorSignalEvaluateResponse {

		/**
		 * The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:
		 * `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid
		 * `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days
		 * `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days
		 * `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid
		 * `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account
		 * For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
		 */
		core_attributes?: SignalEvaluateCoreAttributes;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Risk scoring details broken down by risk category.
		 * Required
		 */
		scores: SignalScores;
	}

	/** ProcessorSignalEvaluateResponse defines the response schema for `/processor/signal/evaluate` */
	export interface ProcessorSignalEvaluateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorSignalEvaluateResponseFormGroup() {
		return new FormGroup<ProcessorSignalEvaluateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:
	 * `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid
	 * `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days
	 * `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days
	 * `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid
	 * `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account
	 * For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
	 */
	export interface SignalEvaluateCoreAttributes {

		/**
		 * The number of times the account's addresses on file have changed over the past 28 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		address_change_count_28d?: number | null;

		/**
		 * The number of times the account's addresses on file have changed over the past 90 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		address_change_count_90d?: number | null;

		/**
		 * Available balance, as of the `balance_last_updated` time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
		 * Type: double
		 */
		available_balance?: number | null;

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated. */
		balance_last_updated?: Date | null;

		/**
		 * The total number of credit (inflow) transactions over the past 10 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_10d?: number | null;

		/**
		 * The total number of credit (inflow) transactions over the past 30 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_30d?: number | null;

		/**
		 * The total number of credit (inflow) transactions over the past 60 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_60d?: number | null;

		/**
		 * The total number of credit (inflow) transactions over the past 90 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_90d?: number | null;

		/**
		 * Current balance, as of the `balance_last_updated` time. The current balance is the total amount of funds in the account.
		 * Type: double
		 */
		current_balance?: number | null;

		/**
		 * The number of days since the first time the Item was connected to an application via Plaid
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_since_first_plaid_connection?: number | null;

		/**
		 * The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_with_negative_balance_count_90d?: number | null;

		/**
		 * The total number of debit (outflow) transactions over the past 10 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_10d?: number | null;

		/**
		 * The total number of debit (outflow) transactions over the past 30 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_30d?: number | null;

		/**
		 * The total number of debit (outflow) transactions over the past 60 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_60d?: number | null;

		/**
		 * The total number of debit (outflow) transactions over the past 90 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_90d?: number | null;

		/**
		 * The number of times the account's email addresses on file have changed over the past 28 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		email_change_count_28d?: number | null;

		/**
		 * The number of times the account's email addresses on file have changed over the past 90 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		email_change_count_90d?: number | null;

		/**
		 * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 30 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failed_plaid_non_oauth_authentication_attempts_count_30d?: number | null;

		/**
		 * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 3 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failed_plaid_non_oauth_authentication_attempts_count_3d?: number | null;

		/**
		 * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 7 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failed_plaid_non_oauth_authentication_attempts_count_7d?: number | null;

		/** Indicates if the ACH transaction funding account is a savings/money market account */
		is_savings_or_money_market_account?: boolean | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_30d?: number | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_60d?: number | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_7d?: number | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_90d?: number | null;

		/**
		 * The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_30d?: number | null;

		/**
		 * The 10th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_31d_to_60d?: number | null;

		/**
		 * The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_60d?: number | null;

		/**
		 * The 10th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_61d_to_90d?: number | null;

		/**
		 * The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_90d?: number | null;

		/**
		 * The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p50_credit_transactions_amount_28d?: number | null;

		/**
		 * The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p50_debit_transactions_amount_28d?: number | null;

		/**
		 * The 50th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_30d?: number | null;

		/**
		 * The 50th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_31d_to_60d?: number | null;

		/**
		 * The 50th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_60d?: number | null;

		/**
		 * The 50th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_61d_to_90d?: number | null;

		/**
		 * The 50th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_90d?: number | null;

		/**
		 * The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_30d?: number | null;

		/**
		 * The 90th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_31d_to_60d?: number | null;

		/**
		 * The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_60d?: number | null;

		/**
		 * The 90th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_61d_to_90d?: number | null;

		/**
		 * The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_90d?: number | null;

		/**
		 * The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p95_credit_transactions_amount_28d?: number | null;

		/**
		 * The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p95_debit_transactions_amount_28d?: number | null;

		/**
		 * The number of times the account's phone numbers on file have changed over the past 28 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		phone_change_count_28d?: number | null;

		/**
		 * The number of times the account's phone numbers on file have changed over the past 90 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		phone_change_count_90d?: number | null;

		/**
		 * The number of times the Item has been connected to applications via Plaid over the past 30 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_connections_count_30d?: number | null;

		/**
		 * The number of times the Item has been connected to applications via Plaid over the past 7 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_connections_count_7d?: number | null;

		/**
		 * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 30 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_non_oauth_authentication_attempts_count_30d?: number | null;

		/**
		 * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 3 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_non_oauth_authentication_attempts_count_3d?: number | null;

		/**
		 * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 7 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_non_oauth_authentication_attempts_count_7d?: number | null;

		/**
		 * The total credit (inflow) transaction amount over the past 10 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_10d?: number | null;

		/**
		 * The total credit (inflow) transaction amount over the past 30 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_30d?: number | null;

		/**
		 * The total credit (inflow) transaction amount over the past 60 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_60d?: number | null;

		/**
		 * The total credit (inflow) transaction amount over the past 90 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_90d?: number | null;

		/**
		 * The total debit (outflow) transaction amount over the past 10 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_10d?: number | null;

		/**
		 * The total debit (outflow) transaction amount over the past 30 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_30d?: number | null;

		/**
		 * The total debit (outflow) transaction amount over the past 60 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_60d?: number | null;

		/**
		 * The total debit (outflow) transaction amount over the past 90 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_90d?: number | null;

		/**
		 * The total number of times the Item has been connected to applications via Plaid
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total_plaid_connections_count?: number | null;

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the transactions for the given account have been updated. */
		transactions_last_updated?: Date | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_30d?: number | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_60d?: number | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_7d?: number | null;

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_90d?: number | null;
	}

	/**
	 * The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:
	 * `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid
	 * `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days
	 * `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days
	 * `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid
	 * `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account
	 * For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
	 */
	export interface SignalEvaluateCoreAttributesFormProperties {

		/**
		 * The number of times the account's addresses on file have changed over the past 28 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		address_change_count_28d: FormControl<number | null | undefined>,

		/**
		 * The number of times the account's addresses on file have changed over the past 90 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		address_change_count_90d: FormControl<number | null | undefined>,

		/**
		 * Available balance, as of the `balance_last_updated` time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
		 * Type: double
		 */
		available_balance: FormControl<number | null | undefined>,

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated. */
		balance_last_updated: FormControl<Date | null | undefined>,

		/**
		 * The total number of credit (inflow) transactions over the past 10 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_10d: FormControl<number | null | undefined>,

		/**
		 * The total number of credit (inflow) transactions over the past 30 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_30d: FormControl<number | null | undefined>,

		/**
		 * The total number of credit (inflow) transactions over the past 60 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_60d: FormControl<number | null | undefined>,

		/**
		 * The total number of credit (inflow) transactions over the past 90 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		credit_transactions_count_90d: FormControl<number | null | undefined>,

		/**
		 * Current balance, as of the `balance_last_updated` time. The current balance is the total amount of funds in the account.
		 * Type: double
		 */
		current_balance: FormControl<number | null | undefined>,

		/**
		 * The number of days since the first time the Item was connected to an application via Plaid
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_since_first_plaid_connection: FormControl<number | null | undefined>,

		/**
		 * The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_with_negative_balance_count_90d: FormControl<number | null | undefined>,

		/**
		 * The total number of debit (outflow) transactions over the past 10 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_10d: FormControl<number | null | undefined>,

		/**
		 * The total number of debit (outflow) transactions over the past 30 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_30d: FormControl<number | null | undefined>,

		/**
		 * The total number of debit (outflow) transactions over the past 60 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_60d: FormControl<number | null | undefined>,

		/**
		 * The total number of debit (outflow) transactions over the past 90 days from the account that will be debited
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		debit_transactions_count_90d: FormControl<number | null | undefined>,

		/**
		 * The number of times the account's email addresses on file have changed over the past 28 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		email_change_count_28d: FormControl<number | null | undefined>,

		/**
		 * The number of times the account's email addresses on file have changed over the past 90 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		email_change_count_90d: FormControl<number | null | undefined>,

		/**
		 * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 30 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failed_plaid_non_oauth_authentication_attempts_count_30d: FormControl<number | null | undefined>,

		/**
		 * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 3 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failed_plaid_non_oauth_authentication_attempts_count_3d: FormControl<number | null | undefined>,

		/**
		 * The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 7 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		failed_plaid_non_oauth_authentication_attempts_count_7d: FormControl<number | null | undefined>,

		/** Indicates if the ACH transaction funding account is a savings/money market account */
		is_savings_or_money_market_account: FormControl<boolean | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_30d: FormControl<number | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_60d: FormControl<number | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_7d: FormControl<number | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		nsf_overdraft_transactions_count_90d: FormControl<number | null | undefined>,

		/**
		 * The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_30d: FormControl<number | null | undefined>,

		/**
		 * The 10th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_31d_to_60d: FormControl<number | null | undefined>,

		/**
		 * The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_60d: FormControl<number | null | undefined>,

		/**
		 * The 10th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_61d_to_90d: FormControl<number | null | undefined>,

		/**
		 * The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
		 * Type: double
		 */
		p10_eod_balance_90d: FormControl<number | null | undefined>,

		/**
		 * The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p50_credit_transactions_amount_28d: FormControl<number | null | undefined>,

		/**
		 * The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p50_debit_transactions_amount_28d: FormControl<number | null | undefined>,

		/**
		 * The 50th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_30d: FormControl<number | null | undefined>,

		/**
		 * The 50th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_31d_to_60d: FormControl<number | null | undefined>,

		/**
		 * The 50th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_60d: FormControl<number | null | undefined>,

		/**
		 * The 50th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_61d_to_90d: FormControl<number | null | undefined>,

		/**
		 * The 50th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
		 * Type: double
		 */
		p50_eod_balance_90d: FormControl<number | null | undefined>,

		/**
		 * The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_30d: FormControl<number | null | undefined>,

		/**
		 * The 90th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_31d_to_60d: FormControl<number | null | undefined>,

		/**
		 * The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_60d: FormControl<number | null | undefined>,

		/**
		 * The 90th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_61d_to_90d: FormControl<number | null | undefined>,

		/**
		 * The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
		 * Type: double
		 */
		p90_eod_balance_90d: FormControl<number | null | undefined>,

		/**
		 * The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p95_credit_transactions_amount_28d: FormControl<number | null | undefined>,

		/**
		 * The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
		 * Type: double
		 */
		p95_debit_transactions_amount_28d: FormControl<number | null | undefined>,

		/**
		 * The number of times the account's phone numbers on file have changed over the past 28 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		phone_change_count_28d: FormControl<number | null | undefined>,

		/**
		 * The number of times the account's phone numbers on file have changed over the past 90 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		phone_change_count_90d: FormControl<number | null | undefined>,

		/**
		 * The number of times the Item has been connected to applications via Plaid over the past 30 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_connections_count_30d: FormControl<number | null | undefined>,

		/**
		 * The number of times the Item has been connected to applications via Plaid over the past 7 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_connections_count_7d: FormControl<number | null | undefined>,

		/**
		 * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 30 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_non_oauth_authentication_attempts_count_30d: FormControl<number | null | undefined>,

		/**
		 * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 3 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_non_oauth_authentication_attempts_count_3d: FormControl<number | null | undefined>,

		/**
		 * The number of non-OAuth authentication attempts via Plaid for this bank account over the past 7 days
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		plaid_non_oauth_authentication_attempts_count_7d: FormControl<number | null | undefined>,

		/**
		 * The total credit (inflow) transaction amount over the past 10 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_10d: FormControl<number | null | undefined>,

		/**
		 * The total credit (inflow) transaction amount over the past 30 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_30d: FormControl<number | null | undefined>,

		/**
		 * The total credit (inflow) transaction amount over the past 60 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_60d: FormControl<number | null | undefined>,

		/**
		 * The total credit (inflow) transaction amount over the past 90 days from the account that will be debited
		 * Type: double
		 */
		total_credit_transactions_amount_90d: FormControl<number | null | undefined>,

		/**
		 * The total debit (outflow) transaction amount over the past 10 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_10d: FormControl<number | null | undefined>,

		/**
		 * The total debit (outflow) transaction amount over the past 30 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_30d: FormControl<number | null | undefined>,

		/**
		 * The total debit (outflow) transaction amount over the past 60 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_60d: FormControl<number | null | undefined>,

		/**
		 * The total debit (outflow) transaction amount over the past 90 days from the account that will be debited
		 * Type: double
		 */
		total_debit_transactions_amount_90d: FormControl<number | null | undefined>,

		/**
		 * The total number of times the Item has been connected to applications via Plaid
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total_plaid_connections_count: FormControl<number | null | undefined>,

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the transactions for the given account have been updated. */
		transactions_last_updated: FormControl<Date | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_30d: FormControl<number | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_60d: FormControl<number | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_7d: FormControl<number | null | undefined>,

		/**
		 * We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited.
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		unauthorized_transactions_count_90d: FormControl<number | null | undefined>,
	}
	export function CreateSignalEvaluateCoreAttributesFormGroup() {
		return new FormGroup<SignalEvaluateCoreAttributesFormProperties>({
			address_change_count_28d: new FormControl<number | null | undefined>(undefined),
			address_change_count_90d: new FormControl<number | null | undefined>(undefined),
			available_balance: new FormControl<number | null | undefined>(undefined),
			balance_last_updated: new FormControl<Date | null | undefined>(undefined),
			credit_transactions_count_10d: new FormControl<number | null | undefined>(undefined),
			credit_transactions_count_30d: new FormControl<number | null | undefined>(undefined),
			credit_transactions_count_60d: new FormControl<number | null | undefined>(undefined),
			credit_transactions_count_90d: new FormControl<number | null | undefined>(undefined),
			current_balance: new FormControl<number | null | undefined>(undefined),
			days_since_first_plaid_connection: new FormControl<number | null | undefined>(undefined),
			days_with_negative_balance_count_90d: new FormControl<number | null | undefined>(undefined),
			debit_transactions_count_10d: new FormControl<number | null | undefined>(undefined),
			debit_transactions_count_30d: new FormControl<number | null | undefined>(undefined),
			debit_transactions_count_60d: new FormControl<number | null | undefined>(undefined),
			debit_transactions_count_90d: new FormControl<number | null | undefined>(undefined),
			email_change_count_28d: new FormControl<number | null | undefined>(undefined),
			email_change_count_90d: new FormControl<number | null | undefined>(undefined),
			failed_plaid_non_oauth_authentication_attempts_count_30d: new FormControl<number | null | undefined>(undefined),
			failed_plaid_non_oauth_authentication_attempts_count_3d: new FormControl<number | null | undefined>(undefined),
			failed_plaid_non_oauth_authentication_attempts_count_7d: new FormControl<number | null | undefined>(undefined),
			is_savings_or_money_market_account: new FormControl<boolean | null | undefined>(undefined),
			nsf_overdraft_transactions_count_30d: new FormControl<number | null | undefined>(undefined),
			nsf_overdraft_transactions_count_60d: new FormControl<number | null | undefined>(undefined),
			nsf_overdraft_transactions_count_7d: new FormControl<number | null | undefined>(undefined),
			nsf_overdraft_transactions_count_90d: new FormControl<number | null | undefined>(undefined),
			p10_eod_balance_30d: new FormControl<number | null | undefined>(undefined),
			p10_eod_balance_31d_to_60d: new FormControl<number | null | undefined>(undefined),
			p10_eod_balance_60d: new FormControl<number | null | undefined>(undefined),
			p10_eod_balance_61d_to_90d: new FormControl<number | null | undefined>(undefined),
			p10_eod_balance_90d: new FormControl<number | null | undefined>(undefined),
			p50_credit_transactions_amount_28d: new FormControl<number | null | undefined>(undefined),
			p50_debit_transactions_amount_28d: new FormControl<number | null | undefined>(undefined),
			p50_eod_balance_30d: new FormControl<number | null | undefined>(undefined),
			p50_eod_balance_31d_to_60d: new FormControl<number | null | undefined>(undefined),
			p50_eod_balance_60d: new FormControl<number | null | undefined>(undefined),
			p50_eod_balance_61d_to_90d: new FormControl<number | null | undefined>(undefined),
			p50_eod_balance_90d: new FormControl<number | null | undefined>(undefined),
			p90_eod_balance_30d: new FormControl<number | null | undefined>(undefined),
			p90_eod_balance_31d_to_60d: new FormControl<number | null | undefined>(undefined),
			p90_eod_balance_60d: new FormControl<number | null | undefined>(undefined),
			p90_eod_balance_61d_to_90d: new FormControl<number | null | undefined>(undefined),
			p90_eod_balance_90d: new FormControl<number | null | undefined>(undefined),
			p95_credit_transactions_amount_28d: new FormControl<number | null | undefined>(undefined),
			p95_debit_transactions_amount_28d: new FormControl<number | null | undefined>(undefined),
			phone_change_count_28d: new FormControl<number | null | undefined>(undefined),
			phone_change_count_90d: new FormControl<number | null | undefined>(undefined),
			plaid_connections_count_30d: new FormControl<number | null | undefined>(undefined),
			plaid_connections_count_7d: new FormControl<number | null | undefined>(undefined),
			plaid_non_oauth_authentication_attempts_count_30d: new FormControl<number | null | undefined>(undefined),
			plaid_non_oauth_authentication_attempts_count_3d: new FormControl<number | null | undefined>(undefined),
			plaid_non_oauth_authentication_attempts_count_7d: new FormControl<number | null | undefined>(undefined),
			total_credit_transactions_amount_10d: new FormControl<number | null | undefined>(undefined),
			total_credit_transactions_amount_30d: new FormControl<number | null | undefined>(undefined),
			total_credit_transactions_amount_60d: new FormControl<number | null | undefined>(undefined),
			total_credit_transactions_amount_90d: new FormControl<number | null | undefined>(undefined),
			total_debit_transactions_amount_10d: new FormControl<number | null | undefined>(undefined),
			total_debit_transactions_amount_30d: new FormControl<number | null | undefined>(undefined),
			total_debit_transactions_amount_60d: new FormControl<number | null | undefined>(undefined),
			total_debit_transactions_amount_90d: new FormControl<number | null | undefined>(undefined),
			total_plaid_connections_count: new FormControl<number | null | undefined>(undefined),
			transactions_last_updated: new FormControl<Date | null | undefined>(undefined),
			unauthorized_transactions_count_30d: new FormControl<number | null | undefined>(undefined),
			unauthorized_transactions_count_60d: new FormControl<number | null | undefined>(undefined),
			unauthorized_transactions_count_7d: new FormControl<number | null | undefined>(undefined),
			unauthorized_transactions_count_90d: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Risk scoring details broken down by risk category. */
	export interface SignalScores {

		/** The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: "R01", "R02", "R03", "R04", "R06", "R08",  "R09", "R13", "R16", "R17", "R20", "R23". These returns have a turnaround time of 2 banking days. */
		bank_initiated_return_risk?: BankInitiatedReturnRisk;

		/** The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: "R05", "R07", "R10", "R11", "R29". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized. */
		customer_initiated_return_risk?: CustomerInitiatedReturnRisk;
	}

	/** Risk scoring details broken down by risk category. */
	export interface SignalScoresFormProperties {
	}
	export function CreateSignalScoresFormGroup() {
		return new FormGroup<SignalScoresFormProperties>({
		});

	}


	/** ProcessorSignalReturnReportRequest defines the request schema for `/processor/signal/return/report` */
	export interface ProcessorSignalReturnReportRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/processor/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: string;

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: string;

		/**
		 * Must be a valid ACH return code (e.g. "R01")
		 * If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		return_code: string;

		/** Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`). */
		returned_at?: Date | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorSignalReturnReportRequest defines the request schema for `/processor/signal/return/report` */
	export interface ProcessorSignalReturnReportRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/processor/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/**
		 * Must be a valid ACH return code (e.g. "R01")
		 * If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		return_code: FormControl<string | null | undefined>,

		/** Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`). */
		returned_at: FormControl<Date | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorSignalReturnReportRequestFormGroup() {
		return new FormGroup<ProcessorSignalReturnReportRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			return_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ProcessorSignalReturnReportResponse defines the response schema for `/processor/signal/return/report` */
	export interface ProcessorSignalReturnReportResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ProcessorSignalReturnReportResponse defines the response schema for `/processor/signal/return/report` */
	export interface ProcessorSignalReturnReportResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorSignalReturnReportResponseFormGroup() {
		return new FormGroup<ProcessorSignalReturnReportResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ProcessorStripeBankAccountTokenCreateRequest defines the request schema for `/processor/stripe/bank_account/create` */
	export interface ProcessorStripeBankAccountTokenCreateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * The `account_id` value obtained from the `onSuccess` callback in Link
		 * Required
		 */
		account_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorStripeBankAccountTokenCreateRequest defines the request schema for `/processor/stripe/bank_account/create` */
	export interface ProcessorStripeBankAccountTokenCreateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The `account_id` value obtained from the `onSuccess` callback in Link
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorStripeBankAccountTokenCreateRequestFormGroup() {
		return new FormGroup<ProcessorStripeBankAccountTokenCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ProcessorStripeBankAccountTokenCreateResponse defines the response schema for `/processor/stripe/bank_account/create` */
	export interface ProcessorStripeBankAccountTokenCreateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * A token that can be sent to Stripe for use in making API calls to Plaid
		 * Required
		 */
		stripe_bank_account_token: string;
	}

	/** ProcessorStripeBankAccountTokenCreateResponse defines the response schema for `/processor/stripe/bank_account/create` */
	export interface ProcessorStripeBankAccountTokenCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A token that can be sent to Stripe for use in making API calls to Plaid
		 * Required
		 */
		stripe_bank_account_token: FormControl<string | null | undefined>,
	}
	export function CreateProcessorStripeBankAccountTokenCreateResponseFormGroup() {
		return new FormGroup<ProcessorStripeBankAccountTokenCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			stripe_bank_account_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ProcessorTokenCreateRequest defines the request schema for `/processor/token/create` */
	export interface ProcessorTokenCreateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * The `account_id` value obtained from the `onSuccess` callback in Link
		 * Required
		 */
		account_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The processor you are integrating with.
		 * Required
		 */
		processor: ProcessorTokenCreateRequestProcessor;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** ProcessorTokenCreateRequest defines the request schema for `/processor/token/create` */
	export interface ProcessorTokenCreateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The `account_id` value obtained from the `onSuccess` callback in Link
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The processor you are integrating with.
		 * Required
		 */
		processor: FormControl<ProcessorTokenCreateRequestProcessor | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateProcessorTokenCreateRequestFormGroup() {
		return new FormGroup<ProcessorTokenCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			processor: new FormControl<ProcessorTokenCreateRequestProcessor | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ProcessorTokenCreateRequestProcessor { dwolla = 'dwolla', galileo = 'galileo', modern_treasury = 'modern_treasury', ocrolus = 'ocrolus', prime_trust = 'prime_trust', vesta = 'vesta', drivewealth = 'drivewealth', vopay = 'vopay', achq = 'achq', check = 'check', checkbook = 'checkbook', circle = 'circle', sila_money = 'sila_money', rize = 'rize', svb_api = 'svb_api', unit = 'unit', wyre = 'wyre', lithic = 'lithic', alpaca = 'alpaca', astra = 'astra', moov = 'moov', treasury_prime = 'treasury_prime', marqeta = 'marqeta', checkout = 'checkout', solid = 'solid', highnote = 'highnote', apex_clearing = 'apex_clearing', gusto = 'gusto', adyen = 'adyen', atomic = 'atomic', i2c = 'i2c', wepay = 'wepay', riskified = 'riskified', utb = 'utb', adp_roll = 'adp_roll', fortress_trust = 'fortress_trust' }


	/** ProcessorTokenCreateResponse defines the response schema for `/processor/token/create` and `/processor/apex/processor_token/create` */
	export interface ProcessorTokenCreateResponse {

		/**
		 * The `processor_token` that can then be used by the Plaid partner to make API requests
		 * Required
		 */
		processor_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** ProcessorTokenCreateResponse defines the response schema for `/processor/token/create` and `/processor/apex/processor_token/create` */
	export interface ProcessorTokenCreateResponseFormProperties {

		/**
		 * The `processor_token` that can then be used by the Plaid partner to make API requests
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateProcessorTokenCreateResponseFormGroup() {
		return new FormGroup<ProcessorTokenCreateResponseFormProperties>({
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
	 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
	 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
	 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
	 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
	 */
	export enum ProgramNameSensitivity { coarse = 'coarse', balanced = 'balanced', strict = 'strict', exact = 'exact' }


	/** The employee's estimated annual salary, as derived from information reported on the paystub. */
	export interface ProjectedIncomeSummaryFieldNumber extends IncomeSummaryFieldNumber {
	}

	/** The employee's estimated annual salary, as derived from information reported on the paystub. */
	export interface ProjectedIncomeSummaryFieldNumberFormProperties extends IncomeSummaryFieldNumberFormProperties {
	}
	export function CreateProjectedIncomeSummaryFieldNumberFormGroup() {
		return new FormGroup<ProjectedIncomeSummaryFieldNumberFormProperties>({
			value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * An enum indicating whether a network proxy is present and if so what type it is.
	 * `none_detected` indicates the user is not on a detectable proxy network.
	 * `tor` indicates the user was using a Tor browser, which sends encrypted traffic on a decentralized network and is somewhat similar to a VPN (Virtual Private Network).
	 * `vpn` indicates the user is on a VPN (Virtual Private Network)
	 * `web_proxy` indicates the user is on a web proxy server, which may allow them to conceal information such as their IP address or other identifying information.
	 * `public_proxy` indicates the user is on a public web proxy server, which is similar to a web proxy but can be shared by multiple users. This may allow multiple users to appear as if they have the same IP address for instance.
	 */
	export enum ProxyType { none_detected = 'none_detected', tor = 'tor', vpn = 'vpn', web_proxy = 'web_proxy', public_proxy = 'public_proxy' }


	/** The request was flagged by Plaid's fraud system, and requires additional verification to ensure they are not a bot. */
	export interface Recaptcha_RequiredError {

		/**
		 * Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.
		 * Required
		 */
		common_causes: string;

		/** Required */
		display_message: string;

		/**
		 * RECAPTCHA_REQUIRED
		 * Required
		 */
		error_code: string;

		/**
		 * RECAPTCHA_ERROR
		 * Required
		 */
		error_type: string;

		/**
		 * 400
		 * Required
		 */
		http_code: string;

		/**
		 * Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step.
		 * Required
		 */
		link_user_experience: string;

		/**
		 * Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.
		 * If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`
		 * Required
		 */
		troubleshooting_steps: string;
	}

	/** The request was flagged by Plaid's fraud system, and requires additional verification to ensure they are not a bot. */
	export interface Recaptcha_RequiredErrorFormProperties {

		/**
		 * Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.
		 * Required
		 */
		common_causes: FormControl<string | null | undefined>,

		/** Required */
		display_message: FormControl<string | null | undefined>,

		/**
		 * RECAPTCHA_REQUIRED
		 * Required
		 */
		error_code: FormControl<string | null | undefined>,

		/**
		 * RECAPTCHA_ERROR
		 * Required
		 */
		error_type: FormControl<string | null | undefined>,

		/**
		 * 400
		 * Required
		 */
		http_code: FormControl<string | null | undefined>,

		/**
		 * Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step.
		 * Required
		 */
		link_user_experience: FormControl<string | null | undefined>,

		/**
		 * Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.
		 * If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`
		 * Required
		 */
		troubleshooting_steps: FormControl<string | null | undefined>,
	}
	export function CreateRecaptcha_RequiredErrorFormGroup() {
		return new FormGroup<Recaptcha_RequiredErrorFormProperties>({
			common_causes: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			display_message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			error_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			http_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			link_user_experience: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			troubleshooting_steps: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing a BACS account number and sort code. If an IBAN is not provided or if you need to accept domestic GBP-denominated payments, BACS data is required. */
	export interface RecipientBACS {

		/**
		 * The account number of the account. Maximum of 10 characters.
		 * Min length: 1
		 * Max length: 10
		 */
		account?: string | null;

		/**
		 * The 6-character sort code of the account.
		 * Min length: 6
		 * Max length: 6
		 */
		sort_code?: string | null;
	}

	/** An object containing a BACS account number and sort code. If an IBAN is not provided or if you need to accept domestic GBP-denominated payments, BACS data is required. */
	export interface RecipientBACSFormProperties {

		/**
		 * The account number of the account. Maximum of 10 characters.
		 * Min length: 1
		 * Max length: 10
		 */
		account: FormControl<string | null | undefined>,

		/**
		 * The 6-character sort code of the account.
		 * Min length: 6
		 * Max length: 6
		 */
		sort_code: FormControl<string | null | undefined>,
	}
	export function CreateRecipientBACSFormGroup() {
		return new FormGroup<RecipientBACSFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			sort_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(6), Validators.maxLength(6)]),
		});

	}


	/** An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
	export interface RecipientBACSNullable extends RecipientBACS {
	}

	/** An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
	export interface RecipientBACSNullableFormProperties extends RecipientBACSFormProperties {
	}
	export function CreateRecipientBACSNullableFormGroup() {
		return new FormGroup<RecipientBACSNullableFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			sort_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(6), Validators.maxLength(6)]),
		});

	}


	/** Fired when a recurring transfer is cancelled by Plaid. */
	export interface RecurringCancelledWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: string;

		/**
		 * `RECURRING_CANCELLED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when a recurring transfer is cancelled by Plaid. */
	export interface RecurringCancelledWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: FormControl<string | null | undefined>,

		/**
		 * `RECURRING_CANCELLED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateRecurringCancelledWebhookFormGroup() {
		return new FormGroup<RecurringCancelledWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			recurring_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when a new transfer of a recurring transfer is originated. */
	export interface RecurringNewTransferWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: string;

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: string;

		/**
		 * `RECURRING_NEW_TRANSFER`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when a new transfer of a recurring transfer is originated. */
	export interface RecurringNewTransferWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * `RECURRING_NEW_TRANSFER`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateRecurringNewTransferWebhookFormGroup() {
		return new FormGroup<RecurringNewTransferWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			recurring_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Describes the frequency of the transaction stream.
	 * `WEEKLY`: Assigned to a transaction stream that occurs approximately every week.
	 * `BIWEEKLY`: Assigned to a transaction stream that occurs approximately every 2 weeks.
	 * `SEMI_MONTHLY`: Assigned to a transaction stream that occurs approximately twice per month. This frequency is typically seen for inflow transaction streams.
	 * `MONTHLY`: Assigned to a transaction stream that occurs approximately every month.
	 * `ANNUALLY`: Assigned to a transaction stream that occurs approximately every year.
	 * `UNKNOWN`: Assigned to a transaction stream that does not fit any of the pre-defined frequencies.
	 */
	export enum RecurringTransactionFrequency { UNKNOWN = 'UNKNOWN', WEEKLY = 'WEEKLY', BIWEEKLY = 'BIWEEKLY', SEMI_MONTHLY = 'SEMI_MONTHLY', MONTHLY = 'MONTHLY', ANNUALLY = 'ANNUALLY' }


	/**
	 * Fired when recurring transactions data is updated. This includes when a new recurring stream is detected or when a new transaction is added to an existing recurring stream. The `RECURRING_TRANSACTIONS_UPDATE` webhook will also fire when one or more attributes of the recurring stream changes, which is usually a result of the addition, update, or removal of transactions to the stream.
	 * After receipt of this webhook, the updated data can be fetched from `/transactions/recurring/get`.
	 */
	export interface RecurringTransactionsUpdateWebhook {

		/**
		 * A list of `account_ids` for accounts that have new or updated recurring transactions data.
		 * Required
		 */
		account_ids: Array<string>;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `RECURRING_TRANSACTIONS_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: string;
	}

	/**
	 * Fired when recurring transactions data is updated. This includes when a new recurring stream is detected or when a new transaction is added to an existing recurring stream. The `RECURRING_TRANSACTIONS_UPDATE` webhook will also fire when one or more attributes of the recurring stream changes, which is usually a result of the addition, update, or removal of transactions to the stream.
	 * After receipt of this webhook, the updated data can be fetched from `/transactions/recurring/get`.
	 */
	export interface RecurringTransactionsUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `RECURRING_TRANSACTIONS_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateRecurringTransactionsUpdateWebhookFormGroup() {
		return new FormGroup<RecurringTransactionsUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents a recurring transfer within the Transfers API. */
	export interface RecurringTransfer {

		/**
		 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
		 * Required
		 */
		account_id: string;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/**
		 * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: Date;

		/**
		 * The description of the recurring transfer.
		 * Required
		 */
		description: string;

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: string;

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: RecurringTransferNetwork;

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * The next transfer origination date after bank holiday adjustment.
		 * Required
		 * Type: DateOnly
		 */
		next_origination_date: Date;

		/**
		 * Plaidâ€™s unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: string;

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: string;

		/**
		 * The schedule that the recurring transfer will be executed on.
		 * Required
		 */
		schedule: TransferRecurringSchedule;

		/**
		 * The status of the recurring transfer.
		 * `active`: The recurring transfer is currently active.
		 * `cancelled`: The recurring transfer was cancelled by the client or Plaid.
		 * `expired`: The recurring transfer has completed all originations according to its recurring schedule.
		 * Required
		 */
		status: RecurringTransferStatus;

		/** Plaidâ€™s unique identifier for a test clock. */
		test_clock_id?: string | null;

		/** Required */
		transfer_ids: Array<string>;

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferUserInResponse;
	}

	/** Represents a recurring transfer within the Transfers API. */
	export interface RecurringTransferFormProperties {

		/**
		 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * The description of the recurring transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: FormControl<RecurringTransferNetwork | null | undefined>,

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
		 * The next transfer origination date after bank holiday adjustment.
		 * Required
		 * Type: DateOnly
		 */
		next_origination_date: FormControl<Date | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: FormControl<string | null | undefined>,

		/**
		 * The status of the recurring transfer.
		 * `active`: The recurring transfer is currently active.
		 * `cancelled`: The recurring transfer was cancelled by the client or Plaid.
		 * `expired`: The recurring transfer has completed all originations according to its recurring schedule.
		 * Required
		 */
		status: FormControl<RecurringTransferStatus | null | undefined>,

		/** Plaidâ€™s unique identifier for a test clock. */
		test_clock_id: FormControl<string | null | undefined>,

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,
	}
	export function CreateRecurringTransferFormGroup() {
		return new FormGroup<RecurringTransferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<RecurringTransferNetwork | null | undefined>(undefined, [Validators.required]),
			next_origination_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recurring_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<RecurringTransferStatus | null | undefined>(undefined, [Validators.required]),
			test_clock_id: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RecurringTransferNetwork { ach = 'ach', 'same-day-ach' = 'same-day-ach', rtp = 'rtp' }


	/** The schedule that the recurring transfer will be executed on. */
	export interface TransferRecurringSchedule {

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will end on the last `interval_execution_day` on or before the `end_date`.
		 * If the `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/transfer/recurring/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
		 * Type: DateOnly
		 */
		end_date?: Date | null;

		/**
		 * The number of recurring `interval_units` between originations. The recurring interval(before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`.
		 * For instance, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		interval_count: number;

		/**
		 * The day of the interval on which to schedule the transfer.
		 * If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).
		 * If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.
		 * The transfer will be originated on next available banking day if the designated day is a non banking day.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		interval_execution_day: number;

		/**
		 * The unit of the recurring interval.
		 * Required
		 * Min length: 1
		 */
		interval_unit: TransferRecurringScheduleInterval_unit;

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.
		 * If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
		 * Required
		 * Type: DateOnly
		 */
		start_date: Date;
	}

	/** The schedule that the recurring transfer will be executed on. */
	export interface TransferRecurringScheduleFormProperties {

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will end on the last `interval_execution_day` on or before the `end_date`.
		 * If the `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/transfer/recurring/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The number of recurring `interval_units` between originations. The recurring interval(before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`.
		 * For instance, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		interval_count: FormControl<number | null | undefined>,

		/**
		 * The day of the interval on which to schedule the transfer.
		 * If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).
		 * If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.
		 * The transfer will be originated on next available banking day if the designated day is a non banking day.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		interval_execution_day: FormControl<number | null | undefined>,

		/**
		 * The unit of the recurring interval.
		 * Required
		 * Min length: 1
		 */
		interval_unit: FormControl<TransferRecurringScheduleInterval_unit | null | undefined>,

		/**
		 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.
		 * If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
		 * Required
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateTransferRecurringScheduleFormGroup() {
		return new FormGroup<TransferRecurringScheduleFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined),
			interval_count: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			interval_execution_day: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			interval_unit: new FormControl<TransferRecurringScheduleInterval_unit | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransferRecurringScheduleInterval_unit { week = 'week', month = 'month' }

	export enum RecurringTransferStatus { active = 'active', cancelled = 'cancelled', expired = 'expired' }


	/** The legal name and other information for the account holder. */
	export interface TransferUserInResponse {

		/**
		 * The address associated with the account holder.
		 * Required
		 */
		address: TransferUserAddressInResponse;

		/**
		 * The user's email address.
		 * Required
		 */
		email_address: string;

		/**
		 * The user's legal name.
		 * Required
		 */
		legal_name: string;

		/**
		 * The user's phone number.
		 * Required
		 */
		phone_number: string;
	}

	/** The legal name and other information for the account holder. */
	export interface TransferUserInResponseFormProperties {

		/**
		 * The user's email address.
		 * Required
		 */
		email_address: FormControl<string | null | undefined>,

		/**
		 * The user's legal name.
		 * Required
		 */
		legal_name: FormControl<string | null | undefined>,

		/**
		 * The user's phone number.
		 * Required
		 */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateTransferUserInResponseFormGroup() {
		return new FormGroup<TransferUserInResponseFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The address associated with the account holder. */
	export interface TransferUserAddressInResponse {

		/**
		 * Ex. "San Francisco"
		 * Required
		 */
		city: string;

		/**
		 * A two-letter country code (e.g., "US").
		 * Required
		 */
		country: string;

		/**
		 * The postal code (e.g., "94103").
		 * Required
		 */
		postal_code: string;

		/**
		 * The state or province (e.g., "CA").
		 * Required
		 */
		region: string;

		/**
		 * The street number and name (i.e., "100 Market St.").
		 * Required
		 */
		street: string;
	}

	/** The address associated with the account holder. */
	export interface TransferUserAddressInResponseFormProperties {

		/**
		 * Ex. "San Francisco"
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * A two-letter country code (e.g., "US").
		 * Required
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The postal code (e.g., "94103").
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The state or province (e.g., "CA").
		 * Required
		 */
		region: FormControl<string | null | undefined>,

		/**
		 * The street number and name (i.e., "100 Market St.").
		 * Required
		 */
		street: FormControl<string | null | undefined>,
	}
	export function CreateTransferUserAddressInResponseFormGroup() {
		return new FormGroup<TransferUserAddressInResponseFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			region: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			street: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents a recurring transfer within the Transfers API. */
	export interface RecurringTransferNullable {
	}

	/** Represents a recurring transfer within the Transfers API. */
	export interface RecurringTransferNullableFormProperties {
	}
	export function CreateRecurringTransferNullableFormGroup() {
		return new FormGroup<RecurringTransferNullableFormProperties>({
		});

	}


	/** Fired when Plaid is unable to originate a new ACH transaction of the recurring transfer on the planned date. */
	export interface RecurringTransferSkippedWebhook {

		/**
		 * A decision regarding the proposed transfer.
		 * `approved` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		authorization_decision: RecurringTransferSkippedWebhookAuthorization_decision;

		/**
		 * A code representing the rationale for approving or declining the proposed transfer. Possible values are:
		 * `MANUALLY_VERIFIED_ITEM` â€“ Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.
		 * `ITEM_LOGIN_REQUIRED` â€“ Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.
		 * `PAYMENT_PROFILE_LOGIN_REQUIRED` - Unable to collect the account information due to invalid login when using Payment Profiles. Can be rectified using update mode for Payment Profile. Plaid will offer `approved` as a transaction decision.
		 * `ERROR` â€“ Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.
		 * `NSF` â€“ Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.
		 * `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.
		 * `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit. Plaid will offer `declined` as a transaction decision.
		 * `MIGRATED_ACCOUNT_ITEM` - Item created via `/transfer/account_migration` endpoint, limited information available. Plaid will offer `approved` as a transaction decision.
		 */
		authorization_decision_rationale_code?: RecurringTransferSkippedWebhookAuthorization_decision_rationale_code | null;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: string;

		/**
		 * The planned date on which Plaid is unable to originate a new ACH transaction of the recurring transfer. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		skipped_origination_date: Date;

		/**
		 * `RECURRING_TRANSFER_SKIPPED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when Plaid is unable to originate a new ACH transaction of the recurring transfer on the planned date. */
	export interface RecurringTransferSkippedWebhookFormProperties {

		/**
		 * A decision regarding the proposed transfer.
		 * `approved` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		authorization_decision: FormControl<RecurringTransferSkippedWebhookAuthorization_decision | null | undefined>,

		/**
		 * A code representing the rationale for approving or declining the proposed transfer. Possible values are:
		 * `MANUALLY_VERIFIED_ITEM` â€“ Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.
		 * `ITEM_LOGIN_REQUIRED` â€“ Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.
		 * `PAYMENT_PROFILE_LOGIN_REQUIRED` - Unable to collect the account information due to invalid login when using Payment Profiles. Can be rectified using update mode for Payment Profile. Plaid will offer `approved` as a transaction decision.
		 * `ERROR` â€“ Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.
		 * `NSF` â€“ Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.
		 * `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.
		 * `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit. Plaid will offer `declined` as a transaction decision.
		 * `MIGRATED_ACCOUNT_ITEM` - Item created via `/transfer/account_migration` endpoint, limited information available. Plaid will offer `approved` as a transaction decision.
		 */
		authorization_decision_rationale_code: FormControl<RecurringTransferSkippedWebhookAuthorization_decision_rationale_code | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: FormControl<string | null | undefined>,

		/**
		 * The planned date on which Plaid is unable to originate a new ACH transaction of the recurring transfer. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		skipped_origination_date: FormControl<Date | null | undefined>,

		/**
		 * `RECURRING_TRANSFER_SKIPPED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateRecurringTransferSkippedWebhookFormGroup() {
		return new FormGroup<RecurringTransferSkippedWebhookFormProperties>({
			authorization_decision: new FormControl<RecurringTransferSkippedWebhookAuthorization_decision | null | undefined>(undefined, [Validators.required]),
			authorization_decision_rationale_code: new FormControl<RecurringTransferSkippedWebhookAuthorization_decision_rationale_code | null | undefined>(undefined),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			recurring_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			skipped_origination_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RecurringTransferSkippedWebhookAuthorization_decision { approved = 'approved', declined = 'declined' }

	export enum RecurringTransferSkippedWebhookAuthorization_decision_rationale_code { NSF = 'NSF', RISK = 'RISK', TRANSFER_LIMIT_REACHED = 'TRANSFER_LIMIT_REACHED', MANUALLY_VERIFIED_ITEM = 'MANUALLY_VERIFIED_ITEM', ITEM_LOGIN_REQUIRED = 'ITEM_LOGIN_REQUIRED', PAYMENT_PROFILE_LOGIN_REQUIRED = 'PAYMENT_PROFILE_LOGIN_REQUIRED', ERROR = 'ERROR', MIGRATED_ACCOUNT_ITEM = 'MIGRATED_ACCOUNT_ITEM' }


	/** A representation of a removed transaction */
	export interface RemovedTransaction {

		/** The ID of the removed transaction. */
		transaction_id?: string | null;
	}

	/** A representation of a removed transaction */
	export interface RemovedTransactionFormProperties {

		/** The ID of the removed transaction. */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateRemovedTransactionFormGroup() {
		return new FormGroup<RemovedTransactionFormProperties>({
			transaction_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The report type. It can be `assets` or `income`. */
	export enum ReportType { assets = 'assets', income = 'income' }


	/**
	 * Field describing the outcome of a bot detection behavior risk check.
	 * `yes` indicates that automated activity was detected.
	 * `no` indicates that automated activity was not detected.
	 * `no_data` indicates there was not enough information available to give an accurate signal.
	 */
	export enum RiskCheckBehaviorBotDetectedLabel { yes = 'yes', no = 'no', no_data = 'no_data' }


	/**
	 * Field describing the outcome of a fraud ring behavior risk check.
	 * `yes` indicates that fraud ring activity was detected.
	 * `no` indicates that fraud ring activity was not detected.
	 * `no_data` indicates there was not enough information available to give an accurate signal.
	 */
	export enum RiskCheckBehaviorFraudRingDetectedLabel { yes = 'yes', no = 'no', no_data = 'no_data' }


	/**
	 * Field describing the overall user interaction signals of a behavior risk check. This value represents how familiar the user is with the personal data they provide, based on a number of signals that are collected during their session.
	 * `genuine` indicates the user has high familiarity with the data they are providing, and that fraud is unlikely.
	 * `neutral` indicates some signals are present in between `risky` and `genuine`, but there are not enough clear signals to determine an outcome.
	 * `risky` indicates the user has low familiarity with the data they are providing, and that fraud is likely.
	 * `no_data` indicates there is not sufficient information to give an accurate signal.
	 */
	export enum RiskCheckBehaviorUserInteractionsLabel { genuine = 'genuine', neutral = 'neutral', risky = 'risky', no_data = 'no_data' }


	/** Indicates whether the email address domain is custom if known, i.e. a company domain and not free or disposable. */
	export enum RiskCheckEmailDomainIsCustom { yes = 'yes', no = 'no', no_data = 'no_data' }


	/** Indicates whether the email domain is listed as disposable if known. Disposable domains are often used to create email addresses that are part of a fake set of user details. */
	export enum RiskCheckEmailDomainIsDisposable { yes = 'yes', no = 'no', no_data = 'no_data' }


	/** Indicates whether the email address domain is a free provider such as Gmail or Hotmail if known. */
	export enum RiskCheckEmailDomainIsFreeProvider { yes = 'yes', no = 'no', no_data = 'no_data' }


	/** SMTP-MX check to confirm the email address exists if known. */
	export enum RiskCheckEmailIsDeliverableStatus { yes = 'yes', no = 'no', no_data = 'no_data' }


	/** Indicates whether the email address top level domain, which is the last part of the domain, is fraudulent or risky if known. In most cases, a suspicious top level domain is also associated with a disposable or high-risk domain. */
	export enum RiskCheckEmailTopLevelDomainIsSuspicious { yes = 'yes', no = 'no', no_data = 'no_data' }


	/** Defines the request schema for `/sandbox/bank_transfer/fire_webhook` */
	export interface SandboxBankTransferFireWebhookRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The URL to which the webhook should be sent.
		 * Required
		 */
		webhook: string;
	}

	/** Defines the request schema for `/sandbox/bank_transfer/fire_webhook` */
	export interface SandboxBankTransferFireWebhookRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL to which the webhook should be sent.
		 * Required
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateSandboxBankTransferFireWebhookRequestFormGroup() {
		return new FormGroup<SandboxBankTransferFireWebhookRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/sandbox/bank_transfer/fire_webhook` */
	export interface SandboxBankTransferFireWebhookResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/sandbox/bank_transfer/fire_webhook` */
	export interface SandboxBankTransferFireWebhookResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxBankTransferFireWebhookResponseFormGroup() {
		return new FormGroup<SandboxBankTransferFireWebhookResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/bank_transfer/simulate` */
	export interface SandboxBankTransferSimulateRequest {

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.
		 * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
		 * `pending` --> `failed`
		 * `pending` --> `posted`
		 * `posted` --> `reversed`
		 * Required
		 */
		event_type: string;

		/** The failure reason if the type of this transfer is `"failed"` or `"reversed"`. Null value otherwise. */
		failure_reason?: BankTransferFailure;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/sandbox/bank_transfer/simulate` */
	export interface SandboxBankTransferSimulateRequestFormProperties {

		/**
		 * Plaidâ€™s unique identifier for a bank transfer.
		 * Required
		 */
		bank_transfer_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.
		 * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
		 * `pending` --> `failed`
		 * `pending` --> `posted`
		 * `posted` --> `reversed`
		 * Required
		 */
		event_type: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSandboxBankTransferSimulateRequestFormGroup() {
		return new FormGroup<SandboxBankTransferSimulateRequestFormProperties>({
			bank_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			event_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/sandbox/bank_transfer/simulate` */
	export interface SandboxBankTransferSimulateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/sandbox/bank_transfer/simulate` */
	export interface SandboxBankTransferSimulateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxBankTransferSimulateResponseFormGroup() {
		return new FormGroup<SandboxBankTransferSimulateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook` */
	export interface SandboxIncomeFireWebhookRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The Item ID associated with the verification.
		 * Required
		 */
		item_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The Plaid `user_id` of the User associated with this webhook, warning, or error. */
		user_id?: string | null;

		/**
		 * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
		 * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
		 * `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
		 * Required
		 */
		verification_status: SandboxIncomeFireWebhookRequestVerification_status;

		/**
		 * The URL to which the webhook should be sent.
		 * Required
		 */
		webhook: string;
	}

	/** SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook` */
	export interface SandboxIncomeFireWebhookRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The Item ID associated with the verification.
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The Plaid `user_id` of the User associated with this webhook, warning, or error. */
		user_id: FormControl<string | null | undefined>,

		/**
		 * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
		 * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
		 * `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
		 * Required
		 */
		verification_status: FormControl<SandboxIncomeFireWebhookRequestVerification_status | null | undefined>,

		/**
		 * The URL to which the webhook should be sent.
		 * Required
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateSandboxIncomeFireWebhookRequestFormGroup() {
		return new FormGroup<SandboxIncomeFireWebhookRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			user_id: new FormControl<string | null | undefined>(undefined),
			verification_status: new FormControl<SandboxIncomeFireWebhookRequestVerification_status | null | undefined>(undefined, [Validators.required]),
			webhook: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SandboxIncomeFireWebhookRequestVerification_status { VERIFICATION_STATUS_PROCESSING_COMPLETE = 'VERIFICATION_STATUS_PROCESSING_COMPLETE', VERIFICATION_STATUS_PROCESSING_FAILED = 'VERIFICATION_STATUS_PROCESSING_FAILED', VERIFICATION_STATUS_PENDING_APPROVAL = 'VERIFICATION_STATUS_PENDING_APPROVAL' }


	/** SandboxIncomeFireWebhookResponse defines the response schema for `/sandbox/income/fire_webhook` */
	export interface SandboxIncomeFireWebhookResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** SandboxIncomeFireWebhookResponse defines the response schema for `/sandbox/income/fire_webhook` */
	export interface SandboxIncomeFireWebhookResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxIncomeFireWebhookResponseFormGroup() {
		return new FormGroup<SandboxIncomeFireWebhookResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SandboxItemFireWebhookRequest defines the request schema for `/sandbox/item/fire_webhook` */
	export interface SandboxItemFireWebhookRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The webhook codes that can be fired by this test endpoint.
		 * Required
		 */
		webhook_code: SandboxItemFireWebhookRequestWebhook_code;

		/** The webhook types that can be fired by this test endpoint. */
		webhook_type?: SandboxItemFireWebhookRequestWebhook_type | null;
	}

	/** SandboxItemFireWebhookRequest defines the request schema for `/sandbox/item/fire_webhook` */
	export interface SandboxItemFireWebhookRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The webhook codes that can be fired by this test endpoint.
		 * Required
		 */
		webhook_code: FormControl<SandboxItemFireWebhookRequestWebhook_code | null | undefined>,

		/** The webhook types that can be fired by this test endpoint. */
		webhook_type: FormControl<SandboxItemFireWebhookRequestWebhook_type | null | undefined>,
	}
	export function CreateSandboxItemFireWebhookRequestFormGroup() {
		return new FormGroup<SandboxItemFireWebhookRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			webhook_code: new FormControl<SandboxItemFireWebhookRequestWebhook_code | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<SandboxItemFireWebhookRequestWebhook_type | null | undefined>(undefined),
		});

	}

	export enum SandboxItemFireWebhookRequestWebhook_code { DEFAULT_UPDATE = 'DEFAULT_UPDATE', NEW_ACCOUNTS_AVAILABLE = 'NEW_ACCOUNTS_AVAILABLE', AUTH_DATA_UPDATE = 'AUTH_DATA_UPDATE', RECURRING_TRANSACTIONS_UPDATE = 'RECURRING_TRANSACTIONS_UPDATE', SYNC_UPDATES_AVAILABLE = 'SYNC_UPDATES_AVAILABLE' }

	export enum SandboxItemFireWebhookRequestWebhook_type { AUTH = 'AUTH', HOLDINGS = 'HOLDINGS', INVESTMENTS_TRANSACTIONS = 'INVESTMENTS_TRANSACTIONS', ITEM = 'ITEM', LIABILITIES = 'LIABILITIES', TRANSACTIONS = 'TRANSACTIONS' }


	/** SandboxItemFireWebhookResponse defines the response schema for `/sandbox/item/fire_webhook` */
	export interface SandboxItemFireWebhookResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Value is `true`  if the test` webhook_code`  was successfully fired.
		 * Required
		 */
		webhook_fired: boolean;
	}

	/** SandboxItemFireWebhookResponse defines the response schema for `/sandbox/item/fire_webhook` */
	export interface SandboxItemFireWebhookResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * Value is `true`  if the test` webhook_code`  was successfully fired.
		 * Required
		 */
		webhook_fired: FormControl<boolean | null | undefined>,
	}
	export function CreateSandboxItemFireWebhookResponseFormGroup() {
		return new FormGroup<SandboxItemFireWebhookResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_fired: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SandboxItemResetLoginRequest defines the request schema for `/sandbox/item/reset_login` */
	export interface SandboxItemResetLoginRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** SandboxItemResetLoginRequest defines the request schema for `/sandbox/item/reset_login` */
	export interface SandboxItemResetLoginRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSandboxItemResetLoginRequestFormGroup() {
		return new FormGroup<SandboxItemResetLoginRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** SandboxItemResetLoginResponse defines the response schema for `/sandbox/item/reset_login` */
	export interface SandboxItemResetLoginResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * `true` if the call succeeded
		 * Required
		 */
		reset_login: boolean;
	}

	/** SandboxItemResetLoginResponse defines the response schema for `/sandbox/item/reset_login` */
	export interface SandboxItemResetLoginResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * `true` if the call succeeded
		 * Required
		 */
		reset_login: FormControl<boolean | null | undefined>,
	}
	export function CreateSandboxItemResetLoginResponseFormGroup() {
		return new FormGroup<SandboxItemResetLoginResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reset_login: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SandboxItemSetVerificationStatusRequest defines the request schema for `/sandbox/item/set_verification_status` */
	export interface SandboxItemSetVerificationStatusRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * The `account_id` of the account whose verification status is to be modified
		 * Required
		 */
		account_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The verification status to set the account to.
		 * Required
		 */
		verification_status: SandboxItemSetVerificationStatusRequestVerification_status;
	}

	/** SandboxItemSetVerificationStatusRequest defines the request schema for `/sandbox/item/set_verification_status` */
	export interface SandboxItemSetVerificationStatusRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The `account_id` of the account whose verification status is to be modified
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The verification status to set the account to.
		 * Required
		 */
		verification_status: FormControl<SandboxItemSetVerificationStatusRequestVerification_status | null | undefined>,
	}
	export function CreateSandboxItemSetVerificationStatusRequestFormGroup() {
		return new FormGroup<SandboxItemSetVerificationStatusRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			verification_status: new FormControl<SandboxItemSetVerificationStatusRequestVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SandboxItemSetVerificationStatusRequestVerification_status { automatically_verified = 'automatically_verified', verification_expired = 'verification_expired' }


	/** SandboxItemSetVerificationStatusResponse defines the response schema for `/sandbox/item/set_verification_status` */
	export interface SandboxItemSetVerificationStatusResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** SandboxItemSetVerificationStatusResponse defines the response schema for `/sandbox/item/set_verification_status` */
	export interface SandboxItemSetVerificationStatusResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxItemSetVerificationStatusResponseFormGroup() {
		return new FormGroup<SandboxItemSetVerificationStatusResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `sandbox/oauth/select_accounts` */
	export interface SandboxOauthSelectAccountsRequest {

		/** Required */
		accounts: Array<string>;

		/** Required */
		oauth_state_id: string;
	}

	/** Defines the request schema for `sandbox/oauth/select_accounts` */
	export interface SandboxOauthSelectAccountsRequestFormProperties {

		/** Required */
		oauth_state_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxOauthSelectAccountsRequestFormGroup() {
		return new FormGroup<SandboxOauthSelectAccountsRequestFormProperties>({
			oauth_state_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/sandbox/oauth/select_accounts` */
	export interface SandboxOauthSelectAccountsResponse {
	}

	/** Defines the response schema for `/sandbox/oauth/select_accounts` */
	export interface SandboxOauthSelectAccountsResponseFormProperties {
	}
	export function CreateSandboxOauthSelectAccountsResponseFormGroup() {
		return new FormGroup<SandboxOauthSelectAccountsResponseFormProperties>({
		});

	}


	/** SandboxPaymentProfileResetLoginRequest defines the request schema for `/sandbox/payment_profile/reset_login` */
	export interface SandboxPaymentProfileResetLoginRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** SandboxPaymentProfileResetLoginRequest defines the request schema for `/sandbox/payment_profile/reset_login` */
	export interface SandboxPaymentProfileResetLoginRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A payment profile token associated with the Payment Profile data that is being requested.
		 * Required
		 */
		payment_profile_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSandboxPaymentProfileResetLoginRequestFormGroup() {
		return new FormGroup<SandboxPaymentProfileResetLoginRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			payment_profile_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** SandboxPaymentProfileResetLoginResponse defines the response schema for `/sandbox/payment_profile/reset_login` */
	export interface SandboxPaymentProfileResetLoginResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * `true` if the call succeeded
		 * Required
		 */
		reset_login: boolean;
	}

	/** SandboxPaymentProfileResetLoginResponse defines the response schema for `/sandbox/payment_profile/reset_login` */
	export interface SandboxPaymentProfileResetLoginResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * `true` if the call succeeded
		 * Required
		 */
		reset_login: FormControl<boolean | null | undefined>,
	}
	export function CreateSandboxPaymentProfileResetLoginResponseFormGroup() {
		return new FormGroup<SandboxPaymentProfileResetLoginResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reset_login: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SandboxProcessorTokenCreateRequest defines the request schema for `/sandbox/processor_token/create` */
	export interface SandboxProcessorTokenCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The ID of the institution the Item will be associated with
		 * Required
		 */
		institution_id: string;

		/** An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
		options?: SandboxProcessorTokenCreateRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** SandboxProcessorTokenCreateRequest defines the request schema for `/sandbox/processor_token/create` */
	export interface SandboxProcessorTokenCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the institution the Item will be associated with
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSandboxProcessorTokenCreateRequestFormGroup() {
		return new FormGroup<SandboxProcessorTokenCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
	export interface SandboxProcessorTokenCreateRequestOptions {

		/** Test password to use for the creation of the Sandbox Item. Default value is `pass_good`. */
		override_password?: string | null;

		/** Test username to use for the creation of the Sandbox Item. Default value is `user_good`. */
		override_username?: string | null;
	}

	/** An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
	export interface SandboxProcessorTokenCreateRequestOptionsFormProperties {

		/** Test password to use for the creation of the Sandbox Item. Default value is `pass_good`. */
		override_password: FormControl<string | null | undefined>,

		/** Test username to use for the creation of the Sandbox Item. Default value is `user_good`. */
		override_username: FormControl<string | null | undefined>,
	}
	export function CreateSandboxProcessorTokenCreateRequestOptionsFormGroup() {
		return new FormGroup<SandboxProcessorTokenCreateRequestOptionsFormProperties>({
			override_password: new FormControl<string | null | undefined>(undefined),
			override_username: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** SandboxProcessorTokenCreateResponse defines the response schema for `/sandbox/processor_token/create` */
	export interface SandboxProcessorTokenCreateResponse {

		/**
		 * A processor token that can be used to call the `/processor/` endpoints.
		 * Required
		 */
		processor_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** SandboxProcessorTokenCreateResponse defines the response schema for `/sandbox/processor_token/create` */
	export interface SandboxProcessorTokenCreateResponseFormProperties {

		/**
		 * A processor token that can be used to call the `/processor/` endpoints.
		 * Required
		 */
		processor_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxProcessorTokenCreateResponseFormGroup() {
		return new FormGroup<SandboxProcessorTokenCreateResponseFormProperties>({
			processor_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SandboxPublicTokenCreateRequest defines the request schema for `/sandbox/public_token/create` */
	export interface SandboxPublicTokenCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The products to initially pull for the Item. May be any products that the specified `institution_id`  supports. This array may not be empty.
		 * Required
		 * Minimum items: 1
		 */
		initial_products: Array<Products>;

		/**
		 * The ID of the institution the Item will be associated with
		 * Required
		 */
		institution_id: string;

		/** An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
		options?: SandboxPublicTokenCreateRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user token associated with the User data is being requested for. */
		user_token?: string | null;
	}

	/** SandboxPublicTokenCreateRequest defines the request schema for `/sandbox/public_token/create` */
	export interface SandboxPublicTokenCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the institution the Item will be associated with
		 * Required
		 */
		institution_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user token associated with the User data is being requested for. */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateSandboxPublicTokenCreateRequestFormGroup() {
		return new FormGroup<SandboxPublicTokenCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			user_token: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
	export interface SandboxPublicTokenCreateRequestOptions {

		/** A set of parameters for income verification options. This field is required if `income_verification` is included in the `initial_products` array. */
		income_verification?: SandboxPublicTokenCreateRequestOptionsIncomeVerification;

		/** Test password to use for the creation of the Sandbox Item. Default value is `pass_good`. */
		override_password?: string | null;

		/** Test username to use for the creation of the Sandbox Item. Default value is `user_good`. */
		override_username?: string | null;

		/** An optional set of parameters corresponding to transactions options. */
		transactions?: SandboxPublicTokenCreateRequestOptionsTransactions;

		/** Specify a webhook to associate with the new Item. */
		webhook?: string | null;
	}

	/** An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
	export interface SandboxPublicTokenCreateRequestOptionsFormProperties {

		/** Test password to use for the creation of the Sandbox Item. Default value is `pass_good`. */
		override_password: FormControl<string | null | undefined>,

		/** Test username to use for the creation of the Sandbox Item. Default value is `user_good`. */
		override_username: FormControl<string | null | undefined>,

		/** Specify a webhook to associate with the new Item. */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateSandboxPublicTokenCreateRequestOptionsFormGroup() {
		return new FormGroup<SandboxPublicTokenCreateRequestOptionsFormProperties>({
			override_password: new FormControl<string | null | undefined>(undefined),
			override_username: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A set of parameters for income verification options. This field is required if `income_verification` is included in the `initial_products` array. */
	export interface SandboxPublicTokenCreateRequestOptionsIncomeVerification {

		/** Specifies options for Bank Income. This field is required if `income_verification` is included in the `initial_products` array and `bank` is specified in `income_source_types`. */
		bank_income?: SandboxPublicTokenCreateRequestIncomeVerificationBankIncome;

		/** The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
		income_source_types?: Array<IncomeVerificationSourceType>;
	}

	/** A set of parameters for income verification options. This field is required if `income_verification` is included in the `initial_products` array. */
	export interface SandboxPublicTokenCreateRequestOptionsIncomeVerificationFormProperties {
	}
	export function CreateSandboxPublicTokenCreateRequestOptionsIncomeVerificationFormGroup() {
		return new FormGroup<SandboxPublicTokenCreateRequestOptionsIncomeVerificationFormProperties>({
		});

	}


	/** Specifies options for Bank Income. This field is required if `income_verification` is included in the `initial_products` array and `bank` is specified in `income_source_types`. */
	export interface SandboxPublicTokenCreateRequestIncomeVerificationBankIncome {

		/**
		 * The number of days of data to request for the Bank Income product
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested?: number | null;
	}

	/** Specifies options for Bank Income. This field is required if `income_verification` is included in the `initial_products` array and `bank` is specified in `income_source_types`. */
	export interface SandboxPublicTokenCreateRequestIncomeVerificationBankIncomeFormProperties {

		/**
		 * The number of days of data to request for the Bank Income product
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		days_requested: FormControl<number | null | undefined>,
	}
	export function CreateSandboxPublicTokenCreateRequestIncomeVerificationBankIncomeFormGroup() {
		return new FormGroup<SandboxPublicTokenCreateRequestIncomeVerificationBankIncomeFormProperties>({
			days_requested: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An optional set of parameters corresponding to transactions options. */
	export interface SandboxPublicTokenCreateRequestOptionsTransactions {

		/**
		 * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Type: DateOnly
		 */
		end_date?: Date | null;

		/**
		 * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Type: DateOnly
		 */
		start_date?: Date | null;
	}

	/** An optional set of parameters corresponding to transactions options. */
	export interface SandboxPublicTokenCreateRequestOptionsTransactionsFormProperties {

		/**
		 * The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateSandboxPublicTokenCreateRequestOptionsTransactionsFormGroup() {
		return new FormGroup<SandboxPublicTokenCreateRequestOptionsTransactionsFormProperties>({
			end_date: new FormControl<Date | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** SandboxPublicTokenCreateResponse defines the response schema for `/sandbox/public_token/create` */
	export interface SandboxPublicTokenCreateResponse {

		/**
		 * A public token that can be exchanged for an access token using `/item/public_token/exchange`
		 * Required
		 */
		public_token: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** SandboxPublicTokenCreateResponse defines the response schema for `/sandbox/public_token/create` */
	export interface SandboxPublicTokenCreateResponseFormProperties {

		/**
		 * A public token that can be exchanged for an access token using `/item/public_token/exchange`
		 * Required
		 */
		public_token: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxPublicTokenCreateResponseFormGroup() {
		return new FormGroup<SandboxPublicTokenCreateResponseFormProperties>({
			public_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/transfer/fire_webhook` */
	export interface SandboxTransferFireWebhookRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The URL to which the webhook should be sent.
		 * Required
		 */
		webhook: string;
	}

	/** Defines the request schema for `/sandbox/transfer/fire_webhook` */
	export interface SandboxTransferFireWebhookRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The URL to which the webhook should be sent.
		 * Required
		 */
		webhook: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferFireWebhookRequestFormGroup() {
		return new FormGroup<SandboxTransferFireWebhookRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			webhook: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/fire_webhook` */
	export interface SandboxTransferFireWebhookResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/sandbox/transfer/fire_webhook` */
	export interface SandboxTransferFireWebhookResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferFireWebhookResponseFormGroup() {
		return new FormGroup<SandboxTransferFireWebhookResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/transfer/repayment/simulate` */
	export interface SandboxTransferRepaymentSimulateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/sandbox/transfer/repayment/simulate` */
	export interface SandboxTransferRepaymentSimulateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferRepaymentSimulateRequestFormGroup() {
		return new FormGroup<SandboxTransferRepaymentSimulateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/repayment/simulate` */
	export interface SandboxTransferRepaymentSimulateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/sandbox/transfer/repayment/simulate` */
	export interface SandboxTransferRepaymentSimulateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferRepaymentSimulateResponseFormGroup() {
		return new FormGroup<SandboxTransferRepaymentSimulateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/transfer/simulate` */
	export interface SandboxTransferSimulateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The asynchronous event to be simulated. May be: `posted`, `settled`, `failed`, or `returned`.
		 * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
		 * `pending` --> `failed`
		 * `pending` --> `posted`
		 * `posted` --> `returned`
		 * `posted` --> `settled`
		 * Required
		 */
		event_type: string;

		/** The failure reason if the event type for a transfer is `"failed"` or `"returned"`. Null value otherwise. */
		failure_reason?: TransferFailure;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: string;
	}

	/** Defines the request schema for `/sandbox/transfer/simulate` */
	export interface SandboxTransferSimulateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The asynchronous event to be simulated. May be: `posted`, `settled`, `failed`, or `returned`.
		 * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
		 * `pending` --> `failed`
		 * `pending` --> `posted`
		 * `posted` --> `returned`
		 * `posted` --> `settled`
		 * Required
		 */
		event_type: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferSimulateRequestFormGroup() {
		return new FormGroup<SandboxTransferSimulateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			event_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The failure reason if the event type for a transfer is `"failed"` or `"returned"`. Null value otherwise. */
	export interface TransferFailure {

		/** The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `returned`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes). */
		ach_return_code?: string | null;

		/** A human-readable description of the reason for the failure or reversal. */
		description?: string | null;
	}

	/** The failure reason if the event type for a transfer is `"failed"` or `"returned"`. Null value otherwise. */
	export interface TransferFailureFormProperties {

		/** The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `returned`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes). */
		ach_return_code: FormControl<string | null | undefined>,

		/** A human-readable description of the reason for the failure or reversal. */
		description: FormControl<string | null | undefined>,
	}
	export function CreateTransferFailureFormGroup() {
		return new FormGroup<TransferFailureFormProperties>({
			ach_return_code: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/simulate` */
	export interface SandboxTransferSimulateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/sandbox/transfer/simulate` */
	export interface SandboxTransferSimulateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferSimulateResponseFormGroup() {
		return new FormGroup<SandboxTransferSimulateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/transfer/sweep/simulate` */
	export interface SandboxTransferSweepSimulateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/sandbox/transfer/sweep/simulate` */
	export interface SandboxTransferSweepSimulateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferSweepSimulateRequestFormGroup() {
		return new FormGroup<SandboxTransferSweepSimulateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/sweep/simulate` */
	export interface SandboxTransferSweepSimulateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * A sweep returned from the `/sandbox/transfer/sweep/simulate` endpoint.
		 * Can be null if there are no transfers to include in a sweep.
		 */
		sweep?: SimulatedTransferSweep;
	}

	/** Defines the response schema for `/sandbox/transfer/sweep/simulate` */
	export interface SandboxTransferSweepSimulateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferSweepSimulateResponseFormGroup() {
		return new FormGroup<SandboxTransferSweepSimulateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A sweep returned from the `/sandbox/transfer/sweep/simulate` endpoint.
	 * Can be null if there are no transfers to include in a sweep.
	 */
	export interface SimulatedTransferSweep {
	}

	/**
	 * A sweep returned from the `/sandbox/transfer/sweep/simulate` endpoint.
	 * Can be null if there are no transfers to include in a sweep.
	 */
	export interface SimulatedTransferSweepFormProperties {
	}
	export function CreateSimulatedTransferSweepFormGroup() {
		return new FormGroup<SimulatedTransferSweepFormProperties>({
		});

	}


	/** Defines the request schema for `/sandbox/transfer/test_clock/advance` */
	export interface SandboxTransferTestClockAdvanceRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		new_virtual_time: Date;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a test clock.
		 * Required
		 */
		test_clock_id: string;
	}

	/** Defines the request schema for `/sandbox/transfer/test_clock/advance` */
	export interface SandboxTransferTestClockAdvanceRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		new_virtual_time: FormControl<Date | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a test clock.
		 * Required
		 */
		test_clock_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferTestClockAdvanceRequestFormGroup() {
		return new FormGroup<SandboxTransferTestClockAdvanceRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			new_virtual_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			test_clock_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/test_clock/advance` */
	export interface SandboxTransferTestClockAdvanceResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/sandbox/transfer/test_clock/advance` */
	export interface SandboxTransferTestClockAdvanceResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferTestClockAdvanceResponseFormGroup() {
		return new FormGroup<SandboxTransferTestClockAdvanceResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/transfer/test_clock/create` */
	export interface SandboxTransferTestClockCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		virtual_time: Date;
	}

	/** Defines the request schema for `/sandbox/transfer/test_clock/create` */
	export interface SandboxTransferTestClockCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		virtual_time: FormControl<Date | null | undefined>,
	}
	export function CreateSandboxTransferTestClockCreateRequestFormGroup() {
		return new FormGroup<SandboxTransferTestClockCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			virtual_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/test_clock/create` */
	export interface SandboxTransferTestClockCreateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Defines the test clock for a transfer.
		 * Required
		 */
		test_clock: TransferTestClock;
	}

	/** Defines the response schema for `/sandbox/transfer/test_clock/create` */
	export interface SandboxTransferTestClockCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferTestClockCreateResponseFormGroup() {
		return new FormGroup<SandboxTransferTestClockCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the test clock for a transfer. */
	export interface TransferTestClock {

		/**
		 * Plaidâ€™s unique identifier for a test clock.
		 * Required
		 */
		test_clock_id: string;

		/**
		 * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		virtual_time: Date;
	}

	/** Defines the test clock for a transfer. */
	export interface TransferTestClockFormProperties {

		/**
		 * Plaidâ€™s unique identifier for a test clock.
		 * Required
		 */
		test_clock_id: FormControl<string | null | undefined>,

		/**
		 * The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		virtual_time: FormControl<Date | null | undefined>,
	}
	export function CreateTransferTestClockFormGroup() {
		return new FormGroup<TransferTestClockFormProperties>({
			test_clock_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			virtual_time: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/transfer/test_clock/get` */
	export interface SandboxTransferTestClockGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a test clock.
		 * Required
		 */
		test_clock_id: string;
	}

	/** Defines the request schema for `/sandbox/transfer/test_clock/get` */
	export interface SandboxTransferTestClockGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a test clock.
		 * Required
		 */
		test_clock_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferTestClockGetRequestFormGroup() {
		return new FormGroup<SandboxTransferTestClockGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			test_clock_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/test_clock/get` */
	export interface SandboxTransferTestClockGetResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Defines the test clock for a transfer.
		 * Required
		 */
		test_clock: TransferTestClock;
	}

	/** Defines the response schema for `/sandbox/transfer/test_clock/get` */
	export interface SandboxTransferTestClockGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferTestClockGetResponseFormGroup() {
		return new FormGroup<SandboxTransferTestClockGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/sandbox/transfer/test_clock/list` */
	export interface SandboxTransferTestClockListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of test clocks to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** The end virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_virtual_time?: Date | null;

		/**
		 * The number of test clocks to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_virtual_time?: Date | null;
	}

	/** Defines the request schema for `/sandbox/transfer/test_clock/list` */
	export interface SandboxTransferTestClockListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of test clocks to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** The end virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_virtual_time: FormControl<Date | null | undefined>,

		/**
		 * The number of test clocks to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_virtual_time: FormControl<Date | null | undefined>,
	}
	export function CreateSandboxTransferTestClockListRequestFormGroup() {
		return new FormGroup<SandboxTransferTestClockListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			end_virtual_time: new FormControl<Date | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			secret: new FormControl<string | null | undefined>(undefined),
			start_virtual_time: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/sandbox/transfer/test_clock/list` */
	export interface SandboxTransferTestClockListResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** Required */
		test_clocks: Array<TransferTestClock>;
	}

	/** Defines the response schema for `/sandbox/transfer/test_clock/list` */
	export interface SandboxTransferTestClockListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSandboxTransferTestClockListResponseFormGroup() {
		return new FormGroup<SandboxTransferTestClockListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`. */
	export enum ScopesContext { ENROLLMENT = 'ENROLLMENT', PORTAL = 'PORTAL' }


	/** The scopes object */
	export interface ScopesNullable extends Scopes {
	}

	/** The scopes object */
	export interface ScopesNullableFormProperties extends ScopesFormProperties {
	}
	export function CreateScopesNullableFormGroup() {
		return new FormGroup<ScopesNullableFormProperties>({
			new_accounts: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Analysis information describing why a screening hit matched the provided user information */
	export interface ScreeningHitAnalysis {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		dates_of_birth?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		documents?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		locations?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		names?: EntityScreeningHitAnalysisDocuments | null;

		/**
		 * The version of the screening's `search_terms` that were compared when the screening hit was added. screening hits are immutable once they have been reviewed. If changes are detected due to updates to the screening's `search_terms`, the associated program, or the list's source data prior to review, the screening hit will be updated to reflect those changes.
		 * Required
		 * Type: double
		 */
		search_terms_version: number;
	}

	/** Analysis information describing why a screening hit matched the provided user information */
	export interface ScreeningHitAnalysisFormProperties {

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		dates_of_birth: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		documents: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		locations: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * An enum indicating the match type between data provided by user and data checked against an external data source.
		 * `match` indicates that the provided input data was a strong match against external data.
		 * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
		 * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
		 * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
		 * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
		 */
		names: FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>,

		/**
		 * The version of the screening's `search_terms` that were compared when the screening hit was added. screening hits are immutable once they have been reviewed. If changes are detected due to updates to the screening's `search_terms`, the associated program, or the list's source data prior to review, the screening hit will be updated to reflect those changes.
		 * Required
		 * Type: double
		 */
		search_terms_version: FormControl<number | null | undefined>,
	}
	export function CreateScreeningHitAnalysisFormGroup() {
		return new FormGroup<ScreeningHitAnalysisFormProperties>({
			dates_of_birth: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			documents: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			locations: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			names: new FormControl<EntityScreeningHitAnalysisDocuments | null | undefined>(undefined),
			search_terms_version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information associated with the watchlist hit */
	export interface ScreeningHitData {

		/** Dates of birth associated with the watchlist hit */
		dates_of_birth?: Array<ScreeningHitDateOfBirthItem>;

		/** Documents associated with the watchlist hit */
		documents?: Array<ScreeningHitDocumentsItems>;

		/** Locations associated with the watchlist hit */
		locations?: Array<GenericScreeningHitLocationItems>;

		/** Names associated with the watchlist hit */
		names?: Array<ScreeningHitNamesItems>;
	}

	/** Information associated with the watchlist hit */
	export interface ScreeningHitDataFormProperties {
	}
	export function CreateScreeningHitDataFormGroup() {
		return new FormGroup<ScreeningHitDataFormProperties>({
		});

	}


	/** Analyzed date of birth for the associated hit */
	export interface ScreeningHitDateOfBirthItem {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** A date range with a start and end date */
		data?: DateRange;
	}

	/** Analyzed date of birth for the associated hit */
	export interface ScreeningHitDateOfBirthItemFormProperties {
	}
	export function CreateScreeningHitDateOfBirthItemFormGroup() {
		return new FormGroup<ScreeningHitDateOfBirthItemFormProperties>({
		});

	}


	/** Analyzed document information for the associated hit */
	export interface ScreeningHitDocumentsItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** An official document, usually issued by a governing body or institution, with an associated identifier. */
		data?: WatchlistScreeningDocument;
	}

	/** Analyzed document information for the associated hit */
	export interface ScreeningHitDocumentsItemsFormProperties {
	}
	export function CreateScreeningHitDocumentsItemsFormGroup() {
		return new FormGroup<ScreeningHitDocumentsItemsFormProperties>({
		});

	}


	/** An official document, usually issued by a governing body or institution, with an associated identifier. */
	export interface WatchlistScreeningDocument {

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		number: string;

		/**
		 * The kind of official document represented by this object.
		 * `birth_certificate` - A certificate of birth
		 * `drivers_license` - A license to operate a motor vehicle
		 * `immigration_number` - Immigration or residence documents
		 * `military_id` - Identification issued by a military group
		 * `other` - Any document not covered by other categories
		 * `passport` - An official passport issue by a government
		 * `personal_identification` - Any generic personal identification that is not covered by other categories
		 * `ration_card` - Identification that entitles the holder to rations
		 * `ssn` - United States Social Security Number
		 * `student_id` - Identification issued by an educational institution
		 * `tax_id` - Identification issued for the purpose of collecting taxes
		 * `travel_document` - Visas, entry permits, refugee documents, etc.
		 * `voter_id` - Identification issued for the purpose of voting
		 * Required
		 */
		type: WatchlistScreeningDocumentType;
	}

	/** An official document, usually issued by a governing body or institution, with an associated identifier. */
	export interface WatchlistScreeningDocumentFormProperties {

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		number: FormControl<string | null | undefined>,

		/**
		 * The kind of official document represented by this object.
		 * `birth_certificate` - A certificate of birth
		 * `drivers_license` - A license to operate a motor vehicle
		 * `immigration_number` - Immigration or residence documents
		 * `military_id` - Identification issued by a military group
		 * `other` - Any document not covered by other categories
		 * `passport` - An official passport issue by a government
		 * `personal_identification` - Any generic personal identification that is not covered by other categories
		 * `ration_card` - Identification that entitles the holder to rations
		 * `ssn` - United States Social Security Number
		 * `student_id` - Identification issued by an educational institution
		 * `tax_id` - Identification issued for the purpose of collecting taxes
		 * `travel_document` - Visas, entry permits, refugee documents, etc.
		 * `voter_id` - Identification issued for the purpose of voting
		 * Required
		 */
		type: FormControl<WatchlistScreeningDocumentType | null | undefined>,
	}
	export function CreateWatchlistScreeningDocumentFormGroup() {
		return new FormGroup<WatchlistScreeningDocumentFormProperties>({
			number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4)]),
			type: new FormControl<WatchlistScreeningDocumentType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum WatchlistScreeningDocumentType { birth_certificate = 'birth_certificate', drivers_license = 'drivers_license', immigration_number = 'immigration_number', military_id = 'military_id', other = 'other', passport = 'passport', personal_identification = 'personal_identification', ration_card = 'ration_card', ssn = 'ssn', student_id = 'student_id', tax_id = 'tax_id', travel_document = 'travel_document', voter_id = 'voter_id' }


	/** Analyzed name information for the associated hit */
	export interface ScreeningHitNamesItems {

		/** Summary object reflecting the match result of the associated data */
		analysis?: MatchSummary;

		/** Name information for the associated individual watchlist hit */
		data?: IndividualScreeningHitNames;
	}

	/** Analyzed name information for the associated hit */
	export interface ScreeningHitNamesItemsFormProperties {
	}
	export function CreateScreeningHitNamesItemsFormGroup() {
		return new FormGroup<ScreeningHitNamesItemsFormProperties>({
		});

	}


	/** Fired when an individual screening status has changed, which can occur manually via the dashboard or during ongoing monitoring. */
	export interface ScreeningStatusUpdatedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The ID of the associated screening.
		 * Required
		 */
		screening_id: string;

		/**
		 * `STATUS_UPDATED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `SCREENING`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an individual screening status has changed, which can occur manually via the dashboard or during ongoing monitoring. */
	export interface ScreeningStatusUpdatedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The ID of the associated screening.
		 * Required
		 */
		screening_id: FormControl<string | null | undefined>,

		/**
		 * `STATUS_UPDATED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `SCREENING`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateScreeningStatusUpdatedWebhookFormGroup() {
		return new FormGroup<ScreeningStatusUpdatedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
	export interface SenderBACSNullable extends RecipientBACS {
	}

	/** An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
	export interface SenderBACSNullableFormProperties extends RecipientBACSFormProperties {
	}
	export function CreateSenderBACSNullableFormGroup() {
		return new FormGroup<SenderBACSNullableFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			sort_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(6), Validators.maxLength(6)]),
		});

	}


	/** Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
	export enum ServiceProductFulfillmentIdentifier { VOA = 'VOA', VOETRANSACTIONS = 'VOETRANSACTIONS' }


	/**
	 * The payment decision from the risk assessment.
	 * `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.
	 * `REVIEW`: the transaction requires manual review
	 * `REJECT`: reject the transaction
	 * `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication
	 * `NOT_EVALUATED`: if only logging the Signal results without using them
	 * Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`
	 */
	export enum SignalDecisionOutcome { APPROVE = 'APPROVE', REVIEW = 'REVIEW', REJECT = 'REJECT', TAKE_OTHER_RISK_MEASURES = 'TAKE_OTHER_RISK_MEASURES', NOT_EVALUATED = 'NOT_EVALUATED' }


	/** SignalDecisionReportRequest defines the request schema for `/signal/decision/report` */
	export interface SignalDecisionReportRequest {

		/**
		 * The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
		 * Type: double
		 */
		amount_instantly_available?: number | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: string;

		/**
		 * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.
		 * For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
		 * Minimum: 0
		 */
		days_funds_on_hold?: number | null;

		/**
		 * The payment decision from the risk assessment.
		 * `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.
		 * `REVIEW`: the transaction requires manual review
		 * `REJECT`: reject the transaction
		 * `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication
		 * `NOT_EVALUATED`: if only logging the Signal results without using them
		 * Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`
		 */
		decision_outcome?: ProcessorSignalDecisionReportRequestDecision_outcome | null;

		/**
		 * `true` if the ACH transaction was initiated, `false` otherwise.
		 * This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		initiated: boolean;

		/**
		 * The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		payment_method?: ProcessorSignalDecisionReportRequestPayment_method | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** SignalDecisionReportRequest defines the request schema for `/signal/decision/report` */
	export interface SignalDecisionReportRequestFormProperties {

		/**
		 * The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
		 * Type: double
		 */
		amount_instantly_available: FormControl<number | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.
		 * For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
		 * Minimum: 0
		 */
		days_funds_on_hold: FormControl<number | null | undefined>,

		/**
		 * The payment decision from the risk assessment.
		 * `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.
		 * `REVIEW`: the transaction requires manual review
		 * `REJECT`: reject the transaction
		 * `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication
		 * `NOT_EVALUATED`: if only logging the Signal results without using them
		 * Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`
		 */
		decision_outcome: FormControl<ProcessorSignalDecisionReportRequestDecision_outcome | null | undefined>,

		/**
		 * `true` if the ACH transaction was initiated, `false` otherwise.
		 * This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		initiated: FormControl<boolean | null | undefined>,

		/**
		 * The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		payment_method: FormControl<ProcessorSignalDecisionReportRequestPayment_method | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSignalDecisionReportRequestFormGroup() {
		return new FormGroup<SignalDecisionReportRequestFormProperties>({
			amount_instantly_available: new FormControl<number | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			days_funds_on_hold: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			decision_outcome: new FormControl<ProcessorSignalDecisionReportRequestDecision_outcome | null | undefined>(undefined),
			initiated: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			payment_method: new FormControl<ProcessorSignalDecisionReportRequestPayment_method | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** SignalDecisionReportResponse defines the response schema for `/signal/decision/report` */
	export interface SignalDecisionReportResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** SignalDecisionReportResponse defines the response schema for `/signal/decision/report` */
	export interface SignalDecisionReportResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSignalDecisionReportResponseFormGroup() {
		return new FormGroup<SignalDecisionReportResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SignalEvaluateRequest defines the request schema for `/signal/evaluate` */
	export interface SignalEvaluateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * The Plaid `account_id` of the account that is the funding source for the proposed transaction. The `account_id` is returned in the `/accounts/get` endpoint as well as the [`onSuccess`](/docs/link/ios/#link-ios-onsuccess-linkSuccess-metadata-accounts-id) callback metadata.
		 * This will return an [`INVALID_ACCOUNT_ID`](/docs/errors/invalid-input/#invalid_account_id) error if the account has been removed at the bank or if the `account_id` is no longer valid.
		 * Required
		 */
		account_id: string;

		/**
		 * The transaction amount, in USD (e.g. `102.05`)
		 * Required
		 * Type: double
		 */
		amount: number;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: string;

		/**
		 * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
		 * Max length: 36
		 */
		client_user_id?: string | null;

		/**
		 * The default ACH or non-ACH payment method to complete the transaction.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		default_payment_method?: string | null;

		/** Details about the end user's device */
		device?: SignalDevice;

		/** `true` if the ACH transaction is a recurring transaction; `false` otherwise */
		is_recurring?: boolean | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** Details about the end user initiating the transaction (i.e., the account holder). */
		user?: SignalUser;

		/** `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing). */
		user_present?: boolean | null;
	}

	/** SignalEvaluateRequest defines the request schema for `/signal/evaluate` */
	export interface SignalEvaluateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The Plaid `account_id` of the account that is the funding source for the proposed transaction. The `account_id` is returned in the `/accounts/get` endpoint as well as the [`onSuccess`](/docs/link/ios/#link-ios-onsuccess-linkSuccess-metadata-accounts-id) callback metadata.
		 * This will return an [`INVALID_ACCOUNT_ID`](/docs/errors/invalid-input/#invalid_account_id) error if the account has been removed at the bank or if the `account_id` is no longer valid.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The transaction amount, in USD (e.g. `102.05`)
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
		 * Max length: 36
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * The default ACH or non-ACH payment method to complete the transaction.
		 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
		 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
		 * `STANDARD_ACH`: standard ACH by NACHA
		 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
		 * `DEBIT_CARD`: if the default payment is over debit card networks
		 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
		 * Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
		 */
		default_payment_method: FormControl<string | null | undefined>,

		/** `true` if the ACH transaction is a recurring transaction; `false` otherwise */
		is_recurring: FormControl<boolean | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing). */
		user_present: FormControl<boolean | null | undefined>,
	}
	export function CreateSignalEvaluateRequestFormGroup() {
		return new FormGroup<SignalEvaluateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(36)]),
			default_payment_method: new FormControl<string | null | undefined>(undefined),
			is_recurring: new FormControl<boolean | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			user_present: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** SignalEvaluateResponse defines the response schema for `/signal/income/evaluate` */
	export interface SignalEvaluateResponse {

		/**
		 * The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:
		 * `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid
		 * `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days
		 * `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days
		 * `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid
		 * `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account
		 * For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
		 */
		core_attributes?: SignalEvaluateCoreAttributes;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Risk scoring details broken down by risk category.
		 * Required
		 */
		scores: SignalScores;

		/** If bank information was not able to be used as features into the Signal model, this array contains warnings describing why we were missing bank data */
		warnings?: Array<SignalWarning>;
	}

	/** SignalEvaluateResponse defines the response schema for `/signal/income/evaluate` */
	export interface SignalEvaluateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSignalEvaluateResponseFormGroup() {
		return new FormGroup<SignalEvaluateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Conveys information about the errors causing missing or stale bank data used to construct the /signal/evaluate scores and response */
	export interface SignalWarning {

		/** The particular warning code. */
		warning_code?: string | null;

		/** A developer-friendly representation of the warning code. */
		warning_message?: string | null;

		/** Broad categorization of the warning. */
		warning_type?: string | null;
	}

	/** Conveys information about the errors causing missing or stale bank data used to construct the /signal/evaluate scores and response */
	export interface SignalWarningFormProperties {

		/** The particular warning code. */
		warning_code: FormControl<string | null | undefined>,

		/** A developer-friendly representation of the warning code. */
		warning_message: FormControl<string | null | undefined>,

		/** Broad categorization of the warning. */
		warning_type: FormControl<string | null | undefined>,
	}
	export function CreateSignalWarningFormGroup() {
		return new FormGroup<SignalWarningFormProperties>({
			warning_code: new FormControl<string | null | undefined>(undefined),
			warning_message: new FormControl<string | null | undefined>(undefined),
			warning_type: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.
	 * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
	 * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
	 * `STANDARD_ACH`: standard ACH by NACHA
	 * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
	 * `DEBIT_CARD`: if the default payment is over debit card networks
	 * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
	 * Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
	 */
	export enum SignalPaymentMethod { SAME_DAY_ACH = 'SAME_DAY_ACH', NEXT_DAY_ACH = 'NEXT_DAY_ACH', STANDARD_ACH = 'STANDARD_ACH', REAL_TIME_PAYMENTS = 'REAL_TIME_PAYMENTS', DEBIT_CARD = 'DEBIT_CARD', MULTIPLE_PAYMENT_METHODS = 'MULTIPLE_PAYMENT_METHODS' }


	/** SignalPrepareRequest defines the request schema for `/signal/prepare` */
	export interface SignalPrepareRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** SignalPrepareRequest defines the request schema for `/signal/prepare` */
	export interface SignalPrepareRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSignalPrepareRequestFormGroup() {
		return new FormGroup<SignalPrepareRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** SignalPrepareResponse defines the response schema for `/signal/prepare` */
	export interface SignalPrepareResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** SignalPrepareResponse defines the response schema for `/signal/prepare` */
	export interface SignalPrepareResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSignalPrepareResponseFormGroup() {
		return new FormGroup<SignalPrepareResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** SignalReturnReportRequest defines the request schema for `/signal/return/report` */
	export interface SignalReturnReportRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: string;

		/**
		 * Must be a valid ACH return code (e.g. "R01")
		 * If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		return_code: string;

		/** Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`). */
		returned_at?: Date | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** SignalReturnReportRequest defines the request schema for `/signal/return/report` */
	export interface SignalReturnReportRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate`
		 * Required
		 * Min length: 1
		 * Max length: 36
		 */
		client_transaction_id: FormControl<string | null | undefined>,

		/**
		 * Must be a valid ACH return code (e.g. "R01")
		 * If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
		 * Required
		 */
		return_code: FormControl<string | null | undefined>,

		/** Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`). */
		returned_at: FormControl<Date | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateSignalReturnReportRequestFormGroup() {
		return new FormGroup<SignalReturnReportRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(36)]),
			return_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** SignalReturnReportResponse defines the response schema for `/signal/return/report` */
	export interface SignalReturnReportResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** SignalReturnReportResponse defines the response schema for `/signal/return/report` */
	export interface SignalReturnReportResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateSignalReturnReportResponseFormGroup() {
		return new FormGroup<SignalReturnReportResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A type indicating whether a dashboard user, an API-based user, or Plaid last touched this object. */
	export enum Source { dashboard = 'dashboard', link = 'link', api = 'api', system = 'system' }


	/** The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts. */
	export interface StandaloneAccountType {

		/**
		 * A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
		 * Required
		 */
		credit: string;

		/**
		 * An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets.
		 * Required
		 */
		depository: string;

		/**
		 * An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
		 * Required
		 */
		investment: string;

		/**
		 * A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
		 * Required
		 */
		loan: string;

		/**
		 * Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets.
		 * Required
		 */
		other: string;
	}

	/** The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts. */
	export interface StandaloneAccountTypeFormProperties {

		/**
		 * A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
		 * Required
		 */
		credit: FormControl<string | null | undefined>,

		/**
		 * An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets.
		 * Required
		 */
		depository: FormControl<string | null | undefined>,

		/**
		 * An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
		 * Required
		 */
		investment: FormControl<string | null | undefined>,

		/**
		 * A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
		 * Required
		 */
		loan: FormControl<string | null | undefined>,

		/**
		 * Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets.
		 * Required
		 */
		other: FormControl<string | null | undefined>,
	}
	export function CreateStandaloneAccountTypeFormGroup() {
		return new FormGroup<StandaloneAccountTypeFormProperties>({
			credit: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			depository: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			investment: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			loan: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			other: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The following currency codes are supported by Plaid. */
	export interface StandaloneCurrencyCodeList {

		/**
		 * Plaid supports all ISO 4217 currency codes.
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * List of unofficial currency codes
		 * Required
		 */
		unofficial_currency_code: string;
	}

	/** The following currency codes are supported by Plaid. */
	export interface StandaloneCurrencyCodeListFormProperties {

		/**
		 * Plaid supports all ISO 4217 currency codes.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * List of unofficial currency codes
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateStandaloneCurrencyCodeListFormGroup() {
		return new FormGroup<StandaloneCurrencyCodeListFormProperties>({
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Buying an investment */
	export interface StandaloneInvestmentTransactionBuyType {

		/** Assignment of short option holding */
		assignment?: string | null;

		/** Purchase to open or increase a position */
		buy?: string | null;

		/** Purchase to close a short position */
		'buy to cover'?: string | null;

		/** Inflow of assets into a tax-advantaged account */
		contribution?: string | null;

		/** Purchase using proceeds from a cash dividend */
		'dividend reinvestment'?: string | null;

		/** Purchase using proceeds from a cash interest payment */
		'interest reinvestment'?: string | null;

		/** Purchase using long-term capital gain cash proceeds */
		'long-term capital gain reinvestment'?: string | null;

		/** Purchase using short-term capital gain cash proceeds */
		'short-term capital gain reinvestment'?: string | null;
	}

	/** Buying an investment */
	export interface StandaloneInvestmentTransactionBuyTypeFormProperties {

		/** Assignment of short option holding */
		assignment: FormControl<string | null | undefined>,

		/** Purchase to open or increase a position */
		buy: FormControl<string | null | undefined>,

		/** Purchase to close a short position */
		'buy to cover': FormControl<string | null | undefined>,

		/** Inflow of assets into a tax-advantaged account */
		contribution: FormControl<string | null | undefined>,

		/** Purchase using proceeds from a cash dividend */
		'dividend reinvestment': FormControl<string | null | undefined>,

		/** Purchase using proceeds from a cash interest payment */
		'interest reinvestment': FormControl<string | null | undefined>,

		/** Purchase using long-term capital gain cash proceeds */
		'long-term capital gain reinvestment': FormControl<string | null | undefined>,

		/** Purchase using short-term capital gain cash proceeds */
		'short-term capital gain reinvestment': FormControl<string | null | undefined>,
	}
	export function CreateStandaloneInvestmentTransactionBuyTypeFormGroup() {
		return new FormGroup<StandaloneInvestmentTransactionBuyTypeFormProperties>({
			assignment: new FormControl<string | null | undefined>(undefined),
			buy: new FormControl<string | null | undefined>(undefined),
			'buy to cover': new FormControl<string | null | undefined>(undefined),
			contribution: new FormControl<string | null | undefined>(undefined),
			'dividend reinvestment': new FormControl<string | null | undefined>(undefined),
			'interest reinvestment': new FormControl<string | null | undefined>(undefined),
			'long-term capital gain reinvestment': new FormControl<string | null | undefined>(undefined),
			'short-term capital gain reinvestment': new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Activity that modifies a cash position */
	export interface StandaloneInvestmentTransactionCashType {

		/** Fees paid for account maintenance */
		'account fee'?: string | null;

		/** Inflow of assets into a tax-advantaged account */
		contribution?: string | null;

		/** Inflow of cash into an account */
		deposit?: string | null;

		/** Inflow of cash from a dividend */
		dividend?: string | null;

		/** Inflow of cash from interest */
		interest?: string | null;

		/** Fees paid for legal charges or services */
		'legal fee'?: string | null;

		/** Long-term capital gain received as cash */
		'long-term capital gain'?: string | null;

		/** Fees paid for investment management of a mutual fund or other pooled investment vehicle */
		'management fee'?: string | null;

		/** Fees paid for maintaining margin debt */
		'margin expense'?: string | null;

		/** Inflow of cash from a non-qualified dividend */
		'non-qualified dividend'?: string | null;

		/** Taxes paid on behalf of the investor for non-residency in investment jurisdiction */
		'non-resident tax'?: string | null;

		/** Pending inflow of cash */
		'pending credit'?: string | null;

		/** Pending outflow of cash */
		'pending debit'?: string | null;

		/** Inflow of cash from a qualified dividend */
		'qualified dividend'?: string | null;

		/** Short-term capital gain received as cash */
		'short-term capital gain'?: string | null;

		/** Inflow of stock from a distribution */
		'stock distribution'?: string | null;

		/** Taxes paid on behalf of the investor */
		tax?: string | null;

		/** Taxes withheld on behalf of the customer */
		'tax withheld'?: string | null;

		/** Fees incurred for transfer of a holding or account */
		'transfer fee'?: string | null;

		/** Fees related to administration of a trust account */
		'trust fee'?: string | null;

		/** Unqualified capital gain received as cash */
		'unqualified gain'?: string | null;

		/** Outflow of cash from an account */
		withdrawal?: string | null;
	}

	/** Activity that modifies a cash position */
	export interface StandaloneInvestmentTransactionCashTypeFormProperties {

		/** Fees paid for account maintenance */
		'account fee': FormControl<string | null | undefined>,

		/** Inflow of assets into a tax-advantaged account */
		contribution: FormControl<string | null | undefined>,

		/** Inflow of cash into an account */
		deposit: FormControl<string | null | undefined>,

		/** Inflow of cash from a dividend */
		dividend: FormControl<string | null | undefined>,

		/** Inflow of cash from interest */
		interest: FormControl<string | null | undefined>,

		/** Fees paid for legal charges or services */
		'legal fee': FormControl<string | null | undefined>,

		/** Long-term capital gain received as cash */
		'long-term capital gain': FormControl<string | null | undefined>,

		/** Fees paid for investment management of a mutual fund or other pooled investment vehicle */
		'management fee': FormControl<string | null | undefined>,

		/** Fees paid for maintaining margin debt */
		'margin expense': FormControl<string | null | undefined>,

		/** Inflow of cash from a non-qualified dividend */
		'non-qualified dividend': FormControl<string | null | undefined>,

		/** Taxes paid on behalf of the investor for non-residency in investment jurisdiction */
		'non-resident tax': FormControl<string | null | undefined>,

		/** Pending inflow of cash */
		'pending credit': FormControl<string | null | undefined>,

		/** Pending outflow of cash */
		'pending debit': FormControl<string | null | undefined>,

		/** Inflow of cash from a qualified dividend */
		'qualified dividend': FormControl<string | null | undefined>,

		/** Short-term capital gain received as cash */
		'short-term capital gain': FormControl<string | null | undefined>,

		/** Inflow of stock from a distribution */
		'stock distribution': FormControl<string | null | undefined>,

		/** Taxes paid on behalf of the investor */
		tax: FormControl<string | null | undefined>,

		/** Taxes withheld on behalf of the customer */
		'tax withheld': FormControl<string | null | undefined>,

		/** Fees incurred for transfer of a holding or account */
		'transfer fee': FormControl<string | null | undefined>,

		/** Fees related to administration of a trust account */
		'trust fee': FormControl<string | null | undefined>,

		/** Unqualified capital gain received as cash */
		'unqualified gain': FormControl<string | null | undefined>,

		/** Outflow of cash from an account */
		withdrawal: FormControl<string | null | undefined>,
	}
	export function CreateStandaloneInvestmentTransactionCashTypeFormGroup() {
		return new FormGroup<StandaloneInvestmentTransactionCashTypeFormProperties>({
			'account fee': new FormControl<string | null | undefined>(undefined),
			contribution: new FormControl<string | null | undefined>(undefined),
			deposit: new FormControl<string | null | undefined>(undefined),
			dividend: new FormControl<string | null | undefined>(undefined),
			interest: new FormControl<string | null | undefined>(undefined),
			'legal fee': new FormControl<string | null | undefined>(undefined),
			'long-term capital gain': new FormControl<string | null | undefined>(undefined),
			'management fee': new FormControl<string | null | undefined>(undefined),
			'margin expense': new FormControl<string | null | undefined>(undefined),
			'non-qualified dividend': new FormControl<string | null | undefined>(undefined),
			'non-resident tax': new FormControl<string | null | undefined>(undefined),
			'pending credit': new FormControl<string | null | undefined>(undefined),
			'pending debit': new FormControl<string | null | undefined>(undefined),
			'qualified dividend': new FormControl<string | null | undefined>(undefined),
			'short-term capital gain': new FormControl<string | null | undefined>(undefined),
			'stock distribution': new FormControl<string | null | undefined>(undefined),
			tax: new FormControl<string | null | undefined>(undefined),
			'tax withheld': new FormControl<string | null | undefined>(undefined),
			'transfer fee': new FormControl<string | null | undefined>(undefined),
			'trust fee': new FormControl<string | null | undefined>(undefined),
			'unqualified gain': new FormControl<string | null | undefined>(undefined),
			withdrawal: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Fees on the account, e.g. commission, bookkeeping, options-related. */
	export interface StandaloneInvestmentTransactionFeeType {

		/** Fees paid for account maintenance */
		'account fee'?: string | null;

		/** Increase or decrease in quantity of item */
		adjustment?: string | null;

		/** Inflow of cash from a dividend */
		dividend?: string | null;

		/** Inflow of cash from interest */
		interest?: string | null;

		/** Inflow of cash from interest receivable */
		'interest receivable'?: string | null;

		/** Fees paid for legal charges or services */
		'legal fee'?: string | null;

		/** Long-term capital gain received as cash */
		'long-term capital gain'?: string | null;

		/** Fees paid for investment management of a mutual fund or other pooled investment vehicle */
		'management fee'?: string | null;

		/** Fees paid for maintaining margin debt */
		'margin expense'?: string | null;

		/** Inflow of cash from a non-qualified dividend */
		'non-qualified dividend'?: string | null;

		/** Taxes paid on behalf of the investor for non-residency in investment jurisdiction */
		'non-resident tax'?: string | null;

		/** Inflow of cash from a qualified dividend */
		'qualified dividend'?: string | null;

		/** Repayment of loan principal */
		'return of principal'?: string | null;

		/** Short-term capital gain received as cash */
		'short-term capital gain'?: string | null;

		/** Inflow of stock from a distribution */
		'stock distribution'?: string | null;

		/** Taxes paid on behalf of the investor */
		tax?: string | null;

		/** Taxes withheld on behalf of the customer */
		'tax withheld'?: string | null;

		/** Fees incurred for transfer of a holding or account */
		'transfer fee'?: string | null;

		/** Fees related to administration of a trust account */
		'trust fee'?: string | null;

		/** Unqualified capital gain received as cash */
		'unqualified gain'?: string | null;
	}

	/** Fees on the account, e.g. commission, bookkeeping, options-related. */
	export interface StandaloneInvestmentTransactionFeeTypeFormProperties {

		/** Fees paid for account maintenance */
		'account fee': FormControl<string | null | undefined>,

		/** Increase or decrease in quantity of item */
		adjustment: FormControl<string | null | undefined>,

		/** Inflow of cash from a dividend */
		dividend: FormControl<string | null | undefined>,

		/** Inflow of cash from interest */
		interest: FormControl<string | null | undefined>,

		/** Inflow of cash from interest receivable */
		'interest receivable': FormControl<string | null | undefined>,

		/** Fees paid for legal charges or services */
		'legal fee': FormControl<string | null | undefined>,

		/** Long-term capital gain received as cash */
		'long-term capital gain': FormControl<string | null | undefined>,

		/** Fees paid for investment management of a mutual fund or other pooled investment vehicle */
		'management fee': FormControl<string | null | undefined>,

		/** Fees paid for maintaining margin debt */
		'margin expense': FormControl<string | null | undefined>,

		/** Inflow of cash from a non-qualified dividend */
		'non-qualified dividend': FormControl<string | null | undefined>,

		/** Taxes paid on behalf of the investor for non-residency in investment jurisdiction */
		'non-resident tax': FormControl<string | null | undefined>,

		/** Inflow of cash from a qualified dividend */
		'qualified dividend': FormControl<string | null | undefined>,

		/** Repayment of loan principal */
		'return of principal': FormControl<string | null | undefined>,

		/** Short-term capital gain received as cash */
		'short-term capital gain': FormControl<string | null | undefined>,

		/** Inflow of stock from a distribution */
		'stock distribution': FormControl<string | null | undefined>,

		/** Taxes paid on behalf of the investor */
		tax: FormControl<string | null | undefined>,

		/** Taxes withheld on behalf of the customer */
		'tax withheld': FormControl<string | null | undefined>,

		/** Fees incurred for transfer of a holding or account */
		'transfer fee': FormControl<string | null | undefined>,

		/** Fees related to administration of a trust account */
		'trust fee': FormControl<string | null | undefined>,

		/** Unqualified capital gain received as cash */
		'unqualified gain': FormControl<string | null | undefined>,
	}
	export function CreateStandaloneInvestmentTransactionFeeTypeFormGroup() {
		return new FormGroup<StandaloneInvestmentTransactionFeeTypeFormProperties>({
			'account fee': new FormControl<string | null | undefined>(undefined),
			adjustment: new FormControl<string | null | undefined>(undefined),
			dividend: new FormControl<string | null | undefined>(undefined),
			interest: new FormControl<string | null | undefined>(undefined),
			'interest receivable': new FormControl<string | null | undefined>(undefined),
			'legal fee': new FormControl<string | null | undefined>(undefined),
			'long-term capital gain': new FormControl<string | null | undefined>(undefined),
			'management fee': new FormControl<string | null | undefined>(undefined),
			'margin expense': new FormControl<string | null | undefined>(undefined),
			'non-qualified dividend': new FormControl<string | null | undefined>(undefined),
			'non-resident tax': new FormControl<string | null | undefined>(undefined),
			'qualified dividend': new FormControl<string | null | undefined>(undefined),
			'return of principal': new FormControl<string | null | undefined>(undefined),
			'short-term capital gain': new FormControl<string | null | undefined>(undefined),
			'stock distribution': new FormControl<string | null | undefined>(undefined),
			tax: new FormControl<string | null | undefined>(undefined),
			'tax withheld': new FormControl<string | null | undefined>(undefined),
			'transfer fee': new FormControl<string | null | undefined>(undefined),
			'trust fee': new FormControl<string | null | undefined>(undefined),
			'unqualified gain': new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Selling an investment */
	export interface StandaloneInvestmentTransactionSellType {

		/** Outflow of assets from a tax-advantaged account */
		distribution?: string | null;

		/** Exercise of an option or warrant contract */
		exercise?: string | null;

		/** Sell to close or decrease an existing holding */
		sell?: string | null;

		/** Sell to open a short position */
		'sell short'?: string | null;
	}

	/** Selling an investment */
	export interface StandaloneInvestmentTransactionSellTypeFormProperties {

		/** Outflow of assets from a tax-advantaged account */
		distribution: FormControl<string | null | undefined>,

		/** Exercise of an option or warrant contract */
		exercise: FormControl<string | null | undefined>,

		/** Sell to close or decrease an existing holding */
		sell: FormControl<string | null | undefined>,

		/** Sell to open a short position */
		'sell short': FormControl<string | null | undefined>,
	}
	export function CreateStandaloneInvestmentTransactionSellTypeFormGroup() {
		return new FormGroup<StandaloneInvestmentTransactionSellTypeFormProperties>({
			distribution: new FormControl<string | null | undefined>(undefined),
			exercise: new FormControl<string | null | undefined>(undefined),
			sell: new FormControl<string | null | undefined>(undefined),
			'sell short': new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer */
	export interface StandaloneInvestmentTransactionTransferType {

		/** Increase or decrease in quantity of item */
		adjustment?: string | null;

		/** Assignment of short option holding */
		assignment?: string | null;

		/** Exercise of an option or warrant contract */
		exercise?: string | null;

		/** Expiration of an option or warrant contract */
		expire?: string | null;

		/** Stock exchanged at a pre-defined ratio as part of a merger between companies */
		merger?: string | null;

		/** Request fiat or cryptocurrency to an address or email */
		request?: string | null;

		/** Inflow or outflow of fiat or cryptocurrency to an address or email */
		send?: string | null;

		/** Inflow of stock from spin-off transaction of an existing holding */
		'spin off'?: string | null;

		/** Inflow of stock from a forward split of an existing holding */
		split?: string | null;

		/** Trade of one cryptocurrency for another */
		trade?: string | null;

		/** Movement of assets into or out of an account */
		transfer?: string | null;
	}

	/** Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer */
	export interface StandaloneInvestmentTransactionTransferTypeFormProperties {

		/** Increase or decrease in quantity of item */
		adjustment: FormControl<string | null | undefined>,

		/** Assignment of short option holding */
		assignment: FormControl<string | null | undefined>,

		/** Exercise of an option or warrant contract */
		exercise: FormControl<string | null | undefined>,

		/** Expiration of an option or warrant contract */
		expire: FormControl<string | null | undefined>,

		/** Stock exchanged at a pre-defined ratio as part of a merger between companies */
		merger: FormControl<string | null | undefined>,

		/** Request fiat or cryptocurrency to an address or email */
		request: FormControl<string | null | undefined>,

		/** Inflow or outflow of fiat or cryptocurrency to an address or email */
		send: FormControl<string | null | undefined>,

		/** Inflow of stock from spin-off transaction of an existing holding */
		'spin off': FormControl<string | null | undefined>,

		/** Inflow of stock from a forward split of an existing holding */
		split: FormControl<string | null | undefined>,

		/** Trade of one cryptocurrency for another */
		trade: FormControl<string | null | undefined>,

		/** Movement of assets into or out of an account */
		transfer: FormControl<string | null | undefined>,
	}
	export function CreateStandaloneInvestmentTransactionTransferTypeFormGroup() {
		return new FormGroup<StandaloneInvestmentTransactionTransferTypeFormProperties>({
			adjustment: new FormControl<string | null | undefined>(undefined),
			assignment: new FormControl<string | null | undefined>(undefined),
			exercise: new FormControl<string | null | undefined>(undefined),
			expire: new FormControl<string | null | undefined>(undefined),
			merger: new FormControl<string | null | undefined>(undefined),
			request: new FormControl<string | null | undefined>(undefined),
			send: new FormControl<string | null | undefined>(undefined),
			'spin off': new FormControl<string | null | undefined>(undefined),
			split: new FormControl<string | null | undefined>(undefined),
			trade: new FormControl<string | null | undefined>(undefined),
			transfer: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts. */
	export interface StandaloneInvestmentTransactionType {

		/**
		 * Buying an investment
		 * Required
		 */
		buy: string;

		/**
		 * A cancellation of a pending transaction
		 * Required
		 */
		cancel: string;

		/**
		 * Activity that modifies a cash position
		 * Required
		 */
		cash: string;

		/**
		 * Fees on the account, e.g. commission, bookkeeping, options-related.
		 * Required
		 */
		fee: string;

		/**
		 * Selling an investment
		 * Required
		 */
		sell: string;

		/**
		 * Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
		 * Required
		 */
		transfer: string;
	}

	/** Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts. */
	export interface StandaloneInvestmentTransactionTypeFormProperties {

		/**
		 * Buying an investment
		 * Required
		 */
		buy: FormControl<string | null | undefined>,

		/**
		 * A cancellation of a pending transaction
		 * Required
		 */
		cancel: FormControl<string | null | undefined>,

		/**
		 * Activity that modifies a cash position
		 * Required
		 */
		cash: FormControl<string | null | undefined>,

		/**
		 * Fees on the account, e.g. commission, bookkeeping, options-related.
		 * Required
		 */
		fee: FormControl<string | null | undefined>,

		/**
		 * Selling an investment
		 * Required
		 */
		sell: FormControl<string | null | undefined>,

		/**
		 * Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
		 * Required
		 */
		transfer: FormControl<string | null | undefined>,
	}
	export function CreateStandaloneInvestmentTransactionTypeFormGroup() {
		return new FormGroup<StandaloneInvestmentTransactionTypeFormProperties>({
			buy: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cancel: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cash: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sell: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * An instruction specifying what steps the new Identity Verification attempt should require the user to complete:
	 * `reset` - Restart the user at the beginning of the session, regardless of whether they successfully completed part of their previous session.
	 * `incomplete` - Start the new session at the step that the user failed in the previous session, skipping steps that have already been successfully completed.
	 * `infer` - If the most recent Identity Verification attempt associated with the given `client_user_id` has a status of `failed` or `expired`, retry using the `incomplete` strategy. Otherwise, use the `reset` strategy.
	 * `custom` - Start the new session with a custom configuration, specified by the value of the `steps` field
	 * Note:
	 * The `incomplete` strategy cannot be applied if the session's failing step is `screening` or `risk_check`.
	 * The `infer` strategy cannot be applied if the session's status is still `active`
	 */
	export enum Strategy { reset = 'reset', incomplete = 'incomplete', infer = 'infer', custom = 'custom' }


	/**
	 * Fired when an Item's transactions change. This can be due to any event resulting in new changes, such as an initial 30-day transactions fetch upon the initialization of an Item with transactions, the backfill of historical transactions that occurs shortly after, or when changes are populated from a regularly-scheduled transactions update job. It is recommended to listen for the `SYNC_UPDATES_AVAILABLE` webhook when using the `/transactions/sync` endpoint. Note that when using `/transactions/sync` the older webhooks `INITIAL_UPDATE`, `HISTORICAL_UPDATE`, `DEFAULT_UPDATE`, and `TRANSACTIONS_REMOVED`, which are intended for use with `/transactions/get`, will also continue to be sent in order to maintain backwards compatibility. It is not necessary to listen for and respond to those webhooks when using `/transactions/sync`.
	 * After receipt of this webhook, the new changes can be fetched for the Item from `/transactions/sync`.
	 * Note that to receive this webhook for an Item, `/transactions/sync` must have been called at least once on that Item. This means that, unlike the `INITIAL_UPDATE` and `HISTORICAL_UPDATE` webhooks, it will not fire immediately upon Item creation. If `/transactions/sync` is called on an Item that was *not* initialized with Transactions, the webhook will fire twice: once the first 30 days of transactions data has been fetched, and a second time when all available historical transactions data has been fetched.
	 * This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic transactions data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`.
	 */
	export interface SyncUpdatesAvailableWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * Indicates if historical pull information is available.
		 * Required
		 */
		historical_update_complete: boolean;

		/**
		 * Indicates if initial pull information is available.
		 * Required
		 */
		initial_update_complete: boolean;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `SYNC_UPDATES_AVAILABLE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: string;
	}

	/**
	 * Fired when an Item's transactions change. This can be due to any event resulting in new changes, such as an initial 30-day transactions fetch upon the initialization of an Item with transactions, the backfill of historical transactions that occurs shortly after, or when changes are populated from a regularly-scheduled transactions update job. It is recommended to listen for the `SYNC_UPDATES_AVAILABLE` webhook when using the `/transactions/sync` endpoint. Note that when using `/transactions/sync` the older webhooks `INITIAL_UPDATE`, `HISTORICAL_UPDATE`, `DEFAULT_UPDATE`, and `TRANSACTIONS_REMOVED`, which are intended for use with `/transactions/get`, will also continue to be sent in order to maintain backwards compatibility. It is not necessary to listen for and respond to those webhooks when using `/transactions/sync`.
	 * After receipt of this webhook, the new changes can be fetched for the Item from `/transactions/sync`.
	 * Note that to receive this webhook for an Item, `/transactions/sync` must have been called at least once on that Item. This means that, unlike the `INITIAL_UPDATE` and `HISTORICAL_UPDATE` webhooks, it will not fire immediately upon Item creation. If `/transactions/sync` is called on an Item that was *not* initialized with Transactions, the webhook will fire twice: once the first 30 days of transactions data has been fetched, and a second time when all available historical transactions data has been fetched.
	 * This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic transactions data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`.
	 */
	export interface SyncUpdatesAvailableWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * Indicates if historical pull information is available.
		 * Required
		 */
		historical_update_complete: FormControl<boolean | null | undefined>,

		/**
		 * Indicates if initial pull information is available.
		 * Required
		 */
		initial_update_complete: FormControl<boolean | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `SYNC_UPDATES_AVAILABLE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateSyncUpdatesAvailableWebhookFormGroup() {
		return new FormGroup<SyncUpdatesAvailableWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			historical_update_complete: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			initial_update_complete: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A value from a MISMO prescribed list that classifies identification numbers used by the Internal Revenue Service (IRS) in the administration of tax laws. A Social Security number (SSN) is issued by the SSA; all other taxpayer identification numbers are issued by the IRS. */
	export enum TaxpayerIdentifierType { IndividualTaxpayerIdentificationNumber = 'IndividualTaxpayerIdentificationNumber', SocialSecurityNumber = 'SocialSecurityNumber' }


	/** Commonly used term to describe the line item. */
	export enum TotalCanonicalDescription { BONUS = 'BONUS', COMMISSION = 'COMMISSION', OVERTIME = 'OVERTIME', 'PAID TIME OFF' = 'PAID TIME OFF', 'REGULAR PAY' = 'REGULAR PAY', VACATION = 'VACATION', 'EMPLOYEE MEDICARE' = 'EMPLOYEE MEDICARE', FICA = 'FICA', 'SOCIAL SECURITY EMPLOYEE TAX' = 'SOCIAL SECURITY EMPLOYEE TAX', MEDICAL = 'MEDICAL', VISION = 'VISION', DENTAL = 'DENTAL', 'NET PAY' = 'NET PAY', TAXES = 'TAXES', NOT_FOUND = 'NOT_FOUND', OTHER = 'OTHER', _null = 16 }


	/** A representation of a transaction */
	export interface Transaction extends TransactionBase {

		/**
		 * The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
		 * Required
		 * Type: DateOnly
		 */
		authorized_date: Date;

		/**
		 * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
		 * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
		 * Required
		 */
		authorized_datetime: Date;

		/** The counterparties present in the transaction. Counterparties, such as the financial institutions, are extracted by Plaid from the raw description. */
		counterparties?: Array<TransactionCounterparty>;

		/**
		 * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
		 * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
		 * Required
		 */
		datetime: Date;

		/**
		 * The channel used to make a payment.
		 * `online:` transactions that took place online.
		 * `in store:` transactions that were made at a physical location.
		 * `other:` transactions that relate to banks, e.g. fees or deposits.
		 * This field replaces the `transaction_type` field.
		 * Required
		 */
		payment_channel: EnhancementsPayment_channel;

		/**
		 * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 */
		personal_finance_category?: PersonalFinanceCategory;

		/** A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels. */
		personal_finance_category_icon_url?: string | null;

		/**
		 * An identifier classifying the transaction type.
		 * This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.
		 * `adjustment:` Bank adjustment
		 * `atm:` Cash deposit or withdrawal via an automated teller machine
		 * `bank charge:` Charge or fee levied by the institution
		 * `bill payment`: Payment of a bill
		 * `cash:` Cash deposit or withdrawal
		 * `cashback:` Cash withdrawal while making a debit card purchase
		 * `cheque:` Document ordering the payment of money to another person or organization
		 * `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval
		 * `interest:` Interest earned or incurred
		 * `purchase:` Purchase made with a debit or credit card
		 * `standing order:` Payment instructed by the account holder to a third party at a regular interval
		 * `transfer:` Transfer of money between accounts
		 * Required
		 */
		transaction_code: TransactionTransaction_code;
	}

	/** A representation of a transaction */
	export interface TransactionFormProperties extends TransactionBaseFormProperties {

		/**
		 * The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
		 * Required
		 * Type: DateOnly
		 */
		authorized_date: FormControl<Date | null | undefined>,

		/**
		 * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
		 * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
		 * Required
		 */
		authorized_datetime: FormControl<Date | null | undefined>,

		/**
		 * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
		 * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
		 * Required
		 */
		datetime: FormControl<Date | null | undefined>,

		/**
		 * The channel used to make a payment.
		 * `online:` transactions that took place online.
		 * `in store:` transactions that were made at a physical location.
		 * `other:` transactions that relate to banks, e.g. fees or deposits.
		 * This field replaces the `transaction_type` field.
		 * Required
		 */
		payment_channel: FormControl<EnhancementsPayment_channel | null | undefined>,

		/** A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels. */
		personal_finance_category_icon_url: FormControl<string | null | undefined>,

		/**
		 * An identifier classifying the transaction type.
		 * This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.
		 * `adjustment:` Bank adjustment
		 * `atm:` Cash deposit or withdrawal via an automated teller machine
		 * `bank charge:` Charge or fee levied by the institution
		 * `bill payment`: Payment of a bill
		 * `cash:` Cash deposit or withdrawal
		 * `cashback:` Cash withdrawal while making a debit card purchase
		 * `cheque:` Document ordering the payment of money to another person or organization
		 * `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval
		 * `interest:` Interest earned or incurred
		 * `purchase:` Purchase made with a debit or credit card
		 * `standing order:` Payment instructed by the account holder to a third party at a regular interval
		 * `transfer:` Transfer of money between accounts
		 * Required
		 */
		transaction_code: FormControl<TransactionTransaction_code | null | undefined>,
	}
	export function CreateTransactionFormGroup() {
		return new FormGroup<TransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_owner: new FormControl<string | null | undefined>(undefined),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			category_id: new FormControl<string | null | undefined>(undefined),
			check_number: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			logo_url: new FormControl<string | null | undefined>(undefined),
			merchant_name: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			original_description: new FormControl<string | null | undefined>(undefined),
			pending: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_type: new FormControl<TransactionBaseTransaction_type | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			website: new FormControl<string | null | undefined>(undefined),
			authorized_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			authorized_datetime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			datetime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payment_channel: new FormControl<EnhancementsPayment_channel | null | undefined>(undefined, [Validators.required]),
			personal_finance_category_icon_url: new FormControl<string | null | undefined>(undefined),
			transaction_code: new FormControl<TransactionTransaction_code | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description. */
	export interface TransactionCounterparty {

		/**
		 * The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG filepath.
		 * Required
		 */
		logo_url: string;

		/**
		 * The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
		 * Required
		 */
		name: string;

		/**
		 * The counterparty type.
		 * `merchant`: a provider of goods or services for purchase
		 * `financial_institution`: a financial entity (bank, credit union, BNPL, fintech)
		 * `payment_app`: a transfer or P2P app (e.g. Zelle)
		 * `marketplace`: a marketplace (e.g DoorDash, Google Play Store)
		 * `payment_terminal`: a point-of-sale payment terminal (e.g Square, Toast)
		 * Required
		 */
		type: CounterpartyType;

		/**
		 * The website associated with the counterparty.
		 * Required
		 */
		website: string;
	}

	/** The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description. */
	export interface TransactionCounterpartyFormProperties {

		/**
		 * The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG filepath.
		 * Required
		 */
		logo_url: FormControl<string | null | undefined>,

		/**
		 * The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The counterparty type.
		 * `merchant`: a provider of goods or services for purchase
		 * `financial_institution`: a financial entity (bank, credit union, BNPL, fintech)
		 * `payment_app`: a transfer or P2P app (e.g. Zelle)
		 * `marketplace`: a marketplace (e.g DoorDash, Google Play Store)
		 * `payment_terminal`: a point-of-sale payment terminal (e.g Square, Toast)
		 * Required
		 */
		type: FormControl<CounterpartyType | null | undefined>,

		/**
		 * The website associated with the counterparty.
		 * Required
		 */
		website: FormControl<string | null | undefined>,
	}
	export function CreateTransactionCounterpartyFormGroup() {
		return new FormGroup<TransactionCounterpartyFormProperties>({
			logo_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<CounterpartyType | null | undefined>(undefined, [Validators.required]),
			website: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransactionTransaction_code { adjustment = 'adjustment', atm = 'atm', 'bank charge' = 'bank charge', 'bill payment' = 'bill payment', cash = 'cash', cashback = 'cashback', cheque = 'cheque', 'direct debit' = 'direct debit', interest = 'interest', purchase = 'purchase', 'standing order' = 'standing order', transfer = 'transfer', _null = 12 }


	/** A representation of a transaction */
	export interface TransactionBase {

		/**
		 * The ID of the account in which this transaction occurred.
		 * Required
		 */
		account_id: string;

		/** The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. */
		account_owner?: string | null;

		/**
		 * The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
		 * Required
		 * Type: double
		 */
		amount: number;

		/**
		 * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
		 */
		category?: Array<string>;

		/**
		 * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
		 */
		category_id?: string | null;

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number?: string | null;

		/**
		 * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
		 * Required
		 * Type: DateOnly
		 */
		date: Date;

		/**
		 * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: string;

		/** A representation of where a transaction took place */
		location?: Location;

		/** The logo associated with the merchant, if available. Formatted as a 100x100 pixels PNG file path. */
		logo_url?: string | null;

		/** The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`. */
		merchant_name?: string | null;

		/**
		 * The merchant name or transaction description.
		 * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
		 */
		name?: string | null;

		/** The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`. */
		original_description?: string | null;

		/**
		 * Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.
		 * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
		 */
		payment_meta?: PaymentMeta;

		/**
		 * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
		 * Required
		 */
		pending: boolean;

		/** The ID of a posted transaction's associated pending transaction, where applicable. */
		pending_transaction_id?: string | null;

		/**
		 * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
		 * Required
		 */
		transaction_id: string;

		/**
		 * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.
		 * `digital:` transactions that took place online.
		 * `place:` transactions that were made at a physical location.
		 * `special:` transactions that relate to banks, e.g. fees or deposits.
		 * `unresolved:` transactions that do not fit into the other three types.
		 */
		transaction_type?: TransactionBaseTransaction_type | null;

		/**
		 * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: string;

		/** The website associated with the merchant, if available. */
		website?: string | null;
	}

	/** A representation of a transaction */
	export interface TransactionBaseFormProperties {

		/**
		 * The ID of the account in which this transaction occurred.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/** The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. */
		account_owner: FormControl<string | null | undefined>,

		/**
		 * The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
		 * Required
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
		 */
		category_id: FormControl<string | null | undefined>,

		/** The check number of the transaction. This field is only populated for check transactions. */
		check_number: FormControl<string | null | undefined>,

		/**
		 * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
		 * Required
		 * Type: DateOnly
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/** The logo associated with the merchant, if available. Formatted as a 100x100 pixels PNG file path. */
		logo_url: FormControl<string | null | undefined>,

		/** The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`. */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The merchant name or transaction description.
		 * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
		 */
		name: FormControl<string | null | undefined>,

		/** The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`. */
		original_description: FormControl<string | null | undefined>,

		/**
		 * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
		 * Required
		 */
		pending: FormControl<boolean | null | undefined>,

		/** The ID of a posted transaction's associated pending transaction, where applicable. */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.
		 * `digital:` transactions that took place online.
		 * `place:` transactions that were made at a physical location.
		 * `special:` transactions that relate to banks, e.g. fees or deposits.
		 * `unresolved:` transactions that do not fit into the other three types.
		 */
		transaction_type: FormControl<TransactionBaseTransaction_type | null | undefined>,

		/**
		 * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 * Required
		 */
		unofficial_currency_code: FormControl<string | null | undefined>,

		/** The website associated with the merchant, if available. */
		website: FormControl<string | null | undefined>,
	}
	export function CreateTransactionBaseFormGroup() {
		return new FormGroup<TransactionBaseFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_owner: new FormControl<string | null | undefined>(undefined),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			category_id: new FormControl<string | null | undefined>(undefined),
			check_number: new FormControl<string | null | undefined>(undefined),
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			logo_url: new FormControl<string | null | undefined>(undefined),
			merchant_name: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			original_description: new FormControl<string | null | undefined>(undefined),
			pending: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_type: new FormControl<TransactionBaseTransaction_type | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			website: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TransactionBaseTransaction_type { digital = 'digital', place = 'place', special = 'special', unresolved = 'unresolved' }


	/**
	 * An identifier classifying the transaction type.
	 * This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.
	 * `adjustment:` Bank adjustment
	 * `atm:` Cash deposit or withdrawal via an automated teller machine
	 * `bank charge:` Charge or fee levied by the institution
	 * `bill payment`: Payment of a bill
	 * `cash:` Cash deposit or withdrawal
	 * `cashback:` Cash withdrawal while making a debit card purchase
	 * `cheque:` Document ordering the payment of money to another person or organization
	 * `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval
	 * `interest:` Interest earned or incurred
	 * `purchase:` Purchase made with a debit or credit card
	 * `standing order:` Payment instructed by the account holder to a third party at a regular interval
	 * `transfer:` Transfer of money between accounts
	 */
	export enum TransactionCode { adjustment = 'adjustment', atm = 'atm', 'bank charge' = 'bank charge', 'bill payment' = 'bill payment', cash = 'cash', cashback = 'cashback', cheque = 'cheque', 'direct debit' = 'direct debit', interest = 'interest', purchase = 'purchase', 'standing order' = 'standing order', transfer = 'transfer', _null = 12 }


	/** A grouping of related transactions */
	export interface TransactionStream {

		/**
		 * The ID of the account to which the stream belongs
		 * Required
		 */
		account_id: string;

		/**
		 * Object with data pertaining to an amount on the transaction stream.
		 * Required
		 */
		average_amount: TransactionStreamAmount;

		/**
		 * A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * Required
		 */
		category: Array<string>;

		/**
		 * The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * Required
		 */
		category_id: string;

		/**
		 * A description of the transaction stream.
		 * Required
		 */
		description: string;

		/**
		 * The posted date of the earliest transaction in the stream.
		 * Required
		 * Type: DateOnly
		 */
		first_date: Date;

		/**
		 * Describes the frequency of the transaction stream.
		 * `WEEKLY`: Assigned to a transaction stream that occurs approximately every week.
		 * `BIWEEKLY`: Assigned to a transaction stream that occurs approximately every 2 weeks.
		 * `SEMI_MONTHLY`: Assigned to a transaction stream that occurs approximately twice per month. This frequency is typically seen for inflow transaction streams.
		 * `MONTHLY`: Assigned to a transaction stream that occurs approximately every month.
		 * `ANNUALLY`: Assigned to a transaction stream that occurs approximately every year.
		 * `UNKNOWN`: Assigned to a transaction stream that does not fit any of the pre-defined frequencies.
		 * Required
		 */
		frequency: RecurringTransactionFrequency;

		/**
		 * Indicates whether the transaction stream is still live.
		 * Required
		 */
		is_active: boolean;

		/**
		 * Object with data pertaining to an amount on the transaction stream.
		 * Required
		 */
		last_amount: TransactionStreamAmount;

		/**
		 * The posted date of the latest transaction in the stream.
		 * Required
		 * Type: DateOnly
		 */
		last_date: Date;

		/**
		 * The merchant associated with the transaction stream.
		 * Required
		 */
		merchant_name: string;

		/**
		 * Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 */
		personal_finance_category?: PersonalFinanceCategory;

		/**
		 * The current status of the transaction stream.
		 * `MATURE`: A `MATURE` recurring stream should have at least 3 transactions and happen on a regular cadence (For Annual recurring stream, we will mark it `MATURE` after 2 instances).
		 * `EARLY_DETECTION`: When a recurring transaction first appears in the transaction history and before it fulfills the requirement of a mature stream, the status will be `EARLY_DETECTION`.
		 * `TOMBSTONED`: A stream that was previously in the `EARLY_DETECTION` status will move to the `TOMBSTONED` status when no further transactions were found at the next expected date.
		 * `UNKNOWN`: A stream is assigned an `UNKNOWN` status when none of the other statuses are applicable.
		 * Required
		 */
		status: TransactionStreamStatus;

		/**
		 * A unique id for the stream
		 * Required
		 */
		stream_id: string;

		/**
		 * An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
		 * Required
		 */
		transaction_ids: Array<string>;
	}

	/** A grouping of related transactions */
	export interface TransactionStreamFormProperties {

		/**
		 * The ID of the account to which the stream belongs
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 * Required
		 */
		category_id: FormControl<string | null | undefined>,

		/**
		 * A description of the transaction stream.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The posted date of the earliest transaction in the stream.
		 * Required
		 * Type: DateOnly
		 */
		first_date: FormControl<Date | null | undefined>,

		/**
		 * Describes the frequency of the transaction stream.
		 * `WEEKLY`: Assigned to a transaction stream that occurs approximately every week.
		 * `BIWEEKLY`: Assigned to a transaction stream that occurs approximately every 2 weeks.
		 * `SEMI_MONTHLY`: Assigned to a transaction stream that occurs approximately twice per month. This frequency is typically seen for inflow transaction streams.
		 * `MONTHLY`: Assigned to a transaction stream that occurs approximately every month.
		 * `ANNUALLY`: Assigned to a transaction stream that occurs approximately every year.
		 * `UNKNOWN`: Assigned to a transaction stream that does not fit any of the pre-defined frequencies.
		 * Required
		 */
		frequency: FormControl<RecurringTransactionFrequency | null | undefined>,

		/**
		 * Indicates whether the transaction stream is still live.
		 * Required
		 */
		is_active: FormControl<boolean | null | undefined>,

		/**
		 * The posted date of the latest transaction in the stream.
		 * Required
		 * Type: DateOnly
		 */
		last_date: FormControl<Date | null | undefined>,

		/**
		 * The merchant associated with the transaction stream.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The current status of the transaction stream.
		 * `MATURE`: A `MATURE` recurring stream should have at least 3 transactions and happen on a regular cadence (For Annual recurring stream, we will mark it `MATURE` after 2 instances).
		 * `EARLY_DETECTION`: When a recurring transaction first appears in the transaction history and before it fulfills the requirement of a mature stream, the status will be `EARLY_DETECTION`.
		 * `TOMBSTONED`: A stream that was previously in the `EARLY_DETECTION` status will move to the `TOMBSTONED` status when no further transactions were found at the next expected date.
		 * `UNKNOWN`: A stream is assigned an `UNKNOWN` status when none of the other statuses are applicable.
		 * Required
		 */
		status: FormControl<TransactionStreamStatus | null | undefined>,

		/**
		 * A unique id for the stream
		 * Required
		 */
		stream_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionStreamFormGroup() {
		return new FormGroup<TransactionStreamFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			category_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			first_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			frequency: new FormControl<RecurringTransactionFrequency | null | undefined>(undefined, [Validators.required]),
			is_active: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			last_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<TransactionStreamStatus | null | undefined>(undefined, [Validators.required]),
			stream_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Object with data pertaining to an amount on the transaction stream. */
	export interface TransactionStreamAmount {

		/**
		 * Represents the numerical value of an amount.
		 * Type: double
		 */
		amount?: number | null;

		/**
		 * The ISO-4217 currency code of the amount. Always `null` if `unofficial_currency_code` is non-`null`.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		iso_currency_code?: string | null;

		/** The unofficial currency code of the amount. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. */
		unofficial_currency_code?: string | null;
	}

	/** Object with data pertaining to an amount on the transaction stream. */
	export interface TransactionStreamAmountFormProperties {

		/**
		 * Represents the numerical value of an amount.
		 * Type: double
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the amount. Always `null` if `unofficial_currency_code` is non-`null`.
		 * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/** The unofficial currency code of the amount. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. */
		unofficial_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateTransactionStreamAmountFormGroup() {
		return new FormGroup<TransactionStreamAmountFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			unofficial_currency_code: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TransactionStreamStatus { UNKNOWN = 'UNKNOWN', MATURE = 'MATURE', EARLY_DETECTION = 'EARLY_DETECTION', TOMBSTONED = 'TOMBSTONED' }


	/** A representation of a transactions category rule. */
	export interface TransactionsCategoryRule {

		/**
		 * Date and time when a rule was created in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
		 */
		created_at?: Date | null;

		/** A unique identifier of the rule created */
		id?: string | null;

		/** A unique identifier of the Item the rule was created for. */
		item_id?: string | null;

		/**
		 * Personal finance category unique identifier.
		 * In the personal finance category taxonomy, this field is represented by the detailed category field.
		 */
		personal_finance_category?: string | null;

		/** A representation of transactions rule details. */
		rule_details?: TransactionsRuleDetails;
	}

	/** A representation of a transactions category rule. */
	export interface TransactionsCategoryRuleFormProperties {

		/**
		 * Date and time when a rule was created in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
		 */
		created_at: FormControl<Date | null | undefined>,

		/** A unique identifier of the rule created */
		id: FormControl<string | null | undefined>,

		/** A unique identifier of the Item the rule was created for. */
		item_id: FormControl<string | null | undefined>,

		/**
		 * Personal finance category unique identifier.
		 * In the personal finance category taxonomy, this field is represented by the detailed category field.
		 */
		personal_finance_category: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsCategoryRuleFormGroup() {
		return new FormGroup<TransactionsCategoryRuleFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			item_id: new FormControl<string | null | undefined>(undefined),
			personal_finance_category: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A representation of transactions rule details. */
	export interface TransactionsRuleDetails {

		/**
		 * Transaction field for which the rule is defined.
		 * Required
		 */
		field: TransactionsRuleDetailsField;

		/**
		 * For TRANSACTION_ID field, provide transaction_id. For NAME field, provide a string pattern.
		 * Required
		 */
		query: string;

		/**
		 * Transaction rule's match type. For TRANSACTION_ID field, EXACT_MATCH is available.
		 * Matches are case sensitive.
		 * Required
		 */
		type: TransactionsRuleDetailsType;
	}

	/** A representation of transactions rule details. */
	export interface TransactionsRuleDetailsFormProperties {

		/**
		 * Transaction field for which the rule is defined.
		 * Required
		 */
		field: FormControl<TransactionsRuleDetailsField | null | undefined>,

		/**
		 * For TRANSACTION_ID field, provide transaction_id. For NAME field, provide a string pattern.
		 * Required
		 */
		query: FormControl<string | null | undefined>,

		/**
		 * Transaction rule's match type. For TRANSACTION_ID field, EXACT_MATCH is available.
		 * Matches are case sensitive.
		 * Required
		 */
		type: FormControl<TransactionsRuleDetailsType | null | undefined>,
	}
	export function CreateTransactionsRuleDetailsFormGroup() {
		return new FormGroup<TransactionsRuleDetailsFormProperties>({
			field: new FormControl<TransactionsRuleDetailsField | null | undefined>(undefined, [Validators.required]),
			query: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<TransactionsRuleDetailsType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransactionsRuleDetailsField { TRANSACTION_ID = 'TRANSACTION_ID', NAME = 'NAME' }

	export enum TransactionsRuleDetailsType { EXACT_MATCH = 'EXACT_MATCH', SUBSTRING_MATCH = 'SUBSTRING_MATCH' }


	/** TransactionsEnhanceGetRequest defines the request schema for `/transactions/enhance`. */
	export interface TransactionsEnhanceGetRequest {

		/**
		 * The type of account for the requested transactions (`depository` or `credit`).
		 * Required
		 */
		account_type: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * An array of raw transactions to be enhanced.
		 * Required
		 */
		transactions: Array<ClientProvidedRawTransaction>;
	}

	/** TransactionsEnhanceGetRequest defines the request schema for `/transactions/enhance`. */
	export interface TransactionsEnhanceGetRequestFormProperties {

		/**
		 * The type of account for the requested transactions (`depository` or `credit`).
		 * Required
		 */
		account_type: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsEnhanceGetRequestFormGroup() {
		return new FormGroup<TransactionsEnhanceGetRequestFormProperties>({
			account_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** TransactionsEnhanceGetResponse defines the response schema for `/beta/transactions/v1/enhance`. */
	export interface TransactionsEnhanceGetResponse {

		/**
		 * An array of enhanced transactions.
		 * Required
		 */
		enhanced_transactions: Array<ClientProvidedEnhancedTransaction>;
	}

	/** TransactionsEnhanceGetResponse defines the response schema for `/beta/transactions/v1/enhance`. */
	export interface TransactionsEnhanceGetResponseFormProperties {
	}
	export function CreateTransactionsEnhanceGetResponseFormGroup() {
		return new FormGroup<TransactionsEnhanceGetResponseFormProperties>({
		});

	}


	/** TransactionsEnrichGetRequest defines the request schema for `/transactions/enrich`. */
	export interface TransactionsEnrichGetRequest {

		/**
		 * The account type for the requested transactions (either `depository` or `credit`).
		 * Required
		 */
		account_type: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to be used with the request. */
		options?: TransactionsEnrichRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * An array of transaction objects to be enriched by Plaid. Maximum of 100 transactions per request.
		 * Required
		 */
		transactions: Array<ClientProvidedTransaction>;
	}

	/** TransactionsEnrichGetRequest defines the request schema for `/transactions/enrich`. */
	export interface TransactionsEnrichGetRequestFormProperties {

		/**
		 * The account type for the requested transactions (either `depository` or `credit`).
		 * Required
		 */
		account_type: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsEnrichGetRequestFormGroup() {
		return new FormGroup<TransactionsEnrichGetRequestFormProperties>({
			account_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to be used with the request. */
	export interface TransactionsEnrichRequestOptions {

		/**
		 * Include `legacy_category` and `legacy_category_id` in the response (in addition to the default `personal_finance_category`).
		 * Categories are based on Plaid's legacy taxonomy. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 */
		include_legacy_category?: boolean | null;
	}

	/** An optional object to be used with the request. */
	export interface TransactionsEnrichRequestOptionsFormProperties {

		/**
		 * Include `legacy_category` and `legacy_category_id` in the response (in addition to the default `personal_finance_category`).
		 * Categories are based on Plaid's legacy taxonomy. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
		 */
		include_legacy_category: FormControl<boolean | null | undefined>,
	}
	export function CreateTransactionsEnrichRequestOptionsFormGroup() {
		return new FormGroup<TransactionsEnrichRequestOptionsFormProperties>({
			include_legacy_category: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** TransactionsEnrichGetResponse defines the response schema for `/transactions/enrich`. */
	export interface TransactionsEnrichGetResponse {

		/**
		 * A list of enriched transactions.
		 * Required
		 */
		enriched_transactions: Array<ClientProvidedEnrichedTransaction>;

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id?: string | null;
	}

	/** TransactionsEnrichGetResponse defines the response schema for `/transactions/enrich`. */
	export interface TransactionsEnrichGetResponseFormProperties {

		/** A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive. */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsEnrichGetResponseFormGroup() {
		return new FormGroup<TransactionsEnrichGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** TransactionsGetRequest defines the request schema for `/transactions/get` */
	export interface TransactionsGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		end_date: Date;

		/** An optional object to be used with the request. If specified, `options` must not be `null`. */
		options?: TransactionsGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		start_date: Date;
	}

	/** TransactionsGetRequest defines the request schema for `/transactions/get` */
	export interface TransactionsGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		end_date: FormControl<Date | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateTransactionsGetRequestFormGroup() {
		return new FormGroup<TransactionsGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			end_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An optional object to be used with the request. If specified, `options` must not be `null`. */
	export interface TransactionsGetRequestOptions {

		/**
		 * A list of `account_ids` to retrieve for the Item
		 * Note: An error will be returned if a provided `account_id` is not associated with the Item.
		 */
		account_ids?: Array<string>;

		/**
		 * The number of transactions to fetch.
		 * Minimum: 1
		 * Maximum: 500
		 */
		count?: number | null;

		/** Include counterparties and extran merchant fields in the transaction. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager. */
		include_logo_and_counterparty_beta?: boolean | null;

		/** Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager, or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality) . */
		include_original_description?: boolean | null;

		/**
		 * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object in the response.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 * Weâ€™re introducing Category Rules - a new beta endpoint that will enable you to change the `personal_finance_category` for a transaction based on your usersâ€™ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
		 */
		include_personal_finance_category?: boolean | null;

		/** Please use [`include_personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-request-options-include-personal-finance-category) instead. */
		include_personal_finance_category_beta?: boolean | null;

		/**
		 * The number of transactions to skip. The default value is 0.
		 * Minimum: 0
		 */
		offset?: number | null;
	}

	/** An optional object to be used with the request. If specified, `options` must not be `null`. */
	export interface TransactionsGetRequestOptionsFormProperties {

		/**
		 * The number of transactions to fetch.
		 * Minimum: 1
		 * Maximum: 500
		 */
		count: FormControl<number | null | undefined>,

		/** Include counterparties and extran merchant fields in the transaction. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager. */
		include_logo_and_counterparty_beta: FormControl<boolean | null | undefined>,

		/** Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager, or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality) . */
		include_original_description: FormControl<boolean | null | undefined>,

		/**
		 * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object in the response.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 * Weâ€™re introducing Category Rules - a new beta endpoint that will enable you to change the `personal_finance_category` for a transaction based on your usersâ€™ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
		 */
		include_personal_finance_category: FormControl<boolean | null | undefined>,

		/** Please use [`include_personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-request-options-include-personal-finance-category) instead. */
		include_personal_finance_category_beta: FormControl<boolean | null | undefined>,

		/**
		 * The number of transactions to skip. The default value is 0.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,
	}
	export function CreateTransactionsGetRequestOptionsFormGroup() {
		return new FormGroup<TransactionsGetRequestOptionsFormProperties>({
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(500)]),
			include_logo_and_counterparty_beta: new FormControl<boolean | null | undefined>(undefined),
			include_original_description: new FormControl<boolean | null | undefined>(undefined),
			include_personal_finance_category: new FormControl<boolean | null | undefined>(undefined),
			include_personal_finance_category_beta: new FormControl<boolean | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
		});

	}


	/** TransactionsGetResponse defines the response schema for `/transactions/get` */
	export interface TransactionsGetResponse {

		/**
		 * An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field.
		 * Required
		 */
		accounts: Array<AccountBase>;

		/**
		 * Metadata about the Item.
		 * Required
		 */
		item: Item;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total_transactions: number;

		/**
		 * An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter.
		 * Required
		 */
		transactions: Array<Transaction>;
	}

	/** TransactionsGetResponse defines the response schema for `/transactions/get` */
	export interface TransactionsGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
		 * Required
		 * Type: int, -2,147,483,648 to 2,147,483,647
		 */
		total_transactions: FormControl<number | null | undefined>,
	}
	export function CreateTransactionsGetResponseFormGroup() {
		return new FormGroup<TransactionsGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			total_transactions: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** TransactionsRecurringGetRequest defines the request schema for `/transactions/recurring/get` */
	export interface TransactionsRecurringGetRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/**
		 * A list of `account_ids` to retrieve for the Item
		 * Note: An error will be returned if a provided `account_id` is not associated with the Item.
		 * Required
		 */
		account_ids: Array<string>;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An optional object to be used with the request. If specified, `options` must not be `null`. */
		options?: TransactionsRecurringGetRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** TransactionsRecurringGetRequest defines the request schema for `/transactions/recurring/get` */
	export interface TransactionsRecurringGetRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRecurringGetRequestFormGroup() {
		return new FormGroup<TransactionsRecurringGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to be used with the request. If specified, `options` must not be `null`. */
	export interface TransactionsRecurringGetRequestOptions {

		/**
		 * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object for each transaction stream in the response.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 */
		include_personal_finance_category?: boolean | null;
	}

	/** An optional object to be used with the request. If specified, `options` must not be `null`. */
	export interface TransactionsRecurringGetRequestOptionsFormProperties {

		/**
		 * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object for each transaction stream in the response.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 */
		include_personal_finance_category: FormControl<boolean | null | undefined>,
	}
	export function CreateTransactionsRecurringGetRequestOptionsFormGroup() {
		return new FormGroup<TransactionsRecurringGetRequestOptionsFormProperties>({
			include_personal_finance_category: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** TransactionsRecurringGetResponse defines the response schema for `/transactions/recurring/get` */
	export interface TransactionsRecurringGetResponse {

		/**
		 * An array of depository transaction streams.
		 * Required
		 */
		inflow_streams: Array<TransactionStream>;

		/**
		 * An array of expense transaction streams.
		 * Required
		 */
		outflow_streams: Array<TransactionStream>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
		 * Required
		 */
		updated_datetime: Date;
	}

	/** TransactionsRecurringGetResponse defines the response schema for `/transactions/recurring/get` */
	export interface TransactionsRecurringGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
		 * Required
		 */
		updated_datetime: FormControl<Date | null | undefined>,
	}
	export function CreateTransactionsRecurringGetResponseFormGroup() {
		return new FormGroup<TransactionsRecurringGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			updated_datetime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** TransactionsRefreshRequest defines the request schema for `/transactions/refresh` */
	export interface TransactionsRefreshRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** TransactionsRefreshRequest defines the request schema for `/transactions/refresh` */
	export interface TransactionsRefreshRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRefreshRequestFormGroup() {
		return new FormGroup<TransactionsRefreshRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** TransactionsRefreshResponse defines the response schema for `/transactions/refresh` */
	export interface TransactionsRefreshResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** TransactionsRefreshResponse defines the response schema for `/transactions/refresh` */
	export interface TransactionsRefreshResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRefreshResponseFormGroup() {
		return new FormGroup<TransactionsRefreshResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * Fired when transaction(s) for an Item are deleted. The deleted transaction IDs are included in the webhook payload. Plaid will typically check for deleted transaction data several times a day.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface TransactionsRemovedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * An array of `transaction_ids` corresponding to the removed transactions
		 * Required
		 */
		removed_transactions: Array<string>;

		/**
		 * `TRANSACTIONS_REMOVED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: string;
	}

	/**
	 * Fired when transaction(s) for an Item are deleted. The deleted transaction IDs are included in the webhook payload. Plaid will typically check for deleted transaction data several times a day.
	 * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
	 */
	export interface TransactionsRemovedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `TRANSACTIONS_REMOVED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSACTIONS`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRemovedWebhookFormGroup() {
		return new FormGroup<TransactionsRemovedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Transaction field for which the rule is defined. */
	export enum TransactionsRuleField { TRANSACTION_ID = 'TRANSACTION_ID', NAME = 'NAME' }


	/**
	 * Transaction rule's match type. For TRANSACTION_ID field, EXACT_MATCH is available.
	 * Matches are case sensitive.
	 */
	export enum TransactionsRuleType { EXACT_MATCH = 'EXACT_MATCH', SUBSTRING_MATCH = 'SUBSTRING_MATCH' }


	/** TransactionsRulesCreateRequest defines the request schema for `beta/transactions/rules/v1/create` */
	export interface TransactionsRulesCreateRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Personal finance detailed category.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 * Required
		 */
		personal_finance_category: string;

		/**
		 * A representation of transactions rule details.
		 * Required
		 */
		rule_details: TransactionsRuleDetails;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** TransactionsRulesCreateRequest defines the request schema for `beta/transactions/rules/v1/create` */
	export interface TransactionsRulesCreateRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Personal finance detailed category.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 * Required
		 */
		personal_finance_category: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRulesCreateRequestFormGroup() {
		return new FormGroup<TransactionsRulesCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			personal_finance_category: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** TransactionsRulesCreateResponse defines the response schema for `/beta/transactions/rules/v1/create` */
	export interface TransactionsRulesCreateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * A representation of a transactions category rule.
		 * Required
		 */
		rule: TransactionsCategoryRule;
	}

	/** TransactionsRulesCreateResponse defines the response schema for `/beta/transactions/rules/v1/create` */
	export interface TransactionsRulesCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRulesCreateResponseFormGroup() {
		return new FormGroup<TransactionsRulesCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** TransactionsRulesListRequest defines the request schema for `/beta/transactions/rules/v1/list` */
	export interface TransactionsRulesListRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** TransactionsRulesListRequest defines the request schema for `/beta/transactions/rules/v1/list` */
	export interface TransactionsRulesListRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRulesListRequestFormGroup() {
		return new FormGroup<TransactionsRulesListRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** TransactionsRulesListResponse defines the response schema for `/beta/transactions/rules/v1/list` */
	export interface TransactionsRulesListResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * A list of the Item's transaction rules
		 * Required
		 */
		rules: Array<TransactionsCategoryRule>;
	}

	/** TransactionsRulesListResponse defines the response schema for `/beta/transactions/rules/v1/list` */
	export interface TransactionsRulesListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRulesListResponseFormGroup() {
		return new FormGroup<TransactionsRulesListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** TransactionsRulesRemoveRequest defines the request schema for `/beta/transactions/rules/v1/remove` */
	export interface TransactionsRulesRemoveRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A rule's unique identifier
		 * Required
		 */
		rule_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** TransactionsRulesRemoveRequest defines the request schema for `/beta/transactions/rules/v1/remove` */
	export interface TransactionsRulesRemoveRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A rule's unique identifier
		 * Required
		 */
		rule_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRulesRemoveRequestFormGroup() {
		return new FormGroup<TransactionsRulesRemoveRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			rule_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** TransactionsRulesRemoveResponse defines the response schema for `/beta/transactions/rules/v1/remove` */
	export interface TransactionsRulesRemoveResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** TransactionsRulesRemoveResponse defines the response schema for `/beta/transactions/rules/v1/remove` */
	export interface TransactionsRulesRemoveResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsRulesRemoveResponseFormGroup() {
		return new FormGroup<TransactionsRulesRemoveResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** TransactionsSyncRequest defines the request schema for `/transactions/sync` */
	export interface TransactionsSyncRequest {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The number of transaction updates to fetch.
		 * Minimum: 1
		 * Maximum: 500
		 */
		count?: number | null;

		/**
		 * The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update.
		 * If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item.
		 * Note: The upper-bound length of this cursor is 256 characters of base64.
		 */
		cursor?: string | null;

		/** An optional object to be used with the request. If specified, `options` must not be `null`. */
		options?: TransactionsSyncRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** TransactionsSyncRequest defines the request schema for `/transactions/sync` */
	export interface TransactionsSyncRequestFormProperties {

		/**
		 * The access token associated with the Item data is being requested for.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The number of transaction updates to fetch.
		 * Minimum: 1
		 * Maximum: 500
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update.
		 * If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item.
		 * Note: The upper-bound length of this cursor is 256 characters of base64.
		 */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsSyncRequestFormGroup() {
		return new FormGroup<TransactionsSyncRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(500)]),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An optional object to be used with the request. If specified, `options` must not be `null`. */
	export interface TransactionsSyncRequestOptions {

		/** Include counterparties and extra merchant fields in the transaction. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager. */
		include_logo_and_counterparty_beta?: boolean | null;

		/** Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality). */
		include_original_description?: boolean | null;

		/**
		 * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-sync-response-added-personal-finance-category) object in the response.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 * Weâ€™re introducing Category Rules - a new beta endpoint that will enable you to change the `personal_finance_category` for a transaction based on your usersâ€™ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
		 */
		include_personal_finance_category?: boolean | null;
	}

	/** An optional object to be used with the request. If specified, `options` must not be `null`. */
	export interface TransactionsSyncRequestOptionsFormProperties {

		/** Include counterparties and extra merchant fields in the transaction. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager. */
		include_logo_and_counterparty_beta: FormControl<boolean | null | undefined>,

		/** Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality). */
		include_original_description: FormControl<boolean | null | undefined>,

		/**
		 * Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-sync-response-added-personal-finance-category) object in the response.
		 * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
		 * Weâ€™re introducing Category Rules - a new beta endpoint that will enable you to change the `personal_finance_category` for a transaction based on your usersâ€™ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
		 */
		include_personal_finance_category: FormControl<boolean | null | undefined>,
	}
	export function CreateTransactionsSyncRequestOptionsFormGroup() {
		return new FormGroup<TransactionsSyncRequestOptionsFormProperties>({
			include_logo_and_counterparty_beta: new FormControl<boolean | null | undefined>(undefined),
			include_original_description: new FormControl<boolean | null | undefined>(undefined),
			include_personal_finance_category: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** TransactionsSyncResponse defines the response schema for `/transactions/sync` */
	export interface TransactionsSyncResponse {

		/**
		 * Transactions that have been added to the Item since `cursor` ordered by ascending last modified time.
		 * Required
		 */
		added: Array<Transaction>;

		/**
		 * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_more` is true, itâ€™s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.
		 * Required
		 */
		has_more: boolean;

		/**
		 * Transactions that have been modified on the Item since `cursor` ordered by ascending last modified time.
		 * Required
		 */
		modified: Array<Transaction>;

		/**
		 * Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_more` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls. If transactions are not yet available, this will be an empty string.
		 * Required
		 */
		next_cursor: string;

		/**
		 * Transactions that have been removed from the Item since `cursor` ordered by ascending last modified time.
		 * Required
		 */
		removed: Array<RemovedTransaction>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** TransactionsSyncResponse defines the response schema for `/transactions/sync` */
	export interface TransactionsSyncResponseFormProperties {

		/**
		 * Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_more` is true, itâ€™s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination.
		 * Required
		 */
		has_more: FormControl<boolean | null | undefined>,

		/**
		 * Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_more` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls. If transactions are not yet available, this will be an empty string.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionsSyncResponseFormGroup() {
		return new FormGroup<TransactionsSyncResponseFormProperties>({
			has_more: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents a transfer within the Transfers API. */
	export interface Transfer {

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
		account_id?: string | null;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/**
		 * When `true`, you can still cancel this transfer.
		 * Required
		 */
		cancellable: boolean;

		/**
		 * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: Date;

		/**
		 * The description of the transfer.
		 * Required
		 */
		description: string;

		/**
		 * The expected date when the full amount of the transfer settles at the consumersâ€™ account, if the transfer is credit; or at the customer's business checking account, if the transfer is debit. Only set for ACH transfers and is null for non-ACH transfers. Only set for ACH transfers. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		expected_settlement_date: Date;

		/** The expected settlement schedule of this transfer, if posted. Only applies to ACH debit transfers. */
		expected_settlement_schedule?: Array<TransferExpectedSettlementScheduleItem>;

		/**
		 * The failure reason if the event type for a transfer is `"failed"` or `"returned"`. Null value otherwise.
		 * Required
		 */
		failure_reason: TransferFailure;

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: string;

		/**
		 * Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
		 * Required
		 */
		guarantee_decision: TransferGuarantee_decision;

		/**
		 * The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.
		 * Required
		 */
		guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale;

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		id: string;

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 * Required
		 */
		metadata: TransferMetadata;

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: RecurringTransferNetwork;

		/**
		 * Plaidâ€™s unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: string;

		/**
		 * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
		 * Required
		 */
		originator_client_id: string;

		/**
		 * The id of the recurring transfer if this transfer belongs to a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: string;

		/**
		 * A list of refunds associated with this transfer.
		 * Required
		 */
		refunds: Array<TransferRefund>;

		/** The accumulated amount that have been swept to date. This number does not reflect `return_swept` amount if the transfer is returned. Only applies to ACH debit transfers. */
		settled_amount?: string | null;

		/**
		 * The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		standard_return_window: Date;

		/**
		 * The status of the transfer.
		 * `pending`: A new transfer was created; it is in the pending state.
		 * `posted`: The transfer has been successfully submitted to the payment network.
		 * `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.
		 * `cancelled`: The transfer was cancelled by the client.
		 * `failed`: The transfer failed, no funds were moved.
		 * `returned`: A posted transfer was returned.
		 * Required
		 */
		status: TransferStatus;

		/**
		 * The status of the sweep for the transfer.
		 * `unswept`: The transfer hasn't been swept yet.
		 * `swept`: The transfer was swept to the sweep account.
		 * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customerâ€™s business checking account.
		 * `return_swept`: The transfer was returned, funds were pulled back or pushed back to the sweep account.
		 * `null`: The transfer will never be swept (e.g. if the transfer is cancelled or returned before being swept)
		 */
		sweep_status?: TransferSweep_status | null;

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		unauthorized_return_window: Date;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferUserInResponse;
	}

	/** Represents a transfer within the Transfers API. */
	export interface TransferFormProperties {

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * When `true`, you can still cancel this transfer.
		 * Required
		 */
		cancellable: FormControl<boolean | null | undefined>,

		/**
		 * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * The description of the transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The expected date when the full amount of the transfer settles at the consumersâ€™ account, if the transfer is credit; or at the customer's business checking account, if the transfer is debit. Only set for ACH transfers and is null for non-ACH transfers. Only set for ACH transfers. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		expected_settlement_date: FormControl<Date | null | undefined>,

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
		 * Required
		 */
		guarantee_decision: FormControl<TransferGuarantee_decision | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: FormControl<RecurringTransferNetwork | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
		 * Required
		 */
		originator_client_id: FormControl<string | null | undefined>,

		/**
		 * The id of the recurring transfer if this transfer belongs to a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: FormControl<string | null | undefined>,

		/** The accumulated amount that have been swept to date. This number does not reflect `return_swept` amount if the transfer is returned. Only applies to ACH debit transfers. */
		settled_amount: FormControl<string | null | undefined>,

		/**
		 * The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		standard_return_window: FormControl<Date | null | undefined>,

		/**
		 * The status of the transfer.
		 * `pending`: A new transfer was created; it is in the pending state.
		 * `posted`: The transfer has been successfully submitted to the payment network.
		 * `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.
		 * `cancelled`: The transfer was cancelled by the client.
		 * `failed`: The transfer failed, no funds were moved.
		 * `returned`: A posted transfer was returned.
		 * Required
		 */
		status: FormControl<TransferStatus | null | undefined>,

		/**
		 * The status of the sweep for the transfer.
		 * `unswept`: The transfer hasn't been swept yet.
		 * `swept`: The transfer was swept to the sweep account.
		 * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customerâ€™s business checking account.
		 * `return_swept`: The transfer was returned, funds were pulled back or pushed back to the sweep account.
		 * `null`: The transfer will never be swept (e.g. if the transfer is cancelled or returned before being swept)
		 */
		sweep_status: FormControl<TransferSweep_status | null | undefined>,

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,

		/**
		 * The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
		 * Required
		 * Type: DateOnly
		 */
		unauthorized_return_window: FormControl<Date | null | undefined>,
	}
	export function CreateTransferFormGroup() {
		return new FormGroup<TransferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			cancellable: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expected_settlement_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			guarantee_decision: new FormControl<TransferGuarantee_decision | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<RecurringTransferNetwork | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recurring_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			settled_amount: new FormControl<string | null | undefined>(undefined),
			standard_return_window: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<TransferStatus | null | undefined>(undefined, [Validators.required]),
			sweep_status: new FormControl<TransferSweep_status | null | undefined>(undefined),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
			unauthorized_return_window: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines an expected sweep date and amount. */
	export interface TransferExpectedSettlementScheduleItem {

		/**
		 * The accumulated amount that have been swept by `settlement_date`.
		 * Required
		 */
		settled_amount: string;

		/**
		 * The settlement date of a sweep for this transfer.
		 * Required
		 * Type: DateOnly
		 */
		settlement_date: Date;
	}

	/** Defines an expected sweep date and amount. */
	export interface TransferExpectedSettlementScheduleItemFormProperties {

		/**
		 * The accumulated amount that have been swept by `settlement_date`.
		 * Required
		 */
		settled_amount: FormControl<string | null | undefined>,

		/**
		 * The settlement date of a sweep for this transfer.
		 * Required
		 * Type: DateOnly
		 */
		settlement_date: FormControl<Date | null | undefined>,
	}
	export function CreateTransferExpectedSettlementScheduleItemFormGroup() {
		return new FormGroup<TransferExpectedSettlementScheduleItemFormProperties>({
			settled_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			settlement_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransferGuarantee_decision { GUARANTEED = 'GUARANTEED', NOT_GUARANTEED = 'NOT_GUARANTEED', _null = 2 }


	/** The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`. */
	export interface TransferAuthorizationGuaranteeDecisionRationale {

		/**
		 * A code representing the reason Plaid declined to guarantee this transfer:
		 * `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.
		 * `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.
		 * `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guarantee has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.
		 * `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.
		 * `REQUIRED_PARAM_MISSING`: Required fields are missing.
		 * Required
		 */
		code: TransferAuthorizationGuaranteeDecisionRationaleCode;

		/**
		 * A human-readable description of why the transfer cannot be guaranteed.
		 * Required
		 */
		description: string;
	}

	/** The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`. */
	export interface TransferAuthorizationGuaranteeDecisionRationaleFormProperties {

		/**
		 * A code representing the reason Plaid declined to guarantee this transfer:
		 * `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.
		 * `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.
		 * `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guarantee has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.
		 * `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.
		 * `REQUIRED_PARAM_MISSING`: Required fields are missing.
		 * Required
		 */
		code: FormControl<TransferAuthorizationGuaranteeDecisionRationaleCode | null | undefined>,

		/**
		 * A human-readable description of why the transfer cannot be guaranteed.
		 * Required
		 */
		description: FormControl<string | null | undefined>,
	}
	export function CreateTransferAuthorizationGuaranteeDecisionRationaleFormGroup() {
		return new FormGroup<TransferAuthorizationGuaranteeDecisionRationaleFormProperties>({
			code: new FormControl<TransferAuthorizationGuaranteeDecisionRationaleCode | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransferAuthorizationGuaranteeDecisionRationaleCode { RETURN_BANK = 'RETURN_BANK', RETURN_CUSTOMER = 'RETURN_CUSTOMER', GUARANTEE_LIMIT_REACHED = 'GUARANTEE_LIMIT_REACHED', RISK_ESTIMATE_UNAVAILABLE = 'RISK_ESTIMATE_UNAVAILABLE', REQUIRED_PARAM_MISSING = 'REQUIRED_PARAM_MISSING' }


	/**
	 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
	 * The JSON values must be Strings (no nested JSON objects allowed)
	 * Only ASCII characters may be used
	 * Maximum of 50 key/value pairs
	 * Maximum key length of 40 characters
	 * Maximum value length of 500 characters
	 */
	export interface TransferMetadata {
	}

	/**
	 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
	 * The JSON values must be Strings (no nested JSON objects allowed)
	 * Only ASCII characters may be used
	 * Maximum of 50 key/value pairs
	 * Maximum key length of 40 characters
	 * Maximum value length of 500 characters
	 */
	export interface TransferMetadataFormProperties {
	}
	export function CreateTransferMetadataFormGroup() {
		return new FormGroup<TransferMetadataFormProperties>({
		});

	}


	/** Represents a refund within the Transfers API. */
	export interface TransferRefund {

		/**
		 * The amount of the refund (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/**
		 * The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: Date;

		/**
		 * Plaidâ€™s unique identifier for a refund.
		 * Required
		 */
		id: string;

		/**
		 * The status of the refund.
		 * `pending`: A new refund was created; it is in the pending state.
		 * `posted`: The refund has been successfully submitted to the payment network.
		 * `cancelled`: The refund was cancelled by the client.
		 * `failed`: The refund failed or was returned.
		 * Required
		 */
		status: TransferRefundStatus;

		/**
		 * The ID of the transfer to refund.
		 * Required
		 */
		transfer_id: string;
	}

	/** Represents a refund within the Transfers API. */
	export interface TransferRefundFormProperties {

		/**
		 * The amount of the refund (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z`
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a refund.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The status of the refund.
		 * `pending`: A new refund was created; it is in the pending state.
		 * `posted`: The refund has been successfully submitted to the payment network.
		 * `cancelled`: The refund was cancelled by the client.
		 * `failed`: The refund failed or was returned.
		 * Required
		 */
		status: FormControl<TransferRefundStatus | null | undefined>,

		/**
		 * The ID of the transfer to refund.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRefundFormGroup() {
		return new FormGroup<TransferRefundFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<TransferRefundStatus | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransferRefundStatus { pending = 'pending', posted = 'posted', cancelled = 'cancelled', failed = 'failed' }

	export enum TransferStatus { pending = 'pending', posted = 'posted', settled = 'settled', cancelled = 'cancelled', failed = 'failed', returned = 'returned' }

	export enum TransferSweep_status { _null = 0, unswept = 'unswept', swept = 'swept', swept_settled = 'swept_settled', return_swept = 'return_swept' }


	/** Contains the authorization decision for a proposed transfer. */
	export interface TransferAuthorization {

		/**
		 * The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
		 * Required
		 */
		created: Date;

		/**
		 * A decision regarding the proposed transfer.
		 * `approved` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		decision: RecurringTransferSkippedWebhookAuthorization_decision;

		/**
		 * The rationale for Plaid's decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions.
		 * Required
		 */
		decision_rationale: TransferAuthorizationDecisionRationale;

		/**
		 * Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
		 * Required
		 */
		guarantee_decision: TransferAuthorizationGuarantee_decision;

		/**
		 * The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.
		 * Required
		 */
		guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale;

		/**
		 * Plaidâ€™s unique identifier for a transfer authorization.
		 * Required
		 */
		id: string;

		/**
		 * Details regarding the proposed transfer.
		 * Required
		 */
		proposed_transfer: TransferAuthorizationProposedTransfer;
	}

	/** Contains the authorization decision for a proposed transfer. */
	export interface TransferAuthorizationFormProperties {

		/**
		 * The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * A decision regarding the proposed transfer.
		 * `approved` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		decision: FormControl<RecurringTransferSkippedWebhookAuthorization_decision | null | undefined>,

		/**
		 * Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
		 * Required
		 */
		guarantee_decision: FormControl<TransferAuthorizationGuarantee_decision | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer authorization.
		 * Required
		 */
		id: FormControl<string | null | undefined>,
	}
	export function CreateTransferAuthorizationFormGroup() {
		return new FormGroup<TransferAuthorizationFormProperties>({
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			decision: new FormControl<RecurringTransferSkippedWebhookAuthorization_decision | null | undefined>(undefined, [Validators.required]),
			guarantee_decision: new FormControl<TransferAuthorizationGuarantee_decision | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The rationale for Plaid's decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions. */
	export interface TransferAuthorizationDecisionRationale {

		/**
		 * A code representing the rationale for approving or declining the proposed transfer. Possible values are:
		 * `MANUALLY_VERIFIED_ITEM` â€“ Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.
		 * `ITEM_LOGIN_REQUIRED` â€“ Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.
		 * `PAYMENT_PROFILE_LOGIN_REQUIRED` - Unable to collect the account information due to invalid login when using Payment Profiles. Can be rectified using update mode for Payment Profile. Plaid will offer `approved` as a transaction decision.
		 * `ERROR` â€“ Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.
		 * `NSF` â€“ Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.
		 * `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.
		 * `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit. Plaid will offer `declined` as a transaction decision.
		 * `MIGRATED_ACCOUNT_ITEM` - Item created via `/transfer/account_migration` endpoint, limited information available. Plaid will offer `approved` as a transaction decision.
		 * Required
		 */
		code: RecurringTransferSkippedWebhookAuthorization_decision_rationale_code;

		/**
		 * A human-readable description of the code associated with a transfer approval or transfer decline.
		 * Required
		 */
		description: string;
	}

	/** The rationale for Plaid's decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions. */
	export interface TransferAuthorizationDecisionRationaleFormProperties {

		/**
		 * A code representing the rationale for approving or declining the proposed transfer. Possible values are:
		 * `MANUALLY_VERIFIED_ITEM` â€“ Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.
		 * `ITEM_LOGIN_REQUIRED` â€“ Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.
		 * `PAYMENT_PROFILE_LOGIN_REQUIRED` - Unable to collect the account information due to invalid login when using Payment Profiles. Can be rectified using update mode for Payment Profile. Plaid will offer `approved` as a transaction decision.
		 * `ERROR` â€“ Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.
		 * `NSF` â€“ Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.
		 * `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.
		 * `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit. Plaid will offer `declined` as a transaction decision.
		 * `MIGRATED_ACCOUNT_ITEM` - Item created via `/transfer/account_migration` endpoint, limited information available. Plaid will offer `approved` as a transaction decision.
		 * Required
		 */
		code: FormControl<RecurringTransferSkippedWebhookAuthorization_decision_rationale_code | null | undefined>,

		/**
		 * A human-readable description of the code associated with a transfer approval or transfer decline.
		 * Required
		 */
		description: FormControl<string | null | undefined>,
	}
	export function CreateTransferAuthorizationDecisionRationaleFormGroup() {
		return new FormGroup<TransferAuthorizationDecisionRationaleFormProperties>({
			code: new FormControl<RecurringTransferSkippedWebhookAuthorization_decision_rationale_code | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransferAuthorizationGuarantee_decision { GUARANTEED = 'GUARANTEED', NOT_GUARANTEED = 'NOT_GUARANTEED', _null = 2 }


	/** Details regarding the proposed transfer. */
	export interface TransferAuthorizationProposedTransfer {

		/** The Plaid `account_id` for the account that will be debited or credited. */
		account_id?: string | null;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: string;

		/**
		 * The currency of the transfer amount. The default value is "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The network or rails used for the transfer.
		 * Required
		 */
		network: string;

		/**
		 * Plaid's unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: string;

		/**
		 * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
		 * Required
		 */
		originator_client_id: string;

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferUserInResponse;
	}

	/** Details regarding the proposed transfer. */
	export interface TransferAuthorizationProposedTransferFormProperties {

		/** The Plaid `account_id` for the account that will be debited or credited. */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount. The default value is "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer.
		 * Required
		 */
		network: FormControl<string | null | undefined>,

		/**
		 * Plaid's unique identifier for the origination account that was used for this transfer.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
		 * Required
		 */
		originator_client_id: FormControl<string | null | undefined>,

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,
	}
	export function CreateTransferAuthorizationProposedTransferFormGroup() {
		return new FormGroup<TransferAuthorizationProposedTransferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/authorization/create` */
	export interface TransferAuthorizationCreateRequest {

		/** The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`. */
		access_token?: string | null;

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id?: string | null;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/** The unique identifier returned by Plaid's [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage. Required for Guarantee customers who are not using [Transfer UI](https://plaid.com/docs/transfer/using-transfer-ui/) and have a web checkout experience. */
		beacon_session_id?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Information about the device being used to initiate the authorization. */
		device?: TransferAuthorizationDevice;

		/** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding. */
		funding_account_id?: string | null;

		/**
		 * A random key provided by the client, per unique authorization. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.
		 * Failure to provide this key may result in duplicate charges.
		 * Required for guaranteed ACH customers.
		 * Max length: 50
		 */
		idempotency_key?: string | null;

		/** The currency of the transfer amount. The default value is "USD". */
		iso_currency_code?: string | null;

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: RecurringTransferNetwork;

		/** Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used. */
		origination_account_id?: string | null;

		/** The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a third-party sender (TPS). */
		originator_client_id?: string | null;

		/** The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`. */
		payment_profile_token?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferAuthorizationUserInRequest;

		/** Required for Guarantee. If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. */
		user_present?: boolean | null;

		/** If set to `false`, Plaid will not offer a `guarantee_decision` for this request(Guarantee customers only). */
		with_guarantee?: boolean | null;
	}

	/** Defines the request schema for `/transfer/authorization/create` */
	export interface TransferAuthorizationCreateRequestFormProperties {

		/** The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`. */
		access_token: FormControl<string | null | undefined>,

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/** The unique identifier returned by Plaid's [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage. Required for Guarantee customers who are not using [Transfer UI](https://plaid.com/docs/transfer/using-transfer-ui/) and have a web checkout experience. */
		beacon_session_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding. */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique authorization. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.
		 * Failure to provide this key may result in duplicate charges.
		 * Required for guaranteed ACH customers.
		 * Max length: 50
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/** The currency of the transfer amount. The default value is "USD". */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: FormControl<RecurringTransferNetwork | null | undefined>,

		/** Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used. */
		origination_account_id: FormControl<string | null | undefined>,

		/** The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a third-party sender (TPS). */
		originator_client_id: FormControl<string | null | undefined>,

		/** The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`. */
		payment_profile_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,

		/** Required for Guarantee. If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. */
		user_present: FormControl<boolean | null | undefined>,

		/** If set to `false`, Plaid will not offer a `guarantee_decision` for this request(Guarantee customers only). */
		with_guarantee: FormControl<boolean | null | undefined>,
	}
	export function CreateTransferAuthorizationCreateRequestFormGroup() {
		return new FormGroup<TransferAuthorizationCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			account_id: new FormControl<string | null | undefined>(undefined),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beacon_session_id: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			funding_account_id: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			network: new FormControl<RecurringTransferNetwork | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			payment_profile_token: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
			user_present: new FormControl<boolean | null | undefined>(undefined),
			with_guarantee: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Information about the device being used to initiate the authorization. */
	export interface TransferAuthorizationDevice {

		/** The IP address of the device being used to initiate the authorization. Required for Guarantee. */
		ip_address?: string | null;

		/** The user agent of the device being used to initiate the authorization. Required for Guarantee. */
		user_agent?: string | null;
	}

	/** Information about the device being used to initiate the authorization. */
	export interface TransferAuthorizationDeviceFormProperties {

		/** The IP address of the device being used to initiate the authorization. Required for Guarantee. */
		ip_address: FormControl<string | null | undefined>,

		/** The user agent of the device being used to initiate the authorization. Required for Guarantee. */
		user_agent: FormControl<string | null | undefined>,
	}
	export function CreateTransferAuthorizationDeviceFormGroup() {
		return new FormGroup<TransferAuthorizationDeviceFormProperties>({
			ip_address: new FormControl<string | null | undefined>(undefined),
			user_agent: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The legal name and other information for the account holder. */
	export interface TransferAuthorizationUserInRequest {

		/** The address associated with the account holder. Providing this data will improve the likelihood that Plaid will be able to guarantee the transfer, if applicable. */
		address?: TransferUserAddressInRequest;

		/** The user's email address. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided. */
		email_address?: string | null;

		/**
		 * The user's legal name.
		 * Required
		 */
		legal_name: string;

		/** The user's phone number. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided. */
		phone_number?: string | null;
	}

	/** The legal name and other information for the account holder. */
	export interface TransferAuthorizationUserInRequestFormProperties {

		/** The user's email address. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided. */
		email_address: FormControl<string | null | undefined>,

		/**
		 * The user's legal name.
		 * Required
		 */
		legal_name: FormControl<string | null | undefined>,

		/** The user's phone number. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided. */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateTransferAuthorizationUserInRequestFormGroup() {
		return new FormGroup<TransferAuthorizationUserInRequestFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The address associated with the account holder. Providing this data will improve the likelihood that Plaid will be able to guarantee the transfer, if applicable. */
	export interface TransferUserAddressInRequest {

		/** Ex. "San Francisco" */
		city?: string | null;

		/** A two-letter country code (e.g., "US"). */
		country?: string | null;

		/** The postal code (e.g., "94103"). */
		postal_code?: string | null;

		/** The state or province (e.g., "CA"). */
		region?: string | null;

		/** The street number and name (i.e., "100 Market St."). */
		street?: string | null;
	}

	/** The address associated with the account holder. Providing this data will improve the likelihood that Plaid will be able to guarantee the transfer, if applicable. */
	export interface TransferUserAddressInRequestFormProperties {

		/** Ex. "San Francisco" */
		city: FormControl<string | null | undefined>,

		/** A two-letter country code (e.g., "US"). */
		country: FormControl<string | null | undefined>,

		/** The postal code (e.g., "94103"). */
		postal_code: FormControl<string | null | undefined>,

		/** The state or province (e.g., "CA"). */
		region: FormControl<string | null | undefined>,

		/** The street number and name (i.e., "100 Market St."). */
		street: FormControl<string | null | undefined>,
	}
	export function CreateTransferUserAddressInRequestFormGroup() {
		return new FormGroup<TransferUserAddressInRequestFormProperties>({
			city: new FormControl<string | null | undefined>(undefined),
			country: new FormControl<string | null | undefined>(undefined),
			postal_code: new FormControl<string | null | undefined>(undefined),
			region: new FormControl<string | null | undefined>(undefined),
			street: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/authorization/create` */
	export interface TransferAuthorizationCreateResponse {

		/**
		 * Contains the authorization decision for a proposed transfer.
		 * Required
		 */
		authorization: TransferAuthorization;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/authorization/create` */
	export interface TransferAuthorizationCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferAuthorizationCreateResponseFormGroup() {
		return new FormGroup<TransferAuthorizationCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A decision regarding the proposed transfer.
	 * `approved` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
	 * `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
	 */
	export enum TransferAuthorizationDecision { approved = 'approved', declined = 'declined' }


	/**
	 * A code representing the rationale for approving or declining the proposed transfer. Possible values are:
	 * `MANUALLY_VERIFIED_ITEM` â€“ Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.
	 * `ITEM_LOGIN_REQUIRED` â€“ Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.
	 * `PAYMENT_PROFILE_LOGIN_REQUIRED` - Unable to collect the account information due to invalid login when using Payment Profiles. Can be rectified using update mode for Payment Profile. Plaid will offer `approved` as a transaction decision.
	 * `ERROR` â€“ Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.
	 * `NSF` â€“ Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.
	 * `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.
	 * `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit. Plaid will offer `declined` as a transaction decision.
	 * `MIGRATED_ACCOUNT_ITEM` - Item created via `/transfer/account_migration` endpoint, limited information available. Plaid will offer `approved` as a transaction decision.
	 */
	export enum TransferAuthorizationDecisionRationaleCode { NSF = 'NSF', RISK = 'RISK', TRANSFER_LIMIT_REACHED = 'TRANSFER_LIMIT_REACHED', MANUALLY_VERIFIED_ITEM = 'MANUALLY_VERIFIED_ITEM', ITEM_LOGIN_REQUIRED = 'ITEM_LOGIN_REQUIRED', PAYMENT_PROFILE_LOGIN_REQUIRED = 'PAYMENT_PROFILE_LOGIN_REQUIRED', ERROR = 'ERROR', MIGRATED_ACCOUNT_ITEM = 'MIGRATED_ACCOUNT_ITEM' }


	/** Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details. */
	export enum TransferAuthorizationGuaranteeDecision { GUARANTEED = 'GUARANTEED', NOT_GUARANTEED = 'NOT_GUARANTEED', _null = 2 }


	/** Defines the request schema for `/transfer/cancel` */
	export interface TransferCancelRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: string;
	}

	/** Defines the request schema for `/transfer/cancel` */
	export interface TransferCancelRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferCancelRequestFormGroup() {
		return new FormGroup<TransferCancelRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/transfer/cancel` */
	export interface TransferCancelResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/cancel` */
	export interface TransferCancelResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferCancelResponseFormGroup() {
		return new FormGroup<TransferCancelResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/capabilities/get` */
	export interface TransferCapabilitiesGetRequest {

		/** The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`. */
		access_token?: string | null;

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** A payment profile token associated with the Payment Profile data that is being requested. */
		payment_profile_token?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/capabilities/get` */
	export interface TransferCapabilitiesGetRequestFormProperties {

		/** The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`. */
		access_token: FormControl<string | null | undefined>,

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** A payment profile token associated with the Payment Profile data that is being requested. */
		payment_profile_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferCapabilitiesGetRequestFormGroup() {
		return new FormGroup<TransferCapabilitiesGetRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			account_id: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			payment_profile_token: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/capabilities/get` */
	export interface TransferCapabilitiesGetResponse {

		/**
		 * Contains the RTP network and types supported by the linked Item's institution.
		 * Required
		 */
		institution_supported_networks: InstitutionSupportedNetworks;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/capabilities/get` */
	export interface TransferCapabilitiesGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferCapabilitiesGetResponseFormGroup() {
		return new FormGroup<TransferCapabilitiesGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/configuration/get` */
	export interface TransferConfigurationGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/configuration/get` */
	export interface TransferConfigurationGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferConfigurationGetRequestFormGroup() {
		return new FormGroup<TransferConfigurationGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/configuration/get` */
	export interface TransferConfigurationGetResponse {

		/**
		 * The currency of the dollar amount, e.g. "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The max limit of sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_daily_credit_amount: string;

		/**
		 * The max limit of sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_daily_debit_amount: string;

		/**
		 * The max limit of sum of dollar amount of credit and debit transfers in one calendar month (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_monthly_amount: string;

		/**
		 * The max limit of dollar amount of a single transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_single_transfer_amount: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/configuration/get` */
	export interface TransferConfigurationGetResponseFormProperties {

		/**
		 * The currency of the dollar amount, e.g. "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The max limit of sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_daily_credit_amount: FormControl<string | null | undefined>,

		/**
		 * The max limit of sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_daily_debit_amount: FormControl<string | null | undefined>,

		/**
		 * The max limit of sum of dollar amount of credit and debit transfers in one calendar month (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_monthly_amount: FormControl<string | null | undefined>,

		/**
		 * The max limit of dollar amount of a single transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		max_single_transfer_amount: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferConfigurationGetResponseFormGroup() {
		return new FormGroup<TransferConfigurationGetResponseFormProperties>({
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			max_daily_credit_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			max_daily_debit_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			max_monthly_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			max_single_transfer_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/create` */
	export interface TransferCreateRequest {

		/** The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`. */
		access_token?: string | null;

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id?: string | null;
		ach_class?: ACHClass;

		/** The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). */
		amount?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier.
		 * Required
		 */
		authorization_id: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The transfer description. Maximum of 10 characters. If reprocessing a returned transfer, please note that the `description` field must be `"Retry"` to indicate that it's a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
		 * Required
		 * Max length: 10
		 */
		description: string;

		/**
		 * Deprecated. `authorization_id` is now used as idempotency instead.
		 * A random key provided by the client, per unique transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.
		 * Max length: 50
		 */
		idempotency_key?: string | null;

		/** The currency of the transfer amount. The default value is "USD". */
		iso_currency_code?: string | null;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 */
		metadata?: TransferMetadata;
		network?: RecurringTransferNetwork;

		/** Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank. */
		origination_account_id?: string | null;

		/** The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`. */
		payment_profile_token?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
		type?: BankTransferType;

		/** The legal name and other information for the account holder. */
		user?: TransferUserInRequestDeprecated;
	}

	/** Defines the request schema for `/transfer/create` */
	export interface TransferCreateRequestFormProperties {

		/** The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`. */
		access_token: FormControl<string | null | undefined>,

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id: FormControl<string | null | undefined>,
		ach_class: FormControl<ACHClass | null | undefined>,

		/** The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). */
		amount: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier.
		 * Required
		 */
		authorization_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The transfer description. Maximum of 10 characters. If reprocessing a returned transfer, please note that the `description` field must be `"Retry"` to indicate that it's a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
		 * Required
		 * Max length: 10
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Deprecated. `authorization_id` is now used as idempotency instead.
		 * A random key provided by the client, per unique transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.
		 * Max length: 50
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/** The currency of the transfer amount. The default value is "USD". */
		iso_currency_code: FormControl<string | null | undefined>,
		network: FormControl<RecurringTransferNetwork | null | undefined>,

		/** Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank. */
		origination_account_id: FormControl<string | null | undefined>,

		/** The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`. */
		payment_profile_token: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
		type: FormControl<BankTransferType | null | undefined>,
	}
	export function CreateTransferCreateRequestFormGroup() {
		return new FormGroup<TransferCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined),
			account_id: new FormControl<string | null | undefined>(undefined),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined),
			authorization_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(10)]),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			network: new FormControl<RecurringTransferNetwork | null | undefined>(undefined),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			payment_profile_token: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<BankTransferType | null | undefined>(undefined),
		});

	}


	/** The legal name and other information for the account holder. */
	export interface TransferUserInRequestDeprecated {

		/** The address associated with the account holder. Providing this data will improve the likelihood that Plaid will be able to guarantee the transfer, if applicable. */
		address?: TransferUserAddressInRequest;

		/** The user's email address. */
		email_address?: string | null;

		/** The user's legal name. */
		legal_name?: string | null;

		/** The user's phone number. */
		phone_number?: string | null;
	}

	/** The legal name and other information for the account holder. */
	export interface TransferUserInRequestDeprecatedFormProperties {

		/** The user's email address. */
		email_address: FormControl<string | null | undefined>,

		/** The user's legal name. */
		legal_name: FormControl<string | null | undefined>,

		/** The user's phone number. */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateTransferUserInRequestDeprecatedFormGroup() {
		return new FormGroup<TransferUserInRequestDeprecatedFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			legal_name: new FormControl<string | null | undefined>(undefined),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/create` */
	export interface TransferCreateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Represents a transfer within the Transfers API.
		 * Required
		 */
		transfer: Transfer;
	}

	/** Defines the response schema for `/transfer/create` */
	export interface TransferCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferCreateResponseFormGroup() {
		return new FormGroup<TransferCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the device being used to initiate the authorization. */
	export interface TransferDevice {

		/**
		 * The IP address of the device being used to initiate the authorization.
		 * Required
		 */
		ip_address: string;

		/**
		 * The user agent of the device being used to initiate the authorization.
		 * Required
		 */
		user_agent: string;
	}

	/** Information about the device being used to initiate the authorization. */
	export interface TransferDeviceFormProperties {

		/**
		 * The IP address of the device being used to initiate the authorization.
		 * Required
		 */
		ip_address: FormControl<string | null | undefined>,

		/**
		 * The user agent of the device being used to initiate the authorization.
		 * Required
		 */
		user_agent: FormControl<string | null | undefined>,
	}
	export function CreateTransferDeviceFormGroup() {
		return new FormGroup<TransferDeviceFormProperties>({
			ip_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_agent: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Originatorâ€™s diligence status. */
	export enum TransferDiligenceStatus { under_review = 'under_review', approved = 'approved', denied = 'denied' }


	/** Represents an event in the Transfers API. */
	export interface TransferEvent {

		/**
		 * The account ID associated with the transfer.
		 * Required
		 */
		account_id: string;

		/**
		 * Plaidâ€™s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
		 * Required
		 * Minimum: 0
		 */
		event_id: number;

		/**
		 * The type of event that this transfer represents.
		 * `pending`: A new transfer was created; it is in the pending state.
		 * `cancelled`: The transfer was cancelled by the client.
		 * `failed`: The transfer failed, no funds were moved.
		 * `posted`: The transfer has been successfully submitted to the payment network.
		 * `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.
		 * `returned`: A posted transfer was returned.
		 * `swept`: The transfer was swept to / from the sweep account.
		 * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customerâ€™s business checking account.
		 * `return_swept`: Due to the transfer being returned, funds were pulled from or pushed back to the sweep account.
		 * Required
		 */
		event_type: TransferEventEvent_type;

		/**
		 * The failure reason if the event type for a transfer is `"failed"` or `"returned"`. Null value otherwise.
		 * Required
		 */
		failure_reason: TransferFailure;

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: string;

		/**
		 * The ID of the origination account that this balance belongs to.
		 * Required
		 */
		origination_account_id: string;

		/**
		 * The Plaid client ID that is the originator of the transfer that this event applies to. Only present if the transfer was created on behalf of another client as a third-party sender (TPS).
		 * Required
		 */
		originator_client_id: string;

		/**
		 * Plaidâ€™s unique identifier for a refund. A non-null value indicates the event is for the associated refund of the transfer.
		 * Required
		 */
		refund_id: string;

		/**
		 * A signed amount of how much was `swept` or `return_swept` for this transfer (decimal string with two digits of precision e.g. "-5.50").
		 * Required
		 */
		sweep_amount: string;

		/**
		 * Plaidâ€™s unique identifier for a sweep.
		 * Required
		 */
		sweep_id: string;

		/**
		 * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		timestamp: Date;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		transfer_amount: string;

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: string;

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		transfer_type: BankTransferType;
	}

	/** Represents an event in the Transfers API. */
	export interface TransferEventFormProperties {

		/**
		 * The account ID associated with the transfer.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
		 * Required
		 * Minimum: 0
		 */
		event_id: FormControl<number | null | undefined>,

		/**
		 * The type of event that this transfer represents.
		 * `pending`: A new transfer was created; it is in the pending state.
		 * `cancelled`: The transfer was cancelled by the client.
		 * `failed`: The transfer failed, no funds were moved.
		 * `posted`: The transfer has been successfully submitted to the payment network.
		 * `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.
		 * `returned`: A posted transfer was returned.
		 * `swept`: The transfer was swept to / from the sweep account.
		 * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customerâ€™s business checking account.
		 * `return_swept`: Due to the transfer being returned, funds were pulled from or pushed back to the sweep account.
		 * Required
		 */
		event_type: FormControl<TransferEventEvent_type | null | undefined>,

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the origination account that this balance belongs to.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid client ID that is the originator of the transfer that this event applies to. Only present if the transfer was created on behalf of another client as a third-party sender (TPS).
		 * Required
		 */
		originator_client_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a refund. A non-null value indicates the event is for the associated refund of the transfer.
		 * Required
		 */
		refund_id: FormControl<string | null | undefined>,

		/**
		 * A signed amount of how much was `swept` or `return_swept` for this transfer (decimal string with two digits of precision e.g. "-5.50").
		 * Required
		 */
		sweep_amount: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a sweep.
		 * Required
		 */
		sweep_id: FormControl<string | null | undefined>,

		/**
		 * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		timestamp: FormControl<Date | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		transfer_amount: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		transfer_type: FormControl<BankTransferType | null | undefined>,
	}
	export function CreateTransferEventFormGroup() {
		return new FormGroup<TransferEventFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event_id: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			event_type: new FormControl<TransferEventEvent_type | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			refund_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sweep_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sweep_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			timestamp: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transfer_amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransferEventEvent_type { pending = 'pending', cancelled = 'cancelled', failed = 'failed', posted = 'posted', settled = 'settled', returned = 'returned', swept = 'swept', swept_settled = 'swept_settled', return_swept = 'return_swept' }


	/** Defines the request schema for `/transfer/event/list` */
	export interface TransferEventListRequest {

		/** The account ID to get events for all transactions to/from an account. */
		account_id?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date?: Date | null;

		/** Filter events by event type. */
		event_types?: Array<TransferEventType>;

		/** Filter transfer events to only those with the specified `funding_account_id`. */
		funding_account_id?: string | null;

		/**
		 * The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 events will be returned.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** The origination account ID to get events for transfers from a specific origination account. */
		origination_account_id?: string | null;

		/** Filter transfer events to only those with the specified originator client. */
		originator_client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date?: Date | null;

		/** Plaidâ€™s unique identifier for a sweep. */
		sweep_id?: string | null;

		/** Plaidâ€™s unique identifier for a transfer. */
		transfer_id?: string | null;

		/** The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account. */
		transfer_type?: TransferEventListRequestTransfer_type | null;
	}

	/** Defines the request schema for `/transfer/event/list` */
	export interface TransferEventListRequestFormProperties {

		/** The account ID to get events for all transactions to/from an account. */
		account_id: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date: FormControl<Date | null | undefined>,

		/** Filter transfer events to only those with the specified `funding_account_id`. */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 events will be returned.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** The origination account ID to get events for transfers from a specific origination account. */
		origination_account_id: FormControl<string | null | undefined>,

		/** Filter transfer events to only those with the specified originator client. */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date: FormControl<Date | null | undefined>,

		/** Plaidâ€™s unique identifier for a sweep. */
		sweep_id: FormControl<string | null | undefined>,

		/** Plaidâ€™s unique identifier for a transfer. */
		transfer_id: FormControl<string | null | undefined>,

		/** The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account. */
		transfer_type: FormControl<TransferEventListRequestTransfer_type | null | undefined>,
	}
	export function CreateTransferEventListRequestFormGroup() {
		return new FormGroup<TransferEventListRequestFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			end_date: new FormControl<Date | null | undefined>(undefined),
			funding_account_id: new FormControl<string | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
			sweep_id: new FormControl<string | null | undefined>(undefined),
			transfer_id: new FormControl<string | null | undefined>(undefined),
			transfer_type: new FormControl<TransferEventListRequestTransfer_type | null | undefined>(undefined),
		});

	}


	/**
	 * The type of event that this transfer represents.
	 * `pending`: A new transfer was created; it is in the pending state.
	 * `cancelled`: The transfer was cancelled by the client.
	 * `failed`: The transfer failed, no funds were moved.
	 * `posted`: The transfer has been successfully submitted to the payment network.
	 * `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.
	 * `returned`: A posted transfer was returned.
	 * `swept`: The transfer was swept to / from the sweep account.
	 * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customerâ€™s business checking account.
	 * `return_swept`: Due to the transfer being returned, funds were pulled from or pushed back to the sweep account.
	 */
	export enum TransferEventType { pending = 'pending', cancelled = 'cancelled', failed = 'failed', posted = 'posted', settled = 'settled', returned = 'returned', swept = 'swept', swept_settled = 'swept_settled', return_swept = 'return_swept' }

	export enum TransferEventListRequestTransfer_type { debit = 'debit', credit = 'credit', _null = 2 }


	/** Defines the response schema for `/transfer/event/list` */
	export interface TransferEventListResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** Required */
		transfer_events: Array<TransferEvent>;
	}

	/** Defines the response schema for `/transfer/event/list` */
	export interface TransferEventListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferEventListResponseFormGroup() {
		return new FormGroup<TransferEventListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account. */
	export enum TransferEventListTransferType { debit = 'debit', credit = 'credit', _null = 2 }


	/** Defines the request schema for `/transfer/event/sync` */
	export interface TransferEventSyncRequest {

		/**
		 * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.
		 * Required
		 * Minimum: 0
		 */
		after_id: number;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of transfer events to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/event/sync` */
	export interface TransferEventSyncRequestFormProperties {

		/**
		 * The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially.
		 * Required
		 * Minimum: 0
		 */
		after_id: FormControl<number | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of transfer events to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferEventSyncRequestFormGroup() {
		return new FormGroup<TransferEventSyncRequestFormProperties>({
			after_id: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/event/sync` */
	export interface TransferEventSyncResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** Required */
		transfer_events: Array<TransferEvent>;
	}

	/** Defines the response schema for `/transfer/event/sync` */
	export interface TransferEventSyncResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferEventSyncResponseFormGroup() {
		return new FormGroup<TransferEventSyncResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Fired when new transfer events are available. Receiving this webhook indicates you should fetch the new events from `/transfer/event/sync`. */
	export interface TransferEventsUpdateWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * `TRANSFER_EVENTS_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when new transfer events are available. Receiving this webhook indicates you should fetch the new events from `/transfer/event/sync`. */
	export interface TransferEventsUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * `TRANSFER_EVENTS_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `TRANSFER`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateTransferEventsUpdateWebhookFormGroup() {
		return new FormGroup<TransferEventsUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/get` */
	export interface TransferGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: string;
	}

	/** Defines the request schema for `/transfer/get` */
	export interface TransferGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferGetRequestFormGroup() {
		return new FormGroup<TransferGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/transfer/get` */
	export interface TransferGetResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Represents a transfer within the Transfers API.
		 * Required
		 */
		transfer: Transfer;
	}

	/** Defines the response schema for `/transfer/get` */
	export interface TransferGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferGetResponseFormGroup() {
		return new FormGroup<TransferGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A decision regarding the proposed transfer.
	 * `APPROVED` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
	 * `DECLINED` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
	 */
	export enum TransferIntentAuthorizationDecision { APPROVED = 'APPROVED', DECLINED = 'DECLINED' }


	/** Represents a transfer intent within Transfer UI. */
	export interface TransferIntentCreate {

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id?: string | null;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/**
		 * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		created: Date;

		/**
		 * A description for the underlying transfer. Maximum of 8 characters.
		 * Required
		 */
		description: string;

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: string;

		/**
		 * Plaid's unique identifier for the transfer intent object.
		 * Required
		 */
		id: string;

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 */
		metadata?: TransferMetadata;

		/**
		 * The direction of the flow of transfer funds.
		 * `PAYMENT`: Transfers funds from an end user's account to your business account.
		 * `DISBURSEMENT`: Transfers funds from your business account to an end user's account.
		 * Required
		 */
		mode: TransferIntentCreateMode;

		/**
		 * The network or rails used for the transfer. Defaults to `same-day-ach`.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 */
		network?: TransferIntentCreateNetwork | null;

		/**
		 * Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used.
		 * Required
		 */
		origination_account_id: string;

		/** When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
		require_guarantee?: boolean | null;

		/**
		 * The status of the transfer intent.
		 * `PENDING`: The transfer intent is pending.
		 * `SUCCEEDED`: The transfer intent was successfully created.
		 * `FAILED`: The transfer intent was unable to be created.
		 * Required
		 */
		status: TransferIntentCreateStatus;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferUserInResponse;
	}

	/** Represents a transfer intent within Transfer UI. */
	export interface TransferIntentCreateFormProperties {

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * A description for the underlying transfer. Maximum of 8 characters.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * Plaid's unique identifier for the transfer intent object.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The direction of the flow of transfer funds.
		 * `PAYMENT`: Transfers funds from an end user's account to your business account.
		 * `DISBURSEMENT`: Transfers funds from your business account to an end user's account.
		 * Required
		 */
		mode: FormControl<TransferIntentCreateMode | null | undefined>,

		/**
		 * The network or rails used for the transfer. Defaults to `same-day-ach`.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 */
		network: FormControl<TransferIntentCreateNetwork | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/** When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
		require_guarantee: FormControl<boolean | null | undefined>,

		/**
		 * The status of the transfer intent.
		 * `PENDING`: The transfer intent is pending.
		 * `SUCCEEDED`: The transfer intent was successfully created.
		 * `FAILED`: The transfer intent was unable to be created.
		 * Required
		 */
		status: FormControl<TransferIntentCreateStatus | null | undefined>,
	}
	export function CreateTransferIntentCreateFormGroup() {
		return new FormGroup<TransferIntentCreateFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mode: new FormControl<TransferIntentCreateMode | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<TransferIntentCreateNetwork | null | undefined>(undefined),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			require_guarantee: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<TransferIntentCreateStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransferIntentCreateMode { PAYMENT = 'PAYMENT', DISBURSEMENT = 'DISBURSEMENT' }

	export enum TransferIntentCreateNetwork { ach = 'ach', 'same-day-ach' = 'same-day-ach' }

	export enum TransferIntentCreateStatus { PENDING = 'PENDING', SUCCEEDED = 'SUCCEEDED', FAILED = 'FAILED' }


	/** Defines the request schema for `/transfer/intent/create` */
	export interface TransferIntentCreateRequest {

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
		account_id?: string | null;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A description for the underlying transfer. Maximum of 8 characters.
		 * Required
		 * Min length: 1
		 * Max length: 8
		 */
		description: string;

		/** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding. */
		funding_account_id?: string | null;

		/** The currency of the transfer amount, e.g. "USD" */
		iso_currency_code?: string | null;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 */
		metadata?: TransferMetadata;

		/**
		 * The direction of the flow of transfer funds.
		 * `PAYMENT`: Transfers funds from an end user's account to your business account.
		 * `DISBURSEMENT`: Transfers funds from your business account to an end user's account.
		 * Required
		 */
		mode: TransferIntentCreateMode;

		/**
		 * The network or rails used for the transfer. Defaults to `same-day-ach`.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 */
		network?: TransferIntentCreateNetwork | null;

		/** Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used. */
		origination_account_id?: string | null;

		/** When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
		require_guarantee?: boolean | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferUserInRequest;
	}

	/** Defines the request schema for `/transfer/intent/create` */
	export interface TransferIntentCreateRequestFormProperties {

		/** The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A description for the underlying transfer. Maximum of 8 characters.
		 * Required
		 * Min length: 1
		 * Max length: 8
		 */
		description: FormControl<string | null | undefined>,

		/** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding. */
		funding_account_id: FormControl<string | null | undefined>,

		/** The currency of the transfer amount, e.g. "USD" */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The direction of the flow of transfer funds.
		 * `PAYMENT`: Transfers funds from an end user's account to your business account.
		 * `DISBURSEMENT`: Transfers funds from your business account to an end user's account.
		 * Required
		 */
		mode: FormControl<TransferIntentCreateMode | null | undefined>,

		/**
		 * The network or rails used for the transfer. Defaults to `same-day-ach`.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 */
		network: FormControl<TransferIntentCreateNetwork | null | undefined>,

		/** Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used. */
		origination_account_id: FormControl<string | null | undefined>,

		/** When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
		require_guarantee: FormControl<boolean | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferIntentCreateRequestFormGroup() {
		return new FormGroup<TransferIntentCreateRequestFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(8)]),
			funding_account_id: new FormControl<string | null | undefined>(undefined),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			mode: new FormControl<TransferIntentCreateMode | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<TransferIntentCreateNetwork | null | undefined>(undefined),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			require_guarantee: new FormControl<boolean | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The legal name and other information for the account holder. */
	export interface TransferUserInRequest {

		/** The address associated with the account holder. Providing this data will improve the likelihood that Plaid will be able to guarantee the transfer, if applicable. */
		address?: TransferUserAddressInRequest;

		/** The user's email address. */
		email_address?: string | null;

		/**
		 * The user's legal name.
		 * Required
		 */
		legal_name: string;

		/** The user's phone number. */
		phone_number?: string | null;
	}

	/** The legal name and other information for the account holder. */
	export interface TransferUserInRequestFormProperties {

		/** The user's email address. */
		email_address: FormControl<string | null | undefined>,

		/**
		 * The user's legal name.
		 * Required
		 */
		legal_name: FormControl<string | null | undefined>,

		/** The user's phone number. */
		phone_number: FormControl<string | null | undefined>,
	}
	export function CreateTransferUserInRequestFormGroup() {
		return new FormGroup<TransferUserInRequestFormProperties>({
			email_address: new FormControl<string | null | undefined>(undefined),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/intent/create` */
	export interface TransferIntentCreateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Represents a transfer intent within Transfer UI.
		 * Required
		 */
		transfer_intent: TransferIntentCreate;
	}

	/** Defines the response schema for `/transfer/intent/create` */
	export interface TransferIntentCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferIntentCreateResponseFormGroup() {
		return new FormGroup<TransferIntentCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents a transfer intent within Transfer UI. */
	export interface TransferIntentGet {

		/** The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id?: string | null;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/**
		 * A decision regarding the proposed transfer.
		 * `APPROVED` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `DECLINED` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		authorization_decision: TransferIntentAuthorizationDecision;

		/**
		 * The rationale for Plaid's decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions.
		 * Required
		 */
		authorization_decision_rationale: TransferAuthorizationDecisionRationale;

		/**
		 * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		created: Date;

		/**
		 * A description for the underlying transfer. Maximum of 8 characters.
		 * Required
		 */
		description: string;

		/**
		 * The reason for a failed transfer intent. Returned only if the transfer intent status is `failed`. Null otherwise.
		 * Required
		 */
		failure_reason: TransferIntentGetFailureReason;

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: string;

		/**
		 * Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
		 * Required
		 */
		guarantee_decision: TransferIntentGetGuarantee_decision;

		/**
		 * The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.
		 * Required
		 */
		guarantee_decision_rationale: TransferAuthorizationGuaranteeDecisionRationale;

		/**
		 * Plaid's unique identifier for a transfer intent object.
		 * Required
		 */
		id: string;

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
		 * The JSON values must be Strings (no nested JSON objects allowed)
		 * Only ASCII characters may be used
		 * Maximum of 50 key/value pairs
		 * Maximum key length of 40 characters
		 * Maximum value length of 500 characters
		 */
		metadata?: TransferMetadata;

		/**
		 * The direction of the flow of transfer funds.
		 * `PAYMENT`: Transfers funds from an end user's account to your business account.
		 * `DISBURSEMENT`: Transfers funds from your business account to an end user's account.
		 * Required
		 */
		mode: TransferIntentCreateMode;

		/**
		 * The network or rails used for the transfer. Defaults to `same-day-ach`.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 */
		network?: TransferIntentCreateNetwork | null;

		/**
		 * Plaidâ€™s unique identifier for the origination account used for the transfer.
		 * Required
		 */
		origination_account_id: string;

		/** When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
		require_guarantee?: boolean | null;

		/**
		 * The status of the transfer intent.
		 * `PENDING`: The transfer intent is pending.
		 * `SUCCEEDED`: The transfer intent was successfully created.
		 * `FAILED`: The transfer intent was unable to be created.
		 * Required
		 */
		status: TransferIntentCreateStatus;

		/**
		 * Plaid's unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.
		 * Required
		 */
		transfer_id: string;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferUserInResponse;
	}

	/** Represents a transfer intent within Transfer UI. */
	export interface TransferIntentGetFormProperties {

		/** The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * A decision regarding the proposed transfer.
		 * `APPROVED` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `DECLINED` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		authorization_decision: FormControl<TransferIntentAuthorizationDecision | null | undefined>,

		/**
		 * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * A description for the underlying transfer. Maximum of 8 characters.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
		 * Required
		 */
		guarantee_decision: FormControl<TransferIntentGetGuarantee_decision | null | undefined>,

		/**
		 * Plaid's unique identifier for a transfer intent object.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The currency of the transfer amount, e.g. "USD"
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The direction of the flow of transfer funds.
		 * `PAYMENT`: Transfers funds from an end user's account to your business account.
		 * `DISBURSEMENT`: Transfers funds from your business account to an end user's account.
		 * Required
		 */
		mode: FormControl<TransferIntentCreateMode | null | undefined>,

		/**
		 * The network or rails used for the transfer. Defaults to `same-day-ach`.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 */
		network: FormControl<TransferIntentCreateNetwork | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for the origination account used for the transfer.
		 * Required
		 */
		origination_account_id: FormControl<string | null | undefined>,

		/** When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
		require_guarantee: FormControl<boolean | null | undefined>,

		/**
		 * The status of the transfer intent.
		 * `PENDING`: The transfer intent is pending.
		 * `SUCCEEDED`: The transfer intent was successfully created.
		 * `FAILED`: The transfer intent was unable to be created.
		 * Required
		 */
		status: FormControl<TransferIntentCreateStatus | null | undefined>,

		/**
		 * Plaid's unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferIntentGetFormGroup() {
		return new FormGroup<TransferIntentGetFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			authorization_decision: new FormControl<TransferIntentAuthorizationDecision | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			guarantee_decision: new FormControl<TransferIntentGetGuarantee_decision | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mode: new FormControl<TransferIntentCreateMode | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<TransferIntentCreateNetwork | null | undefined>(undefined),
			origination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			require_guarantee: new FormControl<boolean | null | undefined>(undefined),
			status: new FormControl<TransferIntentCreateStatus | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The reason for a failed transfer intent. Returned only if the transfer intent status is `failed`. Null otherwise. */
	export interface TransferIntentGetFailureReason {

		/** A code representing the reason for a failed transfer intent (i.e., an API error or the authorization being declined). */
		error_code?: string | null;

		/** A human-readable description of the code associated with a failed transfer intent. */
		error_message?: string | null;

		/** A broad categorization of the error. */
		error_type?: string | null;
	}

	/** The reason for a failed transfer intent. Returned only if the transfer intent status is `failed`. Null otherwise. */
	export interface TransferIntentGetFailureReasonFormProperties {

		/** A code representing the reason for a failed transfer intent (i.e., an API error or the authorization being declined). */
		error_code: FormControl<string | null | undefined>,

		/** A human-readable description of the code associated with a failed transfer intent. */
		error_message: FormControl<string | null | undefined>,

		/** A broad categorization of the error. */
		error_type: FormControl<string | null | undefined>,
	}
	export function CreateTransferIntentGetFailureReasonFormGroup() {
		return new FormGroup<TransferIntentGetFailureReasonFormProperties>({
			error_code: new FormControl<string | null | undefined>(undefined),
			error_message: new FormControl<string | null | undefined>(undefined),
			error_type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TransferIntentGetGuarantee_decision { GUARANTEED = 'GUARANTEED', NOT_GUARANTEED = 'NOT_GUARANTEED', _null = 2 }


	/** Defines the request schema for `/transfer/intent/get` */
	export interface TransferIntentGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Plaid's unique identifier for a transfer intent object.
		 * Required
		 */
		transfer_intent_id: string;
	}

	/** Defines the request schema for `/transfer/intent/get` */
	export interface TransferIntentGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Plaid's unique identifier for a transfer intent object.
		 * Required
		 */
		transfer_intent_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferIntentGetRequestFormGroup() {
		return new FormGroup<TransferIntentGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			transfer_intent_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/transfer/intent/get` */
	export interface TransferIntentGetResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Represents a transfer intent within Transfer UI.
		 * Required
		 */
		transfer_intent: TransferIntentGet;
	}

	/** Defines the response schema for `/transfer/intent/get` */
	export interface TransferIntentGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferIntentGetResponseFormGroup() {
		return new FormGroup<TransferIntentGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The status of the transfer intent.
	 * `PENDING`: The transfer intent is pending.
	 * `SUCCEEDED`: The transfer intent was successfully created.
	 * `FAILED`: The transfer intent was unable to be created.
	 */
	export enum TransferIntentStatus { PENDING = 'PENDING', SUCCEEDED = 'SUCCEEDED', FAILED = 'FAILED' }


	/** Defines the request schema for `/transfer/list` */
	export interface TransferListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of transfers to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date?: Date | null;

		/** Filter transfers to only those with the specified `funding_account_id`. */
		funding_account_id?: string | null;

		/**
		 * The number of transfers to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** Filter transfers to only those originated through the specified origination account. */
		origination_account_id?: string | null;

		/** Filter transfers to only those with the specified originator client. */
		originator_client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date?: Date | null;
	}

	/** Defines the request schema for `/transfer/list` */
	export interface TransferListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of transfers to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_date: FormControl<Date | null | undefined>,

		/** Filter transfers to only those with the specified `funding_account_id`. */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * The number of transfers to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Filter transfers to only those originated through the specified origination account. */
		origination_account_id: FormControl<string | null | undefined>,

		/** Filter transfers to only those with the specified originator client. */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateTransferListRequestFormGroup() {
		return new FormGroup<TransferListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			end_date: new FormControl<Date | null | undefined>(undefined),
			funding_account_id: new FormControl<string | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			origination_account_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/list` */
	export interface TransferListResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** Required */
		transfers: Array<Transfer>;
	}

	/** Defines the response schema for `/transfer/list` */
	export interface TransferListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferListResponseFormGroup() {
		return new FormGroup<TransferListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/metrics/get` */
	export interface TransferMetricsGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/metrics/get` */
	export interface TransferMetricsGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS). */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferMetricsGetRequestFormGroup() {
		return new FormGroup<TransferMetricsGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/metrics/get` */
	export interface TransferMetricsGetResponse {

		/**
		 * Sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		daily_credit_transfer_volume: string;

		/**
		 * Sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		daily_debit_transfer_volume: string;

		/**
		 * The currency of the dollar amount, e.g. "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * Sum of dollar amount of credit and debit transfers in current calendar month (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		monthly_transfer_volume: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/metrics/get` */
	export interface TransferMetricsGetResponseFormProperties {

		/**
		 * Sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		daily_credit_transfer_volume: FormControl<string | null | undefined>,

		/**
		 * Sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		daily_debit_transfer_volume: FormControl<string | null | undefined>,

		/**
		 * The currency of the dollar amount, e.g. "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * Sum of dollar amount of credit and debit transfers in current calendar month (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		monthly_transfer_volume: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferMetricsGetResponseFormGroup() {
		return new FormGroup<TransferMetricsGetResponseFormProperties>({
			daily_credit_transfer_volume: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			daily_debit_transfer_volume: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			monthly_transfer_volume: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/migrate_account` */
	export interface TransferMigrateAccountRequest {

		/**
		 * The user's account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The type of the bank account (`checking` or `savings`).
		 * Required
		 */
		account_type: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The user's routing number.
		 * Required
		 */
		routing_number: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
		wire_routing_number?: string | null;
	}

	/** Defines the request schema for `/transfer/migrate_account` */
	export interface TransferMigrateAccountRequestFormProperties {

		/**
		 * The user's account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The type of the bank account (`checking` or `savings`).
		 * Required
		 */
		account_type: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The user's routing number.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
		wire_routing_number: FormControl<string | null | undefined>,
	}
	export function CreateTransferMigrateAccountRequestFormGroup() {
		return new FormGroup<TransferMigrateAccountRequestFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			wire_routing_number: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/migrate_account` */
	export interface TransferMigrateAccountResponse {

		/**
		 * The Plaid `access_token` for the newly created Item.
		 * Required
		 */
		access_token: string;

		/**
		 * The Plaid `account_id` for the newly created Item.
		 * Required
		 */
		account_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/migrate_account` */
	export interface TransferMigrateAccountResponseFormProperties {

		/**
		 * The Plaid `access_token` for the newly created Item.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The Plaid `account_id` for the newly created Item.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferMigrateAccountResponseFormGroup() {
		return new FormGroup<TransferMigrateAccountResponseFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The network or rails used for the transfer.
	 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
	 */
	export enum TransferNetwork { ach = 'ach', 'same-day-ach' = 'same-day-ach', rtp = 'rtp' }


	/** Defines the request schema for `/transfer/originator/create` */
	export interface TransferOriginatorCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The company name of the end customer being created. This will be displayed in public-facing surfaces, e.g. Plaid Dashboard.
		 * Required
		 * Min length: 1
		 */
		company_name: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/originator/create` */
	export interface TransferOriginatorCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The company name of the end customer being created. This will be displayed in public-facing surfaces, e.g. Plaid Dashboard.
		 * Required
		 * Min length: 1
		 */
		company_name: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferOriginatorCreateRequestFormGroup() {
		return new FormGroup<TransferOriginatorCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/originator/create` */
	export interface TransferOriginatorCreateResponse {

		/**
		 * The company name of the end customer.
		 * Required
		 */
		company_name: string;

		/**
		 * Client ID of the originator. This identifier will be used when creating transfers and should be stored associated with end user information.
		 * Required
		 */
		originator_client_id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/originator/create` */
	export interface TransferOriginatorCreateResponseFormProperties {

		/**
		 * The company name of the end customer.
		 * Required
		 */
		company_name: FormControl<string | null | undefined>,

		/**
		 * Client ID of the originator. This identifier will be used when creating transfers and should be stored associated with end user information.
		 * Required
		 */
		originator_client_id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferOriginatorCreateResponseFormGroup() {
		return new FormGroup<TransferOriginatorCreateResponseFormProperties>({
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/originator/get` */
	export interface TransferOriginatorGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Client ID of the end customer (i.e. the originator).
		 * Required
		 */
		originator_client_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/originator/get` */
	export interface TransferOriginatorGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Client ID of the end customer (i.e. the originator).
		 * Required
		 */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferOriginatorGetRequestFormGroup() {
		return new FormGroup<TransferOriginatorGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/originator/get` */
	export interface TransferOriginatorGetResponse {

		/**
		 * Originator and their status.
		 * Required
		 */
		originator: DetailedOriginator;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/originator/get` */
	export interface TransferOriginatorGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferOriginatorGetResponseFormGroup() {
		return new FormGroup<TransferOriginatorGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/originator/list` */
	export interface TransferOriginatorListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of originators to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/**
		 * The number of originators to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/originator/list` */
	export interface TransferOriginatorListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of originators to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * The number of originators to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferOriginatorListRequestFormGroup() {
		return new FormGroup<TransferOriginatorListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/originator/list` */
	export interface TransferOriginatorListResponse {

		/** Required */
		originators: Array<Originator>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/originator/list` */
	export interface TransferOriginatorListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferOriginatorListResponseFormGroup() {
		return new FormGroup<TransferOriginatorListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/questionnaire/create` */
	export interface TransferQuestionnaireCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Client ID of the end customer.
		 * Required
		 */
		originator_client_id: string;

		/**
		 * URL the end customer will be redirected to after completing questions in Plaid-hosted onboarding flow.
		 * Required
		 */
		redirect_uri: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/questionnaire/create` */
	export interface TransferQuestionnaireCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Client ID of the end customer.
		 * Required
		 */
		originator_client_id: FormControl<string | null | undefined>,

		/**
		 * URL the end customer will be redirected to after completing questions in Plaid-hosted onboarding flow.
		 * Required
		 */
		redirect_uri: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferQuestionnaireCreateRequestFormGroup() {
		return new FormGroup<TransferQuestionnaireCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			originator_client_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			redirect_uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/questionnaire/create` */
	export interface TransferQuestionnaireCreateResponse {

		/**
		 * Plaid-hosted onboarding URL that you will redirect the end customer to.
		 * Required
		 */
		onboarding_url: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/questionnaire/create` */
	export interface TransferQuestionnaireCreateResponseFormProperties {

		/**
		 * Plaid-hosted onboarding URL that you will redirect the end customer to.
		 * Required
		 */
		onboarding_url: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferQuestionnaireCreateResponseFormGroup() {
		return new FormGroup<TransferQuestionnaireCreateResponseFormProperties>({
			onboarding_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/recurring/cancel` */
	export interface TransferRecurringCancelRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/recurring/cancel` */
	export interface TransferRecurringCancelRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferRecurringCancelRequestFormGroup() {
		return new FormGroup<TransferRecurringCancelRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			recurring_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/recurring/cancel` */
	export interface TransferRecurringCancelResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/recurring/cancel` */
	export interface TransferRecurringCancelResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRecurringCancelResponseFormGroup() {
		return new FormGroup<TransferRecurringCancelResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/recurring/create` */
	export interface TransferRecurringCreateRequest {

		/**
		 * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
		 * Required
		 */
		access_token: string;

		/**
		 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
		 * Required
		 */
		account_id: string;

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class?: ACHClass | null;

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The description of the recurring transfer.
		 * Required
		 */
		description: string;

		/**
		 * Information about the device being used to initiate the authorization.
		 * Required
		 */
		device: TransferDevice;

		/** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding. */
		funding_account_id?: string | null;

		/**
		 * A random key provided by the client, per unique recurring transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a recurring fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single recurring transfer is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: string;

		/** The currency of the transfer amount. The default value is "USD". */
		iso_currency_code?: string | null;

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: RecurringTransferNetwork;

		/**
		 * The schedule that the recurring transfer will be executed on.
		 * Required
		 */
		schedule: TransferRecurringSchedule;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** Plaidâ€™s unique identifier for a test clock. */
		test_clock_id?: string | null;

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: BankTransferType;

		/**
		 * The legal name and other information for the account holder.
		 * Required
		 */
		user: TransferUserInRequest;

		/**
		 * If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
		 * Required
		 */
		user_present: boolean;
	}

	/** Defines the request schema for `/transfer/recurring/create` */
	export interface TransferRecurringCreateRequestFormProperties {

		/**
		 * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
		 * Required
		 */
		access_token: FormControl<string | null | undefined>,

		/**
		 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * Specifies the use case of the transfer. Required for transfers on an ACH network.
		 * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
		 * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
		 * `"tel"` - Telephone-Initiated Entry
		 * `"web"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
		 */
		ach_class: FormControl<ACHClass | null | undefined>,

		/**
		 * The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The description of the recurring transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/** The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding. */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique recurring transfer. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a recurring fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single recurring transfer is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/** The currency of the transfer amount. The default value is "USD". */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The network or rails used for the transfer.
		 * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 9:30 AM Pacific Time and the cutoff for next-day transfers is 5:30 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
		 * Required
		 */
		network: FormControl<RecurringTransferNetwork | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** Plaidâ€™s unique identifier for a test clock. */
		test_clock_id: FormControl<string | null | undefined>,

		/**
		 * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
		 * Required
		 */
		type: FormControl<BankTransferType | null | undefined>,

		/**
		 * If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
		 * Required
		 */
		user_present: FormControl<boolean | null | undefined>,
	}
	export function CreateTransferRecurringCreateRequestFormGroup() {
		return new FormGroup<TransferRecurringCreateRequestFormProperties>({
			access_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ach_class: new FormControl<ACHClass | null | undefined>(undefined),
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined),
			network: new FormControl<RecurringTransferNetwork | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			test_clock_id: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<BankTransferType | null | undefined>(undefined, [Validators.required]),
			user_present: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/transfer/recurring/create` */
	export interface TransferRecurringCreateResponse {

		/**
		 * A decision regarding the proposed transfer.
		 * `approved` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		decision: RecurringTransferSkippedWebhookAuthorization_decision;

		/** The rationale for Plaid's decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions. */
		decision_rationale?: TransferAuthorizationDecisionRationale;

		/** Represents a recurring transfer within the Transfers API. */
		recurring_transfer?: RecurringTransferNullable;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/recurring/create` */
	export interface TransferRecurringCreateResponseFormProperties {

		/**
		 * A decision regarding the proposed transfer.
		 * `approved` â€“ The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
		 * `declined` â€“ Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
		 * Required
		 */
		decision: FormControl<RecurringTransferSkippedWebhookAuthorization_decision | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRecurringCreateResponseFormGroup() {
		return new FormGroup<TransferRecurringCreateResponseFormProperties>({
			decision: new FormControl<RecurringTransferSkippedWebhookAuthorization_decision | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/recurring/get` */
	export interface TransferRecurringGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/recurring/get` */
	export interface TransferRecurringGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a recurring transfer.
		 * Required
		 */
		recurring_transfer_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferRecurringGetRequestFormGroup() {
		return new FormGroup<TransferRecurringGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			recurring_transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/recurring/get` */
	export interface TransferRecurringGetResponse {

		/**
		 * Represents a recurring transfer within the Transfers API.
		 * Required
		 */
		recurring_transfer: RecurringTransfer;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/recurring/get` */
	export interface TransferRecurringGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRecurringGetResponseFormGroup() {
		return new FormGroup<TransferRecurringGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/recurring/list` */
	export interface TransferRecurringListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of recurring transfers to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** The end datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_time?: Date | null;

		/** Filter recurring transfers to only those with the specified `funding_account_id`. */
		funding_account_id?: string | null;

		/**
		 * The number of recurring transfers to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_time?: Date | null;
	}

	/** Defines the request schema for `/transfer/recurring/list` */
	export interface TransferRecurringListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of recurring transfers to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** The end datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		end_time: FormControl<Date | null | undefined>,

		/** Filter recurring transfers to only those with the specified `funding_account_id`. */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * The number of recurring transfers to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`) */
		start_time: FormControl<Date | null | undefined>,
	}
	export function CreateTransferRecurringListRequestFormGroup() {
		return new FormGroup<TransferRecurringListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			end_time: new FormControl<Date | null | undefined>(undefined),
			funding_account_id: new FormControl<string | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			secret: new FormControl<string | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/recurring/list` */
	export interface TransferRecurringListResponse {

		/** Required */
		recurring_transfers: Array<RecurringTransfer>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/recurring/list` */
	export interface TransferRecurringListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRecurringListResponseFormGroup() {
		return new FormGroup<TransferRecurringListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The status of the recurring transfer.
	 * `active`: The recurring transfer is currently active.
	 * `cancelled`: The recurring transfer was cancelled by the client or Plaid.
	 * `expired`: The recurring transfer has completed all originations according to its recurring schedule.
	 */
	export enum TransferRecurringStatus { active = 'active', cancelled = 'cancelled', expired = 'expired' }


	/** Defines the request schema for `/transfer/refund/cancel` */
	export interface TransferRefundCancelRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a refund.
		 * Required
		 */
		refund_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/refund/cancel` */
	export interface TransferRefundCancelRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a refund.
		 * Required
		 */
		refund_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferRefundCancelRequestFormGroup() {
		return new FormGroup<TransferRefundCancelRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			refund_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/refund/cancel` */
	export interface TransferRefundCancelResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/refund/cancel` */
	export interface TransferRefundCancelResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRefundCancelResponseFormGroup() {
		return new FormGroup<TransferRefundCancelResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/refund/create` */
	export interface TransferRefundCreateRequest {

		/**
		 * The amount of the refund (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: string;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A random key provided by the client, per unique refund. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The ID of the transfer to refund.
		 * Required
		 */
		transfer_id: string;
	}

	/** Defines the request schema for `/transfer/refund/create` */
	export interface TransferRefundCreateRequestFormProperties {

		/**
		 * The amount of the refund (decimal string with two digits of precision e.g. "10.00").
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique refund. Maximum of 50 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
		 * Required
		 * Max length: 50
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The ID of the transfer to refund.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRefundCreateRequestFormGroup() {
		return new FormGroup<TransferRefundCreateRequestFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_id: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(50)]),
			secret: new FormControl<string | null | undefined>(undefined),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/transfer/refund/create` */
	export interface TransferRefundCreateResponse {

		/**
		 * Represents a refund within the Transfers API.
		 * Required
		 */
		refund: TransferRefund;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/refund/create` */
	export interface TransferRefundCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRefundCreateResponseFormGroup() {
		return new FormGroup<TransferRefundCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/refund/get` */
	export interface TransferRefundGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a refund.
		 * Required
		 */
		refund_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/refund/get` */
	export interface TransferRefundGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a refund.
		 * Required
		 */
		refund_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferRefundGetRequestFormGroup() {
		return new FormGroup<TransferRefundGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			refund_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/refund/get` */
	export interface TransferRefundGetResponse {

		/**
		 * Represents a refund within the Transfers API.
		 * Required
		 */
		refund: TransferRefund;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/refund/get` */
	export interface TransferRefundGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRefundGetResponseFormGroup() {
		return new FormGroup<TransferRefundGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A repayment is created automatically after one or more guaranteed transactions receive a return. If there are multiple eligible returns in a day, they are batched together into a single repayment.
	 * Repayments are sent over ACH, with funds typically available on the next banking day.
	 */
	export interface TransferRepayment {

		/**
		 * Decimal amount of the repayment as it appears on your account ledger.
		 * Required
		 */
		amount: string;

		/**
		 * The datetime when the repayment occurred, in RFC 3339 format.
		 * Required
		 */
		created: Date;

		/**
		 * The currency of the repayment, e.g. "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * Identifier of the repayment.
		 * Required
		 */
		repayment_id: string;
	}

	/**
	 * A repayment is created automatically after one or more guaranteed transactions receive a return. If there are multiple eligible returns in a day, they are batched together into a single repayment.
	 * Repayments are sent over ACH, with funds typically available on the next banking day.
	 */
	export interface TransferRepaymentFormProperties {

		/**
		 * Decimal amount of the repayment as it appears on your account ledger.
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The datetime when the repayment occurred, in RFC 3339 format.
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * The currency of the repayment, e.g. "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * Identifier of the repayment.
		 * Required
		 */
		repayment_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRepaymentFormGroup() {
		return new FormGroup<TransferRepaymentFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			repayment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/repayment/list` */
	export interface TransferRepaymentListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of repayments to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** The end datetime of repayments to return (RFC 3339 format). */
		end_date?: Date | null;

		/**
		 * The number of repayments to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of repayments to return (RFC 3339 format). */
		start_date?: Date | null;
	}

	/** Defines the request schema for `/transfer/repayment/list` */
	export interface TransferRepaymentListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of repayments to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** The end datetime of repayments to return (RFC 3339 format). */
		end_date: FormControl<Date | null | undefined>,

		/**
		 * The number of repayments to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of repayments to return (RFC 3339 format). */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateTransferRepaymentListRequestFormGroup() {
		return new FormGroup<TransferRepaymentListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			end_date: new FormControl<Date | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/repayments/list` */
	export interface TransferRepaymentListResponse {

		/** Required */
		repayments: Array<TransferRepayment>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/repayments/list` */
	export interface TransferRepaymentListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRepaymentListResponseFormGroup() {
		return new FormGroup<TransferRepaymentListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents a return on a Guaranteed ACH transfer that is included in the specified repayment. */
	export interface TransferRepaymentReturn {

		/**
		 * The value of the returned transfer.
		 * Required
		 */
		amount: string;

		/**
		 * The unique identifier of the corresponding `returned` transfer event.
		 * Required
		 * Minimum: 0
		 */
		event_id: number;

		/**
		 * The currency of the repayment, e.g. "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The unique identifier of the guaranteed transfer that was returned.
		 * Required
		 */
		transfer_id: string;
	}

	/** Represents a return on a Guaranteed ACH transfer that is included in the specified repayment. */
	export interface TransferRepaymentReturnFormProperties {

		/**
		 * The value of the returned transfer.
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The unique identifier of the corresponding `returned` transfer event.
		 * Required
		 * Minimum: 0
		 */
		event_id: FormControl<number | null | undefined>,

		/**
		 * The currency of the repayment, e.g. "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The unique identifier of the guaranteed transfer that was returned.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRepaymentReturnFormGroup() {
		return new FormGroup<TransferRepaymentReturnFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			event_id: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/repayment/return/list` */
	export interface TransferRepaymentReturnListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of repayments to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/**
		 * The number of repayments to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/**
		 * Identifier of the repayment to query.
		 * Required
		 */
		repayment_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Defines the request schema for `/transfer/repayment/return/list` */
	export interface TransferRepaymentReturnListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of repayments to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * The number of repayments to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/**
		 * Identifier of the repayment to query.
		 * Required
		 */
		repayment_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateTransferRepaymentReturnListRequestFormGroup() {
		return new FormGroup<TransferRepaymentReturnListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			repayment_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/repayments/return/list` */
	export interface TransferRepaymentReturnListResponse {

		/** Required */
		repayment_returns: Array<TransferRepaymentReturn>;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Defines the response schema for `/transfer/repayments/return/list` */
	export interface TransferRepaymentReturnListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferRepaymentReturnListResponseFormGroup() {
		return new FormGroup<TransferRepaymentReturnListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The unit of the recurring interval. */
	export enum TransferScheduleIntervalUnit { week = 'week', month = 'month' }


	/**
	 * Describes a sweep of funds to / from the sweep account.
	 * A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.
	 * `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.
	 * The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
	 */
	export interface TransferSweep {

		/**
		 * Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. "-10.00")
		 * If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
		 * Required
		 */
		amount: string;

		/**
		 * The datetime when the sweep occurred, in RFC 3339 format.
		 * Required
		 */
		created: Date;

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: string;

		/**
		 * Identifier of the sweep.
		 * Required
		 */
		id: string;

		/**
		 * The currency of the sweep, e.g. "USD".
		 * Required
		 */
		iso_currency_code: string;

		/**
		 * The date when the sweep settled, in the YYYY-MM-DD format.
		 * Required
		 * Type: DateOnly
		 */
		settled: Date;
	}

	/**
	 * Describes a sweep of funds to / from the sweep account.
	 * A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.
	 * `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.
	 * The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
	 */
	export interface TransferSweepFormProperties {

		/**
		 * Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. "-10.00")
		 * If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
		 * Required
		 */
		amount: FormControl<string | null | undefined>,

		/**
		 * The datetime when the sweep occurred, in RFC 3339 format.
		 * Required
		 */
		created: FormControl<Date | null | undefined>,

		/**
		 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
		 * Required
		 */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * Identifier of the sweep.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The currency of the sweep, e.g. "USD".
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,

		/**
		 * The date when the sweep settled, in the YYYY-MM-DD format.
		 * Required
		 * Type: DateOnly
		 */
		settled: FormControl<Date | null | undefined>,
	}
	export function CreateTransferSweepFormGroup() {
		return new FormGroup<TransferSweepFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			funding_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			settled: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/sweep/get` */
	export interface TransferSweepGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * Plaidâ€™s unique identifier for a sweep.
		 * Required
		 */
		sweep_id: string;
	}

	/** Defines the request schema for `/transfer/sweep/get` */
	export interface TransferSweepGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * Plaidâ€™s unique identifier for a sweep.
		 * Required
		 */
		sweep_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferSweepGetRequestFormGroup() {
		return new FormGroup<TransferSweepGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			sweep_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the response schema for `/transfer/sweep/get` */
	export interface TransferSweepGetResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Describes a sweep of funds to / from the sweep account.
		 * A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.
		 * `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.
		 * The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
		 * Required
		 */
		sweep: TransferSweep;
	}

	/** Defines the response schema for `/transfer/sweep/get` */
	export interface TransferSweepGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferSweepGetResponseFormGroup() {
		return new FormGroup<TransferSweepGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the request schema for `/transfer/sweep/list` */
	export interface TransferSweepListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The maximum number of sweeps to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count?: number | null;

		/** The end datetime of sweeps to return (RFC 3339 format). */
		end_date?: Date | null;

		/** Filter sweeps to only those with the specified `funding_account_id`. */
		funding_account_id?: string | null;

		/**
		 * The number of sweeps to skip before returning results.
		 * Minimum: 0
		 */
		offset?: number | null;

		/** Filter sweeps to only those with the specified originator client. */
		originator_client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** The start datetime of sweeps to return (RFC 3339 format). */
		start_date?: Date | null;
	}

	/** Defines the request schema for `/transfer/sweep/list` */
	export interface TransferSweepListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The maximum number of sweeps to return.
		 * Minimum: 1
		 * Maximum: 25
		 */
		count: FormControl<number | null | undefined>,

		/** The end datetime of sweeps to return (RFC 3339 format). */
		end_date: FormControl<Date | null | undefined>,

		/** Filter sweeps to only those with the specified `funding_account_id`. */
		funding_account_id: FormControl<string | null | undefined>,

		/**
		 * The number of sweeps to skip before returning results.
		 * Minimum: 0
		 */
		offset: FormControl<number | null | undefined>,

		/** Filter sweeps to only those with the specified originator client. */
		originator_client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** The start datetime of sweeps to return (RFC 3339 format). */
		start_date: FormControl<Date | null | undefined>,
	}
	export function CreateTransferSweepListRequestFormGroup() {
		return new FormGroup<TransferSweepListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(25)]),
			end_date: new FormControl<Date | null | undefined>(undefined),
			funding_account_id: new FormControl<string | null | undefined>(undefined),
			offset: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			originator_client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			start_date: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Defines the response schema for `/transfer/sweep/list` */
	export interface TransferSweepListResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/** Required */
		sweeps: Array<TransferSweep>;
	}

	/** Defines the response schema for `/transfer/sweep/list` */
	export interface TransferSweepListResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateTransferSweepListResponseFormGroup() {
		return new FormGroup<TransferSweepListResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The status of the sweep for the transfer.
	 * `unswept`: The transfer hasn't been swept yet.
	 * `swept`: The transfer was swept to the sweep account.
	 * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customerâ€™s business checking account.
	 * `return_swept`: The transfer was returned, funds were pulled back or pushed back to the sweep account.
	 * `null`: The transfer will never be swept (e.g. if the transfer is cancelled or returned before being swept)
	 */
	export enum TransferSweepStatus { _null = 0, unswept = 'unswept', swept = 'swept', swept_settled = 'swept_settled', return_swept = 'return_swept' }


	/** The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account. */
	export enum TransferType { debit = 'debit', credit = 'credit' }


	/** List of unofficial currency codes */
	export interface UnofficialCurrencyCodeList {

		/**
		 * Cardano
		 * Required
		 */
		ADA: string;

		/**
		 * Basic Attention Token
		 * Required
		 */
		BAT: string;

		/**
		 * Bitcoin Cash
		 * Required
		 */
		BCH: string;

		/**
		 * Binance Coin
		 * Required
		 */
		BNB: string;

		/** Bitcoin Satoshi Vision */
		BSV?: string | null;

		/**
		 * Bitcoin
		 * Required
		 */
		BTC: string;

		/**
		 * Bitcoin Gold
		 * Required
		 */
		BTG: string;

		/**
		 * Chinese Yuan (offshore)
		 * Required
		 */
		CNH: string;

		/**
		 * Dash
		 * Required
		 */
		DASH: string;

		/**
		 * Dogecoin
		 * Required
		 */
		DOGE: string;

		/**
		 * Ethereum Classic
		 * Required
		 */
		ETC: string;

		/**
		 * Ethereum
		 * Required
		 */
		ETH: string;

		/**
		 * Pence sterling, i.e. British penny
		 * Required
		 */
		GBX: string;

		/**
		 * Lisk
		 * Required
		 */
		LSK: string;

		/**
		 * Neo
		 * Required
		 */
		NEO: string;

		/**
		 * OmiseGO
		 * Required
		 */
		OMG: string;

		/**
		 * Qtum
		 * Required
		 */
		QTUM: string;

		/**
		 * Tether
		 * Required
		 */
		USDT: string;

		/**
		 * Stellar Lumen
		 * Required
		 */
		XLM: string;

		/**
		 * Monero
		 * Required
		 */
		XMR: string;

		/**
		 * Ripple
		 * Required
		 */
		XRP: string;

		/**
		 * Zcash
		 * Required
		 */
		ZEC: string;

		/**
		 * 0x
		 * Required
		 */
		ZRX: string;
	}

	/** List of unofficial currency codes */
	export interface UnofficialCurrencyCodeListFormProperties {

		/**
		 * Cardano
		 * Required
		 */
		ADA: FormControl<string | null | undefined>,

		/**
		 * Basic Attention Token
		 * Required
		 */
		BAT: FormControl<string | null | undefined>,

		/**
		 * Bitcoin Cash
		 * Required
		 */
		BCH: FormControl<string | null | undefined>,

		/**
		 * Binance Coin
		 * Required
		 */
		BNB: FormControl<string | null | undefined>,

		/** Bitcoin Satoshi Vision */
		BSV: FormControl<string | null | undefined>,

		/**
		 * Bitcoin
		 * Required
		 */
		BTC: FormControl<string | null | undefined>,

		/**
		 * Bitcoin Gold
		 * Required
		 */
		BTG: FormControl<string | null | undefined>,

		/**
		 * Chinese Yuan (offshore)
		 * Required
		 */
		CNH: FormControl<string | null | undefined>,

		/**
		 * Dash
		 * Required
		 */
		DASH: FormControl<string | null | undefined>,

		/**
		 * Dogecoin
		 * Required
		 */
		DOGE: FormControl<string | null | undefined>,

		/**
		 * Ethereum Classic
		 * Required
		 */
		ETC: FormControl<string | null | undefined>,

		/**
		 * Ethereum
		 * Required
		 */
		ETH: FormControl<string | null | undefined>,

		/**
		 * Pence sterling, i.e. British penny
		 * Required
		 */
		GBX: FormControl<string | null | undefined>,

		/**
		 * Lisk
		 * Required
		 */
		LSK: FormControl<string | null | undefined>,

		/**
		 * Neo
		 * Required
		 */
		NEO: FormControl<string | null | undefined>,

		/**
		 * OmiseGO
		 * Required
		 */
		OMG: FormControl<string | null | undefined>,

		/**
		 * Qtum
		 * Required
		 */
		QTUM: FormControl<string | null | undefined>,

		/**
		 * Tether
		 * Required
		 */
		USDT: FormControl<string | null | undefined>,

		/**
		 * Stellar Lumen
		 * Required
		 */
		XLM: FormControl<string | null | undefined>,

		/**
		 * Monero
		 * Required
		 */
		XMR: FormControl<string | null | undefined>,

		/**
		 * Ripple
		 * Required
		 */
		XRP: FormControl<string | null | undefined>,

		/**
		 * Zcash
		 * Required
		 */
		ZEC: FormControl<string | null | undefined>,

		/**
		 * 0x
		 * Required
		 */
		ZRX: FormControl<string | null | undefined>,
	}
	export function CreateUnofficialCurrencyCodeListFormGroup() {
		return new FormGroup<UnofficialCurrencyCodeListFormProperties>({
			ADA: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BAT: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BCH: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BNB: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BSV: new FormControl<string | null | undefined>(undefined),
			BTC: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BTG: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CNH: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DASH: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DOGE: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ETC: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ETH: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			GBX: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LSK: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NEO: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			OMG: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			QTUM: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			USDT: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			XLM: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			XMR: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			XRP: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ZEC: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ZRX: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Search terms for editing an entity watchlist screening */
	export interface UpdateEntityScreeningRequestSearchTerms {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country?: string | null;

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number?: string | null;

		/** A valid email address. */
		email_address?: string | null;

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: string;

		/**
		 * The name of the organization being screened.
		 * Min length: 1
		 */
		legal_name?: string | null;

		/** A phone number in E.164 format. */
		phone_number?: string | null;

		/** An 'http' or 'https' URL (must begin with either of those). */
		url?: string | null;
	}

	/** Search terms for editing an entity watchlist screening */
	export interface UpdateEntityScreeningRequestSearchTermsFormProperties {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number: FormControl<string | null | undefined>,

		/** A valid email address. */
		email_address: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: FormControl<string | null | undefined>,

		/**
		 * The name of the organization being screened.
		 * Min length: 1
		 */
		legal_name: FormControl<string | null | undefined>,

		/** A phone number in E.164 format. */
		phone_number: FormControl<string | null | undefined>,

		/** An 'http' or 'https' URL (must begin with either of those). */
		url: FormControl<string | null | undefined>,
	}
	export function CreateUpdateEntityScreeningRequestSearchTermsFormGroup() {
		return new FormGroup<UpdateEntityScreeningRequestSearchTermsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2)]),
			document_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(4)]),
			email_address: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			phone_number: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Search terms for editing an individual watchlist screening */
	export interface UpdateIndividualScreeningRequestSearchTerms {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country?: string | null;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Type: DateOnly
		 */
		date_of_birth?: Date | null;

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number?: string | null;

		/**
		 * The legal name of the individual being screened.
		 * Min length: 1
		 */
		legal_name?: string | null;

		/** ID of the associated program. */
		watchlist_program_id?: string | null;
	}

	/** Search terms for editing an individual watchlist screening */
	export interface UpdateIndividualScreeningRequestSearchTermsFormProperties {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Type: DateOnly
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number: FormControl<string | null | undefined>,

		/**
		 * The legal name of the individual being screened.
		 * Min length: 1
		 */
		legal_name: FormControl<string | null | undefined>,

		/** ID of the associated program. */
		watchlist_program_id: FormControl<string | null | undefined>,
	}
	export function CreateUpdateIndividualScreeningRequestSearchTermsFormGroup() {
		return new FormGroup<UpdateIndividualScreeningRequestSearchTermsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2)]),
			date_of_birth: new FormControl<Date | null | undefined>(undefined),
			document_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(4)]),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			watchlist_program_id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** UserCreateRequest defines the request schema for `/user/create` */
	export interface UserCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A unique ID representing the end user. Maximum of 128 characters. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		client_user_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** UserCreateRequest defines the request schema for `/user/create` */
	export interface UserCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A unique ID representing the end user. Maximum of 128 characters. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateUserCreateRequestFormGroup() {
		return new FormGroup<UserCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** UserCreateResponse defines the response schema for `/user/create` */
	export interface UserCreateResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The Plaid `user_id` of the User associated with this webhook, warning, or error.
		 * Required
		 */
		user_id: string;

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: string;
	}

	/** UserCreateResponse defines the response schema for `/user/create` */
	export interface UserCreateResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid `user_id` of the User associated with this webhook, warning, or error.
		 * Required
		 */
		user_id: FormControl<string | null | undefined>,

		/**
		 * The user token associated with the User data is being requested for.
		 * Required
		 */
		user_token: FormControl<string | null | undefined>,
	}
	export function CreateUserCreateResponseFormGroup() {
		return new FormGroup<UserCreateResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			user_token: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history. */
	export interface UserCustomPassword {

		/**
		 * An error code to force on Item creation. Possible values are:
		 * `"INSTITUTION_NOT_RESPONDING"`
		 * `"INSTITUTION_NO_LONGER_SUPPORTED"`
		 * `"INVALID_CREDENTIALS"`
		 * `"INVALID_MFA"`
		 * `"ITEM_LOCKED"`
		 * `"ITEM_LOGIN_REQUIRED"`
		 * `"ITEM_NOT_SUPPORTED"`
		 * `"INVALID_LINK_TOKEN"`
		 * `"MFA_NOT_SUPPORTED"`
		 * `"NO_ACCOUNTS"`
		 * `"PLAID_ERROR"`
		 * `"USER_INPUT_TIMEOUT"`
		 * `"USER_SETUP_REQUIRED"`
		 * Required
		 */
		force_error: string;

		/**
		 * Specifies the multi-factor authentication settings to use with this test account
		 * Required
		 */
		mfa: MFA;

		/**
		 * An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.
		 * Required
		 */
		override_accounts: Array<OverrideAccounts>;

		/**
		 * You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.
		 * Required
		 */
		recaptcha: string;

		/**
		 * A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.
		 * Note that transactions data is generated relative to the Item's creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
		 * Required
		 */
		seed: string;

		/** The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite. */
		version?: string | null;
	}

	/** Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history. */
	export interface UserCustomPasswordFormProperties {

		/**
		 * An error code to force on Item creation. Possible values are:
		 * `"INSTITUTION_NOT_RESPONDING"`
		 * `"INSTITUTION_NO_LONGER_SUPPORTED"`
		 * `"INVALID_CREDENTIALS"`
		 * `"INVALID_MFA"`
		 * `"ITEM_LOCKED"`
		 * `"ITEM_LOGIN_REQUIRED"`
		 * `"ITEM_NOT_SUPPORTED"`
		 * `"INVALID_LINK_TOKEN"`
		 * `"MFA_NOT_SUPPORTED"`
		 * `"NO_ACCOUNTS"`
		 * `"PLAID_ERROR"`
		 * `"USER_INPUT_TIMEOUT"`
		 * `"USER_SETUP_REQUIRED"`
		 * Required
		 */
		force_error: FormControl<string | null | undefined>,

		/**
		 * You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.
		 * Required
		 */
		recaptcha: FormControl<string | null | undefined>,

		/**
		 * A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.
		 * Note that transactions data is generated relative to the Item's creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
		 * Required
		 */
		seed: FormControl<string | null | undefined>,

		/** The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite. */
		version: FormControl<string | null | undefined>,
	}
	export function CreateUserCustomPasswordFormGroup() {
		return new FormGroup<UserCustomPasswordFormProperties>({
			force_error: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recaptcha: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			seed: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The `USER_PERMISSION_REVOKED` webhook is fired when an end user has used either the [my.plaid.com portal](https://my.plaid.com) or the financial institutionâ€™s consent portal to revoke the permission that they previously granted to access an Item. Once access to an Item has been revoked, it cannot be restored. If the user subsequently returns to your application, a new Item must be created for the user. */
	export interface UserPermissionRevokedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `USER_PERMISSION_REVOKED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: string;
	}

	/** The `USER_PERMISSION_REVOKED` webhook is fired when an end user has used either the [my.plaid.com portal](https://my.plaid.com) or the financial institutionâ€™s consent portal to revoke the permission that they previously granted to access an Item. Once access to an Item has been revoked, it cannot be restored. If the user subsequently returns to your application, a new Item must be created for the user. */
	export interface UserPermissionRevokedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `USER_PERMISSION_REVOKED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateUserPermissionRevokedWebhookFormGroup() {
		return new FormGroup<UserPermissionRevokedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The income category for a specified income source */
	export enum UserStatedIncomeSourceCategory { OTHER = 'OTHER', SALARY = 'SALARY', UNEMPLOYMENT = 'UNEMPLOYMENT', CASH = 'CASH', GIG_ECONOMY = 'GIG_ECONOMY', RENTAL = 'RENTAL', CHILD_SUPPORT = 'CHILD_SUPPORT', MILITARY = 'MILITARY', RETIREMENT = 'RETIREMENT', LONG_TERM_DISABILITY = 'LONG_TERM_DISABILITY', BANK_INTEREST = 'BANK_INTEREST' }


	/** The pay frequency of a specified income source */
	export enum UserStatedIncomeSourceFrequency { UNKNOWN = 'UNKNOWN', WEEKLY = 'WEEKLY', BIWEEKLY = 'BIWEEKLY', SEMI_MONTHLY = 'SEMI_MONTHLY', MONTHLY = 'MONTHLY' }


	/** The pay type - `GROSS`, `NET`, or `UNKNOWN` for a specified income source */
	export enum UserStatedIncomeSourcePayType { UNKNOWN = 'UNKNOWN', GROSS = 'GROSS', NET = 'NET' }


	/** Fired when an Item was not verified via automated micro-deposits after seven days since the automated micro-deposit was made. */
	export interface VerificationExpiredWebhook {

		/**
		 * The `account_id` of the account associated with the webhook
		 * Required
		 */
		account_id: string;

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * `VERIFICATION_EXPIRED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an Item was not verified via automated micro-deposits after seven days since the automated micro-deposit was made. */
	export interface VerificationExpiredWebhookFormProperties {

		/**
		 * The `account_id` of the account associated with the webhook
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * `VERIFICATION_EXPIRED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `AUTH`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateVerificationExpiredWebhookFormGroup() {
		return new FormGroup<VerificationExpiredWebhookFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The verification refresh status. One of the following:
	 * `"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED"` User presence is required to refresh an income verification.
	 * `"VERIFICATION_REFRESH_SUCCESSFUL"` The income verification refresh was successful.
	 * `"VERIFICATION_REFRESH_NOT_FOUND"` No new data was found after the income verification refresh.
	 */
	export enum VerificationRefreshStatus { VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED = 'VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED', VERIFICATION_REFRESH_SUCCESSFUL = 'VERIFICATION_REFRESH_SUCCESSFUL', VERIFICATION_REFRESH_NOT_FOUND = 'VERIFICATION_REFRESH_NOT_FOUND' }


	/**
	 * The verification status. One of the following:
	 * `"VERIFIED"`: The information was successfully verified.
	 * `"UNVERIFIED"`: The verification has not yet been performed.
	 * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
	 * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
	 * `"UNKNOWN"`: The verification status is unknown.
	 */
	export enum VerificationStatus { VERIFIED = 'VERIFIED', UNVERIFIED = 'UNVERIFIED', NEEDS_INFO = 'NEEDS_INFO', UNABLE_TO_VERIFY = 'UNABLE_TO_VERIFY', UNKNOWN = 'UNKNOWN' }


	/** An object representing the e-wallet */
	export interface Wallet {

		/**
		 * An object representing the e-wallet balance
		 * Required
		 */
		balance: WalletBalance;

		/**
		 * An object representing the e-wallet account numbers
		 * Required
		 */
		numbers: WalletNumbers;

		/** The ID of the recipient that corresponds to the e-wallet account numbers */
		recipient_id?: string | null;

		/**
		 * The status of the wallet.
		 * `UNKNOWN`: The wallet status is unknown.
		 * `ACTIVE`: The wallet is active and ready to send money to and receive money from.
		 * `CLOSED`: The wallet is closed. Any transactions made to or from this wallet will error.
		 * Required
		 */
		status: WalletStatus;

		/**
		 * A unique ID identifying the e-wallet
		 * Required
		 */
		wallet_id: string;
	}

	/** An object representing the e-wallet */
	export interface WalletFormProperties {

		/** The ID of the recipient that corresponds to the e-wallet account numbers */
		recipient_id: FormControl<string | null | undefined>,

		/**
		 * The status of the wallet.
		 * `UNKNOWN`: The wallet status is unknown.
		 * `ACTIVE`: The wallet is active and ready to send money to and receive money from.
		 * `CLOSED`: The wallet is closed. Any transactions made to or from this wallet will error.
		 * Required
		 */
		status: FormControl<WalletStatus | null | undefined>,

		/**
		 * A unique ID identifying the e-wallet
		 * Required
		 */
		wallet_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletFormGroup() {
		return new FormGroup<WalletFormProperties>({
			recipient_id: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<WalletStatus | null | undefined>(undefined, [Validators.required]),
			wallet_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing the e-wallet balance */
	export interface WalletBalance {

		/**
		 * The total amount of funds in the account
		 * Required
		 * Type: double
		 */
		current: number;

		/**
		 * The ISO-4217 currency code of the balance
		 * Required
		 */
		iso_currency_code: string;
	}

	/** An object representing the e-wallet balance */
	export interface WalletBalanceFormProperties {

		/**
		 * The total amount of funds in the account
		 * Required
		 * Type: double
		 */
		current: FormControl<number | null | undefined>,

		/**
		 * The ISO-4217 currency code of the balance
		 * Required
		 */
		iso_currency_code: FormControl<string | null | undefined>,
	}
	export function CreateWalletBalanceFormGroup() {
		return new FormGroup<WalletBalanceFormProperties>({
			current: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			iso_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object representing the e-wallet account numbers */
	export interface WalletNumbers {

		/** An object containing a BACS account number and sort code. If an IBAN is not provided or if you need to accept domestic GBP-denominated payments, BACS data is required. */
		bacs?: RecipientBACS;

		/** Account numbers using the International Bank Account Number and BIC/SWIFT code format. */
		international?: NumbersInternationalIBAN;
	}

	/** An object representing the e-wallet account numbers */
	export interface WalletNumbersFormProperties {
	}
	export function CreateWalletNumbersFormGroup() {
		return new FormGroup<WalletNumbersFormProperties>({
		});

	}

	export enum WalletStatus { UNKNOWN = 'UNKNOWN', ACTIVE = 'ACTIVE', CLOSED = 'CLOSED' }


	/** WalletCreateRequest defines the request schema for `/wallet/create` */
	export interface WalletCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An ISO-4217 currency code, used with e-wallets and transactions.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		iso_currency_code: WalletCreateRequestIso_currency_code;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** WalletCreateRequest defines the request schema for `/wallet/create` */
	export interface WalletCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An ISO-4217 currency code, used with e-wallets and transactions.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		iso_currency_code: FormControl<WalletCreateRequestIso_currency_code | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWalletCreateRequestFormGroup() {
		return new FormGroup<WalletCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			iso_currency_code: new FormControl<WalletCreateRequestIso_currency_code | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(3)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum WalletCreateRequestIso_currency_code { GBP = 'GBP', EUR = 'EUR' }


	/** WalletCreateResponse defines the response schema for `/wallet/create` */
	export interface WalletCreateResponse {
	}

	/** WalletCreateResponse defines the response schema for `/wallet/create` */
	export interface WalletCreateResponseFormProperties {
	}
	export function CreateWalletCreateResponseFormGroup() {
		return new FormGroup<WalletCreateResponseFormProperties>({
		});

	}


	/** WalletGetRequest defines the request schema for `/wallet/get` */
	export interface WalletGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The ID of the e-wallet
		 * Required
		 * Min length: 1
		 */
		wallet_id: string;
	}

	/** WalletGetRequest defines the request schema for `/wallet/get` */
	export interface WalletGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The ID of the e-wallet
		 * Required
		 * Min length: 1
		 */
		wallet_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletGetRequestFormGroup() {
		return new FormGroup<WalletGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			wallet_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** WalletGetResponse defines the response schema for `/wallet/get` */
	export interface WalletGetResponse {
	}

	/** WalletGetResponse defines the response schema for `/wallet/get` */
	export interface WalletGetResponseFormProperties {
	}
	export function CreateWalletGetResponseFormGroup() {
		return new FormGroup<WalletGetResponseFormProperties>({
		});

	}


	/** An ISO-4217 currency code, used with e-wallets and transactions. */
	export enum WalletISOCurrencyCode { GBP = 'GBP', EUR = 'EUR' }


	/** WalletListRequest defines the request schema for `/wallet/list` */
	export interface WalletListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The number of e-wallets to fetch
		 * Minimum: 1
		 * Maximum: 20
		 */
		count?: number | null;

		/**
		 * A base64 value representing the latest e-wallet that has already been requested. Set this to `next_cursor` received from the previous `/wallet/list` request. If provided, the response will only contain e-wallets created before that e-wallet. If omitted, the response will contain e-wallets starting from the most recent, and in descending order.
		 * Max length: 256
		 */
		cursor?: string | null;

		/**
		 * An ISO-4217 currency code, used with e-wallets and transactions.
		 * Min length: 3
		 * Max length: 3
		 */
		iso_currency_code?: WalletCreateRequestIso_currency_code | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** WalletListRequest defines the request schema for `/wallet/list` */
	export interface WalletListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The number of e-wallets to fetch
		 * Minimum: 1
		 * Maximum: 20
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * A base64 value representing the latest e-wallet that has already been requested. Set this to `next_cursor` received from the previous `/wallet/list` request. If provided, the response will only contain e-wallets created before that e-wallet. If omitted, the response will contain e-wallets starting from the most recent, and in descending order.
		 * Max length: 256
		 */
		cursor: FormControl<string | null | undefined>,

		/**
		 * An ISO-4217 currency code, used with e-wallets and transactions.
		 * Min length: 3
		 * Max length: 3
		 */
		iso_currency_code: FormControl<WalletCreateRequestIso_currency_code | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWalletListRequestFormGroup() {
		return new FormGroup<WalletListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(20)]),
			cursor: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(256)]),
			iso_currency_code: new FormControl<WalletCreateRequestIso_currency_code | null | undefined>(undefined, [Validators.minLength(3), Validators.maxLength(3)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** WalletListResponse defines the response schema for `/wallet/list` */
	export interface WalletListResponse {

		/** Cursor used for fetching e-wallets created before the latest e-wallet provided in this response */
		next_cursor?: string | null;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * An array of e-wallets
		 * Required
		 */
		wallets: Array<Wallet>;
	}

	/** WalletListResponse defines the response schema for `/wallet/list` */
	export interface WalletListResponseFormProperties {

		/** Cursor used for fetching e-wallets created before the latest e-wallet provided in this response */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletListResponseFormGroup() {
		return new FormGroup<WalletListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The transaction details */
	export interface WalletTransaction {

		/**
		 * The amount and currency of a transaction
		 * Required
		 */
		amount: WalletTransactionAmount;

		/**
		 * An object representing the e-wallet transaction's counterparty
		 * Required
		 */
		counterparty: WalletTransactionCounterparty;

		/**
		 * Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		created_at: Date;

		/**
		 * The date and time of the last time the `status` was updated, in IS0 8601 format
		 * Required
		 */
		last_status_update: Date;

		/** The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`. */
		payment_id?: string | null;

		/**
		 * A reference for the transaction
		 * Required
		 */
		reference: string;

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		status: PaymentInitiationPaymentReverseResponseStatus;

		/**
		 * A unique ID identifying the transaction
		 * Required
		 */
		transaction_id: string;

		/**
		 * The type of the transaction. The supported transaction types that are returned are:
		 * `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.
		 * `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.
		 * `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).
		 * `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).
		 * `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
		 * Required
		 */
		type: WalletTransactionType;

		/**
		 * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
		 * Required
		 */
		wallet_id: string;
	}

	/** The transaction details */
	export interface WalletTransactionFormProperties {

		/**
		 * Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The date and time of the last time the `status` was updated, in IS0 8601 format
		 * Required
		 */
		last_status_update: FormControl<Date | null | undefined>,

		/** The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`. */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * A reference for the transaction
		 * Required
		 */
		reference: FormControl<string | null | undefined>,

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		status: FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>,

		/**
		 * A unique ID identifying the transaction
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The type of the transaction. The supported transaction types that are returned are:
		 * `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.
		 * `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.
		 * `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).
		 * `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).
		 * `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
		 * Required
		 */
		type: FormControl<WalletTransactionType | null | undefined>,

		/**
		 * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
		 * Required
		 */
		wallet_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionFormGroup() {
		return new FormGroup<WalletTransactionFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			last_status_update: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			payment_id: new FormControl<string | null | undefined>(undefined),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<WalletTransactionType | null | undefined>(undefined, [Validators.required]),
			wallet_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The amount and currency of a transaction */
	export interface WalletTransactionAmount {

		/**
		 * An ISO-4217 currency code, used with e-wallets and transactions.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		iso_currency_code: WalletCreateRequestIso_currency_code;

		/**
		 * The amount of the transaction. Must contain at most two digits of precision e.g. `1.23`.
		 * Required
		 * Minimum: 0.01
		 */
		value: number;
	}

	/** The amount and currency of a transaction */
	export interface WalletTransactionAmountFormProperties {

		/**
		 * An ISO-4217 currency code, used with e-wallets and transactions.
		 * Required
		 * Min length: 3
		 * Max length: 3
		 */
		iso_currency_code: FormControl<WalletCreateRequestIso_currency_code | null | undefined>,

		/**
		 * The amount of the transaction. Must contain at most two digits of precision e.g. `1.23`.
		 * Required
		 * Minimum: 0.01
		 */
		value: FormControl<number | null | undefined>,
	}
	export function CreateWalletTransactionAmountFormGroup() {
		return new FormGroup<WalletTransactionAmountFormProperties>({
			iso_currency_code: new FormControl<WalletCreateRequestIso_currency_code | null | undefined>(undefined, [Validators.required, Validators.minLength(3), Validators.maxLength(3)]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0.01)]),
		});

	}


	/** An object representing the e-wallet transaction's counterparty */
	export interface WalletTransactionCounterparty {

		/**
		 * The name of the counterparty
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * The counterparty's bank account numbers. Exactly one of IBAN or BACS data is required.
		 * Required
		 */
		numbers: WalletTransactionCounterpartyNumbers;
	}

	/** An object representing the e-wallet transaction's counterparty */
	export interface WalletTransactionCounterpartyFormProperties {

		/**
		 * The name of the counterparty
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionCounterpartyFormGroup() {
		return new FormGroup<WalletTransactionCounterpartyFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** The counterparty's bank account numbers. Exactly one of IBAN or BACS data is required. */
	export interface WalletTransactionCounterpartyNumbers {

		/** The account number and sort code of the counterparty's account */
		bacs?: WalletTransactionCounterpartyBACS;

		/** International Bank Account Number for a Wallet Transaction */
		international?: WalletTransactionCounterpartyInternational;
	}

	/** The counterparty's bank account numbers. Exactly one of IBAN or BACS data is required. */
	export interface WalletTransactionCounterpartyNumbersFormProperties {
	}
	export function CreateWalletTransactionCounterpartyNumbersFormGroup() {
		return new FormGroup<WalletTransactionCounterpartyNumbersFormProperties>({
		});

	}


	/** International Bank Account Number for a Wallet Transaction */
	export interface WalletTransactionCounterpartyInternational {

		/**
		 * International Bank Account Number (IBAN).
		 * Min length: 15
		 * Max length: 34
		 */
		iban?: string | null;
	}

	/** International Bank Account Number for a Wallet Transaction */
	export interface WalletTransactionCounterpartyInternationalFormProperties {

		/**
		 * International Bank Account Number (IBAN).
		 * Min length: 15
		 * Max length: 34
		 */
		iban: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionCounterpartyInternationalFormGroup() {
		return new FormGroup<WalletTransactionCounterpartyInternationalFormProperties>({
			iban: new FormControl<string | null | undefined>(undefined, [Validators.minLength(15), Validators.maxLength(34)]),
		});

	}

	export enum WalletTransactionType { BANK_TRANSFER = 'BANK_TRANSFER', PAYOUT = 'PAYOUT', PIS_PAY_IN = 'PIS_PAY_IN', REFUND = 'REFUND', FUNDS_SWEEP = 'FUNDS_SWEEP' }


	/** The account number and sort code of the counterparty's account */
	export interface WalletTransactionCounterpartyBACS extends RecipientBACS {
	}

	/** The account number and sort code of the counterparty's account */
	export interface WalletTransactionCounterpartyBACSFormProperties extends RecipientBACSFormProperties {
	}
	export function CreateWalletTransactionCounterpartyBACSFormGroup() {
		return new FormGroup<WalletTransactionCounterpartyBACSFormProperties>({
			account: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			sort_code: new FormControl<string | null | undefined>(undefined, [Validators.minLength(6), Validators.maxLength(6)]),
		});

	}


	/** WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute` */
	export interface WalletTransactionExecuteRequest {

		/**
		 * The amount and currency of a transaction
		 * Required
		 */
		amount: WalletTransactionAmount;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An object representing the e-wallet transaction's counterparty
		 * Required
		 */
		counterparty: WalletTransactionCounterparty;

		/**
		 * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		idempotency_key: string;

		/**
		 * A reference for the transaction. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
		 * Ensure that the `reference` field is unique for each transaction.
		 * Required
		 * Min length: 6
		 * Max length: 18
		 */
		reference: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The ID of the e-wallet to debit from
		 * Required
		 * Min length: 1
		 */
		wallet_id: string;
	}

	/** WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute` */
	export interface WalletTransactionExecuteRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
		 * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		idempotency_key: FormControl<string | null | undefined>,

		/**
		 * A reference for the transaction. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
		 * Ensure that the `reference` field is unique for each transaction.
		 * Required
		 * Min length: 6
		 * Max length: 18
		 */
		reference: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The ID of the e-wallet to debit from
		 * Required
		 * Min length: 1
		 */
		wallet_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionExecuteRequestFormGroup() {
		return new FormGroup<WalletTransactionExecuteRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			idempotency_key: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			reference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(6), Validators.maxLength(18)]),
			secret: new FormControl<string | null | undefined>(undefined),
			wallet_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** WalletTransactionExecuteResponse defines the response schema for `/wallet/transaction/execute` */
	export interface WalletTransactionExecuteResponse {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		status: PaymentInitiationPaymentReverseResponseStatus;

		/**
		 * A unique ID identifying the transaction
		 * Required
		 */
		transaction_id: string;
	}

	/** WalletTransactionExecuteResponse defines the response schema for `/wallet/transaction/execute` */
	export interface WalletTransactionExecuteResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		status: FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>,

		/**
		 * A unique ID identifying the transaction
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionExecuteResponseFormGroup() {
		return new FormGroup<WalletTransactionExecuteResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** WalletTransactionGetRequest defines the request schema for `/wallet/transaction/get` */
	export interface WalletTransactionGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The ID of the transaction to fetch
		 * Required
		 * Min length: 1
		 */
		transaction_id: string;
	}

	/** WalletTransactionGetRequest defines the request schema for `/wallet/transaction/get` */
	export interface WalletTransactionGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The ID of the transaction to fetch
		 * Required
		 * Min length: 1
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionGetRequestFormGroup() {
		return new FormGroup<WalletTransactionGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** WalletTransactionGetResponse defines the response schema for `/wallet/transaction/get` */
	export interface WalletTransactionGetResponse {
	}

	/** WalletTransactionGetResponse defines the response schema for `/wallet/transaction/get` */
	export interface WalletTransactionGetResponseFormProperties {
	}
	export function CreateWalletTransactionGetResponseFormGroup() {
		return new FormGroup<WalletTransactionGetResponseFormProperties>({
		});

	}


	/** WalletTransactionListRequest defines the request schema for `/wallet/transaction/list` */
	export interface WalletTransactionListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The number of transactions to fetch
		 * Minimum: 1
		 * Maximum: 200
		 */
		count?: number | null;

		/**
		 * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.
		 * Max length: 256
		 */
		cursor?: string | null;

		/** Additional wallet transaction options */
		options?: WalletTransactionListRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The ID of the e-wallet to fetch transactions from
		 * Required
		 * Min length: 1
		 */
		wallet_id: string;
	}

	/** WalletTransactionListRequest defines the request schema for `/wallet/transaction/list` */
	export interface WalletTransactionListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The number of transactions to fetch
		 * Minimum: 1
		 * Maximum: 200
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.
		 * Max length: 256
		 */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The ID of the e-wallet to fetch transactions from
		 * Required
		 * Min length: 1
		 */
		wallet_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionListRequestFormGroup() {
		return new FormGroup<WalletTransactionListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(200)]),
			cursor: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(256)]),
			secret: new FormControl<string | null | undefined>(undefined),
			wallet_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Additional wallet transaction options */
	export interface WalletTransactionListRequestOptions {

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date. */
		end_time?: Date | null;

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date. */
		start_time?: Date | null;
	}

	/** Additional wallet transaction options */
	export interface WalletTransactionListRequestOptionsFormProperties {

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date. */
		end_time: FormControl<Date | null | undefined>,

		/** Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date. */
		start_time: FormControl<Date | null | undefined>,
	}
	export function CreateWalletTransactionListRequestOptionsFormGroup() {
		return new FormGroup<WalletTransactionListRequestOptionsFormProperties>({
			end_time: new FormControl<Date | null | undefined>(undefined),
			start_time: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** WalletTransactionListResponse defines the response schema for `/wallet/transaction/list` */
	export interface WalletTransactionListResponse {

		/** Cursor used for fetching transactions created before the latest transaction provided in this response */
		next_cursor?: string | null;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * An array of transactions of an e-wallet, associated with the given `wallet_id`
		 * Required
		 */
		transactions: Array<WalletTransaction>;
	}

	/** WalletTransactionListResponse defines the response schema for `/wallet/transaction/list` */
	export interface WalletTransactionListResponseFormProperties {

		/** Cursor used for fetching transactions created before the latest transaction provided in this response */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionListResponseFormGroup() {
		return new FormGroup<WalletTransactionListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * The status of the transaction.
	 * `AUTHORISING`: The transaction is being processed for validation and compliance.
	 * `INITIATED`: The transaction has been initiated and is currently being processed.
	 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
	 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
	 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
	 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
	 */
	export enum WalletTransactionStatus { AUTHORISING = 'AUTHORISING', INITIATED = 'INITIATED', EXECUTED = 'EXECUTED', SETTLED = 'SETTLED', BLOCKED = 'BLOCKED', FAILED = 'FAILED' }


	/** Fired when the status of a wallet transaction has changed. */
	export interface WalletTransactionStatusUpdateWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		new_status: PaymentInitiationPaymentReverseResponseStatus;

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		old_status: PaymentInitiationPaymentReverseResponseStatus;

		/** The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN` */
		payment_id?: string | null;

		/**
		 * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
		 * Required
		 */
		timestamp: Date;

		/**
		 * The `transaction_id` for the wallet transaction being updated
		 * Required
		 */
		transaction_id: string;

		/** The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
		wallet_id?: string | null;

		/**
		 * `WALLET_TRANSACTION_STATUS_UPDATE`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `WALLET`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when the status of a wallet transaction has changed. */
	export interface WalletTransactionStatusUpdateWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		new_status: FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>,

		/**
		 * The status of the transaction.
		 * `AUTHORISING`: The transaction is being processed for validation and compliance.
		 * `INITIATED`: The transaction has been initiated and is currently being processed.
		 * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
		 * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
		 * `FAILED`: The transaction failed to process successfully. This is a terminal status.
		 * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
		 * Required
		 */
		old_status: FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>,

		/** The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN` */
		payment_id: FormControl<string | null | undefined>,

		/**
		 * The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
		 * Required
		 */
		timestamp: FormControl<Date | null | undefined>,

		/**
		 * The `transaction_id` for the wallet transaction being updated
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/** The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
		wallet_id: FormControl<string | null | undefined>,

		/**
		 * `WALLET_TRANSACTION_STATUS_UPDATE`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `WALLET`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionStatusUpdateWebhookFormGroup() {
		return new FormGroup<WalletTransactionStatusUpdateWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			new_status: new FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>(undefined, [Validators.required]),
			old_status: new FormControl<PaymentInitiationPaymentReverseResponseStatus | null | undefined>(undefined, [Validators.required]),
			payment_id: new FormControl<string | null | undefined>(undefined),
			timestamp: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			wallet_id: new FormControl<string | null | undefined>(undefined),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** WalletTransactionListRequest defines the request schema for `/wallet/transaction/list` */
	export interface WalletTransactionsListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The number of transactions to fetch
		 * Minimum: 1
		 * Maximum: 200
		 */
		count?: number | null;

		/**
		 * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.
		 * Max length: 256
		 */
		cursor?: string | null;

		/** Additional wallet transaction options */
		options?: WalletTransactionListRequestOptions;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * The ID of the e-wallet to fetch transactions from
		 * Required
		 * Min length: 1
		 */
		wallet_id: string;
	}

	/** WalletTransactionListRequest defines the request schema for `/wallet/transaction/list` */
	export interface WalletTransactionsListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The number of transactions to fetch
		 * Minimum: 1
		 * Maximum: 200
		 */
		count: FormControl<number | null | undefined>,

		/**
		 * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.
		 * Max length: 256
		 */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * The ID of the e-wallet to fetch transactions from
		 * Required
		 * Min length: 1
		 */
		wallet_id: FormControl<string | null | undefined>,
	}
	export function CreateWalletTransactionsListRequestFormGroup() {
		return new FormGroup<WalletTransactionsListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			count: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(200)]),
			cursor: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(256)]),
			secret: new FormControl<string | null | undefined>(undefined),
			wallet_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** Request input for creating an entity screening review */
	export interface WatchlistScreeningEntityCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id?: string | null;

		/**
		 * Search inputs for creating an entity watchlist screening
		 * Required
		 */
		search_terms: EntityWatchlistSearchTerms;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for creating an entity screening review */
	export interface WatchlistScreeningEntityCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityCreateRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface WatchlistScreeningEntityCreateResponse {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Search terms associated with an entity used for searching against watchlists
		 * Required
		 */
		search_terms: EntityWatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface WatchlistScreeningEntityCreateResponseFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityCreateResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityCreateResponseFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for fetching an entity watchlist screening */
	export interface WatchlistScreeningEntityGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for fetching an entity watchlist screening */
	export interface WatchlistScreeningEntityGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityGetRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface WatchlistScreeningEntityGetResponse {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Search terms associated with an entity used for searching against watchlists
		 * Required
		 */
		search_terms: EntityWatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface WatchlistScreeningEntityGetResponseFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityGetResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityGetResponseFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing changes to entity watchlist screenings */
	export interface WatchlistScreeningEntityHistoryListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for listing changes to entity watchlist screenings */
	export interface WatchlistScreeningEntityHistoryListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityHistoryListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityHistoryListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Paginated list of entity watchlist screenings */
	export interface WatchlistScreeningEntityHistoryListResponse {

		/**
		 * List of entity watchlist screening
		 * Required
		 */
		entity_watchlist_screenings: Array<EntityWatchlistScreening>;

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Paginated list of entity watchlist screenings */
	export interface WatchlistScreeningEntityHistoryListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityHistoryListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityHistoryListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing hits for an entity watchlist screening */
	export interface WatchlistScreeningEntityHitListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for listing hits for an entity watchlist screening */
	export interface WatchlistScreeningEntityHitListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityHitListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityHitListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Paginated list of entity watchlist screening hits */
	export interface WatchlistScreeningEntityHitListResponse {

		/**
		 * List of entity watchlist screening hits
		 * Required
		 */
		entity_watchlist_screening_hits: Array<EntityWatchlistScreeningHit>;

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Paginated list of entity watchlist screening hits */
	export interface WatchlistScreeningEntityHitListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityHitListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityHitListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing entity watchlist screenings */
	export interface WatchlistScreeningEntityListRequest {

		/** ID of the associated user. */
		assignee?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status?: EntityWatchlistScreeningStatus | null;
	}

	/** Request input for listing entity watchlist screenings */
	export interface WatchlistScreeningEntityListRequestFormProperties {

		/** ID of the associated user. */
		assignee: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityListRequestFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			cursor: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined),
		});

	}


	/** Paginated list of entity watchlist screenings */
	export interface WatchlistScreeningEntityListResponse {

		/**
		 * List of entity watchlist screening
		 * Required
		 */
		entity_watchlist_screenings: Array<EntityWatchlistScreening>;

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Paginated list of entity watchlist screenings */
	export interface WatchlistScreeningEntityListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for fetching an entity watchlist program */
	export interface WatchlistScreeningEntityProgramGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for fetching an entity watchlist program */
	export interface WatchlistScreeningEntityProgramGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		entity_watchlist_program_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityProgramGetRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityProgramGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities. */
	export interface WatchlistScreeningEntityProgramGetResponse {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		id: string;

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: boolean;

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: boolean;

		/**
		 * Watchlists enabled for the associated program
		 * Required
		 */
		lists_enabled: Array<EntityWatchlistCode>;

		/**
		 * A name for the entity program to define its purpose. For example, "High Risk Organizations" or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: EntityWatchlistProgramName_sensitivity;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities. */
	export interface WatchlistScreeningEntityProgramGetResponseFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated entity program.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: FormControl<boolean | null | undefined>,

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: FormControl<boolean | null | undefined>,

		/**
		 * A name for the entity program to define its purpose. For example, "High Risk Organizations" or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityProgramGetResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityProgramGetResponseFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			is_rescanning_enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			name_sensitivity: new FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing entity watchlist screening programs */
	export interface WatchlistScreeningEntityProgramListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for listing entity watchlist screening programs */
	export interface WatchlistScreeningEntityProgramListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityProgramListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityProgramListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Paginated list of entity watchlist screening programs */
	export interface WatchlistScreeningEntityProgramListResponse {

		/**
		 * List of entity watchlist screening programs
		 * Required
		 */
		entity_watchlist_programs: Array<EntityWatchlistProgram>;

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Paginated list of entity watchlist screening programs */
	export interface WatchlistScreeningEntityProgramListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityProgramListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityProgramListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for creating a review for an entity screening */
	export interface WatchlistScreeningEntityReviewCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Min length: 1
		 */
		comment?: string | null;

		/**
		 * Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
		 * Required
		 */
		confirmed_hits: Array<string>;

		/**
		 * Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
		 * Required
		 */
		dismissed_hits: Array<string>;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for creating a review for an entity screening */
	export interface WatchlistScreeningEntityReviewCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Min length: 1
		 */
		comment: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityReviewCreateRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityReviewCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			comment: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			entity_watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**
	 * A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface WatchlistScreeningEntityReviewCreateResponse {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: string;

		/**
		 * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
		 * Required
		 */
		confirmed_hits: Array<string>;

		/**
		 * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
		 * Required
		 */
		dismissed_hits: Array<string>;

		/**
		 * ID of the associated entity review.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/**
	 * A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface WatchlistScreeningEntityReviewCreateResponseFormProperties {

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity review.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityReviewCreateResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityReviewCreateResponseFormProperties>({
			comment: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing reviews for an entity watchlist screening */
	export interface WatchlistScreeningEntityReviewListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for listing reviews for an entity watchlist screening */
	export interface WatchlistScreeningEntityReviewListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityReviewListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityReviewListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			entity_watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Paginated list of entity watchlist screening reviews */
	export interface WatchlistScreeningEntityReviewListResponse {

		/**
		 * List of entity watchlist screening reviews
		 * Required
		 */
		entity_watchlist_screening_reviews: Array<EntityWatchlistScreeningReview>;

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** Paginated list of entity watchlist screening reviews */
	export interface WatchlistScreeningEntityReviewListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityReviewListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityReviewListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for editing an entity watchlist screening */
	export interface WatchlistScreeningEntityUpdateRequest {

		/** ID of the associated user. */
		assignee?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id?: string | null;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: string;

		/** A list of fields to reset back to null */
		reset_fields?: Array<WatchlistScreeningEntityUpdateRequestResettableField>;

		/** Search terms for editing an entity watchlist screening */
		search_terms?: UpdateEntityScreeningRequestSearchTerms;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status?: EntityWatchlistScreeningStatus | null;
	}

	/** Request input for editing an entity watchlist screening */
	export interface WatchlistScreeningEntityUpdateRequestFormProperties {

		/** ID of the associated user. */
		assignee: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		entity_watchlist_screening_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityUpdateRequestFormGroup() {
		return new FormGroup<WatchlistScreeningEntityUpdateRequestFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			entity_watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined),
		});

	}


	/** The name of a field that can be reset back to null */
	export enum WatchlistScreeningEntityUpdateRequestResettableField { assignee = 'assignee' }


	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface WatchlistScreeningEntityUpdateResponse {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Search terms associated with an entity used for searching against watchlists
		 * Required
		 */
		search_terms: EntityWatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
	export interface WatchlistScreeningEntityUpdateResponseFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated entity screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningEntityUpdateResponseFormGroup() {
		return new FormGroup<WatchlistScreeningEntityUpdateResponseFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data from a government watchlist or PEP list that has been attached to the screening. */
	export interface WatchlistScreeningHit {

		/** Analysis information describing why a screening hit matched the provided user information */
		analysis?: ScreeningHitAnalysis;

		/** Information associated with the watchlist hit */
		data?: ScreeningHitData;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		first_active: Date;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		historical_since: Date;

		/**
		 * ID of the associated screening hit.
		 * Required
		 */
		id: string;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		inactive_since: Date;

		/**
		 * Shorthand identifier for a specific screening list for individuals.
		 * Required
		 */
		list_code: IndividualWatchlistCode;

		/**
		 * A universal identifier for a watchlist individual that is stable across searches and updates.
		 * Required
		 */
		plaid_uid: string;

		/**
		 * The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted.
		 * Required
		 */
		review_status: EntityWatchlistScreeningHitReview_status;

		/**
		 * The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
		 * Required
		 * Min length: 1
		 */
		source_uid: string;
	}

	/** Data from a government watchlist or PEP list that has been attached to the screening. */
	export interface WatchlistScreeningHitFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		first_active: FormControl<Date | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		historical_since: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated screening hit.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		inactive_since: FormControl<Date | null | undefined>,

		/**
		 * Shorthand identifier for a specific screening list for individuals.
		 * Required
		 */
		list_code: FormControl<IndividualWatchlistCode | null | undefined>,

		/**
		 * A universal identifier for a watchlist individual that is stable across searches and updates.
		 * Required
		 */
		plaid_uid: FormControl<string | null | undefined>,

		/**
		 * The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted.
		 * Required
		 */
		review_status: FormControl<EntityWatchlistScreeningHitReview_status | null | undefined>,

		/**
		 * The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
		 * Required
		 * Min length: 1
		 */
		source_uid: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningHitFormGroup() {
		return new FormGroup<WatchlistScreeningHitFormProperties>({
			first_active: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			historical_since: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inactive_since: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			list_code: new FormControl<IndividualWatchlistCode | null | undefined>(undefined, [Validators.required]),
			plaid_uid: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			review_status: new FormControl<EntityWatchlistScreeningHitReview_status | null | undefined>(undefined, [Validators.required]),
			source_uid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
		});

	}


	/** The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted. */
	export enum WatchlistScreeningHitStatus { confirmed = 'confirmed', pending_review = 'pending_review', dismissed = 'dismissed' }


	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividual {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: string;

		/**
		 * Search terms for creating an individual watchlist screening
		 * Required
		 */
		search_terms: WatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividualFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Search terms for creating an individual watchlist screening */
	export interface WatchlistScreeningSearchTerms {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: string;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		date_of_birth: Date;

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		document_number: string;

		/**
		 * The legal name of the individual being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: string;

		/**
		 * The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
		 * Required
		 * Type: double
		 */
		version: number;

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: string;
	}

	/** Search terms for creating an individual watchlist screening */
	export interface WatchlistScreeningSearchTermsFormProperties {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Required
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Required
		 * Type: DateOnly
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Required
		 * Min length: 4
		 */
		document_number: FormControl<string | null | undefined>,

		/**
		 * The legal name of the individual being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: FormControl<string | null | undefined>,

		/**
		 * The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
		 * Required
		 * Type: double
		 */
		version: FormControl<number | null | undefined>,

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningSearchTermsFormGroup() {
		return new FormGroup<WatchlistScreeningSearchTermsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(2)]),
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			document_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4)]),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for creating an individual watchlist screening */
	export interface WatchlistScreeningIndividualCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id?: string | null;

		/**
		 * Search inputs for creating a watchlist screening
		 * Required
		 */
		search_terms: WatchlistScreeningRequestSearchTerms;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for creating an individual watchlist screening */
	export interface WatchlistScreeningIndividualCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualCreateRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Search inputs for creating a watchlist screening */
	export interface WatchlistScreeningRequestSearchTerms {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country?: string | null;

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Type: DateOnly
		 */
		date_of_birth?: Date | null;

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number?: string | null;

		/**
		 * The legal name of the individual being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: string;

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: string;
	}

	/** Search inputs for creating a watchlist screening */
	export interface WatchlistScreeningRequestSearchTermsFormProperties {

		/**
		 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
		 * Min length: 2
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
		 * Type: DateOnly
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The numeric or alphanumeric identifier associated with this document.
		 * Min length: 4
		 */
		document_number: FormControl<string | null | undefined>,

		/**
		 * The legal name of the individual being screened.
		 * Required
		 * Min length: 1
		 */
		legal_name: FormControl<string | null | undefined>,

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningRequestSearchTermsFormGroup() {
		return new FormGroup<WatchlistScreeningRequestSearchTermsFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2)]),
			date_of_birth: new FormControl<Date | null | undefined>(undefined),
			document_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(4)]),
			legal_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividualCreateResponse {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Search terms for creating an individual watchlist screening
		 * Required
		 */
		search_terms: WatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividualCreateResponseFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualCreateResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualCreateResponseFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for fetching an individual watchlist screening */
	export interface WatchlistScreeningIndividualGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** Request input for fetching an individual watchlist screening */
	export interface WatchlistScreeningIndividualGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualGetRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividualGetResponse {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Search terms for creating an individual watchlist screening
		 * Required
		 */
		search_terms: WatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividualGetResponseFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualGetResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualGetResponseFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing changes to watchlist screenings for individuals */
	export interface WatchlistScreeningIndividualHistoryListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** Request input for listing changes to watchlist screenings for individuals */
	export interface WatchlistScreeningIndividualHistoryListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualHistoryListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualHistoryListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Paginated list of individual watchlist screenings. */
	export interface WatchlistScreeningIndividualHistoryListResponse {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * List of individual watchlist screenings
		 * Required
		 */
		watchlist_screenings: Array<WatchlistScreeningIndividual>;
	}

	/** Paginated list of individual watchlist screenings. */
	export interface WatchlistScreeningIndividualHistoryListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualHistoryListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualHistoryListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing hits for an individual watchlist screening */
	export interface WatchlistScreeningIndividualHitListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** Request input for listing hits for an individual watchlist screening */
	export interface WatchlistScreeningIndividualHitListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualHitListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualHitListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Paginated list of individual watchlist screening hits */
	export interface WatchlistScreeningIndividualHitListResponse {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * List of individual watchlist screening hits
		 * Required
		 */
		watchlist_screening_hits: Array<WatchlistScreeningHit>;
	}

	/** Paginated list of individual watchlist screening hits */
	export interface WatchlistScreeningIndividualHitListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualHitListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualHitListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listinging watchlist screenings for individuals */
	export interface WatchlistScreeningIndividualListRequest {

		/** ID of the associated user. */
		assignee?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status?: EntityWatchlistScreeningStatus | null;

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: string;
	}

	/** Request input for listinging watchlist screenings for individuals */
	export interface WatchlistScreeningIndividualListRequestFormProperties {

		/** ID of the associated user. */
		assignee: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualListRequestFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined),
			watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Paginated list of individual watchlist screenings. */
	export interface WatchlistScreeningIndividualListResponse {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * List of individual watchlist screenings
		 * Required
		 */
		watchlist_screenings: Array<WatchlistScreeningIndividual>;
	}

	/** Paginated list of individual watchlist screenings. */
	export interface WatchlistScreeningIndividualListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for fetching an individual watchlist program */
	export interface WatchlistScreeningIndividualProgramGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: string;
	}

	/** Request input for fetching an individual watchlist program */
	export interface WatchlistScreeningIndividualProgramGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated program.
		 * Required
		 */
		watchlist_program_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualProgramGetRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualProgramGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			watchlist_program_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals. */
	export interface WatchlistScreeningIndividualProgramGetResponse {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: Date;

		/**
		 * ID of the associated program.
		 * Required
		 */
		id: string;

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: boolean;

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: boolean;

		/**
		 * Watchlists enabled for the associated program
		 * Required
		 */
		lists_enabled: Array<IndividualWatchlistCode>;

		/**
		 * A name for the program to define its purpose. For example, "High Risk Individuals", "US Cardholders", or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: string;

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: EntityWatchlistProgramName_sensitivity;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals. */
	export interface WatchlistScreeningIndividualProgramGetResponseFormProperties {

		/**
		 * An ISO8601 formatted timestamp.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * ID of the associated program.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
		 * Required
		 */
		is_archived: FormControl<boolean | null | undefined>,

		/**
		 * Indicator specifying whether the program is enabled and will perform daily rescans.
		 * Required
		 */
		is_rescanning_enabled: FormControl<boolean | null | undefined>,

		/**
		 * A name for the program to define its purpose. For example, "High Risk Individuals", "US Cardholders", or "Applicants".
		 * Required
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
		 * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
		 * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
		 * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
		 * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
		 * Required
		 */
		name_sensitivity: FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualProgramGetResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualProgramGetResponseFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			is_archived: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			is_rescanning_enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			name_sensitivity: new FormControl<EntityWatchlistProgramName_sensitivity | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing watchlist screening programs for individuals */
	export interface WatchlistScreeningIndividualProgramListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** Request input for listing watchlist screening programs for individuals */
	export interface WatchlistScreeningIndividualProgramListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualProgramListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualProgramListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Paginated list of individual watchlist screening programs */
	export interface WatchlistScreeningIndividualProgramListResponse {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * List of individual watchlist screening programs
		 * Required
		 */
		watchlist_programs: Array<IndividualWatchlistProgram>;
	}

	/** Paginated list of individual watchlist screening programs */
	export interface WatchlistScreeningIndividualProgramListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualProgramListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualProgramListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for creating a screening review */
	export interface WatchlistScreeningIndividualReviewCreateRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Min length: 1
		 */
		comment?: string | null;

		/**
		 * Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
		 * Required
		 */
		confirmed_hits: Array<string>;

		/**
		 * Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
		 * Required
		 */
		dismissed_hits: Array<string>;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** Request input for creating a screening review */
	export interface WatchlistScreeningIndividualReviewCreateRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Min length: 1
		 */
		comment: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualReviewCreateRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualReviewCreateRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			comment: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface WatchlistScreeningIndividualReviewCreateResponse {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: string;

		/**
		 * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
		 * Required
		 */
		confirmed_hits: Array<string>;

		/**
		 * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
		 * Required
		 */
		dismissed_hits: Array<string>;

		/**
		 * ID of the associated review.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/**
	 * A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface WatchlistScreeningIndividualReviewCreateResponseFormProperties {

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: FormControl<string | null | undefined>,

		/**
		 * ID of the associated review.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualReviewCreateResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualReviewCreateResponseFormProperties>({
			comment: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for listing reviews for an individual watchlist screening */
	export interface WatchlistScreeningIndividualReviewListRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/** An identifier that determines which page of results you receive. */
		cursor?: string | null;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** Request input for listing reviews for an individual watchlist screening */
	export interface WatchlistScreeningIndividualReviewListRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/** An identifier that determines which page of results you receive. */
		cursor: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualReviewListRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualReviewListRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			cursor: new FormControl<string | null | undefined>(undefined),
			secret: new FormControl<string | null | undefined>(undefined),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Paginated list of screening reviews */
	export interface WatchlistScreeningIndividualReviewListResponse {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * List of screening reviews
		 * Required
		 */
		watchlist_screening_reviews: Array<WatchlistScreeningReview>;
	}

	/** Paginated list of screening reviews */
	export interface WatchlistScreeningIndividualReviewListResponseFormProperties {

		/**
		 * An identifier that determines which page of results you receive.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualReviewListResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualReviewListResponseFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/**
	 * A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface WatchlistScreeningReview {

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: string;

		/**
		 * Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
		 * Required
		 */
		confirmed_hits: Array<string>;

		/**
		 * Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
		 * Required
		 */
		dismissed_hits: Array<string>;

		/**
		 * ID of the associated review.
		 * Required
		 */
		id: string;
	}

	/**
	 * A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
	 * against hits attached to the watchlist screening, or both.
	 */
	export interface WatchlistScreeningReviewFormProperties {

		/**
		 * A comment submitted by a team member as part of reviewing a watchlist screening.
		 * Required
		 * Min length: 1
		 */
		comment: FormControl<string | null | undefined>,

		/**
		 * ID of the associated review.
		 * Required
		 */
		id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningReviewFormGroup() {
		return new FormGroup<WatchlistScreeningReviewFormProperties>({
			comment: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Request input for editing an individual watchlist screening */
	export interface WatchlistScreeningIndividualUpdateRequest {

		/** ID of the associated user. */
		assignee?: string | null;

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id?: string | null;

		/** A list of fields to reset back to null */
		reset_fields?: Array<WatchlistScreeningIndividualUpdateRequestResettableField>;

		/** Search terms for editing an individual watchlist screening */
		search_terms?: UpdateIndividualScreeningRequestSearchTerms;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status?: EntityWatchlistScreeningStatus | null;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: string;
	}

	/** Request input for editing an individual watchlist screening */
	export interface WatchlistScreeningIndividualUpdateRequestFormProperties {

		/** ID of the associated user. */
		assignee: FormControl<string | null | undefined>,

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,

		/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		watchlist_screening_id: FormControl<string | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualUpdateRequestFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualUpdateRequestFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined),
			client_id: new FormControl<string | null | undefined>(undefined),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1)]),
			secret: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined),
			watchlist_screening_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The name of a field that can be reset back to null */
	export enum WatchlistScreeningIndividualUpdateRequestResettableField { assignee = 'assignee' }


	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividualUpdateResponse {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: string;

		/**
		 * Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
		 * Required
		 */
		audit_trail: WatchlistScreeningAuditTrail;

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: string;

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: string;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;

		/**
		 * Search terms for creating an individual watchlist screening
		 * Required
		 */
		search_terms: WatchlistScreeningSearchTerms;

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: EntityWatchlistScreeningStatus;
	}

	/** The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
	export interface WatchlistScreeningIndividualUpdateResponseFormProperties {

		/**
		 * ID of the associated user.
		 * Required
		 */
		assignee: FormControl<string | null | undefined>,

		/**
		 * An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
		 * Required
		 * Min length: 1
		 */
		client_user_id: FormControl<string | null | undefined>,

		/**
		 * ID of the associated screening.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,

		/**
		 * A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
		 * Required
		 */
		status: FormControl<EntityWatchlistScreeningStatus | null | undefined>,
	}
	export function CreateWatchlistScreeningIndividualUpdateResponseFormGroup() {
		return new FormGroup<WatchlistScreeningIndividualUpdateResponseFormProperties>({
			assignee: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			client_user_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1)]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<EntityWatchlistScreeningStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared. */
	export enum WatchlistScreeningStatus { rejected = 'rejected', pending_review = 'pending_review', cleared = 'cleared' }


	/** Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`. */
	export enum WeakAliasDetermination { none = 'none', source = 'source', plaid = 'plaid' }


	/** The Plaid environment the webhook was sent from */
	export enum WebhookEnvironmentValues { development = 'development', sandbox = 'sandbox', production = 'production' }


	/** The webhook types that can be fired by this test endpoint. */
	export enum WebhookType { AUTH = 'AUTH', HOLDINGS = 'HOLDINGS', INVESTMENTS_TRANSACTIONS = 'INVESTMENTS_TRANSACTIONS', ITEM = 'ITEM', LIABILITIES = 'LIABILITIES', TRANSACTIONS = 'TRANSACTIONS' }


	/** Fired when an Item's webhook is updated. This will be sent to the newly specified webhook. */
	export interface WebhookUpdateAcknowledgedWebhook {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: AssetsErrorWebhookEnvironment;

		/** We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead. */
		error?: PlaidError;

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: string;

		/**
		 * The new webhook URL
		 * Required
		 */
		new_webhook_url: string;

		/**
		 * `WEBHOOK_UPDATE_ACKNOWLEDGED`
		 * Required
		 */
		webhook_code: string;

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: string;
	}

	/** Fired when an Item's webhook is updated. This will be sent to the newly specified webhook. */
	export interface WebhookUpdateAcknowledgedWebhookFormProperties {

		/**
		 * The Plaid environment the webhook was sent from
		 * Required
		 */
		environment: FormControl<AssetsErrorWebhookEnvironment | null | undefined>,

		/**
		 * The `item_id` of the Item associated with this webhook, warning, or error
		 * Required
		 */
		item_id: FormControl<string | null | undefined>,

		/**
		 * The new webhook URL
		 * Required
		 */
		new_webhook_url: FormControl<string | null | undefined>,

		/**
		 * `WEBHOOK_UPDATE_ACKNOWLEDGED`
		 * Required
		 */
		webhook_code: FormControl<string | null | undefined>,

		/**
		 * `ITEM`
		 * Required
		 */
		webhook_type: FormControl<string | null | undefined>,
	}
	export function CreateWebhookUpdateAcknowledgedWebhookFormGroup() {
		return new FormGroup<WebhookUpdateAcknowledgedWebhookFormProperties>({
			environment: new FormControl<AssetsErrorWebhookEnvironment | null | undefined>(undefined, [Validators.required]),
			item_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			new_webhook_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webhook_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** WebhookVerificationKeyGetRequest defines the request schema for `/webhook_verification_key/get` */
	export interface WebhookVerificationKeyGetRequest {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id?: string | null;

		/**
		 * The key ID ( `kid` ) from the JWT header.
		 * Required
		 */
		key_id: string;

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret?: string | null;
	}

	/** WebhookVerificationKeyGetRequest defines the request schema for `/webhook_verification_key/get` */
	export interface WebhookVerificationKeyGetRequestFormProperties {

		/** Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body. */
		client_id: FormControl<string | null | undefined>,

		/**
		 * The key ID ( `kid` ) from the JWT header.
		 * Required
		 */
		key_id: FormControl<string | null | undefined>,

		/** Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body. */
		secret: FormControl<string | null | undefined>,
	}
	export function CreateWebhookVerificationKeyGetRequestFormGroup() {
		return new FormGroup<WebhookVerificationKeyGetRequestFormProperties>({
			client_id: new FormControl<string | null | undefined>(undefined),
			key_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			secret: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** WebhookVerificationKeyGetResponse defines the response schema for `/webhook_verification_key/get` */
	export interface WebhookVerificationKeyGetResponse {

		/**
		 * A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks
		 * Required
		 */
		key: JWKPublicKey;

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: string;
	}

	/** WebhookVerificationKeyGetResponse defines the response schema for `/webhook_verification_key/get` */
	export interface WebhookVerificationKeyGetResponseFormProperties {

		/**
		 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
		 * Required
		 */
		request_id: FormControl<string | null | undefined>,
	}
	export function CreateWebhookVerificationKeyGetResponseFormGroup() {
		return new FormGroup<WebhookVerificationKeyGetResponseFormProperties>({
			request_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Year-to-date pre-tax earnings, as reported on the paystub. */
	export interface YTDGrossIncomeSummaryFieldNumber extends IncomeSummaryFieldNumber {
	}

	/** Year-to-date pre-tax earnings, as reported on the paystub. */
	export interface YTDGrossIncomeSummaryFieldNumberFormProperties extends IncomeSummaryFieldNumberFormProperties {
	}
	export function CreateYTDGrossIncomeSummaryFieldNumberFormGroup() {
		return new FormGroup<YTDGrossIncomeSummaryFieldNumberFormProperties>({
			value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Year-to-date earnings after any tax withholdings, benefit payments or deductions, as reported on the paystub. */
	export interface YTDNetIncomeSummaryFieldNumber extends IncomeSummaryFieldNumber {
	}

	/** Year-to-date earnings after any tax withholdings, benefit payments or deductions, as reported on the paystub. */
	export interface YTDNetIncomeSummaryFieldNumberFormProperties extends IncomeSummaryFieldNumberFormProperties {
	}
	export function CreateYTDNetIncomeSummaryFieldNumberFormGroup() {
		return new FormGroup<YTDNetIncomeSummaryFieldNumberFormProperties>({
			value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<PayFrequencyVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Retrieve real-time balance data
		 * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaidâ€™s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
		 * Post accounts/balance/get
		 * @return {AccountsGetResponse} OK
		 */
		AccountsBalanceGet(requestBody: AccountsBalanceGetRequest): Observable<AccountsGetResponse> {
			return this.http.post<AccountsGetResponse>(this.baseUri + 'accounts/balance/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve accounts
		 * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts â€” that is, accounts that are not closed and are capable of carrying a balance.
		 * For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.
		 * This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
		 * Post accounts/get
		 * @return {AccountsGetResponse} success
		 */
		AccountsGet(requestBody: AccountsGetRequest): Observable<AccountsGetResponse> {
			return this.http.post<AccountsGetResponse>(this.baseUri + 'accounts/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve information about a Plaid application
		 * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
		 * Post application/get
		 * @return {ApplicationGetResponse} success
		 */
		ApplicationGet(requestBody: ApplicationGetRequest): Observable<ApplicationGetResponse> {
			return this.http.post<ApplicationGetResponse>(this.baseUri + 'application/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create Asset Report Audit Copy
		 * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certaintyâ„¢ program. An Audit Copy contains the same underlying data as the Asset Report.
		 * To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. Youâ€™ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
		 * Post asset_report/audit_copy/create
		 * @return {AssetReportAuditCopyCreateResponse} OK
		 */
		AssetReportAuditCopyCreate(requestBody: AssetReportAuditCopyCreateRequest): Observable<AssetReportAuditCopyCreateResponse> {
			return this.http.post<AssetReportAuditCopyCreateResponse>(this.baseUri + 'asset_report/audit_copy/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Asset Report Audit Copy
		 * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
		 * Post asset_report/audit_copy/get
		 * @return {AssetReportGetResponse} OK
		 */
		AssetReportAuditCopyGet(requestBody: AssetReportAuditCopyGetRequest): Observable<AssetReportGetResponse> {
			return this.http.post<AssetReportGetResponse>(this.baseUri + 'asset_report/audit_copy/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove Asset Report Audit Copy
		 * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
		 * Post asset_report/audit_copy/remove
		 * @return {AssetReportAuditCopyRemoveResponse} OK
		 */
		AssetReportAuditCopyRemove(requestBody: AssetReportAuditCopyRemoveRequest): Observable<AssetReportAuditCopyRemoveResponse> {
			return this.http.post<AssetReportAuditCopyRemoveResponse>(this.baseUri + 'asset_report/audit_copy/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create an Asset Report
		 * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.
		 * The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).
		 * The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
		 * Post asset_report/create
		 * @return {AssetReportCreateResponse} OK
		 */
		AssetReportCreate(requestBody: AssetReportCreateRequest): Observable<AssetReportCreateResponse> {
			return this.http.post<AssetReportCreateResponse>(this.baseUri + 'asset_report/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Filter Asset Report
		 * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.
		 * To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.
		 * Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.
		 * Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
		 * Post asset_report/filter
		 * @return {AssetReportFilterResponse} OK
		 */
		AssetReportFilter(requestBody: AssetReportFilterRequest): Observable<AssetReportFilterResponse> {
			return this.http.post<AssetReportFilterResponse>(this.baseUri + 'asset_report/filter', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Asset Report
		 * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
		 * By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.
		 * If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts wonâ€™t be included in the report.
		 * To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
		 * Post asset_report/get
		 * @return {AssetReportGetResponse} OK
		 */
		AssetReportGet(requestBody: AssetReportGetRequest): Observable<AssetReportGetResponse> {
			return this.http.post<AssetReportGetResponse>(this.baseUri + 'asset_report/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a PDF Asset Report
		 * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
		 * The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.
		 * If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts wonâ€™t be included in the report.
		 * [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
		 * Post asset_report/pdf/get
		 * @return {void} A PDF of the Asset Report
		 */
		AssetReportPdfGet(requestBody: AssetReportPDFGetRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'asset_report/pdf/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Refresh an Asset Report
		 * An Asset Report is an immutable snapshot of a user's assets. In order to "refresh" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.
		 * The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string ("") for any previously-populated fields you would like set as empty.
		 * Post asset_report/refresh
		 * @return {AssetReportRefreshResponse} OK
		 */
		AssetReportRefresh(requestBody: AssetReportRefreshRequest): Observable<AssetReportRefreshResponse> {
			return this.http.post<AssetReportRefreshResponse>(this.baseUri + 'asset_report/refresh', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete an Asset Report
		 * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.
		 * The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
		 * Post asset_report/remove
		 * @return {AssetReportRemoveResponse} OK
		 */
		AssetReportRemove(requestBody: AssetReportRemoveRequest): Observable<AssetReportRemoveResponse> {
			return this.http.post<AssetReportRemoveResponse>(this.baseUri + 'asset_report/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve auth data
		 * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.
		 * Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
		 * Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
		 * Post auth/get
		 * @return {AuthGetResponse} success
		 */
		AuthGet(requestBody: AuthGetRequest): Observable<AuthGetResponse> {
			return this.http.post<AuthGetResponse>(this.baseUri + 'auth/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get balance of your Bank Transfer account
		 * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.
		 * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
		 * Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
		 * Post bank_transfer/balance/get
		 * @return {BankTransferBalanceGetResponse} OK
		 */
		BankTransferBalanceGet(requestBody: BankTransferBalanceGetRequest): Observable<BankTransferBalanceGetResponse> {
			return this.http.post<BankTransferBalanceGetResponse>(this.baseUri + 'bank_transfer/balance/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Cancel a bank transfer
		 * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
		 * Post bank_transfer/cancel
		 * @return {BankTransferCancelResponse} OK
		 */
		BankTransferCancel(requestBody: BankTransferCancelRequest): Observable<BankTransferCancelResponse> {
			return this.http.post<BankTransferCancelResponse>(this.baseUri + 'bank_transfer/cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a bank transfer
		 * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
		 * Post bank_transfer/create
		 * @return {BankTransferCreateResponse} OK
		 */
		BankTransferCreate(requestBody: BankTransferCreateRequest): Observable<BankTransferCreateResponse> {
			return this.http.post<BankTransferCreateResponse>(this.baseUri + 'bank_transfer/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List bank transfer events
		 * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
		 * Post bank_transfer/event/list
		 * @return {BankTransferEventListResponse} OK
		 */
		BankTransferEventList(requestBody: BankTransferEventListRequest): Observable<BankTransferEventListResponse> {
			return this.http.post<BankTransferEventListResponse>(this.baseUri + 'bank_transfer/event/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sync bank transfer events
		 * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
		 * Post bank_transfer/event/sync
		 * @return {BankTransferEventSyncResponse} OK
		 */
		BankTransferEventSync(requestBody: BankTransferEventSyncRequest): Observable<BankTransferEventSyncResponse> {
			return this.http.post<BankTransferEventSyncResponse>(this.baseUri + 'bank_transfer/event/sync', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a bank transfer
		 * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
		 * Post bank_transfer/get
		 * @return {BankTransferGetResponse} OK
		 */
		BankTransferGet(requestBody: BankTransferGetRequest): Observable<BankTransferGetResponse> {
			return this.http.post<BankTransferGetResponse>(this.baseUri + 'bank_transfer/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List bank transfers
		 * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
		 * Post bank_transfer/list
		 * @return {BankTransferListResponse} OK
		 */
		BankTransferList(requestBody: BankTransferListRequest): Observable<BankTransferListResponse> {
			return this.http.post<BankTransferListResponse>(this.baseUri + 'bank_transfer/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Migrate account into Bank Transfers
		 * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
		 * Post bank_transfer/migrate_account
		 * @return {BankTransferMigrateAccountResponse} OK
		 */
		BankTransferMigrateAccount(requestBody: BankTransferMigrateAccountRequest): Observable<BankTransferMigrateAccountResponse> {
			return this.http.post<BankTransferMigrateAccountResponse>(this.baseUri + 'bank_transfer/migrate_account', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a sweep
		 * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
		 * Post bank_transfer/sweep/get
		 * @return {BankTransferSweepGetResponse} OK
		 */
		BankTransferSweepGet(requestBody: BankTransferSweepGetRequest): Observable<BankTransferSweepGetResponse> {
			return this.http.post<BankTransferSweepGetResponse>(this.baseUri + 'bank_transfer/sweep/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List sweeps
		 * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
		 * Post bank_transfer/sweep/list
		 * @return {BankTransferSweepListResponse} OK
		 */
		BankTransferSweepList(requestBody: BankTransferSweepListRequest): Observable<BankTransferSweepListResponse> {
			return this.http.post<BankTransferSweepListResponse>(this.baseUri + 'bank_transfer/sweep/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve information from the bank accounts used for employment verification
		 * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
		 * Post beta/credit/v1/bank_employment/get
		 * @return {CreditBankEmploymentGetResponse} OK
		 */
		CreditBankEmploymentGet(requestBody: CreditBankEmploymentGetRequest): Observable<CreditBankEmploymentGetResponse> {
			return this.http.post<CreditBankEmploymentGetResponse>(this.baseUri + 'beta/credit/v1/bank_employment/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create transaction category rule
		 * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.
		 * Rules will be applied on the Item's transactions returned in `/transactions/get` response.
		 * The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
		 * Post beta/transactions/rules/v1/create
		 * @return {TransactionsRulesCreateResponse} OK
		 */
		TransactionsRulesCreate(requestBody: TransactionsRulesCreateRequest): Observable<TransactionsRulesCreateResponse> {
			return this.http.post<TransactionsRulesCreateResponse>(this.baseUri + 'beta/transactions/rules/v1/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Return a list of rules created for the Item associated with the access token.
		 * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
		 * Post beta/transactions/rules/v1/list
		 * @return {TransactionsRulesListResponse} OK
		 */
		TransactionsRulesList(requestBody: TransactionsRulesListRequest): Observable<TransactionsRulesListResponse> {
			return this.http.post<TransactionsRulesListResponse>(this.baseUri + 'beta/transactions/rules/v1/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove transaction rule
		 * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
		 * Post beta/transactions/rules/v1/remove
		 * @return {TransactionsRulesRemoveResponse} OK
		 */
		TransactionsRulesRemove(requestBody: TransactionsRulesRemoveRequest): Observable<TransactionsRulesRemoveResponse> {
			return this.http.post<TransactionsRulesRemoveResponse>(this.baseUri + 'beta/transactions/rules/v1/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * enhance locally-held transaction data
		 * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.
		 * The product is currently in beta.
		 * Post beta/transactions/v1/enhance
		 * @return {TransactionsEnhanceGetResponse} OK
		 */
		TransactionsEnhance(requestBody: TransactionsEnhanceGetRequest): Observable<TransactionsEnhanceGetResponse> {
			return this.http.post<TransactionsEnhanceGetResponse>(this.baseUri + 'beta/transactions/v1/enhance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Categories
		 * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
		 * Post categories/get
		 * @return {CategoriesGetResponse} success
		 */
		CategoriesGet(requestBody: CategoriesGetRequest): Observable<CategoriesGetResponse> {
			return this.http.post<CategoriesGetResponse>(this.baseUri + 'categories/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
		 * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format.
		 * Post credit/asset_report/freddie_mac/get
		 * @return {AssetReportFreddieGetResponse} OK
		 */
		CreditAssetReportFreddieMacGet(requestBody: AssetReportFreddieGetRequest): Observable<AssetReportFreddieGetResponse> {
			return this.http.post<AssetReportFreddieGetResponse>(this.baseUri + 'credit/asset_report/freddie_mac/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create Asset or Income Report Audit Copy Token
		 * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certaintyâ„¢ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).
		 * Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
		 * Post credit/audit_copy_token/create
		 * @return {CreditAuditCopyTokenCreateResponse} OK
		 */
		CreditAuditCopyTokenCreate(requestBody: CreditAuditCopyTokenCreateRequest): Observable<CreditAuditCopyTokenCreateResponse> {
			return this.http.post<CreditAuditCopyTokenCreateResponse>(this.baseUri + 'credit/audit_copy_token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove an Audit Copy token
		 * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
		 * Post credit/audit_copy_token/remove
		 * @return {CreditAuditCopyTokenRemoveResponse} OK
		 */
		CreditReportAuditCopyRemove(requestBody: CreditAuditCopyTokenRemoveRequest): Observable<CreditAuditCopyTokenRemoveResponse> {
			return this.http.post<CreditAuditCopyTokenRemoveResponse>(this.baseUri + 'credit/audit_copy_token/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update an Audit Copy Token
		 * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
		 * Post credit/audit_copy_token/update
		 * @return {CreditAuditCopyTokenUpdateResponse} OK
		 */
		CreditAuditCopyTokenUpdate(requestBody: CreditAuditCopyTokenUpdateRequest): Observable<CreditAuditCopyTokenUpdateResponse> {
			return this.http.post<CreditAuditCopyTokenUpdateResponse>(this.baseUri + 'credit/audit_copy_token/update', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve information from the bank accounts used for income verification
		 * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
		 * Post credit/bank_income/get
		 * @return {CreditBankIncomeGetResponse} OK
		 */
		CreditBankIncomeGet(requestBody: CreditBankIncomeGetRequest): Observable<CreditBankIncomeGetResponse> {
			return this.http.post<CreditBankIncomeGetResponse>(this.baseUri + 'credit/bank_income/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve information from the bank accounts used for income verification in PDF format
		 * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
		 * Post credit/bank_income/pdf/get
		 * @return {void} A PDF of the Bank Income Report
		 */
		CreditBankIncomePdfGet(requestBody: CreditBankIncomePDFGetRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'credit/bank_income/pdf/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Refresh a user's bank income information
		 * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
		 * Post credit/bank_income/refresh
		 * @return {CreditBankIncomeRefreshResponse} OK
		 */
		CreditBankIncomeRefresh(requestBody: CreditBankIncomeRefreshRequest): Observable<CreditBankIncomeRefreshResponse> {
			return this.http.post<CreditBankIncomeRefreshResponse>(this.baseUri + 'credit/bank_income/refresh', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a summary of an individual's employment information
		 * `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user.
		 * Post credit/employment/get
		 * @return {CreditEmploymentGetResponse} OK
		 */
		CreditEmploymentGet(requestBody: CreditEmploymentGetRequest): Observable<CreditEmploymentGetResponse> {
			return this.http.post<CreditEmploymentGetResponse>(this.baseUri + 'credit/employment/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
		 * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
		 * Post credit/freddie_mac/reports/get
		 * @return {CreditFreddieMacReportsGetResponse} OK
		 */
		CreditFreddieMacReportsGet(requestBody: CreditFreddieMacReportsGetRequest): Observable<CreditFreddieMacReportsGetResponse> {
			return this.http.post<CreditFreddieMacReportsGetResponse>(this.baseUri + 'credit/freddie_mac/reports/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a user's payroll information
		 * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
		 * Post credit/payroll_income/get
		 * @return {CreditPayrollIncomeGetResponse} OK
		 */
		CreditPayrollIncomeGet(requestBody: CreditPayrollIncomeGetRequest): Observable<CreditPayrollIncomeGetResponse> {
			return this.http.post<CreditPayrollIncomeGetResponse>(this.baseUri + 'credit/payroll_income/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Check income verification eligibility and optimize conversion
		 * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
		 * While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
		 * When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
		 * Post credit/payroll_income/precheck
		 * @return {CreditPayrollIncomePrecheckResponse} OK
		 */
		CreditPayrollIncomePrecheck(requestBody: CreditPayrollIncomePrecheckRequest): Observable<CreditPayrollIncomePrecheckResponse> {
			return this.http.post<CreditPayrollIncomePrecheckResponse>(this.baseUri + 'credit/payroll_income/precheck', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Refresh a digital payroll income verification
		 * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
		 * Post credit/payroll_income/refresh
		 * @return {CreditPayrollIncomeRefreshResponse} success
		 */
		CreditPayrollIncomeRefresh(requestBody: CreditPayrollIncomeRefreshRequest): Observable<CreditPayrollIncomeRefreshResponse> {
			return this.http.post<CreditPayrollIncomeRefreshResponse>(this.baseUri + 'credit/payroll_income/refresh', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a relay token to share an Asset Report with a partner client (beta)
		 * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.
		 * To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
		 * Post credit/relay/create
		 * @return {CreditRelayCreateResponse} OK
		 */
		CreditRelayCreate(requestBody: CreditRelayCreateRequest): Observable<CreditRelayCreateResponse> {
			return this.http.post<CreditRelayCreateResponse>(this.baseUri + 'credit/relay/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve the reports associated with a relay token that was shared with you (beta)
		 * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
		 * Post credit/relay/get
		 * @return {AssetReportGetResponse} OK
		 */
		CreditRelayGet(requestBody: CreditRelayGetRequest): Observable<AssetReportGetResponse> {
			return this.http.post<AssetReportGetResponse>(this.baseUri + 'credit/relay/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Refresh a report of a relay token (beta)
		 * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
		 * Post credit/relay/refresh
		 * @return {CreditRelayRefreshResponse} OK
		 */
		CreditRelayRefresh(requestBody: CreditRelayRefreshRequest): Observable<CreditRelayRefreshResponse> {
			return this.http.post<CreditRelayRefreshResponse>(this.baseUri + 'credit/relay/refresh', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove relay token (beta)
		 * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
		 * Post credit/relay/remove
		 * @return {CreditRelayRemoveResponse} OK
		 */
		CreditRelayRemove(requestBody: CreditRelayRemoveRequest): Observable<CreditRelayRemoveResponse> {
			return this.http.post<CreditRelayRemoveResponse>(this.baseUri + 'credit/relay/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve Link sessions for your user
		 * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.
		 * These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
		 * Post credit/sessions/get
		 * @return {CreditSessionsGetResponse} OK
		 */
		CreditSessionsGet(requestBody: CreditSessionsGetRequest): Observable<CreditSessionsGetResponse> {
			return this.http.post<CreditSessionsGetResponse>(this.baseUri + 'credit/sessions/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a dashboard user
		 * Retrieve information about a dashboard user.
		 * Post dashboard_user/get
		 * @return {DashboardUserGetResponse} OK
		 */
		DashboardUserGet(requestBody: DashboardUserGetRequest): Observable<DashboardUserGetResponse> {
			return this.http.post<DashboardUserGetResponse>(this.baseUri + 'dashboard_user/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List dashboard users
		 * List all dashboard users associated with your account.
		 * Post dashboard_user/list
		 * @return {DashboardUserListResponse} OK
		 */
		DashboardUserList(requestBody: DashboardUserListRequest): Observable<DashboardUserListResponse> {
			return this.http.post<DashboardUserListResponse>(this.baseUri + 'dashboard_user/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a deposit switch without using Plaid Exchange
		 * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
		 * Post deposit_switch/alt/create
		 * @return {DepositSwitchAltCreateResponse} OK
		 */
		DepositSwitchAltCreate(requestBody: DepositSwitchAltCreateRequest): Observable<DepositSwitchAltCreateResponse> {
			return this.http.post<DepositSwitchAltCreateResponse>(this.baseUri + 'deposit_switch/alt/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a deposit switch
		 * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
		 * Post deposit_switch/create
		 * @return {DepositSwitchCreateResponse} OK
		 */
		DepositSwitchCreate(requestBody: DepositSwitchCreateRequest): Observable<DepositSwitchCreateResponse> {
			return this.http.post<DepositSwitchCreateResponse>(this.baseUri + 'deposit_switch/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a deposit switch
		 * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.
		 * Post deposit_switch/get
		 * @return {DepositSwitchGetResponse} OK
		 */
		DepositSwitchGet(requestBody: DepositSwitchGetRequest): Observable<DepositSwitchGetResponse> {
			return this.http.post<DepositSwitchGetResponse>(this.baseUri + 'deposit_switch/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a deposit switch token
		 * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
		 * Post deposit_switch/token/create
		 * @return {DepositSwitchTokenCreateResponse} OK
		 */
		DepositSwitchTokenCreate(requestBody: DepositSwitchTokenCreateRequest): Observable<DepositSwitchTokenCreateResponse> {
			return this.http.post<DepositSwitchTokenCreateResponse>(this.baseUri + 'deposit_switch/token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Search employer database
		 * `/employers/search` allows you the ability to search Plaidâ€™s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.
		 * The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
		 * Post employers/search
		 * @return {EmployersSearchResponse} OK
		 */
		EmployersSearch(requestBody: EmployersSearchRequest): Observable<EmployersSearchResponse> {
			return this.http.post<EmployersSearchResponse>(this.baseUri + 'employers/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * (Deprecated) Retrieve a summary of an individual's employment information
		 * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.
		 * This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
		 * Post employment/verification/get
		 * @return {EmploymentVerificationGetResponse} OK
		 */
		EmploymentVerificationGet(requestBody: EmploymentVerificationGetRequest): Observable<EmploymentVerificationGetResponse> {
			return this.http.post<EmploymentVerificationGetResponse>(this.baseUri + 'employment/verification/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Webhook receiver for fdx notifications
		 * A generic webhook receiver endpoint for FDX Event Notifications
		 * Post fdx/notifications
		 * @return {void} OK
		 */
		FdxNotifications(requestBody: FDXNotification): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'fdx/notifications', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieve identity data
		 * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.
		 * This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
		 * Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
		 * Post identity/get
		 * @return {IdentityGetResponse} OK
		 */
		IdentityGet(requestBody: IdentityGetRequest): Observable<IdentityGetResponse> {
			return this.http.post<IdentityGetResponse>(this.baseUri + 'identity/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve identity match score
		 * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.
		 * This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
		 * Post identity/match
		 * @return {IdentityMatchResponse} OK
		 */
		IdentityMatch(requestBody: IdentityMatchRequest): Observable<IdentityMatchResponse> {
			return this.http.post<IdentityMatchResponse>(this.baseUri + 'identity/match', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a new identity verification
		 * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided.
		 * If you don't know whether the associated user already has an active Identity Verification, you can specify `"is_idempotent": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.
		 * Post identity_verification/create
		 * @return {IdentityVerificationCreateResponse} OK
		 */
		IdentityVerificationCreate(requestBody: IdentityVerificationCreateRequest): Observable<IdentityVerificationCreateResponse> {
			return this.http.post<IdentityVerificationCreateResponse>(this.baseUri + 'identity_verification/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve Identity Verification
		 * Retrieve a previously created identity verification.
		 * Post identity_verification/get
		 * @return {IdentityVerificationGetResponse} OK
		 */
		IdentityVerificationGet(requestBody: IdentityVerificationGetRequest): Observable<IdentityVerificationGetResponse> {
			return this.http.post<IdentityVerificationGetResponse>(this.baseUri + 'identity_verification/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Identity Verifications
		 * Filter and list Identity Verifications created by your account
		 * Post identity_verification/list
		 * @return {IdentityVerificationListResponse} OK
		 */
		IdentityVerificationList(requestBody: IdentityVerificationListRequest): Observable<IdentityVerificationListResponse> {
			return this.http.post<IdentityVerificationListResponse>(this.baseUri + 'identity_verification/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retry an Identity Verification
		 * Allow a customer to retry their identity verification
		 * Post identity_verification/retry
		 * @return {IdentityVerificationRetryResponse} OK
		 */
		IdentityVerificationRetry(requestBody: IdentityVerificationRetryRequest): Observable<IdentityVerificationRetryResponse> {
			return this.http.post<IdentityVerificationRetryResponse>(this.baseUri + 'identity_verification/retry', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * (Deprecated) Create an income verification instance
		 * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
		 * Post income/verification/create
		 * @return {IncomeVerificationCreateResponse} OK
		 */
		IncomeVerificationCreate(requestBody: IncomeVerificationCreateRequest): Observable<IncomeVerificationCreateResponse> {
			return this.http.post<IncomeVerificationCreateResponse>(this.baseUri + 'income/verification/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * (Deprecated) Download the original documents used for income verification
		 * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.
		 * If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available
		 * for download from the payroll provider will be available from this endpoint.
		 * The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file.
		 * If not, the response will contain all documents associated with the verification.
		 * The `request_id` is returned in the `Plaid-Request-ID` header.
		 * Post income/verification/documents/download
		 * @return {void} A ZIP file containing source documents(s) used as the basis for income verification.
		 */
		IncomeVerificationDocumentsDownload(requestBody: IncomeVerificationDocumentsDownloadRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'income/verification/documents/download', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * (Deprecated) Retrieve information from the paystubs used for income verification
		 * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
		 * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
		 * Post income/verification/paystubs/get
		 * @return {IncomeVerificationPaystubsGetResponse} OK
		 */
		IncomeVerificationPaystubsGet(requestBody: IncomeVerificationPaystubsGetRequest): Observable<IncomeVerificationPaystubsGetResponse> {
			return this.http.post<IncomeVerificationPaystubsGetResponse>(this.baseUri + 'income/verification/paystubs/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * (Deprecated) Check digital income verification eligibility and optimize conversion
		 * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
		 * While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.
		 * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
		 * Post income/verification/precheck
		 * @return {IncomeVerificationPrecheckResponse} OK
		 */
		IncomeVerificationPrecheck(requestBody: IncomeVerificationPrecheckRequest): Observable<IncomeVerificationPrecheckResponse> {
			return this.http.post<IncomeVerificationPrecheckResponse>(this.baseUri + 'income/verification/precheck', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * (Deprecated) Retrieve information from the tax documents used for income verification
		 * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
		 * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
		 * Post income/verification/taxforms/get
		 * @return {IncomeVerificationTaxformsGetResponse} OK
		 */
		IncomeVerificationTaxformsGet(requestBody: IncomeVerificationTaxformsGetRequest): Observable<IncomeVerificationTaxformsGetResponse> {
			return this.http.post<IncomeVerificationTaxformsGetResponse>(this.baseUri + 'income/verification/taxforms/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get details of all supported institutions
		 * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.
		 * If there is no overlap between an institutionâ€™s enabled products and a clientâ€™s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
		 * Post institutions/get
		 * @return {InstitutionsGetResponse} OK
		 */
		InstitutionsGet(requestBody: InstitutionsGetRequest): Observable<InstitutionsGetResponse> {
			return this.http.post<InstitutionsGetResponse>(this.baseUri + 'institutions/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get details of an institution
		 * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.
		 * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
		 * Post institutions/get_by_id
		 * @return {InstitutionsGetByIdResponse} OK
		 */
		InstitutionsGetById(requestBody: InstitutionsGetByIdRequest): Observable<InstitutionsGetByIdResponse> {
			return this.http.post<InstitutionsGetByIdResponse>(this.baseUri + 'institutions/get_by_id', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Search institutions
		 * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.
		 * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
		 * Post institutions/search
		 * @return {InstitutionsSearchResponse} OK
		 */
		InstitutionsSearch(requestBody: InstitutionsSearchRequest): Observable<InstitutionsSearchResponse> {
			return this.http.post<InstitutionsSearchResponse>(this.baseUri + 'institutions/search', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Investment holdings
		 * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
		 * Post investments/holdings/get
		 * @return {InvestmentsHoldingsGetResponse} OK
		 */
		InvestmentsHoldingsGet(requestBody: InvestmentsHoldingsGetRequest): Observable<InvestmentsHoldingsGetResponse> {
			return this.http.post<InvestmentsHoldingsGetResponse>(this.baseUri + 'investments/holdings/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get investment transactions
		 * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.
		 * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.
		 * Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
		 * Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
		 * Post investments/transactions/get
		 * @return {InvestmentsTransactionsGetResponse} OK
		 */
		InvestmentsTransactionsGet(requestBody: InvestmentsTransactionsGetRequest): Observable<InvestmentsTransactionsGetResponse> {
			return this.http.post<InvestmentsTransactionsGetResponse>(this.baseUri + 'investments/transactions/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Invalidate access_token
		 * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.
		 * You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
		 * Post item/access_token/invalidate
		 * @return {ItemAccessTokenInvalidateResponse} OK
		 */
		ItemAccessTokenInvalidate(requestBody: ItemAccessTokenInvalidateRequest): Observable<ItemAccessTokenInvalidateResponse> {
			return this.http.post<ItemAccessTokenInvalidateResponse>(this.baseUri + 'item/access_token/invalidate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List a historical log of user consent events
		 * List a historical log of user consent events
		 * Post item/activity/list
		 * @return {ItemActivityListResponse} OK
		 */
		ItemActivityList(requestBody: ItemActivityListRequest): Observable<ItemActivityListResponse> {
			return this.http.post<ItemActivityListResponse>(this.baseUri + 'item/activity/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List a userâ€™s connected applications
		 * List a userâ€™s connected applications
		 * Post item/application/list
		 * @return {ItemApplicationListResponse} OK
		 */
		ItemApplicationList(requestBody: ItemApplicationListRequest): Observable<ItemApplicationListResponse> {
			return this.http.post<ItemApplicationListResponse>(this.baseUri + 'item/application/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update the scopes of access for a particular application
		 * Enable consumers to update product access on selected accounts for an application.
		 * Post item/application/scopes/update
		 * @return {ItemApplicationScopesUpdateResponse} success
		 */
		ItemApplicationScopesUpdate(requestBody: ItemApplicationScopesUpdateRequest): Observable<ItemApplicationScopesUpdateResponse> {
			return this.http.post<ItemApplicationScopesUpdateResponse>(this.baseUri + 'item/application/scopes/update', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Item
		 * Returns information about the status of an Item.
		 * Post item/get
		 * @return {ItemGetResponse} success
		 */
		ItemGet(requestBody: ItemGetRequest): Observable<ItemGetResponse> {
			return this.http.post<ItemGetResponse>(this.baseUri + 'item/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Import Item
		 * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.
		 * Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
		 * Post item/import
		 * @return {ItemImportResponse} OK
		 */
		ItemImport(requestBody: ItemImportRequest): Observable<ItemImportResponse> {
			return this.http.post<ItemImportResponse>(this.baseUri + 'item/import', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create public token
		 * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).
		 * If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.
		 * A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.
		 * The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
		 * Post item/public_token/create
		 * @return {ItemPublicTokenCreateResponse} OK
		 */
		ItemCreatePublicToken(requestBody: ItemPublicTokenCreateRequest): Observable<ItemPublicTokenCreateResponse> {
			return this.http.post<ItemPublicTokenCreateResponse>(this.baseUri + 'item/public_token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Exchange public token for an access token
		 * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.
		 * The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
		 * Post item/public_token/exchange
		 * @return {ItemPublicTokenExchangeResponse} OK
		 */
		ItemPublicTokenExchange(requestBody: ItemPublicTokenExchangeRequest): Observable<ItemPublicTokenExchangeResponse> {
			return this.http.post<ItemPublicTokenExchangeResponse>(this.baseUri + 'item/public_token/exchange', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove an Item
		 * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.
		 * Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.
		 * Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.
		 * API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
		 * Post item/remove
		 * @return {ItemRemoveResponse} success
		 */
		ItemRemove(requestBody: ItemRemoveRequest): Observable<ItemRemoveResponse> {
			return this.http.post<ItemRemoveResponse>(this.baseUri + 'item/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update Webhook URL
		 * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
		 * Post item/webhook/update
		 * @return {ItemWebhookUpdateResponse} OK
		 */
		ItemWebhookUpdate(requestBody: ItemWebhookUpdateRequest): Observable<ItemWebhookUpdateResponse> {
			return this.http.post<ItemWebhookUpdateResponse>(this.baseUri + 'item/webhook/update', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve Liabilities data
		 * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).
		 * The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
		 * Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
		 * Post liabilities/get
		 * @return {LiabilitiesGetResponse} OK
		 */
		LiabilitiesGet(requestBody: LiabilitiesGetRequest): Observable<LiabilitiesGetResponse> {
			return this.http.post<LiabilitiesGetResponse>(this.baseUri + 'liabilities/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Exchange the Link Correlation Id for a Link Token
		 * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for 'payment_initiation' products and is provided to the client via the OAuth `redirect_uri` as a query parameter.
		 * The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the 'link_token'.
		 * Post link/oauth/correlation_id/exchange
		 * @return {LinkOAuthCorrelationIdExchangeResponse} OK
		 */
		LinkOauthCorrelationIdExchange(requestBody: LinkOAuthCorrelationIdExchangeRequest): Observable<LinkOAuthCorrelationIdExchangeResponse> {
			return this.http.post<LinkOAuthCorrelationIdExchangeResponse>(this.baseUri + 'link/oauth/correlation_id/exchange', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create Link Token
		 * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.
		 * A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
		 * Post link/token/create
		 * @return {LinkTokenCreateResponse} OK
		 */
		LinkTokenCreate(requestBody: LinkTokenCreateRequest): Observable<LinkTokenCreateResponse> {
			return this.http.post<LinkTokenCreateResponse>(this.baseUri + 'link/token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Link Token
		 * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the
		 * `/link/token/create` endpoint. It can be useful for debugging purposes.
		 * Post link/token/get
		 * @return {LinkTokenGetResponse} OK
		 */
		LinkTokenGet(requestBody: LinkTokenGetRequest): Observable<LinkTokenGetResponse> {
			return this.http.post<LinkTokenGetResponse>(this.baseUri + 'link/token/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create Link Delivery session
		 * Use the `/link_delivery/create` endpoint to create a Link Delivery session.
		 * Post link_delivery/create
		 * @return {LinkDeliveryCreateResponse} OK
		 */
		LinkDeliveryCreate(requestBody: LinkDeliveryCreateRequest): Observable<LinkDeliveryCreateResponse> {
			return this.http.post<LinkDeliveryCreateResponse>(this.baseUri + 'link_delivery/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get Link Delivery session
		 * Use the `/link_delivery/get` endpoint to get the status of a Link Delivery session.
		 * Post link_delivery/get
		 * @return {LinkDeliveryGetResponse} OK
		 */
		LinkDeliveryGet(requestBody: LinkDeliveryGetRequest): Observable<LinkDeliveryGetResponse> {
			return this.http.post<LinkDeliveryGetResponse>(this.baseUri + 'link_delivery/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a new end customer for a Plaid reseller.
		 * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
		 * Post partner/customer/create
		 * @return {PartnerCustomerCreateResponse} OK
		 */
		PartnerCustomerCreate(requestBody: PartnerCustomerCreateRequest): Observable<PartnerCustomerCreateResponse> {
			return this.http.post<PartnerCustomerCreateResponse>(this.baseUri + 'partner/customer/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Enables a Plaid reseller's end customer in the Production environment.
		 * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
		 * Post partner/customer/enable
		 * @return {PartnerCustomerEnableResponse} OK
		 */
		PartnerCustomerEnable(requestBody: PartnerCustomerEnableRequest): Observable<PartnerCustomerEnableResponse> {
			return this.http.post<PartnerCustomerEnableResponse>(this.baseUri + 'partner/customer/enable', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a Plaid reseller's end customer.
		 * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
		 * Post partner/customer/get
		 * @return {PartnerCustomerGetResponse} OK
		 */
		PartnerCustomerGet(requestBody: PartnerCustomerGetRequest): Observable<PartnerCustomerGetResponse> {
			return this.http.post<PartnerCustomerGetResponse>(this.baseUri + 'partner/customer/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns OAuth-institution registration information for a given end customer.
		 * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
		 * Post partner/customer/oauth_institutions/get
		 * @return {PartnerCustomerOAuthInstitutionsGetResponse} OK
		 */
		PartnerCustomerOauthInstitutionsGet(requestBody: PartnerCustomerOAuthInstitutionsGetRequest): Observable<PartnerCustomerOAuthInstitutionsGetResponse> {
			return this.http.post<PartnerCustomerOAuthInstitutionsGetResponse>(this.baseUri + 'partner/customer/oauth_institutions/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes a Plaid reseller's end customer.
		 * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
		 * Post partner/customer/remove
		 * @return {PartnerCustomerRemoveResponse} OK
		 */
		PartnerCustomerRemove(requestBody: PartnerCustomerRemoveRequest): Observable<PartnerCustomerRemoveResponse> {
			return this.http.post<PartnerCustomerRemoveResponse>(this.baseUri + 'partner/customer/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create payment consent
		 * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.
		 * Consents can be limited in time and scope, and have constraints that describe limitations for payments.
		 * Post payment_initiation/consent/create
		 * @return {PaymentInitiationConsentCreateResponse} OK
		 */
		PaymentInitiationConsentCreate(requestBody: PaymentInitiationConsentCreateRequest): Observable<PaymentInitiationConsentCreateResponse> {
			return this.http.post<PaymentInitiationConsentCreateResponse>(this.baseUri + 'payment_initiation/consent/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get payment consent
		 * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
		 * Post payment_initiation/consent/get
		 * @return {PaymentInitiationConsentGetResponse} OK
		 */
		PaymentInitiationConsentGet(requestBody: PaymentInitiationConsentGetRequest): Observable<PaymentInitiationConsentGetResponse> {
			return this.http.post<PaymentInitiationConsentGetResponse>(this.baseUri + 'payment_initiation/consent/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Execute a single payment using consent
		 * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
		 * Post payment_initiation/consent/payment/execute
		 * @return {PaymentInitiationConsentPaymentExecuteResponse} OK
		 */
		PaymentInitiationConsentPaymentExecute(requestBody: PaymentInitiationConsentPaymentExecuteRequest): Observable<PaymentInitiationConsentPaymentExecuteResponse> {
			return this.http.post<PaymentInitiationConsentPaymentExecuteResponse>(this.baseUri + 'payment_initiation/consent/payment/execute', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Revoke payment consent
		 * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
		 * Post payment_initiation/consent/revoke
		 * @return {PaymentInitiationConsentRevokeResponse} OK
		 */
		PaymentInitiationConsentRevoke(requestBody: PaymentInitiationConsentRevokeRequest): Observable<PaymentInitiationConsentRevokeResponse> {
			return this.http.post<PaymentInitiationConsentRevokeResponse>(this.baseUri + 'payment_initiation/consent/revoke', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a payment
		 * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.
		 * Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipientâ€™s account, although at least 90% of standing order payments are sent by 6am.
		 * In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
		 * Post payment_initiation/payment/create
		 * @return {PaymentInitiationPaymentCreateResponse} OK
		 */
		PaymentInitiationPaymentCreate(requestBody: PaymentInitiationPaymentCreateRequest): Observable<PaymentInitiationPaymentCreateResponse> {
			return this.http.post<PaymentInitiationPaymentCreateResponse>(this.baseUri + 'payment_initiation/payment/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get payment details
		 * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
		 * Post payment_initiation/payment/get
		 * @return {PaymentInitiationPaymentGetResponse} OK
		 */
		PaymentInitiationPaymentGet(requestBody: PaymentInitiationPaymentGetRequest): Observable<PaymentInitiationPaymentGetResponse> {
			return this.http.post<PaymentInitiationPaymentGetResponse>(this.baseUri + 'payment_initiation/payment/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List payments
		 * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
		 * Post payment_initiation/payment/list
		 * @return {PaymentInitiationPaymentListResponse} OK
		 */
		PaymentInitiationPaymentList(requestBody: PaymentInitiationPaymentListRequest): Observable<PaymentInitiationPaymentListResponse> {
			return this.http.post<PaymentInitiationPaymentListResponse>(this.baseUri + 'payment_initiation/payment/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Reverse an existing payment
		 * Reverse a settled payment from a Plaid virtual account.
		 * The original payment must be in a settled state to be refunded.
		 * To refund partially, specify the amount as part of the request.
		 * If the amount is not specified, the refund amount will be equal to all
		 * of the remaining payment amount that has not been refunded yet.
		 * The refund will go back to the source account that initiated the payment.
		 * The original payment must have been initiated to a Plaid virtual account
		 * so that this account can be used to initiate the refund.
		 * Post payment_initiation/payment/reverse
		 * @return {PaymentInitiationPaymentReverseResponse} OK
		 */
		PaymentInitiationPaymentReverse(requestBody: PaymentInitiationPaymentReverseRequest): Observable<PaymentInitiationPaymentReverseResponse> {
			return this.http.post<PaymentInitiationPaymentReverseResponse>(this.baseUri + 'payment_initiation/payment/reverse', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create payment token
		 * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.
		 * The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
		 * Post payment_initiation/payment/token/create
		 * @return {PaymentInitiationPaymentTokenCreateResponse} OK
		 */
		CreatePaymentToken(requestBody: PaymentInitiationPaymentTokenCreateRequest): Observable<PaymentInitiationPaymentTokenCreateResponse> {
			return this.http.post<PaymentInitiationPaymentTokenCreateResponse>(this.baseUri + 'payment_initiation/payment/token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create payment recipient
		 * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.
		 * It is recommended to use `bacs` in the UK and `iban` in EU.
		 * The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
		 * Post payment_initiation/recipient/create
		 * @return {PaymentInitiationRecipientCreateResponse} OK
		 */
		PaymentInitiationRecipientCreate(requestBody: PaymentInitiationRecipientCreateRequest): Observable<PaymentInitiationRecipientCreateResponse> {
			return this.http.post<PaymentInitiationRecipientCreateResponse>(this.baseUri + 'payment_initiation/recipient/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get payment recipient
		 * Get details about a payment recipient you have previously created.
		 * Post payment_initiation/recipient/get
		 * @return {PaymentInitiationRecipientGetResponse} OK
		 */
		PaymentInitiationRecipientGet(requestBody: PaymentInitiationRecipientGetRequest): Observable<PaymentInitiationRecipientGetResponse> {
			return this.http.post<PaymentInitiationRecipientGetResponse>(this.baseUri + 'payment_initiation/recipient/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List payment recipients
		 * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
		 * Post payment_initiation/recipient/list
		 * @return {PaymentInitiationRecipientListResponse} OK
		 */
		PaymentInitiationRecipientList(requestBody: PaymentInitiationRecipientListRequest): Observable<PaymentInitiationRecipientListResponse> {
			return this.http.post<PaymentInitiationRecipientListResponse>(this.baseUri + 'payment_initiation/recipient/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create payment profile
		 * Use `/payment_profile/create` endpoint to create a new payment profile.
		 * To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field.
		 * You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
		 * Post payment_profile/create
		 * @return {PaymentProfileCreateResponse} OK
		 */
		PaymentProfileCreate(requestBody: PaymentProfileCreateRequest): Observable<PaymentProfileCreateResponse> {
			return this.http.post<PaymentProfileCreateResponse>(this.baseUri + 'payment_profile/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get payment profile
		 * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
		 * Post payment_profile/get
		 * @return {PaymentProfileGetResponse} OK
		 */
		PaymentProfileGet(requestBody: PaymentProfileGetRequest): Observable<PaymentProfileGetResponse> {
			return this.http.post<PaymentProfileGetResponse>(this.baseUri + 'payment_profile/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Remove payment profile
		 * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once itâ€™s removed, it can no longer be used to create transfers.
		 * Post payment_profile/remove
		 * @return {PaymentProfileRemoveResponse} OK
		 */
		PaymentProfileRemove(requestBody: PaymentProfileRemoveRequest): Observable<PaymentProfileRemoveResponse> {
			return this.http.post<PaymentProfileRemoveResponse>(this.baseUri + 'payment_profile/remove', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create Apex bank account token
		 * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
		 * Post processor/apex/processor_token/create
		 * @return {ProcessorTokenCreateResponse} OK
		 */
		ProcessorApexProcessorTokenCreate(requestBody: ProcessorApexProcessorTokenCreateRequest): Observable<ProcessorTokenCreateResponse> {
			return this.http.post<ProcessorTokenCreateResponse>(this.baseUri + 'processor/apex/processor_token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve Auth data
		 * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.
		 * Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
		 * Post processor/auth/get
		 * @return {ProcessorAuthGetResponse} success
		 */
		ProcessorAuthGet(requestBody: ProcessorAuthGetRequest): Observable<ProcessorAuthGetResponse> {
			return this.http.post<ProcessorAuthGetResponse>(this.baseUri + 'processor/auth/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve Balance data
		 * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
		 * Post processor/balance/get
		 * @param {ProcessorBalanceGetRequest} requestBody The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.
		 * The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
		 * Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
		 * @return {ProcessorBalanceGetResponse} OK
		 */
		ProcessorBalanceGet(requestBody: ProcessorBalanceGetRequest): Observable<ProcessorBalanceGetResponse> {
			return this.http.post<ProcessorBalanceGetResponse>(this.baseUri + 'processor/balance/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a bank transfer as a processor
		 * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
		 * Post processor/bank_transfer/create
		 * @return {ProcessorBankTransferCreateResponse} OK
		 */
		ProcessorBankTransferCreate(requestBody: ProcessorBankTransferCreateRequest): Observable<ProcessorBankTransferCreateResponse> {
			return this.http.post<ProcessorBankTransferCreateResponse>(this.baseUri + 'processor/bank_transfer/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve Identity data
		 * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
		 * Post processor/identity/get
		 * @return {ProcessorIdentityGetResponse} OK
		 */
		ProcessorIdentityGet(requestBody: ProcessorIdentityGetRequest): Observable<ProcessorIdentityGetResponse> {
			return this.http.post<ProcessorIdentityGetResponse>(this.baseUri + 'processor/identity/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Report whether you initiated an ACH transaction
		 * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
		 * Post processor/signal/decision/report
		 * @return {ProcessorSignalDecisionReportResponse} OK
		 */
		ProcessorSignalDecisionReport(requestBody: ProcessorSignalDecisionReportRequest): Observable<ProcessorSignalDecisionReportResponse> {
			return this.http.post<ProcessorSignalDecisionReportResponse>(this.baseUri + 'processor/signal/decision/report', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Evaluate a planned ACH transaction
		 * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
		 * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).
		 * Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
		 * Post processor/signal/evaluate
		 * @return {ProcessorSignalEvaluateResponse} OK
		 */
		ProcessorSignalEvaluate(requestBody: ProcessorSignalEvaluateRequest): Observable<ProcessorSignalEvaluateResponse> {
			return this.http.post<ProcessorSignalEvaluateResponse>(this.baseUri + 'processor/signal/evaluate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Report a return for an ACH transaction
		 * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
		 * Post processor/signal/return/report
		 * @return {ProcessorSignalReturnReportResponse} OK
		 */
		ProcessorSignalReturnReport(requestBody: ProcessorSignalReturnReportRequest): Observable<ProcessorSignalReturnReportResponse> {
			return this.http.post<ProcessorSignalReturnReportResponse>(this.baseUri + 'processor/signal/return/report', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create Stripe bank account token
		 * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
		 * Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user's bank account information changes or they revoke Plaid's permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.
		 * Bank account tokens can also be revoked, using `/item/remove`.'
		 * Post processor/stripe/bank_account_token/create
		 * @return {ProcessorStripeBankAccountTokenCreateResponse} OK
		 */
		ProcessorStripeBankAccountTokenCreate(requestBody: ProcessorStripeBankAccountTokenCreateRequest): Observable<ProcessorStripeBankAccountTokenCreateResponse> {
			return this.http.post<ProcessorStripeBankAccountTokenCreateResponse>(this.baseUri + 'processor/stripe/bank_account_token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create processor token
		 * Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
		 * Post processor/token/create
		 * @return {ProcessorTokenCreateResponse} OK
		 */
		ProcessorTokenCreate(requestBody: ProcessorTokenCreateRequest): Observable<ProcessorTokenCreateResponse> {
			return this.http.post<ProcessorTokenCreateResponse>(this.baseUri + 'processor/token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Manually fire a Bank Transfer webhook
		 * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
		 * Post sandbox/bank_transfer/fire_webhook
		 * @return {SandboxBankTransferFireWebhookResponse} OK
		 */
		SandboxBankTransferFireWebhook(requestBody: SandboxBankTransferFireWebhookRequest): Observable<SandboxBankTransferFireWebhookResponse> {
			return this.http.post<SandboxBankTransferFireWebhookResponse>(this.baseUri + 'sandbox/bank_transfer/fire_webhook', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate a bank transfer event in Sandbox
		 * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
		 * Post sandbox/bank_transfer/simulate
		 * @return {SandboxBankTransferSimulateResponse} OK
		 */
		SandboxBankTransferSimulate(requestBody: SandboxBankTransferSimulateRequest): Observable<SandboxBankTransferSimulateResponse> {
			return this.http.post<SandboxBankTransferSimulateResponse>(this.baseUri + 'sandbox/bank_transfer/simulate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Manually fire an Income webhook
		 * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.
		 * Post sandbox/income/fire_webhook
		 * @return {SandboxIncomeFireWebhookResponse} OK
		 */
		SandboxIncomeFireWebhook(requestBody: SandboxIncomeFireWebhookRequest): Observable<SandboxIncomeFireWebhookResponse> {
			return this.http.post<SandboxIncomeFireWebhookResponse>(this.baseUri + 'sandbox/income/fire_webhook', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Fire a test webhook
		 * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:
		 * `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
		 * `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.
		 * `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.
		 * `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
		 * `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
		 * Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
		 * Post sandbox/item/fire_webhook
		 * @return {SandboxItemFireWebhookResponse} success
		 */
		SandboxItemFireWebhook(requestBody: SandboxItemFireWebhookRequest): Observable<SandboxItemFireWebhookResponse> {
			return this.http.post<SandboxItemFireWebhookResponse>(this.baseUri + 'sandbox/item/fire_webhook', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Force a Sandbox Item into an error state
		 * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.
		 * In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
		 * Post sandbox/item/reset_login
		 * @return {SandboxItemResetLoginResponse} OK
		 */
		SandboxItemResetLogin(requestBody: SandboxItemResetLoginRequest): Observable<SandboxItemResetLoginResponse> {
			return this.http.post<SandboxItemResetLoginResponse>(this.baseUri + 'sandbox/item/reset_login', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Set verification status for Sandbox account
		 * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.
		 * Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).
		 * For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
		 * Post sandbox/item/set_verification_status
		 * @return {SandboxItemSetVerificationStatusResponse} OK
		 */
		SandboxItemSetVerificationStatus(requestBody: SandboxItemSetVerificationStatusRequest): Observable<SandboxItemSetVerificationStatusResponse> {
			return this.http.post<SandboxItemSetVerificationStatusResponse>(this.baseUri + 'sandbox/item/set_verification_status', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Save the selected accounts when connecting to the Platypus Oauth institution
		 * Save the selected accounts when connecting to the Platypus Oauth institution
		 * Post sandbox/oauth/select_accounts
		 * @return {SandboxOauthSelectAccountsResponse} OK
		 */
		SandboxOauthSelectAccounts(requestBody: SandboxOauthSelectAccountsRequest): Observable<SandboxOauthSelectAccountsResponse> {
			return this.http.post<SandboxOauthSelectAccountsResponse>(this.baseUri + 'sandbox/oauth/select_accounts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Reset the login of a Payment Profile
		 * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.
		 * After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.
		 * In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
		 * Post sandbox/payment_profile/reset_login
		 * @return {SandboxPaymentProfileResetLoginResponse} OK
		 */
		SandboxPaymentProfileResetLogin(requestBody: SandboxPaymentProfileResetLoginRequest): Observable<SandboxPaymentProfileResetLoginResponse> {
			return this.http.post<SandboxPaymentProfileResetLoginResponse>(this.baseUri + 'sandbox/payment_profile/reset_login', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a test Item and processor token
		 * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
		 * Post sandbox/processor_token/create
		 * @return {SandboxProcessorTokenCreateResponse} OK
		 */
		SandboxProcessorTokenCreate(requestBody: SandboxProcessorTokenCreateRequest): Observable<SandboxProcessorTokenCreateResponse> {
			return this.http.post<SandboxProcessorTokenCreateResponse>(this.baseUri + 'sandbox/processor_token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a test Item
		 * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
		 * Post sandbox/public_token/create
		 * @return {SandboxPublicTokenCreateResponse} success
		 */
		SandboxPublicTokenCreate(requestBody: SandboxPublicTokenCreateRequest): Observable<SandboxPublicTokenCreateResponse> {
			return this.http.post<SandboxPublicTokenCreateResponse>(this.baseUri + 'sandbox/public_token/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Manually fire a Transfer webhook
		 * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
		 * Post sandbox/transfer/fire_webhook
		 * @return {SandboxTransferFireWebhookResponse} OK
		 */
		SandboxTransferFireWebhook(requestBody: SandboxTransferFireWebhookRequest): Observable<SandboxTransferFireWebhookResponse> {
			return this.http.post<SandboxTransferFireWebhookResponse>(this.baseUri + 'sandbox/transfer/fire_webhook', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Trigger the creation of a repayment
		 * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
		 * Post sandbox/transfer/repayment/simulate
		 * @return {SandboxTransferRepaymentSimulateResponse} OK
		 */
		SandboxTransferRepaymentSimulate(requestBody: SandboxTransferRepaymentSimulateRequest): Observable<SandboxTransferRepaymentSimulateResponse> {
			return this.http.post<SandboxTransferRepaymentSimulateResponse>(this.baseUri + 'sandbox/transfer/repayment/simulate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate a transfer event in Sandbox
		 * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
		 * Post sandbox/transfer/simulate
		 * @return {SandboxTransferSimulateResponse} OK
		 */
		SandboxTransferSimulate(requestBody: SandboxTransferSimulateRequest): Observable<SandboxTransferSimulateResponse> {
			return this.http.post<SandboxTransferSimulateResponse>(this.baseUri + 'sandbox/transfer/simulate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate creating a sweep
		 * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
		 * Post sandbox/transfer/sweep/simulate
		 * @return {SandboxTransferSweepSimulateResponse} OK
		 */
		SandboxTransferSweepSimulate(requestBody: SandboxTransferSweepSimulateRequest): Observable<SandboxTransferSweepSimulateResponse> {
			return this.http.post<SandboxTransferSweepSimulateResponse>(this.baseUri + 'sandbox/transfer/sweep/simulate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Advance a test clock
		 * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.
		 * A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.
		 * If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.
		 * For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.
		 * The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.
		 * For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
		 * Post sandbox/transfer/test_clock/advance
		 * @return {SandboxTransferTestClockAdvanceResponse} OK
		 */
		SandboxTransferTestClockAdvance(requestBody: SandboxTransferTestClockAdvanceRequest): Observable<SandboxTransferTestClockAdvanceResponse> {
			return this.http.post<SandboxTransferTestClockAdvanceResponse>(this.baseUri + 'sandbox/transfer/test_clock/advance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a test clock
		 * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.
		 * A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.
		 * A test clock can be associated with up to 5 recurring transfers.
		 * Post sandbox/transfer/test_clock/create
		 * @return {SandboxTransferTestClockCreateResponse} OK
		 */
		SandboxTransferTestClockCreate(requestBody: SandboxTransferTestClockCreateRequest): Observable<SandboxTransferTestClockCreateResponse> {
			return this.http.post<SandboxTransferTestClockCreateResponse>(this.baseUri + 'sandbox/transfer/test_clock/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get a test clock
		 * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
		 * Post sandbox/transfer/test_clock/get
		 * @return {SandboxTransferTestClockGetResponse} OK
		 */
		SandboxTransferTestClockGet(requestBody: SandboxTransferTestClockGetRequest): Observable<SandboxTransferTestClockGetResponse> {
			return this.http.post<SandboxTransferTestClockGetResponse>(this.baseUri + 'sandbox/transfer/test_clock/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List test clocks
		 * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
		 * Post sandbox/transfer/test_clock/list
		 * @return {SandboxTransferTestClockListResponse} OK
		 */
		SandboxTransferTestClockList(requestBody: SandboxTransferTestClockListRequest): Observable<SandboxTransferTestClockListResponse> {
			return this.http.post<SandboxTransferTestClockListResponse>(this.baseUri + 'sandbox/transfer/test_clock/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Report whether you initiated an ACH transaction
		 * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
		 * Post signal/decision/report
		 * @return {SignalDecisionReportResponse} OK
		 */
		SignalDecisionReport(requestBody: SignalDecisionReportRequest): Observable<SignalDecisionReportResponse> {
			return this.http.post<SignalDecisionReportResponse>(this.baseUri + 'signal/decision/report', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Evaluate a planned ACH transaction
		 * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
		 * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).
		 * Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
		 * Post signal/evaluate
		 * @return {SignalEvaluateResponse} OK
		 */
		SignalEvaluate(requestBody: SignalEvaluateRequest): Observable<SignalEvaluateResponse> {
			return this.http.post<SignalEvaluateResponse>(this.baseUri + 'signal/evaluate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Opt-in an Item to Signal
		 * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.
		 * If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.
		 * Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
		 * Post signal/prepare
		 * @return {SignalPrepareResponse} OK
		 */
		SignalPrepare(requestBody: SignalPrepareRequest): Observable<SignalPrepareResponse> {
			return this.http.post<SignalPrepareResponse>(this.baseUri + 'signal/prepare', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Report a return for an ACH transaction
		 * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
		 * Post signal/return/report
		 * @return {SignalReturnReportResponse} OK
		 */
		SignalReturnReport(requestBody: SignalReturnReportRequest): Observable<SignalReturnReportResponse> {
			return this.http.post<SignalReturnReportResponse>(this.baseUri + 'signal/return/report', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Enrich locally-held transaction data
		 * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
		 * To request access to Enrich, reach out to your Plaid point of contact or send a note to enrich-feedback@plaid.com
		 * Post transactions/enrich
		 * @return {TransactionsEnrichGetResponse} OK
		 */
		TransactionsEnrich(requestBody: TransactionsEnrichGetRequest): Observable<TransactionsEnrichGetResponse> {
			return this.http.post<TransactionsEnrichGetResponse>(this.baseUri + 'transactions/enrich', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get transaction data
		 * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.
		 * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).
		 * Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.
		 * Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.
		 * Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
		 * Post transactions/get
		 * @return {TransactionsGetResponse} OK
		 */
		TransactionsGet(requestBody: TransactionsGetRequest): Observable<TransactionsGetResponse> {
			return this.http.post<TransactionsGetResponse>(this.baseUri + 'transactions/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Fetch recurring transaction streams
		 * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a userâ€™s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.
		 * This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
		 * This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.
		 * After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
		 * Post transactions/recurring/get
		 * @return {TransactionsRecurringGetResponse} OK
		 */
		TransactionsRecurringGet(requestBody: TransactionsRecurringGetRequest): Observable<TransactionsRecurringGetResponse> {
			return this.http.post<TransactionsRecurringGetResponse>(this.baseUri + 'transactions/recurring/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Refresh transaction data
		 * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.
		 * `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
		 * Post transactions/refresh
		 * @return {TransactionsRefreshResponse} OK
		 */
		TransactionsRefresh(requestBody: TransactionsRefreshRequest): Observable<TransactionsRefreshResponse> {
			return this.http.post<TransactionsRefreshResponse>(this.baseUri + 'transactions/refresh', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get incremental transaction updates on an Item
		 * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.
		 * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.
		 * This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.
		 * Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.
		 * In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as "adds"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.
		 * Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.
		 * When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.
		 * Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.
		 * Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
		 * To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
		 * Post transactions/sync
		 * @return {TransactionsSyncResponse} OK
		 */
		TransactionsSync(requestBody: TransactionsSyncRequest): Observable<TransactionsSyncResponse> {
			return this.http.post<TransactionsSyncResponse>(this.baseUri + 'transactions/sync', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a transfer authorization
		 * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.
		 * In Plaid's Sandbox environment the decisions will be returned as follows:
		 * - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.
		 * - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).
		 * - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).
		 * - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
		 * - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
		 * `device.ip_address`, `device.user_agent` are required fields.
		 * For [Guarantee](https://www.plaid.com/docs//transfer/guarantee/), the following fields are required : `idempotency_key`, `user.phone_number` (optional if `email_address` provided), `user.email_address` (optional if `phone_number` provided), `device.ip_address`, `device.user_agent`, and `user_present`.
		 * Post transfer/authorization/create
		 * @return {TransferAuthorizationCreateResponse} OK
		 */
		TransferAuthorizationCreate(requestBody: TransferAuthorizationCreateRequest): Observable<TransferAuthorizationCreateResponse> {
			return this.http.post<TransferAuthorizationCreateResponse>(this.baseUri + 'transfer/authorization/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Cancel a transfer
		 * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
		 * Post transfer/cancel
		 * @return {TransferCancelResponse} OK
		 */
		TransferCancel(requestBody: TransferCancelRequest): Observable<TransferCancelResponse> {
			return this.http.post<TransferCancelResponse>(this.baseUri + 'transfer/cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get RTP eligibility information of a transfer
		 * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer.
		 * Post transfer/capabilities/get
		 * @return {TransferCapabilitiesGetResponse} OK
		 */
		TransferCapabilitiesGet(requestBody: TransferCapabilitiesGetRequest): Observable<TransferCapabilitiesGetResponse> {
			return this.http.post<TransferCapabilitiesGetResponse>(this.baseUri + 'transfer/capabilities/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get transfer product configuration
		 * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
		 * Post transfer/configuration/get
		 * @return {TransferConfigurationGetResponse} OK
		 */
		TransferConfigurationGet(requestBody: TransferConfigurationGetRequest): Observable<TransferConfigurationGetResponse> {
			return this.http.post<TransferConfigurationGetResponse>(this.baseUri + 'transfer/configuration/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a transfer
		 * Use the `/transfer/create` endpoint to initiate a new transfer.
		 * Post transfer/create
		 * @return {TransferCreateResponse} OK
		 */
		TransferCreate(requestBody: TransferCreateRequest): Observable<TransferCreateResponse> {
			return this.http.post<TransferCreateResponse>(this.baseUri + 'transfer/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List transfer events
		 * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
		 * Post transfer/event/list
		 * @return {TransferEventListResponse} OK
		 */
		TransferEventList(requestBody: TransferEventListRequest): Observable<TransferEventListResponse> {
			return this.http.post<TransferEventListResponse>(this.baseUri + 'transfer/event/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Sync transfer events
		 * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
		 * Post transfer/event/sync
		 * @return {TransferEventSyncResponse} OK
		 */
		TransferEventSync(requestBody: TransferEventSyncRequest): Observable<TransferEventSyncResponse> {
			return this.http.post<TransferEventSyncResponse>(this.baseUri + 'transfer/event/sync', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a transfer
		 * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
		 * Post transfer/get
		 * @return {TransferGetResponse} OK
		 */
		TransferGet(requestBody: TransferGetRequest): Observable<TransferGetResponse> {
			return this.http.post<TransferGetResponse>(this.baseUri + 'transfer/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a transfer intent object to invoke the Transfer UI
		 * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
		 * Post transfer/intent/create
		 * @return {TransferIntentCreateResponse} OK
		 */
		TransferIntentCreate(requestBody: TransferIntentCreateRequest): Observable<TransferIntentCreateResponse> {
			return this.http.post<TransferIntentCreateResponse>(this.baseUri + 'transfer/intent/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve more information about a transfer intent
		 * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
		 * Post transfer/intent/get
		 * @return {TransferIntentGetResponse} OK
		 */
		TransferIntentGet(requestBody: TransferIntentGetRequest): Observable<TransferIntentGetResponse> {
			return this.http.post<TransferIntentGetResponse>(this.baseUri + 'transfer/intent/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List transfers
		 * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
		 * Post transfer/list
		 * @return {TransferListResponse} OK
		 */
		TransferList(requestBody: TransferListRequest): Observable<TransferListResponse> {
			return this.http.post<TransferListResponse>(this.baseUri + 'transfer/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get transfer product usage metrics
		 * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
		 * Post transfer/metrics/get
		 * @return {TransferMetricsGetResponse} OK
		 */
		TransferMetricsGet(requestBody: TransferMetricsGetRequest): Observable<TransferMetricsGetResponse> {
			return this.http.post<TransferMetricsGetResponse>(this.baseUri + 'transfer/metrics/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Migrate account into Transfers
		 * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
		 * Post transfer/migrate_account
		 * @return {TransferMigrateAccountResponse} OK
		 */
		TransferMigrateAccount(requestBody: TransferMigrateAccountRequest): Observable<TransferMigrateAccountResponse> {
			return this.http.post<TransferMigrateAccountResponse>(this.baseUri + 'transfer/migrate_account', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a new originator
		 * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
		 * Post transfer/originator/create
		 * @return {TransferOriginatorCreateResponse} OK
		 */
		TransferOriginatorCreate(requestBody: TransferOriginatorCreateRequest): Observable<TransferOriginatorCreateResponse> {
			return this.http.post<TransferOriginatorCreateResponse>(this.baseUri + 'transfer/originator/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get status of an originator's onboarding
		 * The `/transfer/originator/get` endpoint gets status updates for an originator's onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
		 * Post transfer/originator/get
		 * @return {TransferOriginatorGetResponse} OK
		 */
		TransferOriginatorGet(requestBody: TransferOriginatorGetRequest): Observable<TransferOriginatorGetResponse> {
			return this.http.post<TransferOriginatorGetResponse>(this.baseUri + 'transfer/originator/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get status of all originators' onboarding
		 * The `/transfer/originator/list` endpoint gets status updates for all of your originators' onboarding. This information is also available via the Plaid dashboard.
		 * Post transfer/originator/list
		 * @return {TransferOriginatorListResponse} OK
		 */
		TransferOriginatorList(requestBody: TransferOriginatorListRequest): Observable<TransferOriginatorListResponse> {
			return this.http.post<TransferOriginatorListResponse>(this.baseUri + 'transfer/originator/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Generate a Plaid-hosted onboarding UI URL.
		 * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaidâ€™s terms for ACH money movement.
		 * Post transfer/questionnaire/create
		 * @return {TransferQuestionnaireCreateResponse} OK
		 */
		TransferQuestionnaireCreate(requestBody: TransferQuestionnaireCreateRequest): Observable<TransferQuestionnaireCreateResponse> {
			return this.http.post<TransferQuestionnaireCreateResponse>(this.baseUri + 'transfer/questionnaire/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Cancel a recurring transfer.
		 * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn't been submitted to bank will be cancelled.
		 * Post transfer/recurring/cancel
		 * @return {TransferRecurringCancelResponse} OK
		 */
		TransferRecurringCancel(requestBody: TransferRecurringCancelRequest): Observable<TransferRecurringCancelResponse> {
			return this.http.post<TransferRecurringCancelResponse>(this.baseUri + 'transfer/recurring/cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a recurring transfer
		 * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer.
		 * Post transfer/recurring/create
		 * @return {TransferRecurringCreateResponse} OK
		 */
		TransferRecurringCreate(requestBody: TransferRecurringCreateRequest): Observable<TransferRecurringCreateResponse> {
			return this.http.post<TransferRecurringCreateResponse>(this.baseUri + 'transfer/recurring/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a recurring transfer
		 * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
		 * Post transfer/recurring/get
		 * @return {TransferRecurringGetResponse} OK
		 */
		TransferRecurringGet(requestBody: TransferRecurringGetRequest): Observable<TransferRecurringGetResponse> {
			return this.http.post<TransferRecurringGetResponse>(this.baseUri + 'transfer/recurring/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List recurring transfers
		 * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
		 * Post transfer/recurring/list
		 * @return {TransferRecurringListResponse} OK
		 */
		TransferRecurringList(requestBody: TransferRecurringListRequest): Observable<TransferRecurringListResponse> {
			return this.http.post<TransferRecurringListResponse>(this.baseUri + 'transfer/recurring/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Cancel a refund
		 * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
		 * Post transfer/refund/cancel
		 * @return {TransferRefundCancelResponse} OK
		 */
		TransferRefundCancel(requestBody: TransferRefundCancelRequest): Observable<TransferRefundCancelResponse> {
			return this.http.post<TransferRefundCancelResponse>(this.baseUri + 'transfer/refund/cancel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a refund
		 * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.
		 * Processing of the refund will not occur until at least 3 business days following the transfer's settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
		 * Post transfer/refund/create
		 * @return {TransferRefundCreateResponse} OK
		 */
		TransferRefundCreate(requestBody: TransferRefundCreateRequest): Observable<TransferRefundCreateResponse> {
			return this.http.post<TransferRefundCreateResponse>(this.baseUri + 'transfer/refund/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a refund
		 * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
		 * Post transfer/refund/get
		 * @return {TransferRefundGetResponse} OK
		 */
		TransferRefundGet(requestBody: TransferRefundGetRequest): Observable<TransferRefundGetResponse> {
			return this.http.post<TransferRefundGetResponse>(this.baseUri + 'transfer/refund/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists historical repayments
		 * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
		 * Post transfer/repayment/list
		 * @return {TransferRepaymentListResponse} OK
		 */
		TransferRepaymentList(requestBody: TransferRepaymentListRequest): Observable<TransferRepaymentListResponse> {
			return this.http.post<TransferRepaymentListResponse>(this.baseUri + 'transfer/repayment/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List the returns included in a repayment
		 * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
		 * Post transfer/repayment/return/list
		 * @return {TransferRepaymentReturnListResponse} OK
		 */
		TransferRepaymentReturnList(requestBody: TransferRepaymentReturnListRequest): Observable<TransferRepaymentReturnListResponse> {
			return this.http.post<TransferRepaymentReturnListResponse>(this.baseUri + 'transfer/repayment/return/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a sweep
		 * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
		 * Post transfer/sweep/get
		 * @return {TransferSweepGetResponse} OK
		 */
		TransferSweepGet(requestBody: TransferSweepGetRequest): Observable<TransferSweepGetResponse> {
			return this.http.post<TransferSweepGetResponse>(this.baseUri + 'transfer/sweep/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List sweeps
		 * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
		 * Post transfer/sweep/list
		 * @return {TransferSweepListResponse} OK
		 */
		TransferSweepList(requestBody: TransferSweepListRequest): Observable<TransferSweepListResponse> {
			return this.http.post<TransferSweepListResponse>(this.baseUri + 'transfer/sweep/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create user
		 * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
		 * If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.
		 * Ensure that you store the `user_token` along with your user's identifier in your database, as it is not possible to retrieve a previously created `user_token`.
		 * Post user/create
		 * @return {UserCreateResponse} OK
		 */
		UserCreate(requestBody: UserCreateRequest): Observable<UserCreateResponse> {
			return this.http.post<UserCreateResponse>(this.baseUri + 'user/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create an e-wallet
		 * Create an e-wallet. The response is the newly created e-wallet object.
		 * Post wallet/create
		 * @return {WalletCreateResponse} OK
		 */
		WalletCreate(requestBody: WalletCreateRequest): Observable<WalletCreateResponse> {
			return this.http.post<WalletCreateResponse>(this.baseUri + 'wallet/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Fetch an e-wallet
		 * Fetch an e-wallet. The response includes the current balance.
		 * Post wallet/get
		 * @return {WalletGetResponse} OK
		 */
		WalletGet(requestBody: WalletGetRequest): Observable<WalletGetResponse> {
			return this.http.post<WalletGetResponse>(this.baseUri + 'wallet/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Fetch a list of e-wallets
		 * This endpoint lists all e-wallets in descending order of creation.
		 * Post wallet/list
		 * @return {WalletListResponse} OK
		 */
		WalletList(requestBody: WalletListRequest): Observable<WalletListResponse> {
			return this.http.post<WalletListResponse>(this.baseUri + 'wallet/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Execute a transaction using an e-wallet
		 * Execute a transaction using the specified e-wallet.
		 * Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction.
		 * Transactions will settle in seconds to several days, depending on the underlying payment rail.
		 * Post wallet/transaction/execute
		 * @return {WalletTransactionExecuteResponse} OK
		 */
		WalletTransactionExecute(requestBody: WalletTransactionExecuteRequest): Observable<WalletTransactionExecuteResponse> {
			return this.http.post<WalletTransactionExecuteResponse>(this.baseUri + 'wallet/transaction/execute', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Fetch an e-wallet transaction
		 * Fetch a specific e-wallet transaction
		 * Post wallet/transaction/get
		 * @return {WalletTransactionGetResponse} OK
		 */
		WalletTransactionGet(requestBody: WalletTransactionGetRequest): Observable<WalletTransactionGetResponse> {
			return this.http.post<WalletTransactionGetResponse>(this.baseUri + 'wallet/transaction/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List e-wallet transactions
		 * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
		 * Post wallet/transaction/list
		 * @return {WalletTransactionListResponse} OK
		 */
		WalletTransactionList(requestBody: WalletTransactionListRequest): Observable<WalletTransactionListResponse> {
			return this.http.post<WalletTransactionListResponse>(this.baseUri + 'wallet/transaction/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a watchlist screening for an entity
		 * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
		 * Post watchlist_screening/entity/create
		 * @return {WatchlistScreeningEntityCreateResponse} OK
		 */
		WatchlistScreeningEntityCreate(requestBody: WatchlistScreeningEntityCreateRequest): Observable<WatchlistScreeningEntityCreateResponse> {
			return this.http.post<WatchlistScreeningEntityCreateResponse>(this.baseUri + 'watchlist_screening/entity/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get an entity screening
		 * Retrieve an entity watchlist screening.
		 * Post watchlist_screening/entity/get
		 * @return {WatchlistScreeningEntityGetResponse} OK
		 */
		WatchlistScreeningEntityGet(requestBody: WatchlistScreeningEntityGetRequest): Observable<WatchlistScreeningEntityGetResponse> {
			return this.http.post<WatchlistScreeningEntityGetResponse>(this.baseUri + 'watchlist_screening/entity/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List history for entity watchlist screenings
		 * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
		 * Post watchlist_screening/entity/history/list
		 * @return {WatchlistScreeningEntityHistoryListResponse} OK
		 */
		WatchlistScreeningEntityHistoryList(requestBody: WatchlistScreeningEntityHistoryListRequest): Observable<WatchlistScreeningEntityHistoryListResponse> {
			return this.http.post<WatchlistScreeningEntityHistoryListResponse>(this.baseUri + 'watchlist_screening/entity/history/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List hits for entity watchlist screenings
		 * List all hits for the entity watchlist screening.
		 * Post watchlist_screening/entity/hit/list
		 * @return {WatchlistScreeningEntityHitListResponse} OK
		 */
		WatchlistScreeningEntityHitList(requestBody: WatchlistScreeningEntityHitListRequest): Observable<WatchlistScreeningEntityHitListResponse> {
			return this.http.post<WatchlistScreeningEntityHitListResponse>(this.baseUri + 'watchlist_screening/entity/hit/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List entity watchlist screenings
		 * List all entity screenings.
		 * Post watchlist_screening/entity/list
		 * @return {WatchlistScreeningEntityListResponse} OK
		 */
		WatchlistScreeningEntityList(requestBody: WatchlistScreeningEntityListRequest): Observable<WatchlistScreeningEntityListResponse> {
			return this.http.post<WatchlistScreeningEntityListResponse>(this.baseUri + 'watchlist_screening/entity/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get entity watchlist screening program
		 * Get an entity watchlist screening program
		 * Post watchlist_screening/entity/program/get
		 * @return {WatchlistScreeningEntityProgramGetResponse} OK
		 */
		WatchlistScreeningEntityProgramGet(requestBody: WatchlistScreeningEntityProgramGetRequest): Observable<WatchlistScreeningEntityProgramGetResponse> {
			return this.http.post<WatchlistScreeningEntityProgramGetResponse>(this.baseUri + 'watchlist_screening/entity/program/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List entity watchlist screening programs
		 * List all entity watchlist screening programs
		 * Post watchlist_screening/entity/program/list
		 * @return {WatchlistScreeningEntityProgramListResponse} OK
		 */
		WatchlistScreeningEntityProgramList(requestBody: WatchlistScreeningEntityProgramListRequest): Observable<WatchlistScreeningEntityProgramListResponse> {
			return this.http.post<WatchlistScreeningEntityProgramListResponse>(this.baseUri + 'watchlist_screening/entity/program/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a review for an entity watchlist screening
		 * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
		 * Post watchlist_screening/entity/review/create
		 * @return {WatchlistScreeningEntityReviewCreateResponse} OK
		 */
		WatchlistScreeningEntityReviewCreate(requestBody: WatchlistScreeningEntityReviewCreateRequest): Observable<WatchlistScreeningEntityReviewCreateResponse> {
			return this.http.post<WatchlistScreeningEntityReviewCreateResponse>(this.baseUri + 'watchlist_screening/entity/review/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List reviews for entity watchlist screenings
		 * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
		 * Post watchlist_screening/entity/review/list
		 * @return {WatchlistScreeningEntityReviewListResponse} OK
		 */
		WatchlistScreeningEntityReviewList(requestBody: WatchlistScreeningEntityReviewListRequest): Observable<WatchlistScreeningEntityReviewListResponse> {
			return this.http.post<WatchlistScreeningEntityReviewListResponse>(this.baseUri + 'watchlist_screening/entity/review/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update an entity screening
		 * Update an entity watchlist screening.
		 * Post watchlist_screening/entity/update
		 * @param {WatchlistScreeningEntityUpdateRequest} requestBody The entity screening was successfully updated.
		 * @return {WatchlistScreeningEntityUpdateResponse} OK
		 */
		WatchlistScreeningEntityUpdate(requestBody: WatchlistScreeningEntityUpdateRequest): Observable<WatchlistScreeningEntityUpdateResponse> {
			return this.http.post<WatchlistScreeningEntityUpdateResponse>(this.baseUri + 'watchlist_screening/entity/update', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a watchlist screening for a person
		 * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
		 * Post watchlist_screening/individual/create
		 * @return {WatchlistScreeningIndividualCreateResponse} OK
		 */
		WatchlistScreeningIndividualCreate(requestBody: WatchlistScreeningIndividualCreateRequest): Observable<WatchlistScreeningIndividualCreateResponse> {
			return this.http.post<WatchlistScreeningIndividualCreateResponse>(this.baseUri + 'watchlist_screening/individual/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an individual watchlist screening
		 * Retrieve a previously created individual watchlist screening
		 * Post watchlist_screening/individual/get
		 * @return {WatchlistScreeningIndividualGetResponse} OK
		 */
		WatchlistScreeningIndividualGet(requestBody: WatchlistScreeningIndividualGetRequest): Observable<WatchlistScreeningIndividualGetResponse> {
			return this.http.post<WatchlistScreeningIndividualGetResponse>(this.baseUri + 'watchlist_screening/individual/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List history for individual watchlist screenings
		 * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
		 * Post watchlist_screening/individual/history/list
		 * @return {WatchlistScreeningIndividualHistoryListResponse} OK
		 */
		WatchlistScreeningIndividualHistoryList(requestBody: WatchlistScreeningIndividualHistoryListRequest): Observable<WatchlistScreeningIndividualHistoryListResponse> {
			return this.http.post<WatchlistScreeningIndividualHistoryListResponse>(this.baseUri + 'watchlist_screening/individual/history/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List hits for individual watchlist screening
		 * List all hits found by Plaid for a particular individual watchlist screening.
		 * Post watchlist_screening/individual/hit/list
		 * @return {WatchlistScreeningIndividualHitListResponse} OK
		 */
		WatchlistScreeningIndividualHitList(requestBody: WatchlistScreeningIndividualHitListRequest): Observable<WatchlistScreeningIndividualHitListResponse> {
			return this.http.post<WatchlistScreeningIndividualHitListResponse>(this.baseUri + 'watchlist_screening/individual/hit/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Individual Watchlist Screenings
		 * List previously created watchlist screenings for individuals
		 * Post watchlist_screening/individual/list
		 * @return {WatchlistScreeningIndividualListResponse} OK
		 */
		WatchlistScreeningIndividualList(requestBody: WatchlistScreeningIndividualListRequest): Observable<WatchlistScreeningIndividualListResponse> {
			return this.http.post<WatchlistScreeningIndividualListResponse>(this.baseUri + 'watchlist_screening/individual/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get individual watchlist screening program
		 * Get an individual watchlist screening program
		 * Post watchlist_screening/individual/program/get
		 * @return {WatchlistScreeningIndividualProgramGetResponse} OK
		 */
		WatchlistScreeningIndividualProgramGet(requestBody: WatchlistScreeningIndividualProgramGetRequest): Observable<WatchlistScreeningIndividualProgramGetResponse> {
			return this.http.post<WatchlistScreeningIndividualProgramGetResponse>(this.baseUri + 'watchlist_screening/individual/program/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List individual watchlist screening programs
		 * List all individual watchlist screening programs
		 * Post watchlist_screening/individual/program/list
		 * @return {WatchlistScreeningIndividualProgramListResponse} OK
		 */
		WatchlistScreeningIndividualProgramList(requestBody: WatchlistScreeningIndividualProgramListRequest): Observable<WatchlistScreeningIndividualProgramListResponse> {
			return this.http.post<WatchlistScreeningIndividualProgramListResponse>(this.baseUri + 'watchlist_screening/individual/program/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a review for an individual watchlist screening
		 * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
		 * Post watchlist_screening/individual/review/create
		 * @return {WatchlistScreeningIndividualReviewCreateResponse} OK
		 */
		WatchlistScreeningIndividualReviewCreate(requestBody: WatchlistScreeningIndividualReviewCreateRequest): Observable<WatchlistScreeningIndividualReviewCreateResponse> {
			return this.http.post<WatchlistScreeningIndividualReviewCreateResponse>(this.baseUri + 'watchlist_screening/individual/review/create', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List reviews for individual watchlist screenings
		 * List all reviews for the individual watchlist screening.
		 * Post watchlist_screening/individual/review/list
		 * @return {WatchlistScreeningIndividualReviewListResponse} OK
		 */
		WatchlistScreeningIndividualReviewList(requestBody: WatchlistScreeningIndividualReviewListRequest): Observable<WatchlistScreeningIndividualReviewListResponse> {
			return this.http.post<WatchlistScreeningIndividualReviewListResponse>(this.baseUri + 'watchlist_screening/individual/review/list', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update individual watchlist screening
		 * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
		 * Post watchlist_screening/individual/update
		 * @return {WatchlistScreeningIndividualUpdateResponse} OK
		 */
		WatchlistScreeningIndividualUpdate(requestBody: WatchlistScreeningIndividualUpdateRequest): Observable<WatchlistScreeningIndividualUpdateResponse> {
			return this.http.post<WatchlistScreeningIndividualUpdateResponse>(this.baseUri + 'watchlist_screening/individual/update', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Get webhook verification key
		 * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.
		 * The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
		 * Post webhook_verification_key/get
		 * @return {WebhookVerificationKeyGetResponse} OK
		 */
		WebhookVerificationKeyGet(requestBody: WebhookVerificationKeyGetRequest): Observable<WebhookVerificationKeyGetResponse> {
			return this.http.post<WebhookVerificationKeyGetResponse>(this.baseUri + 'webhook_verification_key/get', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

}

