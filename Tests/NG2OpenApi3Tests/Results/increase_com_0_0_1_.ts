import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance. */
	export interface Account {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier for the Entity the Account belongs to.
		 * Required
		 */
		entity_id: string;

		/**
		 * The Account identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier of an Entity that, while not owning the Account, is associated with its activity.
		 * Required
		 */
		informational_entity_id: string;

		/**
		 * The interest accrued but not yet paid, expressed as a string containing a floating-point value.
		 * Required
		 */
		interest_accrued: string;

		/**
		 * The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.
		 * Required
		 */
		interest_accrued_at: Date;

		/**
		 * The name you choose for the Account.
		 * Required
		 */
		name: string;

		/**
		 * The status of the Account.
		 * Required
		 */
		status: AccountStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `account`.
		 * Required
		 */
		type: AccountType;
	}

	/** Accounts are your bank accounts with Increase. They store money, receive transfers, and send payments. They earn interest and have depository insurance. */
	export interface AccountFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier for the Entity the Account belongs to.
		 * Required
		 */
		entity_id: FormControl<string | null | undefined>,

		/**
		 * The Account identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier of an Entity that, while not owning the Account, is associated with its activity.
		 * Required
		 */
		informational_entity_id: FormControl<string | null | undefined>,

		/**
		 * The interest accrued but not yet paid, expressed as a string containing a floating-point value.
		 * Required
		 */
		interest_accrued: FormControl<string | null | undefined>,

		/**
		 * The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.
		 * Required
		 */
		interest_accrued_at: FormControl<Date | null | undefined>,

		/**
		 * The name you choose for the Account.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The status of the Account.
		 * Required
		 */
		status: FormControl<AccountStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `account`.
		 * Required
		 */
		type: FormControl<AccountType | null | undefined>,
	}
	export function CreateAccountFormGroup() {
		return new FormGroup<AccountFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			entity_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			informational_entity_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			interest_accrued: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			interest_accrued_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<AccountStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<AccountType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AccountCurrency { CAD = 'CAD', CHF = 'CHF', EUR = 'EUR', GBP = 'GBP', JPY = 'JPY', USD = 'USD' }

	export enum AccountStatus { open = 'open', closed = 'closed' }

	export enum AccountType { account = 'account' }


	/** A list of Account objects */
	export interface Account_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Account>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Account objects */
	export interface Account_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateAccount_listFormGroup() {
		return new FormGroup<Account_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Each account can have multiple account and routing numbers. We recommend that you use a set per vendor. This is similar to how you use different passwords for different websites. Account numbers can also be used to seamlessly reconcile inbound payments. Generating a unique account number per vendor ensures you always know the originator of an incoming payment. */
	export interface Account_number {

		/**
		 * The identifier for the account this Account Number belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The Account Number identifier.
		 * Required
		 */
		id: string;

		/**
		 * The name you choose for the Account Number.
		 * Required
		 */
		name: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/**
		 * This indicates if payments can be made to the Account Number.
		 * Required
		 */
		status: Account_numberStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `account_number`.
		 * Required
		 */
		type: Account_numberType;
	}

	/** Each account can have multiple account and routing numbers. We recommend that you use a set per vendor. This is similar to how you use different passwords for different websites. Account numbers can also be used to seamlessly reconcile inbound payments. Generating a unique account number per vendor ensures you always know the originator of an incoming payment. */
	export interface Account_numberFormProperties {

		/**
		 * The identifier for the account this Account Number belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The Account Number identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The name you choose for the Account Number.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * This indicates if payments can be made to the Account Number.
		 * Required
		 */
		status: FormControl<Account_numberStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `account_number`.
		 * Required
		 */
		type: FormControl<Account_numberType | null | undefined>,
	}
	export function CreateAccount_numberFormGroup() {
		return new FormGroup<Account_numberFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Account_numberStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Account_numberType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Account_numberStatus { active = 'active', disabled = 'disabled', canceled = 'canceled' }

	export enum Account_numberType { account_number = 'account_number' }


	/** A list of Account Number objects */
	export interface Account_number_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Account_number>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Account Number objects */
	export interface Account_number_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateAccount_number_listFormGroup() {
		return new FormGroup<Account_number_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Account Statements are generated monthly for every active Account. You can access the statement's data via the API or retrieve a PDF with its details via its associated File. */
	export interface Account_statement {

		/**
		 * The identifier for the Account this Account Statement belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The Account's balance at the start of its statement period.
		 * Required
		 */
		ending_balance: number;

		/**
		 * The identifier of the File containing a PDF of the statement.
		 * Required
		 */
		file_id: string;

		/**
		 * The Account Statement identifier.
		 * Required
		 */
		id: string;

		/**
		 * The Account's balance at the start of its statement period.
		 * Required
		 */
		starting_balance: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.
		 * Required
		 */
		statement_period_end: Date;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.
		 * Required
		 */
		statement_period_start: Date;

		/**
		 * A constant representing the object's type. For this resource it will always be `account_statement`.
		 * Required
		 */
		type: Account_statementType;
	}

	/** Account Statements are generated monthly for every active Account. You can access the statement's data via the API or retrieve a PDF with its details via its associated File. */
	export interface Account_statementFormProperties {

		/**
		 * The identifier for the Account this Account Statement belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The Account's balance at the start of its statement period.
		 * Required
		 */
		ending_balance: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing a PDF of the statement.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The Account Statement identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The Account's balance at the start of its statement period.
		 * Required
		 */
		starting_balance: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.
		 * Required
		 */
		statement_period_end: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.
		 * Required
		 */
		statement_period_start: FormControl<Date | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `account_statement`.
		 * Required
		 */
		type: FormControl<Account_statementType | null | undefined>,
	}
	export function CreateAccount_statementFormGroup() {
		return new FormGroup<Account_statementFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ending_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			starting_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			statement_period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			statement_period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Account_statementType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Account_statementType { account_statement = 'account_statement' }


	/** A list of Account Statement objects */
	export interface Account_statement_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Account_statement>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Account Statement objects */
	export interface Account_statement_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateAccount_statement_listFormGroup() {
		return new FormGroup<Account_statement_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Account transfers move funds between your own accounts at Increase. */
	export interface Account_transfer {

		/**
		 * The Account to which the transfer belongs.
		 * Required
		 */
		account_id: string;

		/**
		 * The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		 * Required
		 */
		approval: Account_transferApproval;

		/**
		 * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		 * Required
		 */
		cancellation: Account_transferCancellation;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The description that will show on the transactions.
		 * Required
		 */
		description: string;

		/**
		 * The destination account's identifier.
		 * Required
		 */
		destination_account_id: string;

		/**
		 * The ID for the transaction receiving the transfer.
		 * Required
		 */
		destination_transaction_id: string;

		/**
		 * The account transfer's identifier.
		 * Required
		 */
		id: string;

		/**
		 * The transfer's network.
		 * Required
		 */
		network: AccountType;

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: Account_transferStatus;

		/**
		 * The ID for the transaction funding the transfer.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `account_transfer`.
		 * Required
		 */
		type: Account_transferType;
	}

	/** Account transfers move funds between your own accounts at Increase. */
	export interface Account_transferFormProperties {

		/**
		 * The Account to which the transfer belongs.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The description that will show on the transactions.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The destination account's identifier.
		 * Required
		 */
		destination_account_id: FormControl<string | null | undefined>,

		/**
		 * The ID for the transaction receiving the transfer.
		 * Required
		 */
		destination_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The account transfer's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The transfer's network.
		 * Required
		 */
		network: FormControl<AccountType | null | undefined>,

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: FormControl<Account_transferStatus | null | undefined>,

		/**
		 * The ID for the transaction funding the transfer.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `account_transfer`.
		 * Required
		 */
		type: FormControl<Account_transferType | null | undefined>,
	}
	export function CreateAccount_transferFormGroup() {
		return new FormGroup<Account_transferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<AccountType | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Account_transferStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Account_transferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Account_transferApproval {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: Date;

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: string;
	}
	export interface Account_transferApprovalFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: FormControl<string | null | undefined>,
	}
	export function CreateAccount_transferApprovalFormGroup() {
		return new FormGroup<Account_transferApprovalFormProperties>({
			approved_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			approved_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Account_transferCancellation {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: Date;

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: string;
	}
	export interface Account_transferCancellationFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: FormControl<string | null | undefined>,
	}
	export function CreateAccount_transferCancellationFormGroup() {
		return new FormGroup<Account_transferCancellationFormProperties>({
			canceled_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			canceled_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Account_transferStatus { pending_approval = 'pending_approval', canceled = 'canceled', complete = 'complete' }

	export enum Account_transferType { account_transfer = 'account_transfer' }


	/** A list of Account Transfer objects */
	export interface Account_transfer_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Account_transfer>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Account Transfer objects */
	export interface Account_transfer_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateAccount_transfer_listFormGroup() {
		return new FormGroup<Account_transfer_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ACH Prenotifications are one way you can verify account and routing numbers by Automated Clearing House (ACH). */
	export interface Ach_prenotification {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * Additional information for the recipient.
		 * Required
		 */
		addendum: string;

		/**
		 * The description of the date of the notification.
		 * Required
		 */
		company_descriptive_date: string;

		/**
		 * Optional data associated with the notification.
		 * Required
		 */
		company_discretionary_data: string;

		/**
		 * The description of the notification.
		 * Required
		 */
		company_entry_description: string;

		/**
		 * The name by which you know the company.
		 * Required
		 */
		company_name: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the prenotification was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * If the notification is for a future credit or debit.
		 * Required
		 */
		credit_debit_indicator: Ach_prenotificationCredit_debit_indicator;

		/**
		 * The effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		effective_date: Date;

		/**
		 * The ACH Prenotification's identifier.
		 * Required
		 */
		id: string;

		/**
		 * If your prenotification is returned, this will contain details of the return.
		 * Required
		 */
		prenotification_return: Ach_prenotificationPrenotification_return;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/**
		 * The lifecycle status of the ACH Prenotification.
		 * Required
		 */
		status: Ach_prenotificationStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `ach_prenotification`.
		 * Required
		 */
		type: Ach_prenotificationType;
	}

	/** ACH Prenotifications are one way you can verify account and routing numbers by Automated Clearing House (ACH). */
	export interface Ach_prenotificationFormProperties {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Additional information for the recipient.
		 * Required
		 */
		addendum: FormControl<string | null | undefined>,

		/**
		 * The description of the date of the notification.
		 * Required
		 */
		company_descriptive_date: FormControl<string | null | undefined>,

		/**
		 * Optional data associated with the notification.
		 * Required
		 */
		company_discretionary_data: FormControl<string | null | undefined>,

		/**
		 * The description of the notification.
		 * Required
		 */
		company_entry_description: FormControl<string | null | undefined>,

		/**
		 * The name by which you know the company.
		 * Required
		 */
		company_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the prenotification was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * If the notification is for a future credit or debit.
		 * Required
		 */
		credit_debit_indicator: FormControl<Ach_prenotificationCredit_debit_indicator | null | undefined>,

		/**
		 * The effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		effective_date: FormControl<Date | null | undefined>,

		/**
		 * The ACH Prenotification's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The lifecycle status of the ACH Prenotification.
		 * Required
		 */
		status: FormControl<Ach_prenotificationStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `ach_prenotification`.
		 * Required
		 */
		type: FormControl<Ach_prenotificationType | null | undefined>,
	}
	export function CreateAch_prenotificationFormGroup() {
		return new FormGroup<Ach_prenotificationFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			addendum: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			credit_debit_indicator: new FormControl<Ach_prenotificationCredit_debit_indicator | null | undefined>(undefined, [Validators.required]),
			effective_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Ach_prenotificationStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Ach_prenotificationType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Ach_prenotificationCredit_debit_indicator { credit = 'credit', debit = 'debit' }

	export interface Ach_prenotificationPrenotification_return {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Prenotification was returned.
		 * Required
		 */
		created_at: Date;

		/**
		 * Why the Prenotification was returned.
		 * Required
		 */
		return_reason_code: string;
	}
	export interface Ach_prenotificationPrenotification_returnFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Prenotification was returned.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Why the Prenotification was returned.
		 * Required
		 */
		return_reason_code: FormControl<string | null | undefined>,
	}
	export function CreateAch_prenotificationPrenotification_returnFormGroup() {
		return new FormGroup<Ach_prenotificationPrenotification_returnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Ach_prenotificationStatus { pending_submitting = 'pending_submitting', requires_attention = 'requires_attention', returned = 'returned', submitted = 'submitted' }

	export enum Ach_prenotificationType { ach_prenotification = 'ach_prenotification' }


	/** A list of ACH Prenotification objects */
	export interface Ach_prenotification_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Ach_prenotification>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of ACH Prenotification objects */
	export interface Ach_prenotification_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateAch_prenotification_listFormGroup() {
		return new FormGroup<Ach_prenotification_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH). */
	export interface Ach_transfer {

		/**
		 * The Account to which the transfer belongs.
		 * Required
		 */
		account_id: string;

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * Additional information that will be sent to the recipient.
		 * Required
		 */
		addendum: string;

		/**
		 * The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
		 * Required
		 */
		amount: number;

		/**
		 * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		 * Required
		 */
		approval: Ach_transferApproval;

		/**
		 * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		 * Required
		 */
		cancellation: Ach_transferCancellation;

		/**
		 * The description of the date of the transfer.
		 * Required
		 */
		company_descriptive_date: string;

		/**
		 * The data you chose to associate with the transfer.
		 * Required
		 */
		company_discretionary_data: string;

		/**
		 * The description of the transfer you set to be shown to the recipient.
		 * Required
		 */
		company_entry_description: string;

		/**
		 * The name by which the recipient knows you.
		 * Required
		 */
		company_name: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		effective_date: Date;

		/**
		 * The identifier of the External Account the transfer was made to, if any.
		 * Required
		 */
		external_account_id: string;

		/**
		 * The type of the account to which the transfer will be sent.
		 * Required
		 */
		funding: Ach_transferFunding;

		/**
		 * The ACH transfer's identifier.
		 * Required
		 */
		id: string;

		/**
		 * Your identifer for the transfer recipient.
		 * Required
		 */
		individual_id: string;

		/**
		 * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
		 * Required
		 */
		individual_name: string;

		/**
		 * The transfer's network.
		 * Required
		 */
		network: Ach_transferNetwork;

		/**
		 * If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
		 * Required
		 */
		Ach_transferNotifications_of_change: Array<Ach_transferNotifications_of_change>;

		/**
		 * If your transfer is returned, this will contain details of the return.
		 * Required
		 */
		return: Ach_transferReturn;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/**
		 * The Standard Entry Class (SEC) code to use for the transfer.
		 * Required
		 */
		standard_entry_class_code: Ach_transferStandard_entry_class_code;

		/**
		 * The descriptor that will show on the recipient's bank statement.
		 * Required
		 */
		statement_descriptor: string;

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: Ach_transferStatus;

		/**
		 * After the transfer is submitted to FedACH, this will contain supplemental details.
		 * Required
		 */
		submission: Ach_transferSubmission;

		/**
		 * The ID for the transaction funding the transfer.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `ach_transfer`.
		 * Required
		 */
		type: Ach_transferType;
	}

	/** ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH). */
	export interface Ach_transferFormProperties {

		/**
		 * The Account to which the transfer belongs.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Additional information that will be sent to the recipient.
		 * Required
		 */
		addendum: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description of the date of the transfer.
		 * Required
		 */
		company_descriptive_date: FormControl<string | null | undefined>,

		/**
		 * The data you chose to associate with the transfer.
		 * Required
		 */
		company_discretionary_data: FormControl<string | null | undefined>,

		/**
		 * The description of the transfer you set to be shown to the recipient.
		 * Required
		 */
		company_entry_description: FormControl<string | null | undefined>,

		/**
		 * The name by which the recipient knows you.
		 * Required
		 */
		company_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		 * Required
		 */
		effective_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the External Account the transfer was made to, if any.
		 * Required
		 */
		external_account_id: FormControl<string | null | undefined>,

		/**
		 * The type of the account to which the transfer will be sent.
		 * Required
		 */
		funding: FormControl<Ach_transferFunding | null | undefined>,

		/**
		 * The ACH transfer's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Your identifer for the transfer recipient.
		 * Required
		 */
		individual_id: FormControl<string | null | undefined>,

		/**
		 * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
		 * Required
		 */
		individual_name: FormControl<string | null | undefined>,

		/**
		 * The transfer's network.
		 * Required
		 */
		network: FormControl<Ach_transferNetwork | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The Standard Entry Class (SEC) code to use for the transfer.
		 * Required
		 */
		standard_entry_class_code: FormControl<Ach_transferStandard_entry_class_code | null | undefined>,

		/**
		 * The descriptor that will show on the recipient's bank statement.
		 * Required
		 */
		statement_descriptor: FormControl<string | null | undefined>,

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: FormControl<Ach_transferStatus | null | undefined>,

		/**
		 * The ID for the transaction funding the transfer.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `ach_transfer`.
		 * Required
		 */
		type: FormControl<Ach_transferType | null | undefined>,
	}
	export function CreateAch_transferFormGroup() {
		return new FormGroup<Ach_transferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			addendum: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			effective_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			external_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			funding: new FormControl<Ach_transferFunding | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			individual_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Ach_transferNetwork | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			standard_entry_class_code: new FormControl<Ach_transferStandard_entry_class_code | null | undefined>(undefined, [Validators.required]),
			statement_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Ach_transferStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Ach_transferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Ach_transferApproval {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: Date;

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: string;
	}
	export interface Ach_transferApprovalFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: FormControl<string | null | undefined>,
	}
	export function CreateAch_transferApprovalFormGroup() {
		return new FormGroup<Ach_transferApprovalFormProperties>({
			approved_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			approved_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Ach_transferCancellation {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: Date;

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: string;
	}
	export interface Ach_transferCancellationFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: FormControl<string | null | undefined>,
	}
	export function CreateAch_transferCancellationFormGroup() {
		return new FormGroup<Ach_transferCancellationFormProperties>({
			canceled_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			canceled_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Ach_transferFunding { checking = 'checking', savings = 'savings' }

	export enum Ach_transferNetwork { ach = 'ach' }

	export interface Ach_transferNotifications_of_change {

		/**
		 * The type of change that occurred.
		 * Required
		 */
		change_code: string;

		/**
		 * The corrected data.
		 * Required
		 */
		corrected_data: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.
		 * Required
		 */
		created_at: Date;
	}
	export interface Ach_transferNotifications_of_changeFormProperties {

		/**
		 * The type of change that occurred.
		 * Required
		 */
		change_code: FormControl<string | null | undefined>,

		/**
		 * The corrected data.
		 * Required
		 */
		corrected_data: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,
	}
	export function CreateAch_transferNotifications_of_changeFormGroup() {
		return new FormGroup<Ach_transferNotifications_of_changeFormProperties>({
			change_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			corrected_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Ach_transferReturn {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: Ach_transferReturnReturn_reason_code;

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Ach_transferReturnFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<Ach_transferReturnReturn_reason_code | null | undefined>,

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateAch_transferReturnFormGroup() {
		return new FormGroup<Ach_transferReturnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<Ach_transferReturnReturn_reason_code | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Ach_transferReturnReturn_reason_code { insufficient_fund = 'insufficient_fund', no_account = 'no_account', account_closed = 'account_closed', invalid_account_number_structure = 'invalid_account_number_structure', account_frozen_entry_returned_per_ofac_instruction = 'account_frozen_entry_returned_per_ofac_instruction', credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver', unauthorized_debit_to_consumer_account_using_corporate_sec_code = 'unauthorized_debit_to_consumer_account_using_corporate_sec_code', corporate_customer_advised_not_authorized = 'corporate_customer_advised_not_authorized', payment_stopped = 'payment_stopped', non_transaction_account = 'non_transaction_account', uncollected_funds = 'uncollected_funds', routing_number_check_digit_error = 'routing_number_check_digit_error', customer_advised_unauthorized_improper_ineligible_or_incomplete = 'customer_advised_unauthorized_improper_ineligible_or_incomplete', amount_field_error = 'amount_field_error', authorization_revoked_by_customer = 'authorization_revoked_by_customer', invalid_ach_routing_number = 'invalid_ach_routing_number', file_record_edit_criteria = 'file_record_edit_criteria', enr_invalid_individual_name = 'enr_invalid_individual_name', returned_per_odfi_request = 'returned_per_odfi_request', addenda_error = 'addenda_error', limited_participation_dfi = 'limited_participation_dfi', incorrectly_coded_outbound_international_payment = 'incorrectly_coded_outbound_international_payment', other = 'other' }

	export enum Ach_transferStandard_entry_class_code { corporate_credit_or_debit = 'corporate_credit_or_debit', prearranged_payments_and_deposit = 'prearranged_payments_and_deposit', internet_initiated = 'internet_initiated' }

	export enum Ach_transferStatus { pending_approval = 'pending_approval', canceled = 'canceled', pending_reviewing = 'pending_reviewing', pending_submission = 'pending_submission', submitted = 'submitted', returned = 'returned', requires_attention = 'requires_attention', rejected = 'rejected' }

	export interface Ach_transferSubmission {

		/**
		 * When the ACH transfer was sent to FedACH.
		 * Required
		 */
		submitted_at: Date;

		/**
		 * The trace number for the submission.
		 * Required
		 */
		trace_number: string;
	}
	export interface Ach_transferSubmissionFormProperties {

		/**
		 * When the ACH transfer was sent to FedACH.
		 * Required
		 */
		submitted_at: FormControl<Date | null | undefined>,

		/**
		 * The trace number for the submission.
		 * Required
		 */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateAch_transferSubmissionFormGroup() {
		return new FormGroup<Ach_transferSubmissionFormProperties>({
			submitted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Ach_transferType { ach_transfer = 'ach_transfer' }


	/** A list of ACH Transfer objects */
	export interface Ach_transfer_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Ach_transfer>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of ACH Transfer objects */
	export interface Ach_transfer_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateAch_transfer_listFormGroup() {
		return new FormGroup<Ach_transfer_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Action_a_real_time_decision_parameters {

		/** If the Real-Time Decision relates to a card authorization attempt, this object contains your response to the authorization. */
		card_authorization?: Action_a_real_time_decision_parametersCard_authorization;

		/** If the Real-Time Decision relates to a digital wallet authentication attempt, this object contains your response to the authentication. */
		digital_wallet_authentication?: Action_a_real_time_decision_parametersDigital_wallet_authentication;

		/** If the Real-Time Decision relates to a digital wallet token provisioning attempt, this object contains your response to the attempt. */
		digital_wallet_token?: Action_a_real_time_decision_parametersDigital_wallet_token;
	}
	export interface Action_a_real_time_decision_parametersFormProperties {
	}
	export function CreateAction_a_real_time_decision_parametersFormGroup() {
		return new FormGroup<Action_a_real_time_decision_parametersFormProperties>({
		});

	}

	export interface Action_a_real_time_decision_parametersCard_authorization {

		/**
		 * Whether the card authorization should be approved or declined.
		 * Required
		 */
		decision: Action_a_real_time_decision_parametersCard_authorizationDecision;
	}
	export interface Action_a_real_time_decision_parametersCard_authorizationFormProperties {

		/**
		 * Whether the card authorization should be approved or declined.
		 * Required
		 */
		decision: FormControl<Action_a_real_time_decision_parametersCard_authorizationDecision | null | undefined>,
	}
	export function CreateAction_a_real_time_decision_parametersCard_authorizationFormGroup() {
		return new FormGroup<Action_a_real_time_decision_parametersCard_authorizationFormProperties>({
			decision: new FormControl<Action_a_real_time_decision_parametersCard_authorizationDecision | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Action_a_real_time_decision_parametersCard_authorizationDecision { approve = 'approve', decline = 'decline' }

	export interface Action_a_real_time_decision_parametersDigital_wallet_authentication {

		/**
		 * Whether your application was able to deliver the one-time passcode.
		 * Required
		 */
		result: Action_a_real_time_decision_parametersDigital_wallet_authenticationResult;
	}
	export interface Action_a_real_time_decision_parametersDigital_wallet_authenticationFormProperties {

		/**
		 * Whether your application was able to deliver the one-time passcode.
		 * Required
		 */
		result: FormControl<Action_a_real_time_decision_parametersDigital_wallet_authenticationResult | null | undefined>,
	}
	export function CreateAction_a_real_time_decision_parametersDigital_wallet_authenticationFormGroup() {
		return new FormGroup<Action_a_real_time_decision_parametersDigital_wallet_authenticationFormProperties>({
			result: new FormControl<Action_a_real_time_decision_parametersDigital_wallet_authenticationResult | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Action_a_real_time_decision_parametersDigital_wallet_authenticationResult { success = 'success', failure = 'failure' }

	export interface Action_a_real_time_decision_parametersDigital_wallet_token {

		/** If your application approves the provisioning attempt, this contains metadata about the digital wallet token that will be generated. */
		approval?: Action_a_real_time_decision_parametersDigital_wallet_tokenApproval;

		/** If your application declines the provisioning attempt, this contains details about the decline. */
		decline?: Action_a_real_time_decision_parametersDigital_wallet_tokenDecline;
	}
	export interface Action_a_real_time_decision_parametersDigital_wallet_tokenFormProperties {
	}
	export function CreateAction_a_real_time_decision_parametersDigital_wallet_tokenFormGroup() {
		return new FormGroup<Action_a_real_time_decision_parametersDigital_wallet_tokenFormProperties>({
		});

	}

	export interface Action_a_real_time_decision_parametersDigital_wallet_tokenApproval {

		/**
		 * The identifier of the Card Profile to assign to the Digital Wallet token.
		 * Required
		 */
		card_profile_id: string;

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode.
		 * Max length: 200
		 * Min length: 1
		 */
		email?: string | null;

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Max length: 200
		 * Min length: 1
		 */
		phone?: string | null;
	}
	export interface Action_a_real_time_decision_parametersDigital_wallet_tokenApprovalFormProperties {

		/**
		 * The identifier of the Card Profile to assign to the Digital Wallet token.
		 * Required
		 */
		card_profile_id: FormControl<string | null | undefined>,

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode.
		 * Max length: 200
		 * Min length: 1
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Max length: 200
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,
	}
	export function CreateAction_a_real_time_decision_parametersDigital_wallet_tokenApprovalFormGroup() {
		return new FormGroup<Action_a_real_time_decision_parametersDigital_wallet_tokenApprovalFormProperties>({
			card_profile_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Action_a_real_time_decision_parametersDigital_wallet_tokenDecline {

		/**
		 * Why the tokenization attempt was declined. This is for logging purposes only and is not displayed to the end-user.
		 * Max length: 200
		 * Min length: 1
		 */
		reason?: string | null;
	}
	export interface Action_a_real_time_decision_parametersDigital_wallet_tokenDeclineFormProperties {

		/**
		 * Why the tokenization attempt was declined. This is for logging purposes only and is not displayed to the end-user.
		 * Max length: 200
		 * Min length: 1
		 */
		reason: FormControl<string | null | undefined>,
	}
	export function CreateAction_a_real_time_decision_parametersDigital_wallet_tokenDeclineFormGroup() {
		return new FormGroup<Action_a_real_time_decision_parametersDigital_wallet_tokenDeclineFormProperties>({
			reason: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}


	/** Represents a request to lookup the balance of an Account at a given point in time. */
	export interface Balance_lookup {

		/**
		 * The identifier for the account for which the balance was queried.
		 * Required
		 */
		account_id: string;

		/**
		 * The Account's available balance, representing the current balance less any open Pending Transactions on the Account.
		 * Required
		 */
		available_balance: number;

		/**
		 * The Account's current balance, representing the sum of all posted Transactions on the Account.
		 * Required
		 */
		current_balance: number;

		/**
		 * A constant representing the object's type. For this resource it will always be `balance_lookup`.
		 * Required
		 */
		type: Balance_lookupType;
	}

	/** Represents a request to lookup the balance of an Account at a given point in time. */
	export interface Balance_lookupFormProperties {

		/**
		 * The identifier for the account for which the balance was queried.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Account's available balance, representing the current balance less any open Pending Transactions on the Account.
		 * Required
		 */
		available_balance: FormControl<number | null | undefined>,

		/**
		 * The Account's current balance, representing the sum of all posted Transactions on the Account.
		 * Required
		 */
		current_balance: FormControl<number | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `balance_lookup`.
		 * Required
		 */
		type: FormControl<Balance_lookupType | null | undefined>,
	}
	export function CreateBalance_lookupFormGroup() {
		return new FormGroup<Balance_lookupFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			available_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			current_balance: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Balance_lookupType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Balance_lookupType { balance_lookup = 'balance_lookup' }


	/** Accounts are T-accounts. They can store accounting entries. */
	export interface Bookkeeping_account {

		/**
		 * The API Account associated with this bookkeeping account.
		 * Required
		 */
		account_id: string;

		/**
		 * The compliance category of the account.
		 * Required
		 */
		compliance_category: Bookkeeping_accountCompliance_category;

		/**
		 * The Entity associated with this bookkeeping account.
		 * Required
		 */
		entity_id: string;

		/**
		 * The account identifier.
		 * Required
		 */
		id: string;

		/**
		 * The name you choose for the account.
		 * Required
		 */
		name: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `bookkeeping_account`.
		 * Required
		 */
		type: Bookkeeping_accountType;
	}

	/** Accounts are T-accounts. They can store accounting entries. */
	export interface Bookkeeping_accountFormProperties {

		/**
		 * The API Account associated with this bookkeeping account.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The compliance category of the account.
		 * Required
		 */
		compliance_category: FormControl<Bookkeeping_accountCompliance_category | null | undefined>,

		/**
		 * The Entity associated with this bookkeeping account.
		 * Required
		 */
		entity_id: FormControl<string | null | undefined>,

		/**
		 * The account identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The name you choose for the account.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `bookkeeping_account`.
		 * Required
		 */
		type: FormControl<Bookkeeping_accountType | null | undefined>,
	}
	export function CreateBookkeeping_accountFormGroup() {
		return new FormGroup<Bookkeeping_accountFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			compliance_category: new FormControl<Bookkeeping_accountCompliance_category | null | undefined>(undefined, [Validators.required]),
			entity_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Bookkeeping_accountType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Bookkeeping_accountCompliance_category { commingled_cash = 'commingled_cash', customer_balance = 'customer_balance' }

	export enum Bookkeeping_accountType { bookkeeping_account = 'bookkeeping_account' }


	/** A list of Bookkeeping Account objects */
	export interface Bookkeeping_account_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Bookkeeping_account>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Bookkeeping Account objects */
	export interface Bookkeeping_account_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateBookkeeping_account_listFormGroup() {
		return new FormGroup<Bookkeeping_account_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Entries are T-account entries recording debits and credits. */
	export interface Bookkeeping_entry {

		/**
		 * The identifier for the Account the Entry belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier for the Account the Entry belongs to.
		 * Required
		 */
		entry_set_id: string;

		/**
		 * The entry identifier.
		 * Required
		 */
		id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.
		 * Required
		 */
		type: Bookkeeping_entryType;
	}

	/** Entries are T-account entries recording debits and credits. */
	export interface Bookkeeping_entryFormProperties {

		/**
		 * The identifier for the Account the Entry belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Entry amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier for the Account the Entry belongs to.
		 * Required
		 */
		entry_set_id: FormControl<string | null | undefined>,

		/**
		 * The entry identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `bookkeeping_entry`.
		 * Required
		 */
		type: FormControl<Bookkeeping_entryType | null | undefined>,
	}
	export function CreateBookkeeping_entryFormGroup() {
		return new FormGroup<Bookkeeping_entryFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			entry_set_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Bookkeeping_entryType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Bookkeeping_entryType { bookkeeping_entry = 'bookkeeping_entry' }


	/** A list of Bookkeeping Entry objects */
	export interface Bookkeeping_entry_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Bookkeeping_entry>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Bookkeeping Entry objects */
	export interface Bookkeeping_entry_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateBookkeeping_entry_listFormGroup() {
		return new FormGroup<Bookkeeping_entry_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Entry Sets are accounting entries that are transactionally applied. */
	export interface Bookkeeping_entry_set {

		/**
		 * The timestamp of the entry set.
		 * Required
		 */
		date: Date;

		/**
		 * The entries
		 * Required
		 */
		Bookkeeping_entry_setEntries: Array<Bookkeeping_entry_setEntries>;

		/**
		 * The entry set identifier.
		 * Required
		 */
		id: string;

		/**
		 * The transaction identifier, if any.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.
		 * Required
		 */
		type: Bookkeeping_entry_setType;
	}

	/** Entry Sets are accounting entries that are transactionally applied. */
	export interface Bookkeeping_entry_setFormProperties {

		/**
		 * The timestamp of the entry set.
		 * Required
		 */
		date: FormControl<Date | null | undefined>,

		/**
		 * The entry set identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The transaction identifier, if any.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `bookkeeping_entry_set`.
		 * Required
		 */
		type: FormControl<Bookkeeping_entry_setType | null | undefined>,
	}
	export function CreateBookkeeping_entry_setFormGroup() {
		return new FormGroup<Bookkeeping_entry_setFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Bookkeeping_entry_setType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Bookkeeping_entry_setEntries {

		/**
		 * The bookkeeping account impacted by the entry.
		 * Required
		 */
		account_id: string;

		/**
		 * The amount of the entry in minor units.
		 * Required
		 */
		amount: number;

		/**
		 * The entry identifier.
		 * Required
		 */
		id: string;
	}
	export interface Bookkeeping_entry_setEntriesFormProperties {

		/**
		 * The bookkeeping account impacted by the entry.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The amount of the entry in minor units.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The entry identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,
	}
	export function CreateBookkeeping_entry_setEntriesFormGroup() {
		return new FormGroup<Bookkeeping_entry_setEntriesFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Bookkeeping_entry_setType { bookkeeping_entry_set = 'bookkeeping_entry_set' }


	/** Cards are commercial credit cards. They'll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Account’s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement. */
	export interface Card {

		/**
		 * The identifier for the account this card belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Card's billing address.
		 * Required
		 */
		billing_address: CardBilling_address;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The card's description for display purposes.
		 * Required
		 */
		description: string;

		/**
		 * The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.
		 * Required
		 */
		digital_wallet: CardDigital_wallet;

		/**
		 * The month the card expires in M format (e.g., August is 8).
		 * Required
		 */
		expiration_month: number;

		/**
		 * The year the card expires in YYYY format (e.g., 2025).
		 * Required
		 */
		expiration_year: number;

		/**
		 * The card identifier.
		 * Required
		 */
		id: string;

		/**
		 * The last 4 digits of the Card's Primary Account Number.
		 * Required
		 */
		last4: string;

		/**
		 * This indicates if payments can be made with the card.
		 * Required
		 */
		status: Account_numberStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `card`.
		 * Required
		 */
		type: CardType;
	}

	/** Cards are commercial credit cards. They'll immediately work for online purchases after you create them. All cards maintain a credit limit of 100% of the Account’s available balance at the time of transaction. Funds are deducted from the Account upon transaction settlement. */
	export interface CardFormProperties {

		/**
		 * The identifier for the account this card belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The card's description for display purposes.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The month the card expires in M format (e.g., August is 8).
		 * Required
		 */
		expiration_month: FormControl<number | null | undefined>,

		/**
		 * The year the card expires in YYYY format (e.g., 2025).
		 * Required
		 */
		expiration_year: FormControl<number | null | undefined>,

		/**
		 * The card identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The last 4 digits of the Card's Primary Account Number.
		 * Required
		 */
		last4: FormControl<string | null | undefined>,

		/**
		 * This indicates if payments can be made with the card.
		 * Required
		 */
		status: FormControl<Account_numberStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card`.
		 * Required
		 */
		type: FormControl<CardType | null | undefined>,
	}
	export function CreateCardFormGroup() {
		return new FormGroup<CardFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expiration_month: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			expiration_year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			last4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Account_numberStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<CardType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CardBilling_address {

		/**
		 * The city of the billing address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the billing address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the billing address.
		 * Required
		 */
		line2: string;

		/**
		 * The postal code of the billing address.
		 * Required
		 */
		postal_code: string;

		/**
		 * The US state of the billing address.
		 * Required
		 */
		state: string;
	}
	export interface CardBilling_addressFormProperties {

		/**
		 * The city of the billing address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the billing address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the billing address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The postal code of the billing address.
		 * Required
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The US state of the billing address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCardBilling_addressFormGroup() {
		return new FormGroup<CardBilling_addressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CardDigital_wallet {

		/**
		 * The card profile assigned to this digital card. Card profiles may also be assigned at the program level.
		 * Required
		 */
		card_profile_id: string;

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode over email.
		 * Required
		 */
		email: string;

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Required
		 */
		phone: string;
	}
	export interface CardDigital_walletFormProperties {

		/**
		 * The card profile assigned to this digital card. Card profiles may also be assigned at the program level.
		 * Required
		 */
		card_profile_id: FormControl<string | null | undefined>,

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode over email.
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Required
		 */
		phone: FormControl<string | null | undefined>,
	}
	export function CreateCardDigital_walletFormGroup() {
		return new FormGroup<CardDigital_walletFormProperties>({
			card_profile_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CardType { card = 'card' }


	/** An object containing the sensitive details (card number, cvc, etc) for a Card. */
	export interface Card_details {

		/**
		 * The identifier for the Card for which sensitive details have been returned.
		 * Required
		 */
		card_id: string;

		/**
		 * The month the card expires in M format (e.g., August is 8).
		 * Required
		 */
		expiration_month: number;

		/**
		 * The year the card expires in YYYY format (e.g., 2025).
		 * Required
		 */
		expiration_year: number;

		/**
		 * The card number.
		 * Required
		 */
		primary_account_number: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_details`.
		 * Required
		 */
		type: Card_detailsType;

		/**
		 * The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).
		 * Required
		 */
		verification_code: string;
	}

	/** An object containing the sensitive details (card number, cvc, etc) for a Card. */
	export interface Card_detailsFormProperties {

		/**
		 * The identifier for the Card for which sensitive details have been returned.
		 * Required
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The month the card expires in M format (e.g., August is 8).
		 * Required
		 */
		expiration_month: FormControl<number | null | undefined>,

		/**
		 * The year the card expires in YYYY format (e.g., 2025).
		 * Required
		 */
		expiration_year: FormControl<number | null | undefined>,

		/**
		 * The card number.
		 * Required
		 */
		primary_account_number: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_details`.
		 * Required
		 */
		type: FormControl<Card_detailsType | null | undefined>,

		/**
		 * The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).
		 * Required
		 */
		verification_code: FormControl<string | null | undefined>,
	}
	export function CreateCard_detailsFormGroup() {
		return new FormGroup<Card_detailsFormProperties>({
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			expiration_month: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			expiration_year: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			primary_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Card_detailsType | null | undefined>(undefined, [Validators.required]),
			verification_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Card_detailsType { card_details = 'card_details' }


	/** If unauthorized activity occurs on a card, you can create a Card Dispute and we'll return the funds if appropriate. */
	export interface Card_dispute {

		/**
		 * If the Card Dispute's status is `accepted`, this will contain details of the successful dispute.
		 * Required
		 */
		acceptance: Card_disputeAcceptance;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: string;

		/**
		 * Why you disputed the Transaction in question.
		 * Required
		 */
		explanation: string;

		/**
		 * The Card Dispute identifier.
		 * Required
		 */
		id: string;

		/**
		 * If the Card Dispute's status is `rejected`, this will contain details of the unsuccessful dispute.
		 * Required
		 */
		rejection: Card_disputeRejection;

		/**
		 * The results of the Dispute investigation.
		 * Required
		 */
		status: Card_disputeStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_dispute`.
		 * Required
		 */
		type: Card_disputeType;
	}

	/** If unauthorized activity occurs on a card, you can create a Card Dispute and we'll return the funds if appropriate. */
	export interface Card_disputeFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: FormControl<string | null | undefined>,

		/**
		 * Why you disputed the Transaction in question.
		 * Required
		 */
		explanation: FormControl<string | null | undefined>,

		/**
		 * The Card Dispute identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The results of the Dispute investigation.
		 * Required
		 */
		status: FormControl<Card_disputeStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_dispute`.
		 * Required
		 */
		type: FormControl<Card_disputeType | null | undefined>,
	}
	export function CreateCard_disputeFormGroup() {
		return new FormGroup<Card_disputeFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			disputed_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			explanation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Card_disputeStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Card_disputeType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Card_disputeAcceptance {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: Date;

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: string;

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Card_disputeAcceptanceFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateCard_disputeAcceptanceFormGroup() {
		return new FormGroup<Card_disputeAcceptanceFormProperties>({
			accepted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			card_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Card_disputeRejection {

		/**
		 * The identifier of the Card Dispute that was rejected.
		 * Required
		 */
		card_dispute_id: string;

		/**
		 * Why the Card Dispute was rejected.
		 * Required
		 */
		explanation: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.
		 * Required
		 */
		rejected_at: Date;
	}
	export interface Card_disputeRejectionFormProperties {

		/**
		 * The identifier of the Card Dispute that was rejected.
		 * Required
		 */
		card_dispute_id: FormControl<string | null | undefined>,

		/**
		 * Why the Card Dispute was rejected.
		 * Required
		 */
		explanation: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.
		 * Required
		 */
		rejected_at: FormControl<Date | null | undefined>,
	}
	export function CreateCard_disputeRejectionFormGroup() {
		return new FormGroup<Card_disputeRejectionFormProperties>({
			card_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			explanation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rejected_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Card_disputeStatus { pending_reviewing = 'pending_reviewing', accepted = 'accepted', rejected = 'rejected' }

	export enum Card_disputeType { card_dispute = 'card_dispute' }


	/** A list of Card Dispute objects */
	export interface Card_dispute_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Card_dispute>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Card Dispute objects */
	export interface Card_dispute_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateCard_dispute_listFormGroup() {
		return new FormGroup<Card_dispute_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of Card objects */
	export interface Card_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Card>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Card objects */
	export interface Card_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateCard_listFormGroup() {
		return new FormGroup<Card_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** This contains artwork and metadata relating to a Card's appearance in digital wallet apps like Apple Pay and Google Pay. For more information, see our guide on [digital card artwork](https://increase.com/documentation/card-art) */
	export interface Card_profile {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * A description you can use to identify the Card Profile.
		 * Required
		 */
		description: string;

		/**
		 * How Cards should appear in digital wallets such as Apple Pay. Different wallets will use these values to render card artwork appropriately for their app.
		 * Required
		 */
		digital_wallets: Card_profileDigital_wallets;

		/**
		 * The Card Profile identifier.
		 * Required
		 */
		id: string;

		/**
		 * The status of the Card Profile.
		 * Required
		 */
		status: Card_profileStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_profile`.
		 * Required
		 */
		type: Card_profileType;
	}

	/** This contains artwork and metadata relating to a Card's appearance in digital wallet apps like Apple Pay and Google Pay. For more information, see our guide on [digital card artwork](https://increase.com/documentation/card-art) */
	export interface Card_profileFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * A description you can use to identify the Card Profile.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Card Profile identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The status of the Card Profile.
		 * Required
		 */
		status: FormControl<Card_profileStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_profile`.
		 * Required
		 */
		type: FormControl<Card_profileType | null | undefined>,
	}
	export function CreateCard_profileFormGroup() {
		return new FormGroup<Card_profileFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Card_profileStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Card_profileType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Card_profileDigital_wallets {

		/**
		 * The identifier of the File containing the card's icon image.
		 * Required
		 */
		app_icon_file_id: string;

		/**
		 * The identifier of the File containing the card's front image.
		 * Required
		 */
		background_image_file_id: string;

		/**
		 * A user-facing description for the card itself.
		 * Required
		 */
		card_description: string;

		/**
		 * An email address the user can contact to receive support for their card.
		 * Required
		 */
		contact_email: string;

		/**
		 * A phone number the user can contact to receive support for their card.
		 * Required
		 */
		contact_phone: string;

		/**
		 * A website the user can visit to view and receive support for their card.
		 * Required
		 */
		contact_website: string;

		/**
		 * A user-facing description for whoever is issuing the card.
		 * Required
		 */
		issuer_name: string;

		/**
		 * The Card's text color, specified as an RGB triple.
		 * Required
		 */
		text_color: Card_profileDigital_walletsText_color;
	}
	export interface Card_profileDigital_walletsFormProperties {

		/**
		 * The identifier of the File containing the card's icon image.
		 * Required
		 */
		app_icon_file_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the File containing the card's front image.
		 * Required
		 */
		background_image_file_id: FormControl<string | null | undefined>,

		/**
		 * A user-facing description for the card itself.
		 * Required
		 */
		card_description: FormControl<string | null | undefined>,

		/**
		 * An email address the user can contact to receive support for their card.
		 * Required
		 */
		contact_email: FormControl<string | null | undefined>,

		/**
		 * A phone number the user can contact to receive support for their card.
		 * Required
		 */
		contact_phone: FormControl<string | null | undefined>,

		/**
		 * A website the user can visit to view and receive support for their card.
		 * Required
		 */
		contact_website: FormControl<string | null | undefined>,

		/**
		 * A user-facing description for whoever is issuing the card.
		 * Required
		 */
		issuer_name: FormControl<string | null | undefined>,
	}
	export function CreateCard_profileDigital_walletsFormGroup() {
		return new FormGroup<Card_profileDigital_walletsFormProperties>({
			app_icon_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			background_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			card_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contact_email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contact_phone: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			contact_website: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			issuer_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Card_profileDigital_walletsText_color {

		/**
		 * The value of the blue channel in the RGB color.
		 * Required
		 */
		blue: number;

		/**
		 * The value of the green channel in the RGB color.
		 * Required
		 */
		green: number;

		/**
		 * The value of the red channel in the RGB color.
		 * Required
		 */
		red: number;
	}
	export interface Card_profileDigital_walletsText_colorFormProperties {

		/**
		 * The value of the blue channel in the RGB color.
		 * Required
		 */
		blue: FormControl<number | null | undefined>,

		/**
		 * The value of the green channel in the RGB color.
		 * Required
		 */
		green: FormControl<number | null | undefined>,

		/**
		 * The value of the red channel in the RGB color.
		 * Required
		 */
		red: FormControl<number | null | undefined>,
	}
	export function CreateCard_profileDigital_walletsText_colorFormGroup() {
		return new FormGroup<Card_profileDigital_walletsText_colorFormProperties>({
			blue: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			green: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			red: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Card_profileStatus { pending = 'pending', rejected = 'rejected', active = 'active', archived = 'archived' }

	export enum Card_profileType { card_profile = 'card_profile' }


	/** A list of Card Profile objects */
	export interface Card_profile_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Card_profile>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Card Profile objects */
	export interface Card_profile_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateCard_profile_listFormGroup() {
		return new FormGroup<Card_profile_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Check Deposits allow you to deposit images of paper checks into your account. */
	export interface Check_deposit {

		/**
		 * The Account the check was deposited into.
		 * Required
		 */
		account_id: string;

		/**
		 * The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The ID for the File containing the image of the back of the check.
		 * Required
		 */
		back_image_file_id: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.
		 * Required
		 */
		deposit_acceptance: Check_depositDeposit_acceptance;

		/**
		 * If your deposit is rejected by Increase, this will contain details as to why it was rejected.
		 * Required
		 */
		deposit_rejection: Check_depositDeposit_rejection;

		/**
		 * If your deposit is returned, this will contain details as to why it was returned.
		 * Required
		 */
		deposit_return: Check_depositDeposit_return;

		/**
		 * The ID for the File containing the image of the front of the check.
		 * Required
		 */
		front_image_file_id: string;

		/**
		 * The deposit's identifier.
		 * Required
		 */
		id: string;

		/**
		 * The status of the Check Deposit.
		 * Required
		 */
		status: Check_depositStatus;

		/**
		 * The ID for the Transaction created by the deposit.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_deposit`.
		 * Required
		 */
		type: Check_depositType;
	}

	/** Check Deposits allow you to deposit images of paper checks into your account. */
	export interface Check_depositFormProperties {

		/**
		 * The Account the check was deposited into.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The ID for the File containing the image of the back of the check.
		 * Required
		 */
		back_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The ID for the File containing the image of the front of the check.
		 * Required
		 */
		front_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The deposit's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The status of the Check Deposit.
		 * Required
		 */
		status: FormControl<Check_depositStatus | null | undefined>,

		/**
		 * The ID for the Transaction created by the deposit.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_deposit`.
		 * Required
		 */
		type: FormControl<Check_depositType | null | undefined>,
	}
	export function CreateCheck_depositFormGroup() {
		return new FormGroup<Check_depositFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			back_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Check_depositStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_depositType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_depositDeposit_acceptance {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: string;

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: string;

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: string;

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: string;
	}
	export interface Check_depositDeposit_acceptanceFormProperties {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: FormControl<string | null | undefined>,
	}
	export function CreateCheck_depositDeposit_acceptanceFormGroup() {
		return new FormGroup<Check_depositDeposit_acceptanceFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			serial_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_depositDeposit_rejection {

		/**
		 * The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * Why the check deposit was rejected.
		 * Required
		 */
		reason: Check_depositDeposit_rejectionReason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected.
		 * Required
		 */
		rejected_at: Date;
	}
	export interface Check_depositDeposit_rejectionFormProperties {

		/**
		 * The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * Why the check deposit was rejected.
		 * Required
		 */
		reason: FormControl<Check_depositDeposit_rejectionReason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected.
		 * Required
		 */
		rejected_at: FormControl<Date | null | undefined>,
	}
	export function CreateCheck_depositDeposit_rejectionFormGroup() {
		return new FormGroup<Check_depositDeposit_rejectionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Check_depositDeposit_rejectionReason | null | undefined>(undefined, [Validators.required]),
			rejected_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_depositDeposit_rejectionReason { incomplete_image = 'incomplete_image', duplicate = 'duplicate', poor_image_quality = 'poor_image_quality', incorrect_amount = 'incorrect_amount', incorrect_recipient = 'incorrect_recipient', not_eligible_for_mobile_deposit = 'not_eligible_for_mobile_deposit', unknown = 'unknown' }

	export interface Check_depositDeposit_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		return_reason: Check_depositDeposit_returnReturn_reason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Check_depositDeposit_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		return_reason: FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateCheck_depositDeposit_returnFormGroup() {
		return new FormGroup<Check_depositDeposit_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			return_reason: new FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_depositDeposit_returnReturn_reason { ach_conversion_not_supported = 'ach_conversion_not_supported', closed_account = 'closed_account', duplicate_submission = 'duplicate_submission', insufficient_funds = 'insufficient_funds', no_account = 'no_account', not_authorized = 'not_authorized', stale_dated = 'stale_dated', stop_payment = 'stop_payment', unknown_reason = 'unknown_reason', unmatched_details = 'unmatched_details', unreadable_image = 'unreadable_image' }

	export enum Check_depositStatus { pending = 'pending', submitted = 'submitted', rejected = 'rejected', returned = 'returned' }

	export enum Check_depositType { check_deposit = 'check_deposit' }


	/** A list of Check Deposit objects */
	export interface Check_deposit_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Check_deposit>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Check Deposit objects */
	export interface Check_deposit_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateCheck_deposit_listFormGroup() {
		return new FormGroup<Check_deposit_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Check Transfers move funds from your Increase account by mailing a physical check. */
	export interface Check_transfer {

		/**
		 * The identifier of the Account from which funds will be transferred.
		 * Required
		 */
		account_id: string;

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: string;

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: string;

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: string;

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: string;

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		 * Required
		 */
		approval: Check_transferApproval;

		/**
		 * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		 * Required
		 */
		cancellation: Check_transferCancellation;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * After a check transfer is deposited, this will contain supplemental details.
		 * Required
		 */
		deposit: Check_transferDeposit;

		/**
		 * The Check transfer's identifier.
		 * Required
		 */
		id: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
		 * Required
		 */
		mailed_at: Date;

		/**
		 * The descriptor that will be printed on the memo field on the check.
		 * Required
		 */
		message: string;

		/**
		 * The descriptor that will be printed on the letter included with the check.
		 * Required
		 */
		note: string;

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: string;

		/**
		 * The return address to be printed on the check.
		 * Required
		 */
		return_address: Check_transferReturn_address;

		/**
		 * After a check transfer is returned, this will contain supplemental details. A check transfer is returned when the receiver mails a never deposited check back to the bank printed on the check.
		 * Required
		 */
		return_details: Check_transferReturn_details;

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: Check_transferStatus;

		/**
		 * After a stop-payment is requested on the check, this will contain supplemental details.
		 * Required
		 */
		stop_payment_request: Check_transferStop_payment_request;

		/**
		 * After the transfer is submitted, this will contain supplemental details.
		 * Required
		 */
		submission: Check_transferSubmission;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
		 * Required
		 */
		submitted_at: Date;

		/**
		 * The ID for the transaction caused by the transfer.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer`.
		 * Required
		 */
		type: Check_transferType;
	}

	/** Check Transfers move funds from your Increase account by mailing a physical check. */
	export interface Check_transferFormProperties {

		/**
		 * The identifier of the Account from which funds will be transferred.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Check transfer's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
		 * Required
		 */
		mailed_at: FormControl<Date | null | undefined>,

		/**
		 * The descriptor that will be printed on the memo field on the check.
		 * Required
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * The descriptor that will be printed on the letter included with the check.
		 * Required
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: FormControl<Check_transferStatus | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
		 * Required
		 */
		submitted_at: FormControl<Date | null | undefined>,

		/**
		 * The ID for the transaction caused by the transfer.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer`.
		 * Required
		 */
		type: FormControl<Check_transferType | null | undefined>,
	}
	export function CreateCheck_transferFormGroup() {
		return new FormGroup<Check_transferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mailed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Check_transferStatus | null | undefined>(undefined, [Validators.required]),
			submitted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_transferApproval {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: Date;

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: string;
	}
	export interface Check_transferApprovalFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: FormControl<string | null | undefined>,
	}
	export function CreateCheck_transferApprovalFormGroup() {
		return new FormGroup<Check_transferApprovalFormProperties>({
			approved_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			approved_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_transferCancellation {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: Date;

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: string;
	}
	export interface Check_transferCancellationFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: FormControl<string | null | undefined>,
	}
	export function CreateCheck_transferCancellationFormGroup() {
		return new FormGroup<Check_transferCancellationFormProperties>({
			canceled_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			canceled_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_transferDeposit {

		/**
		 * The ID for the File containing the image of the rear of the check.
		 * Required
		 */
		back_image_file_id: string;

		/**
		 * When the check was deposited.
		 * Required
		 */
		deposited_at: Date;

		/**
		 * The ID for the File containing the image of the front of the check.
		 * Required
		 */
		front_image_file_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
		 * Required
		 */
		type: Check_transferDepositType;
	}
	export interface Check_transferDepositFormProperties {

		/**
		 * The ID for the File containing the image of the rear of the check.
		 * Required
		 */
		back_image_file_id: FormControl<string | null | undefined>,

		/**
		 * When the check was deposited.
		 * Required
		 */
		deposited_at: FormControl<Date | null | undefined>,

		/**
		 * The ID for the File containing the image of the front of the check.
		 * Required
		 */
		front_image_file_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
		 * Required
		 */
		type: FormControl<Check_transferDepositType | null | undefined>,
	}
	export function CreateCheck_transferDepositFormGroup() {
		return new FormGroup<Check_transferDepositFormProperties>({
			back_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deposited_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferDepositType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_transferDepositType { check_transfer_deposit = 'check_transfer_deposit' }

	export interface Check_transferReturn_address {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The name of the address.
		 * Required
		 */
		name: string;

		/**
		 * The US state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The postal code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface Check_transferReturn_addressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The name of the address.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The US state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCheck_transferReturn_addressFormGroup() {
		return new FormGroup<Check_transferReturn_addressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Check_transferReturn_details {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: string;

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: Check_transferReturn_detailsReason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Check_transferReturn_detailsFormProperties {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: FormControl<Check_transferReturn_detailsReason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateCheck_transferReturn_detailsFormGroup() {
		return new FormGroup<Check_transferReturn_detailsFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Check_transferReturn_detailsReason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_transferReturn_detailsReason { mail_delivery_failure = 'mail_delivery_failure', refused_by_recipient = 'refused_by_recipient' }

	export enum Check_transferStatus { pending_approval = 'pending_approval', pending_submission = 'pending_submission', submitted = 'submitted', pending_mailing = 'pending_mailing', mailed = 'mailed', canceled = 'canceled', deposited = 'deposited', stopped = 'stopped', returned = 'returned', rejected = 'rejected', requires_attention = 'requires_attention' }

	export interface Check_transferStop_payment_request {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: Date;

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: Check_transferStop_payment_requestType;
	}
	export interface Check_transferStop_payment_requestFormProperties {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: FormControl<Date | null | undefined>,

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: FormControl<Check_transferStop_payment_requestType | null | undefined>,
	}
	export function CreateCheck_transferStop_payment_requestFormGroup() {
		return new FormGroup<Check_transferStop_payment_requestFormProperties>({
			requested_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferStop_payment_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_transferStop_payment_requestType { check_transfer_stop_payment_request = 'check_transfer_stop_payment_request' }

	export interface Check_transferSubmission {

		/**
		 * The identitying number of the check.
		 * Required
		 */
		check_number: string;

		/**
		 * When this check transfer was submitted to our check printer.
		 * Required
		 */
		submitted_at: Date;
	}
	export interface Check_transferSubmissionFormProperties {

		/**
		 * The identitying number of the check.
		 * Required
		 */
		check_number: FormControl<string | null | undefined>,

		/**
		 * When this check transfer was submitted to our check printer.
		 * Required
		 */
		submitted_at: FormControl<Date | null | undefined>,
	}
	export function CreateCheck_transferSubmissionFormGroup() {
		return new FormGroup<Check_transferSubmissionFormProperties>({
			check_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			submitted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Check_transferType { check_transfer = 'check_transfer' }


	/** A list of Check Transfer objects */
	export interface Check_transfer_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Check_transfer>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Check Transfer objects */
	export interface Check_transfer_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateCheck_transfer_listFormGroup() {
		return new FormGroup<Check_transfer_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Complete_a_sandbox_real_time_payments_transfer_parameters {

		/** If set, the simulation will reject the transfer. */
		rejection?: Complete_a_sandbox_real_time_payments_transfer_parametersRejection;
	}
	export interface Complete_a_sandbox_real_time_payments_transfer_parametersFormProperties {
	}
	export function CreateComplete_a_sandbox_real_time_payments_transfer_parametersFormGroup() {
		return new FormGroup<Complete_a_sandbox_real_time_payments_transfer_parametersFormProperties>({
		});

	}

	export interface Complete_a_sandbox_real_time_payments_transfer_parametersRejection {

		/**
		 * The reason code that the simulated rejection will have.
		 * Required
		 */
		reject_reason_code: Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code;
	}
	export interface Complete_a_sandbox_real_time_payments_transfer_parametersRejectionFormProperties {

		/**
		 * The reason code that the simulated rejection will have.
		 * Required
		 */
		reject_reason_code: FormControl<Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code | null | undefined>,
	}
	export function CreateComplete_a_sandbox_real_time_payments_transfer_parametersRejectionFormGroup() {
		return new FormGroup<Complete_a_sandbox_real_time_payments_transfer_parametersRejectionFormProperties>({
			reject_reason_code: new FormControl<Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code { account_closed = 'account_closed', account_blocked = 'account_blocked', invalid_creditor_account_type = 'invalid_creditor_account_type', invalid_creditor_account_number = 'invalid_creditor_account_number', invalid_creditor_financial_institution_identifier = 'invalid_creditor_financial_institution_identifier', end_customer_deceased = 'end_customer_deceased', narrative = 'narrative', transaction_forbidden = 'transaction_forbidden', transaction_type_not_supported = 'transaction_type_not_supported', unexpected_amount = 'unexpected_amount', amount_exceeds_bank_limits = 'amount_exceeds_bank_limits', invalid_creditor_address = 'invalid_creditor_address', unknown_end_customer = 'unknown_end_customer', invalid_debtor_address = 'invalid_debtor_address', timeout = 'timeout', unsupported_message_for_recipient = 'unsupported_message_for_recipient', recipient_connection_not_available = 'recipient_connection_not_available', real_time_payments_suspended = 'real_time_payments_suspended', instructed_agent_signed_off = 'instructed_agent_signed_off', processing_error = 'processing_error', other = 'other' }

	export interface Create_a_bookkeeping_account_parameters {

		/** The entity, if `compliance_category` is `commingled_cash`. */
		account_id?: string | null;

		/** The account compliance category. */
		compliance_category?: Bookkeeping_accountCompliance_category | null;

		/** The entity, if `compliance_category` is `customer_balance`. */
		entity_id?: string | null;

		/**
		 * The name you choose for the account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;
	}
	export interface Create_a_bookkeeping_account_parametersFormProperties {

		/** The entity, if `compliance_category` is `commingled_cash`. */
		account_id: FormControl<string | null | undefined>,

		/** The account compliance category. */
		compliance_category: FormControl<Bookkeeping_accountCompliance_category | null | undefined>,

		/** The entity, if `compliance_category` is `customer_balance`. */
		entity_id: FormControl<string | null | undefined>,

		/**
		 * The name you choose for the account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_bookkeeping_account_parametersFormGroup() {
		return new FormGroup<Create_a_bookkeeping_account_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
			compliance_category: new FormControl<Bookkeeping_accountCompliance_category | null | undefined>(undefined),
			entity_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_bookkeeping_entry_set_parameters {

		/** The date of the transaction. If `transaction_id` is provided, this must match the `created_at` field on that resource. */
		date?: Date | null;

		/**
		 * The bookkeeping entries.
		 * Required
		 */
		Create_a_bookkeeping_entry_set_parametersEntries: Array<Create_a_bookkeeping_entry_set_parametersEntries>;

		/** The identifier of the Transaction related to this entry set, if any. */
		transaction_id?: string | null;
	}
	export interface Create_a_bookkeeping_entry_set_parametersFormProperties {

		/** The date of the transaction. If `transaction_id` is provided, this must match the `created_at` field on that resource. */
		date: FormControl<Date | null | undefined>,

		/** The identifier of the Transaction related to this entry set, if any. */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_bookkeeping_entry_set_parametersFormGroup() {
		return new FormGroup<Create_a_bookkeeping_entry_set_parametersFormProperties>({
			date: new FormControl<Date | null | undefined>(undefined),
			transaction_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Create_a_bookkeeping_entry_set_parametersEntries {

		/**
		 * The identifier for the Bookkeeping Account impacted by this entry.
		 * Required
		 */
		account_id: string;

		/**
		 * The entry amount in the minor unit of the account currency. For dollars, for example, this is cents. Debit entries have positive amounts; credit entries have negative amounts.
		 * Required
		 */
		amount: number;
	}
	export interface Create_a_bookkeeping_entry_set_parametersEntriesFormProperties {

		/**
		 * The identifier for the Bookkeeping Account impacted by this entry.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The entry amount in the minor unit of the account currency. For dollars, for example, this is cents. Debit entries have positive amounts; credit entries have negative amounts.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,
	}
	export function CreateCreate_a_bookkeeping_entry_set_parametersEntriesFormGroup() {
		return new FormGroup<Create_a_bookkeeping_entry_set_parametersEntriesFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_a_card_dispute_parameters {

		/**
		 * The Transaction you wish to dispute. This Transaction must have a `source_type` of `card_settlement`.
		 * Required
		 */
		disputed_transaction_id: string;

		/**
		 * Why you are disputing this Transaction.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		explanation: string;
	}
	export interface Create_a_card_dispute_parametersFormProperties {

		/**
		 * The Transaction you wish to dispute. This Transaction must have a `source_type` of `card_settlement`.
		 * Required
		 */
		disputed_transaction_id: FormControl<string | null | undefined>,

		/**
		 * Why you are disputing this Transaction.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		explanation: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_card_dispute_parametersFormGroup() {
		return new FormGroup<Create_a_card_dispute_parametersFormProperties>({
			disputed_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			explanation: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_card_parameters {

		/**
		 * The Account the card should belong to.
		 * Required
		 */
		account_id: string;

		/** The card's billing address. */
		billing_address?: Create_a_card_parametersBilling_address;

		/**
		 * The description you choose to give the card.
		 * Max length: 200
		 * Min length: 1
		 */
		description?: string | null;

		/** The contact information used in the two-factor steps for digital wallet card creation. To add the card to a digital wallet, you may supply an email or phone number with this request. Otherwise, subscribe and then action a Real Time Decision with the category `digital_wallet_token_requested` or `digital_wallet_authentication_requested`. */
		digital_wallet?: Create_a_card_parametersDigital_wallet;
	}
	export interface Create_a_card_parametersFormProperties {

		/**
		 * The Account the card should belong to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The description you choose to give the card.
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_card_parametersFormGroup() {
		return new FormGroup<Create_a_card_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_card_parametersBilling_address {

		/**
		 * The city of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the billing address.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The postal code of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		postal_code: string;

		/**
		 * The US state of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;
	}
	export interface Create_a_card_parametersBilling_addressFormProperties {

		/**
		 * The city of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the billing address.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The postal code of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The US state of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_card_parametersBilling_addressFormGroup() {
		return new FormGroup<Create_a_card_parametersBilling_addressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_card_parametersDigital_wallet {

		/** The card profile assigned to this digital card. Card profiles may also be assigned at the program level. */
		card_profile_id?: string | null;

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode over email.
		 * Max length: 200
		 * Min length: 1
		 */
		email?: string | null;

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Max length: 200
		 * Min length: 1
		 */
		phone?: string | null;
	}
	export interface Create_a_card_parametersDigital_walletFormProperties {

		/** The card profile assigned to this digital card. Card profiles may also be assigned at the program level. */
		card_profile_id: FormControl<string | null | undefined>,

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode over email.
		 * Max length: 200
		 * Min length: 1
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Max length: 200
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_card_parametersDigital_walletFormGroup() {
		return new FormGroup<Create_a_card_parametersDigital_walletFormProperties>({
			card_profile_id: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_card_profile_parameters {

		/**
		 * A description you can use to identify the Card Profile.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/**
		 * How Cards should appear in digital wallets such as Apple Pay. Different wallets will use these values to render card artwork appropriately for their app.
		 * Required
		 */
		digital_wallets: Create_a_card_profile_parametersDigital_wallets;
	}
	export interface Create_a_card_profile_parametersFormProperties {

		/**
		 * A description you can use to identify the Card Profile.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_card_profile_parametersFormGroup() {
		return new FormGroup<Create_a_card_profile_parametersFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_card_profile_parametersDigital_wallets {

		/**
		 * The identifier of the File containing the card's icon image.
		 * Required
		 */
		app_icon_file_id: string;

		/**
		 * The identifier of the File containing the card's front image.
		 * Required
		 */
		background_image_file_id: string;

		/**
		 * A user-facing description for the card itself.
		 * Required
		 * Max length: 32
		 * Min length: 1
		 */
		card_description: string;

		/**
		 * An email address the user can contact to receive support for their card.
		 * Max length: 32
		 * Min length: 1
		 */
		contact_email?: string | null;

		/**
		 * A phone number the user can contact to receive support for their card.
		 * Max length: 32
		 * Min length: 1
		 */
		contact_phone?: string | null;

		/** A website the user can visit to view and receive support for their card. */
		contact_website?: string | null;

		/**
		 * A user-facing description for whoever is issuing the card.
		 * Required
		 * Max length: 32
		 * Min length: 1
		 */
		issuer_name: string;

		/** The Card's text color, specified as an RGB triple. The default is white. */
		text_color?: Create_a_card_profile_parametersDigital_walletsText_color;
	}
	export interface Create_a_card_profile_parametersDigital_walletsFormProperties {

		/**
		 * The identifier of the File containing the card's icon image.
		 * Required
		 */
		app_icon_file_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the File containing the card's front image.
		 * Required
		 */
		background_image_file_id: FormControl<string | null | undefined>,

		/**
		 * A user-facing description for the card itself.
		 * Required
		 * Max length: 32
		 * Min length: 1
		 */
		card_description: FormControl<string | null | undefined>,

		/**
		 * An email address the user can contact to receive support for their card.
		 * Max length: 32
		 * Min length: 1
		 */
		contact_email: FormControl<string | null | undefined>,

		/**
		 * A phone number the user can contact to receive support for their card.
		 * Max length: 32
		 * Min length: 1
		 */
		contact_phone: FormControl<string | null | undefined>,

		/** A website the user can visit to view and receive support for their card. */
		contact_website: FormControl<string | null | undefined>,

		/**
		 * A user-facing description for whoever is issuing the card.
		 * Required
		 * Max length: 32
		 * Min length: 1
		 */
		issuer_name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_card_profile_parametersDigital_walletsFormGroup() {
		return new FormGroup<Create_a_card_profile_parametersDigital_walletsFormProperties>({
			app_icon_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			background_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			card_description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(32)]),
			contact_email: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(32)]),
			contact_phone: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(32)]),
			contact_website: new FormControl<string | null | undefined>(undefined),
			issuer_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(32)]),
		});

	}

	export interface Create_a_card_profile_parametersDigital_walletsText_color {

		/**
		 * The value of the blue channel in the RGB color.
		 * Required
		 * Minimum: 0
		 * Maximum: 255
		 */
		blue: number;

		/**
		 * The value of the green channel in the RGB color.
		 * Required
		 * Minimum: 0
		 * Maximum: 255
		 */
		green: number;

		/**
		 * The value of the red channel in the RGB color.
		 * Required
		 * Minimum: 0
		 * Maximum: 255
		 */
		red: number;
	}
	export interface Create_a_card_profile_parametersDigital_walletsText_colorFormProperties {

		/**
		 * The value of the blue channel in the RGB color.
		 * Required
		 * Minimum: 0
		 * Maximum: 255
		 */
		blue: FormControl<number | null | undefined>,

		/**
		 * The value of the green channel in the RGB color.
		 * Required
		 * Minimum: 0
		 * Maximum: 255
		 */
		green: FormControl<number | null | undefined>,

		/**
		 * The value of the red channel in the RGB color.
		 * Required
		 * Minimum: 0
		 * Maximum: 255
		 */
		red: FormControl<number | null | undefined>,
	}
	export function CreateCreate_a_card_profile_parametersDigital_walletsText_colorFormGroup() {
		return new FormGroup<Create_a_card_profile_parametersDigital_walletsText_colorFormProperties>({
			blue: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(255)]),
			green: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(255)]),
			red: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0), Validators.max(255)]),
		});

	}

	export interface Create_a_check_deposit_parameters {

		/**
		 * The identifier for the Account to deposit the check in.
		 * Required
		 */
		account_id: string;

		/**
		 * The deposit amount in the minor unit of the account currency. For dollars, for example, this is cents.
		 * Required
		 * Minimum: 0
		 */
		amount: number;

		/**
		 * The File containing the check's back image.
		 * Required
		 */
		back_image_file_id: string;

		/**
		 * The currency to use for the deposit.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		currency: string;

		/**
		 * The File containing the check's front image.
		 * Required
		 */
		front_image_file_id: string;
	}
	export interface Create_a_check_deposit_parametersFormProperties {

		/**
		 * The identifier for the Account to deposit the check in.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The deposit amount in the minor unit of the account currency. For dollars, for example, this is cents.
		 * Required
		 * Minimum: 0
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The File containing the check's back image.
		 * Required
		 */
		back_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The currency to use for the deposit.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * The File containing the check's front image.
		 * Required
		 */
		front_image_file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_check_deposit_parametersFormGroup() {
		return new FormGroup<Create_a_check_deposit_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			back_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_a_check_transfer_parameters {

		/**
		 * The identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: string;

		/**
		 * The city of the check's destination.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		address_city: string;

		/**
		 * The street address of the check's destination.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		address_line1: string;

		/**
		 * The second line of the address of the check's destination.
		 * Max length: 250
		 * Min length: 1
		 */
		address_line2?: string | null;

		/**
		 * The state of the check's destination.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		address_state: string;

		/**
		 * The postal code of the check's destination.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		address_zip: string;

		/**
		 * The transfer amount in cents.
		 * Required
		 * Minimum: 1
		 */
		amount: number;

		/**
		 * The descriptor that will be printed on the memo field on the check.
		 * Required
		 * Max length: 73
		 * Min length: 1
		 */
		message: string;

		/**
		 * The descriptor that will be printed on the letter included with the check.
		 * Max length: 200
		 * Min length: 1
		 */
		note?: string | null;

		/**
		 * The name that will be printed on the check.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		recipient_name: string;

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval?: boolean | null;

		/** The return address to be printed on the check. If omitted this will default to the address of the Entity of the Account used to make the Check Transfer. */
		return_address?: Create_a_check_transfer_parametersReturn_address;
	}
	export interface Create_a_check_transfer_parametersFormProperties {

		/**
		 * The identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The city of the check's destination.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * The street address of the check's destination.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address of the check's destination.
		 * Max length: 250
		 * Min length: 1
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The state of the check's destination.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the check's destination.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in cents.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The descriptor that will be printed on the memo field on the check.
		 * Required
		 * Max length: 73
		 * Min length: 1
		 */
		message: FormControl<string | null | undefined>,

		/**
		 * The descriptor that will be printed on the letter included with the check.
		 * Max length: 200
		 * Min length: 1
		 */
		note: FormControl<string | null | undefined>,

		/**
		 * The name that will be printed on the check.
		 * Required
		 * Max length: 250
		 * Min length: 1
		 */
		recipient_name: FormControl<string | null | undefined>,

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval: FormControl<boolean | null | undefined>,
	}
	export function CreateCreate_a_check_transfer_parametersFormGroup() {
		return new FormGroup<Create_a_check_transfer_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(250)]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			message: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(73)]),
			note: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
			require_approval: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Create_a_check_transfer_parametersReturn_address {

		/**
		 * The city of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the return address.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The name of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;

		/**
		 * The US state of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The postal code of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_a_check_transfer_parametersReturn_addressFormProperties {

		/**
		 * The city of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the return address.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The name of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The US state of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the return address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_check_transfer_parametersReturn_addressFormGroup() {
		return new FormGroup<Create_a_check_transfer_parametersReturn_addressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_file_parameters {

		/**
		 * The description you choose to give the File.
		 * Max length: 200
		 * Min length: 1
		 */
		description?: string | null;

		/**
		 * The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol.
		 * Required
		 */
		file: string;

		/**
		 * What the File will be used for in Increase's systems.
		 * Required
		 */
		purpose: Create_a_file_parametersPurpose;
	}
	export interface Create_a_file_parametersFormProperties {

		/**
		 * The description you choose to give the File.
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol.
		 * Required
		 */
		file: FormControl<string | null | undefined>,

		/**
		 * What the File will be used for in Increase's systems.
		 * Required
		 */
		purpose: FormControl<Create_a_file_parametersPurpose | null | undefined>,
	}
	export function CreateCreate_a_file_parametersFormGroup() {
		return new FormGroup<Create_a_file_parametersFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			file: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			purpose: new FormControl<Create_a_file_parametersPurpose | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Create_a_file_parametersPurpose { check_image_front = 'check_image_front', check_image_back = 'check_image_back', form_ss_4 = 'form_ss_4', identity_document = 'identity_document', other = 'other', trust_formation_document = 'trust_formation_document', digital_wallet_artwork = 'digital_wallet_artwork', digital_wallet_app_icon = 'digital_wallet_app_icon', document_request = 'document_request', entity_supplemental_document = 'entity_supplemental_document' }

	export interface Create_a_limit_parameters {

		/** The interval for the metric. Required if `metric` is `count` or `volume`. */
		interval?: Create_a_limit_parametersInterval | null;

		/**
		 * The metric for the limit.
		 * Required
		 */
		metric: Create_a_limit_parametersMetric;

		/**
		 * The identifier of the Account or Account Number you wish to associate the limit with.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		model_id: string;

		/**
		 * The value to test the limit against.
		 * Required
		 * Minimum: 0
		 */
		value: number;
	}
	export interface Create_a_limit_parametersFormProperties {

		/** The interval for the metric. Required if `metric` is `count` or `volume`. */
		interval: FormControl<Create_a_limit_parametersInterval | null | undefined>,

		/**
		 * The metric for the limit.
		 * Required
		 */
		metric: FormControl<Create_a_limit_parametersMetric | null | undefined>,

		/**
		 * The identifier of the Account or Account Number you wish to associate the limit with.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		model_id: FormControl<string | null | undefined>,

		/**
		 * The value to test the limit against.
		 * Required
		 * Minimum: 0
		 */
		value: FormControl<number | null | undefined>,
	}
	export function CreateCreate_a_limit_parametersFormGroup() {
		return new FormGroup<Create_a_limit_parametersFormProperties>({
			interval: new FormControl<Create_a_limit_parametersInterval | null | undefined>(undefined),
			metric: new FormControl<Create_a_limit_parametersMetric | null | undefined>(undefined, [Validators.required]),
			model_id: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
		});

	}

	export enum Create_a_limit_parametersInterval { transaction = 'transaction', day = 'day', week = 'week', month = 'month', year = 'year', all_time = 'all_time' }

	export enum Create_a_limit_parametersMetric { count = 'count', volume = 'volume' }

	export interface Create_a_real_time_payments_transfer_parameters {

		/**
		 * The transfer amount in USD cents. For Real Time Payments transfers, must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: number;

		/**
		 * The name of the transfer's recipient.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		creditor_name: string;

		/**
		 * The destination account number.
		 * Max length: 34
		 * Min length: 1
		 */
		destination_account_number?: string | null;

		/**
		 * The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Max length: 9
		 * Min length: 9
		 */
		destination_routing_number?: string | null;

		/** The ID of an External Account to initiate a transfer to. If this parameter is provided, `destination_account_number` and `destination_routing_number` must be absent. */
		external_account_id?: string | null;

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		remittance_information: string;

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval?: boolean | null;

		/**
		 * The identifier of the Account Number from which to send the transfer.
		 * Required
		 */
		source_account_number_id: string;
	}
	export interface Create_a_real_time_payments_transfer_parametersFormProperties {

		/**
		 * The transfer amount in USD cents. For Real Time Payments transfers, must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name of the transfer's recipient.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The destination account number.
		 * Max length: 34
		 * Min length: 1
		 */
		destination_account_number: FormControl<string | null | undefined>,

		/**
		 * The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Max length: 9
		 * Min length: 9
		 */
		destination_routing_number: FormControl<string | null | undefined>,

		/** The ID of an External Account to initiate a transfer to. If this parameter is provided, `destination_account_number` and `destination_routing_number` must be absent. */
		external_account_id: FormControl<string | null | undefined>,

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		remittance_information: FormControl<string | null | undefined>,

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval: FormControl<boolean | null | undefined>,

		/**
		 * The identifier of the Account Number from which to send the transfer.
		 * Required
		 */
		source_account_number_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_real_time_payments_transfer_parametersFormGroup() {
		return new FormGroup<Create_a_real_time_payments_transfer_parametersFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(140)]),
			destination_account_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(34)]),
			destination_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(9), Validators.maxLength(9)]),
			external_account_id: new FormControl<string | null | undefined>(undefined),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(140)]),
			require_approval: new FormControl<boolean | null | undefined>(undefined),
			source_account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_a_supplemental_document_for_an_entity_parameters {

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_a_supplemental_document_for_an_entity_parametersFormProperties {

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_supplemental_document_for_an_entity_parametersFormGroup() {
		return new FormGroup<Create_a_supplemental_document_for_an_entity_parametersFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_a_wire_drawdown_request_parameters {

		/**
		 * The Account Number to which the recipient should send funds.
		 * Required
		 */
		account_number_id: string;

		/**
		 * The amount requested from the recipient, in cents.
		 * Required
		 * Minimum: 1
		 */
		amount: number;

		/**
		 * A message the recipient will see as part of the request.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		message_to_recipient: string;

		/**
		 * The drawdown request's recipient's account number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		recipient_account_number: string;

		/**
		 * Line 1 of the drawdown request's recipient's address.
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_address_line1?: string | null;

		/**
		 * Line 2 of the drawdown request's recipient's address.
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_address_line2?: string | null;

		/**
		 * Line 3 of the drawdown request's recipient's address.
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_address_line3?: string | null;

		/**
		 * The drawdown request's recipient's name.
		 * Required
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_name: string;

		/**
		 * The drawdown request's recipient's routing number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		recipient_routing_number: string;
	}
	export interface Create_a_wire_drawdown_request_parametersFormProperties {

		/**
		 * The Account Number to which the recipient should send funds.
		 * Required
		 */
		account_number_id: FormControl<string | null | undefined>,

		/**
		 * The amount requested from the recipient, in cents.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * A message the recipient will see as part of the request.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's recipient's account number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		recipient_account_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the drawdown request's recipient's address.
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_address_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the drawdown request's recipient's address.
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_address_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the drawdown request's recipient's address.
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_address_line3: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's recipient's name.
		 * Required
		 * Max length: 35
		 * Min length: 1
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's recipient's routing number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		recipient_routing_number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_wire_drawdown_request_parametersFormGroup() {
		return new FormGroup<Create_a_wire_drawdown_request_parametersFormProperties>({
			account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(140)]),
			recipient_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			recipient_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			recipient_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			recipient_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(35)]),
			recipient_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_a_wire_transfer_parameters {

		/**
		 * The identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: string;

		/**
		 * The account number for the destination account.
		 * Max length: 200
		 * Min length: 1
		 */
		account_number?: string | null;

		/**
		 * The transfer amount in cents.
		 * Required
		 * Minimum: 1
		 */
		amount: number;

		/**
		 * The beneficiary's address line 1.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line1?: string | null;

		/**
		 * The beneficiary's address line 2.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line2?: string | null;

		/**
		 * The beneficiary's address line 3.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line3?: string | null;

		/**
		 * The beneficiary's name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_name: string;

		/** The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number` and `routing_number` must be absent. */
		external_account_id?: string | null;

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		message_to_recipient: string;

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval?: boolean | null;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number?: string | null;
	}
	export interface Create_a_wire_transfer_parametersFormProperties {

		/**
		 * The identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The account number for the destination account.
		 * Max length: 200
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in cents.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The beneficiary's address line 1.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/**
		 * The beneficiary's address line 2.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/**
		 * The beneficiary's address line 3.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/**
		 * The beneficiary's name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_name: FormControl<string | null | undefined>,

		/** The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number` and `routing_number` must be absent. */
		external_account_id: FormControl<string | null | undefined>,

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval: FormControl<boolean | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_a_wire_transfer_parametersFormGroup() {
		return new FormGroup<Create_a_wire_transfer_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			external_account_id: new FormControl<string | null | undefined>(undefined),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			require_approval: new FormControl<boolean | null | undefined>(undefined),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(9), Validators.maxLength(9)]),
		});

	}

	export interface Create_an_account_number_parameters {

		/**
		 * The Account the Account Number should belong to.
		 * Required
		 */
		account_id: string;

		/**
		 * The name you choose for the Account Number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;
	}
	export interface Create_an_account_number_parametersFormProperties {

		/**
		 * The Account the Account Number should belong to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The name you choose for the Account Number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_account_number_parametersFormGroup() {
		return new FormGroup<Create_an_account_number_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_account_parameters {

		/** The identifier for the Entity that will own the Account. */
		entity_id?: string | null;

		/** The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be `informational`. */
		informational_entity_id?: string | null;

		/**
		 * The name you choose for the Account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;

		/** The identifier for the Program that this Account falls under. */
		program_id?: string | null;
	}
	export interface Create_an_account_parametersFormProperties {

		/** The identifier for the Entity that will own the Account. */
		entity_id: FormControl<string | null | undefined>,

		/** The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be `informational`. */
		informational_entity_id: FormControl<string | null | undefined>,

		/**
		 * The name you choose for the Account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/** The identifier for the Program that this Account falls under. */
		program_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_account_parametersFormGroup() {
		return new FormGroup<Create_an_account_parametersFormProperties>({
			entity_id: new FormControl<string | null | undefined>(undefined),
			informational_entity_id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			program_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Create_an_account_transfer_parameters {

		/**
		 * The identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: string;

		/**
		 * The transfer amount in the minor unit of the account currency. For dollars, for example, this is cents.
		 * Required
		 * Minimum: 1
		 */
		amount: number;

		/**
		 * The description you choose to give the transfer.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/**
		 * The identifier for the account that will receive the transfer.
		 * Required
		 */
		destination_account_id: string;

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval?: boolean | null;
	}
	export interface Create_an_account_transfer_parametersFormProperties {

		/**
		 * The identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in the minor unit of the account currency. For dollars, for example, this is cents.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description you choose to give the transfer.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The identifier for the account that will receive the transfer.
		 * Required
		 */
		destination_account_id: FormControl<string | null | undefined>,

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval: FormControl<boolean | null | undefined>,
	}
	export function CreateCreate_an_account_transfer_parametersFormGroup() {
		return new FormGroup<Create_an_account_transfer_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			destination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			require_approval: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface Create_an_ach_prenotification_parameters {

		/**
		 * The account number for the destination account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * Additional information that will be sent to the recipient.
		 * Max length: 80
		 * Min length: 1
		 */
		addendum?: string | null;

		/**
		 * The description of the date of the transfer.
		 * Max length: 6
		 * Min length: 1
		 */
		company_descriptive_date?: string | null;

		/**
		 * The data you choose to associate with the transfer.
		 * Max length: 20
		 * Min length: 1
		 */
		company_discretionary_data?: string | null;

		/**
		 * The description of the transfer you wish to be shown to the recipient.
		 * Max length: 10
		 * Min length: 1
		 */
		company_entry_description?: string | null;

		/**
		 * The name by which the recipient knows you.
		 * Max length: 16
		 * Min length: 1
		 */
		company_name?: string | null;

		/** Whether the Prenotification is for a future debit or credit. */
		credit_debit_indicator?: Ach_prenotificationCredit_debit_indicator | null;

		/** The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		effective_date?: Date | null;

		/**
		 * Your identifer for the transfer recipient.
		 * Max length: 22
		 * Min length: 1
		 */
		individual_id?: string | null;

		/**
		 * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
		 * Max length: 22
		 * Min length: 1
		 */
		individual_name?: string | null;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number: string;

		/** The Standard Entry Class (SEC) code to use for the ACH Prenotification. */
		standard_entry_class_code?: Ach_transferStandard_entry_class_code | null;
	}
	export interface Create_an_ach_prenotification_parametersFormProperties {

		/**
		 * The account number for the destination account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Additional information that will be sent to the recipient.
		 * Max length: 80
		 * Min length: 1
		 */
		addendum: FormControl<string | null | undefined>,

		/**
		 * The description of the date of the transfer.
		 * Max length: 6
		 * Min length: 1
		 */
		company_descriptive_date: FormControl<string | null | undefined>,

		/**
		 * The data you choose to associate with the transfer.
		 * Max length: 20
		 * Min length: 1
		 */
		company_discretionary_data: FormControl<string | null | undefined>,

		/**
		 * The description of the transfer you wish to be shown to the recipient.
		 * Max length: 10
		 * Min length: 1
		 */
		company_entry_description: FormControl<string | null | undefined>,

		/**
		 * The name by which the recipient knows you.
		 * Max length: 16
		 * Min length: 1
		 */
		company_name: FormControl<string | null | undefined>,

		/** Whether the Prenotification is for a future debit or credit. */
		credit_debit_indicator: FormControl<Ach_prenotificationCredit_debit_indicator | null | undefined>,

		/** The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		effective_date: FormControl<Date | null | undefined>,

		/**
		 * Your identifer for the transfer recipient.
		 * Max length: 22
		 * Min length: 1
		 */
		individual_id: FormControl<string | null | undefined>,

		/**
		 * The name of the transfer recipient. This value is information and not verified by the recipient's bank.
		 * Max length: 22
		 * Min length: 1
		 */
		individual_name: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number: FormControl<string | null | undefined>,

		/** The Standard Entry Class (SEC) code to use for the ACH Prenotification. */
		standard_entry_class_code: FormControl<Ach_transferStandard_entry_class_code | null | undefined>,
	}
	export function CreateCreate_an_ach_prenotification_parametersFormGroup() {
		return new FormGroup<Create_an_ach_prenotification_parametersFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			addendum: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(80)]),
			company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(6)]),
			company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(20)]),
			company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(16)]),
			credit_debit_indicator: new FormControl<Ach_prenotificationCredit_debit_indicator | null | undefined>(undefined),
			effective_date: new FormControl<Date | null | undefined>(undefined),
			individual_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(22)]),
			individual_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(22)]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
			standard_entry_class_code: new FormControl<Ach_transferStandard_entry_class_code | null | undefined>(undefined),
		});

	}

	export interface Create_an_ach_return_parameters {

		/**
		 * The reason why this transfer will be returned. The most usual return codes are `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.
		 * Required
		 */
		reason: Create_an_ach_return_parametersReason;

		/**
		 * The transaction identifier of the Inbound ACH Transfer to return to the originating financial institution.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Create_an_ach_return_parametersFormProperties {

		/**
		 * The reason why this transfer will be returned. The most usual return codes are `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.
		 * Required
		 */
		reason: FormControl<Create_an_ach_return_parametersReason | null | undefined>,

		/**
		 * The transaction identifier of the Inbound ACH Transfer to return to the originating financial institution.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_ach_return_parametersFormGroup() {
		return new FormGroup<Create_an_ach_return_parametersFormProperties>({
			reason: new FormControl<Create_an_ach_return_parametersReason | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Create_an_ach_return_parametersReason { authorization_revoked_by_customer = 'authorization_revoked_by_customer', payment_stopped = 'payment_stopped', customer_advised_unauthorized_improper_ineligible_or_incomplete = 'customer_advised_unauthorized_improper_ineligible_or_incomplete', representative_payee_deceased_or_unable_to_continue_in_that_capacity = 'representative_payee_deceased_or_unable_to_continue_in_that_capacity', beneficiary_or_account_holder_deceased = 'beneficiary_or_account_holder_deceased', credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver', duplicate_entry = 'duplicate_entry', corporate_customer_advised_not_authorized = 'corporate_customer_advised_not_authorized' }

	export interface Create_an_ach_transfer_parameters {

		/**
		 * The Increase identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: string;

		/**
		 * The account number for the destination account.
		 * Max length: 17
		 * Min length: 1
		 */
		account_number?: string | null;

		/**
		 * Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank.
		 * Max length: 80
		 * Min length: 1
		 */
		addendum?: string | null;

		/**
		 * The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
		 * Required
		 */
		amount: number;

		/**
		 * The description of the date of the transfer, usually in the format `YYMMDD`. This is included in the transfer data sent to the receiving bank.
		 * Max length: 6
		 * Min length: 1
		 */
		company_descriptive_date?: string | null;

		/**
		 * The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank.
		 * Max length: 20
		 * Min length: 1
		 */
		company_discretionary_data?: string | null;

		/**
		 * A description of the transfer. This is included in the transfer data sent to the receiving bank.
		 * Max length: 10
		 * Min length: 1
		 */
		company_entry_description?: string | null;

		/**
		 * The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank.
		 * Max length: 16
		 * Min length: 1
		 */
		company_name?: string | null;

		/** The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		effective_date?: Date | null;

		/** The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number`, `routing_number`, and `funding` must be absent. */
		external_account_id?: string | null;

		/** The type of the account to which the transfer will be sent. */
		funding?: Ach_transferFunding | null;

		/**
		 * Your identifer for the transfer recipient.
		 * Max length: 15
		 * Min length: 1
		 */
		individual_id?: string | null;

		/**
		 * The name of the transfer recipient. This value is informational and not verified by the recipient's bank.
		 * Max length: 22
		 * Min length: 1
		 */
		individual_name?: string | null;

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval?: boolean | null;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number?: string | null;

		/** The Standard Entry Class (SEC) code to use for the transfer. */
		standard_entry_class_code?: Ach_transferStandard_entry_class_code | null;

		/**
		 * A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If `individual_name` and `company_name` are not explicitly set by this API, the `statement_descriptor` will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass `individual_name` and `company_name` instead of relying on this fallback.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		statement_descriptor: string;
	}
	export interface Create_an_ach_transfer_parametersFormProperties {

		/**
		 * The Increase identifier for the account that will send the transfer.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The account number for the destination account.
		 * Max length: 17
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank.
		 * Max length: 80
		 * Min length: 1
		 */
		addendum: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description of the date of the transfer, usually in the format `YYMMDD`. This is included in the transfer data sent to the receiving bank.
		 * Max length: 6
		 * Min length: 1
		 */
		company_descriptive_date: FormControl<string | null | undefined>,

		/**
		 * The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank.
		 * Max length: 20
		 * Min length: 1
		 */
		company_discretionary_data: FormControl<string | null | undefined>,

		/**
		 * A description of the transfer. This is included in the transfer data sent to the receiving bank.
		 * Max length: 10
		 * Min length: 1
		 */
		company_entry_description: FormControl<string | null | undefined>,

		/**
		 * The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank.
		 * Max length: 16
		 * Min length: 1
		 */
		company_name: FormControl<string | null | undefined>,

		/** The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		effective_date: FormControl<Date | null | undefined>,

		/** The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number`, `routing_number`, and `funding` must be absent. */
		external_account_id: FormControl<string | null | undefined>,

		/** The type of the account to which the transfer will be sent. */
		funding: FormControl<Ach_transferFunding | null | undefined>,

		/**
		 * Your identifer for the transfer recipient.
		 * Max length: 15
		 * Min length: 1
		 */
		individual_id: FormControl<string | null | undefined>,

		/**
		 * The name of the transfer recipient. This value is informational and not verified by the recipient's bank.
		 * Max length: 22
		 * Min length: 1
		 */
		individual_name: FormControl<string | null | undefined>,

		/** Whether the transfer requires explicit approval via the dashboard or API. */
		require_approval: FormControl<boolean | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number: FormControl<string | null | undefined>,

		/** The Standard Entry Class (SEC) code to use for the transfer. */
		standard_entry_class_code: FormControl<Ach_transferStandard_entry_class_code | null | undefined>,

		/**
		 * A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If `individual_name` and `company_name` are not explicitly set by this API, the `statement_descriptor` will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass `individual_name` and `company_name` instead of relying on this fallback.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		statement_descriptor: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_ach_transfer_parametersFormGroup() {
		return new FormGroup<Create_an_ach_transfer_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(17)]),
			addendum: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(80)]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(6)]),
			company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(20)]),
			company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(16)]),
			effective_date: new FormControl<Date | null | undefined>(undefined),
			external_account_id: new FormControl<string | null | undefined>(undefined),
			funding: new FormControl<Ach_transferFunding | null | undefined>(undefined),
			individual_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(15)]),
			individual_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(22)]),
			require_approval: new FormControl<boolean | null | undefined>(undefined),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(9), Validators.maxLength(9)]),
			standard_entry_class_code: new FormControl<Ach_transferStandard_entry_class_code | null | undefined>(undefined),
			statement_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parameters {

		/** Details of the corporation entity to create. Required if `structure` is equal to `corporation`. */
		corporation?: Create_an_entity_parametersCorporation;

		/**
		 * The description you choose to give the entity.
		 * Max length: 200
		 * Min length: 1
		 */
		description?: string | null;

		/** Details of the joint entity to create. Required if `structure` is equal to `joint`. */
		joint?: Create_an_entity_parametersJoint;

		/** Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods. */
		natural_person?: Create_an_entity_parametersNatural_person;

		/**
		 * The relationship between your group and the entity.
		 * Required
		 */
		relationship: Create_an_entity_parametersRelationship;

		/**
		 * The type of Entity to create.
		 * Required
		 */
		structure: Create_an_entity_parametersStructure;

		/** Additional documentation associated with the entity. */
		Create_an_entity_parametersSupplemental_documents?: Array<Create_an_entity_parametersSupplemental_documents>;

		/** Details of the trust entity to create. Required if `structure` is equal to `trust`. */
		trust?: Create_an_entity_parametersTrust;
	}
	export interface Create_an_entity_parametersFormProperties {

		/**
		 * The description you choose to give the entity.
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The relationship between your group and the entity.
		 * Required
		 */
		relationship: FormControl<Create_an_entity_parametersRelationship | null | undefined>,

		/**
		 * The type of Entity to create.
		 * Required
		 */
		structure: FormControl<Create_an_entity_parametersStructure | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersFormGroup() {
		return new FormGroup<Create_an_entity_parametersFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			relationship: new FormControl<Create_an_entity_parametersRelationship | null | undefined>(undefined, [Validators.required]),
			structure: new FormControl<Create_an_entity_parametersStructure | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersCorporation {

		/**
		 * The corporation's address.
		 * Required
		 */
		address: Create_an_entity_parametersCorporationAddress;

		/**
		 * The identifying details of anyone controlling or owning 25% or more of the corporation.
		 * Required
		 */
		Create_an_entity_parametersCorporationBeneficial_owners: Array<Create_an_entity_parametersCorporationBeneficial_owners>;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
		 * Max length: 200
		 * Min length: 1
		 */
		incorporation_state?: string | null;

		/**
		 * The legal name of the corporation.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;

		/**
		 * The Employer Identification Number (EIN) for the corporation.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		tax_identifier: string;

		/** The website of the corporation. */
		website?: string | null;
	}
	export interface Create_an_entity_parametersCorporationFormProperties {

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
		 * Max length: 200
		 * Min length: 1
		 */
		incorporation_state: FormControl<string | null | undefined>,

		/**
		 * The legal name of the corporation.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The Employer Identification Number (EIN) for the corporation.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		tax_identifier: FormControl<string | null | undefined>,

		/** The website of the corporation. */
		website: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationFormProperties>({
			incorporation_state: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			tax_identifier: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			website: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Create_an_entity_parametersCorporationAddress {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_an_entity_parametersCorporationAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationAddressFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersCorporationBeneficial_owners {

		/**
		 * This person's role or title within the entity.
		 * Max length: 200
		 * Min length: 1
		 */
		company_title?: string | null;

		/**
		 * Personal details for the beneficial owner.
		 * Required
		 */
		individual: Create_an_entity_parametersCorporationBeneficial_ownersIndividual;

		/**
		 * Why this person is considered a beneficial owner of the entity.
		 * Required
		 */
		prong: Create_an_entity_parametersCorporationBeneficial_ownersProng;
	}
	export interface Create_an_entity_parametersCorporationBeneficial_ownersFormProperties {

		/**
		 * This person's role or title within the entity.
		 * Max length: 200
		 * Min length: 1
		 */
		company_title: FormControl<string | null | undefined>,

		/**
		 * Why this person is considered a beneficial owner of the entity.
		 * Required
		 */
		prong: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersProng | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationBeneficial_ownersFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationBeneficial_ownersFormProperties>({
			company_title: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			prong: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersProng | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividual {

		/**
		 * The individual's address.
		 * Required
		 */
		address: Create_an_entity_parametersCorporationBeneficial_ownersIndividualAddress;

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id?: boolean | null;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentification;

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;
	}
	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualFormProperties {

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id: FormControl<boolean | null | undefined>,

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationBeneficial_ownersIndividualFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationBeneficial_ownersIndividualFormProperties>({
			confirmed_no_us_tax_id: new FormControl<boolean | null | undefined>(undefined),
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualAddress {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationBeneficial_ownersIndividualAddressFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationBeneficial_ownersIndividualAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentification {

		/** Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`. */
		drivers_license?: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationDrivers_license;

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: string;

		/** Information about the identification document provided. Required if `method` is equal to `other`. */
		other?: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationOther;

		/** Information about the passport used for identification. Required if `method` is equal to `passport`. */
		passport?: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationPassport;
	}
	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationDrivers_license {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: string;

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;
	}
	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationDrivers_licenseFormProperties {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationDrivers_licenseFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationDrivers_licenseFormProperties>({
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export enum Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod { social_security_number = 'social_security_number', individual_taxpayer_identification_number = 'individual_taxpayer_identification_number', passport = 'passport', drivers_license = 'drivers_license', other = 'other' }

	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationOther {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date?: Date | null;

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationOtherFormProperties {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationOtherFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationOtherFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationPassport {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationPassportFormProperties {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationPassportFormGroup() {
		return new FormGroup<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationPassportFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Create_an_entity_parametersCorporationBeneficial_ownersProng { ownership = 'ownership', control = 'control' }

	export interface Create_an_entity_parametersJoint {

		/**
		 * The two individuals that share control of the entity.
		 * Required
		 */
		Create_an_entity_parametersJointIndividuals: Array<Create_an_entity_parametersJointIndividuals>;

		/**
		 * The name of the joint entity.
		 * Max length: 200
		 * Min length: 1
		 */
		name?: string | null;
	}
	export interface Create_an_entity_parametersJointFormProperties {

		/**
		 * The name of the joint entity.
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersJointFormGroup() {
		return new FormGroup<Create_an_entity_parametersJointFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersJointIndividuals {

		/**
		 * The individual's address.
		 * Required
		 */
		address: Create_an_entity_parametersJointIndividualsAddress;

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id?: boolean | null;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: Create_an_entity_parametersJointIndividualsIdentification;

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;
	}
	export interface Create_an_entity_parametersJointIndividualsFormProperties {

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id: FormControl<boolean | null | undefined>,

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersJointIndividualsFormGroup() {
		return new FormGroup<Create_an_entity_parametersJointIndividualsFormProperties>({
			confirmed_no_us_tax_id: new FormControl<boolean | null | undefined>(undefined),
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersJointIndividualsAddress {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_an_entity_parametersJointIndividualsAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersJointIndividualsAddressFormGroup() {
		return new FormGroup<Create_an_entity_parametersJointIndividualsAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersJointIndividualsIdentification {

		/** Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`. */
		drivers_license?: Create_an_entity_parametersJointIndividualsIdentificationDrivers_license;

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: string;

		/** Information about the identification document provided. Required if `method` is equal to `other`. */
		other?: Create_an_entity_parametersJointIndividualsIdentificationOther;

		/** Information about the passport used for identification. Required if `method` is equal to `passport`. */
		passport?: Create_an_entity_parametersJointIndividualsIdentificationPassport;
	}
	export interface Create_an_entity_parametersJointIndividualsIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersJointIndividualsIdentificationFormGroup() {
		return new FormGroup<Create_an_entity_parametersJointIndividualsIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersJointIndividualsIdentificationDrivers_license {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: string;

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;
	}
	export interface Create_an_entity_parametersJointIndividualsIdentificationDrivers_licenseFormProperties {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersJointIndividualsIdentificationDrivers_licenseFormGroup() {
		return new FormGroup<Create_an_entity_parametersJointIndividualsIdentificationDrivers_licenseFormProperties>({
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersJointIndividualsIdentificationOther {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date?: Date | null;

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersJointIndividualsIdentificationOtherFormProperties {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersJointIndividualsIdentificationOtherFormGroup() {
		return new FormGroup<Create_an_entity_parametersJointIndividualsIdentificationOtherFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersJointIndividualsIdentificationPassport {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersJointIndividualsIdentificationPassportFormProperties {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersJointIndividualsIdentificationPassportFormGroup() {
		return new FormGroup<Create_an_entity_parametersJointIndividualsIdentificationPassportFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersNatural_person {

		/**
		 * The individual's address.
		 * Required
		 */
		address: Create_an_entity_parametersNatural_personAddress;

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id?: boolean | null;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: Create_an_entity_parametersNatural_personIdentification;

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;
	}
	export interface Create_an_entity_parametersNatural_personFormProperties {

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id: FormControl<boolean | null | undefined>,

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersNatural_personFormGroup() {
		return new FormGroup<Create_an_entity_parametersNatural_personFormProperties>({
			confirmed_no_us_tax_id: new FormControl<boolean | null | undefined>(undefined),
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersNatural_personAddress {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_an_entity_parametersNatural_personAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersNatural_personAddressFormGroup() {
		return new FormGroup<Create_an_entity_parametersNatural_personAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersNatural_personIdentification {

		/** Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`. */
		drivers_license?: Create_an_entity_parametersNatural_personIdentificationDrivers_license;

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: string;

		/** Information about the identification document provided. Required if `method` is equal to `other`. */
		other?: Create_an_entity_parametersNatural_personIdentificationOther;

		/** Information about the passport used for identification. Required if `method` is equal to `passport`. */
		passport?: Create_an_entity_parametersNatural_personIdentificationPassport;
	}
	export interface Create_an_entity_parametersNatural_personIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersNatural_personIdentificationFormGroup() {
		return new FormGroup<Create_an_entity_parametersNatural_personIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersNatural_personIdentificationDrivers_license {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: string;

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;
	}
	export interface Create_an_entity_parametersNatural_personIdentificationDrivers_licenseFormProperties {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersNatural_personIdentificationDrivers_licenseFormGroup() {
		return new FormGroup<Create_an_entity_parametersNatural_personIdentificationDrivers_licenseFormProperties>({
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersNatural_personIdentificationOther {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date?: Date | null;

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersNatural_personIdentificationOtherFormProperties {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersNatural_personIdentificationOtherFormGroup() {
		return new FormGroup<Create_an_entity_parametersNatural_personIdentificationOtherFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersNatural_personIdentificationPassport {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersNatural_personIdentificationPassportFormProperties {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersNatural_personIdentificationPassportFormGroup() {
		return new FormGroup<Create_an_entity_parametersNatural_personIdentificationPassportFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Create_an_entity_parametersRelationship { affiliated = 'affiliated', informational = 'informational', unaffiliated = 'unaffiliated' }

	export enum Create_an_entity_parametersStructure { corporation = 'corporation', natural_person = 'natural_person', joint = 'joint', trust = 'trust' }

	export interface Create_an_entity_parametersSupplemental_documents {

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersSupplemental_documentsFormProperties {

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersSupplemental_documentsFormGroup() {
		return new FormGroup<Create_an_entity_parametersSupplemental_documentsFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersTrust {

		/**
		 * The trust's address.
		 * Required
		 */
		address: Create_an_entity_parametersTrustAddress;

		/**
		 * Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.
		 * Required
		 */
		category: Create_an_entity_parametersTrustCategory;

		/** The identifier of the File containing the formation document of the trust. */
		formation_document_file_id?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
		 * Max length: 200
		 * Min length: 1
		 */
		formation_state?: string | null;

		/** The grantor of the trust. Required if `category` is equal to `revocable`. */
		grantor?: Create_an_entity_parametersTrustGrantor;

		/**
		 * The legal name of the trust.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;

		/**
		 * The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.
		 * Max length: 200
		 * Min length: 1
		 */
		tax_identifier?: string | null;

		/**
		 * The trustees of the trust.
		 * Required
		 */
		Create_an_entity_parametersTrustTrustees: Array<Create_an_entity_parametersTrustTrustees>;
	}
	export interface Create_an_entity_parametersTrustFormProperties {

		/**
		 * Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.
		 * Required
		 */
		category: FormControl<Create_an_entity_parametersTrustCategory | null | undefined>,

		/** The identifier of the File containing the formation document of the trust. */
		formation_document_file_id: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
		 * Max length: 200
		 * Min length: 1
		 */
		formation_state: FormControl<string | null | undefined>,

		/**
		 * The legal name of the trust.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.
		 * Max length: 200
		 * Min length: 1
		 */
		tax_identifier: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustFormProperties>({
			category: new FormControl<Create_an_entity_parametersTrustCategory | null | undefined>(undefined, [Validators.required]),
			formation_document_file_id: new FormControl<string | null | undefined>(undefined),
			formation_state: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			tax_identifier: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustAddress {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_an_entity_parametersTrustAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustAddressFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export enum Create_an_entity_parametersTrustCategory { revocable = 'revocable', irrevocable = 'irrevocable' }

	export interface Create_an_entity_parametersTrustGrantor {

		/**
		 * The individual's address.
		 * Required
		 */
		address: Create_an_entity_parametersTrustGrantorAddress;

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id?: boolean | null;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: Create_an_entity_parametersTrustGrantorIdentification;

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;
	}
	export interface Create_an_entity_parametersTrustGrantorFormProperties {

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id: FormControl<boolean | null | undefined>,

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustGrantorFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustGrantorFormProperties>({
			confirmed_no_us_tax_id: new FormControl<boolean | null | undefined>(undefined),
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustGrantorAddress {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_an_entity_parametersTrustGrantorAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustGrantorAddressFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustGrantorAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustGrantorIdentification {

		/** Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`. */
		drivers_license?: Create_an_entity_parametersTrustGrantorIdentificationDrivers_license;

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: string;

		/** Information about the identification document provided. Required if `method` is equal to `other`. */
		other?: Create_an_entity_parametersTrustGrantorIdentificationOther;

		/** Information about the passport used for identification. Required if `method` is equal to `passport`. */
		passport?: Create_an_entity_parametersTrustGrantorIdentificationPassport;
	}
	export interface Create_an_entity_parametersTrustGrantorIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustGrantorIdentificationFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustGrantorIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustGrantorIdentificationDrivers_license {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: string;

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;
	}
	export interface Create_an_entity_parametersTrustGrantorIdentificationDrivers_licenseFormProperties {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustGrantorIdentificationDrivers_licenseFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustGrantorIdentificationDrivers_licenseFormProperties>({
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustGrantorIdentificationOther {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date?: Date | null;

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersTrustGrantorIdentificationOtherFormProperties {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustGrantorIdentificationOtherFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustGrantorIdentificationOtherFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersTrustGrantorIdentificationPassport {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersTrustGrantorIdentificationPassportFormProperties {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustGrantorIdentificationPassportFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustGrantorIdentificationPassportFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersTrustTrustees {

		/** Details of the individual trustee. Required when the trustee `structure` is equal to `individual`. */
		individual?: Create_an_entity_parametersTrustTrusteesIndividual;

		/**
		 * The structure of the trustee.
		 * Required
		 */
		structure: Create_an_entity_parametersTrustTrusteesStructure;
	}
	export interface Create_an_entity_parametersTrustTrusteesFormProperties {

		/**
		 * The structure of the trustee.
		 * Required
		 */
		structure: FormControl<Create_an_entity_parametersTrustTrusteesStructure | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustTrusteesFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustTrusteesFormProperties>({
			structure: new FormControl<Create_an_entity_parametersTrustTrusteesStructure | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersTrustTrusteesIndividual {

		/**
		 * The individual's address.
		 * Required
		 */
		address: Create_an_entity_parametersTrustTrusteesIndividualAddress;

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id?: boolean | null;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: Create_an_entity_parametersTrustTrusteesIndividualIdentification;

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: string;
	}
	export interface Create_an_entity_parametersTrustTrusteesIndividualFormProperties {

		/** The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number). */
		confirmed_no_us_tax_id: FormControl<boolean | null | undefined>,

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustTrusteesIndividualFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustTrusteesIndividualFormProperties>({
			confirmed_no_us_tax_id: new FormControl<boolean | null | undefined>(undefined),
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustTrusteesIndividualAddress {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: string;
	}
	export interface Create_an_entity_parametersTrustTrusteesIndividualAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address. This is usually the street number and street.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address. This might be the floor or room number.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustTrusteesIndividualAddressFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustTrusteesIndividualAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentification {

		/** Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`. */
		drivers_license?: Create_an_entity_parametersTrustTrusteesIndividualIdentificationDrivers_license;

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: string;

		/** Information about the identification document provided. Required if `method` is equal to `other`. */
		other?: Create_an_entity_parametersTrustTrusteesIndividualIdentificationOther;

		/** Information about the passport used for identification. Required if `method` is equal to `passport`. */
		passport?: Create_an_entity_parametersTrustTrusteesIndividualIdentificationPassport;
	}
	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * An identification number that can be used to verify the individual's identity, such as a social security number.
		 * Required
		 * Max length: 200
		 * Min length: 4
		 */
		number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustTrusteesIndividualIdentificationFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustTrusteesIndividualIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(4), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentificationDrivers_license {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: string;

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;
	}
	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentificationDrivers_licenseFormProperties {

		/**
		 * The driver's license's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the driver's license.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The state that issued the provided driver's license.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustTrusteesIndividualIdentificationDrivers_licenseFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustTrusteesIndividualIdentificationDrivers_licenseFormProperties>({
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentificationOther {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date?: Date | null;

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentificationOtherFormProperties {

		/**
		 * The two-character ISO 3166-1 code representing the country that issued the document.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * A description of the document submitted.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The document's expiration date in YYYY-MM-DD format. */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustTrusteesIndividualIdentificationOtherFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustTrusteesIndividualIdentificationOtherFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentificationPassport {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: string;

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: Date;

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: string;
	}
	export interface Create_an_entity_parametersTrustTrusteesIndividualIdentificationPassportFormProperties {

		/**
		 * The country that issued the passport.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		country: FormControl<string | null | undefined>,

		/**
		 * The passport's expiration date in YYYY-MM-DD format.
		 * Required
		 */
		expiration_date: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the File containing the passport.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_entity_parametersTrustTrusteesIndividualIdentificationPassportFormGroup() {
		return new FormGroup<Create_an_entity_parametersTrustTrusteesIndividualIdentificationPassportFormProperties>({
			country: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			expiration_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Create_an_entity_parametersTrustTrusteesStructure { individual = 'individual' }

	export interface Create_an_event_subscription_parameters {

		/** If specified, this subscription will only receive webhooks for Events with the specified `category`. */
		selected_event_category?: Create_an_event_subscription_parametersSelected_event_category | null;

		/**
		 * The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.
		 * Max length: 100
		 * Min length: 1
		 */
		shared_secret?: string | null;

		/**
		 * The URL you'd like us to send webhooks to.
		 * Required
		 */
		url: string;
	}
	export interface Create_an_event_subscription_parametersFormProperties {

		/** If specified, this subscription will only receive webhooks for Events with the specified `category`. */
		selected_event_category: FormControl<Create_an_event_subscription_parametersSelected_event_category | null | undefined>,

		/**
		 * The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.
		 * Max length: 100
		 * Min length: 1
		 */
		shared_secret: FormControl<string | null | undefined>,

		/**
		 * The URL you'd like us to send webhooks to.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_event_subscription_parametersFormGroup() {
		return new FormGroup<Create_an_event_subscription_parametersFormProperties>({
			selected_event_category: new FormControl<Create_an_event_subscription_parametersSelected_event_category | null | undefined>(undefined),
			shared_secret: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(100)]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Create_an_event_subscription_parametersSelected_event_category { 'account.created' = 'account.created', 'account.updated' = 'account.updated', 'account_number.created' = 'account_number.created', 'account_number.updated' = 'account_number.updated', 'account_statement.created' = 'account_statement.created', 'account_transfer.created' = 'account_transfer.created', 'account_transfer.updated' = 'account_transfer.updated', 'ach_prenotification.created' = 'ach_prenotification.created', 'ach_prenotification.updated' = 'ach_prenotification.updated', 'ach_transfer.created' = 'ach_transfer.created', 'ach_transfer.updated' = 'ach_transfer.updated', 'card.created' = 'card.created', 'card.updated' = 'card.updated', 'card_payment.created' = 'card_payment.created', 'card_payment.updated' = 'card_payment.updated', 'card_dispute.created' = 'card_dispute.created', 'card_dispute.updated' = 'card_dispute.updated', 'check_deposit.created' = 'check_deposit.created', 'check_deposit.updated' = 'check_deposit.updated', 'check_transfer.created' = 'check_transfer.created', 'check_transfer.updated' = 'check_transfer.updated', 'declined_transaction.created' = 'declined_transaction.created', 'digital_wallet_token.created' = 'digital_wallet_token.created', 'digital_wallet_token.updated' = 'digital_wallet_token.updated', 'document.created' = 'document.created', 'entity.created' = 'entity.created', 'entity.updated' = 'entity.updated', 'external_account.created' = 'external_account.created', 'file.created' = 'file.created', 'group.updated' = 'group.updated', 'group.heartbeat' = 'group.heartbeat', 'inbound_ach_transfer_return.created' = 'inbound_ach_transfer_return.created', 'inbound_ach_transfer_return.updated' = 'inbound_ach_transfer_return.updated', 'inbound_wire_drawdown_request.created' = 'inbound_wire_drawdown_request.created', 'oauth_connection.created' = 'oauth_connection.created', 'oauth_connection.deactivated' = 'oauth_connection.deactivated', 'pending_transaction.created' = 'pending_transaction.created', 'pending_transaction.updated' = 'pending_transaction.updated', 'real_time_decision.card_authorization_requested' = 'real_time_decision.card_authorization_requested', 'real_time_decision.digital_wallet_token_requested' = 'real_time_decision.digital_wallet_token_requested', 'real_time_decision.digital_wallet_authentication_requested' = 'real_time_decision.digital_wallet_authentication_requested', 'real_time_payments_transfer.created' = 'real_time_payments_transfer.created', 'real_time_payments_transfer.updated' = 'real_time_payments_transfer.updated', 'real_time_payments_request_for_payment.created' = 'real_time_payments_request_for_payment.created', 'real_time_payments_request_for_payment.updated' = 'real_time_payments_request_for_payment.updated', 'transaction.created' = 'transaction.created', 'wire_drawdown_request.created' = 'wire_drawdown_request.created', 'wire_drawdown_request.updated' = 'wire_drawdown_request.updated', 'wire_transfer.created' = 'wire_transfer.created', 'wire_transfer.updated' = 'wire_transfer.updated' }

	export interface Create_an_export_parameters {

		/** Options for the created export. Required if `category` is equal to `balance_csv`. */
		balance_csv?: Create_an_export_parametersBalance_csv;

		/**
		 * The type of Export to create.
		 * Required
		 */
		category: Create_an_export_parametersCategory;

		/** Options for the created export. Required if `category` is equal to `transaction_csv`. */
		transaction_csv?: Create_an_export_parametersTransaction_csv;
	}
	export interface Create_an_export_parametersFormProperties {

		/**
		 * The type of Export to create.
		 * Required
		 */
		category: FormControl<Create_an_export_parametersCategory | null | undefined>,
	}
	export function CreateCreate_an_export_parametersFormGroup() {
		return new FormGroup<Create_an_export_parametersFormProperties>({
			category: new FormControl<Create_an_export_parametersCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Create_an_export_parametersBalance_csv {

		/** Filter exported Transactions to the specified Account. */
		account_id?: string | null;

		/** Filter results by time range on the `created_at` attribute. */
		created_at?: Create_an_export_parametersBalance_csvCreated_at;
	}
	export interface Create_an_export_parametersBalance_csvFormProperties {

		/** Filter exported Transactions to the specified Account. */
		account_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_export_parametersBalance_csvFormGroup() {
		return new FormGroup<Create_an_export_parametersBalance_csvFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Create_an_export_parametersBalance_csvCreated_at {

		/** Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		after?: Date | null;

		/** Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		before?: Date | null;

		/** Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_after?: Date | null;

		/** Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_before?: Date | null;
	}
	export interface Create_an_export_parametersBalance_csvCreated_atFormProperties {

		/** Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		after: FormControl<Date | null | undefined>,

		/** Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		before: FormControl<Date | null | undefined>,

		/** Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_after: FormControl<Date | null | undefined>,

		/** Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_before: FormControl<Date | null | undefined>,
	}
	export function CreateCreate_an_export_parametersBalance_csvCreated_atFormGroup() {
		return new FormGroup<Create_an_export_parametersBalance_csvCreated_atFormProperties>({
			after: new FormControl<Date | null | undefined>(undefined),
			before: new FormControl<Date | null | undefined>(undefined),
			on_or_after: new FormControl<Date | null | undefined>(undefined),
			on_or_before: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum Create_an_export_parametersCategory { transaction_csv = 'transaction_csv', balance_csv = 'balance_csv' }

	export interface Create_an_export_parametersTransaction_csv {

		/** Filter exported Transactions to the specified Account. */
		account_id?: string | null;

		/** Filter results by time range on the `created_at` attribute. */
		created_at?: Create_an_export_parametersTransaction_csvCreated_at;
	}
	export interface Create_an_export_parametersTransaction_csvFormProperties {

		/** Filter exported Transactions to the specified Account. */
		account_id: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_export_parametersTransaction_csvFormGroup() {
		return new FormGroup<Create_an_export_parametersTransaction_csvFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Create_an_export_parametersTransaction_csvCreated_at {

		/** Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		after?: Date | null;

		/** Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		before?: Date | null;

		/** Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_after?: Date | null;

		/** Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_before?: Date | null;
	}
	export interface Create_an_export_parametersTransaction_csvCreated_atFormProperties {

		/** Return results after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		after: FormControl<Date | null | undefined>,

		/** Return results before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		before: FormControl<Date | null | undefined>,

		/** Return results on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_after: FormControl<Date | null | undefined>,

		/** Return results on or before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp. */
		on_or_before: FormControl<Date | null | undefined>,
	}
	export function CreateCreate_an_export_parametersTransaction_csvCreated_atFormGroup() {
		return new FormGroup<Create_an_export_parametersTransaction_csvCreated_atFormProperties>({
			after: new FormControl<Date | null | undefined>(undefined),
			before: new FormControl<Date | null | undefined>(undefined),
			on_or_after: new FormControl<Date | null | undefined>(undefined),
			on_or_before: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface Create_an_external_account_parameters {

		/**
		 * The account number for the destination account.
		 * Required
		 * Max length: 17
		 * Min length: 1
		 */
		account_number: string;

		/**
		 * The name you choose for the Account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: string;

		/** The type of the destination account. Defaults to `checking`. */
		funding?: Create_an_external_account_parametersFunding | null;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number: string;
	}
	export interface Create_an_external_account_parametersFormProperties {

		/**
		 * The account number for the destination account.
		 * Required
		 * Max length: 17
		 * Min length: 1
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The name you choose for the Account.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The type of the destination account. Defaults to `checking`. */
		funding: FormControl<Create_an_external_account_parametersFunding | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.
		 * Required
		 * Max length: 9
		 * Min length: 9
		 */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreateCreate_an_external_account_parametersFormGroup() {
		return new FormGroup<Create_an_external_account_parametersFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(17)]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			funding: new FormControl<Create_an_external_account_parametersFunding | null | undefined>(undefined),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(9), Validators.maxLength(9)]),
		});

	}

	export enum Create_an_external_account_parametersFunding { checking = 'checking', savings = 'savings', other = 'other' }


	/** Declined Transactions are refused additions and removals of money from your bank account. For example, Declined Transactions are caused when your Account has an insufficient balance or your Limits are triggered. */
	export interface Declined_transaction {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Declined_transactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: Declined_transactionType;
	}

	/** Declined Transactions are refused additions and removals of money from your bank account. For example, Declined Transactions are caused when your Account has an insufficient balance or your Limits are triggered. */
	export interface Declined_transactionFormProperties {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: FormControl<Declined_transactionType | null | undefined>,
	}
	export function CreateDeclined_transactionFormGroup() {
		return new FormGroup<Declined_transactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Declined_transactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionRoute_type { account_number = 'account_number', card = 'card' }

	export interface Declined_transactionSource {

		/**
		 * A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		 * Required
		 */
		ach_decline: Declined_transactionSourceAch_decline;

		/**
		 * A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		 * Required
		 */
		card_decline: Declined_transactionSourceCard_decline;

		/**
		 * A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		 * Required
		 */
		card_route_decline: Declined_transactionSourceCard_route_decline;

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Declined_transactionSourceCategory;

		/**
		 * A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		 * Required
		 */
		check_decline: Declined_transactionSourceCheck_decline;

		/**
		 * A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		 * Required
		 */
		inbound_real_time_payments_transfer_decline: Declined_transactionSourceInbound_real_time_payments_transfer_decline;

		/**
		 * A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		 * Required
		 */
		international_ach_decline: Declined_transactionSourceInternational_ach_decline;
	}
	export interface Declined_transactionSourceFormProperties {

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Declined_transactionSourceCategory | null | undefined>,
	}
	export function CreateDeclined_transactionSourceFormGroup() {
		return new FormGroup<Declined_transactionSourceFormProperties>({
			category: new FormControl<Declined_transactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Declined_transactionSourceAch_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceAch_declineReason;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Declined_transactionSourceAch_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceAch_declineReason | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateDeclined_transactionSourceAch_declineFormGroup() {
		return new FormGroup<Declined_transactionSourceAch_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceAch_declineReason | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionSourceAch_declineReason { ach_route_canceled = 'ach_route_canceled', ach_route_disabled = 'ach_route_disabled', breaches_limit = 'breaches_limit', credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver', duplicate_return = 'duplicate_return', entity_not_active = 'entity_not_active', group_locked = 'group_locked', insufficient_funds = 'insufficient_funds', misrouted_return = 'misrouted_return', no_ach_route = 'no_ach_route', originator_request = 'originator_request', transaction_not_allowed = 'transaction_not_allowed' }

	export interface Declined_transactionSourceCard_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: Declined_transactionSourceCard_declineNetwork;

		/**
		 * Fields specific to the `network`
		 * Required
		 */
		network_details: Declined_transactionSourceCard_declineNetwork_details;

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: string;

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCard_declineReason;
	}
	export interface Declined_transactionSourceCard_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>,

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: FormControl<string | null | undefined>,

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCard_declineReason | null | undefined>,
	}
	export function CreateDeclined_transactionSourceCard_declineFormGroup() {
		return new FormGroup<Declined_transactionSourceCard_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>(undefined, [Validators.required]),
			real_time_decision_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCard_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionSourceCard_declineNetwork { visa = 'visa' }

	export interface Declined_transactionSourceCard_declineNetwork_details {

		/**
		 * Fields specific to the `visa` network
		 * Required
		 */
		visa: Declined_transactionSourceCard_declineNetwork_detailsVisa;
	}
	export interface Declined_transactionSourceCard_declineNetwork_detailsFormProperties {
	}
	export function CreateDeclined_transactionSourceCard_declineNetwork_detailsFormGroup() {
		return new FormGroup<Declined_transactionSourceCard_declineNetwork_detailsFormProperties>({
		});

	}

	export interface Declined_transactionSourceCard_declineNetwork_detailsVisa {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator;

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode;
	}
	export interface Declined_transactionSourceCard_declineNetwork_detailsVisaFormProperties {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>,

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>,
	}
	export function CreateDeclined_transactionSourceCard_declineNetwork_detailsVisaFormGroup() {
		return new FormGroup<Declined_transactionSourceCard_declineNetwork_detailsVisaFormProperties>({
			electronic_commerce_indicator: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>(undefined, [Validators.required]),
			point_of_service_entry_mode: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator { mail_phone_order = 'mail_phone_order', recurring = 'recurring', installment = 'installment', unknown_mail_phone_order = 'unknown_mail_phone_order', secure_electronic_commerce = 'secure_electronic_commerce', non_authenticated_security_transaction_at_3ds_capable_merchant = 'non_authenticated_security_transaction_at_3ds_capable_merchant', non_authenticated_security_transaction = 'non_authenticated_security_transaction', non_secure_transaction = 'non_secure_transaction' }

	export enum Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode { manual = 'manual', magnetic_stripe_no_cvv = 'magnetic_stripe_no_cvv', optical_code = 'optical_code', integrated_circuit_card = 'integrated_circuit_card', contactless = 'contactless', credential_on_file = 'credential_on_file', magnetic_stripe = 'magnetic_stripe', contactless_magnetic_stripe = 'contactless_magnetic_stripe', integrated_circuit_card_no_cvv = 'integrated_circuit_card_no_cvv' }

	export enum Declined_transactionSourceCard_declineReason { card_not_active = 'card_not_active', entity_not_active = 'entity_not_active', group_locked = 'group_locked', insufficient_funds = 'insufficient_funds', cvv2_mismatch = 'cvv2_mismatch', transaction_not_allowed = 'transaction_not_allowed', breaches_limit = 'breaches_limit', webhook_declined = 'webhook_declined', webhook_timed_out = 'webhook_timed_out', declined_by_stand_in_processing = 'declined_by_stand_in_processing', invalid_physical_card = 'invalid_physical_card', missing_original_authorization = 'missing_original_authorization' }

	export interface Declined_transactionSourceCard_route_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Declined_transactionSourceCard_route_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateDeclined_transactionSourceCard_route_declineFormGroup() {
		return new FormGroup<Declined_transactionSourceCard_route_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionSourceCategory { ach_decline = 'ach_decline', card_decline = 'card_decline', check_decline = 'check_decline', inbound_real_time_payments_transfer_decline = 'inbound_real_time_payments_transfer_decline', international_ach_decline = 'international_ach_decline', card_route_decline = 'card_route_decline', other = 'other' }

	export interface Declined_transactionSourceCheck_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		auxiliary_on_us: string;

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCheck_declineReason;
	}
	export interface Declined_transactionSourceCheck_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>,
	}
	export function CreateDeclined_transactionSourceCheck_declineFormGroup() {
		return new FormGroup<Declined_transactionSourceCheck_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionSourceCheck_declineReason { ach_route_canceled = 'ach_route_canceled', ach_route_disabled = 'ach_route_disabled', breaches_limit = 'breaches_limit', entity_not_active = 'entity_not_active', group_locked = 'group_locked', insufficient_funds = 'insufficient_funds', unable_to_locate_account = 'unable_to_locate_account', unable_to_process = 'unable_to_process', refer_to_image = 'refer_to_image', stop_payment_requested = 'stop_payment_requested', returned = 'returned', duplicate_presentment = 'duplicate_presentment', not_authorized = 'not_authorized' }

	export interface Declined_transactionSourceInbound_real_time_payments_transfer_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceInbound_real_time_payments_transfer_declineReason;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Declined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormGroup() {
		return new FormGroup<Declined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionSourceInbound_real_time_payments_transfer_declineReason { account_number_canceled = 'account_number_canceled', account_number_disabled = 'account_number_disabled', group_locked = 'group_locked', entity_not_active = 'entity_not_active', real_time_payments_not_enabled = 'real_time_payments_not_enabled' }

	export interface Declined_transactionSourceInternational_ach_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Declined_transactionSourceInternational_ach_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateDeclined_transactionSourceInternational_ach_declineFormGroup() {
		return new FormGroup<Declined_transactionSourceInternational_ach_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Declined_transactionType { declined_transaction = 'declined_transaction' }


	/** A list of Declined Transaction objects */
	export interface Declined_transaction_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Declined_transaction>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Declined Transaction objects */
	export interface Declined_transaction_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateDeclined_transaction_listFormGroup() {
		return new FormGroup<Declined_transaction_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A Digital Wallet Token is created when a user adds a Card to their Apple Pay or Google Pay app. The Digital Wallet Token can be used for purchases just like a Card. */
	export interface Digital_wallet_token {

		/**
		 * The identifier for the Card this Digital Wallet Token belongs to.
		 * Required
		 */
		card_id: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The Digital Wallet Token identifier.
		 * Required
		 */
		id: string;

		/**
		 * This indicates if payments can be made with the Digital Wallet Token.
		 * Required
		 */
		status: Digital_wallet_tokenStatus;

		/**
		 * The digital wallet app being used.
		 * Required
		 */
		token_requestor: Digital_wallet_tokenToken_requestor;

		/**
		 * A constant representing the object's type. For this resource it will always be `digital_wallet_token`.
		 * Required
		 */
		type: Digital_wallet_tokenType;
	}

	/** A Digital Wallet Token is created when a user adds a Card to their Apple Pay or Google Pay app. The Digital Wallet Token can be used for purchases just like a Card. */
	export interface Digital_wallet_tokenFormProperties {

		/**
		 * The identifier for the Card this Digital Wallet Token belongs to.
		 * Required
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The Digital Wallet Token identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * This indicates if payments can be made with the Digital Wallet Token.
		 * Required
		 */
		status: FormControl<Digital_wallet_tokenStatus | null | undefined>,

		/**
		 * The digital wallet app being used.
		 * Required
		 */
		token_requestor: FormControl<Digital_wallet_tokenToken_requestor | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `digital_wallet_token`.
		 * Required
		 */
		type: FormControl<Digital_wallet_tokenType | null | undefined>,
	}
	export function CreateDigital_wallet_tokenFormGroup() {
		return new FormGroup<Digital_wallet_tokenFormProperties>({
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Digital_wallet_tokenStatus | null | undefined>(undefined, [Validators.required]),
			token_requestor: new FormControl<Digital_wallet_tokenToken_requestor | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Digital_wallet_tokenType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Digital_wallet_tokenStatus { active = 'active', inactive = 'inactive', suspended = 'suspended', deactivated = 'deactivated' }

	export enum Digital_wallet_tokenToken_requestor { apple_pay = 'apple_pay', google_pay = 'google_pay' }

	export enum Digital_wallet_tokenType { digital_wallet_token = 'digital_wallet_token' }


	/** A list of Digital Wallet Token objects */
	export interface Digital_wallet_token_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Digital_wallet_token>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Digital Wallet Token objects */
	export interface Digital_wallet_token_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateDigital_wallet_token_listFormGroup() {
		return new FormGroup<Digital_wallet_token_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Increase generates certain documents / forms automatically for your application; they can be listed here. Currently the only supported document type is IRS Form 1099-INT. */
	export interface Document {

		/**
		 * The type of document.
		 * Required
		 */
		category: DocumentCategory;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The identifier of the Entity the document was generated for.
		 * Required
		 */
		entity_id: string;

		/**
		 * The identifier of the File containing the Document's contents.
		 * Required
		 */
		file_id: string;

		/**
		 * The Document identifier.
		 * Required
		 */
		id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `document`.
		 * Required
		 */
		type: DocumentType;
	}

	/** Increase generates certain documents / forms automatically for your application; they can be listed here. Currently the only supported document type is IRS Form 1099-INT. */
	export interface DocumentFormProperties {

		/**
		 * The type of document.
		 * Required
		 */
		category: FormControl<DocumentCategory | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Entity the document was generated for.
		 * Required
		 */
		entity_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the File containing the Document's contents.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The Document identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `document`.
		 * Required
		 */
		type: FormControl<DocumentType | null | undefined>,
	}
	export function CreateDocumentFormGroup() {
		return new FormGroup<DocumentFormProperties>({
			category: new FormControl<DocumentCategory | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			entity_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<DocumentType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DocumentCategory { account_opening_disclosures = 'account_opening_disclosures', anti_money_laundering_policy = 'anti_money_laundering_policy', anti_money_laundering_procedures = 'anti_money_laundering_procedures', audit_report = 'audit_report', background_checks = 'background_checks', business_continuity_plan = 'business_continuity_plan', collections_policy = 'collections_policy', complaints_policy = 'complaints_policy', complaint_report = 'complaint_report', compliance_report = 'compliance_report', compliance_staffing_plan = 'compliance_staffing_plan', compliance_management_system_policy = 'compliance_management_system_policy', consumer_privacy_notice = 'consumer_privacy_notice', consumer_protection_policy = 'consumer_protection_policy', corporate_formation_document = 'corporate_formation_document', credit_monitoring_report = 'credit_monitoring_report', customer_information_program_policy = 'customer_information_program_policy', electronic_funds_tranfer_act_policy = 'electronic_funds_tranfer_act_policy', employee_overview = 'employee_overview', end_user_terms_of_service = 'end_user_terms_of_service', e_sign_policy = 'e_sign_policy', financial_statement = 'financial_statement', form_1099_int = 'form_1099_int', fraud_prevention_policy = 'fraud_prevention_policy', funds_availability_policy = 'funds_availability_policy', funds_availability_disclosure = 'funds_availability_disclosure', funds_flow_diagram = 'funds_flow_diagram', gramm_leach_bliley_act_policy = 'gramm_leach_bliley_act_policy', information_security_policy = 'information_security_policy', insurance_policy = 'insurance_policy', investor_presentation = 'investor_presentation', loan_application_processing_policy = 'loan_application_processing_policy', management_biography = 'management_biography', marketing_and_advertising_policy = 'marketing_and_advertising_policy', network_security_diagram = 'network_security_diagram', onboarding_questionnaire = 'onboarding_questionnaire', penetration_test_report = 'penetration_test_report', program_risk_assessment = 'program_risk_assessment', security_audit_report = 'security_audit_report', servicing_policy = 'servicing_policy', transaction_monitoring_report = 'transaction_monitoring_report', truth_in_savings_act_policy = 'truth_in_savings_act_policy', underwriting_policy = 'underwriting_policy', vendor_list = 'vendor_list', vendor_management_policy = 'vendor_management_policy', vendor_risk_management_report = 'vendor_risk_management_report', volume_forecast = 'volume_forecast' }

	export enum DocumentType { document = 'document' }


	/** A list of Document objects */
	export interface Document_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Document>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Document objects */
	export interface Document_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateDocument_listFormGroup() {
		return new FormGroup<Document_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts. */
	export interface Entity {

		/**
		 * Details of the corporation entity. Will be present if `structure` is equal to `corporation`.
		 * Required
		 */
		corporation: EntityCorporation;

		/**
		 * The entity's description for display purposes.
		 * Required
		 */
		description: string;

		/**
		 * The entity's identifier.
		 * Required
		 */
		id: string;

		/**
		 * Details of the joint entity. Will be present if `structure` is equal to `joint`.
		 * Required
		 */
		joint: EntityJoint;

		/**
		 * Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.
		 * Required
		 */
		natural_person: EntityNatural_person;

		/**
		 * The relationship between your group and the entity.
		 * Required
		 */
		relationship: Create_an_entity_parametersRelationship;

		/**
		 * The entity's legal structure.
		 * Required
		 */
		structure: Create_an_entity_parametersStructure;

		/**
		 * Additional documentation associated with the entity.
		 * Required
		 */
		EntitySupplemental_documents: Array<EntitySupplemental_documents>;

		/**
		 * Details of the trust entity. Will be present if `structure` is equal to `trust`.
		 * Required
		 */
		trust: EntityTrust;

		/**
		 * A constant representing the object's type. For this resource it will always be `entity`.
		 * Required
		 */
		type: EntityType;
	}

	/** Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts. */
	export interface EntityFormProperties {

		/**
		 * The entity's description for display purposes.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The entity's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The relationship between your group and the entity.
		 * Required
		 */
		relationship: FormControl<Create_an_entity_parametersRelationship | null | undefined>,

		/**
		 * The entity's legal structure.
		 * Required
		 */
		structure: FormControl<Create_an_entity_parametersStructure | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `entity`.
		 * Required
		 */
		type: FormControl<EntityType | null | undefined>,
	}
	export function CreateEntityFormGroup() {
		return new FormGroup<EntityFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			relationship: new FormControl<Create_an_entity_parametersRelationship | null | undefined>(undefined, [Validators.required]),
			structure: new FormControl<Create_an_entity_parametersStructure | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<EntityType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityCorporation {

		/**
		 * The corporation's address.
		 * Required
		 */
		address: EntityCorporationAddress;

		/**
		 * The identifying details of anyone controlling or owning 25% or more of the corporation.
		 * Required
		 */
		EntityCorporationBeneficial_owners: Array<EntityCorporationBeneficial_owners>;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
		 * Required
		 */
		incorporation_state: string;

		/**
		 * The legal name of the corporation.
		 * Required
		 */
		name: string;

		/**
		 * The Employer Identification Number (EIN) for the corporation.
		 * Required
		 */
		tax_identifier: string;

		/**
		 * The website of the corporation.
		 * Required
		 */
		website: string;
	}
	export interface EntityCorporationFormProperties {

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
		 * Required
		 */
		incorporation_state: FormControl<string | null | undefined>,

		/**
		 * The legal name of the corporation.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The Employer Identification Number (EIN) for the corporation.
		 * Required
		 */
		tax_identifier: FormControl<string | null | undefined>,

		/**
		 * The website of the corporation.
		 * Required
		 */
		website: FormControl<string | null | undefined>,
	}
	export function CreateEntityCorporationFormGroup() {
		return new FormGroup<EntityCorporationFormProperties>({
			incorporation_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tax_identifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			website: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityCorporationAddress {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface EntityCorporationAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateEntityCorporationAddressFormGroup() {
		return new FormGroup<EntityCorporationAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityCorporationBeneficial_owners {

		/**
		 * This person's role or title within the entity.
		 * Required
		 */
		company_title: string;

		/**
		 * Personal details for the beneficial owner.
		 * Required
		 */
		individual: EntityCorporationBeneficial_ownersIndividual;

		/**
		 * Why this person is considered a beneficial owner of the entity.
		 * Required
		 */
		prong: Create_an_entity_parametersCorporationBeneficial_ownersProng;
	}
	export interface EntityCorporationBeneficial_ownersFormProperties {

		/**
		 * This person's role or title within the entity.
		 * Required
		 */
		company_title: FormControl<string | null | undefined>,

		/**
		 * Why this person is considered a beneficial owner of the entity.
		 * Required
		 */
		prong: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersProng | null | undefined>,
	}
	export function CreateEntityCorporationBeneficial_ownersFormGroup() {
		return new FormGroup<EntityCorporationBeneficial_ownersFormProperties>({
			company_title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			prong: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersProng | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityCorporationBeneficial_ownersIndividual {

		/**
		 * The person's address.
		 * Required
		 */
		address: EntityCorporationBeneficial_ownersIndividualAddress;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: EntityCorporationBeneficial_ownersIndividualIdentification;

		/**
		 * The person's legal name.
		 * Required
		 */
		name: string;
	}
	export interface EntityCorporationBeneficial_ownersIndividualFormProperties {

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEntityCorporationBeneficial_ownersIndividualFormGroup() {
		return new FormGroup<EntityCorporationBeneficial_ownersIndividualFormProperties>({
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityCorporationBeneficial_ownersIndividualAddress {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface EntityCorporationBeneficial_ownersIndividualAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateEntityCorporationBeneficial_ownersIndividualAddressFormGroup() {
		return new FormGroup<EntityCorporationBeneficial_ownersIndividualAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityCorporationBeneficial_ownersIndividualIdentification {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: string;
	}
	export interface EntityCorporationBeneficial_ownersIndividualIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: FormControl<string | null | undefined>,
	}
	export function CreateEntityCorporationBeneficial_ownersIndividualIdentificationFormGroup() {
		return new FormGroup<EntityCorporationBeneficial_ownersIndividualIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number_last4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityJoint {

		/**
		 * The two individuals that share control of the entity.
		 * Required
		 */
		EntityJointIndividuals: Array<EntityJointIndividuals>;

		/**
		 * The entity's name.
		 * Required
		 */
		name: string;
	}
	export interface EntityJointFormProperties {

		/**
		 * The entity's name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEntityJointFormGroup() {
		return new FormGroup<EntityJointFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityJointIndividuals {

		/**
		 * The person's address.
		 * Required
		 */
		address: EntityJointIndividualsAddress;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: EntityJointIndividualsIdentification;

		/**
		 * The person's legal name.
		 * Required
		 */
		name: string;
	}
	export interface EntityJointIndividualsFormProperties {

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEntityJointIndividualsFormGroup() {
		return new FormGroup<EntityJointIndividualsFormProperties>({
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityJointIndividualsAddress {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface EntityJointIndividualsAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateEntityJointIndividualsAddressFormGroup() {
		return new FormGroup<EntityJointIndividualsAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityJointIndividualsIdentification {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: string;
	}
	export interface EntityJointIndividualsIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: FormControl<string | null | undefined>,
	}
	export function CreateEntityJointIndividualsIdentificationFormGroup() {
		return new FormGroup<EntityJointIndividualsIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number_last4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityNatural_person {

		/**
		 * The person's address.
		 * Required
		 */
		address: EntityNatural_personAddress;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: EntityNatural_personIdentification;

		/**
		 * The person's legal name.
		 * Required
		 */
		name: string;
	}
	export interface EntityNatural_personFormProperties {

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEntityNatural_personFormGroup() {
		return new FormGroup<EntityNatural_personFormProperties>({
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityNatural_personAddress {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface EntityNatural_personAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateEntityNatural_personAddressFormGroup() {
		return new FormGroup<EntityNatural_personAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityNatural_personIdentification {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: string;
	}
	export interface EntityNatural_personIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: FormControl<string | null | undefined>,
	}
	export function CreateEntityNatural_personIdentificationFormGroup() {
		return new FormGroup<EntityNatural_personIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number_last4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntitySupplemental_documents {

		/**
		 * The File containing the document.
		 * Required
		 */
		file_id: string;
	}
	export interface EntitySupplemental_documentsFormProperties {

		/**
		 * The File containing the document.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateEntitySupplemental_documentsFormGroup() {
		return new FormGroup<EntitySupplemental_documentsFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrust {

		/**
		 * The trust's address.
		 * Required
		 */
		address: EntityTrustAddress;

		/**
		 * Whether the trust is `revocable` or `irrevocable`.
		 * Required
		 */
		category: Create_an_entity_parametersTrustCategory;

		/**
		 * The ID for the File containing the formation document of the trust.
		 * Required
		 */
		formation_document_file_id: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
		 * Required
		 */
		formation_state: string;

		/**
		 * The grantor of the trust. Will be present if the `category` is `revocable`.
		 * Required
		 */
		grantor: EntityTrustGrantor;

		/**
		 * The trust's name
		 * Required
		 */
		name: string;

		/**
		 * The Employer Identification Number (EIN) of the trust itself.
		 * Required
		 */
		tax_identifier: string;

		/**
		 * The trustees of the trust.
		 * Required
		 */
		EntityTrustTrustees: Array<EntityTrustTrustees>;
	}
	export interface EntityTrustFormProperties {

		/**
		 * Whether the trust is `revocable` or `irrevocable`.
		 * Required
		 */
		category: FormControl<Create_an_entity_parametersTrustCategory | null | undefined>,

		/**
		 * The ID for the File containing the formation document of the trust.
		 * Required
		 */
		formation_document_file_id: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
		 * Required
		 */
		formation_state: FormControl<string | null | undefined>,

		/**
		 * The trust's name
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * The Employer Identification Number (EIN) of the trust itself.
		 * Required
		 */
		tax_identifier: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustFormGroup() {
		return new FormGroup<EntityTrustFormProperties>({
			category: new FormControl<Create_an_entity_parametersTrustCategory | null | undefined>(undefined, [Validators.required]),
			formation_document_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			formation_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			tax_identifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustAddress {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface EntityTrustAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustAddressFormGroup() {
		return new FormGroup<EntityTrustAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustGrantor {

		/**
		 * The person's address.
		 * Required
		 */
		address: EntityTrustGrantorAddress;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: EntityTrustGrantorIdentification;

		/**
		 * The person's legal name.
		 * Required
		 */
		name: string;
	}
	export interface EntityTrustGrantorFormProperties {

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustGrantorFormGroup() {
		return new FormGroup<EntityTrustGrantorFormProperties>({
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustGrantorAddress {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface EntityTrustGrantorAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustGrantorAddressFormGroup() {
		return new FormGroup<EntityTrustGrantorAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustGrantorIdentification {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: string;
	}
	export interface EntityTrustGrantorIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustGrantorIdentificationFormGroup() {
		return new FormGroup<EntityTrustGrantorIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number_last4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustTrustees {

		/**
		 * The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.
		 * Required
		 */
		individual: EntityTrustTrusteesIndividual;

		/**
		 * The structure of the trustee. Will always be equal to `individual`.
		 * Required
		 */
		structure: Create_an_entity_parametersTrustTrusteesStructure;
	}
	export interface EntityTrustTrusteesFormProperties {

		/**
		 * The structure of the trustee. Will always be equal to `individual`.
		 * Required
		 */
		structure: FormControl<Create_an_entity_parametersTrustTrusteesStructure | null | undefined>,
	}
	export function CreateEntityTrustTrusteesFormGroup() {
		return new FormGroup<EntityTrustTrusteesFormProperties>({
			structure: new FormControl<Create_an_entity_parametersTrustTrusteesStructure | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustTrusteesIndividual {

		/**
		 * The person's address.
		 * Required
		 */
		address: EntityTrustTrusteesIndividualAddress;

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: Date;

		/**
		 * A means of verifying the person's identity.
		 * Required
		 */
		identification: EntityTrustTrusteesIndividualIdentification;

		/**
		 * The person's legal name.
		 * Required
		 */
		name: string;
	}
	export interface EntityTrustTrusteesIndividualFormProperties {

		/**
		 * The person's date of birth in YYYY-MM-DD format.
		 * Required
		 */
		date_of_birth: FormControl<Date | null | undefined>,

		/**
		 * The person's legal name.
		 * Required
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustTrusteesIndividualFormGroup() {
		return new FormGroup<EntityTrustTrusteesIndividualFormProperties>({
			date_of_birth: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustTrusteesIndividualAddress {

		/**
		 * The city of the address.
		 * Required
		 */
		city: string;

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: string;

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: string;

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: string;

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: string;
	}
	export interface EntityTrustTrusteesIndividualAddressFormProperties {

		/**
		 * The city of the address.
		 * Required
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the address.
		 * Required
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address.
		 * Required
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
		 * Required
		 */
		state: FormControl<string | null | undefined>,

		/**
		 * The ZIP code of the address.
		 * Required
		 */
		zip: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustTrusteesIndividualAddressFormGroup() {
		return new FormGroup<EntityTrustTrusteesIndividualAddressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EntityTrustTrusteesIndividualIdentification {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod;

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: string;
	}
	export interface EntityTrustTrusteesIndividualIdentificationFormProperties {

		/**
		 * A method that can be used to verify the individual's identity.
		 * Required
		 */
		method: FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>,

		/**
		 * The last 4 digits of the identification number that can be used to verify the individual's identity.
		 * Required
		 */
		number_last4: FormControl<string | null | undefined>,
	}
	export function CreateEntityTrustTrusteesIndividualIdentificationFormGroup() {
		return new FormGroup<EntityTrustTrusteesIndividualIdentificationFormProperties>({
			method: new FormControl<Create_an_entity_parametersCorporationBeneficial_ownersIndividualIdentificationMethod | null | undefined>(undefined, [Validators.required]),
			number_last4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EntityType { entity = 'entity' }


	/** A list of Entity objects */
	export interface Entity_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Entity>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Entity objects */
	export interface Entity_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateEntity_listFormGroup() {
		return new FormGroup<Entity_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Error {
	}
	export interface ErrorFormProperties {
	}
	export function CreateErrorFormGroup() {
		return new FormGroup<ErrorFormProperties>({
		});

	}


	/** Events are records of things that happened to objects in the API. They also result in webhooks being generated. */
	export interface Event {

		/**
		 * The identifier of the object that generated this Event.
		 * Required
		 */
		associated_object_id: string;

		/**
		 * The type of the object that generated this Event.
		 * Required
		 */
		associated_object_type: string;

		/**
		 * The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Create_an_event_subscription_parametersSelected_event_category;

		/**
		 * The time the Event was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The Event identifier.
		 * Required
		 */
		id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `event`.
		 * Required
		 */
		type: EventType;
	}

	/** Events are records of things that happened to objects in the API. They also result in webhooks being generated. */
	export interface EventFormProperties {

		/**
		 * The identifier of the object that generated this Event.
		 * Required
		 */
		associated_object_id: FormControl<string | null | undefined>,

		/**
		 * The type of the object that generated this Event.
		 * Required
		 */
		associated_object_type: FormControl<string | null | undefined>,

		/**
		 * The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Create_an_event_subscription_parametersSelected_event_category | null | undefined>,

		/**
		 * The time the Event was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The Event identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `event`.
		 * Required
		 */
		type: FormControl<EventType | null | undefined>,
	}
	export function CreateEventFormGroup() {
		return new FormGroup<EventFormProperties>({
			associated_object_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			associated_object_type: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			category: new FormControl<Create_an_event_subscription_parametersSelected_event_category | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<EventType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum EventType { event = 'event' }


	/** A list of Event objects */
	export interface Event_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Event>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Event objects */
	export interface Event_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateEvent_listFormGroup() {
		return new FormGroup<Event_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Webhooks are event notifications we send to you by HTTPS POST requests. Event Subscriptions are how you configure your application to listen for them. You can create an Event Subscription through your [developer dashboard](https://dashboard.increase.com/developers/webhooks) or the API. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks). */
	export interface Event_subscription {

		/**
		 * The time the event subscription was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The event subscription identifier.
		 * Required
		 */
		id: string;

		/**
		 * If specified, this subscription will only receive webhooks for Events with the specified `category`.
		 * Required
		 */
		selected_event_category: Create_an_event_subscription_parametersSelected_event_category;

		/**
		 * The key that will be used to sign webhooks.
		 * Required
		 */
		shared_secret: string;

		/**
		 * This indicates if we'll send notifications to this subscription.
		 * Required
		 */
		status: Event_subscriptionStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `event_subscription`.
		 * Required
		 */
		type: Event_subscriptionType;

		/**
		 * The webhook url where we'll send notifications.
		 * Required
		 */
		url: string;
	}

	/** Webhooks are event notifications we send to you by HTTPS POST requests. Event Subscriptions are how you configure your application to listen for them. You can create an Event Subscription through your [developer dashboard](https://dashboard.increase.com/developers/webhooks) or the API. For more information, see our [webhooks guide](https://increase.com/documentation/webhooks). */
	export interface Event_subscriptionFormProperties {

		/**
		 * The time the event subscription was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The event subscription identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * If specified, this subscription will only receive webhooks for Events with the specified `category`.
		 * Required
		 */
		selected_event_category: FormControl<Create_an_event_subscription_parametersSelected_event_category | null | undefined>,

		/**
		 * The key that will be used to sign webhooks.
		 * Required
		 */
		shared_secret: FormControl<string | null | undefined>,

		/**
		 * This indicates if we'll send notifications to this subscription.
		 * Required
		 */
		status: FormControl<Event_subscriptionStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `event_subscription`.
		 * Required
		 */
		type: FormControl<Event_subscriptionType | null | undefined>,

		/**
		 * The webhook url where we'll send notifications.
		 * Required
		 */
		url: FormControl<string | null | undefined>,
	}
	export function CreateEvent_subscriptionFormGroup() {
		return new FormGroup<Event_subscriptionFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			selected_event_category: new FormControl<Create_an_event_subscription_parametersSelected_event_category | null | undefined>(undefined, [Validators.required]),
			shared_secret: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Event_subscriptionStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Event_subscriptionType | null | undefined>(undefined, [Validators.required]),
			url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Event_subscriptionStatus { active = 'active', disabled = 'disabled', deleted = 'deleted', requires_attention = 'requires_attention' }

	export enum Event_subscriptionType { event_subscription = 'event_subscription' }


	/** A list of Event Subscription objects */
	export interface Event_subscription_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Event_subscription>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Event Subscription objects */
	export interface Event_subscription_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateEvent_subscription_listFormGroup() {
		return new FormGroup<Event_subscription_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Exports are batch summaries of your Increase data. You can make them from the API or dashboard. Since they can take a while, they are generated asynchronously. We send a webhook when they are ready. For more information, please read our [Exports documentation](https://increase.com/documentation/exports). */
	export interface export_ {

		/**
		 * The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.
		 * Required
		 */
		category: Create_an_export_parametersCategory;

		/**
		 * The time the Export was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.
		 * Required
		 */
		file_download_url: string;

		/**
		 * The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.
		 * Required
		 */
		file_id: string;

		/**
		 * The Export identifier.
		 * Required
		 */
		id: string;

		/**
		 * The status of the Export.
		 * Required
		 */
		status: export_Status;

		/**
		 * A constant representing the object's type. For this resource it will always be `export`.
		 * Required
		 */
		type: export_Type;
	}

	/** Exports are batch summaries of your Increase data. You can make them from the API or dashboard. Since they can take a while, they are generated asynchronously. We send a webhook when they are ready. For more information, please read our [Exports documentation](https://increase.com/documentation/exports). */
	export interface export_FormProperties {

		/**
		 * The category of the Export. We may add additional possible values for this enum over time; your application should be able to handle that gracefully.
		 * Required
		 */
		category: FormControl<Create_an_export_parametersCategory | null | undefined>,

		/**
		 * The time the Export was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * A URL at which the Export's file can be downloaded. This will be present when the Export's status transitions to `complete`.
		 * Required
		 */
		file_download_url: FormControl<string | null | undefined>,

		/**
		 * The File containing the contents of the Export. This will be present when the Export's status transitions to `complete`.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The Export identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The status of the Export.
		 * Required
		 */
		status: FormControl<export_Status | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `export`.
		 * Required
		 */
		type: FormControl<export_Type | null | undefined>,
	}
	export function Createexport_FormGroup() {
		return new FormGroup<export_FormProperties>({
			category: new FormControl<Create_an_export_parametersCategory | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			file_download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<export_Status | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<export_Type | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum export_Status { pending = 'pending', complete = 'complete' }

	export enum export_Type { export = 'export' }


	/** A list of Export objects */
	export interface Export_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<export_>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Export objects */
	export interface Export_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateExport_listFormGroup() {
		return new FormGroup<Export_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** External Accounts represent accounts at financial institutions other than Increase. You can use this API to store their details for reuse. */
	export interface External_account {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The External Account's description for display purposes.
		 * Required
		 */
		description: string;

		/**
		 * The type of the account to which the transfer will be sent.
		 * Required
		 */
		funding: Create_an_external_account_parametersFunding;

		/**
		 * The External Account's identifier.
		 * Required
		 */
		id: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/**
		 * The External Account's status.
		 * Required
		 */
		status: External_accountStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `external_account`.
		 * Required
		 */
		type: External_accountType;

		/**
		 * If you have verified ownership of the External Account.
		 * Required
		 */
		verification_status: External_accountVerification_status;
	}

	/** External Accounts represent accounts at financial institutions other than Increase. You can use this API to store their details for reuse. */
	export interface External_accountFormProperties {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The External Account's description for display purposes.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The type of the account to which the transfer will be sent.
		 * Required
		 */
		funding: FormControl<Create_an_external_account_parametersFunding | null | undefined>,

		/**
		 * The External Account's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The External Account's status.
		 * Required
		 */
		status: FormControl<External_accountStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `external_account`.
		 * Required
		 */
		type: FormControl<External_accountType | null | undefined>,

		/**
		 * If you have verified ownership of the External Account.
		 * Required
		 */
		verification_status: FormControl<External_accountVerification_status | null | undefined>,
	}
	export function CreateExternal_accountFormGroup() {
		return new FormGroup<External_accountFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			funding: new FormControl<Create_an_external_account_parametersFunding | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<External_accountStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<External_accountType | null | undefined>(undefined, [Validators.required]),
			verification_status: new FormControl<External_accountVerification_status | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum External_accountStatus { active = 'active', archived = 'archived' }

	export enum External_accountType { external_account = 'external_account' }

	export enum External_accountVerification_status { unverified = 'unverified', pending = 'pending', verified = 'verified' }


	/** A list of External Account objects */
	export interface External_account_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<External_account>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of External Account objects */
	export interface External_account_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateExternal_account_listFormGroup() {
		return new FormGroup<External_account_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Files are objects that represent a file hosted on Increase's servers. The file may have been uploaded by you (for example, when uploading a check image) or it may have been created by Increase (for example, an autogenerated statement PDF). */
	export interface File {

		/**
		 * The time the File was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * A description of the File.
		 * Required
		 */
		description: string;

		/**
		 * Whether the File was generated by Increase or by you and sent to Increase.
		 * Required
		 */
		direction: FileDirection;

		/**
		 * A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.
		 * Required
		 */
		download_url: string;

		/**
		 * The filename that was provided upon upload or generated by Increase.
		 * Required
		 */
		filename: string;

		/**
		 * The File's identifier.
		 * Required
		 */
		id: string;

		/**
		 * What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		purpose: FilePurpose;

		/**
		 * A constant representing the object's type. For this resource it will always be `file`.
		 * Required
		 */
		type: FileType;
	}

	/** Files are objects that represent a file hosted on Increase's servers. The file may have been uploaded by you (for example, when uploading a check image) or it may have been created by Increase (for example, an autogenerated statement PDF). */
	export interface FileFormProperties {

		/**
		 * The time the File was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * A description of the File.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Whether the File was generated by Increase or by you and sent to Increase.
		 * Required
		 */
		direction: FormControl<FileDirection | null | undefined>,

		/**
		 * A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.
		 * Required
		 */
		download_url: FormControl<string | null | undefined>,

		/**
		 * The filename that was provided upon upload or generated by Increase.
		 * Required
		 */
		filename: FormControl<string | null | undefined>,

		/**
		 * The File's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		purpose: FormControl<FilePurpose | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `file`.
		 * Required
		 */
		type: FormControl<FileType | null | undefined>,
	}
	export function CreateFileFormGroup() {
		return new FormGroup<FileFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			direction: new FormControl<FileDirection | null | undefined>(undefined, [Validators.required]),
			download_url: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			filename: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			purpose: new FormControl<FilePurpose | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<FileType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum FileDirection { to_increase = 'to_increase', from_increase = 'from_increase' }

	export enum FilePurpose { check_image_front = 'check_image_front', check_image_back = 'check_image_back', form_1099_int = 'form_1099_int', form_ss_4 = 'form_ss_4', identity_document = 'identity_document', increase_statement = 'increase_statement', other = 'other', trust_formation_document = 'trust_formation_document', digital_wallet_artwork = 'digital_wallet_artwork', digital_wallet_app_icon = 'digital_wallet_app_icon', document_request = 'document_request', entity_supplemental_document = 'entity_supplemental_document', export = 'export' }

	export enum FileType { file = 'file' }


	/** A list of File objects */
	export interface File_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<File>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of File objects */
	export interface File_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateFile_listFormGroup() {
		return new FormGroup<File_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Groups represent organizations using Increase. You can retrieve information about your own organization via the API, or (more commonly) OAuth platforms can retrieve information about the organizations that have granted them access. */
	export interface Group {

		/**
		 * If the Group is allowed to create ACH debits.
		 * Required
		 */
		ach_debit_status: GroupAch_debit_status;

		/**
		 * If the Group is activated or not.
		 * Required
		 */
		activation_status: GroupActivation_status;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The Group identifier.
		 * Required
		 */
		id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `group`.
		 * Required
		 */
		type: GroupType;
	}

	/** Groups represent organizations using Increase. You can retrieve information about your own organization via the API, or (more commonly) OAuth platforms can retrieve information about the organizations that have granted them access. */
	export interface GroupFormProperties {

		/**
		 * If the Group is allowed to create ACH debits.
		 * Required
		 */
		ach_debit_status: FormControl<GroupAch_debit_status | null | undefined>,

		/**
		 * If the Group is activated or not.
		 * Required
		 */
		activation_status: FormControl<GroupActivation_status | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The Group identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `group`.
		 * Required
		 */
		type: FormControl<GroupType | null | undefined>,
	}
	export function CreateGroupFormGroup() {
		return new FormGroup<GroupFormProperties>({
			ach_debit_status: new FormControl<GroupAch_debit_status | null | undefined>(undefined, [Validators.required]),
			activation_status: new FormControl<GroupActivation_status | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<GroupType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum GroupAch_debit_status { disabled = 'disabled', enabled = 'enabled' }

	export enum GroupActivation_status { unactivated = 'unactivated', activated = 'activated' }

	export enum GroupType { group = 'group' }


	/** If unauthorized activity occurs via ACH, you can create an Inbound ACH Transfer Return and we'll reverse the transaction. You can create an Inbound ACH Transfer return the first two days after receiving an Inbound ACH Transfer. */
	export interface Inbound_ach_transfer_return {

		/**
		 * The ID of the Inbound ACH Transfer Return.
		 * Required
		 */
		id: string;

		/**
		 * The ID for the Transaction that is being returned.
		 * Required
		 */
		inbound_ach_transfer_transaction_id: string;

		/**
		 * The reason why this transfer will be returned. This is sent to the initiating bank.
		 * Required
		 */
		reason: Create_an_ach_return_parametersReason;

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: Inbound_ach_transfer_returnStatus;

		/**
		 * After the return is submitted to FedACH, this will contain supplemental details.
		 * Required
		 */
		submission: Inbound_ach_transfer_returnSubmission;

		/**
		 * The ID for the transaction refunding the transfer.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_return`.
		 * Required
		 */
		type: Inbound_ach_transfer_returnType;
	}

	/** If unauthorized activity occurs via ACH, you can create an Inbound ACH Transfer Return and we'll reverse the transaction. You can create an Inbound ACH Transfer return the first two days after receiving an Inbound ACH Transfer. */
	export interface Inbound_ach_transfer_returnFormProperties {

		/**
		 * The ID of the Inbound ACH Transfer Return.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The ID for the Transaction that is being returned.
		 * Required
		 */
		inbound_ach_transfer_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The reason why this transfer will be returned. This is sent to the initiating bank.
		 * Required
		 */
		reason: FormControl<Create_an_ach_return_parametersReason | null | undefined>,

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: FormControl<Inbound_ach_transfer_returnStatus | null | undefined>,

		/**
		 * The ID for the transaction refunding the transfer.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_return`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_returnType | null | undefined>,
	}
	export function CreateInbound_ach_transfer_returnFormGroup() {
		return new FormGroup<Inbound_ach_transfer_returnFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inbound_ach_transfer_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Create_an_ach_return_parametersReason | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Inbound_ach_transfer_returnStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_returnType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_ach_transfer_returnStatus { pending_submitting = 'pending_submitting', submitted = 'submitted' }

	export interface Inbound_ach_transfer_returnSubmission {

		/**
		 * When the ACH transfer return was sent to FedACH.
		 * Required
		 */
		submitted_at: Date;

		/**
		 * The trace number for the submission.
		 * Required
		 */
		trace_number: string;
	}
	export interface Inbound_ach_transfer_returnSubmissionFormProperties {

		/**
		 * When the ACH transfer return was sent to FedACH.
		 * Required
		 */
		submitted_at: FormControl<Date | null | undefined>,

		/**
		 * The trace number for the submission.
		 * Required
		 */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_returnSubmissionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_returnSubmissionFormProperties>({
			submitted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_ach_transfer_returnType { inbound_ach_transfer_return = 'inbound_ach_transfer_return' }


	/** A list of Inbound ACH Transfer Return objects */
	export interface Inbound_ach_transfer_return_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Inbound_ach_transfer_return>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Inbound ACH Transfer Return objects */
	export interface Inbound_ach_transfer_return_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_return_listFormGroup() {
		return new FormGroup<Inbound_ach_transfer_return_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The results of an inbound ACH Transfer simulation. */
	export interface Inbound_ach_transfer_simulation_result {

		/**
		 * If the ACH Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_ach_transfer`.
		 * Required
		 */
		declined_transaction: Inbound_ach_transfer_simulation_resultDeclined_transaction;

		/**
		 * If the ACH Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_ach_transfer`.
		 * Required
		 */
		transaction: Inbound_ach_transfer_simulation_resultTransaction;

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_simulation_result`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultType;
	}

	/** The results of an inbound ACH Transfer simulation. */
	export interface Inbound_ach_transfer_simulation_resultFormProperties {

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_simulation_result`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultType | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultFormProperties>({
			type: new FormControl<Inbound_ach_transfer_simulation_resultType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transaction {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Inbound_ach_transfer_simulation_resultDeclined_transactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: Declined_transactionType;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionFormProperties {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: FormControl<Declined_transactionType | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Declined_transactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSource {

		/**
		 * A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		 * Required
		 */
		ach_decline: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceAch_decline;

		/**
		 * A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		 * Required
		 */
		card_decline: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_decline;

		/**
		 * A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		 * Required
		 */
		card_route_decline: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_route_decline;

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Declined_transactionSourceCategory;

		/**
		 * A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		 * Required
		 */
		check_decline: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCheck_decline;

		/**
		 * A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		 * Required
		 */
		inbound_real_time_payments_transfer_decline: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline;

		/**
		 * A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		 * Required
		 */
		international_ach_decline: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceFormProperties {

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Declined_transactionSourceCategory | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceFormProperties>({
			category: new FormControl<Declined_transactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceAch_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceAch_declineReason;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceAch_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceAch_declineReason | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceAch_declineFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceAch_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceAch_declineReason | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: Declined_transactionSourceCard_declineNetwork;

		/**
		 * Fields specific to the `network`
		 * Required
		 */
		network_details: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details;

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: string;

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCard_declineReason;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>,

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: FormControl<string | null | undefined>,

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCard_declineReason | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>(undefined, [Validators.required]),
			real_time_decision_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCard_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details {

		/**
		 * Fields specific to the `visa` network
		 * Required
		 */
		visa: Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormProperties {
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormProperties>({
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator;

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormProperties {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>,

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormProperties>({
			electronic_commerce_indicator: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>(undefined, [Validators.required]),
			point_of_service_entry_mode: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_route_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_route_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_route_declineFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCard_route_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCheck_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		auxiliary_on_us: string;

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCheck_declineReason;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCheck_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceCheck_declineFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceCheck_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceInbound_real_time_payments_transfer_declineReason;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInternational_ach_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultDeclined_transactionSourceInternational_ach_declineFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultDeclined_transactionSourceInternational_ach_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransaction {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Inbound_ach_transfer_simulation_resultTransactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionType;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionFormProperties {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSource {

		/**
		 * A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		 * Required
		 */
		account_transfer_intention: Inbound_ach_transfer_simulation_resultTransactionSourceAccount_transfer_intention;

		/**
		 * A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		 * Required
		 */
		ach_check_conversion: Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion;

		/**
		 * A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		 * Required
		 */
		ach_check_conversion_return: Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion_return;

		/**
		 * A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		 * Required
		 */
		ach_transfer_intention: Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_intention;

		/**
		 * A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		 * Required
		 */
		ach_transfer_rejection: Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_rejection;

		/**
		 * A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		 * Required
		 */
		ach_transfer_return: Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_return;

		/**
		 * A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		 * Required
		 */
		card_dispute_acceptance: Inbound_ach_transfer_simulation_resultTransactionSourceCard_dispute_acceptance;

		/**
		 * A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		 * Required
		 */
		card_refund: Inbound_ach_transfer_simulation_resultTransactionSourceCard_refund;

		/**
		 * A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		 * Required
		 */
		card_revenue_payment: Inbound_ach_transfer_simulation_resultTransactionSourceCard_revenue_payment;

		/**
		 * A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		 * Required
		 */
		card_route_refund: Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_refund;

		/**
		 * A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		 * Required
		 */
		card_route_settlement: Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_settlement;

		/**
		 * A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		 * Required
		 */
		card_settlement: Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlement;

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Inbound_ach_transfer_simulation_resultTransactionSourceCategory;

		/**
		 * A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		 * Required
		 */
		check_deposit_acceptance: Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance;

		/**
		 * A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		 * Required
		 */
		check_deposit_return: Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_return;

		/**
		 * A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		 * Required
		 */
		check_transfer_intention: Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_intention;

		/**
		 * A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		 * Required
		 */
		check_transfer_rejection: Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_rejection;

		/**
		 * A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		 * Required
		 */
		check_transfer_return: Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_return;

		/**
		 * A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		 * Required
		 */
		check_transfer_stop_payment_request: Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request;

		/**
		 * A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		 * Required
		 */
		dispute_resolution: Inbound_ach_transfer_simulation_resultTransactionSourceDispute_resolution;

		/**
		 * A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		 * Required
		 */
		empyreal_cash_deposit: Inbound_ach_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit;

		/**
		 * A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		 * Required
		 */
		fee_payment: Inbound_ach_transfer_simulation_resultTransactionSourceFee_payment;

		/**
		 * A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		 * Required
		 */
		inbound_ach_transfer: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_ach_transfer;

		/**
		 * A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		 * Required
		 */
		inbound_check: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_check;

		/**
		 * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		 * Required
		 */
		inbound_international_ach_transfer: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer;

		/**
		 * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		 * Required
		 */
		inbound_real_time_payments_transfer_confirmation: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation;

		/**
		 * A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		 * Required
		 */
		inbound_wire_drawdown_payment: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment;

		/**
		 * A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		 * Required
		 */
		inbound_wire_drawdown_payment_reversal: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal;

		/**
		 * A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		 * Required
		 */
		inbound_wire_reversal: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_reversal;

		/**
		 * A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		 * Required
		 */
		inbound_wire_transfer: Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_transfer;

		/**
		 * A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		 * Required
		 */
		interest_payment: Inbound_ach_transfer_simulation_resultTransactionSourceInterest_payment;

		/**
		 * A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		 * Required
		 */
		internal_source: Inbound_ach_transfer_simulation_resultTransactionSourceInternal_source;

		/**
		 * A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		 * Required
		 */
		real_time_payments_transfer_acknowledgement: Inbound_ach_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement;

		/**
		 * A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		 * Required
		 */
		sample_funds: Inbound_ach_transfer_simulation_resultTransactionSourceSample_funds;

		/**
		 * A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		 * Required
		 */
		wire_drawdown_payment_intention: Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention;

		/**
		 * A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		 * Required
		 */
		wire_drawdown_payment_rejection: Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection;

		/**
		 * A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		 * Required
		 */
		wire_transfer_intention: Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_intention;

		/**
		 * A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		 * Required
		 */
		wire_transfer_rejection: Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_rejection;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceFormProperties {

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceFormProperties>({
			category: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAccount_transfer_intention {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: string;

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: string;

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: string;

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_intention {

		/** Required */
		account_number: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		routing_number: string;

		/** Required */
		statement_descriptor: string;

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		statement_descriptor: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statement_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_rejection {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_return {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: Ach_transferReturnReturn_reason_code;

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_returnFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<Ach_transferReturnReturn_reason_code | null | undefined>,

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_returnFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceAch_transfer_returnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<Ach_transferReturnReturn_reason_code | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_dispute_acceptance {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: Date;

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: string;

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties>({
			accepted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			card_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_refund {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCard_refundFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_settlement_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType { card_refund = 'card_refund' }

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_revenue_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transacted_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_refund {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_refundFormProperties {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCard_route_refundFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_settlement {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_settlementFormProperties {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCard_route_settlementFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCard_route_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlement {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: string;

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementFormProperties {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCard_settlementFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_authorization: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			presentment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			presentment_currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType { card_settlement = 'card_settlement' }

	export enum Inbound_ach_transfer_simulation_resultTransactionSourceCategory { account_transfer_intention = 'account_transfer_intention', ach_check_conversion_return = 'ach_check_conversion_return', ach_check_conversion = 'ach_check_conversion', ach_transfer_intention = 'ach_transfer_intention', ach_transfer_rejection = 'ach_transfer_rejection', ach_transfer_return = 'ach_transfer_return', card_dispute_acceptance = 'card_dispute_acceptance', card_refund = 'card_refund', card_settlement = 'card_settlement', card_revenue_payment = 'card_revenue_payment', check_deposit_acceptance = 'check_deposit_acceptance', check_deposit_return = 'check_deposit_return', check_transfer_intention = 'check_transfer_intention', check_transfer_return = 'check_transfer_return', check_transfer_rejection = 'check_transfer_rejection', check_transfer_stop_payment_request = 'check_transfer_stop_payment_request', dispute_resolution = 'dispute_resolution', empyreal_cash_deposit = 'empyreal_cash_deposit', fee_payment = 'fee_payment', inbound_ach_transfer = 'inbound_ach_transfer', inbound_ach_transfer_return_intention = 'inbound_ach_transfer_return_intention', inbound_check = 'inbound_check', inbound_international_ach_transfer = 'inbound_international_ach_transfer', inbound_real_time_payments_transfer_confirmation = 'inbound_real_time_payments_transfer_confirmation', inbound_wire_drawdown_payment_reversal = 'inbound_wire_drawdown_payment_reversal', inbound_wire_drawdown_payment = 'inbound_wire_drawdown_payment', inbound_wire_reversal = 'inbound_wire_reversal', inbound_wire_transfer = 'inbound_wire_transfer', interest_payment = 'interest_payment', internal_general_ledger_transaction = 'internal_general_ledger_transaction', internal_source = 'internal_source', card_route_refund = 'card_route_refund', card_route_settlement = 'card_route_settlement', real_time_payments_transfer_acknowledgement = 'real_time_payments_transfer_acknowledgement', sample_funds = 'sample_funds', wire_drawdown_payment_intention = 'wire_drawdown_payment_intention', wire_drawdown_payment_rejection = 'wire_drawdown_payment_rejection', wire_transfer_intention = 'wire_transfer_intention', wire_transfer_rejection = 'wire_transfer_rejection', other = 'other' }

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: string;

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: string;

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: string;

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			serial_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		return_reason: Check_depositDeposit_returnReturn_reason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		return_reason: FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			return_reason: new FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_intention {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: string;

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: string;

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: string;

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: string;

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: string;

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties>({
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_rejection {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_return {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: string;

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: Check_transferReturn_detailsReason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormProperties {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: FormControl<Check_transferReturn_detailsReason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Check_transferReturn_detailsReason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: Date;

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: Check_transferStop_payment_requestType;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: FormControl<Date | null | undefined>,

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: FormControl<Check_transferStop_payment_requestType | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties>({
			requested_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferStop_payment_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceDispute_resolution {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceDispute_resolutionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceDispute_resolutionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceDispute_resolutionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			disputed_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		bag_id: string;

		/** Required */
		deposit_date: Date;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		bag_id: FormControl<string | null | undefined>,

		/** Required */
		deposit_date: FormControl<Date | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			bag_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deposit_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceFee_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceFee_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceFee_paymentFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceFee_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_ach_transferFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_check {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		check_front_image_file_id: string;

		/** Required */
		check_number: string;

		/** Required */
		check_rear_image_file_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_checkFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		check_front_image_file_id: FormControl<string | null | undefined>,

		/** Required */
		check_number: FormControl<string | null | undefined>,

		/** Required */
		check_rear_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_checkFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_checkFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_rear_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: string;

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			financial_institution_to_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_transfer {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;

		/** Required */
		originator_to_beneficiary_information_line1: string;

		/** Required */
		originator_to_beneficiary_information_line2: string;

		/** Required */
		originator_to_beneficiary_information_line3: string;

		/** Required */
		originator_to_beneficiary_information_line4: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_transferFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_transferFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInbound_wire_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInterest_payment {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInterest_paymentFormProperties {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInterest_paymentFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInterest_paymentFormProperties>({
			accrued_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInternal_source {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		reason: Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		reason: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason { bank_migration = 'bank_migration', cashback = 'cashback', empyreal_adjustment = 'empyreal_adjustment', error = 'error', error_correction = 'error_correction', fees = 'fees', interest = 'interest', sample_funds = 'sample_funds', sample_funds_return = 'sample_funds_return' }

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: string;

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: FormControl<string | null | undefined>,

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceSample_funds {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceSample_fundsFormProperties {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceSample_fundsFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceSample_fundsFormProperties>({
			originator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention {

		/** Required */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_intention {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormProperties {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_ach_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_ach_transfer_simulation_resultTransactionType { transaction = 'transaction' }

	export enum Inbound_ach_transfer_simulation_resultType { inbound_ach_transfer_simulation_result = 'inbound_ach_transfer_simulation_result' }


	/** The results of a Card Authorization simulation. */
	export interface Inbound_card_authorization_simulation_result {

		/**
		 * If the authorization attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: card_decline`.
		 * Required
		 */
		declined_transaction: Inbound_card_authorization_simulation_resultDeclined_transaction;

		/**
		 * If the authorization attempt succeeds, this will contain the resulting Pending Transaction object. The Pending Transaction's `source` will be of `category: card_authorization`.
		 * Required
		 */
		pending_transaction: Inbound_card_authorization_simulation_resultPending_transaction;

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_card_authorization_simulation_result`.
		 * Required
		 */
		type: Inbound_card_authorization_simulation_resultType;
	}

	/** The results of a Card Authorization simulation. */
	export interface Inbound_card_authorization_simulation_resultFormProperties {

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_card_authorization_simulation_result`.
		 * Required
		 */
		type: FormControl<Inbound_card_authorization_simulation_resultType | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultFormProperties>({
			type: new FormControl<Inbound_card_authorization_simulation_resultType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transaction {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Inbound_card_authorization_simulation_resultDeclined_transactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: Declined_transactionType;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionFormProperties {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: FormControl<Declined_transactionType | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Declined_transactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSource {

		/**
		 * A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		 * Required
		 */
		ach_decline: Inbound_card_authorization_simulation_resultDeclined_transactionSourceAch_decline;

		/**
		 * A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		 * Required
		 */
		card_decline: Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_decline;

		/**
		 * A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		 * Required
		 */
		card_route_decline: Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_route_decline;

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Declined_transactionSourceCategory;

		/**
		 * A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		 * Required
		 */
		check_decline: Inbound_card_authorization_simulation_resultDeclined_transactionSourceCheck_decline;

		/**
		 * A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		 * Required
		 */
		inbound_real_time_payments_transfer_decline: Inbound_card_authorization_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline;

		/**
		 * A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		 * Required
		 */
		international_ach_decline: Inbound_card_authorization_simulation_resultDeclined_transactionSourceInternational_ach_decline;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceFormProperties {

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Declined_transactionSourceCategory | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceFormProperties>({
			category: new FormControl<Declined_transactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceAch_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceAch_declineReason;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceAch_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceAch_declineReason | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceAch_declineFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceAch_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceAch_declineReason | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: Declined_transactionSourceCard_declineNetwork;

		/**
		 * Fields specific to the `network`
		 * Required
		 */
		network_details: Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_details;

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: string;

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCard_declineReason;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>,

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: FormControl<string | null | undefined>,

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCard_declineReason | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>(undefined, [Validators.required]),
			real_time_decision_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCard_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_details {

		/**
		 * Fields specific to the `visa` network
		 * Required
		 */
		visa: Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormProperties {
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormProperties>({
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator;

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormProperties {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>,

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormProperties>({
			electronic_commerce_indicator: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>(undefined, [Validators.required]),
			point_of_service_entry_mode: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_route_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_route_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceCard_route_declineFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceCard_route_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCheck_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		auxiliary_on_us: string;

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCheck_declineReason;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceCheck_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceCheck_declineFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceCheck_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceInbound_real_time_payments_transfer_declineReason;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceInternational_ach_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_card_authorization_simulation_resultDeclined_transactionSourceInternational_ach_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultDeclined_transactionSourceInternational_ach_declineFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultDeclined_transactionSourceInternational_ach_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transaction {

		/**
		 * The identifier for the account this Pending Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction was completed.
		 * Required
		 */
		completed_at: Date;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Pending Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Pending Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
		 * Required
		 */
		source: Inbound_card_authorization_simulation_resultPending_transactionSource;

		/**
		 * Whether the Pending Transaction has been confirmed and has an associated Transaction.
		 * Required
		 */
		status: export_Status;

		/**
		 * A constant representing the object's type. For this resource it will always be `pending_transaction`.
		 * Required
		 */
		type: Inbound_card_authorization_simulation_resultPending_transactionType;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionFormProperties {

		/**
		 * The identifier for the account this Pending Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction was completed.
		 * Required
		 */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Pending Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Pending Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * Whether the Pending Transaction has been confirmed and has an associated Transaction.
		 * Required
		 */
		status: FormControl<export_Status | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `pending_transaction`.
		 * Required
		 */
		type: FormControl<Inbound_card_authorization_simulation_resultPending_transactionType | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<export_Status | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSource {

		/**
		 * A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
		 * Required
		 */
		account_transfer_instruction: Inbound_card_authorization_simulation_resultPending_transactionSourceAccount_transfer_instruction;

		/**
		 * A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
		 * Required
		 */
		ach_transfer_instruction: Inbound_card_authorization_simulation_resultPending_transactionSourceAch_transfer_instruction;

		/**
		 * A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
		 * Required
		 */
		card_authorization: Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorization;

		/**
		 * A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
		 * Required
		 */
		card_route_authorization: Inbound_card_authorization_simulation_resultPending_transactionSourceCard_route_authorization;

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Inbound_card_authorization_simulation_resultPending_transactionSourceCategory;

		/**
		 * A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
		 * Required
		 */
		check_deposit_instruction: Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_deposit_instruction;

		/**
		 * A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
		 * Required
		 */
		check_transfer_instruction: Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_transfer_instruction;

		/**
		 * A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
		 * Required
		 */
		inbound_funds_hold: Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_hold;

		/**
		 * A Real Time Payments Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_instruction`.
		 * Required
		 */
		real_time_payments_transfer_instruction: Inbound_card_authorization_simulation_resultPending_transactionSourceReal_time_payments_transfer_instruction;

		/**
		 * A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
		 * Required
		 */
		wire_drawdown_payment_instruction: Inbound_card_authorization_simulation_resultPending_transactionSourceWire_drawdown_payment_instruction;

		/**
		 * A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
		 * Required
		 */
		wire_transfer_instruction: Inbound_card_authorization_simulation_resultPending_transactionSourceWire_transfer_instruction;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceFormProperties {

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCategory | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceFormProperties>({
			category: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceAccount_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceAccount_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceAccount_transfer_instructionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceAccount_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceAch_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the ACH Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceAch_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the ACH Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceAch_transfer_instructionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceAch_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorization {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: string;

		/**
		 * The Card Authorization identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: string;

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: Declined_transactionSourceCard_declineNetwork;

		/**
		 * Fields specific to the `network`
		 * Required
		 */
		network_details: Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_details;

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_authorization`.
		 * Required
		 */
		type: Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/**
		 * The Card Authorization identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: FormControl<string | null | undefined>,

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>,

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_authorization`.
		 * Required
		 */
		type: FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>(undefined, [Validators.required]),
			real_time_decision_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_details {

		/**
		 * Fields specific to the `visa` network
		 * Required
		 */
		visa: Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsVisa;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsFormProperties {
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsFormProperties>({
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsVisa {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator;

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsVisaFormProperties {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>,

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsVisaFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationNetwork_detailsVisaFormProperties>({
			electronic_commerce_indicator: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>(undefined, [Validators.required]),
			point_of_service_entry_mode: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType { card_authorization = 'card_authorization' }

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_route_authorization {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCard_route_authorizationFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceCard_route_authorizationFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_route_authorizationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_card_authorization_simulation_resultPending_transactionSourceCategory { account_transfer_instruction = 'account_transfer_instruction', ach_transfer_instruction = 'ach_transfer_instruction', card_authorization = 'card_authorization', check_deposit_instruction = 'check_deposit_instruction', check_transfer_instruction = 'check_transfer_instruction', inbound_funds_hold = 'inbound_funds_hold', card_route_authorization = 'card_route_authorization', real_time_payments_transfer_instruction = 'real_time_payments_transfer_instruction', wire_drawdown_payment_instruction = 'wire_drawdown_payment_instruction', wire_transfer_instruction = 'wire_transfer_instruction', other = 'other' }

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_deposit_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the File containing the image of the back of the check that was deposited.
		 * Required
		 */
		back_image_file_id: string;

		/**
		 * The identifier of the Check Deposit.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the File containing the image of the front of the check that was deposited.
		 * Required
		 */
		front_image_file_id: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_deposit_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing the image of the back of the check that was deposited.
		 * Required
		 */
		back_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Check Deposit.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the File containing the image of the front of the check that was deposited.
		 * Required
		 */
		front_image_file_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceCheck_deposit_instructionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_deposit_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			back_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Check Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Check Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceCheck_transfer_instructionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceCheck_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_hold {

		/**
		 * The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * When the hold will be released automatically. Certain conditions may cause it to be released before this time.
		 * Required
		 */
		automatically_releases_at: Date;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The ID of the Transaction for which funds were held.
		 * Required
		 */
		held_transaction_id: string;

		/**
		 * The ID of the Pending Transaction representing the held funds.
		 * Required
		 */
		pending_transaction_id: string;

		/**
		 * When the hold was released (if it has been released).
		 * Required
		 */
		released_at: Date;

		/**
		 * The status of the hold.
		 * Required
		 */
		status: Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdFormProperties {

		/**
		 * The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * When the hold will be released automatically. Certain conditions may cause it to be released before this time.
		 * Required
		 */
		automatically_releases_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The ID of the Transaction for which funds were held.
		 * Required
		 */
		held_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the Pending Transaction representing the held funds.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * When the hold was released (if it has been released).
		 * Required
		 */
		released_at: FormControl<Date | null | undefined>,

		/**
		 * The status of the hold.
		 * Required
		 */
		status: FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			automatically_releases_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			held_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			released_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus { held = 'held', complete = 'complete' }

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceReal_time_payments_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceReal_time_payments_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceReal_time_payments_transfer_instructionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceReal_time_payments_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceWire_drawdown_payment_instruction {

		/** Required */
		account_number: string;

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceWire_drawdown_payment_instructionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceWire_drawdown_payment_instructionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceWire_drawdown_payment_instructionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceWire_transfer_instruction {

		/** Required */
		account_number: string;

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_card_authorization_simulation_resultPending_transactionSourceWire_transfer_instructionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_card_authorization_simulation_resultPending_transactionSourceWire_transfer_instructionFormGroup() {
		return new FormGroup<Inbound_card_authorization_simulation_resultPending_transactionSourceWire_transfer_instructionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_card_authorization_simulation_resultPending_transactionType { pending_transaction = 'pending_transaction' }

	export enum Inbound_card_authorization_simulation_resultType { inbound_card_authorization_simulation_result = 'inbound_card_authorization_simulation_result' }


	/** The results of a Digital Wallet Token simulation. */
	export interface Inbound_digital_wallet_token_request_simulation_result {

		/**
		 * If the simulated tokenization attempt was declined, this field contains details as to why.
		 * Required
		 */
		decline_reason: Inbound_digital_wallet_token_request_simulation_resultDecline_reason;

		/**
		 * If the simulated tokenization attempt was accepted, this field contains the id of the Digital Wallet Token that was created.
		 * Required
		 */
		digital_wallet_token_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_digital_wallet_token_request_simulation_result`.
		 * Required
		 */
		type: Inbound_digital_wallet_token_request_simulation_resultType;
	}

	/** The results of a Digital Wallet Token simulation. */
	export interface Inbound_digital_wallet_token_request_simulation_resultFormProperties {

		/**
		 * If the simulated tokenization attempt was declined, this field contains details as to why.
		 * Required
		 */
		decline_reason: FormControl<Inbound_digital_wallet_token_request_simulation_resultDecline_reason | null | undefined>,

		/**
		 * If the simulated tokenization attempt was accepted, this field contains the id of the Digital Wallet Token that was created.
		 * Required
		 */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_digital_wallet_token_request_simulation_result`.
		 * Required
		 */
		type: FormControl<Inbound_digital_wallet_token_request_simulation_resultType | null | undefined>,
	}
	export function CreateInbound_digital_wallet_token_request_simulation_resultFormGroup() {
		return new FormGroup<Inbound_digital_wallet_token_request_simulation_resultFormProperties>({
			decline_reason: new FormControl<Inbound_digital_wallet_token_request_simulation_resultDecline_reason | null | undefined>(undefined, [Validators.required]),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_digital_wallet_token_request_simulation_resultType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_digital_wallet_token_request_simulation_resultDecline_reason { card_not_active = 'card_not_active', no_verification_method = 'no_verification_method', webhook_timed_out = 'webhook_timed_out', webhook_declined = 'webhook_declined' }

	export enum Inbound_digital_wallet_token_request_simulation_resultType { inbound_digital_wallet_token_request_simulation_result = 'inbound_digital_wallet_token_request_simulation_result' }


	/** The results of an inbound Real Time Payments Transfer simulation. */
	export interface Inbound_real_time_payments_transfer_simulation_result {

		/**
		 * If the Real Time Payments Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_real_time_payments_transfer_decline`.
		 * Required
		 */
		declined_transaction: Inbound_real_time_payments_transfer_simulation_resultDeclined_transaction;

		/**
		 * If the Real Time Payments Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_real_time_payments_transfer_confirmation`.
		 * Required
		 */
		transaction: Inbound_real_time_payments_transfer_simulation_resultTransaction;

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_real_time_payments_transfer_simulation_result`.
		 * Required
		 */
		type: Inbound_real_time_payments_transfer_simulation_resultType;
	}

	/** The results of an inbound Real Time Payments Transfer simulation. */
	export interface Inbound_real_time_payments_transfer_simulation_resultFormProperties {

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_real_time_payments_transfer_simulation_result`.
		 * Required
		 */
		type: FormControl<Inbound_real_time_payments_transfer_simulation_resultType | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultFormProperties>({
			type: new FormControl<Inbound_real_time_payments_transfer_simulation_resultType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transaction {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: Declined_transactionType;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionFormProperties {

		/**
		 * The identifier for the Account the Declined Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * This is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Declined Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Declined Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
		 * Required
		 */
		type: FormControl<Declined_transactionType | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Declined_transactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSource {

		/**
		 * A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
		 * Required
		 */
		ach_decline: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceAch_decline;

		/**
		 * A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
		 * Required
		 */
		card_decline: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_decline;

		/**
		 * A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
		 * Required
		 */
		card_route_decline: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_route_decline;

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Declined_transactionSourceCategory;

		/**
		 * A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
		 * Required
		 */
		check_decline: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCheck_decline;

		/**
		 * A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
		 * Required
		 */
		inbound_real_time_payments_transfer_decline: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline;

		/**
		 * A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
		 * Required
		 */
		international_ach_decline: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceFormProperties {

		/**
		 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Declined_transactionSourceCategory | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceFormProperties>({
			category: new FormControl<Declined_transactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceAch_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceAch_declineReason;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceAch_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/**
		 * Why the ACH transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceAch_declineReason | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceAch_declineFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceAch_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceAch_declineReason | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: Declined_transactionSourceCard_declineNetwork;

		/**
		 * Fields specific to the `network`
		 * Required
		 */
		network_details: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details;

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: string;

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCard_declineReason;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>,

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: FormControl<string | null | undefined>,

		/**
		 * Why the transaction was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCard_declineReason | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>(undefined, [Validators.required]),
			real_time_decision_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCard_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_details {

		/**
		 * Fields specific to the `visa` network
		 * Required
		 */
		visa: Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormProperties {
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsFormProperties>({
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisa {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator;

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormProperties {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>,

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_declineNetwork_detailsVisaFormProperties>({
			electronic_commerce_indicator: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>(undefined, [Validators.required]),
			point_of_service_entry_mode: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_route_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_route_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_route_declineFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCard_route_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCheck_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		auxiliary_on_us: string;

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: Declined_transactionSourceCheck_declineReason;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCheck_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * Why the check was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCheck_declineFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceCheck_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceCheck_declineReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: Declined_transactionSourceInbound_real_time_payments_transfer_declineReason;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Why the transfer was declined.
		 * Required
		 */
		reason: FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the declined transfer.
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInbound_real_time_payments_transfer_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Declined_transactionSourceInbound_real_time_payments_transfer_declineReason | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInternational_ach_decline {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInternational_ach_declineFormProperties {

		/**
		 * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInternational_ach_declineFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultDeclined_transactionSourceInternational_ach_declineFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransaction {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Inbound_real_time_payments_transfer_simulation_resultTransactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionType;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionFormProperties {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSource {

		/**
		 * A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		 * Required
		 */
		account_transfer_intention: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAccount_transfer_intention;

		/**
		 * A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		 * Required
		 */
		ach_check_conversion: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion;

		/**
		 * A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		 * Required
		 */
		ach_check_conversion_return: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion_return;

		/**
		 * A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		 * Required
		 */
		ach_transfer_intention: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_intention;

		/**
		 * A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		 * Required
		 */
		ach_transfer_rejection: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_rejection;

		/**
		 * A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		 * Required
		 */
		ach_transfer_return: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_return;

		/**
		 * A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		 * Required
		 */
		card_dispute_acceptance: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_dispute_acceptance;

		/**
		 * A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		 * Required
		 */
		card_refund: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_refund;

		/**
		 * A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		 * Required
		 */
		card_revenue_payment: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_revenue_payment;

		/**
		 * A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		 * Required
		 */
		card_route_refund: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_refund;

		/**
		 * A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		 * Required
		 */
		card_route_settlement: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_settlement;

		/**
		 * A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		 * Required
		 */
		card_settlement: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_settlement;

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Inbound_ach_transfer_simulation_resultTransactionSourceCategory;

		/**
		 * A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		 * Required
		 */
		check_deposit_acceptance: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance;

		/**
		 * A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		 * Required
		 */
		check_deposit_return: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_return;

		/**
		 * A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		 * Required
		 */
		check_transfer_intention: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_intention;

		/**
		 * A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		 * Required
		 */
		check_transfer_rejection: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_rejection;

		/**
		 * A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		 * Required
		 */
		check_transfer_return: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_return;

		/**
		 * A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		 * Required
		 */
		check_transfer_stop_payment_request: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request;

		/**
		 * A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		 * Required
		 */
		dispute_resolution: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceDispute_resolution;

		/**
		 * A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		 * Required
		 */
		empyreal_cash_deposit: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit;

		/**
		 * A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		 * Required
		 */
		fee_payment: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFee_payment;

		/**
		 * A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		 * Required
		 */
		inbound_ach_transfer: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_ach_transfer;

		/**
		 * A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		 * Required
		 */
		inbound_check: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_check;

		/**
		 * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		 * Required
		 */
		inbound_international_ach_transfer: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer;

		/**
		 * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		 * Required
		 */
		inbound_real_time_payments_transfer_confirmation: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation;

		/**
		 * A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		 * Required
		 */
		inbound_wire_drawdown_payment: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment;

		/**
		 * A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		 * Required
		 */
		inbound_wire_drawdown_payment_reversal: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal;

		/**
		 * A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		 * Required
		 */
		inbound_wire_reversal: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_reversal;

		/**
		 * A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		 * Required
		 */
		inbound_wire_transfer: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_transfer;

		/**
		 * A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		 * Required
		 */
		interest_payment: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInterest_payment;

		/**
		 * A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		 * Required
		 */
		internal_source: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInternal_source;

		/**
		 * A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		 * Required
		 */
		real_time_payments_transfer_acknowledgement: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement;

		/**
		 * A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		 * Required
		 */
		sample_funds: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceSample_funds;

		/**
		 * A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		 * Required
		 */
		wire_drawdown_payment_intention: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention;

		/**
		 * A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		 * Required
		 */
		wire_drawdown_payment_rejection: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection;

		/**
		 * A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		 * Required
		 */
		wire_transfer_intention: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_intention;

		/**
		 * A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		 * Required
		 */
		wire_transfer_rejection: Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_rejection;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFormProperties {

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFormProperties>({
			category: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAccount_transfer_intention {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: string;

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: string;

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: string;

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_intention {

		/** Required */
		account_number: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		routing_number: string;

		/** Required */
		statement_descriptor: string;

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		statement_descriptor: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statement_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_rejection {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_return {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: Ach_transferReturnReturn_reason_code;

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_returnFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<Ach_transferReturnReturn_reason_code | null | undefined>,

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_returnFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceAch_transfer_returnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<Ach_transferReturnReturn_reason_code | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_dispute_acceptance {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: Date;

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: string;

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties>({
			accepted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			card_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_refund {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_refundFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_refundFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_settlement_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_revenue_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transacted_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_refund {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_refundFormProperties {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_refundFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_settlement {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_settlementFormProperties {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_settlementFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_route_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_settlement {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: string;

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_settlementFormProperties {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_settlementFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCard_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_authorization: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			presentment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			presentment_currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: string;

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: string;

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: string;

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			serial_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		return_reason: Check_depositDeposit_returnReturn_reason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		return_reason: FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			return_reason: new FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_intention {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: string;

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: string;

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: string;

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: string;

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: string;

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties>({
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_rejection {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_return {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: string;

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: Check_transferReturn_detailsReason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormProperties {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: FormControl<Check_transferReturn_detailsReason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Check_transferReturn_detailsReason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: Date;

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: Check_transferStop_payment_requestType;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: FormControl<Date | null | undefined>,

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: FormControl<Check_transferStop_payment_requestType | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties>({
			requested_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferStop_payment_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceDispute_resolution {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceDispute_resolutionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceDispute_resolutionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceDispute_resolutionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			disputed_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		bag_id: string;

		/** Required */
		deposit_date: Date;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		bag_id: FormControl<string | null | undefined>,

		/** Required */
		deposit_date: FormControl<Date | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			bag_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deposit_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFee_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFee_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceFee_paymentFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceFee_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_ach_transferFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_check {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		check_front_image_file_id: string;

		/** Required */
		check_number: string;

		/** Required */
		check_rear_image_file_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_checkFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		check_front_image_file_id: FormControl<string | null | undefined>,

		/** Required */
		check_number: FormControl<string | null | undefined>,

		/** Required */
		check_rear_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_checkFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_checkFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_rear_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: string;

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			financial_institution_to_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_transfer {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;

		/** Required */
		originator_to_beneficiary_information_line1: string;

		/** Required */
		originator_to_beneficiary_information_line2: string;

		/** Required */
		originator_to_beneficiary_information_line3: string;

		/** Required */
		originator_to_beneficiary_information_line4: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_transferFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_transferFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInbound_wire_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInterest_payment {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInterest_paymentFormProperties {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInterest_paymentFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInterest_paymentFormProperties>({
			accrued_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInternal_source {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		reason: Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInternal_sourceFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		reason: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceInternal_sourceFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceInternal_sourceFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: string;

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: FormControl<string | null | undefined>,

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceSample_funds {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceSample_fundsFormProperties {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceSample_fundsFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceSample_fundsFormProperties>({
			originator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention {

		/** Required */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_intention {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormProperties {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_real_time_payments_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_real_time_payments_transfer_simulation_resultType { inbound_real_time_payments_transfer_simulation_result = 'inbound_real_time_payments_transfer_simulation_result' }


	/** Inbound wire drawdown requests are requests from someone else to send them a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more. */
	export interface Inbound_wire_drawdown_request {

		/**
		 * The amount being requested in cents.
		 * Required
		 */
		amount: number;

		/**
		 * The drawdown request's beneficiary's account number.
		 * Required
		 */
		beneficiary_account_number: string;

		/**
		 * Line 1 of the drawdown request's beneficiary's address.
		 * Required
		 */
		beneficiary_address_line1: string;

		/**
		 * Line 2 of the drawdown request's beneficiary's address.
		 * Required
		 */
		beneficiary_address_line2: string;

		/**
		 * Line 3 of the drawdown request's beneficiary's address.
		 * Required
		 */
		beneficiary_address_line3: string;

		/**
		 * The drawdown request's beneficiary's name.
		 * Required
		 */
		beneficiary_name: string;

		/**
		 * The drawdown request's beneficiary's routing number.
		 * Required
		 */
		beneficiary_routing_number: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		 * Required
		 */
		currency: string;

		/**
		 * The Wire drawdown request identifier.
		 * Required
		 */
		id: string;

		/**
		 * A message from the drawdown request's originator.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The drawdown request's originator's account number.
		 * Required
		 */
		originator_account_number: string;

		/**
		 * Line 1 of the drawdown request's originator's address.
		 * Required
		 */
		originator_address_line1: string;

		/**
		 * Line 2 of the drawdown request's originator's address.
		 * Required
		 */
		originator_address_line2: string;

		/**
		 * Line 3 of the drawdown request's originator's address.
		 * Required
		 */
		originator_address_line3: string;

		/**
		 * The drawdown request's originator's name.
		 * Required
		 */
		originator_name: string;

		/**
		 * The drawdown request's originator's routing number.
		 * Required
		 */
		originator_routing_number: string;

		/**
		 * Line 1 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line1: string;

		/**
		 * Line 2 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line2: string;

		/**
		 * Line 3 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line3: string;

		/**
		 * Line 4 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line4: string;

		/**
		 * The Account Number from which the recipient of this request is being requested to send funds.
		 * Required
		 */
		recipient_account_number_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_wire_drawdown_request`.
		 * Required
		 */
		type: Inbound_wire_drawdown_requestType;
	}

	/** Inbound wire drawdown requests are requests from someone else to send them a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more. */
	export interface Inbound_wire_drawdown_requestFormProperties {

		/**
		 * The amount being requested in cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The drawdown request's beneficiary's account number.
		 * Required
		 */
		beneficiary_account_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the drawdown request's beneficiary's address.
		 * Required
		 */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the drawdown request's beneficiary's address.
		 * Required
		 */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the drawdown request's beneficiary's address.
		 * Required
		 */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's beneficiary's name.
		 * Required
		 */
		beneficiary_name: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's beneficiary's routing number.
		 * Required
		 */
		beneficiary_routing_number: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		 * Required
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * The Wire drawdown request identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * A message from the drawdown request's originator.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's originator's account number.
		 * Required
		 */
		originator_account_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the drawdown request's originator's address.
		 * Required
		 */
		originator_address_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the drawdown request's originator's address.
		 * Required
		 */
		originator_address_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the drawdown request's originator's address.
		 * Required
		 */
		originator_address_line3: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's originator's name.
		 * Required
		 */
		originator_name: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's originator's routing number.
		 * Required
		 */
		originator_routing_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/**
		 * Line 4 of the information conveyed from the originator of the message to the beneficiary.
		 * Required
		 */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,

		/**
		 * The Account Number from which the recipient of this request is being requested to send funds.
		 * Required
		 */
		recipient_account_number_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_wire_drawdown_request`.
		 * Required
		 */
		type: FormControl<Inbound_wire_drawdown_requestType | null | undefined>,
	}
	export function CreateInbound_wire_drawdown_requestFormGroup() {
		return new FormGroup<Inbound_wire_drawdown_requestFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_wire_drawdown_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_wire_drawdown_requestType { inbound_wire_drawdown_request = 'inbound_wire_drawdown_request' }


	/** A list of Inbound Wire Drawdown Request objects */
	export interface Inbound_wire_drawdown_request_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Inbound_wire_drawdown_request>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Inbound Wire Drawdown Request objects */
	export interface Inbound_wire_drawdown_request_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_drawdown_request_listFormGroup() {
		return new FormGroup<Inbound_wire_drawdown_request_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The results of an inbound Wire Transfer simulation. */
	export interface Inbound_wire_transfer_simulation_result {

		/**
		 * If the Wire Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_wire_transfer`.
		 * Required
		 */
		transaction: Inbound_wire_transfer_simulation_resultTransaction;

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_wire_transfer_simulation_result`.
		 * Required
		 */
		type: Inbound_wire_transfer_simulation_resultType;
	}

	/** The results of an inbound Wire Transfer simulation. */
	export interface Inbound_wire_transfer_simulation_resultFormProperties {

		/**
		 * A constant representing the object's type. For this resource it will always be `inbound_wire_transfer_simulation_result`.
		 * Required
		 */
		type: FormControl<Inbound_wire_transfer_simulation_resultType | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultFormProperties>({
			type: new FormControl<Inbound_wire_transfer_simulation_resultType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransaction {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Inbound_wire_transfer_simulation_resultTransactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionType;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionFormProperties {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSource {

		/**
		 * A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		 * Required
		 */
		account_transfer_intention: Inbound_wire_transfer_simulation_resultTransactionSourceAccount_transfer_intention;

		/**
		 * A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		 * Required
		 */
		ach_check_conversion: Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion;

		/**
		 * A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		 * Required
		 */
		ach_check_conversion_return: Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion_return;

		/**
		 * A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		 * Required
		 */
		ach_transfer_intention: Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_intention;

		/**
		 * A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		 * Required
		 */
		ach_transfer_rejection: Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_rejection;

		/**
		 * A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		 * Required
		 */
		ach_transfer_return: Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_return;

		/**
		 * A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		 * Required
		 */
		card_dispute_acceptance: Inbound_wire_transfer_simulation_resultTransactionSourceCard_dispute_acceptance;

		/**
		 * A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		 * Required
		 */
		card_refund: Inbound_wire_transfer_simulation_resultTransactionSourceCard_refund;

		/**
		 * A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		 * Required
		 */
		card_revenue_payment: Inbound_wire_transfer_simulation_resultTransactionSourceCard_revenue_payment;

		/**
		 * A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		 * Required
		 */
		card_route_refund: Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_refund;

		/**
		 * A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		 * Required
		 */
		card_route_settlement: Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_settlement;

		/**
		 * A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		 * Required
		 */
		card_settlement: Inbound_wire_transfer_simulation_resultTransactionSourceCard_settlement;

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Inbound_ach_transfer_simulation_resultTransactionSourceCategory;

		/**
		 * A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		 * Required
		 */
		check_deposit_acceptance: Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance;

		/**
		 * A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		 * Required
		 */
		check_deposit_return: Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_return;

		/**
		 * A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		 * Required
		 */
		check_transfer_intention: Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_intention;

		/**
		 * A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		 * Required
		 */
		check_transfer_rejection: Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_rejection;

		/**
		 * A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		 * Required
		 */
		check_transfer_return: Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_return;

		/**
		 * A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		 * Required
		 */
		check_transfer_stop_payment_request: Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request;

		/**
		 * A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		 * Required
		 */
		dispute_resolution: Inbound_wire_transfer_simulation_resultTransactionSourceDispute_resolution;

		/**
		 * A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		 * Required
		 */
		empyreal_cash_deposit: Inbound_wire_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit;

		/**
		 * A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		 * Required
		 */
		fee_payment: Inbound_wire_transfer_simulation_resultTransactionSourceFee_payment;

		/**
		 * A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		 * Required
		 */
		inbound_ach_transfer: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_ach_transfer;

		/**
		 * A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		 * Required
		 */
		inbound_check: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_check;

		/**
		 * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		 * Required
		 */
		inbound_international_ach_transfer: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer;

		/**
		 * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		 * Required
		 */
		inbound_real_time_payments_transfer_confirmation: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation;

		/**
		 * A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		 * Required
		 */
		inbound_wire_drawdown_payment: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment;

		/**
		 * A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		 * Required
		 */
		inbound_wire_drawdown_payment_reversal: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal;

		/**
		 * A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		 * Required
		 */
		inbound_wire_reversal: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_reversal;

		/**
		 * A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		 * Required
		 */
		inbound_wire_transfer: Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_transfer;

		/**
		 * A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		 * Required
		 */
		interest_payment: Inbound_wire_transfer_simulation_resultTransactionSourceInterest_payment;

		/**
		 * A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		 * Required
		 */
		internal_source: Inbound_wire_transfer_simulation_resultTransactionSourceInternal_source;

		/**
		 * A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		 * Required
		 */
		real_time_payments_transfer_acknowledgement: Inbound_wire_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement;

		/**
		 * A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		 * Required
		 */
		sample_funds: Inbound_wire_transfer_simulation_resultTransactionSourceSample_funds;

		/**
		 * A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		 * Required
		 */
		wire_drawdown_payment_intention: Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention;

		/**
		 * A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		 * Required
		 */
		wire_drawdown_payment_rejection: Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection;

		/**
		 * A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		 * Required
		 */
		wire_transfer_intention: Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_intention;

		/**
		 * A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		 * Required
		 */
		wire_transfer_rejection: Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_rejection;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceFormProperties {

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceFormProperties>({
			category: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAccount_transfer_intention {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: string;

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: string;

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: string;

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_intention {

		/** Required */
		account_number: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		routing_number: string;

		/** Required */
		statement_descriptor: string;

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		statement_descriptor: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statement_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_rejection {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_return {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: Ach_transferReturnReturn_reason_code;

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_returnFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<Ach_transferReturnReturn_reason_code | null | undefined>,

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_returnFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceAch_transfer_returnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<Ach_transferReturnReturn_reason_code | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_dispute_acceptance {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: Date;

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: string;

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties>({
			accepted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			card_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_refund {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_refundFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCard_refundFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCard_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_settlement_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_revenue_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCard_revenue_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transacted_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_refund {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_refundFormProperties {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCard_route_refundFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_settlement {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_settlementFormProperties {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCard_route_settlementFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCard_route_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_settlement {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: string;

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCard_settlementFormProperties {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCard_settlementFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCard_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_authorization: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			presentment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			presentment_currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_acceptance {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: string;

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: string;

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: string;

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			serial_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		return_reason: Check_depositDeposit_returnReturn_reason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		return_reason: FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCheck_deposit_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			return_reason: new FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_intention {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: string;

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: string;

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: string;

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: string;

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: string;

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties>({
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_rejection {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_return {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: string;

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: Check_transferReturn_detailsReason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormProperties {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: FormControl<Check_transferReturn_detailsReason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_returnFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Check_transferReturn_detailsReason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_request {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: Date;

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: Check_transferStop_payment_requestType;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: FormControl<Date | null | undefined>,

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: FormControl<Check_transferStop_payment_requestType | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties>({
			requested_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferStop_payment_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceDispute_resolution {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceDispute_resolutionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceDispute_resolutionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceDispute_resolutionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			disputed_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceEmpyreal_cash_deposit {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		bag_id: string;

		/** Required */
		deposit_date: Date;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		bag_id: FormControl<string | null | undefined>,

		/** Required */
		deposit_date: FormControl<Date | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			bag_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deposit_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceFee_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceFee_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceFee_paymentFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceFee_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_ach_transferFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_check {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		check_front_image_file_id: string;

		/** Required */
		check_number: string;

		/** Required */
		check_rear_image_file_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_checkFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		check_front_image_file_id: FormControl<string | null | undefined>,

		/** Required */
		check_number: FormControl<string | null | undefined>,

		/** Required */
		check_rear_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_checkFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_checkFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_rear_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_international_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: string;

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			financial_institution_to_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_transfer {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;

		/** Required */
		originator_to_beneficiary_information_line1: string;

		/** Required */
		originator_to_beneficiary_information_line2: string;

		/** Required */
		originator_to_beneficiary_information_line3: string;

		/** Required */
		originator_to_beneficiary_information_line4: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_transferFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_transferFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInbound_wire_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInterest_payment {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInterest_paymentFormProperties {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInterest_paymentFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInterest_paymentFormProperties>({
			accrued_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInternal_source {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		reason: Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceInternal_sourceFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		reason: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceInternal_sourceFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceInternal_sourceFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: string;

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: FormControl<string | null | undefined>,

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceSample_funds {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceSample_fundsFormProperties {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceSample_fundsFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceSample_fundsFormProperties>({
			originator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intention {

		/** Required */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_intention {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormProperties {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormGroup() {
		return new FormGroup<Inbound_wire_transfer_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Inbound_wire_transfer_simulation_resultType { inbound_wire_transfer_simulation_result = 'inbound_wire_transfer_simulation_result' }


	/** The results of an Interest Payment simulation. */
	export interface Interest_payment_simulation_result {

		/**
		 * This will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: interest_payment`.
		 * Required
		 */
		transaction: Interest_payment_simulation_resultTransaction;

		/**
		 * A constant representing the object's type. For this resource it will always be `interest_payment_simulation_result`.
		 * Required
		 */
		type: Interest_payment_simulation_resultType;
	}

	/** The results of an Interest Payment simulation. */
	export interface Interest_payment_simulation_resultFormProperties {

		/**
		 * A constant representing the object's type. For this resource it will always be `interest_payment_simulation_result`.
		 * Required
		 */
		type: FormControl<Interest_payment_simulation_resultType | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultFormProperties>({
			type: new FormControl<Interest_payment_simulation_resultType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransaction {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: Interest_payment_simulation_resultTransactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionType;
	}
	export interface Interest_payment_simulation_resultTransactionFormProperties {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSource {

		/**
		 * A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		 * Required
		 */
		account_transfer_intention: Interest_payment_simulation_resultTransactionSourceAccount_transfer_intention;

		/**
		 * A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		 * Required
		 */
		ach_check_conversion: Interest_payment_simulation_resultTransactionSourceAch_check_conversion;

		/**
		 * A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		 * Required
		 */
		ach_check_conversion_return: Interest_payment_simulation_resultTransactionSourceAch_check_conversion_return;

		/**
		 * A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		 * Required
		 */
		ach_transfer_intention: Interest_payment_simulation_resultTransactionSourceAch_transfer_intention;

		/**
		 * A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		 * Required
		 */
		ach_transfer_rejection: Interest_payment_simulation_resultTransactionSourceAch_transfer_rejection;

		/**
		 * A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		 * Required
		 */
		ach_transfer_return: Interest_payment_simulation_resultTransactionSourceAch_transfer_return;

		/**
		 * A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		 * Required
		 */
		card_dispute_acceptance: Interest_payment_simulation_resultTransactionSourceCard_dispute_acceptance;

		/**
		 * A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		 * Required
		 */
		card_refund: Interest_payment_simulation_resultTransactionSourceCard_refund;

		/**
		 * A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		 * Required
		 */
		card_revenue_payment: Interest_payment_simulation_resultTransactionSourceCard_revenue_payment;

		/**
		 * A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		 * Required
		 */
		card_route_refund: Interest_payment_simulation_resultTransactionSourceCard_route_refund;

		/**
		 * A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		 * Required
		 */
		card_route_settlement: Interest_payment_simulation_resultTransactionSourceCard_route_settlement;

		/**
		 * A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		 * Required
		 */
		card_settlement: Interest_payment_simulation_resultTransactionSourceCard_settlement;

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Inbound_ach_transfer_simulation_resultTransactionSourceCategory;

		/**
		 * A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		 * Required
		 */
		check_deposit_acceptance: Interest_payment_simulation_resultTransactionSourceCheck_deposit_acceptance;

		/**
		 * A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		 * Required
		 */
		check_deposit_return: Interest_payment_simulation_resultTransactionSourceCheck_deposit_return;

		/**
		 * A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		 * Required
		 */
		check_transfer_intention: Interest_payment_simulation_resultTransactionSourceCheck_transfer_intention;

		/**
		 * A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		 * Required
		 */
		check_transfer_rejection: Interest_payment_simulation_resultTransactionSourceCheck_transfer_rejection;

		/**
		 * A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		 * Required
		 */
		check_transfer_return: Interest_payment_simulation_resultTransactionSourceCheck_transfer_return;

		/**
		 * A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		 * Required
		 */
		check_transfer_stop_payment_request: Interest_payment_simulation_resultTransactionSourceCheck_transfer_stop_payment_request;

		/**
		 * A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		 * Required
		 */
		dispute_resolution: Interest_payment_simulation_resultTransactionSourceDispute_resolution;

		/**
		 * A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		 * Required
		 */
		empyreal_cash_deposit: Interest_payment_simulation_resultTransactionSourceEmpyreal_cash_deposit;

		/**
		 * A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		 * Required
		 */
		fee_payment: Interest_payment_simulation_resultTransactionSourceFee_payment;

		/**
		 * A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		 * Required
		 */
		inbound_ach_transfer: Interest_payment_simulation_resultTransactionSourceInbound_ach_transfer;

		/**
		 * A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		 * Required
		 */
		inbound_check: Interest_payment_simulation_resultTransactionSourceInbound_check;

		/**
		 * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		 * Required
		 */
		inbound_international_ach_transfer: Interest_payment_simulation_resultTransactionSourceInbound_international_ach_transfer;

		/**
		 * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		 * Required
		 */
		inbound_real_time_payments_transfer_confirmation: Interest_payment_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation;

		/**
		 * A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		 * Required
		 */
		inbound_wire_drawdown_payment: Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment;

		/**
		 * A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		 * Required
		 */
		inbound_wire_drawdown_payment_reversal: Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal;

		/**
		 * A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		 * Required
		 */
		inbound_wire_reversal: Interest_payment_simulation_resultTransactionSourceInbound_wire_reversal;

		/**
		 * A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		 * Required
		 */
		inbound_wire_transfer: Interest_payment_simulation_resultTransactionSourceInbound_wire_transfer;

		/**
		 * A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		 * Required
		 */
		interest_payment: Interest_payment_simulation_resultTransactionSourceInterest_payment;

		/**
		 * A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		 * Required
		 */
		internal_source: Interest_payment_simulation_resultTransactionSourceInternal_source;

		/**
		 * A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		 * Required
		 */
		real_time_payments_transfer_acknowledgement: Interest_payment_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement;

		/**
		 * A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		 * Required
		 */
		sample_funds: Interest_payment_simulation_resultTransactionSourceSample_funds;

		/**
		 * A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		 * Required
		 */
		wire_drawdown_payment_intention: Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_intention;

		/**
		 * A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		 * Required
		 */
		wire_drawdown_payment_rejection: Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_rejection;

		/**
		 * A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		 * Required
		 */
		wire_transfer_intention: Interest_payment_simulation_resultTransactionSourceWire_transfer_intention;

		/**
		 * A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		 * Required
		 */
		wire_transfer_rejection: Interest_payment_simulation_resultTransactionSourceWire_transfer_rejection;
	}
	export interface Interest_payment_simulation_resultTransactionSourceFormProperties {

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceFormProperties>({
			category: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceAccount_transfer_intention {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: string;

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: string;

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: string;

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceAccount_transfer_intentionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceAccount_transfer_intentionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceAch_check_conversion {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceAch_check_conversionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceAch_check_conversionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceAch_check_conversionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceAch_check_conversion_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceAch_check_conversion_returnFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceAch_check_conversion_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceAch_transfer_intention {

		/** Required */
		account_number: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		routing_number: string;

		/** Required */
		statement_descriptor: string;

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceAch_transfer_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		statement_descriptor: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceAch_transfer_intentionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceAch_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statement_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceAch_transfer_rejection {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceAch_transfer_rejectionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceAch_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceAch_transfer_return {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: Ach_transferReturnReturn_reason_code;

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceAch_transfer_returnFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<Ach_transferReturnReturn_reason_code | null | undefined>,

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceAch_transfer_returnFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceAch_transfer_returnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<Ach_transferReturnReturn_reason_code | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCard_dispute_acceptance {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: Date;

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: string;

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCard_dispute_acceptanceFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCard_dispute_acceptanceFormProperties>({
			accepted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			card_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCard_refund {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCard_refundFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCard_refundFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCard_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_settlement_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCard_revenue_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCard_revenue_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCard_revenue_paymentFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCard_revenue_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transacted_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCard_route_refund {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCard_route_refundFormProperties {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCard_route_refundFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCard_route_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCard_route_settlement {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCard_route_settlementFormProperties {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCard_route_settlementFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCard_route_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCard_settlement {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: string;

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCard_settlementFormProperties {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCard_settlementFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCard_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_authorization: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			presentment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			presentment_currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCheck_deposit_acceptance {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: string;

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: string;

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: string;

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCheck_deposit_acceptanceFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCheck_deposit_acceptanceFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			serial_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCheck_deposit_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		return_reason: Check_depositDeposit_returnReturn_reason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCheck_deposit_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		return_reason: FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCheck_deposit_returnFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCheck_deposit_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			return_reason: new FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_intention {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: string;

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: string;

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: string;

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: string;

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: string;

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCheck_transfer_intentionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCheck_transfer_intentionFormProperties>({
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_rejection {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCheck_transfer_rejectionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCheck_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_return {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: string;

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: Check_transferReturn_detailsReason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_returnFormProperties {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: FormControl<Check_transferReturn_detailsReason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCheck_transfer_returnFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCheck_transfer_returnFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Check_transferReturn_detailsReason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_stop_payment_request {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: Date;

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: Check_transferStop_payment_requestType;
	}
	export interface Interest_payment_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: FormControl<Date | null | undefined>,

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: FormControl<Check_transferStop_payment_requestType | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceCheck_transfer_stop_payment_requestFormProperties>({
			requested_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferStop_payment_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceDispute_resolution {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceDispute_resolutionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceDispute_resolutionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceDispute_resolutionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			disputed_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceEmpyreal_cash_deposit {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		bag_id: string;

		/** Required */
		deposit_date: Date;
	}
	export interface Interest_payment_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		bag_id: FormControl<string | null | undefined>,

		/** Required */
		deposit_date: FormControl<Date | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceEmpyreal_cash_depositFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceEmpyreal_cash_depositFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			bag_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deposit_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceFee_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Interest_payment_simulation_resultTransactionSourceFee_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceFee_paymentFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceFee_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_ach_transferFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_check {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		check_front_image_file_id: string;

		/** Required */
		check_number: string;

		/** Required */
		check_rear_image_file_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_checkFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		check_front_image_file_id: FormControl<string | null | undefined>,

		/** Required */
		check_number: FormControl<string | null | undefined>,

		/** Required */
		check_rear_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_checkFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_checkFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_rear_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_international_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_international_ach_transferFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_international_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmation {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_wire_drawdown_payment_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: string;

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_wire_reversalFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_wire_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			financial_institution_to_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_transfer {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;

		/** Required */
		originator_to_beneficiary_information_line1: string;

		/** Required */
		originator_to_beneficiary_information_line2: string;

		/** Required */
		originator_to_beneficiary_information_line3: string;

		/** Required */
		originator_to_beneficiary_information_line4: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInbound_wire_transferFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInbound_wire_transferFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInbound_wire_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInterest_payment {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInterest_paymentFormProperties {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInterest_paymentFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInterest_paymentFormProperties>({
			accrued_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceInternal_source {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		reason: Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason;
	}
	export interface Interest_payment_simulation_resultTransactionSourceInternal_sourceFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		reason: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceInternal_sourceFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceInternal_sourceFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgement {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: string;

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: FormControl<string | null | undefined>,

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceReal_time_payments_transfer_acknowledgementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceSample_funds {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceSample_fundsFormProperties {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceSample_fundsFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceSample_fundsFormProperties>({
			originator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_intention {

		/** Required */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceWire_drawdown_payment_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceWire_transfer_intention {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceWire_transfer_intentionFormProperties {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceWire_transfer_intentionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceWire_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Interest_payment_simulation_resultTransactionSourceWire_transfer_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface Interest_payment_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateInterest_payment_simulation_resultTransactionSourceWire_transfer_rejectionFormGroup() {
		return new FormGroup<Interest_payment_simulation_resultTransactionSourceWire_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Interest_payment_simulation_resultType { interest_payment_simulation_result = 'interest_payment_simulation_result' }


	/** You can set limits at the Account, Account Number, or Card level. Limits applied to Accounts will apply to all Account Numbers and Cards in the Account. You can specify any number of Limits and they will all be applied to inbound debits and card authorizations. Volume and count Limits are designed to prevent unauthorized debits. */
	export interface Limit {

		/**
		 * The Limit identifier.
		 * Required
		 */
		id: string;

		/**
		 * The interval for the metric. This is required if `metric` is `count` or `volume`.
		 * Required
		 */
		interval: Create_a_limit_parametersInterval;

		/**
		 * The metric for the Limit.
		 * Required
		 */
		metric: Create_a_limit_parametersMetric;

		/**
		 * The identifier of the Account Number, Account, or Card the Limit applies to.
		 * Required
		 */
		model_id: string;

		/**
		 * The type of the model you wish to associate the Limit with.
		 * Required
		 */
		model_type: LimitModel_type;

		/**
		 * The current status of the Limit.
		 * Required
		 */
		status: LimitStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `limit`.
		 * Required
		 */
		type: LimitType;

		/**
		 * The value to evaluate the Limit against.
		 * Required
		 */
		value: number;
	}

	/** You can set limits at the Account, Account Number, or Card level. Limits applied to Accounts will apply to all Account Numbers and Cards in the Account. You can specify any number of Limits and they will all be applied to inbound debits and card authorizations. Volume and count Limits are designed to prevent unauthorized debits. */
	export interface LimitFormProperties {

		/**
		 * The Limit identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The interval for the metric. This is required if `metric` is `count` or `volume`.
		 * Required
		 */
		interval: FormControl<Create_a_limit_parametersInterval | null | undefined>,

		/**
		 * The metric for the Limit.
		 * Required
		 */
		metric: FormControl<Create_a_limit_parametersMetric | null | undefined>,

		/**
		 * The identifier of the Account Number, Account, or Card the Limit applies to.
		 * Required
		 */
		model_id: FormControl<string | null | undefined>,

		/**
		 * The type of the model you wish to associate the Limit with.
		 * Required
		 */
		model_type: FormControl<LimitModel_type | null | undefined>,

		/**
		 * The current status of the Limit.
		 * Required
		 */
		status: FormControl<LimitStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `limit`.
		 * Required
		 */
		type: FormControl<LimitType | null | undefined>,

		/**
		 * The value to evaluate the Limit against.
		 * Required
		 */
		value: FormControl<number | null | undefined>,
	}
	export function CreateLimitFormGroup() {
		return new FormGroup<LimitFormProperties>({
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			interval: new FormControl<Create_a_limit_parametersInterval | null | undefined>(undefined, [Validators.required]),
			metric: new FormControl<Create_a_limit_parametersMetric | null | undefined>(undefined, [Validators.required]),
			model_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			model_type: new FormControl<LimitModel_type | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<LimitStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<LimitType | null | undefined>(undefined, [Validators.required]),
			value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum LimitModel_type { account = 'account', account_number = 'account_number', card = 'card' }

	export enum LimitStatus { active = 'active', inactive = 'inactive' }

	export enum LimitType { limit = 'limit' }


	/** A list of Limit objects */
	export interface Limit_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Limit>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Limit objects */
	export interface Limit_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateLimit_listFormGroup() {
		return new FormGroup<Limit_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Look_up_the_balance_for_an_account_parameters {

		/**
		 * The Account to query the balance for.
		 * Required
		 */
		account_id: string;
	}
	export interface Look_up_the_balance_for_an_account_parametersFormProperties {

		/**
		 * The Account to query the balance for.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,
	}
	export function CreateLook_up_the_balance_for_an_account_parametersFormGroup() {
		return new FormGroup<Look_up_the_balance_for_an_account_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** When a user authorizes your OAuth application, an OAuth Connection object is created. */
	export interface Oauth_connection {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The identifier of the Group that has authorized your OAuth application.
		 * Required
		 */
		group_id: string;

		/**
		 * The OAuth Connection's identifier.
		 * Required
		 */
		id: string;

		/**
		 * Whether the connection is active.
		 * Required
		 */
		status: LimitStatus;

		/**
		 * A constant representing the object's type. For this resource it will always be `oauth_connection`.
		 * Required
		 */
		type: Oauth_connectionType;
	}

	/** When a user authorizes your OAuth application, an OAuth Connection object is created. */
	export interface Oauth_connectionFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Group that has authorized your OAuth application.
		 * Required
		 */
		group_id: FormControl<string | null | undefined>,

		/**
		 * The OAuth Connection's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Whether the connection is active.
		 * Required
		 */
		status: FormControl<LimitStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `oauth_connection`.
		 * Required
		 */
		type: FormControl<Oauth_connectionType | null | undefined>,
	}
	export function CreateOauth_connectionFormGroup() {
		return new FormGroup<Oauth_connectionFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			group_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<LimitStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Oauth_connectionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Oauth_connectionType { oauth_connection = 'oauth_connection' }


	/** A list of OAuth Connection objects */
	export interface Oauth_connection_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Oauth_connection>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of OAuth Connection objects */
	export interface Oauth_connection_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateOauth_connection_listFormGroup() {
		return new FormGroup<Oauth_connection_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Pending Transactions are potential future additions and removals of money from your bank account. */
	export interface Pending_transaction {

		/**
		 * The identifier for the account this Pending Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction was completed.
		 * Required
		 */
		completed_at: Date;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Pending Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Pending Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
		 * Required
		 */
		source: Pending_transactionSource;

		/**
		 * Whether the Pending Transaction has been confirmed and has an associated Transaction.
		 * Required
		 */
		status: export_Status;

		/**
		 * A constant representing the object's type. For this resource it will always be `pending_transaction`.
		 * Required
		 */
		type: Inbound_card_authorization_simulation_resultPending_transactionType;
	}

	/** Pending Transactions are potential future additions and removals of money from your bank account. */
	export interface Pending_transactionFormProperties {

		/**
		 * The identifier for the account this Pending Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction was completed.
		 * Required
		 */
		completed_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Pending Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Pending Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * Whether the Pending Transaction has been confirmed and has an associated Transaction.
		 * Required
		 */
		status: FormControl<export_Status | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `pending_transaction`.
		 * Required
		 */
		type: FormControl<Inbound_card_authorization_simulation_resultPending_transactionType | null | undefined>,
	}
	export function CreatePending_transactionFormGroup() {
		return new FormGroup<Pending_transactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			completed_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<export_Status | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSource {

		/**
		 * A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.
		 * Required
		 */
		account_transfer_instruction: Pending_transactionSourceAccount_transfer_instruction;

		/**
		 * A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.
		 * Required
		 */
		ach_transfer_instruction: Pending_transactionSourceAch_transfer_instruction;

		/**
		 * A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.
		 * Required
		 */
		card_authorization: Pending_transactionSourceCard_authorization;

		/**
		 * A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.
		 * Required
		 */
		card_route_authorization: Pending_transactionSourceCard_route_authorization;

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Inbound_card_authorization_simulation_resultPending_transactionSourceCategory;

		/**
		 * A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.
		 * Required
		 */
		check_deposit_instruction: Pending_transactionSourceCheck_deposit_instruction;

		/**
		 * A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.
		 * Required
		 */
		check_transfer_instruction: Pending_transactionSourceCheck_transfer_instruction;

		/**
		 * A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
		 * Required
		 */
		inbound_funds_hold: Pending_transactionSourceInbound_funds_hold;

		/**
		 * A Real Time Payments Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_instruction`.
		 * Required
		 */
		real_time_payments_transfer_instruction: Pending_transactionSourceReal_time_payments_transfer_instruction;

		/**
		 * A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.
		 * Required
		 */
		wire_drawdown_payment_instruction: Pending_transactionSourceWire_drawdown_payment_instruction;

		/**
		 * A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.
		 * Required
		 */
		wire_transfer_instruction: Pending_transactionSourceWire_transfer_instruction;
	}
	export interface Pending_transactionSourceFormProperties {

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCategory | null | undefined>,
	}
	export function CreatePending_transactionSourceFormGroup() {
		return new FormGroup<Pending_transactionSourceFormProperties>({
			category: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceAccount_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Pending_transactionSourceAccount_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceAccount_transfer_instructionFormGroup() {
		return new FormGroup<Pending_transactionSourceAccount_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceAch_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the ACH Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Pending_transactionSourceAch_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the ACH Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceAch_transfer_instructionFormGroup() {
		return new FormGroup<Pending_transactionSourceAch_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceCard_authorization {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: string;

		/**
		 * The Card Authorization identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: string;

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: Declined_transactionSourceCard_declineNetwork;

		/**
		 * Fields specific to the `network`
		 * Required
		 */
		network_details: Pending_transactionSourceCard_authorizationNetwork_details;

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_authorization`.
		 * Required
		 */
		type: Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType;
	}
	export interface Pending_transactionSourceCard_authorizationFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
		 * Required
		 */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/**
		 * The Card Authorization identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: FormControl<string | null | undefined>,

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>,

		/**
		 * The identifier of the Real-Time Decision sent to approve or decline this transaction.
		 * Required
		 */
		real_time_decision_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_authorization`.
		 * Required
		 */
		type: FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType | null | undefined>,
	}
	export function CreatePending_transactionSourceCard_authorizationFormGroup() {
		return new FormGroup<Pending_transactionSourceCard_authorizationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>(undefined, [Validators.required]),
			real_time_decision_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceCard_authorizationType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceCard_authorizationNetwork_details {

		/**
		 * Fields specific to the `visa` network
		 * Required
		 */
		visa: Pending_transactionSourceCard_authorizationNetwork_detailsVisa;
	}
	export interface Pending_transactionSourceCard_authorizationNetwork_detailsFormProperties {
	}
	export function CreatePending_transactionSourceCard_authorizationNetwork_detailsFormGroup() {
		return new FormGroup<Pending_transactionSourceCard_authorizationNetwork_detailsFormProperties>({
		});

	}

	export interface Pending_transactionSourceCard_authorizationNetwork_detailsVisa {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator;

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode;
	}
	export interface Pending_transactionSourceCard_authorizationNetwork_detailsVisaFormProperties {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>,

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>,
	}
	export function CreatePending_transactionSourceCard_authorizationNetwork_detailsVisaFormGroup() {
		return new FormGroup<Pending_transactionSourceCard_authorizationNetwork_detailsVisaFormProperties>({
			electronic_commerce_indicator: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>(undefined, [Validators.required]),
			point_of_service_entry_mode: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceCard_route_authorization {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface Pending_transactionSourceCard_route_authorizationFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceCard_route_authorizationFormGroup() {
		return new FormGroup<Pending_transactionSourceCard_route_authorizationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceCheck_deposit_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the File containing the image of the back of the check that was deposited.
		 * Required
		 */
		back_image_file_id: string;

		/**
		 * The identifier of the Check Deposit.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the File containing the image of the front of the check that was deposited.
		 * Required
		 */
		front_image_file_id: string;
	}
	export interface Pending_transactionSourceCheck_deposit_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing the image of the back of the check that was deposited.
		 * Required
		 */
		back_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Check Deposit.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the File containing the image of the front of the check that was deposited.
		 * Required
		 */
		front_image_file_id: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceCheck_deposit_instructionFormGroup() {
		return new FormGroup<Pending_transactionSourceCheck_deposit_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			back_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceCheck_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Check Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Pending_transactionSourceCheck_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Check Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceCheck_transfer_instructionFormGroup() {
		return new FormGroup<Pending_transactionSourceCheck_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceInbound_funds_hold {

		/**
		 * The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * When the hold will be released automatically. Certain conditions may cause it to be released before this time.
		 * Required
		 */
		automatically_releases_at: Date;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The ID of the Transaction for which funds were held.
		 * Required
		 */
		held_transaction_id: string;

		/**
		 * The ID of the Pending Transaction representing the held funds.
		 * Required
		 */
		pending_transaction_id: string;

		/**
		 * When the hold was released (if it has been released).
		 * Required
		 */
		released_at: Date;

		/**
		 * The status of the hold.
		 * Required
		 */
		status: Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus;
	}
	export interface Pending_transactionSourceInbound_funds_holdFormProperties {

		/**
		 * The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * When the hold will be released automatically. Certain conditions may cause it to be released before this time.
		 * Required
		 */
		automatically_releases_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the hold was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The ID of the Transaction for which funds were held.
		 * Required
		 */
		held_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the Pending Transaction representing the held funds.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * When the hold was released (if it has been released).
		 * Required
		 */
		released_at: FormControl<Date | null | undefined>,

		/**
		 * The status of the hold.
		 * Required
		 */
		status: FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus | null | undefined>,
	}
	export function CreatePending_transactionSourceInbound_funds_holdFormGroup() {
		return new FormGroup<Pending_transactionSourceInbound_funds_holdFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			automatically_releases_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			held_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			released_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Inbound_card_authorization_simulation_resultPending_transactionSourceInbound_funds_holdStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceReal_time_payments_transfer_instruction {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface Pending_transactionSourceReal_time_payments_transfer_instructionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceReal_time_payments_transfer_instructionFormGroup() {
		return new FormGroup<Pending_transactionSourceReal_time_payments_transfer_instructionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceWire_drawdown_payment_instruction {

		/** Required */
		account_number: string;

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;
	}
	export interface Pending_transactionSourceWire_drawdown_payment_instructionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceWire_drawdown_payment_instructionFormGroup() {
		return new FormGroup<Pending_transactionSourceWire_drawdown_payment_instructionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Pending_transactionSourceWire_transfer_instruction {

		/** Required */
		account_number: string;

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface Pending_transactionSourceWire_transfer_instructionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreatePending_transactionSourceWire_transfer_instructionFormGroup() {
		return new FormGroup<Pending_transactionSourceWire_transfer_instructionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of Pending Transaction objects */
	export interface Pending_transaction_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Pending_transaction>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Pending Transaction objects */
	export interface Pending_transaction_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreatePending_transaction_listFormGroup() {
		return new FormGroup<Pending_transaction_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Programs determine the compliance and commercial terms of Accounts. By default, you have a Commercial Banking program for managing your own funds. If you are lending or managing funds on behalf of your customers, or otherwise engaged in regulated activity, we will work together to create additional Programs for you. */
	export interface Program {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The Program identifier.
		 * Required
		 */
		id: string;

		/**
		 * The name of the Program.
		 * Required
		 */
		name: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `program`.
		 * Required
		 */
		type: ProgramType;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was last updated.
		 * Required
		 */
		updated_at: Date;
	}

	/** Programs determine the compliance and commercial terms of Accounts. By default, you have a Commercial Banking program for managing your own funds. If you are lending or managing funds on behalf of your customers, or otherwise engaged in regulated activity, we will work together to create additional Programs for you. */
	export interface ProgramFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The Program identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The name of the Program.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `program`.
		 * Required
		 */
		type: FormControl<ProgramType | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Program was last updated.
		 * Required
		 */
		updated_at: FormControl<Date | null | undefined>,
	}
	export function CreateProgramFormGroup() {
		return new FormGroup<ProgramFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<ProgramType | null | undefined>(undefined, [Validators.required]),
			updated_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ProgramType { program = 'program' }


	/** A list of Program objects */
	export interface Program_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Program>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Program objects */
	export interface Program_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateProgram_listFormGroup() {
		return new FormGroup<Program_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. Real time decisions are currently in beta; please contact support@increase.com if you're interested in trying them out! */
	export interface Real_time_decision {

		/**
		 * Fields related to a card authorization.
		 * Required
		 */
		card_authorization: Real_time_decisionCard_authorization;

		/**
		 * The category of the Real-Time Decision.
		 * Required
		 */
		category: Real_time_decisionCategory;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * Fields related to a digital wallet authentication attempt.
		 * Required
		 */
		digital_wallet_authentication: Real_time_decisionDigital_wallet_authentication;

		/**
		 * Fields related to a digital wallet token provisioning attempt.
		 * Required
		 */
		digital_wallet_token: Real_time_decisionDigital_wallet_token;

		/**
		 * The Real-Time Decision identifier.
		 * Required
		 */
		id: string;

		/**
		 * The status of the Real-Time Decision.
		 * Required
		 */
		status: Real_time_decisionStatus;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
		 * Required
		 */
		timeout_at: Date;

		/**
		 * A constant representing the object's type. For this resource it will always be `real_time_decision`.
		 * Required
		 */
		type: Real_time_decisionType;
	}

	/** Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. Real time decisions are currently in beta; please contact support@increase.com if you're interested in trying them out! */
	export interface Real_time_decisionFormProperties {

		/**
		 * The category of the Real-Time Decision.
		 * Required
		 */
		category: FormControl<Real_time_decisionCategory | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The Real-Time Decision identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The status of the Real-Time Decision.
		 * Required
		 */
		status: FormControl<Real_time_decisionStatus | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
		 * Required
		 */
		timeout_at: FormControl<Date | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `real_time_decision`.
		 * Required
		 */
		type: FormControl<Real_time_decisionType | null | undefined>,
	}
	export function CreateReal_time_decisionFormGroup() {
		return new FormGroup<Real_time_decisionFormProperties>({
			category: new FormControl<Real_time_decisionCategory | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Real_time_decisionStatus | null | undefined>(undefined, [Validators.required]),
			timeout_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Real_time_decisionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Real_time_decisionCard_authorization {

		/**
		 * The identifier of the Account the authorization will debit.
		 * Required
		 */
		account_id: string;

		/**
		 * The identifier of the Card that is being authorized.
		 * Required
		 */
		card_id: string;

		/**
		 * Whether or not the authorization was approved.
		 * Required
		 */
		decision: Action_a_real_time_decision_parametersCard_authorizationDecision;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: string;

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: Declined_transactionSourceCard_declineNetwork;

		/**
		 * Fields specific to the `network`
		 * Required
		 */
		network_details: Real_time_decisionCard_authorizationNetwork_details;

		/**
		 * The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
		 * Required
		 */
		presentment_amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
		 * Required
		 */
		presentment_currency: string;

		/**
		 * The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
		 * Required
		 */
		settlement_amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
		 * Required
		 */
		settlement_currency: string;
	}
	export interface Real_time_decisionCard_authorizationFormProperties {

		/**
		 * The identifier of the Account the authorization will debit.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Card that is being authorized.
		 * Required
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * Whether or not the authorization was approved.
		 * Required
		 */
		decision: FormControl<Action_a_real_time_decision_parametersCard_authorizationDecision | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The merchant descriptor of the merchant the card is transacting with.
		 * Required
		 */
		merchant_descriptor: FormControl<string | null | undefined>,

		/**
		 * The payment network used to process this card authorization
		 * Required
		 */
		network: FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>,

		/**
		 * The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
		 * Required
		 */
		presentment_amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
		 * Required
		 */
		presentment_currency: FormControl<string | null | undefined>,

		/**
		 * The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
		 * Required
		 */
		settlement_amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
		 * Required
		 */
		settlement_currency: FormControl<string | null | undefined>,
	}
	export function CreateReal_time_decisionCard_authorizationFormGroup() {
		return new FormGroup<Real_time_decisionCard_authorizationFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			decision: new FormControl<Action_a_real_time_decision_parametersCard_authorizationDecision | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Declined_transactionSourceCard_declineNetwork | null | undefined>(undefined, [Validators.required]),
			presentment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			presentment_currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			settlement_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			settlement_currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Real_time_decisionCard_authorizationNetwork_details {

		/**
		 * Fields specific to the `visa` network
		 * Required
		 */
		visa: Real_time_decisionCard_authorizationNetwork_detailsVisa;
	}
	export interface Real_time_decisionCard_authorizationNetwork_detailsFormProperties {
	}
	export function CreateReal_time_decisionCard_authorizationNetwork_detailsFormGroup() {
		return new FormGroup<Real_time_decisionCard_authorizationNetwork_detailsFormProperties>({
		});

	}

	export interface Real_time_decisionCard_authorizationNetwork_detailsVisa {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator;

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode;
	}
	export interface Real_time_decisionCard_authorizationNetwork_detailsVisaFormProperties {

		/**
		 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
		 * Required
		 */
		electronic_commerce_indicator: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>,

		/**
		 * The method used to enter the cardholder's primary account number and card expiration date
		 * Required
		 */
		point_of_service_entry_mode: FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>,
	}
	export function CreateReal_time_decisionCard_authorizationNetwork_detailsVisaFormGroup() {
		return new FormGroup<Real_time_decisionCard_authorizationNetwork_detailsVisaFormProperties>({
			electronic_commerce_indicator: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaElectronic_commerce_indicator | null | undefined>(undefined, [Validators.required]),
			point_of_service_entry_mode: new FormControl<Declined_transactionSourceCard_declineNetwork_detailsVisaPoint_of_service_entry_mode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Real_time_decisionCategory { card_authorization_requested = 'card_authorization_requested', digital_wallet_token_requested = 'digital_wallet_token_requested', digital_wallet_authentication_requested = 'digital_wallet_authentication_requested' }

	export interface Real_time_decisionDigital_wallet_authentication {

		/**
		 * The identifier of the Card that is being tokenized.
		 * Required
		 */
		card_id: string;

		/**
		 * The channel to send the card user their one-time passcode.
		 * Required
		 */
		channel: Real_time_decisionDigital_wallet_authenticationChannel;

		/**
		 * The digital wallet app being used.
		 * Required
		 */
		digital_wallet: Digital_wallet_tokenToken_requestor;

		/**
		 * The email to send the one-time passcode to if `channel` is equal to `email`.
		 * Required
		 */
		email: string;

		/**
		 * The one-time passcode to send the card user.
		 * Required
		 */
		one_time_passcode: string;

		/**
		 * The phone number to send the one-time passcode to if `channel` is equal to `sms`.
		 * Required
		 */
		phone: string;

		/**
		 * Whether your application successfully delivered the one-time passcode.
		 * Required
		 */
		result: Action_a_real_time_decision_parametersDigital_wallet_authenticationResult;
	}
	export interface Real_time_decisionDigital_wallet_authenticationFormProperties {

		/**
		 * The identifier of the Card that is being tokenized.
		 * Required
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The channel to send the card user their one-time passcode.
		 * Required
		 */
		channel: FormControl<Real_time_decisionDigital_wallet_authenticationChannel | null | undefined>,

		/**
		 * The digital wallet app being used.
		 * Required
		 */
		digital_wallet: FormControl<Digital_wallet_tokenToken_requestor | null | undefined>,

		/**
		 * The email to send the one-time passcode to if `channel` is equal to `email`.
		 * Required
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * The one-time passcode to send the card user.
		 * Required
		 */
		one_time_passcode: FormControl<string | null | undefined>,

		/**
		 * The phone number to send the one-time passcode to if `channel` is equal to `sms`.
		 * Required
		 */
		phone: FormControl<string | null | undefined>,

		/**
		 * Whether your application successfully delivered the one-time passcode.
		 * Required
		 */
		result: FormControl<Action_a_real_time_decision_parametersDigital_wallet_authenticationResult | null | undefined>,
	}
	export function CreateReal_time_decisionDigital_wallet_authenticationFormGroup() {
		return new FormGroup<Real_time_decisionDigital_wallet_authenticationFormProperties>({
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			channel: new FormControl<Real_time_decisionDigital_wallet_authenticationChannel | null | undefined>(undefined, [Validators.required]),
			digital_wallet: new FormControl<Digital_wallet_tokenToken_requestor | null | undefined>(undefined, [Validators.required]),
			email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			one_time_passcode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			result: new FormControl<Action_a_real_time_decision_parametersDigital_wallet_authenticationResult | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Real_time_decisionDigital_wallet_authenticationChannel { sms = 'sms', email = 'email' }

	export interface Real_time_decisionDigital_wallet_token {

		/**
		 * The identifier of the Card that is being tokenized.
		 * Required
		 */
		card_id: string;

		/**
		 * The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.
		 * Required
		 */
		card_profile_id: string;

		/**
		 * Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
		 * Required
		 */
		decision: Action_a_real_time_decision_parametersCard_authorizationDecision;

		/**
		 * The digital wallet app being used.
		 * Required
		 */
		digital_wallet: Digital_wallet_tokenToken_requestor;
	}
	export interface Real_time_decisionDigital_wallet_tokenFormProperties {

		/**
		 * The identifier of the Card that is being tokenized.
		 * Required
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.
		 * Required
		 */
		card_profile_id: FormControl<string | null | undefined>,

		/**
		 * Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
		 * Required
		 */
		decision: FormControl<Action_a_real_time_decision_parametersCard_authorizationDecision | null | undefined>,

		/**
		 * The digital wallet app being used.
		 * Required
		 */
		digital_wallet: FormControl<Digital_wallet_tokenToken_requestor | null | undefined>,
	}
	export function CreateReal_time_decisionDigital_wallet_tokenFormGroup() {
		return new FormGroup<Real_time_decisionDigital_wallet_tokenFormProperties>({
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			card_profile_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			decision: new FormControl<Action_a_real_time_decision_parametersCard_authorizationDecision | null | undefined>(undefined, [Validators.required]),
			digital_wallet: new FormControl<Digital_wallet_tokenToken_requestor | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Real_time_decisionStatus { pending = 'pending', responded = 'responded', timed_out = 'timed_out' }

	export enum Real_time_decisionType { real_time_decision = 'real_time_decision' }


	/** Real Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real Time Payments network. */
	export interface Real_time_payments_transfer {

		/**
		 * The Account from which the transfer was sent.
		 * Required
		 */
		account_id: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		 * Required
		 */
		approval: Real_time_payments_transferApproval;

		/**
		 * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		 * Required
		 */
		cancellation: Real_time_payments_transferCancellation;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The name of the transfer's recipient as provided by the sender.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: string;

		/**
		 * The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: string;

		/**
		 * The identifier of the External Account the transfer was made to, if any.
		 * Required
		 */
		external_account_id: string;

		/**
		 * The Real Time Payments Transfer's identifier.
		 * Required
		 */
		id: string;

		/**
		 * If the transfer is rejected by Real Time Payments or the destination financial institution, this will contain supplemental details.
		 * Required
		 */
		rejection: Real_time_payments_transferRejection;

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Account Number the recipient will see as having sent the transfer.
		 * Required
		 */
		source_account_number_id: string;

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: Real_time_payments_transferStatus;

		/**
		 * After the transfer is submitted to Real Time Payments, this will contain supplemental details.
		 * Required
		 */
		submission: Real_time_payments_transferSubmission;

		/**
		 * The Transaction funding the transfer once it is complete.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.
		 * Required
		 */
		type: Real_time_payments_transferType;
	}

	/** Real Time Payments transfers move funds, within seconds, between your Increase account and any other account on the Real Time Payments network. */
	export interface Real_time_payments_transferFormProperties {

		/**
		 * The Account from which the transfer was sent.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The name of the transfer's recipient as provided by the sender.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For real time payments transfers this is always equal to `USD`.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: FormControl<string | null | undefined>,

		/**
		 * The destination American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: FormControl<string | null | undefined>,

		/**
		 * The identifier of the External Account the transfer was made to, if any.
		 * Required
		 */
		external_account_id: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments Transfer's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Account Number the recipient will see as having sent the transfer.
		 * Required
		 */
		source_account_number_id: FormControl<string | null | undefined>,

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: FormControl<Real_time_payments_transferStatus | null | undefined>,

		/**
		 * The Transaction funding the transfer once it is complete.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `real_time_payments_transfer`.
		 * Required
		 */
		type: FormControl<Real_time_payments_transferType | null | undefined>,
	}
	export function CreateReal_time_payments_transferFormGroup() {
		return new FormGroup<Real_time_payments_transferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			destination_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			external_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source_account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Real_time_payments_transferStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Real_time_payments_transferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Real_time_payments_transferApproval {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: Date;

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: string;
	}
	export interface Real_time_payments_transferApprovalFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: FormControl<string | null | undefined>,
	}
	export function CreateReal_time_payments_transferApprovalFormGroup() {
		return new FormGroup<Real_time_payments_transferApprovalFormProperties>({
			approved_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			approved_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Real_time_payments_transferCancellation {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: Date;

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: string;
	}
	export interface Real_time_payments_transferCancellationFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: FormControl<string | null | undefined>,
	}
	export function CreateReal_time_payments_transferCancellationFormGroup() {
		return new FormGroup<Real_time_payments_transferCancellationFormProperties>({
			canceled_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			canceled_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Real_time_payments_transferRejection {

		/**
		 * Additional information about the rejection provided by the recipient bank when the `reject_reason_code` is `NARRATIVE`.
		 * Required
		 */
		reject_reason_additional_information: string;

		/**
		 * The reason the transfer was rejected as provided by the recipient bank or the Real Time Payments network.
		 * Required
		 */
		reject_reason_code: Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was rejected.
		 * Required
		 */
		rejected_at: Date;
	}
	export interface Real_time_payments_transferRejectionFormProperties {

		/**
		 * Additional information about the rejection provided by the recipient bank when the `reject_reason_code` is `NARRATIVE`.
		 * Required
		 */
		reject_reason_additional_information: FormControl<string | null | undefined>,

		/**
		 * The reason the transfer was rejected as provided by the recipient bank or the Real Time Payments network.
		 * Required
		 */
		reject_reason_code: FormControl<Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was rejected.
		 * Required
		 */
		rejected_at: FormControl<Date | null | undefined>,
	}
	export function CreateReal_time_payments_transferRejectionFormGroup() {
		return new FormGroup<Real_time_payments_transferRejectionFormProperties>({
			reject_reason_additional_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reject_reason_code: new FormControl<Complete_a_sandbox_real_time_payments_transfer_parametersRejectionReject_reason_code | null | undefined>(undefined, [Validators.required]),
			rejected_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Real_time_payments_transferStatus { pending_approval = 'pending_approval', canceled = 'canceled', pending_submission = 'pending_submission', submitted = 'submitted', complete = 'complete', rejected = 'rejected', requires_attention = 'requires_attention' }

	export interface Real_time_payments_transferSubmission {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was submitted to The Clearing House.
		 * Required
		 */
		submitted_at: Date;

		/**
		 * The Real Time Payments network identification of the transfer.
		 * Required
		 */
		transaction_identification: string;
	}
	export interface Real_time_payments_transferSubmissionFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was submitted to The Clearing House.
		 * Required
		 */
		submitted_at: FormControl<Date | null | undefined>,

		/**
		 * The Real Time Payments network identification of the transfer.
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateReal_time_payments_transferSubmissionFormGroup() {
		return new FormGroup<Real_time_payments_transferSubmissionFormProperties>({
			submitted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Real_time_payments_transferType { real_time_payments_transfer = 'real_time_payments_transfer' }


	/** A list of Real Time Payments Transfer objects */
	export interface Real_time_payments_transfer_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Real_time_payments_transfer>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Real Time Payments Transfer objects */
	export interface Real_time_payments_transfer_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateReal_time_payments_transfer_listFormGroup() {
		return new FormGroup<Real_time_payments_transfer_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Return_a_sandbox_ach_transfer_parameters {

		/** The reason why the Federal Reserve or destination bank returned this transfer. Defaults to `no_account`. */
		reason?: Ach_transferReturnReturn_reason_code | null;
	}
	export interface Return_a_sandbox_ach_transfer_parametersFormProperties {

		/** The reason why the Federal Reserve or destination bank returned this transfer. Defaults to `no_account`. */
		reason: FormControl<Ach_transferReturnReturn_reason_code | null | undefined>,
	}
	export function CreateReturn_a_sandbox_ach_transfer_parametersFormGroup() {
		return new FormGroup<Return_a_sandbox_ach_transfer_parametersFormProperties>({
			reason: new FormControl<Ach_transferReturnReturn_reason_code | null | undefined>(undefined),
		});

	}

	export interface Return_a_sandbox_check_transfer_parameters {

		/**
		 * The reason why the Check Transfer was returned to Increase.
		 * Required
		 */
		reason: Check_transferReturn_detailsReason;
	}
	export interface Return_a_sandbox_check_transfer_parametersFormProperties {

		/**
		 * The reason why the Check Transfer was returned to Increase.
		 * Required
		 */
		reason: FormControl<Check_transferReturn_detailsReason | null | undefined>,
	}
	export function CreateReturn_a_sandbox_check_transfer_parametersFormGroup() {
		return new FormGroup<Return_a_sandbox_check_transfer_parametersFormProperties>({
			reason: new FormControl<Check_transferReturn_detailsReason | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Routing numbers are used to identify your bank in a financial transaction. */
	export interface Routing_number {

		/**
		 * This routing number's support for ACH Transfers.
		 * Required
		 */
		ach_transfers: Routing_numberAch_transfers;

		/**
		 * The name of the financial institution belonging to a routing number.
		 * Required
		 */
		name: string;

		/**
		 * This routing number's support for Real Time Payments Transfers.
		 * Required
		 */
		real_time_payments_transfers: Routing_numberAch_transfers;

		/**
		 * The nine digit routing number identifier.
		 * Required
		 */
		routing_number: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `routing_number`.
		 * Required
		 */
		type: Routing_numberType;

		/**
		 * This routing number's support for Wire Transfers.
		 * Required
		 */
		wire_transfers: Routing_numberAch_transfers;
	}

	/** Routing numbers are used to identify your bank in a financial transaction. */
	export interface Routing_numberFormProperties {

		/**
		 * This routing number's support for ACH Transfers.
		 * Required
		 */
		ach_transfers: FormControl<Routing_numberAch_transfers | null | undefined>,

		/**
		 * The name of the financial institution belonging to a routing number.
		 * Required
		 */
		name: FormControl<string | null | undefined>,

		/**
		 * This routing number's support for Real Time Payments Transfers.
		 * Required
		 */
		real_time_payments_transfers: FormControl<Routing_numberAch_transfers | null | undefined>,

		/**
		 * The nine digit routing number identifier.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `routing_number`.
		 * Required
		 */
		type: FormControl<Routing_numberType | null | undefined>,

		/**
		 * This routing number's support for Wire Transfers.
		 * Required
		 */
		wire_transfers: FormControl<Routing_numberAch_transfers | null | undefined>,
	}
	export function CreateRouting_numberFormGroup() {
		return new FormGroup<Routing_numberFormProperties>({
			ach_transfers: new FormControl<Routing_numberAch_transfers | null | undefined>(undefined, [Validators.required]),
			name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			real_time_payments_transfers: new FormControl<Routing_numberAch_transfers | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Routing_numberType | null | undefined>(undefined, [Validators.required]),
			wire_transfers: new FormControl<Routing_numberAch_transfers | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Routing_numberAch_transfers { supported = 'supported', not_supported = 'not_supported' }

	export enum Routing_numberType { routing_number = 'routing_number' }


	/** A list of Routing Number objects */
	export interface Routing_number_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Routing_number>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Routing Number objects */
	export interface Routing_number_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateRouting_number_listFormGroup() {
		return new FormGroup<Routing_number_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simulate_a_real_time_payments_transfer_to_your_account_parameters {

		/**
		 * The identifier of the Account Number the inbound Real Time Payments Transfer is for.
		 * Required
		 */
		account_number_id: string;

		/**
		 * The transfer amount in USD cents. Must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: number;

		/**
		 * The account number of the account that sent the transfer.
		 * Max length: 200
		 * Min length: 1
		 */
		debtor_account_number?: string | null;

		/**
		 * The name provided by the sender of the transfer.
		 * Max length: 200
		 * Min length: 1
		 */
		debtor_name?: string | null;

		/**
		 * The routing number of the account that sent the transfer.
		 * Max length: 9
		 * Min length: 9
		 */
		debtor_routing_number?: string | null;

		/**
		 * Additional information included with the transfer.
		 * Max length: 140
		 * Min length: 1
		 */
		remittance_information?: string | null;

		/** The identifier of a pending Request for Payment that this transfer will fulfill. */
		request_for_payment_id?: string | null;
	}
	export interface Simulate_a_real_time_payments_transfer_to_your_account_parametersFormProperties {

		/**
		 * The identifier of the Account Number the inbound Real Time Payments Transfer is for.
		 * Required
		 */
		account_number_id: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents. Must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Max length: 200
		 * Min length: 1
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Max length: 200
		 * Min length: 1
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Max length: 9
		 * Min length: 9
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Max length: 140
		 * Min length: 1
		 */
		remittance_information: FormControl<string | null | undefined>,

		/** The identifier of a pending Request for Payment that this transfer will fulfill. */
		request_for_payment_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_a_real_time_payments_transfer_to_your_account_parametersFormGroup() {
		return new FormGroup<Simulate_a_real_time_payments_transfer_to_your_account_parametersFormProperties>({
			account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.minLength(9), Validators.maxLength(9)]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(140)]),
			request_for_payment_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Simulate_a_refund_on_a_card_parameters {

		/**
		 * The identifier for the Transaction to refund. The Transaction's source must have a category of card_settlement.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Simulate_a_refund_on_a_card_parametersFormProperties {

		/**
		 * The identifier for the Transaction to refund. The Transaction's source must have a category of card_settlement.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_a_refund_on_a_card_parametersFormGroup() {
		return new FormGroup<Simulate_a_refund_on_a_card_parametersFormProperties>({
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simulate_a_tax_document_being_created_parameters {

		/**
		 * The identifier of the Account the tax document is for.
		 * Required
		 */
		account_id: string;
	}
	export interface Simulate_a_tax_document_being_created_parametersFormProperties {

		/**
		 * The identifier of the Account the tax document is for.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_a_tax_document_being_created_parametersFormGroup() {
		return new FormGroup<Simulate_a_tax_document_being_created_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simulate_a_wire_transfer_to_your_account_parameters {

		/**
		 * The identifier of the Account Number the inbound Wire Transfer is for.
		 * Required
		 */
		account_number_id: string;

		/**
		 * The transfer amount in cents. Must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: number;

		/**
		 * The sending bank will set beneficiary_address_line1 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line1?: string | null;

		/**
		 * The sending bank will set beneficiary_address_line2 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line2?: string | null;

		/**
		 * The sending bank will set beneficiary_address_line3 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line3?: string | null;

		/**
		 * The sending bank will set beneficiary_name in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_name?: string | null;

		/**
		 * The sending bank will set beneficiary_reference in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_reference?: string | null;

		/**
		 * The sending bank will set originator_address_line1 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_address_line1?: string | null;

		/**
		 * The sending bank will set originator_address_line2 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_address_line2?: string | null;

		/**
		 * The sending bank will set originator_address_line3 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_address_line3?: string | null;

		/**
		 * The sending bank will set originator_name in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_name?: string | null;

		/**
		 * The sending bank will set originator_to_beneficiary_information_line1 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line1?: string | null;

		/**
		 * The sending bank will set originator_to_beneficiary_information_line2 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line2?: string | null;

		/**
		 * The sending bank will set originator_to_beneficiary_information_line3 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line3?: string | null;

		/**
		 * The sending bank will set originator_to_beneficiary_information_line4 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line4?: string | null;
	}
	export interface Simulate_a_wire_transfer_to_your_account_parametersFormProperties {

		/**
		 * The identifier of the Account Number the inbound Wire Transfer is for.
		 * Required
		 */
		account_number_id: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in cents. Must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The sending bank will set beneficiary_address_line1 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set beneficiary_address_line2 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set beneficiary_address_line3 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set beneficiary_name in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_name: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set beneficiary_reference in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_reference: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_address_line1 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_address_line1: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_address_line2 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_address_line2: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_address_line3 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_address_line3: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_name in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_name: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_to_beneficiary_information_line1 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_to_beneficiary_information_line2 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_to_beneficiary_information_line3 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/**
		 * The sending bank will set originator_to_beneficiary_information_line4 in production. You can simulate any value here.
		 * Max length: 200
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_a_wire_transfer_to_your_account_parametersFormGroup() {
		return new FormGroup<Simulate_a_wire_transfer_to_your_account_parametersFormProperties>({
			account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Simulate_an_account_statement_being_created_parameters {

		/**
		 * The identifier of the Account the statement is for.
		 * Required
		 */
		account_id: string;
	}
	export interface Simulate_an_account_statement_being_created_parametersFormProperties {

		/**
		 * The identifier of the Account the statement is for.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_an_account_statement_being_created_parametersFormGroup() {
		return new FormGroup<Simulate_an_account_statement_being_created_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simulate_an_ach_transfer_to_your_account_parameters {

		/**
		 * The identifier of the Account Number the inbound ACH Transfer is for.
		 * Required
		 */
		account_number_id: string;

		/**
		 * The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
		 * Required
		 */
		amount: number;

		/**
		 * The description of the date of the transfer.
		 * Max length: 6
		 * Min length: 1
		 */
		company_descriptive_date?: string | null;

		/**
		 * Data associated with the transfer set by the sender.
		 * Max length: 20
		 * Min length: 1
		 */
		company_discretionary_data?: string | null;

		/**
		 * The description of the transfer set by the sender.
		 * Max length: 10
		 * Min length: 1
		 */
		company_entry_description?: string | null;

		/**
		 * The sender's company id.
		 * Max length: 15
		 * Min length: 1
		 */
		company_id?: string | null;

		/**
		 * The name of the sender.
		 * Max length: 16
		 * Min length: 1
		 */
		company_name?: string | null;
	}
	export interface Simulate_an_ach_transfer_to_your_account_parametersFormProperties {

		/**
		 * The identifier of the Account Number the inbound ACH Transfer is for.
		 * Required
		 */
		account_number_id: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description of the date of the transfer.
		 * Max length: 6
		 * Min length: 1
		 */
		company_descriptive_date: FormControl<string | null | undefined>,

		/**
		 * Data associated with the transfer set by the sender.
		 * Max length: 20
		 * Min length: 1
		 */
		company_discretionary_data: FormControl<string | null | undefined>,

		/**
		 * The description of the transfer set by the sender.
		 * Max length: 10
		 * Min length: 1
		 */
		company_entry_description: FormControl<string | null | undefined>,

		/**
		 * The sender's company id.
		 * Max length: 15
		 * Min length: 1
		 */
		company_id: FormControl<string | null | undefined>,

		/**
		 * The name of the sender.
		 * Max length: 16
		 * Min length: 1
		 */
		company_name: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_an_ach_transfer_to_your_account_parametersFormGroup() {
		return new FormGroup<Simulate_an_ach_transfer_to_your_account_parametersFormProperties>({
			account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(6)]),
			company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(20)]),
			company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(10)]),
			company_id: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(15)]),
			company_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(16)]),
		});

	}

	export interface Simulate_an_authorization_on_a_card_parameters {

		/**
		 * The authorization amount in cents.
		 * Required
		 * Minimum: 1
		 * Maximum: 1000000000
		 */
		amount: number;

		/** The identifier of the Card to be authorized. */
		card_id?: string | null;

		/** The identifier of the Digital Wallet Token to be authorized. */
		digital_wallet_token_id?: string | null;

		/** The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes. */
		event_subscription_id?: string | null;
	}
	export interface Simulate_an_authorization_on_a_card_parametersFormProperties {

		/**
		 * The authorization amount in cents.
		 * Required
		 * Minimum: 1
		 * Maximum: 1000000000
		 */
		amount: FormControl<number | null | undefined>,

		/** The identifier of the Card to be authorized. */
		card_id: FormControl<string | null | undefined>,

		/** The identifier of the Digital Wallet Token to be authorized. */
		digital_wallet_token_id: FormControl<string | null | undefined>,

		/** The identifier of the Event Subscription to use. If provided, will override the default real time event subscription. Because you can only create one real time decision event subscription, you can use this field to route events to any specified event subscription for testing purposes. */
		event_subscription_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_an_authorization_on_a_card_parametersFormGroup() {
		return new FormGroup<Simulate_an_authorization_on_a_card_parametersFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1), Validators.max(1000000000)]),
			card_id: new FormControl<string | null | undefined>(undefined),
			digital_wallet_token_id: new FormControl<string | null | undefined>(undefined),
			event_subscription_id: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Simulate_an_inbound_wire_drawdown_request_being_created_parameters {

		/**
		 * The amount being requested in cents.
		 * Required
		 * Minimum: 0
		 */
		amount: number;

		/**
		 * The drawdown request's beneficiary's account number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_account_number: string;

		/**
		 * Line 1 of the drawdown request's beneficiary's address.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_address_line1?: string | null;

		/**
		 * Line 2 of the drawdown request's beneficiary's address.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_address_line2?: string | null;

		/**
		 * Line 3 of the drawdown request's beneficiary's address.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_address_line3?: string | null;

		/**
		 * The drawdown request's beneficiary's name.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_name?: string | null;

		/**
		 * The drawdown request's beneficiary's routing number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_routing_number: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		currency: string;

		/**
		 * A message from the drawdown request's originator.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		message_to_recipient: string;

		/**
		 * The drawdown request's originator's account number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		originator_account_number: string;

		/**
		 * Line 1 of the drawdown request's originator's address.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_address_line1?: string | null;

		/**
		 * Line 2 of the drawdown request's originator's address.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_address_line2?: string | null;

		/**
		 * Line 3 of the drawdown request's originator's address.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_address_line3?: string | null;

		/**
		 * The drawdown request's originator's name.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_name?: string | null;

		/**
		 * The drawdown request's originator's routing number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		originator_routing_number: string;

		/**
		 * Line 1 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line1?: string | null;

		/**
		 * Line 2 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line2?: string | null;

		/**
		 * Line 3 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line3?: string | null;

		/**
		 * Line 4 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line4?: string | null;

		/**
		 * The Account Number to which the recipient of this request is being requested to send funds from.
		 * Required
		 */
		recipient_account_number_id: string;
	}
	export interface Simulate_an_inbound_wire_drawdown_request_being_created_parametersFormProperties {

		/**
		 * The amount being requested in cents.
		 * Required
		 * Minimum: 0
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The drawdown request's beneficiary's account number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_account_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the drawdown request's beneficiary's address.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the drawdown request's beneficiary's address.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the drawdown request's beneficiary's address.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's beneficiary's name.
		 * Max length: 35
		 * Min length: 1
		 */
		beneficiary_name: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's beneficiary's routing number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		beneficiary_routing_number: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * A message from the drawdown request's originator.
		 * Required
		 * Max length: 140
		 * Min length: 1
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's originator's account number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		originator_account_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the drawdown request's originator's address.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_address_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the drawdown request's originator's address.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_address_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the drawdown request's originator's address.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_address_line3: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's originator's name.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_name: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's originator's routing number.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		originator_routing_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/**
		 * Line 4 of the information conveyed from the originator of the message to the beneficiary.
		 * Max length: 35
		 * Min length: 1
		 */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,

		/**
		 * The Account Number to which the recipient of this request is being requested to send funds from.
		 * Required
		 */
		recipient_account_number_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_an_inbound_wire_drawdown_request_being_created_parametersFormGroup() {
		return new FormGroup<Simulate_an_inbound_wire_drawdown_request_being_created_parametersFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			beneficiary_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			beneficiary_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(140)]),
			originator_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			originator_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(35)]),
			recipient_account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simulate_an_interest_payment_to_your_account_parameters {

		/**
		 * The identifier of the Account Number the Interest Payment is for.
		 * Required
		 */
		account_id: string;

		/**
		 * The interest amount in cents. Must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: number;
	}
	export interface Simulate_an_interest_payment_to_your_account_parametersFormProperties {

		/**
		 * The identifier of the Account Number the Interest Payment is for.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The interest amount in cents. Must be positive.
		 * Required
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,
	}
	export function CreateSimulate_an_interest_payment_to_your_account_parametersFormGroup() {
		return new FormGroup<Simulate_an_interest_payment_to_your_account_parametersFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
		});

	}

	export interface Simulate_digital_wallet_provisioning_for_a_card_parameters {

		/**
		 * The identifier of the Card to be authorized.
		 * Required
		 */
		card_id: string;
	}
	export interface Simulate_digital_wallet_provisioning_for_a_card_parametersFormProperties {

		/**
		 * The identifier of the Card to be authorized.
		 * Required
		 */
		card_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_digital_wallet_provisioning_for_a_card_parametersFormGroup() {
		return new FormGroup<Simulate_digital_wallet_provisioning_for_a_card_parametersFormProperties>({
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simulate_settling_a_card_authorization_parameters {

		/**
		 * The amount to be settled. This defaults to the amount of the Pending Transaction being settled.
		 * Minimum: 1
		 */
		amount?: number | null;

		/**
		 * The identifier of the Card to create a settlement on.
		 * Required
		 */
		card_id: string;

		/**
		 * The identifier of the Pending Transaction for the Card Authorization you wish to settle.
		 * Required
		 */
		pending_transaction_id: string;
	}
	export interface Simulate_settling_a_card_authorization_parametersFormProperties {

		/**
		 * The amount to be settled. This defaults to the amount of the Pending Transaction being settled.
		 * Minimum: 1
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Card to create a settlement on.
		 * Required
		 */
		card_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Pending Transaction for the Card Authorization you wish to settle.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateSimulate_settling_a_card_authorization_parametersFormGroup() {
		return new FormGroup<Simulate_settling_a_card_authorization_parametersFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.min(1)]),
			card_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Simulates_advancing_the_state_of_a_card_dispute_parameters {

		/**
		 * Why the dispute was rejected. Not required for accepting disputes.
		 * Max length: 200
		 * Min length: 1
		 */
		explanation?: string | null;

		/**
		 * The status to move the dispute to.
		 * Required
		 */
		status: Simulates_advancing_the_state_of_a_card_dispute_parametersStatus;
	}
	export interface Simulates_advancing_the_state_of_a_card_dispute_parametersFormProperties {

		/**
		 * Why the dispute was rejected. Not required for accepting disputes.
		 * Max length: 200
		 * Min length: 1
		 */
		explanation: FormControl<string | null | undefined>,

		/**
		 * The status to move the dispute to.
		 * Required
		 */
		status: FormControl<Simulates_advancing_the_state_of_a_card_dispute_parametersStatus | null | undefined>,
	}
	export function CreateSimulates_advancing_the_state_of_a_card_dispute_parametersFormGroup() {
		return new FormGroup<Simulates_advancing_the_state_of_a_card_dispute_parametersFormProperties>({
			explanation: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			status: new FormControl<Simulates_advancing_the_state_of_a_card_dispute_parametersStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Simulates_advancing_the_state_of_a_card_dispute_parametersStatus { accepted = 'accepted', rejected = 'rejected' }


	/** Transactions are the immutable additions and removals of money from your bank account. They're the equivalent of line items on your bank statement. */
	export interface Transaction {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: string;

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: string;

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: string;

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: string;

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: Declined_transactionRoute_type;

		/**
		 * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
		 * Required
		 */
		source: TransactionSource;

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionType;
	}

	/** Transactions are the immutable additions and removals of money from your bank account. They're the equivalent of line items on your bank statement. */
	export interface TransactionFormProperties {

		/**
		 * The identifier for the Account the Transaction belongs to.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Transaction identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
		 * Required
		 */
		route_id: FormControl<string | null | undefined>,

		/**
		 * The type of the route this Transaction came through.
		 * Required
		 */
		route_type: FormControl<Declined_transactionRoute_type | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `transaction`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>,
	}
	export function CreateTransactionFormGroup() {
		return new FormGroup<TransactionFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			route_type: new FormControl<Declined_transactionRoute_type | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSource {

		/**
		 * A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
		 * Required
		 */
		account_transfer_intention: TransactionSourceAccount_transfer_intention;

		/**
		 * A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
		 * Required
		 */
		ach_check_conversion: TransactionSourceAch_check_conversion;

		/**
		 * A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
		 * Required
		 */
		ach_check_conversion_return: TransactionSourceAch_check_conversion_return;

		/**
		 * A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
		 * Required
		 */
		ach_transfer_intention: TransactionSourceAch_transfer_intention;

		/**
		 * A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
		 * Required
		 */
		ach_transfer_rejection: TransactionSourceAch_transfer_rejection;

		/**
		 * A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
		 * Required
		 */
		ach_transfer_return: TransactionSourceAch_transfer_return;

		/**
		 * A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
		 * Required
		 */
		card_dispute_acceptance: TransactionSourceCard_dispute_acceptance;

		/**
		 * A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
		 * Required
		 */
		card_refund: TransactionSourceCard_refund;

		/**
		 * A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
		 * Required
		 */
		card_revenue_payment: TransactionSourceCard_revenue_payment;

		/**
		 * A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
		 * Required
		 */
		card_route_refund: TransactionSourceCard_route_refund;

		/**
		 * A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
		 * Required
		 */
		card_route_settlement: TransactionSourceCard_route_settlement;

		/**
		 * A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
		 * Required
		 */
		card_settlement: TransactionSourceCard_settlement;

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: Inbound_ach_transfer_simulation_resultTransactionSourceCategory;

		/**
		 * A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
		 * Required
		 */
		check_deposit_acceptance: TransactionSourceCheck_deposit_acceptance;

		/**
		 * A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
		 * Required
		 */
		check_deposit_return: TransactionSourceCheck_deposit_return;

		/**
		 * A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
		 * Required
		 */
		check_transfer_intention: TransactionSourceCheck_transfer_intention;

		/**
		 * A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
		 * Required
		 */
		check_transfer_rejection: TransactionSourceCheck_transfer_rejection;

		/**
		 * A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
		 * Required
		 */
		check_transfer_return: TransactionSourceCheck_transfer_return;

		/**
		 * A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
		 * Required
		 */
		check_transfer_stop_payment_request: TransactionSourceCheck_transfer_stop_payment_request;

		/**
		 * A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
		 * Required
		 */
		dispute_resolution: TransactionSourceDispute_resolution;

		/**
		 * A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
		 * Required
		 */
		empyreal_cash_deposit: TransactionSourceEmpyreal_cash_deposit;

		/**
		 * A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
		 * Required
		 */
		fee_payment: TransactionSourceFee_payment;

		/**
		 * A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
		 * Required
		 */
		inbound_ach_transfer: TransactionSourceInbound_ach_transfer;

		/**
		 * A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
		 * Required
		 */
		inbound_check: TransactionSourceInbound_check;

		/**
		 * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
		 * Required
		 */
		inbound_international_ach_transfer: TransactionSourceInbound_international_ach_transfer;

		/**
		 * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
		 * Required
		 */
		inbound_real_time_payments_transfer_confirmation: TransactionSourceInbound_real_time_payments_transfer_confirmation;

		/**
		 * A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
		 * Required
		 */
		inbound_wire_drawdown_payment: TransactionSourceInbound_wire_drawdown_payment;

		/**
		 * A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
		 * Required
		 */
		inbound_wire_drawdown_payment_reversal: TransactionSourceInbound_wire_drawdown_payment_reversal;

		/**
		 * A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
		 * Required
		 */
		inbound_wire_reversal: TransactionSourceInbound_wire_reversal;

		/**
		 * A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
		 * Required
		 */
		inbound_wire_transfer: TransactionSourceInbound_wire_transfer;

		/**
		 * A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
		 * Required
		 */
		interest_payment: TransactionSourceInterest_payment;

		/**
		 * A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
		 * Required
		 */
		internal_source: TransactionSourceInternal_source;

		/**
		 * A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
		 * Required
		 */
		real_time_payments_transfer_acknowledgement: TransactionSourceReal_time_payments_transfer_acknowledgement;

		/**
		 * A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
		 * Required
		 */
		sample_funds: TransactionSourceSample_funds;

		/**
		 * A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
		 * Required
		 */
		wire_drawdown_payment_intention: TransactionSourceWire_drawdown_payment_intention;

		/**
		 * A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
		 * Required
		 */
		wire_drawdown_payment_rejection: TransactionSourceWire_drawdown_payment_rejection;

		/**
		 * A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
		 * Required
		 */
		wire_transfer_intention: TransactionSourceWire_transfer_intention;

		/**
		 * A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
		 * Required
		 */
		wire_transfer_rejection: TransactionSourceWire_transfer_rejection;
	}
	export interface TransactionSourceFormProperties {

		/**
		 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
		 * Required
		 */
		category: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>,
	}
	export function CreateTransactionSourceFormGroup() {
		return new FormGroup<TransactionSourceFormProperties>({
			category: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCategory | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceAccount_transfer_intention {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: string;

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: string;

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: string;

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceAccount_transfer_intentionFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The description you chose to give the transfer.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account to where the Account Transfer was sent.
		 * Required
		 */
		destination_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account from where the Account Transfer was sent.
		 * Required
		 */
		source_account_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Account Transfer that led to this Pending Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceAccount_transfer_intentionFormGroup() {
		return new FormGroup<TransactionSourceAccount_transfer_intentionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			source_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceAch_check_conversion {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: string;
	}
	export interface TransactionSourceAch_check_conversionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the File containing an image of the returned check.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceAch_check_conversionFormGroup() {
		return new FormGroup<TransactionSourceAch_check_conversionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceAch_check_conversion_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: string;
	}
	export interface TransactionSourceAch_check_conversion_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * Why the transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceAch_check_conversion_returnFormGroup() {
		return new FormGroup<TransactionSourceAch_check_conversion_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceAch_transfer_intention {

		/** Required */
		account_number: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		routing_number: string;

		/** Required */
		statement_descriptor: string;

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceAch_transfer_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		statement_descriptor: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceAch_transfer_intentionFormGroup() {
		return new FormGroup<TransactionSourceAch_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			statement_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceAch_transfer_rejection {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceAch_transfer_rejectionFormProperties {

		/**
		 * The identifier of the ACH Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceAch_transfer_rejectionFormGroup() {
		return new FormGroup<TransactionSourceAch_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceAch_transfer_return {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: Ach_transferReturnReturn_reason_code;

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceAch_transfer_returnFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * Why the ACH Transfer was returned.
		 * Required
		 */
		return_reason_code: FormControl<Ach_transferReturnReturn_reason_code | null | undefined>,

		/**
		 * The identifier of the Tranasaction associated with this return.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the ACH Transfer associated with this return.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceAch_transfer_returnFormGroup() {
		return new FormGroup<TransactionSourceAch_transfer_returnFormProperties>({
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			return_reason_code: new FormControl<Ach_transferReturnReturn_reason_code | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCard_dispute_acceptance {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: Date;

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: string;

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: string;
	}
	export interface TransactionSourceCard_dispute_acceptanceFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
		 * Required
		 */
		accepted_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Card Dispute that was accepted.
		 * Required
		 */
		card_dispute_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to return the disputed funds to your account.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCard_dispute_acceptanceFormGroup() {
		return new FormGroup<TransactionSourceCard_dispute_acceptanceFormProperties>({
			accepted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			card_dispute_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCard_refund {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType;
	}
	export interface TransactionSourceCard_refundFormProperties {

		/**
		 * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier for the Transaction this refunds, if any.
		 * Required
		 */
		card_settlement_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Refund identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_refund`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>,
	}
	export function CreateTransactionSourceCard_refundFormGroup() {
		return new FormGroup<TransactionSourceCard_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_settlement_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_refundType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCard_revenue_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: string;
	}
	export interface TransactionSourceCard_revenue_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,

		/**
		 * The account the card belonged to.
		 * Required
		 */
		transacted_on_account_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCard_revenue_paymentFormGroup() {
		return new FormGroup<TransactionSourceCard_revenue_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transacted_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCard_route_refund {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface TransactionSourceCard_route_refundFormProperties {

		/**
		 * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCard_route_refundFormGroup() {
		return new FormGroup<TransactionSourceCard_route_refundFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCard_route_settlement {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		merchant_acceptor_id: string;

		/** Required */
		merchant_category_code: string;

		/** Required */
		merchant_city: string;

		/** Required */
		merchant_country: string;

		/** Required */
		merchant_descriptor: string;

		/** Required */
		merchant_state: string;
	}
	export interface TransactionSourceCard_route_settlementFormProperties {

		/**
		 * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/** Required */
		merchant_category_code: FormControl<string | null | undefined>,

		/** Required */
		merchant_city: FormControl<string | null | undefined>,

		/** Required */
		merchant_country: FormControl<string | null | undefined>,

		/** Required */
		merchant_descriptor: FormControl<string | null | undefined>,

		/** Required */
		merchant_state: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCard_route_settlementFormGroup() {
		return new FormGroup<TransactionSourceCard_route_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_descriptor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCard_settlement {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: string;

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: string;

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: string;

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: string;

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: string;

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: string;

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: string;

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: string;

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType;
	}
	export interface TransactionSourceCard_settlementFormProperties {

		/**
		 * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The Card Authorization that was created prior to this Card Settlement, if on exists.
		 * Required
		 */
		card_authorization: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The Card Settlement identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
		 * Required
		 */
		merchant_acceptor_id: FormControl<string | null | undefined>,

		/**
		 * The 4-digit MCC describing the merchant's business.
		 * Required
		 */
		merchant_category_code: FormControl<string | null | undefined>,

		/**
		 * The city the merchant resides in.
		 * Required
		 */
		merchant_city: FormControl<string | null | undefined>,

		/**
		 * The country the merchant resides in.
		 * Required
		 */
		merchant_country: FormControl<string | null | undefined>,

		/**
		 * The name of the merchant.
		 * Required
		 */
		merchant_name: FormControl<string | null | undefined>,

		/**
		 * The state the merchant resides in.
		 * Required
		 */
		merchant_state: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Pending Transaction associated with this Transaction.
		 * Required
		 */
		pending_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's presentment currency.
		 * Required
		 */
		presentment_amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
		 * Required
		 */
		presentment_currency: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `card_settlement`.
		 * Required
		 */
		type: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>,
	}
	export function CreateTransactionSourceCard_settlementFormGroup() {
		return new FormGroup<TransactionSourceCard_settlementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			card_authorization: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_acceptor_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_category_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			merchant_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pending_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			presentment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			presentment_currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceCard_settlementType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCheck_deposit_acceptance {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: string;

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: string;

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: string;

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: string;
	}
	export interface TransactionSourceCheck_deposit_acceptanceFormProperties {

		/**
		 * The account number printed on the check.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * An additional line of metadata printed on the check. This typically includes the check number for business checks.
		 * Required
		 */
		auxiliary_on_us: FormControl<string | null | undefined>,

		/**
		 * The ID of the Check Deposit that was accepted.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The routing number printed on the check.
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
		 * Required
		 */
		serial_number: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCheck_deposit_acceptanceFormGroup() {
		return new FormGroup<TransactionSourceCheck_deposit_acceptanceFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			auxiliary_on_us: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			serial_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCheck_deposit_return {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		return_reason: Check_depositDeposit_returnReturn_reason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: string;
	}
	export interface TransactionSourceCheck_deposit_returnFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The identifier of the Check Deposit that was returned.
		 * Required
		 */
		check_deposit_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		return_reason: FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the transaction that reversed the original check deposit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCheck_deposit_returnFormGroup() {
		return new FormGroup<TransactionSourceCheck_deposit_returnFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_deposit_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			return_reason: new FormControl<Check_depositDeposit_returnReturn_reason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCheck_transfer_intention {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: string;

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: string;

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: string;

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: string;

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: string;

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceCheck_transfer_intentionFormProperties {

		/**
		 * The city of the check's destination.
		 * Required
		 */
		address_city: FormControl<string | null | undefined>,

		/**
		 * The street address of the check's destination.
		 * Required
		 */
		address_line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the address of the check's destination.
		 * Required
		 */
		address_line2: FormControl<string | null | undefined>,

		/**
		 * The state of the check's destination.
		 * Required
		 */
		address_state: FormControl<string | null | undefined>,

		/**
		 * The postal code of the check's destination.
		 * Required
		 */
		address_zip: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The name that will be printed on the check.
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Check Transfer with which this is associated.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCheck_transfer_intentionFormGroup() {
		return new FormGroup<TransactionSourceCheck_transfer_intentionFormProperties>({
			address_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_state: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			address_zip: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCheck_transfer_rejection {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceCheck_transfer_rejectionFormProperties {

		/**
		 * The identifier of the Check Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCheck_transfer_rejectionFormGroup() {
		return new FormGroup<TransactionSourceCheck_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCheck_transfer_return {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: string;

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: Check_transferReturn_detailsReason;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: Date;

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceCheck_transfer_returnFormProperties {

		/**
		 * If available, a document with additional information about the return.
		 * Required
		 */
		file_id: FormControl<string | null | undefined>,

		/**
		 * The reason why the check was returned.
		 * Required
		 */
		reason: FormControl<Check_transferReturn_detailsReason | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
		 * Required
		 */
		returned_at: FormControl<Date | null | undefined>,

		/**
		 * The identifier of the Transaction that was created to credit you for the returned check.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The identifier of the returned Check Transfer.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceCheck_transfer_returnFormGroup() {
		return new FormGroup<TransactionSourceCheck_transfer_returnFormProperties>({
			file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Check_transferReturn_detailsReason | null | undefined>(undefined, [Validators.required]),
			returned_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceCheck_transfer_stop_payment_request {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: Date;

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: string;

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: Check_transferStop_payment_requestType;
	}
	export interface TransactionSourceCheck_transfer_stop_payment_requestFormProperties {

		/**
		 * The time the stop-payment was requested.
		 * Required
		 */
		requested_at: FormControl<Date | null | undefined>,

		/**
		 * The transaction ID of the corresponding credit transaction.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * The ID of the check transfer that was stopped.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
		 * Required
		 */
		type: FormControl<Check_transferStop_payment_requestType | null | undefined>,
	}
	export function CreateTransactionSourceCheck_transfer_stop_payment_requestFormGroup() {
		return new FormGroup<TransactionSourceCheck_transfer_stop_payment_requestFormProperties>({
			requested_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Check_transferStop_payment_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceDispute_resolution {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: string;
	}
	export interface TransactionSourceDispute_resolutionFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the Transaction that was disputed.
		 * Required
		 */
		disputed_transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceDispute_resolutionFormGroup() {
		return new FormGroup<TransactionSourceDispute_resolutionFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			disputed_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceEmpyreal_cash_deposit {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		bag_id: string;

		/** Required */
		deposit_date: Date;
	}
	export interface TransactionSourceEmpyreal_cash_depositFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		bag_id: FormControl<string | null | undefined>,

		/** Required */
		deposit_date: FormControl<Date | null | undefined>,
	}
	export function CreateTransactionSourceEmpyreal_cash_depositFormGroup() {
		return new FormGroup<TransactionSourceEmpyreal_cash_depositFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			bag_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			deposit_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceFee_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface TransactionSourceFee_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateTransactionSourceFee_paymentFormGroup() {
		return new FormGroup<TransactionSourceFee_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		originator_company_descriptive_date: string;

		/** Required */
		originator_company_discretionary_data: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_company_id: string;

		/** Required */
		originator_company_name: string;

		/** Required */
		receiver_id_number: string;

		/** Required */
		receiver_name: string;

		/** Required */
		trace_number: string;
	}
	export interface TransactionSourceInbound_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		originator_company_descriptive_date: FormControl<string | null | undefined>,

		/** Required */
		originator_company_discretionary_data: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_company_id: FormControl<string | null | undefined>,

		/** Required */
		originator_company_name: FormControl<string | null | undefined>,

		/** Required */
		receiver_id_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceInbound_ach_transferFormGroup() {
		return new FormGroup<TransactionSourceInbound_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			originator_company_descriptive_date: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_discretionary_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_id_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_check {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		check_front_image_file_id: string;

		/** Required */
		check_number: string;

		/** Required */
		check_rear_image_file_id: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: AccountCurrency;
	}
	export interface TransactionSourceInbound_checkFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		check_front_image_file_id: FormControl<string | null | undefined>,

		/** Required */
		check_number: FormControl<string | null | undefined>,

		/** Required */
		check_rear_image_file_id: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,
	}
	export function CreateTransactionSourceInbound_checkFormGroup() {
		return new FormGroup<TransactionSourceInbound_checkFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			check_front_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			check_rear_image_file_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_international_ach_transfer {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		destination_country_code: string;

		/** Required */
		destination_currency_code: string;

		/** Required */
		foreign_exchange_indicator: string;

		/** Required */
		foreign_exchange_reference: string;

		/** Required */
		foreign_exchange_reference_indicator: string;

		/** Required */
		foreign_payment_amount: number;

		/** Required */
		foreign_trace_number: string;

		/** Required */
		international_transaction_type_code: string;

		/** Required */
		originating_currency_code: string;

		/** Required */
		originating_depository_financial_institution_branch_country: string;

		/** Required */
		originating_depository_financial_institution_id: string;

		/** Required */
		originating_depository_financial_institution_id_qualifier: string;

		/** Required */
		originating_depository_financial_institution_name: string;

		/** Required */
		originator_city: string;

		/** Required */
		originator_company_entry_description: string;

		/** Required */
		originator_country: string;

		/** Required */
		originator_identification: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_postal_code: string;

		/** Required */
		originator_state_or_province: string;

		/** Required */
		originator_street_address: string;

		/** Required */
		payment_related_information: string;

		/** Required */
		payment_related_information2: string;

		/** Required */
		receiver_city: string;

		/** Required */
		receiver_country: string;

		/** Required */
		receiver_identification_number: string;

		/** Required */
		receiver_postal_code: string;

		/** Required */
		receiver_state_or_province: string;

		/** Required */
		receiver_street_address: string;

		/** Required */
		receiving_company_or_individual_name: string;

		/** Required */
		receiving_depository_financial_institution_country: string;

		/** Required */
		receiving_depository_financial_institution_id: string;

		/** Required */
		receiving_depository_financial_institution_id_qualifier: string;

		/** Required */
		receiving_depository_financial_institution_name: string;

		/** Required */
		trace_number: string;
	}
	export interface TransactionSourceInbound_international_ach_transferFormProperties {

		/**
		 * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		destination_country_code: FormControl<string | null | undefined>,

		/** Required */
		destination_currency_code: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference: FormControl<string | null | undefined>,

		/** Required */
		foreign_exchange_reference_indicator: FormControl<string | null | undefined>,

		/** Required */
		foreign_payment_amount: FormControl<number | null | undefined>,

		/** Required */
		foreign_trace_number: FormControl<string | null | undefined>,

		/** Required */
		international_transaction_type_code: FormControl<string | null | undefined>,

		/** Required */
		originating_currency_code: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_branch_country: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		originating_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		originator_city: FormControl<string | null | undefined>,

		/** Required */
		originator_company_entry_description: FormControl<string | null | undefined>,

		/** Required */
		originator_country: FormControl<string | null | undefined>,

		/** Required */
		originator_identification: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_postal_code: FormControl<string | null | undefined>,

		/** Required */
		originator_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		originator_street_address: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information: FormControl<string | null | undefined>,

		/** Required */
		payment_related_information2: FormControl<string | null | undefined>,

		/** Required */
		receiver_city: FormControl<string | null | undefined>,

		/** Required */
		receiver_country: FormControl<string | null | undefined>,

		/** Required */
		receiver_identification_number: FormControl<string | null | undefined>,

		/** Required */
		receiver_postal_code: FormControl<string | null | undefined>,

		/** Required */
		receiver_state_or_province: FormControl<string | null | undefined>,

		/** Required */
		receiver_street_address: FormControl<string | null | undefined>,

		/** Required */
		receiving_company_or_individual_name: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_country: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_id_qualifier: FormControl<string | null | undefined>,

		/** Required */
		receiving_depository_financial_institution_name: FormControl<string | null | undefined>,

		/** Required */
		trace_number: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceInbound_international_ach_transferFormGroup() {
		return new FormGroup<TransactionSourceInbound_international_ach_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_country_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_exchange_reference_indicator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			foreign_payment_amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			foreign_trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			international_transaction_type_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_currency_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_branch_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originating_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_company_entry_description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			payment_related_information2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_city: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_identification_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_state_or_province: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_street_address: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_company_or_individual_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_country: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_id_qualifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiving_depository_financial_institution_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			trace_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_real_time_payments_transfer_confirmation {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: string;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: string;

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: string;

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: string;

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: string;
	}
	export interface TransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties {

		/**
		 * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The name the sender of the transfer specified as the recipient of the transfer.
		 * Required
		 */
		creditor_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The account number of the account that sent the transfer.
		 * Required
		 */
		debtor_account_number: FormControl<string | null | undefined>,

		/**
		 * The name provided by the sender of the transfer.
		 * Required
		 */
		debtor_name: FormControl<string | null | undefined>,

		/**
		 * The routing number of the account that sent the transfer.
		 * Required
		 */
		debtor_routing_number: FormControl<string | null | undefined>,

		/**
		 * Additional information included with the transfer.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The Real Time Payments network identification of the transfer
		 * Required
		 */
		transaction_identification: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceInbound_real_time_payments_transfer_confirmationFormGroup() {
		return new FormGroup<TransactionSourceInbound_real_time_payments_transfer_confirmationFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			creditor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			debtor_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			debtor_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_identification: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_wire_drawdown_payment {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;
	}
	export interface TransactionSourceInbound_wire_drawdown_paymentFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceInbound_wire_drawdown_paymentFormGroup() {
		return new FormGroup<TransactionSourceInbound_wire_drawdown_paymentFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_wire_drawdown_payment_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;
	}
	export interface TransactionSourceInbound_wire_drawdown_payment_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceInbound_wire_drawdown_payment_reversalFormGroup() {
		return new FormGroup<TransactionSourceInbound_wire_drawdown_payment_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_wire_reversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: string;

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: string;
	}
	export interface TransactionSourceInbound_wire_reversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceInbound_wire_reversalFormGroup() {
		return new FormGroup<TransactionSourceInbound_wire_reversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			financial_institution_to_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInbound_wire_transfer {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/** Required */
		beneficiary_address_line1: string;

		/** Required */
		beneficiary_address_line2: string;

		/** Required */
		beneficiary_address_line3: string;

		/** Required */
		beneficiary_name: string;

		/** Required */
		beneficiary_reference: string;

		/** Required */
		description: string;

		/** Required */
		input_message_accountability_data: string;

		/** Required */
		originator_address_line1: string;

		/** Required */
		originator_address_line2: string;

		/** Required */
		originator_address_line3: string;

		/** Required */
		originator_name: string;

		/** Required */
		originator_to_beneficiary_information: string;

		/** Required */
		originator_to_beneficiary_information_line1: string;

		/** Required */
		originator_to_beneficiary_information_line2: string;

		/** Required */
		originator_to_beneficiary_information_line3: string;

		/** Required */
		originator_to_beneficiary_information_line4: string;
	}
	export interface TransactionSourceInbound_wire_transferFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_name: FormControl<string | null | undefined>,

		/** Required */
		beneficiary_reference: FormControl<string | null | undefined>,

		/** Required */
		description: FormControl<string | null | undefined>,

		/** Required */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_address_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_name: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line1: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line2: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line3: FormControl<string | null | undefined>,

		/** Required */
		originator_to_beneficiary_information_line4: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceInbound_wire_transferFormGroup() {
		return new FormGroup<TransactionSourceInbound_wire_transferFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_reference: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			originator_to_beneficiary_information_line4: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInterest_payment {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: string;

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: Date;

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: Date;
	}
	export interface TransactionSourceInterest_paymentFormProperties {

		/**
		 * The account on which the interest was accrued.
		 * Required
		 */
		accrued_on_account_id: FormControl<string | null | undefined>,

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The end of the period for which this transaction paid interest.
		 * Required
		 */
		period_end: FormControl<Date | null | undefined>,

		/**
		 * The start of the period for which this transaction paid interest.
		 * Required
		 */
		period_start: FormControl<Date | null | undefined>,
	}
	export function CreateTransactionSourceInterest_paymentFormGroup() {
		return new FormGroup<TransactionSourceInterest_paymentFormProperties>({
			accrued_on_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			period_end: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			period_start: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceInternal_source {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: AccountCurrency;

		/** Required */
		reason: Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason;
	}
	export interface TransactionSourceInternal_sourceFormProperties {

		/**
		 * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/** Required */
		reason: FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>,
	}
	export function CreateTransactionSourceInternal_sourceFormGroup() {
		return new FormGroup<TransactionSourceInternal_sourceFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			reason: new FormControl<Inbound_ach_transfer_simulation_resultTransactionSourceInternal_sourceReason | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceReal_time_payments_transfer_acknowledgement {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: string;

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: string;

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: string;
	}
	export interface TransactionSourceReal_time_payments_transfer_acknowledgementFormProperties {

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		destination_account_number: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		destination_routing_number: FormControl<string | null | undefined>,

		/**
		 * Unstructured information that will show on the recipient's bank statement.
		 * Required
		 */
		remittance_information: FormControl<string | null | undefined>,

		/**
		 * The identifier of the Real Time Payments Transfer that led to this Transaction.
		 * Required
		 */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceReal_time_payments_transfer_acknowledgementFormGroup() {
		return new FormGroup<TransactionSourceReal_time_payments_transfer_acknowledgementFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			destination_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			destination_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			remittance_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceSample_funds {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: string;
	}
	export interface TransactionSourceSample_fundsFormProperties {

		/**
		 * Where the sample funds came from.
		 * Required
		 */
		originator: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceSample_fundsFormGroup() {
		return new FormGroup<TransactionSourceSample_fundsFormProperties>({
			originator: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceWire_drawdown_payment_intention {

		/** Required */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/** Required */
		message_to_recipient: string;

		/** Required */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface TransactionSourceWire_drawdown_payment_intentionFormProperties {

		/** Required */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/** Required */
		message_to_recipient: FormControl<string | null | undefined>,

		/** Required */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceWire_drawdown_payment_intentionFormGroup() {
		return new FormGroup<TransactionSourceWire_drawdown_payment_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceWire_drawdown_payment_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface TransactionSourceWire_drawdown_payment_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceWire_drawdown_payment_rejectionFormGroup() {
		return new FormGroup<TransactionSourceWire_drawdown_payment_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceWire_transfer_intention {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/** Required */
		transfer_id: string;
	}
	export interface TransactionSourceWire_transfer_intentionFormProperties {

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceWire_transfer_intentionFormGroup() {
		return new FormGroup<TransactionSourceWire_transfer_intentionFormProperties>({
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TransactionSourceWire_transfer_rejection {

		/** Required */
		transfer_id: string;
	}
	export interface TransactionSourceWire_transfer_rejectionFormProperties {

		/** Required */
		transfer_id: FormControl<string | null | undefined>,
	}
	export function CreateTransactionSourceWire_transfer_rejectionFormGroup() {
		return new FormGroup<TransactionSourceWire_transfer_rejectionFormProperties>({
			transfer_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of Transaction objects */
	export interface Transaction_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Transaction>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Transaction objects */
	export interface Transaction_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateTransaction_listFormGroup() {
		return new FormGroup<Transaction_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Update_a_card_parameters {

		/** The card's updated billing address. */
		billing_address?: Update_a_card_parametersBilling_address;

		/**
		 * The description you choose to give the card.
		 * Max length: 200
		 * Min length: 1
		 */
		description?: string | null;

		/** The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps. */
		digital_wallet?: Update_a_card_parametersDigital_wallet;

		/** The status to update the Card with. */
		status?: Account_numberStatus | null;
	}
	export interface Update_a_card_parametersFormProperties {

		/**
		 * The description you choose to give the card.
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The status to update the Card with. */
		status: FormControl<Account_numberStatus | null | undefined>,
	}
	export function CreateUpdate_a_card_parametersFormGroup() {
		return new FormGroup<Update_a_card_parametersFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			status: new FormControl<Account_numberStatus | null | undefined>(undefined),
		});

	}

	export interface Update_a_card_parametersBilling_address {

		/**
		 * The city of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: string;

		/**
		 * The first line of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: string;

		/**
		 * The second line of the billing address.
		 * Max length: 200
		 * Min length: 1
		 */
		line2?: string | null;

		/**
		 * The postal code of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		postal_code: string;

		/**
		 * The US state of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: string;
	}
	export interface Update_a_card_parametersBilling_addressFormProperties {

		/**
		 * The city of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		city: FormControl<string | null | undefined>,

		/**
		 * The first line of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		line1: FormControl<string | null | undefined>,

		/**
		 * The second line of the billing address.
		 * Max length: 200
		 * Min length: 1
		 */
		line2: FormControl<string | null | undefined>,

		/**
		 * The postal code of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		postal_code: FormControl<string | null | undefined>,

		/**
		 * The US state of the billing address.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		state: FormControl<string | null | undefined>,
	}
	export function CreateUpdate_a_card_parametersBilling_addressFormGroup() {
		return new FormGroup<Update_a_card_parametersBilling_addressFormProperties>({
			city: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line1: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			line2: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			postal_code: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
			state: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Update_a_card_parametersDigital_wallet {

		/** The card profile assigned to this digital card. Card profiles may also be assigned at the program level. */
		card_profile_id?: string | null;

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode over email.
		 * Max length: 200
		 * Min length: 1
		 */
		email?: string | null;

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Max length: 200
		 * Min length: 1
		 */
		phone?: string | null;
	}
	export interface Update_a_card_parametersDigital_walletFormProperties {

		/** The card profile assigned to this digital card. Card profiles may also be assigned at the program level. */
		card_profile_id: FormControl<string | null | undefined>,

		/**
		 * An email address that can be used to verify the cardholder via one-time passcode over email.
		 * Max length: 200
		 * Min length: 1
		 */
		email: FormControl<string | null | undefined>,

		/**
		 * A phone number that can be used to verify the cardholder via one-time passcode over SMS.
		 * Max length: 200
		 * Min length: 1
		 */
		phone: FormControl<string | null | undefined>,
	}
	export function CreateUpdate_a_card_parametersDigital_walletFormGroup() {
		return new FormGroup<Update_a_card_parametersDigital_walletFormProperties>({
			card_profile_id: new FormControl<string | null | undefined>(undefined),
			email: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			phone: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Update_a_limit_parameters {

		/**
		 * The status to update the limit with.
		 * Required
		 */
		status: Update_a_limit_parametersStatus;
	}
	export interface Update_a_limit_parametersFormProperties {

		/**
		 * The status to update the limit with.
		 * Required
		 */
		status: FormControl<Update_a_limit_parametersStatus | null | undefined>,
	}
	export function CreateUpdate_a_limit_parametersFormGroup() {
		return new FormGroup<Update_a_limit_parametersFormProperties>({
			status: new FormControl<Update_a_limit_parametersStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Update_a_limit_parametersStatus { inactive = 'inactive', active = 'active' }

	export interface Update_an_account_number_parameters {

		/**
		 * The name you choose for the Account Number.
		 * Max length: 200
		 * Min length: 1
		 */
		name?: string | null;

		/** This indicates if transfers can be made to the Account Number. */
		status?: Account_numberStatus | null;
	}
	export interface Update_an_account_number_parametersFormProperties {

		/**
		 * The name you choose for the Account Number.
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,

		/** This indicates if transfers can be made to the Account Number. */
		status: FormControl<Account_numberStatus | null | undefined>,
	}
	export function CreateUpdate_an_account_number_parametersFormGroup() {
		return new FormGroup<Update_an_account_number_parametersFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			status: new FormControl<Account_numberStatus | null | undefined>(undefined),
		});

	}

	export interface Update_an_account_parameters {

		/**
		 * The new name of the Account.
		 * Max length: 200
		 * Min length: 1
		 */
		name?: string | null;
	}
	export interface Update_an_account_parametersFormProperties {

		/**
		 * The new name of the Account.
		 * Max length: 200
		 * Min length: 1
		 */
		name: FormControl<string | null | undefined>,
	}
	export function CreateUpdate_an_account_parametersFormGroup() {
		return new FormGroup<Update_an_account_parametersFormProperties>({
			name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface Update_an_event_subscription_parameters {

		/** The status to update the Event Subscription with. */
		status?: Update_an_event_subscription_parametersStatus | null;
	}
	export interface Update_an_event_subscription_parametersFormProperties {

		/** The status to update the Event Subscription with. */
		status: FormControl<Update_an_event_subscription_parametersStatus | null | undefined>,
	}
	export function CreateUpdate_an_event_subscription_parametersFormGroup() {
		return new FormGroup<Update_an_event_subscription_parametersFormProperties>({
			status: new FormControl<Update_an_event_subscription_parametersStatus | null | undefined>(undefined),
		});

	}

	export enum Update_an_event_subscription_parametersStatus { active = 'active', disabled = 'disabled', deleted = 'deleted' }

	export interface Update_an_external_account_parameters {

		/**
		 * The description you choose to give the external account.
		 * Max length: 200
		 * Min length: 1
		 */
		description?: string | null;

		/** The status of the External Account. */
		status?: External_accountStatus | null;
	}
	export interface Update_an_external_account_parametersFormProperties {

		/**
		 * The description you choose to give the external account.
		 * Max length: 200
		 * Min length: 1
		 */
		description: FormControl<string | null | undefined>,

		/** The status of the External Account. */
		status: FormControl<External_accountStatus | null | undefined>,
	}
	export function CreateUpdate_an_external_account_parametersFormGroup() {
		return new FormGroup<Update_an_external_account_parametersFormProperties>({
			description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			status: new FormControl<External_accountStatus | null | undefined>(undefined),
		});

	}


	/** Wire drawdown requests enable you to request that someone else send you a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more. */
	export interface Wire_drawdown_request {

		/**
		 * The Account Number to which the recipient of this request is being requested to send funds.
		 * Required
		 */
		account_number_id: string;

		/**
		 * The amount being requested in cents.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		 * Required
		 */
		currency: string;

		/**
		 * If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.
		 * Required
		 */
		fulfillment_transaction_id: string;

		/**
		 * The Wire drawdown request identifier.
		 * Required
		 */
		id: string;

		/**
		 * The message the recipient will see as part of the drawdown request.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The drawdown request's recipient's account number.
		 * Required
		 */
		recipient_account_number: string;

		/**
		 * Line 1 of the drawdown request's recipient's address.
		 * Required
		 */
		recipient_address_line1: string;

		/**
		 * Line 2 of the drawdown request's recipient's address.
		 * Required
		 */
		recipient_address_line2: string;

		/**
		 * Line 3 of the drawdown request's recipient's address.
		 * Required
		 */
		recipient_address_line3: string;

		/**
		 * The drawdown request's recipient's name.
		 * Required
		 */
		recipient_name: string;

		/**
		 * The drawdown request's recipient's routing number.
		 * Required
		 */
		recipient_routing_number: string;

		/**
		 * The lifecycle status of the drawdown request.
		 * Required
		 */
		status: Wire_drawdown_requestStatus;

		/**
		 * After the drawdown request is submitted to Fedwire, this will contain supplemental details.
		 * Required
		 */
		submission: Wire_drawdown_requestSubmission;

		/**
		 * A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.
		 * Required
		 */
		type: Wire_drawdown_requestType;
	}

	/** Wire drawdown requests enable you to request that someone else send you a wire. This feature is in beta; reach out to [support@increase.com](mailto:support@increase.com) to learn more. */
	export interface Wire_drawdown_requestFormProperties {

		/**
		 * The Account Number to which the recipient of this request is being requested to send funds.
		 * Required
		 */
		account_number_id: FormControl<string | null | undefined>,

		/**
		 * The amount being requested in cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".
		 * Required
		 */
		currency: FormControl<string | null | undefined>,

		/**
		 * If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.
		 * Required
		 */
		fulfillment_transaction_id: FormControl<string | null | undefined>,

		/**
		 * The Wire drawdown request identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The message the recipient will see as part of the drawdown request.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's recipient's account number.
		 * Required
		 */
		recipient_account_number: FormControl<string | null | undefined>,

		/**
		 * Line 1 of the drawdown request's recipient's address.
		 * Required
		 */
		recipient_address_line1: FormControl<string | null | undefined>,

		/**
		 * Line 2 of the drawdown request's recipient's address.
		 * Required
		 */
		recipient_address_line2: FormControl<string | null | undefined>,

		/**
		 * Line 3 of the drawdown request's recipient's address.
		 * Required
		 */
		recipient_address_line3: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's recipient's name.
		 * Required
		 */
		recipient_name: FormControl<string | null | undefined>,

		/**
		 * The drawdown request's recipient's routing number.
		 * Required
		 */
		recipient_routing_number: FormControl<string | null | undefined>,

		/**
		 * The lifecycle status of the drawdown request.
		 * Required
		 */
		status: FormControl<Wire_drawdown_requestStatus | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.
		 * Required
		 */
		type: FormControl<Wire_drawdown_requestType | null | undefined>,
	}
	export function CreateWire_drawdown_requestFormGroup() {
		return new FormGroup<Wire_drawdown_requestFormProperties>({
			account_number_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			fulfillment_transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipient_routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Wire_drawdown_requestStatus | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Wire_drawdown_requestType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Wire_drawdown_requestStatus { pending_submission = 'pending_submission', pending_response = 'pending_response', fulfilled = 'fulfilled', refused = 'refused' }

	export interface Wire_drawdown_requestSubmission {

		/**
		 * The input message accountability data (IMAD) uniquely identifying the submission with Fedwire.
		 * Required
		 */
		input_message_accountability_data: string;
	}
	export interface Wire_drawdown_requestSubmissionFormProperties {

		/**
		 * The input message accountability data (IMAD) uniquely identifying the submission with Fedwire.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,
	}
	export function CreateWire_drawdown_requestSubmissionFormGroup() {
		return new FormGroup<Wire_drawdown_requestSubmissionFormProperties>({
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Wire_drawdown_requestType { wire_drawdown_request = 'wire_drawdown_request' }


	/** A list of Wire Drawdown Request objects */
	export interface Wire_drawdown_request_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Wire_drawdown_request>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Wire Drawdown Request objects */
	export interface Wire_drawdown_request_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateWire_drawdown_request_listFormGroup() {
		return new FormGroup<Wire_drawdown_request_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Wire transfers move funds between your Increase account and any other account accessible by Fedwire. */
	export interface Wire_transfer {

		/**
		 * The Account to which the transfer belongs.
		 * Required
		 */
		account_id: string;

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: string;

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: number;

		/**
		 * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
		 * Required
		 */
		approval: Wire_transferApproval;

		/**
		 * The beneficiary's address line 1.
		 * Required
		 */
		beneficiary_address_line1: string;

		/**
		 * The beneficiary's address line 2.
		 * Required
		 */
		beneficiary_address_line2: string;

		/**
		 * The beneficiary's address line 3.
		 * Required
		 */
		beneficiary_address_line3: string;

		/**
		 * The beneficiary's name.
		 * Required
		 */
		beneficiary_name: string;

		/**
		 * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
		 * Required
		 */
		cancellation: Wire_transferCancellation;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
		 * Required
		 */
		currency: AccountCurrency;

		/**
		 * The identifier of the External Account the transfer was made to, if any.
		 * Required
		 */
		external_account_id: string;

		/**
		 * The wire transfer's identifier.
		 * Required
		 */
		id: string;

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: string;

		/**
		 * The transfer's network.
		 * Required
		 */
		network: Wire_transferNetwork;

		/**
		 * If your transfer is reversed, this will contain details of the reversal.
		 * Required
		 */
		reversal: Wire_transferReversal;

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: string;

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: Wire_transferStatus;

		/**
		 * After the transfer is submitted to Fedwire, this will contain supplemental details.
		 * Required
		 */
		submission: Wire_transferSubmission;

		/**
		 * The ID for the transaction funding the transfer.
		 * Required
		 */
		transaction_id: string;

		/**
		 * A constant representing the object's type. For this resource it will always be `wire_transfer`.
		 * Required
		 */
		type: Wire_transferType;
	}

	/** Wire transfers move funds between your Increase account and any other account accessible by Fedwire. */
	export interface Wire_transferFormProperties {

		/**
		 * The Account to which the transfer belongs.
		 * Required
		 */
		account_id: FormControl<string | null | undefined>,

		/**
		 * The destination account number.
		 * Required
		 */
		account_number: FormControl<string | null | undefined>,

		/**
		 * The transfer amount in USD cents.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The beneficiary's address line 1.
		 * Required
		 */
		beneficiary_address_line1: FormControl<string | null | undefined>,

		/**
		 * The beneficiary's address line 2.
		 * Required
		 */
		beneficiary_address_line2: FormControl<string | null | undefined>,

		/**
		 * The beneficiary's address line 3.
		 * Required
		 */
		beneficiary_address_line3: FormControl<string | null | undefined>,

		/**
		 * The beneficiary's name.
		 * Required
		 */
		beneficiary_name: FormControl<string | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.
		 * Required
		 */
		currency: FormControl<AccountCurrency | null | undefined>,

		/**
		 * The identifier of the External Account the transfer was made to, if any.
		 * Required
		 */
		external_account_id: FormControl<string | null | undefined>,

		/**
		 * The wire transfer's identifier.
		 * Required
		 */
		id: FormControl<string | null | undefined>,

		/**
		 * The message that will show on the recipient's bank statement.
		 * Required
		 */
		message_to_recipient: FormControl<string | null | undefined>,

		/**
		 * The transfer's network.
		 * Required
		 */
		network: FormControl<Wire_transferNetwork | null | undefined>,

		/**
		 * The American Bankers' Association (ABA) Routing Transit Number (RTN).
		 * Required
		 */
		routing_number: FormControl<string | null | undefined>,

		/**
		 * The lifecycle status of the transfer.
		 * Required
		 */
		status: FormControl<Wire_transferStatus | null | undefined>,

		/**
		 * The ID for the transaction funding the transfer.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,

		/**
		 * A constant representing the object's type. For this resource it will always be `wire_transfer`.
		 * Required
		 */
		type: FormControl<Wire_transferType | null | undefined>,
	}
	export function CreateWire_transferFormGroup() {
		return new FormGroup<Wire_transferFormProperties>({
			account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			account_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line1: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line2: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_address_line3: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			beneficiary_name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			currency: new FormControl<AccountCurrency | null | undefined>(undefined, [Validators.required]),
			external_account_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			message_to_recipient: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			network: new FormControl<Wire_transferNetwork | null | undefined>(undefined, [Validators.required]),
			routing_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			status: new FormControl<Wire_transferStatus | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			type: new FormControl<Wire_transferType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Wire_transferApproval {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: Date;

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: string;
	}
	export interface Wire_transferApprovalFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
		 * Required
		 */
		approved_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was approved by a user in the dashboard, the email address of that user.
		 * Required
		 */
		approved_by: FormControl<string | null | undefined>,
	}
	export function CreateWire_transferApprovalFormGroup() {
		return new FormGroup<Wire_transferApprovalFormProperties>({
			approved_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			approved_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface Wire_transferCancellation {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: Date;

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: string;
	}
	export interface Wire_transferCancellationFormProperties {

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
		 * Required
		 */
		canceled_at: FormControl<Date | null | undefined>,

		/**
		 * If the Transfer was canceled by a user in the dashboard, the email address of that user.
		 * Required
		 */
		canceled_by: FormControl<string | null | undefined>,
	}
	export function CreateWire_transferCancellationFormGroup() {
		return new FormGroup<Wire_transferCancellationFormProperties>({
			canceled_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			canceled_by: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Wire_transferNetwork { wire = 'wire' }

	export interface Wire_transferReversal {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: number;

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: Date;

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: string;

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: string;

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: string;

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: string;

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: Date;

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: string;

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: string;

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: string;

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: string;

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: string;
	}
	export interface Wire_transferReversalFormProperties {

		/**
		 * The amount that was reversed.
		 * Required
		 */
		amount: FormControl<number | null | undefined>,

		/**
		 * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
		 * Required
		 */
		created_at: FormControl<Date | null | undefined>,

		/**
		 * The description on the reversal message from Fedwire.
		 * Required
		 */
		description: FormControl<string | null | undefined>,

		/**
		 * Additional financial institution information included in the wire reversal.
		 * Required
		 */
		financial_institution_to_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire reversal.
		 * Required
		 */
		input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number.
		 * Required
		 */
		input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier.
		 * Required
		 */
		input_source: FormControl<string | null | undefined>,

		/**
		 * The Fedwire cycle date for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_cycle_date: FormControl<Date | null | undefined>,

		/**
		 * The Fedwire transaction identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * The Fedwire sequence number for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_sequence_number: FormControl<string | null | undefined>,

		/**
		 * The Fedwire input source identifier for the wire transfer that was reversed.
		 * Required
		 */
		previous_message_input_source: FormControl<string | null | undefined>,

		/**
		 * Information included in the wire reversal for the receiving financial institution.
		 * Required
		 */
		receiver_financial_institution_information: FormControl<string | null | undefined>,

		/**
		 * The ID for the Transaction associated with the transfer reversal.
		 * Required
		 */
		transaction_id: FormControl<string | null | undefined>,
	}
	export function CreateWire_transferReversalFormGroup() {
		return new FormGroup<Wire_transferReversalFormProperties>({
			amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			created_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			financial_institution_to_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_cycle_date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			previous_message_input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_sequence_number: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			previous_message_input_source: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			receiver_financial_institution_information: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transaction_id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Wire_transferStatus { canceled = 'canceled', requires_attention = 'requires_attention', pending_approval = 'pending_approval', rejected = 'rejected', reversed = 'reversed', complete = 'complete', pending_creating = 'pending_creating' }

	export interface Wire_transferSubmission {

		/**
		 * The accountability data for the submission.
		 * Required
		 */
		input_message_accountability_data: string;

		/**
		 * When this wire transfer was submitted to Fedwire.
		 * Required
		 */
		submitted_at: Date;
	}
	export interface Wire_transferSubmissionFormProperties {

		/**
		 * The accountability data for the submission.
		 * Required
		 */
		input_message_accountability_data: FormControl<string | null | undefined>,

		/**
		 * When this wire transfer was submitted to Fedwire.
		 * Required
		 */
		submitted_at: FormControl<Date | null | undefined>,
	}
	export function CreateWire_transferSubmissionFormGroup() {
		return new FormGroup<Wire_transferSubmissionFormProperties>({
			input_message_accountability_data: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			submitted_at: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum Wire_transferType { wire_transfer = 'wire_transfer' }


	/** A list of Wire Transfer objects */
	export interface Wire_transfer_list {

		/**
		 * The contents of the list.
		 * Required
		 */
		data: Array<Wire_transfer>;

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: string;
	}

	/** A list of Wire Transfer objects */
	export interface Wire_transfer_listFormProperties {

		/**
		 * A pointer to a place in the list.
		 * Required
		 */
		next_cursor: FormControl<string | null | undefined>,
	}
	export function CreateWire_transfer_listFormGroup() {
		return new FormGroup<Wire_transfer_listFormProperties>({
			next_cursor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * List Account Numbers
		 * Get account_numbers
		 * @return {Account_number_list} Account Number List
		 */
		List_account_numbers(cursor: string | null | undefined, limit: number | null | undefined, status: Account_numberStatus | null | undefined, account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Account_number_list> {
			return this.http.get<Account_number_list>(this.baseUri + 'account_numbers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&status=' + status + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create an Account Number
		 * Post account_numbers
		 * @return {Account_number} Account Number
		 */
		Create_an_account_number(requestBody: Create_an_account_number_parameters): Observable<Account_number> {
			return this.http.post<Account_number>(this.baseUri + 'account_numbers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Account Number
		 * Get account_numbers/{account_number_id}
		 * @return {Account_number} Account Number
		 */
		Retrieve_an_account_number(account_number_id: string): Observable<Account_number> {
			return this.http.get<Account_number>(this.baseUri + 'account_numbers/' + (account_number_id == null ? '' : encodeURIComponent(account_number_id)), {});
		}

		/**
		 * Update an Account Number
		 * Patch account_numbers/{account_number_id}
		 * @return {Account_number} Account Number
		 */
		Update_an_account_number(account_number_id: string, requestBody: Update_an_account_number_parameters): Observable<Account_number> {
			return this.http.patch<Account_number>(this.baseUri + 'account_numbers/' + (account_number_id == null ? '' : encodeURIComponent(account_number_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Account Statements
		 * Get account_statements
		 * @return {Account_statement_list} Account Statement List
		 */
		List_account_statements(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, statement_period_start_after: Date | null | undefined, statement_period_start_before: Date | null | undefined, statement_period_start_on_or_after: Date | null | undefined, statement_period_start_on_or_before: Date | null | undefined): Observable<Account_statement_list> {
			return this.http.get<Account_statement_list>(this.baseUri + 'account_statements?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&statement_period_start_after=' + statement_period_start_after?.toISOString() + '&statement_period_start_before=' + statement_period_start_before?.toISOString() + '&statement_period_start_on_or_after=' + statement_period_start_on_or_after?.toISOString() + '&statement_period_start_on_or_before=' + statement_period_start_on_or_before?.toISOString(), {});
		}

		/**
		 * Retrieve an Account Statement
		 * Get account_statements/{account_statement_id}
		 * @return {Account_statement} Account Statement
		 */
		Retrieve_an_account_statement(account_statement_id: string): Observable<Account_statement> {
			return this.http.get<Account_statement>(this.baseUri + 'account_statements/' + (account_statement_id == null ? '' : encodeURIComponent(account_statement_id)), {});
		}

		/**
		 * List Account Transfers
		 * Get account_transfers
		 * @return {Account_transfer_list} Account Transfer List
		 */
		List_account_transfers(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Account_transfer_list> {
			return this.http.get<Account_transfer_list>(this.baseUri + 'account_transfers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create an Account Transfer
		 * Post account_transfers
		 * @return {Account_transfer} Account Transfer
		 */
		Create_an_account_transfer(requestBody: Create_an_account_transfer_parameters): Observable<Account_transfer> {
			return this.http.post<Account_transfer>(this.baseUri + 'account_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Account Transfer
		 * Get account_transfers/{account_transfer_id}
		 * @return {Account_transfer} Account Transfer
		 */
		Retrieve_an_account_transfer(account_transfer_id: string): Observable<Account_transfer> {
			return this.http.get<Account_transfer>(this.baseUri + 'account_transfers/' + (account_transfer_id == null ? '' : encodeURIComponent(account_transfer_id)), {});
		}

		/**
		 * Approve an Account Transfer
		 * Post account_transfers/{account_transfer_id}/approve
		 * @return {Account_transfer} Account Transfer
		 */
		Approve_an_account_transfer(account_transfer_id: string): Observable<Account_transfer> {
			return this.http.post<Account_transfer>(this.baseUri + 'account_transfers/' + (account_transfer_id == null ? '' : encodeURIComponent(account_transfer_id)) + '/approve', null, {});
		}

		/**
		 * Cancel an Account Transfer
		 * Post account_transfers/{account_transfer_id}/cancel
		 * @return {Account_transfer} Account Transfer
		 */
		Cancel_an_account_transfer(account_transfer_id: string): Observable<Account_transfer> {
			return this.http.post<Account_transfer>(this.baseUri + 'account_transfers/' + (account_transfer_id == null ? '' : encodeURIComponent(account_transfer_id)) + '/cancel', null, {});
		}

		/**
		 * List Accounts
		 * Get accounts
		 * @return {Account_list} Account List
		 */
		List_accounts(cursor: string | null | undefined, limit: number | null | undefined, entity_id: string | null | undefined, status: AccountStatus | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Account_list> {
			return this.http.get<Account_list>(this.baseUri + 'accounts?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&entity_id=' + (entity_id == null ? '' : encodeURIComponent(entity_id)) + '&status=' + status + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create an Account
		 * Post accounts
		 * @return {Account} Account
		 */
		Create_an_account(requestBody: Create_an_account_parameters): Observable<Account> {
			return this.http.post<Account>(this.baseUri + 'accounts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Account
		 * Get accounts/{account_id}
		 * @return {Account} Account
		 */
		Retrieve_an_account(account_id: string): Observable<Account> {
			return this.http.get<Account>(this.baseUri + 'accounts/' + (account_id == null ? '' : encodeURIComponent(account_id)), {});
		}

		/**
		 * Update an Account
		 * Patch accounts/{account_id}
		 * @return {Account} Account
		 */
		Update_an_account(account_id: string, requestBody: Update_an_account_parameters): Observable<Account> {
			return this.http.patch<Account>(this.baseUri + 'accounts/' + (account_id == null ? '' : encodeURIComponent(account_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Close an Account
		 * Post accounts/{account_id}/close
		 * @return {Account} Account
		 */
		Close_an_account(account_id: string): Observable<Account> {
			return this.http.post<Account>(this.baseUri + 'accounts/' + (account_id == null ? '' : encodeURIComponent(account_id)) + '/close', null, {});
		}

		/**
		 * List ACH Prenotifications
		 * Get ach_prenotifications
		 * @return {Ach_prenotification_list} ACH Prenotification List
		 */
		List_ach_prenotifications(cursor: string | null | undefined, limit: number | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Ach_prenotification_list> {
			return this.http.get<Ach_prenotification_list>(this.baseUri + 'ach_prenotifications?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create an ACH Prenotification
		 * Post ach_prenotifications
		 * @return {Ach_prenotification} ACH Prenotification
		 */
		Create_an_ach_prenotification(requestBody: Create_an_ach_prenotification_parameters): Observable<Ach_prenotification> {
			return this.http.post<Ach_prenotification>(this.baseUri + 'ach_prenotifications', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an ACH Prenotification
		 * Get ach_prenotifications/{ach_prenotification_id}
		 * @return {Ach_prenotification} ACH Prenotification
		 */
		Retrieve_an_ach_prenotification(ach_prenotification_id: string): Observable<Ach_prenotification> {
			return this.http.get<Ach_prenotification>(this.baseUri + 'ach_prenotifications/' + (ach_prenotification_id == null ? '' : encodeURIComponent(ach_prenotification_id)), {});
		}

		/**
		 * List ACH Transfers
		 * Get ach_transfers
		 * @return {Ach_transfer_list} ACH Transfer List
		 */
		List_ach_transfers(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, external_account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Ach_transfer_list> {
			return this.http.get<Ach_transfer_list>(this.baseUri + 'ach_transfers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&external_account_id=' + (external_account_id == null ? '' : encodeURIComponent(external_account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create an ACH Transfer
		 * Post ach_transfers
		 * @return {Ach_transfer} ACH Transfer
		 */
		Create_an_ach_transfer(requestBody: Create_an_ach_transfer_parameters): Observable<Ach_transfer> {
			return this.http.post<Ach_transfer>(this.baseUri + 'ach_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an ACH Transfer
		 * Get ach_transfers/{ach_transfer_id}
		 * @return {Ach_transfer} ACH Transfer
		 */
		Retrieve_an_ach_transfer(ach_transfer_id: string): Observable<Ach_transfer> {
			return this.http.get<Ach_transfer>(this.baseUri + 'ach_transfers/' + (ach_transfer_id == null ? '' : encodeURIComponent(ach_transfer_id)), {});
		}

		/**
		 * Approve an ACH Transfer
		 * Approves an ACH Transfer in a pending_approval state.
		 * Post ach_transfers/{ach_transfer_id}/approve
		 * @return {Ach_transfer} ACH Transfer
		 */
		Approve_an_ach_transfer(ach_transfer_id: string): Observable<Ach_transfer> {
			return this.http.post<Ach_transfer>(this.baseUri + 'ach_transfers/' + (ach_transfer_id == null ? '' : encodeURIComponent(ach_transfer_id)) + '/approve', null, {});
		}

		/**
		 * Cancel a pending ACH Transfer
		 * Cancels an ACH Transfer in a pending_approval state.
		 * Post ach_transfers/{ach_transfer_id}/cancel
		 * @return {Ach_transfer} ACH Transfer
		 */
		Cancel_a_pending_ach_transfer(ach_transfer_id: string): Observable<Ach_transfer> {
			return this.http.post<Ach_transfer>(this.baseUri + 'ach_transfers/' + (ach_transfer_id == null ? '' : encodeURIComponent(ach_transfer_id)) + '/cancel', null, {});
		}

		/**
		 * Look up the balance for an Account
		 * Post balance_lookups
		 * @return {Balance_lookup} Balance Lookup
		 */
		Look_up_the_balance_for_an_account(requestBody: Look_up_the_balance_for_an_account_parameters): Observable<Balance_lookup> {
			return this.http.post<Balance_lookup>(this.baseUri + 'balance_lookups', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Bookkeeping Accounts
		 * Get bookkeeping_accounts
		 * @return {Bookkeeping_account_list} Bookkeeping Account List
		 */
		List_bookkeeping_accounts(cursor: string | null | undefined, limit: number | null | undefined): Observable<Bookkeeping_account_list> {
			return this.http.get<Bookkeeping_account_list>(this.baseUri + 'bookkeeping_accounts?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Create a Bookkeeping Account
		 * Post bookkeeping_accounts
		 * @return {Bookkeeping_account} Bookkeeping Account
		 */
		Create_a_bookkeeping_account(requestBody: Create_a_bookkeeping_account_parameters): Observable<Bookkeeping_account> {
			return this.http.post<Bookkeeping_account>(this.baseUri + 'bookkeeping_accounts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Bookkeeping Entries
		 * Get bookkeeping_entries
		 * @return {Bookkeeping_entry_list} Bookkeeping Entry List
		 */
		List_bookkeeping_entries(cursor: string | null | undefined, limit: number | null | undefined): Observable<Bookkeeping_entry_list> {
			return this.http.get<Bookkeeping_entry_list>(this.baseUri + 'bookkeeping_entries?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Create a Bookkeeping Entry Set
		 * Post bookkeeping_entry_sets
		 * @return {Bookkeeping_entry_set} Bookkeeping Entry Set
		 */
		Create_a_bookkeeping_entry_set(requestBody: Create_a_bookkeeping_entry_set_parameters): Observable<Bookkeeping_entry_set> {
			return this.http.post<Bookkeeping_entry_set>(this.baseUri + 'bookkeeping_entry_sets', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Card Disputes
		 * Get card_disputes
		 * @return {Card_dispute_list} Card Dispute List
		 */
		List_card_disputes(cursor: string | null | undefined, limit: number | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined, status_in: Array<Card_disputeStatus> | null | undefined): Observable<Card_dispute_list> {
			return this.http.get<Card_dispute_list>(this.baseUri + 'card_disputes?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString() + '&' + status_in?.map(z => `status.in=${z}`).join('&'), {});
		}

		/**
		 * Create a Card Dispute
		 * Post card_disputes
		 * @return {Card_dispute} Card Dispute
		 */
		Create_a_card_dispute(requestBody: Create_a_card_dispute_parameters): Observable<Card_dispute> {
			return this.http.post<Card_dispute>(this.baseUri + 'card_disputes', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Card Dispute
		 * Get card_disputes/{card_dispute_id}
		 * @return {Card_dispute} Card Dispute
		 */
		Retrieve_a_card_dispute(card_dispute_id: string): Observable<Card_dispute> {
			return this.http.get<Card_dispute>(this.baseUri + 'card_disputes/' + (card_dispute_id == null ? '' : encodeURIComponent(card_dispute_id)), {});
		}

		/**
		 * List Card Profiles
		 * Get card_profiles
		 * @return {Card_profile_list} Card Profile List
		 */
		List_card_profiles(cursor: string | null | undefined, limit: number | null | undefined, status_in: Array<Card_profileStatus> | null | undefined): Observable<Card_profile_list> {
			return this.http.get<Card_profile_list>(this.baseUri + 'card_profiles?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&' + status_in?.map(z => `status.in=${z}`).join('&'), {});
		}

		/**
		 * Create a Card Profile
		 * Post card_profiles
		 * @return {Card_profile} Card Profile
		 */
		Create_a_card_profile(requestBody: Create_a_card_profile_parameters): Observable<Card_profile> {
			return this.http.post<Card_profile>(this.baseUri + 'card_profiles', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Card Profile
		 * Get card_profiles/{card_profile_id}
		 * @return {Card_profile} Card Profile
		 */
		Retrieve_a_card_profile(card_profile_id: string): Observable<Card_profile> {
			return this.http.get<Card_profile>(this.baseUri + 'card_profiles/' + (card_profile_id == null ? '' : encodeURIComponent(card_profile_id)), {});
		}

		/**
		 * List Cards
		 * Get cards
		 * @return {Card_list} Card List
		 */
		List_cards(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Card_list> {
			return this.http.get<Card_list>(this.baseUri + 'cards?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create a Card
		 * Post cards
		 * @return {Card} Card
		 */
		Create_a_card(requestBody: Create_a_card_parameters): Observable<Card> {
			return this.http.post<Card>(this.baseUri + 'cards', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Card
		 * Get cards/{card_id}
		 * @return {Card} Card
		 */
		Retrieve_a_card(card_id: string): Observable<Card> {
			return this.http.get<Card>(this.baseUri + 'cards/' + (card_id == null ? '' : encodeURIComponent(card_id)), {});
		}

		/**
		 * Update a Card
		 * Patch cards/{card_id}
		 * @return {Card} Card
		 */
		Update_a_card(card_id: string, requestBody: Update_a_card_parameters): Observable<Card> {
			return this.http.patch<Card>(this.baseUri + 'cards/' + (card_id == null ? '' : encodeURIComponent(card_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve sensitive details for a Card
		 * Get cards/{card_id}/details
		 * @return {Card_details} Card Details
		 */
		Retrieve_sensitive_details_for_a_card(card_id: string): Observable<Card_details> {
			return this.http.get<Card_details>(this.baseUri + 'cards/' + (card_id == null ? '' : encodeURIComponent(card_id)) + '/details', {});
		}

		/**
		 * List Check Deposits
		 * Get check_deposits
		 * @return {Check_deposit_list} Check Deposit List
		 */
		List_check_deposits(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Check_deposit_list> {
			return this.http.get<Check_deposit_list>(this.baseUri + 'check_deposits?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create a Check Deposit
		 * Post check_deposits
		 * @return {Check_deposit} Check Deposit
		 */
		Create_a_check_deposit(requestBody: Create_a_check_deposit_parameters): Observable<Check_deposit> {
			return this.http.post<Check_deposit>(this.baseUri + 'check_deposits', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Check Deposit
		 * Get check_deposits/{check_deposit_id}
		 * @return {Check_deposit} Check Deposit
		 */
		Retrieve_a_check_deposit(check_deposit_id: string): Observable<Check_deposit> {
			return this.http.get<Check_deposit>(this.baseUri + 'check_deposits/' + (check_deposit_id == null ? '' : encodeURIComponent(check_deposit_id)), {});
		}

		/**
		 * List Check Transfers
		 * Get check_transfers
		 * @return {Check_transfer_list} Check Transfer List
		 */
		List_check_transfers(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Check_transfer_list> {
			return this.http.get<Check_transfer_list>(this.baseUri + 'check_transfers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create a Check Transfer
		 * Post check_transfers
		 * @return {Check_transfer} Check Transfer
		 */
		Create_a_check_transfer(requestBody: Create_a_check_transfer_parameters): Observable<Check_transfer> {
			return this.http.post<Check_transfer>(this.baseUri + 'check_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Check Transfer
		 * Get check_transfers/{check_transfer_id}
		 * @return {Check_transfer} Check Transfer
		 */
		Retrieve_a_check_transfer(check_transfer_id: string): Observable<Check_transfer> {
			return this.http.get<Check_transfer>(this.baseUri + 'check_transfers/' + (check_transfer_id == null ? '' : encodeURIComponent(check_transfer_id)), {});
		}

		/**
		 * Approve a Check Transfer
		 * Post check_transfers/{check_transfer_id}/approve
		 * @return {Check_transfer} Check Transfer
		 */
		Approve_a_check_transfer(check_transfer_id: string): Observable<Check_transfer> {
			return this.http.post<Check_transfer>(this.baseUri + 'check_transfers/' + (check_transfer_id == null ? '' : encodeURIComponent(check_transfer_id)) + '/approve', null, {});
		}

		/**
		 * Cancel a pending Check Transfer
		 * Post check_transfers/{check_transfer_id}/cancel
		 * @return {Check_transfer} Check Transfer
		 */
		Cancel_a_pending_check_transfer(check_transfer_id: string): Observable<Check_transfer> {
			return this.http.post<Check_transfer>(this.baseUri + 'check_transfers/' + (check_transfer_id == null ? '' : encodeURIComponent(check_transfer_id)) + '/cancel', null, {});
		}

		/**
		 * Request a stop payment on a Check Transfer
		 * Post check_transfers/{check_transfer_id}/stop_payment
		 * @return {Check_transfer} Check Transfer
		 */
		Request_a_stop_payment_on_a_check_transfer(check_transfer_id: string): Observable<Check_transfer> {
			return this.http.post<Check_transfer>(this.baseUri + 'check_transfers/' + (check_transfer_id == null ? '' : encodeURIComponent(check_transfer_id)) + '/stop_payment', null, {});
		}

		/**
		 * List Declined Transactions
		 * Get declined_transactions
		 * @return {Declined_transaction_list} Declined Transaction List
		 */
		List_declined_transactions(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined, route_id: string | null | undefined): Observable<Declined_transaction_list> {
			return this.http.get<Declined_transaction_list>(this.baseUri + 'declined_transactions?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString() + '&route_id=' + (route_id == null ? '' : encodeURIComponent(route_id)), {});
		}

		/**
		 * Retrieve a Declined Transaction
		 * Get declined_transactions/{declined_transaction_id}
		 * @return {Declined_transaction} Declined Transaction
		 */
		Retrieve_a_declined_transaction(declined_transaction_id: string): Observable<Declined_transaction> {
			return this.http.get<Declined_transaction>(this.baseUri + 'declined_transactions/' + (declined_transaction_id == null ? '' : encodeURIComponent(declined_transaction_id)), {});
		}

		/**
		 * List Digital Wallet Tokens
		 * Get digital_wallet_tokens
		 * @return {Digital_wallet_token_list} Digital Wallet Token List
		 */
		List_digital_wallet_tokens(cursor: string | null | undefined, limit: number | null | undefined, card_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Digital_wallet_token_list> {
			return this.http.get<Digital_wallet_token_list>(this.baseUri + 'digital_wallet_tokens?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&card_id=' + (card_id == null ? '' : encodeURIComponent(card_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Retrieve a Digital Wallet Token
		 * Get digital_wallet_tokens/{digital_wallet_token_id}
		 * @return {Digital_wallet_token} Digital Wallet Token
		 */
		Retrieve_a_digital_wallet_token(digital_wallet_token_id: string): Observable<Digital_wallet_token> {
			return this.http.get<Digital_wallet_token>(this.baseUri + 'digital_wallet_tokens/' + (digital_wallet_token_id == null ? '' : encodeURIComponent(digital_wallet_token_id)), {});
		}

		/**
		 * List Documents
		 * Get documents
		 * @return {Document_list} Document List
		 */
		List_documents(cursor: string | null | undefined, limit: number | null | undefined, entity_id: string | null | undefined, category_in: Array<DocumentCategory> | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Document_list> {
			return this.http.get<Document_list>(this.baseUri + 'documents?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&entity_id=' + (entity_id == null ? '' : encodeURIComponent(entity_id)) + '&' + category_in?.map(z => `category.in=${z}`).join('&') + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Retrieve a Document
		 * Get documents/{document_id}
		 * @return {Document} Document
		 */
		Retrieve_a_document(document_id: string): Observable<Document> {
			return this.http.get<Document>(this.baseUri + 'documents/' + (document_id == null ? '' : encodeURIComponent(document_id)), {});
		}

		/**
		 * List Entities
		 * Get entities
		 * @return {Entity_list} Entity List
		 */
		List_entities(cursor: string | null | undefined, limit: number | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Entity_list> {
			return this.http.get<Entity_list>(this.baseUri + 'entities?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create an Entity
		 * Post entities
		 * @return {Entity} Entity
		 */
		Create_an_entity(requestBody: Create_an_entity_parameters): Observable<Entity> {
			return this.http.post<Entity>(this.baseUri + 'entities', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Entity
		 * Get entities/{entity_id}
		 * @return {Entity} Entity
		 */
		Retrieve_an_entity(entity_id: string): Observable<Entity> {
			return this.http.get<Entity>(this.baseUri + 'entities/' + (entity_id == null ? '' : encodeURIComponent(entity_id)), {});
		}

		/**
		 * Create a supplemental document for an Entity
		 * Post entities/{entity_id}/supplemental_documents
		 * @return {Entity} Entity
		 */
		Create_a_supplemental_document_for_an_entity(entity_id: string, requestBody: Create_a_supplemental_document_for_an_entity_parameters): Observable<Entity> {
			return this.http.post<Entity>(this.baseUri + 'entities/' + (entity_id == null ? '' : encodeURIComponent(entity_id)) + '/supplemental_documents', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Event Subscriptions
		 * Get event_subscriptions
		 * @return {Event_subscription_list} Event Subscription List
		 */
		List_event_subscriptions(cursor: string | null | undefined, limit: number | null | undefined): Observable<Event_subscription_list> {
			return this.http.get<Event_subscription_list>(this.baseUri + 'event_subscriptions?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Create an Event Subscription
		 * Post event_subscriptions
		 * @return {Event_subscription} Event Subscription
		 */
		Create_an_event_subscription(requestBody: Create_an_event_subscription_parameters): Observable<Event_subscription> {
			return this.http.post<Event_subscription>(this.baseUri + 'event_subscriptions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Event Subscription
		 * Get event_subscriptions/{event_subscription_id}
		 * @return {Event_subscription} Event Subscription
		 */
		Retrieve_an_event_subscription(event_subscription_id: string): Observable<Event_subscription> {
			return this.http.get<Event_subscription>(this.baseUri + 'event_subscriptions/' + (event_subscription_id == null ? '' : encodeURIComponent(event_subscription_id)), {});
		}

		/**
		 * Update an Event Subscription
		 * Patch event_subscriptions/{event_subscription_id}
		 * @return {Event_subscription} Event Subscription
		 */
		Update_an_event_subscription(event_subscription_id: string, requestBody: Update_an_event_subscription_parameters): Observable<Event_subscription> {
			return this.http.patch<Event_subscription>(this.baseUri + 'event_subscriptions/' + (event_subscription_id == null ? '' : encodeURIComponent(event_subscription_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Events
		 * Get events
		 * @return {Event_list} Event List
		 */
		List_events(cursor: string | null | undefined, limit: number | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined, category_in: Array<Create_an_event_subscription_parametersSelected_event_category> | null | undefined, associated_object_id: string | null | undefined): Observable<Event_list> {
			return this.http.get<Event_list>(this.baseUri + 'events?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString() + '&' + category_in?.map(z => `category.in=${z}`).join('&') + '&associated_object_id=' + (associated_object_id == null ? '' : encodeURIComponent(associated_object_id)), {});
		}

		/**
		 * Retrieve an Event
		 * Get events/{event_id}
		 * @return {Event} Event
		 */
		Retrieve_an_event(event_id: string): Observable<Event> {
			return this.http.get<Event>(this.baseUri + 'events/' + (event_id == null ? '' : encodeURIComponent(event_id)), {});
		}

		/**
		 * List Exports
		 * Get exports
		 * @return {Export_list} Export List
		 */
		List_exports(cursor: string | null | undefined, limit: number | null | undefined): Observable<Export_list> {
			return this.http.get<Export_list>(this.baseUri + 'exports?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Create an Export
		 * Post exports
		 * @return {export_} Export
		 */
		Create_an_export(requestBody: Create_an_export_parameters): Observable<export_> {
			return this.http.post<export_>(this.baseUri + 'exports', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Export
		 * Get exports/{export_id}
		 * @return {export_} Export
		 */
		Retrieve_an_export(export_id: string): Observable<export_> {
			return this.http.get<export_>(this.baseUri + 'exports/' + (export_id == null ? '' : encodeURIComponent(export_id)), {});
		}

		/**
		 * List External Accounts
		 * Get external_accounts
		 * @return {External_account_list} External Account List
		 */
		List_external_accounts(cursor: string | null | undefined, limit: number | null | undefined, status_in: Array<External_accountStatus> | null | undefined): Observable<External_account_list> {
			return this.http.get<External_account_list>(this.baseUri + 'external_accounts?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&' + status_in?.map(z => `status.in=${z}`).join('&'), {});
		}

		/**
		 * Create an External Account
		 * Post external_accounts
		 * @return {External_account} External Account
		 */
		Create_an_external_account(requestBody: Create_an_external_account_parameters): Observable<External_account> {
			return this.http.post<External_account>(this.baseUri + 'external_accounts', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an External Account
		 * Get external_accounts/{external_account_id}
		 * @return {External_account} External Account
		 */
		Retrieve_an_external_account(external_account_id: string): Observable<External_account> {
			return this.http.get<External_account>(this.baseUri + 'external_accounts/' + (external_account_id == null ? '' : encodeURIComponent(external_account_id)), {});
		}

		/**
		 * Update an External Account
		 * Patch external_accounts/{external_account_id}
		 * @return {External_account} External Account
		 */
		Update_an_external_account(external_account_id: string, requestBody: Update_an_external_account_parameters): Observable<External_account> {
			return this.http.patch<External_account>(this.baseUri + 'external_accounts/' + (external_account_id == null ? '' : encodeURIComponent(external_account_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Files
		 * Get files
		 * @return {File_list} File List
		 */
		List_files(cursor: string | null | undefined, limit: number | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined, purpose_in: Array<FilePurpose> | null | undefined): Observable<File_list> {
			return this.http.get<File_list>(this.baseUri + 'files?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString() + '&' + purpose_in?.map(z => `purpose.in=${z}`).join('&'), {});
		}

		/**
		 * Retrieve a File
		 * Get files/{file_id}
		 * @return {File} File
		 */
		Retrieve_a_file(file_id: string): Observable<File> {
			return this.http.get<File>(this.baseUri + 'files/' + (file_id == null ? '' : encodeURIComponent(file_id)), {});
		}

		/**
		 * Retrieve Group details
		 * Returns details for the currently authenticated Group.
		 * Get groups/current
		 * @return {Group} Group
		 */
		Retrieve_group_details(): Observable<Group> {
			return this.http.get<Group>(this.baseUri + 'groups/current', {});
		}

		/**
		 * List Inbound ACH Transfer Returns
		 * Get inbound_ach_transfer_returns
		 * @return {Inbound_ach_transfer_return_list} Inbound ACH Transfer Return List
		 */
		List_inbound_ach_transfer_returns(cursor: string | null | undefined, limit: number | null | undefined): Observable<Inbound_ach_transfer_return_list> {
			return this.http.get<Inbound_ach_transfer_return_list>(this.baseUri + 'inbound_ach_transfer_returns?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Create an ACH Return
		 * Post inbound_ach_transfer_returns
		 * @return {Inbound_ach_transfer_return} Inbound ACH Transfer Return
		 */
		Create_an_ach_return(requestBody: Create_an_ach_return_parameters): Observable<Inbound_ach_transfer_return> {
			return this.http.post<Inbound_ach_transfer_return>(this.baseUri + 'inbound_ach_transfer_returns', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve an Inbound ACH Transfer Return
		 * Get inbound_ach_transfer_returns/{inbound_ach_transfer_return_id}
		 * @return {Inbound_ach_transfer_return} Inbound ACH Transfer Return
		 */
		Retrieve_an_inbound_ach_transfer_return(inbound_ach_transfer_return_id: string): Observable<Inbound_ach_transfer_return> {
			return this.http.get<Inbound_ach_transfer_return>(this.baseUri + 'inbound_ach_transfer_returns/' + (inbound_ach_transfer_return_id == null ? '' : encodeURIComponent(inbound_ach_transfer_return_id)), {});
		}

		/**
		 * List Inbound Wire Drawdown Requests
		 * Get inbound_wire_drawdown_requests
		 * @return {Inbound_wire_drawdown_request_list} Inbound Wire Drawdown Request List
		 */
		List_inbound_wire_drawdown_requests(cursor: string | null | undefined, limit: number | null | undefined): Observable<Inbound_wire_drawdown_request_list> {
			return this.http.get<Inbound_wire_drawdown_request_list>(this.baseUri + 'inbound_wire_drawdown_requests?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Retrieve an Inbound Wire Drawdown Request
		 * Get inbound_wire_drawdown_requests/{inbound_wire_drawdown_request_id}
		 * @return {Inbound_wire_drawdown_request} Inbound Wire Drawdown Request
		 */
		Retrieve_an_inbound_wire_drawdown_request(inbound_wire_drawdown_request_id: string): Observable<Inbound_wire_drawdown_request> {
			return this.http.get<Inbound_wire_drawdown_request>(this.baseUri + 'inbound_wire_drawdown_requests/' + (inbound_wire_drawdown_request_id == null ? '' : encodeURIComponent(inbound_wire_drawdown_request_id)), {});
		}

		/**
		 * List Limits
		 * Get limits
		 * @return {Limit_list} Limit List
		 */
		List_limits(cursor: string | null | undefined, limit: number | null | undefined, model_id: string | null | undefined, status: string | null | undefined): Observable<Limit_list> {
			return this.http.get<Limit_list>(this.baseUri + 'limits?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&model_id=' + (model_id == null ? '' : encodeURIComponent(model_id)) + '&status=' + (status == null ? '' : encodeURIComponent(status)), {});
		}

		/**
		 * Create a Limit
		 * Post limits
		 * @return {Limit} Limit
		 */
		Create_a_limit(requestBody: Create_a_limit_parameters): Observable<Limit> {
			return this.http.post<Limit>(this.baseUri + 'limits', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Limit
		 * Get limits/{limit_id}
		 * @return {Limit} Limit
		 */
		Retrieve_a_limit(limit_id: string): Observable<Limit> {
			return this.http.get<Limit>(this.baseUri + 'limits/' + (limit_id == null ? '' : encodeURIComponent(limit_id)), {});
		}

		/**
		 * Update a Limit
		 * Patch limits/{limit_id}
		 * @return {Limit} Limit
		 */
		Update_a_limit(limit_id: string, requestBody: Update_a_limit_parameters): Observable<Limit> {
			return this.http.patch<Limit>(this.baseUri + 'limits/' + (limit_id == null ? '' : encodeURIComponent(limit_id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List OAuth Connections
		 * Get oauth_connections
		 * @return {Oauth_connection_list} OAuth Connection List
		 */
		List_oauth_connections(cursor: string | null | undefined, limit: number | null | undefined): Observable<Oauth_connection_list> {
			return this.http.get<Oauth_connection_list>(this.baseUri + 'oauth_connections?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Retrieve an OAuth Connection
		 * Get oauth_connections/{oauth_connection_id}
		 * @return {Oauth_connection} OAuth Connection
		 */
		Retrieve_an_oauth_connection(oauth_connection_id: string): Observable<Oauth_connection> {
			return this.http.get<Oauth_connection>(this.baseUri + 'oauth_connections/' + (oauth_connection_id == null ? '' : encodeURIComponent(oauth_connection_id)), {});
		}

		/**
		 * List Pending Transactions
		 * Get pending_transactions
		 * @return {Pending_transaction_list} Pending Transaction List
		 */
		List_pending_transactions(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, route_id: string | null | undefined, source_id: string | null | undefined, status_in: Array<export_Status> | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Pending_transaction_list> {
			return this.http.get<Pending_transaction_list>(this.baseUri + 'pending_transactions?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&route_id=' + (route_id == null ? '' : encodeURIComponent(route_id)) + '&source_id=' + (source_id == null ? '' : encodeURIComponent(source_id)) + '&' + status_in?.map(z => `status.in=${z}`).join('&') + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Retrieve a Pending Transaction
		 * Get pending_transactions/{pending_transaction_id}
		 * @return {Pending_transaction} Pending Transaction
		 */
		Retrieve_a_pending_transaction(pending_transaction_id: string): Observable<Pending_transaction> {
			return this.http.get<Pending_transaction>(this.baseUri + 'pending_transactions/' + (pending_transaction_id == null ? '' : encodeURIComponent(pending_transaction_id)), {});
		}

		/**
		 * List Programs
		 * Get programs
		 * @return {Program_list} Program List
		 */
		List_programs(cursor: string | null | undefined, limit: number | null | undefined): Observable<Program_list> {
			return this.http.get<Program_list>(this.baseUri + 'programs?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Retrieve a Program
		 * Get programs/{program_id}
		 * @return {Program} Program
		 */
		Retrieve_a_program(program_id: string): Observable<Program> {
			return this.http.get<Program>(this.baseUri + 'programs/' + (program_id == null ? '' : encodeURIComponent(program_id)), {});
		}

		/**
		 * Retrieve a Real-Time Decision
		 * Get real_time_decisions/{real_time_decision_id}
		 * @return {Real_time_decision} Real-Time Decision
		 */
		Retrieve_a_real_time_decision(real_time_decision_id: string): Observable<Real_time_decision> {
			return this.http.get<Real_time_decision>(this.baseUri + 'real_time_decisions/' + (real_time_decision_id == null ? '' : encodeURIComponent(real_time_decision_id)), {});
		}

		/**
		 * Action a Real-Time Decision
		 * Post real_time_decisions/{real_time_decision_id}/action
		 * @return {Real_time_decision} Real-Time Decision
		 */
		Action_a_real_time_decision(real_time_decision_id: string, requestBody: Action_a_real_time_decision_parameters): Observable<Real_time_decision> {
			return this.http.post<Real_time_decision>(this.baseUri + 'real_time_decisions/' + (real_time_decision_id == null ? '' : encodeURIComponent(real_time_decision_id)) + '/action', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List Real Time Payments Transfers
		 * Get real_time_payments_transfers
		 * @return {Real_time_payments_transfer_list} Real Time Payments Transfer List
		 */
		List_real_time_payments_transfers(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, external_account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Real_time_payments_transfer_list> {
			return this.http.get<Real_time_payments_transfer_list>(this.baseUri + 'real_time_payments_transfers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&external_account_id=' + (external_account_id == null ? '' : encodeURIComponent(external_account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create a Real Time Payments Transfer
		 * Post real_time_payments_transfers
		 * @return {Real_time_payments_transfer} Real Time Payments Transfer
		 */
		Create_a_real_time_payments_transfer(requestBody: Create_a_real_time_payments_transfer_parameters): Observable<Real_time_payments_transfer> {
			return this.http.post<Real_time_payments_transfer>(this.baseUri + 'real_time_payments_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Real Time Payments Transfer
		 * Get real_time_payments_transfers/{real_time_payments_transfer_id}
		 * @return {Real_time_payments_transfer} Real Time Payments Transfer
		 */
		Retrieve_a_real_time_payments_transfer(real_time_payments_transfer_id: string): Observable<Real_time_payments_transfer> {
			return this.http.get<Real_time_payments_transfer>(this.baseUri + 'real_time_payments_transfers/' + (real_time_payments_transfer_id == null ? '' : encodeURIComponent(real_time_payments_transfer_id)), {});
		}

		/**
		 * List Routing Numbers
		 * You can use this API to confirm if a routing number is valid, such as when a user is providing you with bank account details. Since routing numbers uniquely identify a bank, this will always return 0 or 1 entry. In Sandbox, the only valid routing number for this method is 110000000.
		 * Get routing_numbers
		 * @return {Routing_number_list} Routing Number List
		 */
		List_routing_numbers(cursor: string | null | undefined, limit: number | null | undefined, routing_number: string): Observable<Routing_number_list> {
			return this.http.get<Routing_number_list>(this.baseUri + 'routing_numbers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&routing_number=' + (routing_number == null ? '' : encodeURIComponent(routing_number)), {});
		}

		/**
		 * Simulate an Account Statement being created
		 * Simulates an [Account Statement](#account-statements) being created for an account. In production, Account Statements are generated once per month.
		 * Post simulations/account_statements
		 * @return {Account_statement} Account Statement
		 */
		Simulate_an_account_statement_being_created(requestBody: Simulate_an_account_statement_being_created_parameters): Observable<Account_statement> {
			return this.http.post<Account_statement>(this.baseUri + 'simulations/account_statements', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Complete a Sandbox Account Transfer
		 * If your account is configured to require approval for each transfer, this endpoint simulates the approval of an [Account Transfer](#account-transfers). You can also approve sandbox Account Transfers in the dashboard. This transfer must first have a `status` of `pending_approval`.
		 * Post simulations/account_transfers/{account_transfer_id}/complete
		 * @return {Account_transfer} Account Transfer
		 */
		Complete_a_sandbox_account_transfer(account_transfer_id: string): Observable<Account_transfer> {
			return this.http.post<Account_transfer>(this.baseUri + 'simulations/account_transfers/' + (account_transfer_id == null ? '' : encodeURIComponent(account_transfer_id)) + '/complete', null, {});
		}

		/**
		 * Return a Sandbox ACH Transfer
		 * Simulates the return of an [ACH Transfer](#ach-transfers) by the Federal Reserve due to an error condition. This will also create a Transaction to account for the returned funds. This transfer must first have a `status` of `submitted`.
		 * Post simulations/ach_transfers/{ach_transfer_id}/return
		 * @return {Ach_transfer} ACH Transfer
		 */
		Return_a_sandbox_ach_transfer(ach_transfer_id: string, requestBody: Return_a_sandbox_ach_transfer_parameters): Observable<Ach_transfer> {
			return this.http.post<Ach_transfer>(this.baseUri + 'simulations/ach_transfers/' + (ach_transfer_id == null ? '' : encodeURIComponent(ach_transfer_id)) + '/return', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Submit a Sandbox ACH Transfer
		 * Simulates the submission of an [ACH Transfer](#ach-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_submission`. In production, Increase submits ACH Transfers to the Federal Reserve three times per day on weekdays. Since sandbox ACH Transfers are not submitted to the Federal Reserve, this endpoint allows you to skip that delay and transition the ACH Transfer to a status of `submitted`.
		 * Post simulations/ach_transfers/{ach_transfer_id}/submit
		 * @return {Ach_transfer} ACH Transfer
		 */
		Submit_a_sandbox_ach_transfer(ach_transfer_id: string): Observable<Ach_transfer> {
			return this.http.post<Ach_transfer>(this.baseUri + 'simulations/ach_transfers/' + (ach_transfer_id == null ? '' : encodeURIComponent(ach_transfer_id)) + '/submit', null, {});
		}

		/**
		 * Simulate an authorization on a Card
		 * Simulates a purchase authorization on a [Card](#cards). Depending on the balance available to the card and the `amount` submitted, the authorization activity will result in a [Pending Transaction](#pending-transactions) of type `card_authorization` or a [Declined Transaction](#declined-transactions) of type `card_decline`. You can pass either a Card id or a [Digital Wallet Token](#digital-wallet-tokens) id to simulate the two different ways purchases can be made.
		 * Post simulations/card_authorizations
		 * @return {Inbound_card_authorization_simulation_result} Inbound Card Authorization Simulation Result
		 */
		Simulate_an_authorization_on_a_card(requestBody: Simulate_an_authorization_on_a_card_parameters): Observable<Inbound_card_authorization_simulation_result> {
			return this.http.post<Inbound_card_authorization_simulation_result>(this.baseUri + 'simulations/card_authorizations', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulates advancing the state of a card dispute
		 * After a [Card Dispute](#card-disputes) is created in production, the dispute will be reviewed. Since no review happens in sandbox, this endpoint simulates moving a Card Dispute into a rejected or accepted state. A Card Dispute can only be actioned one time and must have a status of `pending_reviewing`.
		 * Post simulations/card_disputes/{card_dispute_id}/action
		 * @return {Card_dispute} Card Dispute
		 */
		Simulates_advancing_the_state_of_a_card_dispute(card_dispute_id: string, requestBody: Simulates_advancing_the_state_of_a_card_dispute_parameters): Observable<Card_dispute> {
			return this.http.post<Card_dispute>(this.baseUri + 'simulations/card_disputes/' + (card_dispute_id == null ? '' : encodeURIComponent(card_dispute_id)) + '/action', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate a refund on a card
		 * Simulates refunding a card transaction. The full value of the original sandbox transaction is refunded.
		 * Post simulations/card_refunds
		 * @return {Transaction} Transaction
		 */
		Simulate_a_refund_on_a_card(requestBody: Simulate_a_refund_on_a_card_parameters): Observable<Transaction> {
			return this.http.post<Transaction>(this.baseUri + 'simulations/card_refunds', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate settling a card authorization
		 * Simulates the settlement of an authorization by a card acquirer. After a card authorization is created, the merchant will eventually send a settlement. This simulates that event, which may occur many days after the purchase in production. The amount settled can be different from the amount originally authorized, for example, when adding a tip to a restaurant bill.
		 * Post simulations/card_settlements
		 * @return {Transaction} Transaction
		 */
		Simulate_settling_a_card_authorization(requestBody: Simulate_settling_a_card_authorization_parameters): Observable<Transaction> {
			return this.http.post<Transaction>(this.baseUri + 'simulations/card_settlements', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Reject a Sandbox Check Deposit
		 * Simulates the rejection of a [Check Deposit](#check-deposits) by Increase due to factors like poor image quality. This Check Deposit must first have a `status` of `pending`.
		 * Post simulations/check_deposits/{check_deposit_id}/reject
		 * @return {Check_deposit} Check Deposit
		 */
		Reject_a_sandbox_check_deposit(check_deposit_id: string): Observable<Check_deposit> {
			return this.http.post<Check_deposit>(this.baseUri + 'simulations/check_deposits/' + (check_deposit_id == null ? '' : encodeURIComponent(check_deposit_id)) + '/reject', null, {});
		}

		/**
		 * Return a Sandbox Check Deposit
		 * Simulates the return of a [Check Deposit](#check-deposits). This Check Deposit must first have a `status` of `submitted`.
		 * Post simulations/check_deposits/{check_deposit_id}/return
		 * @return {Check_deposit} Check Deposit
		 */
		Return_a_sandbox_check_deposit(check_deposit_id: string): Observable<Check_deposit> {
			return this.http.post<Check_deposit>(this.baseUri + 'simulations/check_deposits/' + (check_deposit_id == null ? '' : encodeURIComponent(check_deposit_id)) + '/return', null, {});
		}

		/**
		 * Submit a Sandbox Check Deposit
		 * Simulates the submission of a [Check Deposit](#check-deposits) to the Federal Reserve. This Check Deposit must first have a `status` of `pending`.
		 * Post simulations/check_deposits/{check_deposit_id}/submit
		 * @return {Check_deposit} Check Deposit
		 */
		Submit_a_sandbox_check_deposit(check_deposit_id: string): Observable<Check_deposit> {
			return this.http.post<Check_deposit>(this.baseUri + 'simulations/check_deposits/' + (check_deposit_id == null ? '' : encodeURIComponent(check_deposit_id)) + '/submit', null, {});
		}

		/**
		 * Deposit a Sandbox Check Transfer
		 * Simulates a [Check Transfer](#check-transfers) being deposited at a bank. This transfer must first have a `status` of `mailed`.
		 * Post simulations/check_transfers/{check_transfer_id}/deposit
		 * @return {Check_transfer} Check Transfer
		 */
		Deposit_a_sandbox_check_transfer(check_transfer_id: string): Observable<Check_transfer> {
			return this.http.post<Check_transfer>(this.baseUri + 'simulations/check_transfers/' + (check_transfer_id == null ? '' : encodeURIComponent(check_transfer_id)) + '/deposit', null, {});
		}

		/**
		 * Mail a Sandbox Check Transfer
		 * Simulates the mailing of a [Check Transfer](#check-transfers), which happens once per weekday in production but can be sped up in sandbox. This transfer must first have a `status` of `pending_approval` or `pending_submission`.
		 * Post simulations/check_transfers/{check_transfer_id}/mail
		 * @return {Check_transfer} Check Transfer
		 */
		Mail_a_sandbox_check_transfer(check_transfer_id: string): Observable<Check_transfer> {
			return this.http.post<Check_transfer>(this.baseUri + 'simulations/check_transfers/' + (check_transfer_id == null ? '' : encodeURIComponent(check_transfer_id)) + '/mail', null, {});
		}

		/**
		 * Return a Sandbox Check Transfer
		 * Simulates a [Check Transfer](#check-transfers) being returned via USPS to Increase. This transfer must first have a `status` of `mailed`.
		 * Post simulations/check_transfers/{check_transfer_id}/return
		 * @return {Check_transfer} Check Transfer
		 */
		Return_a_sandbox_check_transfer(check_transfer_id: string, requestBody: Return_a_sandbox_check_transfer_parameters): Observable<Check_transfer> {
			return this.http.post<Check_transfer>(this.baseUri + 'simulations/check_transfers/' + (check_transfer_id == null ? '' : encodeURIComponent(check_transfer_id)) + '/return', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate digital wallet provisioning for a card
		 * Simulates a user attempting add a [Card](#cards) to a digital wallet such as Apple Pay.
		 * Post simulations/digital_wallet_token_requests
		 * @return {Inbound_digital_wallet_token_request_simulation_result} Inbound Digital Wallet Token Request Simulation Result
		 */
		Simulate_digital_wallet_provisioning_for_a_card(requestBody: Simulate_digital_wallet_provisioning_for_a_card_parameters): Observable<Inbound_digital_wallet_token_request_simulation_result> {
			return this.http.post<Inbound_digital_wallet_token_request_simulation_result>(this.baseUri + 'simulations/digital_wallet_token_requests', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate a tax document being created
		 * Simulates an tax document being created for an account.
		 * Post simulations/documents
		 * @return {Document} Document
		 */
		Simulate_a_tax_document_being_created(requestBody: Simulate_a_tax_document_being_created_parameters): Observable<Document> {
			return this.http.post<Document>(this.baseUri + 'simulations/documents', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate an ACH Transfer to your account
		 * Simulates an inbound ACH transfer to your account. This imitates initiating a transaction to an Increase account from a different financial institution. The transfer may be either a credit or a debit depending on if the `amount` is positive or negative. The result of calling this API will be either a [Transaction](#transactions) or a [Declined Transaction](#declined-transactions) depending on whether or not the transfer is allowed.
		 * Post simulations/inbound_ach_transfers
		 * @return {Inbound_ach_transfer_simulation_result} Inbound ACH Transfer Simulation Result
		 */
		Simulate_an_ach_transfer_to_your_account(requestBody: Simulate_an_ach_transfer_to_your_account_parameters): Observable<Inbound_ach_transfer_simulation_result> {
			return this.http.post<Inbound_ach_transfer_simulation_result>(this.baseUri + 'simulations/inbound_ach_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate a Real Time Payments Transfer to your account
		 * Simulates an inbound Real Time Payments transfer to your account. Real Time Payments are a beta feature.
		 * Post simulations/inbound_real_time_payments_transfers
		 * @return {Inbound_real_time_payments_transfer_simulation_result} Inbound Real Time Payments Transfer Simulation Result
		 */
		Simulate_a_real_time_payments_transfer_to_your_account(requestBody: Simulate_a_real_time_payments_transfer_to_your_account_parameters): Observable<Inbound_real_time_payments_transfer_simulation_result> {
			return this.http.post<Inbound_real_time_payments_transfer_simulation_result>(this.baseUri + 'simulations/inbound_real_time_payments_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate an Inbound Wire Drawdown request being created
		 * Simulates the receival of an [Inbound Wire Drawdown Request](#inbound-wire-drawdown-requests).
		 * Post simulations/inbound_wire_drawdown_requests
		 * @return {Inbound_wire_drawdown_request} Inbound Wire Drawdown Request
		 */
		Simulate_an_inbound_wire_drawdown_request_being_created(requestBody: Simulate_an_inbound_wire_drawdown_request_being_created_parameters): Observable<Inbound_wire_drawdown_request> {
			return this.http.post<Inbound_wire_drawdown_request>(this.baseUri + 'simulations/inbound_wire_drawdown_requests', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate a Wire Transfer to your account
		 * Simulates an inbound Wire Transfer to your account.
		 * Post simulations/inbound_wire_transfers
		 * @return {Inbound_wire_transfer_simulation_result} Inbound Wire Transfer Simulation Result
		 */
		Simulate_a_wire_transfer_to_your_account(requestBody: Simulate_a_wire_transfer_to_your_account_parameters): Observable<Inbound_wire_transfer_simulation_result> {
			return this.http.post<Inbound_wire_transfer_simulation_result>(this.baseUri + 'simulations/inbound_wire_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Simulate an Interest Payment to your account
		 * Simulates an interest payment to your account. In production, this happens automatically on the first of each month.
		 * Post simulations/interest_payment
		 * @return {Interest_payment_simulation_result} Interest Payment Simulation Result
		 */
		Simulate_an_interest_payment_to_your_account(requestBody: Simulate_an_interest_payment_to_your_account_parameters): Observable<Interest_payment_simulation_result> {
			return this.http.post<Interest_payment_simulation_result>(this.baseUri + 'simulations/interest_payment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Complete a Sandbox Real Time Payments Transfer
		 * Simulates submission of a Real Time Payments transfer and handling the response from the destination financial institution. This transfer must first have a `status` of `pending_submission`.
		 * Post simulations/real_time_payments_transfers/{real_time_payments_transfer_id}/complete
		 * @return {Real_time_payments_transfer} Real Time Payments Transfer
		 */
		Complete_a_sandbox_real_time_payments_transfer(real_time_payments_transfer_id: string, requestBody: Complete_a_sandbox_real_time_payments_transfer_parameters): Observable<Real_time_payments_transfer> {
			return this.http.post<Real_time_payments_transfer>(this.baseUri + 'simulations/real_time_payments_transfers/' + (real_time_payments_transfer_id == null ? '' : encodeURIComponent(real_time_payments_transfer_id)) + '/complete', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Reverse a Sandbox Wire Transfer
		 * Simulates the reversal of a [Wire Transfer](#wire-transfers) by the Federal Reserve due to error conditions. This will also create a [Transaction](#transaction) to account for the returned funds. This Wire Transfer must first have a `status` of `complete`.'
		 * Post simulations/wire_transfers/{wire_transfer_id}/reverse
		 * @return {Wire_transfer} Wire Transfer
		 */
		Reverse_a_sandbox_wire_transfer(wire_transfer_id: string): Observable<Wire_transfer> {
			return this.http.post<Wire_transfer>(this.baseUri + 'simulations/wire_transfers/' + (wire_transfer_id == null ? '' : encodeURIComponent(wire_transfer_id)) + '/reverse', null, {});
		}

		/**
		 * Submit a Sandbox Wire Transfer
		 * Simulates the submission of a [Wire Transfer](#wire-transfers) to the Federal Reserve. This transfer must first have a `status` of `pending_approval` or `pending_creating`.
		 * Post simulations/wire_transfers/{wire_transfer_id}/submit
		 * @return {Wire_transfer} Wire Transfer
		 */
		Submit_a_sandbox_wire_transfer(wire_transfer_id: string): Observable<Wire_transfer> {
			return this.http.post<Wire_transfer>(this.baseUri + 'simulations/wire_transfers/' + (wire_transfer_id == null ? '' : encodeURIComponent(wire_transfer_id)) + '/submit', null, {});
		}

		/**
		 * List Transactions
		 * Get transactions
		 * @return {Transaction_list} Transaction List
		 */
		List_transactions(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined, category_in: Array<Inbound_ach_transfer_simulation_resultTransactionSourceCategory> | null | undefined, route_id: string | null | undefined): Observable<Transaction_list> {
			return this.http.get<Transaction_list>(this.baseUri + 'transactions?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString() + '&' + category_in?.map(z => `category.in=${z}`).join('&') + '&route_id=' + (route_id == null ? '' : encodeURIComponent(route_id)), {});
		}

		/**
		 * Retrieve a Transaction
		 * Get transactions/{transaction_id}
		 * @return {Transaction} Transaction
		 */
		Retrieve_a_transaction(transaction_id: string): Observable<Transaction> {
			return this.http.get<Transaction>(this.baseUri + 'transactions/' + (transaction_id == null ? '' : encodeURIComponent(transaction_id)), {});
		}

		/**
		 * List Wire Drawdown Requests
		 * Get wire_drawdown_requests
		 * @return {Wire_drawdown_request_list} Wire Drawdown Request List
		 */
		List_wire_drawdown_requests(cursor: string | null | undefined, limit: number | null | undefined): Observable<Wire_drawdown_request_list> {
			return this.http.get<Wire_drawdown_request_list>(this.baseUri + 'wire_drawdown_requests?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit, {});
		}

		/**
		 * Create a Wire Drawdown Request
		 * Post wire_drawdown_requests
		 * @return {Wire_drawdown_request} Wire Drawdown Request
		 */
		Create_a_wire_drawdown_request(requestBody: Create_a_wire_drawdown_request_parameters): Observable<Wire_drawdown_request> {
			return this.http.post<Wire_drawdown_request>(this.baseUri + 'wire_drawdown_requests', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Wire Drawdown Request
		 * Get wire_drawdown_requests/{wire_drawdown_request_id}
		 * @return {Wire_drawdown_request} Wire Drawdown Request
		 */
		Retrieve_a_wire_drawdown_request(wire_drawdown_request_id: string): Observable<Wire_drawdown_request> {
			return this.http.get<Wire_drawdown_request>(this.baseUri + 'wire_drawdown_requests/' + (wire_drawdown_request_id == null ? '' : encodeURIComponent(wire_drawdown_request_id)), {});
		}

		/**
		 * List Wire Transfers
		 * Get wire_transfers
		 * @return {Wire_transfer_list} Wire Transfer List
		 */
		List_wire_transfers(cursor: string | null | undefined, limit: number | null | undefined, account_id: string | null | undefined, external_account_id: string | null | undefined, created_at_after: Date | null | undefined, created_at_before: Date | null | undefined, created_at_on_or_after: Date | null | undefined, created_at_on_or_before: Date | null | undefined): Observable<Wire_transfer_list> {
			return this.http.get<Wire_transfer_list>(this.baseUri + 'wire_transfers?cursor=' + (cursor == null ? '' : encodeURIComponent(cursor)) + '&limit=' + limit + '&account_id=' + (account_id == null ? '' : encodeURIComponent(account_id)) + '&external_account_id=' + (external_account_id == null ? '' : encodeURIComponent(external_account_id)) + '&created_at_after=' + created_at_after?.toISOString() + '&created_at_before=' + created_at_before?.toISOString() + '&created_at_on_or_after=' + created_at_on_or_after?.toISOString() + '&created_at_on_or_before=' + created_at_on_or_before?.toISOString(), {});
		}

		/**
		 * Create a Wire Transfer
		 * Post wire_transfers
		 * @return {Wire_transfer} Wire Transfer
		 */
		Create_a_wire_transfer(requestBody: Create_a_wire_transfer_parameters): Observable<Wire_transfer> {
			return this.http.post<Wire_transfer>(this.baseUri + 'wire_transfers', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieve a Wire Transfer
		 * Get wire_transfers/{wire_transfer_id}
		 * @return {Wire_transfer} Wire Transfer
		 */
		Retrieve_a_wire_transfer(wire_transfer_id: string): Observable<Wire_transfer> {
			return this.http.get<Wire_transfer>(this.baseUri + 'wire_transfers/' + (wire_transfer_id == null ? '' : encodeURIComponent(wire_transfer_id)), {});
		}

		/**
		 * Approve a Wire Transfer
		 * Post wire_transfers/{wire_transfer_id}/approve
		 * @return {Wire_transfer} Wire Transfer
		 */
		Approve_a_wire_transfer(wire_transfer_id: string): Observable<Wire_transfer> {
			return this.http.post<Wire_transfer>(this.baseUri + 'wire_transfers/' + (wire_transfer_id == null ? '' : encodeURIComponent(wire_transfer_id)) + '/approve', null, {});
		}

		/**
		 * Cancel a pending Wire Transfer
		 * Post wire_transfers/{wire_transfer_id}/cancel
		 * @return {Wire_transfer} Wire Transfer
		 */
		Cancel_a_pending_wire_transfer(wire_transfer_id: string): Observable<Wire_transfer> {
			return this.http.post<Wire_transfer>(this.baseUri + 'wire_transfers/' + (wire_transfer_id == null ? '' : encodeURIComponent(wire_transfer_id)) + '/cancel', null, {});
		}
	}

}

