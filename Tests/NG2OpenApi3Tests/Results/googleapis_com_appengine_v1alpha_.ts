import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains. */
	export interface AuthorizedCertificate {

		/** An SSL certificate obtained from a certificate authority. */
		certificateRawData?: CertificateRawData;

		/** The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate. */
		displayName?: string | null;

		/** Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly */
		domainMappingsCount?: number | null;

		/** Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly */
		domainNames?: Array<string>;

		/** The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly */
		expireTime?: string | null;

		/** Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly */
		id?: string | null;

		/** A certificate managed by App Engine. */
		managedCertificate?: ManagedCertificate;

		/** Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly */
		name?: string | null;

		/** The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly */
		visibleDomainMappings?: Array<string>;
	}

	/** An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains. */
	export interface AuthorizedCertificateFormProperties {

		/** The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate. */
		displayName: FormControl<string | null | undefined>,

		/** Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly */
		domainMappingsCount: FormControl<number | null | undefined>,

		/** The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly */
		expireTime: FormControl<string | null | undefined>,

		/** Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly */
		id: FormControl<string | null | undefined>,

		/** Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly */
		name: FormControl<string | null | undefined>,
	}
	export function CreateAuthorizedCertificateFormGroup() {
		return new FormGroup<AuthorizedCertificateFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			domainMappingsCount: new FormControl<number | null | undefined>(undefined),
			expireTime: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An SSL certificate obtained from a certificate authority. */
	export interface CertificateRawData {

		/** Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly */
		privateKey?: string | null;

		/** PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- */
		publicCertificate?: string | null;
	}

	/** An SSL certificate obtained from a certificate authority. */
	export interface CertificateRawDataFormProperties {

		/** Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly */
		privateKey: FormControl<string | null | undefined>,

		/** PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- */
		publicCertificate: FormControl<string | null | undefined>,
	}
	export function CreateCertificateRawDataFormGroup() {
		return new FormGroup<CertificateRawDataFormProperties>({
			privateKey: new FormControl<string | null | undefined>(undefined),
			publicCertificate: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A certificate managed by App Engine. */
	export interface ManagedCertificate {

		/** Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly */
		lastRenewalTime?: string | null;

		/** Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly */
		status?: ManagedCertificateStatus | null;
	}

	/** A certificate managed by App Engine. */
	export interface ManagedCertificateFormProperties {

		/** Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly */
		lastRenewalTime: FormControl<string | null | undefined>,

		/** Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly */
		status: FormControl<ManagedCertificateStatus | null | undefined>,
	}
	export function CreateManagedCertificateFormGroup() {
		return new FormGroup<ManagedCertificateFormProperties>({
			lastRenewalTime: new FormControl<string | null | undefined>(undefined),
			status: new FormControl<ManagedCertificateStatus | null | undefined>(undefined),
		});

	}

	export enum ManagedCertificateStatus { UNSPECIFIED_STATUS = 'UNSPECIFIED_STATUS', OK = 'OK', PENDING = 'PENDING', FAILED_RETRYING_INTERNAL = 'FAILED_RETRYING_INTERNAL', FAILED_RETRYING_NOT_VISIBLE = 'FAILED_RETRYING_NOT_VISIBLE', FAILED_PERMANENTLY_NOT_VISIBLE = 'FAILED_PERMANENTLY_NOT_VISIBLE', FAILED_RETRYING_CAA_FORBIDDEN = 'FAILED_RETRYING_CAA_FORBIDDEN', FAILED_RETRYING_CAA_CHECKING = 'FAILED_RETRYING_CAA_CHECKING' }


	/** A domain that a user has been authorized to administer. To authorize use of a domain, verify ownership via Search Console (https://search.google.com/search-console/welcome). */
	export interface AuthorizedDomain {

		/** Fully qualified domain name of the domain authorized for use. Example: example.com. */
		id?: string | null;

		/** Full path to the AuthorizedDomain resource in the API. Example: apps/myapp/authorizedDomains/example.com.@OutputOnly */
		name?: string | null;
	}

	/** A domain that a user has been authorized to administer. To authorize use of a domain, verify ownership via Search Console (https://search.google.com/search-console/welcome). */
	export interface AuthorizedDomainFormProperties {

		/** Fully qualified domain name of the domain authorized for use. Example: example.com. */
		id: FormControl<string | null | undefined>,

		/** Full path to the AuthorizedDomain resource in the API. Example: apps/myapp/authorizedDomains/example.com.@OutputOnly */
		name: FormControl<string | null | undefined>,
	}
	export function CreateAuthorizedDomainFormGroup() {
		return new FormGroup<AuthorizedDomainFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state. */
	export interface ContainerState {

		/** Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API) */
		currentReasons?: Reasons;

		/** Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API) */
		previousReasons?: Reasons;

		/** The current state of the container. This state is the culmination of all of the opinions from external systems that CCFE knows about of the container. */
		state?: ContainerStateState | null;
	}

	/** ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state. */
	export interface ContainerStateFormProperties {

		/** The current state of the container. This state is the culmination of all of the opinions from external systems that CCFE knows about of the container. */
		state: FormControl<ContainerStateState | null | undefined>,
	}
	export function CreateContainerStateFormGroup() {
		return new FormGroup<ContainerStateFormProperties>({
			state: new FormControl<ContainerStateState | null | undefined>(undefined),
		});

	}


	/** Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API) */
	export interface Reasons {
		abuse?: ReasonsAbuse | null;
		billing?: ReasonsBilling | null;
		dataGovernance?: ReasonsDataGovernance | null;
		serviceManagement?: ReasonsServiceManagement | null;
	}

	/** Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API) */
	export interface ReasonsFormProperties {
		abuse: FormControl<ReasonsAbuse | null | undefined>,
		billing: FormControl<ReasonsBilling | null | undefined>,
		dataGovernance: FormControl<ReasonsDataGovernance | null | undefined>,
		serviceManagement: FormControl<ReasonsServiceManagement | null | undefined>,
	}
	export function CreateReasonsFormGroup() {
		return new FormGroup<ReasonsFormProperties>({
			abuse: new FormControl<ReasonsAbuse | null | undefined>(undefined),
			billing: new FormControl<ReasonsBilling | null | undefined>(undefined),
			dataGovernance: new FormControl<ReasonsDataGovernance | null | undefined>(undefined),
			serviceManagement: new FormControl<ReasonsServiceManagement | null | undefined>(undefined),
		});

	}

	export enum ReasonsAbuse { ABUSE_UNKNOWN_REASON = 'ABUSE_UNKNOWN_REASON', ABUSE_CONTROL_PLANE_SYNC = 'ABUSE_CONTROL_PLANE_SYNC', SUSPEND = 'SUSPEND', REINSTATE = 'REINSTATE' }

	export enum ReasonsBilling { BILLING_UNKNOWN_REASON = 'BILLING_UNKNOWN_REASON', BILLING_CONTROL_PLANE_SYNC = 'BILLING_CONTROL_PLANE_SYNC', PROBATION = 'PROBATION', CLOSE = 'CLOSE', OPEN = 'OPEN' }

	export enum ReasonsDataGovernance { DATA_GOVERNANCE_UNKNOWN_REASON = 'DATA_GOVERNANCE_UNKNOWN_REASON', DATA_GOVERNANCE_CONTROL_PLANE_SYNC = 'DATA_GOVERNANCE_CONTROL_PLANE_SYNC', HIDE = 'HIDE', UNHIDE = 'UNHIDE', PURGE = 'PURGE' }

	export enum ReasonsServiceManagement { SERVICE_MANAGEMENT_UNKNOWN_REASON = 'SERVICE_MANAGEMENT_UNKNOWN_REASON', SERVICE_MANAGEMENT_CONTROL_PLANE_SYNC = 'SERVICE_MANAGEMENT_CONTROL_PLANE_SYNC', ACTIVATION = 'ACTIVATION', PREPARE_DEACTIVATION = 'PREPARE_DEACTIVATION', ABORT_DEACTIVATION = 'ABORT_DEACTIVATION', COMMIT_DEACTIVATION = 'COMMIT_DEACTIVATION' }

	export enum ContainerStateState { UNKNOWN_STATE = 'UNKNOWN_STATE', ON = 'ON', OFF = 'OFF', DELETED = 'DELETED' }


	/** Metadata for the given google.longrunning.Operation during a google.appengine.v1.CreateVersionRequest. */
	export interface CreateVersionMetadataV1 {

		/** The Cloud Build ID if one was created as part of the version create. @OutputOnly */
		cloudBuildId?: string | null;
	}

	/** Metadata for the given google.longrunning.Operation during a google.appengine.v1.CreateVersionRequest. */
	export interface CreateVersionMetadataV1FormProperties {

		/** The Cloud Build ID if one was created as part of the version create. @OutputOnly */
		cloudBuildId: FormControl<string | null | undefined>,
	}
	export function CreateCreateVersionMetadataV1FormGroup() {
		return new FormGroup<CreateVersionMetadataV1FormProperties>({
			cloudBuildId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for the given google.longrunning.Operation during a google.appengine.v1alpha.CreateVersionRequest. */
	export interface CreateVersionMetadataV1Alpha {

		/** The Cloud Build ID if one was created as part of the version create. @OutputOnly */
		cloudBuildId?: string | null;
	}

	/** Metadata for the given google.longrunning.Operation during a google.appengine.v1alpha.CreateVersionRequest. */
	export interface CreateVersionMetadataV1AlphaFormProperties {

		/** The Cloud Build ID if one was created as part of the version create. @OutputOnly */
		cloudBuildId: FormControl<string | null | undefined>,
	}
	export function CreateCreateVersionMetadataV1AlphaFormGroup() {
		return new FormGroup<CreateVersionMetadataV1AlphaFormProperties>({
			cloudBuildId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for the given google.longrunning.Operation during a google.appengine.v1beta.CreateVersionRequest. */
	export interface CreateVersionMetadataV1Beta {

		/** The Cloud Build ID if one was created as part of the version create. @OutputOnly */
		cloudBuildId?: string | null;
	}

	/** Metadata for the given google.longrunning.Operation during a google.appengine.v1beta.CreateVersionRequest. */
	export interface CreateVersionMetadataV1BetaFormProperties {

		/** The Cloud Build ID if one was created as part of the version create. @OutputOnly */
		cloudBuildId: FormControl<string | null | undefined>,
	}
	export function CreateCreateVersionMetadataV1BetaFormGroup() {
		return new FormGroup<CreateVersionMetadataV1BetaFormProperties>({
			cloudBuildId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A domain serving an App Engine application. */
	export interface DomainMapping {

		/** Relative name of the domain serving the application. Example: example.com. */
		id?: string | null;

		/** Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.@OutputOnly */
		name?: string | null;

		/** The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.@OutputOnly */
		resourceRecords?: Array<ResourceRecord>;

		/** SSL configuration for a DomainMapping resource. */
		sslSettings?: SslSettings;
	}

	/** A domain serving an App Engine application. */
	export interface DomainMappingFormProperties {

		/** Relative name of the domain serving the application. Example: example.com. */
		id: FormControl<string | null | undefined>,

		/** Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.@OutputOnly */
		name: FormControl<string | null | undefined>,
	}
	export function CreateDomainMappingFormGroup() {
		return new FormGroup<DomainMappingFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A DNS resource record. */
	export interface ResourceRecord {

		/** Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'. */
		name?: string | null;

		/** Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1). */
		rrdata?: string | null;

		/** Resource record type. Example: AAAA. */
		type?: ResourceRecordType | null;
	}

	/** A DNS resource record. */
	export interface ResourceRecordFormProperties {

		/** Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'. */
		name: FormControl<string | null | undefined>,

		/** Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1). */
		rrdata: FormControl<string | null | undefined>,

		/** Resource record type. Example: AAAA. */
		type: FormControl<ResourceRecordType | null | undefined>,
	}
	export function CreateResourceRecordFormGroup() {
		return new FormGroup<ResourceRecordFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			rrdata: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<ResourceRecordType | null | undefined>(undefined),
		});

	}

	export enum ResourceRecordType { A = 'A', AAAA = 'AAAA', CNAME = 'CNAME' }


	/** SSL configuration for a DomainMapping resource. */
	export interface SslSettings {

		/** ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345. */
		certificateId?: string | null;

		/** Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly */
		isManagedCertificate?: boolean | null;
	}

	/** SSL configuration for a DomainMapping resource. */
	export interface SslSettingsFormProperties {

		/** ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345. */
		certificateId: FormControl<string | null | undefined>,

		/** Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly */
		isManagedCertificate: FormControl<boolean | null | undefined>,
	}
	export function CreateSslSettingsFormGroup() {
		return new FormGroup<SslSettingsFormProperties>({
			certificateId: new FormControl<string | null | undefined>(undefined),
			isManagedCertificate: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }  */
	export interface Empty {
	}

	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }  */
	export interface EmptyFormProperties {
	}
	export function CreateEmptyFormGroup() {
		return new FormGroup<EmptyFormProperties>({
		});

	}


	/** Metadata for the given google.cloud.location.Location. */
	export interface GoogleAppengineV1betaLocationMetadata {

		/** App Engine flexible environment is available in the given location.@OutputOnly */
		flexibleEnvironmentAvailable?: boolean | null;

		/** Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location. */
		searchApiAvailable?: boolean | null;

		/** App Engine standard environment is available in the given location.@OutputOnly */
		standardEnvironmentAvailable?: boolean | null;
	}

	/** Metadata for the given google.cloud.location.Location. */
	export interface GoogleAppengineV1betaLocationMetadataFormProperties {

		/** App Engine flexible environment is available in the given location.@OutputOnly */
		flexibleEnvironmentAvailable: FormControl<boolean | null | undefined>,

		/** Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location. */
		searchApiAvailable: FormControl<boolean | null | undefined>,

		/** App Engine standard environment is available in the given location.@OutputOnly */
		standardEnvironmentAvailable: FormControl<boolean | null | undefined>,
	}
	export function CreateGoogleAppengineV1betaLocationMetadataFormGroup() {
		return new FormGroup<GoogleAppengineV1betaLocationMetadataFormProperties>({
			flexibleEnvironmentAvailable: new FormControl<boolean | null | undefined>(undefined),
			searchApiAvailable: new FormControl<boolean | null | undefined>(undefined),
			standardEnvironmentAvailable: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Response message for AuthorizedCertificates.ListAuthorizedCertificates. */
	export interface ListAuthorizedCertificatesResponse {

		/** The SSL certificates the user is authorized to administer. */
		certificates?: Array<AuthorizedCertificate>;

		/** Continuation token for fetching the next page of results. */
		nextPageToken?: string | null;
	}

	/** Response message for AuthorizedCertificates.ListAuthorizedCertificates. */
	export interface ListAuthorizedCertificatesResponseFormProperties {

		/** Continuation token for fetching the next page of results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListAuthorizedCertificatesResponseFormGroup() {
		return new FormGroup<ListAuthorizedCertificatesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for AuthorizedDomains.ListAuthorizedDomains. */
	export interface ListAuthorizedDomainsResponse {

		/** The authorized domains belonging to the user. */
		domains?: Array<AuthorizedDomain>;

		/** Continuation token for fetching the next page of results. */
		nextPageToken?: string | null;
	}

	/** Response message for AuthorizedDomains.ListAuthorizedDomains. */
	export interface ListAuthorizedDomainsResponseFormProperties {

		/** Continuation token for fetching the next page of results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListAuthorizedDomainsResponseFormGroup() {
		return new FormGroup<ListAuthorizedDomainsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response message for DomainMappings.ListDomainMappings. */
	export interface ListDomainMappingsResponse {

		/** The domain mappings for the application. */
		domainMappings?: Array<DomainMapping>;

		/** Continuation token for fetching the next page of results. */
		nextPageToken?: string | null;
	}

	/** Response message for DomainMappings.ListDomainMappings. */
	export interface ListDomainMappingsResponseFormProperties {

		/** Continuation token for fetching the next page of results. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListDomainMappingsResponseFormGroup() {
		return new FormGroup<ListDomainMappingsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Locations.ListLocations. */
	export interface ListLocationsResponse {

		/** A list of locations that matches the specified filter in the request. */
		locations?: Array<Location>;

		/** The standard List next-page token. */
		nextPageToken?: string | null;
	}

	/** The response message for Locations.ListLocations. */
	export interface ListLocationsResponseFormProperties {

		/** The standard List next-page token. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListLocationsResponseFormGroup() {
		return new FormGroup<ListLocationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A resource that represents a Google Cloud location. */
	export interface Location {

		/** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
		displayName?: string | null;

		/** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
		labels?: {[id: string]: string };

		/** The canonical id for this location. For example: "us-east1". */
		locationId?: string | null;

		/** Service-specific metadata. For example the available capacity at the given location. */
		metadata?: {[id: string]: any };

		/** Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1" */
		name?: string | null;
	}

	/** A resource that represents a Google Cloud location. */
	export interface LocationFormProperties {

		/** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
		displayName: FormControl<string | null | undefined>,

		/** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
		labels: FormControl<{[id: string]: string } | null | undefined>,

		/** The canonical id for this location. For example: "us-east1". */
		locationId: FormControl<string | null | undefined>,

		/** Service-specific metadata. For example the available capacity at the given location. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,

		/** Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1" */
		name: FormControl<string | null | undefined>,
	}
	export function CreateLocationFormGroup() {
		return new FormGroup<LocationFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			labels: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			locationId: new FormControl<string | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The response message for Operations.ListOperations. */
	export interface ListOperationsResponse {

		/** The standard List next-page token. */
		nextPageToken?: string | null;

		/** A list of operations that matches the specified filter in the request. */
		operations?: Array<Operation>;
	}

	/** The response message for Operations.ListOperations. */
	export interface ListOperationsResponseFormProperties {

		/** The standard List next-page token. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListOperationsResponseFormGroup() {
		return new FormGroup<ListOperationsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** This resource represents a long-running operation that is the result of a network API call. */
	export interface Operation {

		/** If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available. */
		done?: boolean | null;

		/** The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors). */
		error?: Status;

		/** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata?: {[id: string]: any };

		/** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}. */
		name?: string | null;

		/** The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse. */
		response?: {[id: string]: any };
	}

	/** This resource represents a long-running operation that is the result of a network API call. */
	export interface OperationFormProperties {

		/** If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available. */
		done: FormControl<boolean | null | undefined>,

		/** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata: FormControl<{[id: string]: any } | null | undefined>,

		/** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}. */
		name: FormControl<string | null | undefined>,

		/** The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse. */
		response: FormControl<{[id: string]: any } | null | undefined>,
	}
	export function CreateOperationFormGroup() {
		return new FormGroup<OperationFormProperties>({
			done: new FormControl<boolean | null | undefined>(undefined),
			metadata: new FormControl<{[id: string]: any } | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			response: new FormControl<{[id: string]: any } | null | undefined>(undefined),
		});

	}


	/** The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors). */
	export interface Status {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code?: number | null;

		/** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
		details?: Array<string>;

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message?: string | null;
	}

	/** The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors). */
	export interface StatusFormProperties {

		/** The status code, which should be an enum value of google.rpc.Code. */
		code: FormControl<number | null | undefined>,

		/** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message: FormControl<string | null | undefined>,
	}
	export function CreateStatusFormGroup() {
		return new FormGroup<StatusFormProperties>({
			code: new FormControl<number | null | undefined>(undefined),
			message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for the given google.cloud.location.Location. */
	export interface LocationMetadata {

		/** App Engine flexible environment is available in the given location.@OutputOnly */
		flexibleEnvironmentAvailable?: boolean | null;

		/** Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location. */
		searchApiAvailable?: boolean | null;

		/** App Engine standard environment is available in the given location.@OutputOnly */
		standardEnvironmentAvailable?: boolean | null;
	}

	/** Metadata for the given google.cloud.location.Location. */
	export interface LocationMetadataFormProperties {

		/** App Engine flexible environment is available in the given location.@OutputOnly */
		flexibleEnvironmentAvailable: FormControl<boolean | null | undefined>,

		/** Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location. */
		searchApiAvailable: FormControl<boolean | null | undefined>,

		/** App Engine standard environment is available in the given location.@OutputOnly */
		standardEnvironmentAvailable: FormControl<boolean | null | undefined>,
	}
	export function CreateLocationMetadataFormGroup() {
		return new FormGroup<LocationMetadataFormProperties>({
			flexibleEnvironmentAvailable: new FormControl<boolean | null | undefined>(undefined),
			searchApiAvailable: new FormControl<boolean | null | undefined>(undefined),
			standardEnvironmentAvailable: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Metadata for the given google.longrunning.Operation. */
	export interface OperationMetadataV1 {

		/** Metadata for the given google.longrunning.Operation during a google.appengine.v1.CreateVersionRequest. */
		createVersionMetadata?: CreateVersionMetadataV1;

		/** Time that this operation completed.@OutputOnly */
		endTime?: string | null;

		/** Ephemeral message that may change every time the operation is polled. @OutputOnly */
		ephemeralMessage?: string | null;

		/** Time that this operation was created.@OutputOnly */
		insertTime?: string | null;

		/** API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly */
		method?: string | null;

		/** Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly */
		target?: string | null;

		/** User who requested this operation.@OutputOnly */
		user?: string | null;

		/** Durable messages that persist on every operation poll. @OutputOnly */
		warning?: Array<string>;
	}

	/** Metadata for the given google.longrunning.Operation. */
	export interface OperationMetadataV1FormProperties {

		/** Time that this operation completed.@OutputOnly */
		endTime: FormControl<string | null | undefined>,

		/** Ephemeral message that may change every time the operation is polled. @OutputOnly */
		ephemeralMessage: FormControl<string | null | undefined>,

		/** Time that this operation was created.@OutputOnly */
		insertTime: FormControl<string | null | undefined>,

		/** API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly */
		method: FormControl<string | null | undefined>,

		/** Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly */
		target: FormControl<string | null | undefined>,

		/** User who requested this operation.@OutputOnly */
		user: FormControl<string | null | undefined>,
	}
	export function CreateOperationMetadataV1FormGroup() {
		return new FormGroup<OperationMetadataV1FormProperties>({
			endTime: new FormControl<string | null | undefined>(undefined),
			ephemeralMessage: new FormControl<string | null | undefined>(undefined),
			insertTime: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			user: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for the given google.longrunning.Operation. */
	export interface OperationMetadataV1Alpha {

		/** Metadata for the given google.longrunning.Operation during a google.appengine.v1alpha.CreateVersionRequest. */
		createVersionMetadata?: CreateVersionMetadataV1Alpha;

		/** Time that this operation completed.@OutputOnly */
		endTime?: string | null;

		/** Ephemeral message that may change every time the operation is polled. @OutputOnly */
		ephemeralMessage?: string | null;

		/** Time that this operation was created.@OutputOnly */
		insertTime?: string | null;

		/** API method that initiated this operation. Example: google.appengine.v1alpha.Versions.CreateVersion.@OutputOnly */
		method?: string | null;

		/** Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly */
		target?: string | null;

		/** User who requested this operation.@OutputOnly */
		user?: string | null;

		/** Durable messages that persist on every operation poll. @OutputOnly */
		warning?: Array<string>;
	}

	/** Metadata for the given google.longrunning.Operation. */
	export interface OperationMetadataV1AlphaFormProperties {

		/** Time that this operation completed.@OutputOnly */
		endTime: FormControl<string | null | undefined>,

		/** Ephemeral message that may change every time the operation is polled. @OutputOnly */
		ephemeralMessage: FormControl<string | null | undefined>,

		/** Time that this operation was created.@OutputOnly */
		insertTime: FormControl<string | null | undefined>,

		/** API method that initiated this operation. Example: google.appengine.v1alpha.Versions.CreateVersion.@OutputOnly */
		method: FormControl<string | null | undefined>,

		/** Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly */
		target: FormControl<string | null | undefined>,

		/** User who requested this operation.@OutputOnly */
		user: FormControl<string | null | undefined>,
	}
	export function CreateOperationMetadataV1AlphaFormGroup() {
		return new FormGroup<OperationMetadataV1AlphaFormProperties>({
			endTime: new FormControl<string | null | undefined>(undefined),
			ephemeralMessage: new FormControl<string | null | undefined>(undefined),
			insertTime: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			user: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for the given google.longrunning.Operation. */
	export interface OperationMetadataV1Beta {

		/** Metadata for the given google.longrunning.Operation during a google.appengine.v1beta.CreateVersionRequest. */
		createVersionMetadata?: CreateVersionMetadataV1Beta;

		/** Time that this operation completed.@OutputOnly */
		endTime?: string | null;

		/** Ephemeral message that may change every time the operation is polled. @OutputOnly */
		ephemeralMessage?: string | null;

		/** Time that this operation was created.@OutputOnly */
		insertTime?: string | null;

		/** API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly */
		method?: string | null;

		/** Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly */
		target?: string | null;

		/** User who requested this operation.@OutputOnly */
		user?: string | null;

		/** Durable messages that persist on every operation poll. @OutputOnly */
		warning?: Array<string>;
	}

	/** Metadata for the given google.longrunning.Operation. */
	export interface OperationMetadataV1BetaFormProperties {

		/** Time that this operation completed.@OutputOnly */
		endTime: FormControl<string | null | undefined>,

		/** Ephemeral message that may change every time the operation is polled. @OutputOnly */
		ephemeralMessage: FormControl<string | null | undefined>,

		/** Time that this operation was created.@OutputOnly */
		insertTime: FormControl<string | null | undefined>,

		/** API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly */
		method: FormControl<string | null | undefined>,

		/** Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly */
		target: FormControl<string | null | undefined>,

		/** User who requested this operation.@OutputOnly */
		user: FormControl<string | null | undefined>,
	}
	export function CreateOperationMetadataV1BetaFormGroup() {
		return new FormGroup<OperationMetadataV1BetaFormProperties>({
			endTime: new FormControl<string | null | undefined>(undefined),
			ephemeralMessage: new FormControl<string | null | undefined>(undefined),
			insertTime: new FormControl<string | null | undefined>(undefined),
			method: new FormControl<string | null | undefined>(undefined),
			target: new FormControl<string | null | undefined>(undefined),
			user: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The request sent to CLHs during project events. */
	export interface ProjectEvent {

		/** The unique ID for this project event. CLHs can use this value to dedup repeated calls. required */
		eventId?: string | null;
		phase?: ProjectEventPhase | null;

		/** ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer). */
		projectMetadata?: ProjectsMetadata;

		/** ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state. */
		state?: ContainerState;
	}

	/** The request sent to CLHs during project events. */
	export interface ProjectEventFormProperties {

		/** The unique ID for this project event. CLHs can use this value to dedup repeated calls. required */
		eventId: FormControl<string | null | undefined>,
		phase: FormControl<ProjectEventPhase | null | undefined>,
	}
	export function CreateProjectEventFormGroup() {
		return new FormGroup<ProjectEventFormProperties>({
			eventId: new FormControl<string | null | undefined>(undefined),
			phase: new FormControl<ProjectEventPhase | null | undefined>(undefined),
		});

	}

	export enum ProjectEventPhase { UNKNOWN = 'UNKNOWN', BEFORE_RESOURCE_HANDLING = 'BEFORE_RESOURCE_HANDLING', AFTER_RESOURCE_HANDLING = 'AFTER_RESOURCE_HANDLING' }


	/** ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer). */
	export interface ProjectsMetadata {

		/** The consumer project id. */
		consumerProjectId?: string | null;

		/** The consumer project number. */
		consumerProjectNumber?: string | null;

		/** The CCFE state of the consumer project. It is the same state that is communicated to the CLH during project events. Notice that this field is not set in the DB, it is only set in this proto when communicated to CLH in the side channel. */
		consumerProjectState?: ContainerStateState | null;

		/** The service account authorized to operate on the consumer project. Note: CCFE only propagates P4SA with default tag to CLH. */
		p4ServiceAccount?: string | null;

		/** The producer project id. */
		producerProjectId?: string | null;

		/** The producer project number. */
		producerProjectNumber?: string | null;

		/** The tenant project id. */
		tenantProjectId?: string | null;

		/** The tenant project number. */
		tenantProjectNumber?: string | null;
	}

	/** ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer). */
	export interface ProjectsMetadataFormProperties {

		/** The consumer project id. */
		consumerProjectId: FormControl<string | null | undefined>,

		/** The consumer project number. */
		consumerProjectNumber: FormControl<string | null | undefined>,

		/** The CCFE state of the consumer project. It is the same state that is communicated to the CLH during project events. Notice that this field is not set in the DB, it is only set in this proto when communicated to CLH in the side channel. */
		consumerProjectState: FormControl<ContainerStateState | null | undefined>,

		/** The service account authorized to operate on the consumer project. Note: CCFE only propagates P4SA with default tag to CLH. */
		p4ServiceAccount: FormControl<string | null | undefined>,

		/** The producer project id. */
		producerProjectId: FormControl<string | null | undefined>,

		/** The producer project number. */
		producerProjectNumber: FormControl<string | null | undefined>,

		/** The tenant project id. */
		tenantProjectId: FormControl<string | null | undefined>,

		/** The tenant project number. */
		tenantProjectNumber: FormControl<string | null | undefined>,
	}
	export function CreateProjectsMetadataFormGroup() {
		return new FormGroup<ProjectsMetadataFormProperties>({
			consumerProjectId: new FormControl<string | null | undefined>(undefined),
			consumerProjectNumber: new FormControl<string | null | undefined>(undefined),
			consumerProjectState: new FormControl<ContainerStateState | null | undefined>(undefined),
			p4ServiceAccount: new FormControl<string | null | undefined>(undefined),
			producerProjectId: new FormControl<string | null | undefined>(undefined),
			producerProjectNumber: new FormControl<string | null | undefined>(undefined),
			tenantProjectId: new FormControl<string | null | undefined>(undefined),
			tenantProjectNumber: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Lists all SSL certificates the user is authorized to administer.
		 * Get v1alpha/apps/{appsId}/authorizedCertificates
		 * @param {string} appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
		 * @param {number} pageSize Maximum results to return per page.
		 * @param {string} pageToken Continuation token for fetching the next page of results.
		 * @param {Appengine_apps_authorizedCertificates_listView} view Controls the set of fields returned in the LIST response.
		 * @return {ListAuthorizedCertificatesResponse} Successful response
		 */
		Appengine_apps_authorizedCertificates_list(appsId: string, pageSize: number | null | undefined, pageToken: string | null | undefined, view: Appengine_apps_authorizedCertificates_listView | null | undefined): Observable<ListAuthorizedCertificatesResponse> {
			return this.http.get<ListAuthorizedCertificatesResponse>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/authorizedCertificates&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)) + '&view=' + view, {});
		}

		/**
		 * Uploads the specified SSL certificate.
		 * Post v1alpha/apps/{appsId}/authorizedCertificates
		 * @param {string} appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
		 * @return {AuthorizedCertificate} Successful response
		 */
		Appengine_apps_authorizedCertificates_create(appsId: string, requestBody: AuthorizedCertificate): Observable<AuthorizedCertificate> {
			return this.http.post<AuthorizedCertificate>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/authorizedCertificates', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified SSL certificate.
		 * Delete v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		 * @param {string} appsId Part of `name`. Name of the resource to delete. Example: apps/myapp/authorizedCertificates/12345.
		 * @param {string} authorizedCertificatesId Part of `name`. See documentation of `appsId`.
		 * @return {Empty} Successful response
		 */
		Appengine_apps_authorizedCertificates_delete(appsId: string, authorizedCertificatesId: string): Observable<Empty> {
			return this.http.delete<Empty>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/authorizedCertificates/' + (authorizedCertificatesId == null ? '' : encodeURIComponent(authorizedCertificatesId)), {});
		}

		/**
		 * Gets the specified SSL certificate.
		 * Get v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		 * @param {string} appsId Part of `name`. Name of the resource requested. Example: apps/myapp/authorizedCertificates/12345.
		 * @param {string} authorizedCertificatesId Part of `name`. See documentation of `appsId`.
		 * @param {Appengine_apps_authorizedCertificates_listView} view Controls the set of fields returned in the GET response.
		 * @return {AuthorizedCertificate} Successful response
		 */
		Appengine_apps_authorizedCertificates_get(appsId: string, authorizedCertificatesId: string, view: Appengine_apps_authorizedCertificates_listView | null | undefined): Observable<AuthorizedCertificate> {
			return this.http.get<AuthorizedCertificate>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/authorizedCertificates/' + (authorizedCertificatesId == null ? '' : encodeURIComponent(authorizedCertificatesId)) + '&view=' + view, {});
		}

		/**
		 * Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.
		 * Patch v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		 * @param {string} appsId Part of `name`. Name of the resource to update. Example: apps/myapp/authorizedCertificates/12345.
		 * @param {string} authorizedCertificatesId Part of `name`. See documentation of `appsId`.
		 * @param {string} updateMask Standard field mask for the set of fields to be updated. Updates are only supported on the certificate_raw_data and display_name fields.
		 * @return {AuthorizedCertificate} Successful response
		 */
		Appengine_apps_authorizedCertificates_patch(appsId: string, authorizedCertificatesId: string, updateMask: string | null | undefined, requestBody: AuthorizedCertificate): Observable<AuthorizedCertificate> {
			return this.http.patch<AuthorizedCertificate>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/authorizedCertificates/' + (authorizedCertificatesId == null ? '' : encodeURIComponent(authorizedCertificatesId)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all domains the user is authorized to administer.
		 * Get v1alpha/apps/{appsId}/authorizedDomains
		 * @param {string} appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
		 * @param {number} pageSize Maximum results to return per page.
		 * @param {string} pageToken Continuation token for fetching the next page of results.
		 * @return {ListAuthorizedDomainsResponse} Successful response
		 */
		Appengine_apps_authorizedDomains_list(appsId: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListAuthorizedDomainsResponse> {
			return this.http.get<ListAuthorizedDomainsResponse>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/authorizedDomains&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists the domain mappings on an application.
		 * Get v1alpha/apps/{appsId}/domainMappings
		 * @param {string} appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
		 * @param {number} pageSize Maximum results to return per page.
		 * @param {string} pageToken Continuation token for fetching the next page of results.
		 * @return {ListDomainMappingsResponse} Successful response
		 */
		Appengine_apps_domainMappings_list(appsId: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListDomainMappingsResponse> {
			return this.http.get<ListDomainMappingsResponse>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/domainMappings&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
		 * Post v1alpha/apps/{appsId}/domainMappings
		 * @param {string} appsId Part of `parent`. Name of the parent Application resource. Example: apps/myapp.
		 * @param {boolean} noManagedCertificate Whether a managed certificate should be provided by App Engine. If true, a certificate ID must be manaually set in the DomainMapping resource to configure SSL for this domain. If false, a managed certificate will be provisioned and a certificate ID will be automatically populated.
		 * @param {Appengine_apps_domainMappings_createOverrideStrategy} overrideStrategy Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
		 * @return {Operation} Successful response
		 */
		Appengine_apps_domainMappings_create(appsId: string, noManagedCertificate: boolean | null | undefined, overrideStrategy: Appengine_apps_domainMappings_createOverrideStrategy | null | undefined, requestBody: DomainMapping): Observable<Operation> {
			return this.http.post<Operation>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/domainMappings&noManagedCertificate=' + noManagedCertificate + '&overrideStrategy=' + overrideStrategy, JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.
		 * Delete v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}
		 * @param {string} appsId Part of `name`. Name of the resource to delete. Example: apps/myapp/domainMappings/example.com.
		 * @param {string} domainMappingsId Part of `name`. See documentation of `appsId`.
		 * @return {Operation} Successful response
		 */
		Appengine_apps_domainMappings_delete(appsId: string, domainMappingsId: string): Observable<Operation> {
			return this.http.delete<Operation>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/domainMappings/' + (domainMappingsId == null ? '' : encodeURIComponent(domainMappingsId)), {});
		}

		/**
		 * Gets the specified domain mapping.
		 * Get v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}
		 * @param {string} appsId Part of `name`. Name of the resource requested. Example: apps/myapp/domainMappings/example.com.
		 * @param {string} domainMappingsId Part of `name`. See documentation of `appsId`.
		 * @return {DomainMapping} Successful response
		 */
		Appengine_apps_domainMappings_get(appsId: string, domainMappingsId: string): Observable<DomainMapping> {
			return this.http.get<DomainMapping>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/domainMappings/' + (domainMappingsId == null ? '' : encodeURIComponent(domainMappingsId)), {});
		}

		/**
		 * Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.
		 * Patch v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}
		 * @param {string} appsId Part of `name`. Name of the resource to update. Example: apps/myapp/domainMappings/example.com.
		 * @param {string} domainMappingsId Part of `name`. See documentation of `appsId`.
		 * @param {boolean} noManagedCertificate Whether a managed certificate should be provided by App Engine. If true, a certificate ID must be manually set in the DomainMapping resource to configure SSL for this domain. If false, a managed certificate will be provisioned and a certificate ID will be automatically populated. Only applicable if ssl_settings.certificate_id is specified in the update mask.
		 * @param {string} updateMask Required. Standard field mask for the set of fields to be updated.
		 * @return {Operation} Successful response
		 */
		Appengine_apps_domainMappings_patch(appsId: string, domainMappingsId: string, noManagedCertificate: boolean | null | undefined, updateMask: string | null | undefined, requestBody: DomainMapping): Observable<Operation> {
			return this.http.patch<Operation>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/domainMappings/' + (domainMappingsId == null ? '' : encodeURIComponent(domainMappingsId)) + '&noManagedCertificate=' + noManagedCertificate + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists information about the supported locations for this service.
		 * Get v1alpha/apps/{appsId}/locations
		 * @param {string} appsId Part of `name`. The resource that owns the locations collection, if applicable.
		 * @param {string} filter A filter to narrow down results to a preferred subset. The filtering language accepts strings like "displayName=tokyo", and is documented in more detail in AIP-160 (https://google.aip.dev/160).
		 * @param {number} pageSize The maximum number of results to return. If not set, the service selects a default.
		 * @param {string} pageToken A page token received from the next_page_token field in the response. Send that page token to receive the subsequent page.
		 * @return {ListLocationsResponse} Successful response
		 */
		Appengine_apps_locations_list(appsId: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListLocationsResponse> {
			return this.http.get<ListLocationsResponse>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/locations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Gets information about a location.
		 * Get v1alpha/apps/{appsId}/locations/{locationsId}
		 * @param {string} appsId Part of `name`. Resource name for the location.
		 * @param {string} locationsId Part of `name`. See documentation of `appsId`.
		 * @return {Location} Successful response
		 */
		Appengine_apps_locations_get(appsId: string, locationsId: string): Observable<Location> {
			return this.http.get<Location>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/locations/' + (locationsId == null ? '' : encodeURIComponent(locationsId)), {});
		}

		/**
		 * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
		 * Get v1alpha/apps/{appsId}/operations
		 * @param {string} appsId Part of `name`. The name of the operation's parent resource.
		 * @param {string} filter The standard list filter.
		 * @param {number} pageSize The standard list page size.
		 * @param {string} pageToken The standard list page token.
		 * @return {ListOperationsResponse} Successful response
		 */
		Appengine_apps_operations_list(appsId: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListOperationsResponse> {
			return this.http.get<ListOperationsResponse>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		 * Get v1alpha/apps/{appsId}/operations/{operationsId}
		 * @param {string} appsId Part of `name`. The name of the operation resource.
		 * @param {string} operationsId Part of `name`. See documentation of `appsId`.
		 * @return {Operation} Successful response
		 */
		Appengine_apps_operations_get(appsId: string, operationsId: string): Observable<Operation> {
			return this.http.get<Operation>(this.baseUri + 'v1alpha/apps/' + (appsId == null ? '' : encodeURIComponent(appsId)) + '/operations/' + (operationsId == null ? '' : encodeURIComponent(operationsId)), {});
		}

		/**
		 * Lists information about the supported locations for this service.
		 * Get v1alpha/projects/{projectsId}/locations
		 * @param {string} projectsId Part of `name`. The resource that owns the locations collection, if applicable.
		 * @param {string} filter A filter to narrow down results to a preferred subset. The filtering language accepts strings like "displayName=tokyo", and is documented in more detail in AIP-160 (https://google.aip.dev/160).
		 * @param {number} pageSize The maximum number of results to return. If not set, the service selects a default.
		 * @param {string} pageToken A page token received from the next_page_token field in the response. Send that page token to receive the subsequent page.
		 * @return {ListLocationsResponse} Successful response
		 */
		Appengine_projects_locations_list(projectsId: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListLocationsResponse> {
			return this.http.get<ListLocationsResponse>(this.baseUri + 'v1alpha/projects/' + (projectsId == null ? '' : encodeURIComponent(projectsId)) + '/locations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Gets information about a location.
		 * Get v1alpha/projects/{projectsId}/locations/{locationsId}
		 * @param {string} projectsId Part of `name`. Resource name for the location.
		 * @param {string} locationsId Part of `name`. See documentation of `projectsId`.
		 * @return {Location} Successful response
		 */
		Appengine_projects_locations_get(projectsId: string, locationsId: string): Observable<Location> {
			return this.http.get<Location>(this.baseUri + 'v1alpha/projects/' + (projectsId == null ? '' : encodeURIComponent(projectsId)) + '/locations/' + (locationsId == null ? '' : encodeURIComponent(locationsId)), {});
		}

		/**
		 * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
		 * Get v1alpha/projects/{projectsId}/locations/{locationsId}/operations
		 * @param {string} projectsId Part of `name`. The name of the operation's parent resource.
		 * @param {string} locationsId Part of `name`. See documentation of `projectsId`.
		 * @param {string} filter The standard list filter.
		 * @param {number} pageSize The standard list page size.
		 * @param {string} pageToken The standard list page token.
		 * @return {ListOperationsResponse} Successful response
		 */
		Appengine_projects_locations_operations_list(projectsId: string, locationsId: string, filter: string | null | undefined, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListOperationsResponse> {
			return this.http.get<ListOperationsResponse>(this.baseUri + 'v1alpha/projects/' + (projectsId == null ? '' : encodeURIComponent(projectsId)) + '/locations/' + (locationsId == null ? '' : encodeURIComponent(locationsId)) + '/operations&filter=' + (filter == null ? '' : encodeURIComponent(filter)) + '&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		 * Get v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}
		 * @param {string} projectsId Part of `name`. The name of the operation resource.
		 * @param {string} locationsId Part of `name`. See documentation of `projectsId`.
		 * @param {string} operationsId Part of `name`. See documentation of `projectsId`.
		 * @return {Operation} Successful response
		 */
		Appengine_projects_locations_operations_get(projectsId: string, locationsId: string, operationsId: string): Observable<Operation> {
			return this.http.get<Operation>(this.baseUri + 'v1alpha/projects/' + (projectsId == null ? '' : encodeURIComponent(projectsId)) + '/locations/' + (locationsId == null ? '' : encodeURIComponent(locationsId)) + '/operations/' + (operationsId == null ? '' : encodeURIComponent(operationsId)), {});
		}
	}

	export enum Appengine_apps_authorizedCertificates_listView { BASIC_CERTIFICATE = 'BASIC_CERTIFICATE', FULL_CERTIFICATE = 'FULL_CERTIFICATE' }

	export enum Appengine_apps_domainMappings_createOverrideStrategy { UNSPECIFIED_DOMAIN_OVERRIDE_STRATEGY = 'UNSPECIFIED_DOMAIN_OVERRIDE_STRATEGY', STRICT = 'STRICT', OVERRIDE = 'OVERRIDE' }

}

