import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** The AlertLog resource is a chronological record of all the alerts that have been triggered, including the status of each alert. */
	export interface AlertLog_get {

		/** The reason why the dispatch of the alert failed. */
		alertLogErrorMessage?: string | null;

		/** The id of the successfully dispatched message as received from the transport that was used. */
		alertLogMessageId?: string | null;

		/** The status of the alert log. */
		alertLogStatusCode?: string | null;

		/** The alert service that is related to this resource. */
		alertService?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The monitor that is related to this resource instance. */
		monitor?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The ping that triggered this resource instance. */
		ping?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters. */
		webhookResponseBody?: string | null;

		/** The response headers returned by a successful request to a webhook URL. */
		webhookResponseHeaders?: Array<string>;
	}

	/** The AlertLog resource is a chronological record of all the alerts that have been triggered, including the status of each alert. */
	export interface AlertLog_getFormProperties {

		/** The reason why the dispatch of the alert failed. */
		alertLogErrorMessage: FormControl<string | null | undefined>,

		/** The id of the successfully dispatched message as received from the transport that was used. */
		alertLogMessageId: FormControl<string | null | undefined>,

		/** The status of the alert log. */
		alertLogStatusCode: FormControl<string | null | undefined>,

		/** The alert service that is related to this resource. */
		alertService: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The monitor that is related to this resource instance. */
		monitor: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The ping that triggered this resource instance. */
		ping: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/** The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters. */
		webhookResponseBody: FormControl<string | null | undefined>,
	}
	export function CreateAlertLog_getFormGroup() {
		return new FormGroup<AlertLog_getFormProperties>({
			alertLogErrorMessage: new FormControl<string | null | undefined>(undefined),
			alertLogMessageId: new FormControl<string | null | undefined>(undefined),
			alertLogStatusCode: new FormControl<string | null | undefined>(undefined),
			alertService: new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			ping: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			webhookResponseBody: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertLog resource is a chronological record of all the alerts that have been triggered, including the status of each alert. */
	export interface AlertLogjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** The reason why the dispatch of the alert failed. */
		alertLogErrorMessage?: string | null;

		/** The id of the successfully dispatched message as received from the transport that was used. */
		alertLogMessageId?: string | null;

		/** The status of the alert log. */
		alertLogStatusCode?: string | null;

		/** The alert service that is related to this resource. */
		alertService?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The monitor that is related to this resource instance. */
		monitor?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The ping that triggered this resource instance. */
		ping?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters. */
		webhookResponseBody?: string | null;

		/** The response headers returned by a successful request to a webhook URL. */
		webhookResponseHeaders?: Array<string>;
	}

	/** The AlertLog resource is a chronological record of all the alerts that have been triggered, including the status of each alert. */
	export interface AlertLogjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** The reason why the dispatch of the alert failed. */
		alertLogErrorMessage: FormControl<string | null | undefined>,

		/** The id of the successfully dispatched message as received from the transport that was used. */
		alertLogMessageId: FormControl<string | null | undefined>,

		/** The status of the alert log. */
		alertLogStatusCode: FormControl<string | null | undefined>,

		/** The alert service that is related to this resource. */
		alertService: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The monitor that is related to this resource instance. */
		monitor: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The ping that triggered this resource instance. */
		ping: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/** The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters. */
		webhookResponseBody: FormControl<string | null | undefined>,
	}
	export function CreateAlertLogjsonld_getFormGroup() {
		return new FormGroup<AlertLogjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			alertLogErrorMessage: new FormControl<string | null | undefined>(undefined),
			alertLogMessageId: new FormControl<string | null | undefined>(undefined),
			alertLogStatusCode: new FormControl<string | null | undefined>(undefined),
			alertService: new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			ping: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			webhookResponseBody: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertLogStatusCode resource is a set of codes that describes the outcomes of the dispatching of an alert. */
	export interface AlertLogStatusCode_get {
		id?: string | null;
	}

	/** The AlertLogStatusCode resource is a set of codes that describes the outcomes of the dispatching of an alert. */
	export interface AlertLogStatusCode_getFormProperties {
		id: FormControl<string | null | undefined>,
	}
	export function CreateAlertLogStatusCode_getFormGroup() {
		return new FormGroup<AlertLogStatusCode_getFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertLogStatusCode resource is a set of codes that describes the outcomes of the dispatching of an alert. */
	export interface AlertLogStatusCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;
		id?: string | null;
	}

	/** The AlertLogStatusCode resource is a set of codes that describes the outcomes of the dispatching of an alert. */
	export interface AlertLogStatusCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateAlertLogStatusCodejsonld_getFormGroup() {
		return new FormGroup<AlertLogStatusCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_get {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: string;

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes?: string | null;

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert. */
		creditsPerTransportAlert?: number | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** Media objects that must be sent with each alert. Only applicable when you use your own email alert services. */
		mediaObjects?: Array<string>;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: string;

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
		transportAlerta?: string | null;
		transportAllMySms?: string | null;
		transportAmazonSns?: string | null;
		transportBandwidth?: string | null;
		transportChatwork?: string | null;
		transportClickSend?: string | null;
		transportClickatell?: string | null;
		transportContactEveryone?: string | null;
		transportDiscord?: string | null;
		transportEmail?: string | null;
		transportEngagespot?: string | null;
		transportEsendex?: string | null;
		transportExpo?: string | null;
		transportFirebase?: string | null;
		transportFortySixElks?: string | null;
		transportFreeMobile?: string | null;
		transportFreshdesk?: string | null;
		transportGatewayApi?: string | null;
		transportGitter?: string | null;
		transportGoogleChat?: string | null;
		transportGotify?: string | null;
		transportHelpScout?: string | null;
		transportInfobip?: string | null;
		transportIqsms?: string | null;
		transportKazInfoTeh?: string | null;
		transportLightSms?: string | null;
		transportLineNotify?: string | null;
		transportLinkedIn?: string | null;
		transportMailjet?: string | null;
		transportMastodon?: string | null;
		transportMattermost?: string | null;
		transportMercure?: string | null;
		transportMessageBird?: string | null;
		transportMessageMedia?: string | null;
		transportMicrosoftTeams?: string | null;
		transportMobyt?: string | null;
		transportOctopush?: string | null;
		transportOneSignal?: string | null;
		transportOpsgenie?: string | null;
		transportOrangeSms?: string | null;
		transportOvhCloud?: string | null;
		transportPagerDuty?: string | null;
		transportPagerTree?: string | null;
		transportPlivo?: string | null;
		transportPushbullet?: string | null;
		transportPushover?: string | null;
		transportPushy?: string | null;
		transportRingCentral?: string | null;
		transportRocketChat?: string | null;
		transportSendberry?: string | null;
		transportSendinblue?: string | null;
		transportSimpleTextin?: string | null;
		transportSinch?: string | null;
		transportSlack?: string | null;
		transportSms77?: string | null;
		transportSmsBiuras?: string | null;
		transportSmsFactor?: string | null;
		transportSmsapi?: string | null;
		transportSmsc?: string | null;
		transportSmsmode?: string | null;
		transportSpotHit?: string | null;
		transportTelegram?: string | null;
		transportTelnyx?: string | null;
		transportTermii?: string | null;
		transportTrello?: string | null;
		transportTurboSms?: string | null;
		transportTwilio?: string | null;
		transportTwitter?: string | null;
		transportVonage?: string | null;
		transportWebhook?: string | null;
		transportYunpian?: string | null;
		transportZendesk?: string | null;
		transportZulip?: string | null;
	}

	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_getFormProperties {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: FormControl<string | null | undefined>,

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes: FormControl<string | null | undefined>,

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert. */
		creditsPerTransportAlert: FormControl<number | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: FormControl<string | null | undefined>,

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
		transportAlerta: FormControl<string | null | undefined>,
		transportAllMySms: FormControl<string | null | undefined>,
		transportAmazonSns: FormControl<string | null | undefined>,
		transportBandwidth: FormControl<string | null | undefined>,
		transportChatwork: FormControl<string | null | undefined>,
		transportClickSend: FormControl<string | null | undefined>,
		transportClickatell: FormControl<string | null | undefined>,
		transportContactEveryone: FormControl<string | null | undefined>,
		transportDiscord: FormControl<string | null | undefined>,
		transportEmail: FormControl<string | null | undefined>,
		transportEngagespot: FormControl<string | null | undefined>,
		transportEsendex: FormControl<string | null | undefined>,
		transportExpo: FormControl<string | null | undefined>,
		transportFirebase: FormControl<string | null | undefined>,
		transportFortySixElks: FormControl<string | null | undefined>,
		transportFreeMobile: FormControl<string | null | undefined>,
		transportFreshdesk: FormControl<string | null | undefined>,
		transportGatewayApi: FormControl<string | null | undefined>,
		transportGitter: FormControl<string | null | undefined>,
		transportGoogleChat: FormControl<string | null | undefined>,
		transportGotify: FormControl<string | null | undefined>,
		transportHelpScout: FormControl<string | null | undefined>,
		transportInfobip: FormControl<string | null | undefined>,
		transportIqsms: FormControl<string | null | undefined>,
		transportKazInfoTeh: FormControl<string | null | undefined>,
		transportLightSms: FormControl<string | null | undefined>,
		transportLineNotify: FormControl<string | null | undefined>,
		transportLinkedIn: FormControl<string | null | undefined>,
		transportMailjet: FormControl<string | null | undefined>,
		transportMastodon: FormControl<string | null | undefined>,
		transportMattermost: FormControl<string | null | undefined>,
		transportMercure: FormControl<string | null | undefined>,
		transportMessageBird: FormControl<string | null | undefined>,
		transportMessageMedia: FormControl<string | null | undefined>,
		transportMicrosoftTeams: FormControl<string | null | undefined>,
		transportMobyt: FormControl<string | null | undefined>,
		transportOctopush: FormControl<string | null | undefined>,
		transportOneSignal: FormControl<string | null | undefined>,
		transportOpsgenie: FormControl<string | null | undefined>,
		transportOrangeSms: FormControl<string | null | undefined>,
		transportOvhCloud: FormControl<string | null | undefined>,
		transportPagerDuty: FormControl<string | null | undefined>,
		transportPagerTree: FormControl<string | null | undefined>,
		transportPlivo: FormControl<string | null | undefined>,
		transportPushbullet: FormControl<string | null | undefined>,
		transportPushover: FormControl<string | null | undefined>,
		transportPushy: FormControl<string | null | undefined>,
		transportRingCentral: FormControl<string | null | undefined>,
		transportRocketChat: FormControl<string | null | undefined>,
		transportSendberry: FormControl<string | null | undefined>,
		transportSendinblue: FormControl<string | null | undefined>,
		transportSimpleTextin: FormControl<string | null | undefined>,
		transportSinch: FormControl<string | null | undefined>,
		transportSlack: FormControl<string | null | undefined>,
		transportSms77: FormControl<string | null | undefined>,
		transportSmsBiuras: FormControl<string | null | undefined>,
		transportSmsFactor: FormControl<string | null | undefined>,
		transportSmsapi: FormControl<string | null | undefined>,
		transportSmsc: FormControl<string | null | undefined>,
		transportSmsmode: FormControl<string | null | undefined>,
		transportSpotHit: FormControl<string | null | undefined>,
		transportTelegram: FormControl<string | null | undefined>,
		transportTelnyx: FormControl<string | null | undefined>,
		transportTermii: FormControl<string | null | undefined>,
		transportTrello: FormControl<string | null | undefined>,
		transportTurboSms: FormControl<string | null | undefined>,
		transportTwilio: FormControl<string | null | undefined>,
		transportTwitter: FormControl<string | null | undefined>,
		transportVonage: FormControl<string | null | undefined>,
		transportWebhook: FormControl<string | null | undefined>,
		transportYunpian: FormControl<string | null | undefined>,
		transportZendesk: FormControl<string | null | undefined>,
		transportZulip: FormControl<string | null | undefined>,
	}
	export function CreateAlertService_getFormGroup() {
		return new FormGroup<AlertService_getFormProperties>({
			alertServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertServiceNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			alertServiceTransportCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			creditsPerTransportAlert: new FormControl<number | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipientEmailAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			recipientPhoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportAlerta: new FormControl<string | null | undefined>(undefined),
			transportAllMySms: new FormControl<string | null | undefined>(undefined),
			transportAmazonSns: new FormControl<string | null | undefined>(undefined),
			transportBandwidth: new FormControl<string | null | undefined>(undefined),
			transportChatwork: new FormControl<string | null | undefined>(undefined),
			transportClickSend: new FormControl<string | null | undefined>(undefined),
			transportClickatell: new FormControl<string | null | undefined>(undefined),
			transportContactEveryone: new FormControl<string | null | undefined>(undefined),
			transportDiscord: new FormControl<string | null | undefined>(undefined),
			transportEmail: new FormControl<string | null | undefined>(undefined),
			transportEngagespot: new FormControl<string | null | undefined>(undefined),
			transportEsendex: new FormControl<string | null | undefined>(undefined),
			transportExpo: new FormControl<string | null | undefined>(undefined),
			transportFirebase: new FormControl<string | null | undefined>(undefined),
			transportFortySixElks: new FormControl<string | null | undefined>(undefined),
			transportFreeMobile: new FormControl<string | null | undefined>(undefined),
			transportFreshdesk: new FormControl<string | null | undefined>(undefined),
			transportGatewayApi: new FormControl<string | null | undefined>(undefined),
			transportGitter: new FormControl<string | null | undefined>(undefined),
			transportGoogleChat: new FormControl<string | null | undefined>(undefined),
			transportGotify: new FormControl<string | null | undefined>(undefined),
			transportHelpScout: new FormControl<string | null | undefined>(undefined),
			transportInfobip: new FormControl<string | null | undefined>(undefined),
			transportIqsms: new FormControl<string | null | undefined>(undefined),
			transportKazInfoTeh: new FormControl<string | null | undefined>(undefined),
			transportLightSms: new FormControl<string | null | undefined>(undefined),
			transportLineNotify: new FormControl<string | null | undefined>(undefined),
			transportLinkedIn: new FormControl<string | null | undefined>(undefined),
			transportMailjet: new FormControl<string | null | undefined>(undefined),
			transportMastodon: new FormControl<string | null | undefined>(undefined),
			transportMattermost: new FormControl<string | null | undefined>(undefined),
			transportMercure: new FormControl<string | null | undefined>(undefined),
			transportMessageBird: new FormControl<string | null | undefined>(undefined),
			transportMessageMedia: new FormControl<string | null | undefined>(undefined),
			transportMicrosoftTeams: new FormControl<string | null | undefined>(undefined),
			transportMobyt: new FormControl<string | null | undefined>(undefined),
			transportOctopush: new FormControl<string | null | undefined>(undefined),
			transportOneSignal: new FormControl<string | null | undefined>(undefined),
			transportOpsgenie: new FormControl<string | null | undefined>(undefined),
			transportOrangeSms: new FormControl<string | null | undefined>(undefined),
			transportOvhCloud: new FormControl<string | null | undefined>(undefined),
			transportPagerDuty: new FormControl<string | null | undefined>(undefined),
			transportPagerTree: new FormControl<string | null | undefined>(undefined),
			transportPlivo: new FormControl<string | null | undefined>(undefined),
			transportPushbullet: new FormControl<string | null | undefined>(undefined),
			transportPushover: new FormControl<string | null | undefined>(undefined),
			transportPushy: new FormControl<string | null | undefined>(undefined),
			transportRingCentral: new FormControl<string | null | undefined>(undefined),
			transportRocketChat: new FormControl<string | null | undefined>(undefined),
			transportSendberry: new FormControl<string | null | undefined>(undefined),
			transportSendinblue: new FormControl<string | null | undefined>(undefined),
			transportSimpleTextin: new FormControl<string | null | undefined>(undefined),
			transportSinch: new FormControl<string | null | undefined>(undefined),
			transportSlack: new FormControl<string | null | undefined>(undefined),
			transportSms77: new FormControl<string | null | undefined>(undefined),
			transportSmsBiuras: new FormControl<string | null | undefined>(undefined),
			transportSmsFactor: new FormControl<string | null | undefined>(undefined),
			transportSmsapi: new FormControl<string | null | undefined>(undefined),
			transportSmsc: new FormControl<string | null | undefined>(undefined),
			transportSmsmode: new FormControl<string | null | undefined>(undefined),
			transportSpotHit: new FormControl<string | null | undefined>(undefined),
			transportTelegram: new FormControl<string | null | undefined>(undefined),
			transportTelnyx: new FormControl<string | null | undefined>(undefined),
			transportTermii: new FormControl<string | null | undefined>(undefined),
			transportTrello: new FormControl<string | null | undefined>(undefined),
			transportTurboSms: new FormControl<string | null | undefined>(undefined),
			transportTwilio: new FormControl<string | null | undefined>(undefined),
			transportTwitter: new FormControl<string | null | undefined>(undefined),
			transportVonage: new FormControl<string | null | undefined>(undefined),
			transportWebhook: new FormControl<string | null | undefined>(undefined),
			transportYunpian: new FormControl<string | null | undefined>(undefined),
			transportZendesk: new FormControl<string | null | undefined>(undefined),
			transportZulip: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_patch {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: string;

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** Media objects that must be sent with each alert. Only applicable when you use your own email alert services. */
		mediaObjects?: Array<string>;

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: string;

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: string;
		transportAlerta?: string | null;
		transportAllMySms?: string | null;
		transportAmazonSns?: string | null;
		transportBandwidth?: string | null;
		transportChatwork?: string | null;
		transportClickSend?: string | null;
		transportClickatell?: string | null;
		transportContactEveryone?: string | null;
		transportDiscord?: string | null;
		transportEmail?: string | null;
		transportEngagespot?: string | null;
		transportEsendex?: string | null;
		transportExpo?: string | null;
		transportFirebase?: string | null;
		transportFortySixElks?: string | null;
		transportFreeMobile?: string | null;
		transportFreshdesk?: string | null;
		transportGatewayApi?: string | null;
		transportGitter?: string | null;
		transportGoogleChat?: string | null;
		transportGotify?: string | null;
		transportHelpScout?: string | null;
		transportInfobip?: string | null;
		transportIqsms?: string | null;
		transportKazInfoTeh?: string | null;
		transportLightSms?: string | null;
		transportLineNotify?: string | null;
		transportLinkedIn?: string | null;
		transportMailjet?: string | null;
		transportMastodon?: string | null;
		transportMattermost?: string | null;
		transportMercure?: string | null;
		transportMessageBird?: string | null;
		transportMessageMedia?: string | null;
		transportMicrosoftTeams?: string | null;
		transportMobyt?: string | null;
		transportOctopush?: string | null;
		transportOneSignal?: string | null;
		transportOpsgenie?: string | null;
		transportOrangeSms?: string | null;
		transportOvhCloud?: string | null;
		transportPagerDuty?: string | null;
		transportPagerTree?: string | null;
		transportPlivo?: string | null;
		transportPushbullet?: string | null;
		transportPushover?: string | null;
		transportPushy?: string | null;
		transportRingCentral?: string | null;
		transportRocketChat?: string | null;
		transportSendberry?: string | null;
		transportSendinblue?: string | null;
		transportSimpleTextin?: string | null;
		transportSinch?: string | null;
		transportSlack?: string | null;
		transportSms77?: string | null;
		transportSmsBiuras?: string | null;
		transportSmsFactor?: string | null;
		transportSmsapi?: string | null;
		transportSmsc?: string | null;
		transportSmsmode?: string | null;
		transportSpotHit?: string | null;
		transportTelegram?: string | null;
		transportTelnyx?: string | null;
		transportTermii?: string | null;
		transportTrello?: string | null;
		transportTurboSms?: string | null;
		transportTwilio?: string | null;
		transportTwitter?: string | null;
		transportVonage?: string | null;
		transportWebhook?: string | null;
		transportYunpian?: string | null;
		transportZendesk?: string | null;
		transportZulip?: string | null;
	}

	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_patchFormProperties {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: FormControl<string | null | undefined>,

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: FormControl<string | null | undefined>,

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: FormControl<string | null | undefined>,
		transportAlerta: FormControl<string | null | undefined>,
		transportAllMySms: FormControl<string | null | undefined>,
		transportAmazonSns: FormControl<string | null | undefined>,
		transportBandwidth: FormControl<string | null | undefined>,
		transportChatwork: FormControl<string | null | undefined>,
		transportClickSend: FormControl<string | null | undefined>,
		transportClickatell: FormControl<string | null | undefined>,
		transportContactEveryone: FormControl<string | null | undefined>,
		transportDiscord: FormControl<string | null | undefined>,
		transportEmail: FormControl<string | null | undefined>,
		transportEngagespot: FormControl<string | null | undefined>,
		transportEsendex: FormControl<string | null | undefined>,
		transportExpo: FormControl<string | null | undefined>,
		transportFirebase: FormControl<string | null | undefined>,
		transportFortySixElks: FormControl<string | null | undefined>,
		transportFreeMobile: FormControl<string | null | undefined>,
		transportFreshdesk: FormControl<string | null | undefined>,
		transportGatewayApi: FormControl<string | null | undefined>,
		transportGitter: FormControl<string | null | undefined>,
		transportGoogleChat: FormControl<string | null | undefined>,
		transportGotify: FormControl<string | null | undefined>,
		transportHelpScout: FormControl<string | null | undefined>,
		transportInfobip: FormControl<string | null | undefined>,
		transportIqsms: FormControl<string | null | undefined>,
		transportKazInfoTeh: FormControl<string | null | undefined>,
		transportLightSms: FormControl<string | null | undefined>,
		transportLineNotify: FormControl<string | null | undefined>,
		transportLinkedIn: FormControl<string | null | undefined>,
		transportMailjet: FormControl<string | null | undefined>,
		transportMastodon: FormControl<string | null | undefined>,
		transportMattermost: FormControl<string | null | undefined>,
		transportMercure: FormControl<string | null | undefined>,
		transportMessageBird: FormControl<string | null | undefined>,
		transportMessageMedia: FormControl<string | null | undefined>,
		transportMicrosoftTeams: FormControl<string | null | undefined>,
		transportMobyt: FormControl<string | null | undefined>,
		transportOctopush: FormControl<string | null | undefined>,
		transportOneSignal: FormControl<string | null | undefined>,
		transportOpsgenie: FormControl<string | null | undefined>,
		transportOrangeSms: FormControl<string | null | undefined>,
		transportOvhCloud: FormControl<string | null | undefined>,
		transportPagerDuty: FormControl<string | null | undefined>,
		transportPagerTree: FormControl<string | null | undefined>,
		transportPlivo: FormControl<string | null | undefined>,
		transportPushbullet: FormControl<string | null | undefined>,
		transportPushover: FormControl<string | null | undefined>,
		transportPushy: FormControl<string | null | undefined>,
		transportRingCentral: FormControl<string | null | undefined>,
		transportRocketChat: FormControl<string | null | undefined>,
		transportSendberry: FormControl<string | null | undefined>,
		transportSendinblue: FormControl<string | null | undefined>,
		transportSimpleTextin: FormControl<string | null | undefined>,
		transportSinch: FormControl<string | null | undefined>,
		transportSlack: FormControl<string | null | undefined>,
		transportSms77: FormControl<string | null | undefined>,
		transportSmsBiuras: FormControl<string | null | undefined>,
		transportSmsFactor: FormControl<string | null | undefined>,
		transportSmsapi: FormControl<string | null | undefined>,
		transportSmsc: FormControl<string | null | undefined>,
		transportSmsmode: FormControl<string | null | undefined>,
		transportSpotHit: FormControl<string | null | undefined>,
		transportTelegram: FormControl<string | null | undefined>,
		transportTelnyx: FormControl<string | null | undefined>,
		transportTermii: FormControl<string | null | undefined>,
		transportTrello: FormControl<string | null | undefined>,
		transportTurboSms: FormControl<string | null | undefined>,
		transportTwilio: FormControl<string | null | undefined>,
		transportTwitter: FormControl<string | null | undefined>,
		transportVonage: FormControl<string | null | undefined>,
		transportWebhook: FormControl<string | null | undefined>,
		transportYunpian: FormControl<string | null | undefined>,
		transportZendesk: FormControl<string | null | undefined>,
		transportZulip: FormControl<string | null | undefined>,
	}
	export function CreateAlertService_patchFormGroup() {
		return new FormGroup<AlertService_patchFormProperties>({
			alertServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertServiceNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			recipientEmailAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			recipientPhoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportAlerta: new FormControl<string | null | undefined>(undefined),
			transportAllMySms: new FormControl<string | null | undefined>(undefined),
			transportAmazonSns: new FormControl<string | null | undefined>(undefined),
			transportBandwidth: new FormControl<string | null | undefined>(undefined),
			transportChatwork: new FormControl<string | null | undefined>(undefined),
			transportClickSend: new FormControl<string | null | undefined>(undefined),
			transportClickatell: new FormControl<string | null | undefined>(undefined),
			transportContactEveryone: new FormControl<string | null | undefined>(undefined),
			transportDiscord: new FormControl<string | null | undefined>(undefined),
			transportEmail: new FormControl<string | null | undefined>(undefined),
			transportEngagespot: new FormControl<string | null | undefined>(undefined),
			transportEsendex: new FormControl<string | null | undefined>(undefined),
			transportExpo: new FormControl<string | null | undefined>(undefined),
			transportFirebase: new FormControl<string | null | undefined>(undefined),
			transportFortySixElks: new FormControl<string | null | undefined>(undefined),
			transportFreeMobile: new FormControl<string | null | undefined>(undefined),
			transportFreshdesk: new FormControl<string | null | undefined>(undefined),
			transportGatewayApi: new FormControl<string | null | undefined>(undefined),
			transportGitter: new FormControl<string | null | undefined>(undefined),
			transportGoogleChat: new FormControl<string | null | undefined>(undefined),
			transportGotify: new FormControl<string | null | undefined>(undefined),
			transportHelpScout: new FormControl<string | null | undefined>(undefined),
			transportInfobip: new FormControl<string | null | undefined>(undefined),
			transportIqsms: new FormControl<string | null | undefined>(undefined),
			transportKazInfoTeh: new FormControl<string | null | undefined>(undefined),
			transportLightSms: new FormControl<string | null | undefined>(undefined),
			transportLineNotify: new FormControl<string | null | undefined>(undefined),
			transportLinkedIn: new FormControl<string | null | undefined>(undefined),
			transportMailjet: new FormControl<string | null | undefined>(undefined),
			transportMastodon: new FormControl<string | null | undefined>(undefined),
			transportMattermost: new FormControl<string | null | undefined>(undefined),
			transportMercure: new FormControl<string | null | undefined>(undefined),
			transportMessageBird: new FormControl<string | null | undefined>(undefined),
			transportMessageMedia: new FormControl<string | null | undefined>(undefined),
			transportMicrosoftTeams: new FormControl<string | null | undefined>(undefined),
			transportMobyt: new FormControl<string | null | undefined>(undefined),
			transportOctopush: new FormControl<string | null | undefined>(undefined),
			transportOneSignal: new FormControl<string | null | undefined>(undefined),
			transportOpsgenie: new FormControl<string | null | undefined>(undefined),
			transportOrangeSms: new FormControl<string | null | undefined>(undefined),
			transportOvhCloud: new FormControl<string | null | undefined>(undefined),
			transportPagerDuty: new FormControl<string | null | undefined>(undefined),
			transportPagerTree: new FormControl<string | null | undefined>(undefined),
			transportPlivo: new FormControl<string | null | undefined>(undefined),
			transportPushbullet: new FormControl<string | null | undefined>(undefined),
			transportPushover: new FormControl<string | null | undefined>(undefined),
			transportPushy: new FormControl<string | null | undefined>(undefined),
			transportRingCentral: new FormControl<string | null | undefined>(undefined),
			transportRocketChat: new FormControl<string | null | undefined>(undefined),
			transportSendberry: new FormControl<string | null | undefined>(undefined),
			transportSendinblue: new FormControl<string | null | undefined>(undefined),
			transportSimpleTextin: new FormControl<string | null | undefined>(undefined),
			transportSinch: new FormControl<string | null | undefined>(undefined),
			transportSlack: new FormControl<string | null | undefined>(undefined),
			transportSms77: new FormControl<string | null | undefined>(undefined),
			transportSmsBiuras: new FormControl<string | null | undefined>(undefined),
			transportSmsFactor: new FormControl<string | null | undefined>(undefined),
			transportSmsapi: new FormControl<string | null | undefined>(undefined),
			transportSmsc: new FormControl<string | null | undefined>(undefined),
			transportSmsmode: new FormControl<string | null | undefined>(undefined),
			transportSpotHit: new FormControl<string | null | undefined>(undefined),
			transportTelegram: new FormControl<string | null | undefined>(undefined),
			transportTelnyx: new FormControl<string | null | undefined>(undefined),
			transportTermii: new FormControl<string | null | undefined>(undefined),
			transportTrello: new FormControl<string | null | undefined>(undefined),
			transportTurboSms: new FormControl<string | null | undefined>(undefined),
			transportTwilio: new FormControl<string | null | undefined>(undefined),
			transportTwitter: new FormControl<string | null | undefined>(undefined),
			transportVonage: new FormControl<string | null | undefined>(undefined),
			transportWebhook: new FormControl<string | null | undefined>(undefined),
			transportYunpian: new FormControl<string | null | undefined>(undefined),
			transportZendesk: new FormControl<string | null | undefined>(undefined),
			transportZulip: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_post {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: string;

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes?: string | null;

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** Media objects that must be sent with each alert. Only applicable when you use your own email alert services. */
		mediaObjects?: Array<string>;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: string;

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: string;
		transportAlerta?: string | null;
		transportAllMySms?: string | null;
		transportAmazonSns?: string | null;
		transportBandwidth?: string | null;
		transportChatwork?: string | null;
		transportClickSend?: string | null;
		transportClickatell?: string | null;
		transportContactEveryone?: string | null;
		transportDiscord?: string | null;
		transportEmail?: string | null;
		transportEngagespot?: string | null;
		transportEsendex?: string | null;
		transportExpo?: string | null;
		transportFirebase?: string | null;
		transportFortySixElks?: string | null;
		transportFreeMobile?: string | null;
		transportFreshdesk?: string | null;
		transportGatewayApi?: string | null;
		transportGitter?: string | null;
		transportGoogleChat?: string | null;
		transportGotify?: string | null;
		transportHelpScout?: string | null;
		transportInfobip?: string | null;
		transportIqsms?: string | null;
		transportKazInfoTeh?: string | null;
		transportLightSms?: string | null;
		transportLineNotify?: string | null;
		transportLinkedIn?: string | null;
		transportMailjet?: string | null;
		transportMastodon?: string | null;
		transportMattermost?: string | null;
		transportMercure?: string | null;
		transportMessageBird?: string | null;
		transportMessageMedia?: string | null;
		transportMicrosoftTeams?: string | null;
		transportMobyt?: string | null;
		transportOctopush?: string | null;
		transportOneSignal?: string | null;
		transportOpsgenie?: string | null;
		transportOrangeSms?: string | null;
		transportOvhCloud?: string | null;
		transportPagerDuty?: string | null;
		transportPagerTree?: string | null;
		transportPlivo?: string | null;
		transportPushbullet?: string | null;
		transportPushover?: string | null;
		transportPushy?: string | null;
		transportRingCentral?: string | null;
		transportRocketChat?: string | null;
		transportSendberry?: string | null;
		transportSendinblue?: string | null;
		transportSimpleTextin?: string | null;
		transportSinch?: string | null;
		transportSlack?: string | null;
		transportSms77?: string | null;
		transportSmsBiuras?: string | null;
		transportSmsFactor?: string | null;
		transportSmsapi?: string | null;
		transportSmsc?: string | null;
		transportSmsmode?: string | null;
		transportSpotHit?: string | null;
		transportTelegram?: string | null;
		transportTelnyx?: string | null;
		transportTermii?: string | null;
		transportTrello?: string | null;
		transportTurboSms?: string | null;
		transportTwilio?: string | null;
		transportTwitter?: string | null;
		transportVonage?: string | null;
		transportWebhook?: string | null;
		transportYunpian?: string | null;
		transportZendesk?: string | null;
		transportZulip?: string | null;
	}

	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_postFormProperties {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: FormControl<string | null | undefined>,

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes: FormControl<string | null | undefined>,

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: FormControl<string | null | undefined>,

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: FormControl<string | null | undefined>,
		transportAlerta: FormControl<string | null | undefined>,
		transportAllMySms: FormControl<string | null | undefined>,
		transportAmazonSns: FormControl<string | null | undefined>,
		transportBandwidth: FormControl<string | null | undefined>,
		transportChatwork: FormControl<string | null | undefined>,
		transportClickSend: FormControl<string | null | undefined>,
		transportClickatell: FormControl<string | null | undefined>,
		transportContactEveryone: FormControl<string | null | undefined>,
		transportDiscord: FormControl<string | null | undefined>,
		transportEmail: FormControl<string | null | undefined>,
		transportEngagespot: FormControl<string | null | undefined>,
		transportEsendex: FormControl<string | null | undefined>,
		transportExpo: FormControl<string | null | undefined>,
		transportFirebase: FormControl<string | null | undefined>,
		transportFortySixElks: FormControl<string | null | undefined>,
		transportFreeMobile: FormControl<string | null | undefined>,
		transportFreshdesk: FormControl<string | null | undefined>,
		transportGatewayApi: FormControl<string | null | undefined>,
		transportGitter: FormControl<string | null | undefined>,
		transportGoogleChat: FormControl<string | null | undefined>,
		transportGotify: FormControl<string | null | undefined>,
		transportHelpScout: FormControl<string | null | undefined>,
		transportInfobip: FormControl<string | null | undefined>,
		transportIqsms: FormControl<string | null | undefined>,
		transportKazInfoTeh: FormControl<string | null | undefined>,
		transportLightSms: FormControl<string | null | undefined>,
		transportLineNotify: FormControl<string | null | undefined>,
		transportLinkedIn: FormControl<string | null | undefined>,
		transportMailjet: FormControl<string | null | undefined>,
		transportMastodon: FormControl<string | null | undefined>,
		transportMattermost: FormControl<string | null | undefined>,
		transportMercure: FormControl<string | null | undefined>,
		transportMessageBird: FormControl<string | null | undefined>,
		transportMessageMedia: FormControl<string | null | undefined>,
		transportMicrosoftTeams: FormControl<string | null | undefined>,
		transportMobyt: FormControl<string | null | undefined>,
		transportOctopush: FormControl<string | null | undefined>,
		transportOneSignal: FormControl<string | null | undefined>,
		transportOpsgenie: FormControl<string | null | undefined>,
		transportOrangeSms: FormControl<string | null | undefined>,
		transportOvhCloud: FormControl<string | null | undefined>,
		transportPagerDuty: FormControl<string | null | undefined>,
		transportPagerTree: FormControl<string | null | undefined>,
		transportPlivo: FormControl<string | null | undefined>,
		transportPushbullet: FormControl<string | null | undefined>,
		transportPushover: FormControl<string | null | undefined>,
		transportPushy: FormControl<string | null | undefined>,
		transportRingCentral: FormControl<string | null | undefined>,
		transportRocketChat: FormControl<string | null | undefined>,
		transportSendberry: FormControl<string | null | undefined>,
		transportSendinblue: FormControl<string | null | undefined>,
		transportSimpleTextin: FormControl<string | null | undefined>,
		transportSinch: FormControl<string | null | undefined>,
		transportSlack: FormControl<string | null | undefined>,
		transportSms77: FormControl<string | null | undefined>,
		transportSmsBiuras: FormControl<string | null | undefined>,
		transportSmsFactor: FormControl<string | null | undefined>,
		transportSmsapi: FormControl<string | null | undefined>,
		transportSmsc: FormControl<string | null | undefined>,
		transportSmsmode: FormControl<string | null | undefined>,
		transportSpotHit: FormControl<string | null | undefined>,
		transportTelegram: FormControl<string | null | undefined>,
		transportTelnyx: FormControl<string | null | undefined>,
		transportTermii: FormControl<string | null | undefined>,
		transportTrello: FormControl<string | null | undefined>,
		transportTurboSms: FormControl<string | null | undefined>,
		transportTwilio: FormControl<string | null | undefined>,
		transportTwitter: FormControl<string | null | undefined>,
		transportVonage: FormControl<string | null | undefined>,
		transportWebhook: FormControl<string | null | undefined>,
		transportYunpian: FormControl<string | null | undefined>,
		transportZendesk: FormControl<string | null | undefined>,
		transportZulip: FormControl<string | null | undefined>,
	}
	export function CreateAlertService_postFormGroup() {
		return new FormGroup<AlertService_postFormProperties>({
			alertServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertServiceNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			alertServiceTransportCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipientEmailAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			recipientPhoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportAlerta: new FormControl<string | null | undefined>(undefined),
			transportAllMySms: new FormControl<string | null | undefined>(undefined),
			transportAmazonSns: new FormControl<string | null | undefined>(undefined),
			transportBandwidth: new FormControl<string | null | undefined>(undefined),
			transportChatwork: new FormControl<string | null | undefined>(undefined),
			transportClickSend: new FormControl<string | null | undefined>(undefined),
			transportClickatell: new FormControl<string | null | undefined>(undefined),
			transportContactEveryone: new FormControl<string | null | undefined>(undefined),
			transportDiscord: new FormControl<string | null | undefined>(undefined),
			transportEmail: new FormControl<string | null | undefined>(undefined),
			transportEngagespot: new FormControl<string | null | undefined>(undefined),
			transportEsendex: new FormControl<string | null | undefined>(undefined),
			transportExpo: new FormControl<string | null | undefined>(undefined),
			transportFirebase: new FormControl<string | null | undefined>(undefined),
			transportFortySixElks: new FormControl<string | null | undefined>(undefined),
			transportFreeMobile: new FormControl<string | null | undefined>(undefined),
			transportFreshdesk: new FormControl<string | null | undefined>(undefined),
			transportGatewayApi: new FormControl<string | null | undefined>(undefined),
			transportGitter: new FormControl<string | null | undefined>(undefined),
			transportGoogleChat: new FormControl<string | null | undefined>(undefined),
			transportGotify: new FormControl<string | null | undefined>(undefined),
			transportHelpScout: new FormControl<string | null | undefined>(undefined),
			transportInfobip: new FormControl<string | null | undefined>(undefined),
			transportIqsms: new FormControl<string | null | undefined>(undefined),
			transportKazInfoTeh: new FormControl<string | null | undefined>(undefined),
			transportLightSms: new FormControl<string | null | undefined>(undefined),
			transportLineNotify: new FormControl<string | null | undefined>(undefined),
			transportLinkedIn: new FormControl<string | null | undefined>(undefined),
			transportMailjet: new FormControl<string | null | undefined>(undefined),
			transportMastodon: new FormControl<string | null | undefined>(undefined),
			transportMattermost: new FormControl<string | null | undefined>(undefined),
			transportMercure: new FormControl<string | null | undefined>(undefined),
			transportMessageBird: new FormControl<string | null | undefined>(undefined),
			transportMessageMedia: new FormControl<string | null | undefined>(undefined),
			transportMicrosoftTeams: new FormControl<string | null | undefined>(undefined),
			transportMobyt: new FormControl<string | null | undefined>(undefined),
			transportOctopush: new FormControl<string | null | undefined>(undefined),
			transportOneSignal: new FormControl<string | null | undefined>(undefined),
			transportOpsgenie: new FormControl<string | null | undefined>(undefined),
			transportOrangeSms: new FormControl<string | null | undefined>(undefined),
			transportOvhCloud: new FormControl<string | null | undefined>(undefined),
			transportPagerDuty: new FormControl<string | null | undefined>(undefined),
			transportPagerTree: new FormControl<string | null | undefined>(undefined),
			transportPlivo: new FormControl<string | null | undefined>(undefined),
			transportPushbullet: new FormControl<string | null | undefined>(undefined),
			transportPushover: new FormControl<string | null | undefined>(undefined),
			transportPushy: new FormControl<string | null | undefined>(undefined),
			transportRingCentral: new FormControl<string | null | undefined>(undefined),
			transportRocketChat: new FormControl<string | null | undefined>(undefined),
			transportSendberry: new FormControl<string | null | undefined>(undefined),
			transportSendinblue: new FormControl<string | null | undefined>(undefined),
			transportSimpleTextin: new FormControl<string | null | undefined>(undefined),
			transportSinch: new FormControl<string | null | undefined>(undefined),
			transportSlack: new FormControl<string | null | undefined>(undefined),
			transportSms77: new FormControl<string | null | undefined>(undefined),
			transportSmsBiuras: new FormControl<string | null | undefined>(undefined),
			transportSmsFactor: new FormControl<string | null | undefined>(undefined),
			transportSmsapi: new FormControl<string | null | undefined>(undefined),
			transportSmsc: new FormControl<string | null | undefined>(undefined),
			transportSmsmode: new FormControl<string | null | undefined>(undefined),
			transportSpotHit: new FormControl<string | null | undefined>(undefined),
			transportTelegram: new FormControl<string | null | undefined>(undefined),
			transportTelnyx: new FormControl<string | null | undefined>(undefined),
			transportTermii: new FormControl<string | null | undefined>(undefined),
			transportTrello: new FormControl<string | null | undefined>(undefined),
			transportTurboSms: new FormControl<string | null | undefined>(undefined),
			transportTwilio: new FormControl<string | null | undefined>(undefined),
			transportTwitter: new FormControl<string | null | undefined>(undefined),
			transportVonage: new FormControl<string | null | undefined>(undefined),
			transportWebhook: new FormControl<string | null | undefined>(undefined),
			transportYunpian: new FormControl<string | null | undefined>(undefined),
			transportZendesk: new FormControl<string | null | undefined>(undefined),
			transportZulip: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_put {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: string;

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** Media objects that must be sent with each alert. Only applicable when you use your own email alert services. */
		mediaObjects?: Array<string>;

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: string;

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: string;
		transportAlerta?: string | null;
		transportAllMySms?: string | null;
		transportAmazonSns?: string | null;
		transportBandwidth?: string | null;
		transportChatwork?: string | null;
		transportClickSend?: string | null;
		transportClickatell?: string | null;
		transportContactEveryone?: string | null;
		transportDiscord?: string | null;
		transportEmail?: string | null;
		transportEngagespot?: string | null;
		transportEsendex?: string | null;
		transportExpo?: string | null;
		transportFirebase?: string | null;
		transportFortySixElks?: string | null;
		transportFreeMobile?: string | null;
		transportFreshdesk?: string | null;
		transportGatewayApi?: string | null;
		transportGitter?: string | null;
		transportGoogleChat?: string | null;
		transportGotify?: string | null;
		transportHelpScout?: string | null;
		transportInfobip?: string | null;
		transportIqsms?: string | null;
		transportKazInfoTeh?: string | null;
		transportLightSms?: string | null;
		transportLineNotify?: string | null;
		transportLinkedIn?: string | null;
		transportMailjet?: string | null;
		transportMastodon?: string | null;
		transportMattermost?: string | null;
		transportMercure?: string | null;
		transportMessageBird?: string | null;
		transportMessageMedia?: string | null;
		transportMicrosoftTeams?: string | null;
		transportMobyt?: string | null;
		transportOctopush?: string | null;
		transportOneSignal?: string | null;
		transportOpsgenie?: string | null;
		transportOrangeSms?: string | null;
		transportOvhCloud?: string | null;
		transportPagerDuty?: string | null;
		transportPagerTree?: string | null;
		transportPlivo?: string | null;
		transportPushbullet?: string | null;
		transportPushover?: string | null;
		transportPushy?: string | null;
		transportRingCentral?: string | null;
		transportRocketChat?: string | null;
		transportSendberry?: string | null;
		transportSendinblue?: string | null;
		transportSimpleTextin?: string | null;
		transportSinch?: string | null;
		transportSlack?: string | null;
		transportSms77?: string | null;
		transportSmsBiuras?: string | null;
		transportSmsFactor?: string | null;
		transportSmsapi?: string | null;
		transportSmsc?: string | null;
		transportSmsmode?: string | null;
		transportSpotHit?: string | null;
		transportTelegram?: string | null;
		transportTelnyx?: string | null;
		transportTermii?: string | null;
		transportTrello?: string | null;
		transportTurboSms?: string | null;
		transportTwilio?: string | null;
		transportTwitter?: string | null;
		transportVonage?: string | null;
		transportWebhook?: string | null;
		transportYunpian?: string | null;
		transportZendesk?: string | null;
		transportZulip?: string | null;
	}

	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertService_putFormProperties {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: FormControl<string | null | undefined>,

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: FormControl<string | null | undefined>,

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: FormControl<string | null | undefined>,
		transportAlerta: FormControl<string | null | undefined>,
		transportAllMySms: FormControl<string | null | undefined>,
		transportAmazonSns: FormControl<string | null | undefined>,
		transportBandwidth: FormControl<string | null | undefined>,
		transportChatwork: FormControl<string | null | undefined>,
		transportClickSend: FormControl<string | null | undefined>,
		transportClickatell: FormControl<string | null | undefined>,
		transportContactEveryone: FormControl<string | null | undefined>,
		transportDiscord: FormControl<string | null | undefined>,
		transportEmail: FormControl<string | null | undefined>,
		transportEngagespot: FormControl<string | null | undefined>,
		transportEsendex: FormControl<string | null | undefined>,
		transportExpo: FormControl<string | null | undefined>,
		transportFirebase: FormControl<string | null | undefined>,
		transportFortySixElks: FormControl<string | null | undefined>,
		transportFreeMobile: FormControl<string | null | undefined>,
		transportFreshdesk: FormControl<string | null | undefined>,
		transportGatewayApi: FormControl<string | null | undefined>,
		transportGitter: FormControl<string | null | undefined>,
		transportGoogleChat: FormControl<string | null | undefined>,
		transportGotify: FormControl<string | null | undefined>,
		transportHelpScout: FormControl<string | null | undefined>,
		transportInfobip: FormControl<string | null | undefined>,
		transportIqsms: FormControl<string | null | undefined>,
		transportKazInfoTeh: FormControl<string | null | undefined>,
		transportLightSms: FormControl<string | null | undefined>,
		transportLineNotify: FormControl<string | null | undefined>,
		transportLinkedIn: FormControl<string | null | undefined>,
		transportMailjet: FormControl<string | null | undefined>,
		transportMastodon: FormControl<string | null | undefined>,
		transportMattermost: FormControl<string | null | undefined>,
		transportMercure: FormControl<string | null | undefined>,
		transportMessageBird: FormControl<string | null | undefined>,
		transportMessageMedia: FormControl<string | null | undefined>,
		transportMicrosoftTeams: FormControl<string | null | undefined>,
		transportMobyt: FormControl<string | null | undefined>,
		transportOctopush: FormControl<string | null | undefined>,
		transportOneSignal: FormControl<string | null | undefined>,
		transportOpsgenie: FormControl<string | null | undefined>,
		transportOrangeSms: FormControl<string | null | undefined>,
		transportOvhCloud: FormControl<string | null | undefined>,
		transportPagerDuty: FormControl<string | null | undefined>,
		transportPagerTree: FormControl<string | null | undefined>,
		transportPlivo: FormControl<string | null | undefined>,
		transportPushbullet: FormControl<string | null | undefined>,
		transportPushover: FormControl<string | null | undefined>,
		transportPushy: FormControl<string | null | undefined>,
		transportRingCentral: FormControl<string | null | undefined>,
		transportRocketChat: FormControl<string | null | undefined>,
		transportSendberry: FormControl<string | null | undefined>,
		transportSendinblue: FormControl<string | null | undefined>,
		transportSimpleTextin: FormControl<string | null | undefined>,
		transportSinch: FormControl<string | null | undefined>,
		transportSlack: FormControl<string | null | undefined>,
		transportSms77: FormControl<string | null | undefined>,
		transportSmsBiuras: FormControl<string | null | undefined>,
		transportSmsFactor: FormControl<string | null | undefined>,
		transportSmsapi: FormControl<string | null | undefined>,
		transportSmsc: FormControl<string | null | undefined>,
		transportSmsmode: FormControl<string | null | undefined>,
		transportSpotHit: FormControl<string | null | undefined>,
		transportTelegram: FormControl<string | null | undefined>,
		transportTelnyx: FormControl<string | null | undefined>,
		transportTermii: FormControl<string | null | undefined>,
		transportTrello: FormControl<string | null | undefined>,
		transportTurboSms: FormControl<string | null | undefined>,
		transportTwilio: FormControl<string | null | undefined>,
		transportTwitter: FormControl<string | null | undefined>,
		transportVonage: FormControl<string | null | undefined>,
		transportWebhook: FormControl<string | null | undefined>,
		transportYunpian: FormControl<string | null | undefined>,
		transportZendesk: FormControl<string | null | undefined>,
		transportZulip: FormControl<string | null | undefined>,
	}
	export function CreateAlertService_putFormGroup() {
		return new FormGroup<AlertService_putFormProperties>({
			alertServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertServiceNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			recipientEmailAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			recipientPhoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportAlerta: new FormControl<string | null | undefined>(undefined),
			transportAllMySms: new FormControl<string | null | undefined>(undefined),
			transportAmazonSns: new FormControl<string | null | undefined>(undefined),
			transportBandwidth: new FormControl<string | null | undefined>(undefined),
			transportChatwork: new FormControl<string | null | undefined>(undefined),
			transportClickSend: new FormControl<string | null | undefined>(undefined),
			transportClickatell: new FormControl<string | null | undefined>(undefined),
			transportContactEveryone: new FormControl<string | null | undefined>(undefined),
			transportDiscord: new FormControl<string | null | undefined>(undefined),
			transportEmail: new FormControl<string | null | undefined>(undefined),
			transportEngagespot: new FormControl<string | null | undefined>(undefined),
			transportEsendex: new FormControl<string | null | undefined>(undefined),
			transportExpo: new FormControl<string | null | undefined>(undefined),
			transportFirebase: new FormControl<string | null | undefined>(undefined),
			transportFortySixElks: new FormControl<string | null | undefined>(undefined),
			transportFreeMobile: new FormControl<string | null | undefined>(undefined),
			transportFreshdesk: new FormControl<string | null | undefined>(undefined),
			transportGatewayApi: new FormControl<string | null | undefined>(undefined),
			transportGitter: new FormControl<string | null | undefined>(undefined),
			transportGoogleChat: new FormControl<string | null | undefined>(undefined),
			transportGotify: new FormControl<string | null | undefined>(undefined),
			transportHelpScout: new FormControl<string | null | undefined>(undefined),
			transportInfobip: new FormControl<string | null | undefined>(undefined),
			transportIqsms: new FormControl<string | null | undefined>(undefined),
			transportKazInfoTeh: new FormControl<string | null | undefined>(undefined),
			transportLightSms: new FormControl<string | null | undefined>(undefined),
			transportLineNotify: new FormControl<string | null | undefined>(undefined),
			transportLinkedIn: new FormControl<string | null | undefined>(undefined),
			transportMailjet: new FormControl<string | null | undefined>(undefined),
			transportMastodon: new FormControl<string | null | undefined>(undefined),
			transportMattermost: new FormControl<string | null | undefined>(undefined),
			transportMercure: new FormControl<string | null | undefined>(undefined),
			transportMessageBird: new FormControl<string | null | undefined>(undefined),
			transportMessageMedia: new FormControl<string | null | undefined>(undefined),
			transportMicrosoftTeams: new FormControl<string | null | undefined>(undefined),
			transportMobyt: new FormControl<string | null | undefined>(undefined),
			transportOctopush: new FormControl<string | null | undefined>(undefined),
			transportOneSignal: new FormControl<string | null | undefined>(undefined),
			transportOpsgenie: new FormControl<string | null | undefined>(undefined),
			transportOrangeSms: new FormControl<string | null | undefined>(undefined),
			transportOvhCloud: new FormControl<string | null | undefined>(undefined),
			transportPagerDuty: new FormControl<string | null | undefined>(undefined),
			transportPagerTree: new FormControl<string | null | undefined>(undefined),
			transportPlivo: new FormControl<string | null | undefined>(undefined),
			transportPushbullet: new FormControl<string | null | undefined>(undefined),
			transportPushover: new FormControl<string | null | undefined>(undefined),
			transportPushy: new FormControl<string | null | undefined>(undefined),
			transportRingCentral: new FormControl<string | null | undefined>(undefined),
			transportRocketChat: new FormControl<string | null | undefined>(undefined),
			transportSendberry: new FormControl<string | null | undefined>(undefined),
			transportSendinblue: new FormControl<string | null | undefined>(undefined),
			transportSimpleTextin: new FormControl<string | null | undefined>(undefined),
			transportSinch: new FormControl<string | null | undefined>(undefined),
			transportSlack: new FormControl<string | null | undefined>(undefined),
			transportSms77: new FormControl<string | null | undefined>(undefined),
			transportSmsBiuras: new FormControl<string | null | undefined>(undefined),
			transportSmsFactor: new FormControl<string | null | undefined>(undefined),
			transportSmsapi: new FormControl<string | null | undefined>(undefined),
			transportSmsc: new FormControl<string | null | undefined>(undefined),
			transportSmsmode: new FormControl<string | null | undefined>(undefined),
			transportSpotHit: new FormControl<string | null | undefined>(undefined),
			transportTelegram: new FormControl<string | null | undefined>(undefined),
			transportTelnyx: new FormControl<string | null | undefined>(undefined),
			transportTermii: new FormControl<string | null | undefined>(undefined),
			transportTrello: new FormControl<string | null | undefined>(undefined),
			transportTurboSms: new FormControl<string | null | undefined>(undefined),
			transportTwilio: new FormControl<string | null | undefined>(undefined),
			transportTwitter: new FormControl<string | null | undefined>(undefined),
			transportVonage: new FormControl<string | null | undefined>(undefined),
			transportWebhook: new FormControl<string | null | undefined>(undefined),
			transportYunpian: new FormControl<string | null | undefined>(undefined),
			transportZendesk: new FormControl<string | null | undefined>(undefined),
			transportZulip: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertServicejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: string;

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes?: string | null;

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert. */
		creditsPerTransportAlert?: number | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** Media objects that must be sent with each alert. Only applicable when you use your own email alert services. */
		mediaObjects?: Array<string>;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: string;

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
		transportAlerta?: string | null;
		transportAllMySms?: string | null;
		transportAmazonSns?: string | null;
		transportBandwidth?: string | null;
		transportChatwork?: string | null;
		transportClickSend?: string | null;
		transportClickatell?: string | null;
		transportContactEveryone?: string | null;
		transportDiscord?: string | null;
		transportEmail?: string | null;
		transportEngagespot?: string | null;
		transportEsendex?: string | null;
		transportExpo?: string | null;
		transportFirebase?: string | null;
		transportFortySixElks?: string | null;
		transportFreeMobile?: string | null;
		transportFreshdesk?: string | null;
		transportGatewayApi?: string | null;
		transportGitter?: string | null;
		transportGoogleChat?: string | null;
		transportGotify?: string | null;
		transportHelpScout?: string | null;
		transportInfobip?: string | null;
		transportIqsms?: string | null;
		transportKazInfoTeh?: string | null;
		transportLightSms?: string | null;
		transportLineNotify?: string | null;
		transportLinkedIn?: string | null;
		transportMailjet?: string | null;
		transportMastodon?: string | null;
		transportMattermost?: string | null;
		transportMercure?: string | null;
		transportMessageBird?: string | null;
		transportMessageMedia?: string | null;
		transportMicrosoftTeams?: string | null;
		transportMobyt?: string | null;
		transportOctopush?: string | null;
		transportOneSignal?: string | null;
		transportOpsgenie?: string | null;
		transportOrangeSms?: string | null;
		transportOvhCloud?: string | null;
		transportPagerDuty?: string | null;
		transportPagerTree?: string | null;
		transportPlivo?: string | null;
		transportPushbullet?: string | null;
		transportPushover?: string | null;
		transportPushy?: string | null;
		transportRingCentral?: string | null;
		transportRocketChat?: string | null;
		transportSendberry?: string | null;
		transportSendinblue?: string | null;
		transportSimpleTextin?: string | null;
		transportSinch?: string | null;
		transportSlack?: string | null;
		transportSms77?: string | null;
		transportSmsBiuras?: string | null;
		transportSmsFactor?: string | null;
		transportSmsapi?: string | null;
		transportSmsc?: string | null;
		transportSmsmode?: string | null;
		transportSpotHit?: string | null;
		transportTelegram?: string | null;
		transportTelnyx?: string | null;
		transportTermii?: string | null;
		transportTrello?: string | null;
		transportTurboSms?: string | null;
		transportTwilio?: string | null;
		transportTwitter?: string | null;
		transportVonage?: string | null;
		transportWebhook?: string | null;
		transportYunpian?: string | null;
		transportZendesk?: string | null;
		transportZulip?: string | null;
	}

	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertServicejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: FormControl<string | null | undefined>,

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes: FormControl<string | null | undefined>,

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert. */
		creditsPerTransportAlert: FormControl<number | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: FormControl<string | null | undefined>,

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
		transportAlerta: FormControl<string | null | undefined>,
		transportAllMySms: FormControl<string | null | undefined>,
		transportAmazonSns: FormControl<string | null | undefined>,
		transportBandwidth: FormControl<string | null | undefined>,
		transportChatwork: FormControl<string | null | undefined>,
		transportClickSend: FormControl<string | null | undefined>,
		transportClickatell: FormControl<string | null | undefined>,
		transportContactEveryone: FormControl<string | null | undefined>,
		transportDiscord: FormControl<string | null | undefined>,
		transportEmail: FormControl<string | null | undefined>,
		transportEngagespot: FormControl<string | null | undefined>,
		transportEsendex: FormControl<string | null | undefined>,
		transportExpo: FormControl<string | null | undefined>,
		transportFirebase: FormControl<string | null | undefined>,
		transportFortySixElks: FormControl<string | null | undefined>,
		transportFreeMobile: FormControl<string | null | undefined>,
		transportFreshdesk: FormControl<string | null | undefined>,
		transportGatewayApi: FormControl<string | null | undefined>,
		transportGitter: FormControl<string | null | undefined>,
		transportGoogleChat: FormControl<string | null | undefined>,
		transportGotify: FormControl<string | null | undefined>,
		transportHelpScout: FormControl<string | null | undefined>,
		transportInfobip: FormControl<string | null | undefined>,
		transportIqsms: FormControl<string | null | undefined>,
		transportKazInfoTeh: FormControl<string | null | undefined>,
		transportLightSms: FormControl<string | null | undefined>,
		transportLineNotify: FormControl<string | null | undefined>,
		transportLinkedIn: FormControl<string | null | undefined>,
		transportMailjet: FormControl<string | null | undefined>,
		transportMastodon: FormControl<string | null | undefined>,
		transportMattermost: FormControl<string | null | undefined>,
		transportMercure: FormControl<string | null | undefined>,
		transportMessageBird: FormControl<string | null | undefined>,
		transportMessageMedia: FormControl<string | null | undefined>,
		transportMicrosoftTeams: FormControl<string | null | undefined>,
		transportMobyt: FormControl<string | null | undefined>,
		transportOctopush: FormControl<string | null | undefined>,
		transportOneSignal: FormControl<string | null | undefined>,
		transportOpsgenie: FormControl<string | null | undefined>,
		transportOrangeSms: FormControl<string | null | undefined>,
		transportOvhCloud: FormControl<string | null | undefined>,
		transportPagerDuty: FormControl<string | null | undefined>,
		transportPagerTree: FormControl<string | null | undefined>,
		transportPlivo: FormControl<string | null | undefined>,
		transportPushbullet: FormControl<string | null | undefined>,
		transportPushover: FormControl<string | null | undefined>,
		transportPushy: FormControl<string | null | undefined>,
		transportRingCentral: FormControl<string | null | undefined>,
		transportRocketChat: FormControl<string | null | undefined>,
		transportSendberry: FormControl<string | null | undefined>,
		transportSendinblue: FormControl<string | null | undefined>,
		transportSimpleTextin: FormControl<string | null | undefined>,
		transportSinch: FormControl<string | null | undefined>,
		transportSlack: FormControl<string | null | undefined>,
		transportSms77: FormControl<string | null | undefined>,
		transportSmsBiuras: FormControl<string | null | undefined>,
		transportSmsFactor: FormControl<string | null | undefined>,
		transportSmsapi: FormControl<string | null | undefined>,
		transportSmsc: FormControl<string | null | undefined>,
		transportSmsmode: FormControl<string | null | undefined>,
		transportSpotHit: FormControl<string | null | undefined>,
		transportTelegram: FormControl<string | null | undefined>,
		transportTelnyx: FormControl<string | null | undefined>,
		transportTermii: FormControl<string | null | undefined>,
		transportTrello: FormControl<string | null | undefined>,
		transportTurboSms: FormControl<string | null | undefined>,
		transportTwilio: FormControl<string | null | undefined>,
		transportTwitter: FormControl<string | null | undefined>,
		transportVonage: FormControl<string | null | undefined>,
		transportWebhook: FormControl<string | null | undefined>,
		transportYunpian: FormControl<string | null | undefined>,
		transportZendesk: FormControl<string | null | undefined>,
		transportZulip: FormControl<string | null | undefined>,
	}
	export function CreateAlertServicejsonld_getFormGroup() {
		return new FormGroup<AlertServicejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			alertServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertServiceNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			alertServiceTransportCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			creditsPerTransportAlert: new FormControl<number | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipientEmailAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			recipientPhoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportAlerta: new FormControl<string | null | undefined>(undefined),
			transportAllMySms: new FormControl<string | null | undefined>(undefined),
			transportAmazonSns: new FormControl<string | null | undefined>(undefined),
			transportBandwidth: new FormControl<string | null | undefined>(undefined),
			transportChatwork: new FormControl<string | null | undefined>(undefined),
			transportClickSend: new FormControl<string | null | undefined>(undefined),
			transportClickatell: new FormControl<string | null | undefined>(undefined),
			transportContactEveryone: new FormControl<string | null | undefined>(undefined),
			transportDiscord: new FormControl<string | null | undefined>(undefined),
			transportEmail: new FormControl<string | null | undefined>(undefined),
			transportEngagespot: new FormControl<string | null | undefined>(undefined),
			transportEsendex: new FormControl<string | null | undefined>(undefined),
			transportExpo: new FormControl<string | null | undefined>(undefined),
			transportFirebase: new FormControl<string | null | undefined>(undefined),
			transportFortySixElks: new FormControl<string | null | undefined>(undefined),
			transportFreeMobile: new FormControl<string | null | undefined>(undefined),
			transportFreshdesk: new FormControl<string | null | undefined>(undefined),
			transportGatewayApi: new FormControl<string | null | undefined>(undefined),
			transportGitter: new FormControl<string | null | undefined>(undefined),
			transportGoogleChat: new FormControl<string | null | undefined>(undefined),
			transportGotify: new FormControl<string | null | undefined>(undefined),
			transportHelpScout: new FormControl<string | null | undefined>(undefined),
			transportInfobip: new FormControl<string | null | undefined>(undefined),
			transportIqsms: new FormControl<string | null | undefined>(undefined),
			transportKazInfoTeh: new FormControl<string | null | undefined>(undefined),
			transportLightSms: new FormControl<string | null | undefined>(undefined),
			transportLineNotify: new FormControl<string | null | undefined>(undefined),
			transportLinkedIn: new FormControl<string | null | undefined>(undefined),
			transportMailjet: new FormControl<string | null | undefined>(undefined),
			transportMastodon: new FormControl<string | null | undefined>(undefined),
			transportMattermost: new FormControl<string | null | undefined>(undefined),
			transportMercure: new FormControl<string | null | undefined>(undefined),
			transportMessageBird: new FormControl<string | null | undefined>(undefined),
			transportMessageMedia: new FormControl<string | null | undefined>(undefined),
			transportMicrosoftTeams: new FormControl<string | null | undefined>(undefined),
			transportMobyt: new FormControl<string | null | undefined>(undefined),
			transportOctopush: new FormControl<string | null | undefined>(undefined),
			transportOneSignal: new FormControl<string | null | undefined>(undefined),
			transportOpsgenie: new FormControl<string | null | undefined>(undefined),
			transportOrangeSms: new FormControl<string | null | undefined>(undefined),
			transportOvhCloud: new FormControl<string | null | undefined>(undefined),
			transportPagerDuty: new FormControl<string | null | undefined>(undefined),
			transportPagerTree: new FormControl<string | null | undefined>(undefined),
			transportPlivo: new FormControl<string | null | undefined>(undefined),
			transportPushbullet: new FormControl<string | null | undefined>(undefined),
			transportPushover: new FormControl<string | null | undefined>(undefined),
			transportPushy: new FormControl<string | null | undefined>(undefined),
			transportRingCentral: new FormControl<string | null | undefined>(undefined),
			transportRocketChat: new FormControl<string | null | undefined>(undefined),
			transportSendberry: new FormControl<string | null | undefined>(undefined),
			transportSendinblue: new FormControl<string | null | undefined>(undefined),
			transportSimpleTextin: new FormControl<string | null | undefined>(undefined),
			transportSinch: new FormControl<string | null | undefined>(undefined),
			transportSlack: new FormControl<string | null | undefined>(undefined),
			transportSms77: new FormControl<string | null | undefined>(undefined),
			transportSmsBiuras: new FormControl<string | null | undefined>(undefined),
			transportSmsFactor: new FormControl<string | null | undefined>(undefined),
			transportSmsapi: new FormControl<string | null | undefined>(undefined),
			transportSmsc: new FormControl<string | null | undefined>(undefined),
			transportSmsmode: new FormControl<string | null | undefined>(undefined),
			transportSpotHit: new FormControl<string | null | undefined>(undefined),
			transportTelegram: new FormControl<string | null | undefined>(undefined),
			transportTelnyx: new FormControl<string | null | undefined>(undefined),
			transportTermii: new FormControl<string | null | undefined>(undefined),
			transportTrello: new FormControl<string | null | undefined>(undefined),
			transportTurboSms: new FormControl<string | null | undefined>(undefined),
			transportTwilio: new FormControl<string | null | undefined>(undefined),
			transportTwitter: new FormControl<string | null | undefined>(undefined),
			transportVonage: new FormControl<string | null | undefined>(undefined),
			transportWebhook: new FormControl<string | null | undefined>(undefined),
			transportYunpian: new FormControl<string | null | undefined>(undefined),
			transportZendesk: new FormControl<string | null | undefined>(undefined),
			transportZulip: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertServicejsonld_post {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: string;

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes?: string | null;

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** Media objects that must be sent with each alert. Only applicable when you use your own email alert services. */
		mediaObjects?: Array<string>;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: string;

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: string;
		transportAlerta?: string | null;
		transportAllMySms?: string | null;
		transportAmazonSns?: string | null;
		transportBandwidth?: string | null;
		transportChatwork?: string | null;
		transportClickSend?: string | null;
		transportClickatell?: string | null;
		transportContactEveryone?: string | null;
		transportDiscord?: string | null;
		transportEmail?: string | null;
		transportEngagespot?: string | null;
		transportEsendex?: string | null;
		transportExpo?: string | null;
		transportFirebase?: string | null;
		transportFortySixElks?: string | null;
		transportFreeMobile?: string | null;
		transportFreshdesk?: string | null;
		transportGatewayApi?: string | null;
		transportGitter?: string | null;
		transportGoogleChat?: string | null;
		transportGotify?: string | null;
		transportHelpScout?: string | null;
		transportInfobip?: string | null;
		transportIqsms?: string | null;
		transportKazInfoTeh?: string | null;
		transportLightSms?: string | null;
		transportLineNotify?: string | null;
		transportLinkedIn?: string | null;
		transportMailjet?: string | null;
		transportMastodon?: string | null;
		transportMattermost?: string | null;
		transportMercure?: string | null;
		transportMessageBird?: string | null;
		transportMessageMedia?: string | null;
		transportMicrosoftTeams?: string | null;
		transportMobyt?: string | null;
		transportOctopush?: string | null;
		transportOneSignal?: string | null;
		transportOpsgenie?: string | null;
		transportOrangeSms?: string | null;
		transportOvhCloud?: string | null;
		transportPagerDuty?: string | null;
		transportPagerTree?: string | null;
		transportPlivo?: string | null;
		transportPushbullet?: string | null;
		transportPushover?: string | null;
		transportPushy?: string | null;
		transportRingCentral?: string | null;
		transportRocketChat?: string | null;
		transportSendberry?: string | null;
		transportSendinblue?: string | null;
		transportSimpleTextin?: string | null;
		transportSinch?: string | null;
		transportSlack?: string | null;
		transportSms77?: string | null;
		transportSmsBiuras?: string | null;
		transportSmsFactor?: string | null;
		transportSmsapi?: string | null;
		transportSmsc?: string | null;
		transportSmsmode?: string | null;
		transportSpotHit?: string | null;
		transportTelegram?: string | null;
		transportTelnyx?: string | null;
		transportTermii?: string | null;
		transportTrello?: string | null;
		transportTurboSms?: string | null;
		transportTwilio?: string | null;
		transportTwitter?: string | null;
		transportVonage?: string | null;
		transportWebhook?: string | null;
		transportYunpian?: string | null;
		transportZendesk?: string | null;
		transportZulip?: string | null;
	}

	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertServicejsonld_postFormProperties {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: FormControl<string | null | undefined>,

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes: FormControl<string | null | undefined>,

		/**
		 * The transport of the alert service.
		 * Required
		 */
		alertServiceTransportCode: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: FormControl<string | null | undefined>,

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: FormControl<string | null | undefined>,
		transportAlerta: FormControl<string | null | undefined>,
		transportAllMySms: FormControl<string | null | undefined>,
		transportAmazonSns: FormControl<string | null | undefined>,
		transportBandwidth: FormControl<string | null | undefined>,
		transportChatwork: FormControl<string | null | undefined>,
		transportClickSend: FormControl<string | null | undefined>,
		transportClickatell: FormControl<string | null | undefined>,
		transportContactEveryone: FormControl<string | null | undefined>,
		transportDiscord: FormControl<string | null | undefined>,
		transportEmail: FormControl<string | null | undefined>,
		transportEngagespot: FormControl<string | null | undefined>,
		transportEsendex: FormControl<string | null | undefined>,
		transportExpo: FormControl<string | null | undefined>,
		transportFirebase: FormControl<string | null | undefined>,
		transportFortySixElks: FormControl<string | null | undefined>,
		transportFreeMobile: FormControl<string | null | undefined>,
		transportFreshdesk: FormControl<string | null | undefined>,
		transportGatewayApi: FormControl<string | null | undefined>,
		transportGitter: FormControl<string | null | undefined>,
		transportGoogleChat: FormControl<string | null | undefined>,
		transportGotify: FormControl<string | null | undefined>,
		transportHelpScout: FormControl<string | null | undefined>,
		transportInfobip: FormControl<string | null | undefined>,
		transportIqsms: FormControl<string | null | undefined>,
		transportKazInfoTeh: FormControl<string | null | undefined>,
		transportLightSms: FormControl<string | null | undefined>,
		transportLineNotify: FormControl<string | null | undefined>,
		transportLinkedIn: FormControl<string | null | undefined>,
		transportMailjet: FormControl<string | null | undefined>,
		transportMastodon: FormControl<string | null | undefined>,
		transportMattermost: FormControl<string | null | undefined>,
		transportMercure: FormControl<string | null | undefined>,
		transportMessageBird: FormControl<string | null | undefined>,
		transportMessageMedia: FormControl<string | null | undefined>,
		transportMicrosoftTeams: FormControl<string | null | undefined>,
		transportMobyt: FormControl<string | null | undefined>,
		transportOctopush: FormControl<string | null | undefined>,
		transportOneSignal: FormControl<string | null | undefined>,
		transportOpsgenie: FormControl<string | null | undefined>,
		transportOrangeSms: FormControl<string | null | undefined>,
		transportOvhCloud: FormControl<string | null | undefined>,
		transportPagerDuty: FormControl<string | null | undefined>,
		transportPagerTree: FormControl<string | null | undefined>,
		transportPlivo: FormControl<string | null | undefined>,
		transportPushbullet: FormControl<string | null | undefined>,
		transportPushover: FormControl<string | null | undefined>,
		transportPushy: FormControl<string | null | undefined>,
		transportRingCentral: FormControl<string | null | undefined>,
		transportRocketChat: FormControl<string | null | undefined>,
		transportSendberry: FormControl<string | null | undefined>,
		transportSendinblue: FormControl<string | null | undefined>,
		transportSimpleTextin: FormControl<string | null | undefined>,
		transportSinch: FormControl<string | null | undefined>,
		transportSlack: FormControl<string | null | undefined>,
		transportSms77: FormControl<string | null | undefined>,
		transportSmsBiuras: FormControl<string | null | undefined>,
		transportSmsFactor: FormControl<string | null | undefined>,
		transportSmsapi: FormControl<string | null | undefined>,
		transportSmsc: FormControl<string | null | undefined>,
		transportSmsmode: FormControl<string | null | undefined>,
		transportSpotHit: FormControl<string | null | undefined>,
		transportTelegram: FormControl<string | null | undefined>,
		transportTelnyx: FormControl<string | null | undefined>,
		transportTermii: FormControl<string | null | undefined>,
		transportTrello: FormControl<string | null | undefined>,
		transportTurboSms: FormControl<string | null | undefined>,
		transportTwilio: FormControl<string | null | undefined>,
		transportTwitter: FormControl<string | null | undefined>,
		transportVonage: FormControl<string | null | undefined>,
		transportWebhook: FormControl<string | null | undefined>,
		transportYunpian: FormControl<string | null | undefined>,
		transportZendesk: FormControl<string | null | undefined>,
		transportZulip: FormControl<string | null | undefined>,
	}
	export function CreateAlertServicejsonld_postFormGroup() {
		return new FormGroup<AlertServicejsonld_postFormProperties>({
			alertServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertServiceNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			alertServiceTransportCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			recipientEmailAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			recipientPhoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportAlerta: new FormControl<string | null | undefined>(undefined),
			transportAllMySms: new FormControl<string | null | undefined>(undefined),
			transportAmazonSns: new FormControl<string | null | undefined>(undefined),
			transportBandwidth: new FormControl<string | null | undefined>(undefined),
			transportChatwork: new FormControl<string | null | undefined>(undefined),
			transportClickSend: new FormControl<string | null | undefined>(undefined),
			transportClickatell: new FormControl<string | null | undefined>(undefined),
			transportContactEveryone: new FormControl<string | null | undefined>(undefined),
			transportDiscord: new FormControl<string | null | undefined>(undefined),
			transportEmail: new FormControl<string | null | undefined>(undefined),
			transportEngagespot: new FormControl<string | null | undefined>(undefined),
			transportEsendex: new FormControl<string | null | undefined>(undefined),
			transportExpo: new FormControl<string | null | undefined>(undefined),
			transportFirebase: new FormControl<string | null | undefined>(undefined),
			transportFortySixElks: new FormControl<string | null | undefined>(undefined),
			transportFreeMobile: new FormControl<string | null | undefined>(undefined),
			transportFreshdesk: new FormControl<string | null | undefined>(undefined),
			transportGatewayApi: new FormControl<string | null | undefined>(undefined),
			transportGitter: new FormControl<string | null | undefined>(undefined),
			transportGoogleChat: new FormControl<string | null | undefined>(undefined),
			transportGotify: new FormControl<string | null | undefined>(undefined),
			transportHelpScout: new FormControl<string | null | undefined>(undefined),
			transportInfobip: new FormControl<string | null | undefined>(undefined),
			transportIqsms: new FormControl<string | null | undefined>(undefined),
			transportKazInfoTeh: new FormControl<string | null | undefined>(undefined),
			transportLightSms: new FormControl<string | null | undefined>(undefined),
			transportLineNotify: new FormControl<string | null | undefined>(undefined),
			transportLinkedIn: new FormControl<string | null | undefined>(undefined),
			transportMailjet: new FormControl<string | null | undefined>(undefined),
			transportMastodon: new FormControl<string | null | undefined>(undefined),
			transportMattermost: new FormControl<string | null | undefined>(undefined),
			transportMercure: new FormControl<string | null | undefined>(undefined),
			transportMessageBird: new FormControl<string | null | undefined>(undefined),
			transportMessageMedia: new FormControl<string | null | undefined>(undefined),
			transportMicrosoftTeams: new FormControl<string | null | undefined>(undefined),
			transportMobyt: new FormControl<string | null | undefined>(undefined),
			transportOctopush: new FormControl<string | null | undefined>(undefined),
			transportOneSignal: new FormControl<string | null | undefined>(undefined),
			transportOpsgenie: new FormControl<string | null | undefined>(undefined),
			transportOrangeSms: new FormControl<string | null | undefined>(undefined),
			transportOvhCloud: new FormControl<string | null | undefined>(undefined),
			transportPagerDuty: new FormControl<string | null | undefined>(undefined),
			transportPagerTree: new FormControl<string | null | undefined>(undefined),
			transportPlivo: new FormControl<string | null | undefined>(undefined),
			transportPushbullet: new FormControl<string | null | undefined>(undefined),
			transportPushover: new FormControl<string | null | undefined>(undefined),
			transportPushy: new FormControl<string | null | undefined>(undefined),
			transportRingCentral: new FormControl<string | null | undefined>(undefined),
			transportRocketChat: new FormControl<string | null | undefined>(undefined),
			transportSendberry: new FormControl<string | null | undefined>(undefined),
			transportSendinblue: new FormControl<string | null | undefined>(undefined),
			transportSimpleTextin: new FormControl<string | null | undefined>(undefined),
			transportSinch: new FormControl<string | null | undefined>(undefined),
			transportSlack: new FormControl<string | null | undefined>(undefined),
			transportSms77: new FormControl<string | null | undefined>(undefined),
			transportSmsBiuras: new FormControl<string | null | undefined>(undefined),
			transportSmsFactor: new FormControl<string | null | undefined>(undefined),
			transportSmsapi: new FormControl<string | null | undefined>(undefined),
			transportSmsc: new FormControl<string | null | undefined>(undefined),
			transportSmsmode: new FormControl<string | null | undefined>(undefined),
			transportSpotHit: new FormControl<string | null | undefined>(undefined),
			transportTelegram: new FormControl<string | null | undefined>(undefined),
			transportTelnyx: new FormControl<string | null | undefined>(undefined),
			transportTermii: new FormControl<string | null | undefined>(undefined),
			transportTrello: new FormControl<string | null | undefined>(undefined),
			transportTurboSms: new FormControl<string | null | undefined>(undefined),
			transportTwilio: new FormControl<string | null | undefined>(undefined),
			transportTwitter: new FormControl<string | null | undefined>(undefined),
			transportVonage: new FormControl<string | null | undefined>(undefined),
			transportWebhook: new FormControl<string | null | undefined>(undefined),
			transportYunpian: new FormControl<string | null | undefined>(undefined),
			transportZendesk: new FormControl<string | null | undefined>(undefined),
			transportZulip: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertServicejsonld_put {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: string;

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** Media objects that must be sent with each alert. Only applicable when you use your own email alert services. */
		mediaObjects?: Array<string>;

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: string;

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: string;
		transportAlerta?: string | null;
		transportAllMySms?: string | null;
		transportAmazonSns?: string | null;
		transportBandwidth?: string | null;
		transportChatwork?: string | null;
		transportClickSend?: string | null;
		transportClickatell?: string | null;
		transportContactEveryone?: string | null;
		transportDiscord?: string | null;
		transportEmail?: string | null;
		transportEngagespot?: string | null;
		transportEsendex?: string | null;
		transportExpo?: string | null;
		transportFirebase?: string | null;
		transportFortySixElks?: string | null;
		transportFreeMobile?: string | null;
		transportFreshdesk?: string | null;
		transportGatewayApi?: string | null;
		transportGitter?: string | null;
		transportGoogleChat?: string | null;
		transportGotify?: string | null;
		transportHelpScout?: string | null;
		transportInfobip?: string | null;
		transportIqsms?: string | null;
		transportKazInfoTeh?: string | null;
		transportLightSms?: string | null;
		transportLineNotify?: string | null;
		transportLinkedIn?: string | null;
		transportMailjet?: string | null;
		transportMastodon?: string | null;
		transportMattermost?: string | null;
		transportMercure?: string | null;
		transportMessageBird?: string | null;
		transportMessageMedia?: string | null;
		transportMicrosoftTeams?: string | null;
		transportMobyt?: string | null;
		transportOctopush?: string | null;
		transportOneSignal?: string | null;
		transportOpsgenie?: string | null;
		transportOrangeSms?: string | null;
		transportOvhCloud?: string | null;
		transportPagerDuty?: string | null;
		transportPagerTree?: string | null;
		transportPlivo?: string | null;
		transportPushbullet?: string | null;
		transportPushover?: string | null;
		transportPushy?: string | null;
		transportRingCentral?: string | null;
		transportRocketChat?: string | null;
		transportSendberry?: string | null;
		transportSendinblue?: string | null;
		transportSimpleTextin?: string | null;
		transportSinch?: string | null;
		transportSlack?: string | null;
		transportSms77?: string | null;
		transportSmsBiuras?: string | null;
		transportSmsFactor?: string | null;
		transportSmsapi?: string | null;
		transportSmsc?: string | null;
		transportSmsmode?: string | null;
		transportSpotHit?: string | null;
		transportTelegram?: string | null;
		transportTelnyx?: string | null;
		transportTermii?: string | null;
		transportTrello?: string | null;
		transportTurboSms?: string | null;
		transportTwilio?: string | null;
		transportTwitter?: string | null;
		transportVonage?: string | null;
		transportWebhook?: string | null;
		transportYunpian?: string | null;
		transportZendesk?: string | null;
		transportZulip?: string | null;
	}

	/** The AlertService resource is a collection of services that can be used to dispatch an alert. Each alert service uses a distinct message transport. */
	export interface AlertServicejsonld_putFormProperties {

		/**
		 * The name of the alert service. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		alertServiceName: FormControl<string | null | undefined>,

		/**
		 * Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		alertServiceNotes: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The email address where alerts will be sent.
		 * Required
		 * Max length: 255
		 */
		recipientEmailAddress: FormControl<string | null | undefined>,

		/**
		 * The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.
		 * Required
		 * Max length: 255
		 */
		recipientPhoneNumber: FormControl<string | null | undefined>,
		transportAlerta: FormControl<string | null | undefined>,
		transportAllMySms: FormControl<string | null | undefined>,
		transportAmazonSns: FormControl<string | null | undefined>,
		transportBandwidth: FormControl<string | null | undefined>,
		transportChatwork: FormControl<string | null | undefined>,
		transportClickSend: FormControl<string | null | undefined>,
		transportClickatell: FormControl<string | null | undefined>,
		transportContactEveryone: FormControl<string | null | undefined>,
		transportDiscord: FormControl<string | null | undefined>,
		transportEmail: FormControl<string | null | undefined>,
		transportEngagespot: FormControl<string | null | undefined>,
		transportEsendex: FormControl<string | null | undefined>,
		transportExpo: FormControl<string | null | undefined>,
		transportFirebase: FormControl<string | null | undefined>,
		transportFortySixElks: FormControl<string | null | undefined>,
		transportFreeMobile: FormControl<string | null | undefined>,
		transportFreshdesk: FormControl<string | null | undefined>,
		transportGatewayApi: FormControl<string | null | undefined>,
		transportGitter: FormControl<string | null | undefined>,
		transportGoogleChat: FormControl<string | null | undefined>,
		transportGotify: FormControl<string | null | undefined>,
		transportHelpScout: FormControl<string | null | undefined>,
		transportInfobip: FormControl<string | null | undefined>,
		transportIqsms: FormControl<string | null | undefined>,
		transportKazInfoTeh: FormControl<string | null | undefined>,
		transportLightSms: FormControl<string | null | undefined>,
		transportLineNotify: FormControl<string | null | undefined>,
		transportLinkedIn: FormControl<string | null | undefined>,
		transportMailjet: FormControl<string | null | undefined>,
		transportMastodon: FormControl<string | null | undefined>,
		transportMattermost: FormControl<string | null | undefined>,
		transportMercure: FormControl<string | null | undefined>,
		transportMessageBird: FormControl<string | null | undefined>,
		transportMessageMedia: FormControl<string | null | undefined>,
		transportMicrosoftTeams: FormControl<string | null | undefined>,
		transportMobyt: FormControl<string | null | undefined>,
		transportOctopush: FormControl<string | null | undefined>,
		transportOneSignal: FormControl<string | null | undefined>,
		transportOpsgenie: FormControl<string | null | undefined>,
		transportOrangeSms: FormControl<string | null | undefined>,
		transportOvhCloud: FormControl<string | null | undefined>,
		transportPagerDuty: FormControl<string | null | undefined>,
		transportPagerTree: FormControl<string | null | undefined>,
		transportPlivo: FormControl<string | null | undefined>,
		transportPushbullet: FormControl<string | null | undefined>,
		transportPushover: FormControl<string | null | undefined>,
		transportPushy: FormControl<string | null | undefined>,
		transportRingCentral: FormControl<string | null | undefined>,
		transportRocketChat: FormControl<string | null | undefined>,
		transportSendberry: FormControl<string | null | undefined>,
		transportSendinblue: FormControl<string | null | undefined>,
		transportSimpleTextin: FormControl<string | null | undefined>,
		transportSinch: FormControl<string | null | undefined>,
		transportSlack: FormControl<string | null | undefined>,
		transportSms77: FormControl<string | null | undefined>,
		transportSmsBiuras: FormControl<string | null | undefined>,
		transportSmsFactor: FormControl<string | null | undefined>,
		transportSmsapi: FormControl<string | null | undefined>,
		transportSmsc: FormControl<string | null | undefined>,
		transportSmsmode: FormControl<string | null | undefined>,
		transportSpotHit: FormControl<string | null | undefined>,
		transportTelegram: FormControl<string | null | undefined>,
		transportTelnyx: FormControl<string | null | undefined>,
		transportTermii: FormControl<string | null | undefined>,
		transportTrello: FormControl<string | null | undefined>,
		transportTurboSms: FormControl<string | null | undefined>,
		transportTwilio: FormControl<string | null | undefined>,
		transportTwitter: FormControl<string | null | undefined>,
		transportVonage: FormControl<string | null | undefined>,
		transportWebhook: FormControl<string | null | undefined>,
		transportYunpian: FormControl<string | null | undefined>,
		transportZendesk: FormControl<string | null | undefined>,
		transportZulip: FormControl<string | null | undefined>,
	}
	export function CreateAlertServicejsonld_putFormGroup() {
		return new FormGroup<AlertServicejsonld_putFormProperties>({
			alertServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertServiceNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			recipientEmailAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			recipientPhoneNumber: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportAlerta: new FormControl<string | null | undefined>(undefined),
			transportAllMySms: new FormControl<string | null | undefined>(undefined),
			transportAmazonSns: new FormControl<string | null | undefined>(undefined),
			transportBandwidth: new FormControl<string | null | undefined>(undefined),
			transportChatwork: new FormControl<string | null | undefined>(undefined),
			transportClickSend: new FormControl<string | null | undefined>(undefined),
			transportClickatell: new FormControl<string | null | undefined>(undefined),
			transportContactEveryone: new FormControl<string | null | undefined>(undefined),
			transportDiscord: new FormControl<string | null | undefined>(undefined),
			transportEmail: new FormControl<string | null | undefined>(undefined),
			transportEngagespot: new FormControl<string | null | undefined>(undefined),
			transportEsendex: new FormControl<string | null | undefined>(undefined),
			transportExpo: new FormControl<string | null | undefined>(undefined),
			transportFirebase: new FormControl<string | null | undefined>(undefined),
			transportFortySixElks: new FormControl<string | null | undefined>(undefined),
			transportFreeMobile: new FormControl<string | null | undefined>(undefined),
			transportFreshdesk: new FormControl<string | null | undefined>(undefined),
			transportGatewayApi: new FormControl<string | null | undefined>(undefined),
			transportGitter: new FormControl<string | null | undefined>(undefined),
			transportGoogleChat: new FormControl<string | null | undefined>(undefined),
			transportGotify: new FormControl<string | null | undefined>(undefined),
			transportHelpScout: new FormControl<string | null | undefined>(undefined),
			transportInfobip: new FormControl<string | null | undefined>(undefined),
			transportIqsms: new FormControl<string | null | undefined>(undefined),
			transportKazInfoTeh: new FormControl<string | null | undefined>(undefined),
			transportLightSms: new FormControl<string | null | undefined>(undefined),
			transportLineNotify: new FormControl<string | null | undefined>(undefined),
			transportLinkedIn: new FormControl<string | null | undefined>(undefined),
			transportMailjet: new FormControl<string | null | undefined>(undefined),
			transportMastodon: new FormControl<string | null | undefined>(undefined),
			transportMattermost: new FormControl<string | null | undefined>(undefined),
			transportMercure: new FormControl<string | null | undefined>(undefined),
			transportMessageBird: new FormControl<string | null | undefined>(undefined),
			transportMessageMedia: new FormControl<string | null | undefined>(undefined),
			transportMicrosoftTeams: new FormControl<string | null | undefined>(undefined),
			transportMobyt: new FormControl<string | null | undefined>(undefined),
			transportOctopush: new FormControl<string | null | undefined>(undefined),
			transportOneSignal: new FormControl<string | null | undefined>(undefined),
			transportOpsgenie: new FormControl<string | null | undefined>(undefined),
			transportOrangeSms: new FormControl<string | null | undefined>(undefined),
			transportOvhCloud: new FormControl<string | null | undefined>(undefined),
			transportPagerDuty: new FormControl<string | null | undefined>(undefined),
			transportPagerTree: new FormControl<string | null | undefined>(undefined),
			transportPlivo: new FormControl<string | null | undefined>(undefined),
			transportPushbullet: new FormControl<string | null | undefined>(undefined),
			transportPushover: new FormControl<string | null | undefined>(undefined),
			transportPushy: new FormControl<string | null | undefined>(undefined),
			transportRingCentral: new FormControl<string | null | undefined>(undefined),
			transportRocketChat: new FormControl<string | null | undefined>(undefined),
			transportSendberry: new FormControl<string | null | undefined>(undefined),
			transportSendinblue: new FormControl<string | null | undefined>(undefined),
			transportSimpleTextin: new FormControl<string | null | undefined>(undefined),
			transportSinch: new FormControl<string | null | undefined>(undefined),
			transportSlack: new FormControl<string | null | undefined>(undefined),
			transportSms77: new FormControl<string | null | undefined>(undefined),
			transportSmsBiuras: new FormControl<string | null | undefined>(undefined),
			transportSmsFactor: new FormControl<string | null | undefined>(undefined),
			transportSmsapi: new FormControl<string | null | undefined>(undefined),
			transportSmsc: new FormControl<string | null | undefined>(undefined),
			transportSmsmode: new FormControl<string | null | undefined>(undefined),
			transportSpotHit: new FormControl<string | null | undefined>(undefined),
			transportTelegram: new FormControl<string | null | undefined>(undefined),
			transportTelnyx: new FormControl<string | null | undefined>(undefined),
			transportTermii: new FormControl<string | null | undefined>(undefined),
			transportTrello: new FormControl<string | null | undefined>(undefined),
			transportTurboSms: new FormControl<string | null | undefined>(undefined),
			transportTwilio: new FormControl<string | null | undefined>(undefined),
			transportTwitter: new FormControl<string | null | undefined>(undefined),
			transportVonage: new FormControl<string | null | undefined>(undefined),
			transportWebhook: new FormControl<string | null | undefined>(undefined),
			transportYunpian: new FormControl<string | null | undefined>(undefined),
			transportZendesk: new FormControl<string | null | undefined>(undefined),
			transportZulip: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertServiceTransportCode resource is a set of codes that describes the type of transport that is used by an alert service. */
	export interface AlertServiceTransportCode_get {
		codeName?: string | null;
		id?: string | null;
	}

	/** The AlertServiceTransportCode resource is a set of codes that describes the type of transport that is used by an alert service. */
	export interface AlertServiceTransportCode_getFormProperties {
		codeName: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateAlertServiceTransportCode_getFormGroup() {
		return new FormGroup<AlertServiceTransportCode_getFormProperties>({
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The AlertServiceTransportCode resource is a set of codes that describes the type of transport that is used by an alert service. */
	export interface AlertServiceTransportCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;
		codeName?: string | null;
		id?: string | null;
	}

	/** The AlertServiceTransportCode resource is a set of codes that describes the type of transport that is used by an alert service. */
	export interface AlertServiceTransportCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,
		codeName: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateAlertServiceTransportCodejsonld_getFormGroup() {
		return new FormGroup<AlertServiceTransportCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption. */
	export interface CreditsConsumption_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** The type of event that consumed the credits. */
		creditsConsumptionEventCode?: string | null;

		/** Notes that add additional information to the resource. */
		creditsConsumptionNotes?: string | null;

		/** The ID of the event (Ping resource or AlertLog resource) that consumed the credits. */
		creditsEventId?: string | null;

		/** The IRI of the event that is related to this resource. */
		creditsEventIri?: string | null;

		/** The number of credits that were consumed. */
		creditsUsed?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;
	}

	/** The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption. */
	export interface CreditsConsumption_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** The type of event that consumed the credits. */
		creditsConsumptionEventCode: FormControl<string | null | undefined>,

		/** Notes that add additional information to the resource. */
		creditsConsumptionNotes: FormControl<string | null | undefined>,

		/** The ID of the event (Ping resource or AlertLog resource) that consumed the credits. */
		creditsEventId: FormControl<string | null | undefined>,

		/** The IRI of the event that is related to this resource. */
		creditsEventIri: FormControl<string | null | undefined>,

		/** The number of credits that were consumed. */
		creditsUsed: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,
	}
	export function CreateCreditsConsumption_getFormGroup() {
		return new FormGroup<CreditsConsumption_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			creditsConsumptionEventCode: new FormControl<string | null | undefined>(undefined),
			creditsConsumptionNotes: new FormControl<string | null | undefined>(undefined),
			creditsEventId: new FormControl<string | null | undefined>(undefined),
			creditsEventIri: new FormControl<string | null | undefined>(undefined),
			creditsUsed: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption. */
	export interface CreditsConsumptionjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** The type of event that consumed the credits. */
		creditsConsumptionEventCode?: string | null;

		/** Notes that add additional information to the resource. */
		creditsConsumptionNotes?: string | null;

		/** The ID of the event (Ping resource or AlertLog resource) that consumed the credits. */
		creditsEventId?: string | null;

		/** The IRI of the event that is related to this resource. */
		creditsEventIri?: string | null;

		/** The number of credits that were consumed. */
		creditsUsed?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;
	}

	/** The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption. */
	export interface CreditsConsumptionjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** The type of event that consumed the credits. */
		creditsConsumptionEventCode: FormControl<string | null | undefined>,

		/** Notes that add additional information to the resource. */
		creditsConsumptionNotes: FormControl<string | null | undefined>,

		/** The ID of the event (Ping resource or AlertLog resource) that consumed the credits. */
		creditsEventId: FormControl<string | null | undefined>,

		/** The IRI of the event that is related to this resource. */
		creditsEventIri: FormControl<string | null | undefined>,

		/** The number of credits that were consumed. */
		creditsUsed: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,
	}
	export function CreateCreditsConsumptionjsonld_getFormGroup() {
		return new FormGroup<CreditsConsumptionjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			creditsConsumptionEventCode: new FormControl<string | null | undefined>(undefined),
			creditsConsumptionNotes: new FormControl<string | null | undefined>(undefined),
			creditsEventId: new FormControl<string | null | undefined>(undefined),
			creditsEventIri: new FormControl<string | null | undefined>(undefined),
			creditsUsed: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The HttpMethodCode resource is a set of codes that describes the possible methods that can used used when making an HTTP request. */
	export interface HttpMethodCode_get {

		/** The name of the code. */
		codeName?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;
	}

	/** The HttpMethodCode resource is a set of codes that describes the possible methods that can used used when making an HTTP request. */
	export interface HttpMethodCode_getFormProperties {

		/** The name of the code. */
		codeName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,
	}
	export function CreateHttpMethodCode_getFormGroup() {
		return new FormGroup<HttpMethodCode_getFormProperties>({
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The HttpMethodCode resource is a set of codes that describes the possible methods that can used used when making an HTTP request. */
	export interface HttpMethodCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** The name of the code. */
		codeName?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;
	}

	/** The HttpMethodCode resource is a set of codes that describes the possible methods that can used used when making an HTTP request. */
	export interface HttpMethodCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** The name of the code. */
		codeName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,
	}
	export function CreateHttpMethodCodejsonld_getFormGroup() {
		return new FormGroup<HttpMethodCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MediaObject resource is a collection of media objects that can be attached to alerts that are dispatched via an email transport. */
	export interface MediaObject_get {

		/** Where the media file can be accessed. */
		contentUrl?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The size of the media file. */
		fileSize?: number | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * A string of keywords that can be used to search for a resource. Max 100 characters.
		 * Max length: 100
		 */
		keywords?: string | null;

		/** The mime type of the media file. */
		mimeType?: string | null;

		/** The original name of the media file. */
		originalName?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
	}

	/** The MediaObject resource is a collection of media objects that can be attached to alerts that are dispatched via an email transport. */
	export interface MediaObject_getFormProperties {

		/** Where the media file can be accessed. */
		contentUrl: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The size of the media file. */
		fileSize: FormControl<number | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * A string of keywords that can be used to search for a resource. Max 100 characters.
		 * Max length: 100
		 */
		keywords: FormControl<string | null | undefined>,

		/** The mime type of the media file. */
		mimeType: FormControl<string | null | undefined>,

		/** The original name of the media file. */
		originalName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreateMediaObject_getFormGroup() {
		return new FormGroup<MediaObject_getFormProperties>({
			contentUrl: new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fileSize: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			keywords: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			mimeType: new FormControl<string | null | undefined>(undefined),
			originalName: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MediaObject resource is a collection of media objects that can be attached to alerts that are dispatched via an email transport. */
	export interface MediaObjectjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** Where the media file can be accessed. */
		contentUrl?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The size of the media file. */
		fileSize?: number | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * A string of keywords that can be used to search for a resource. Max 100 characters.
		 * Max length: 100
		 */
		keywords?: string | null;

		/** The mime type of the media file. */
		mimeType?: string | null;

		/** The original name of the media file. */
		originalName?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
	}

	/** The MediaObject resource is a collection of media objects that can be attached to alerts that are dispatched via an email transport. */
	export interface MediaObjectjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** Where the media file can be accessed. */
		contentUrl: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The size of the media file. */
		fileSize: FormControl<number | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * A string of keywords that can be used to search for a resource. Max 100 characters.
		 * Max length: 100
		 */
		keywords: FormControl<string | null | undefined>,

		/** The mime type of the media file. */
		mimeType: FormControl<string | null | undefined>,

		/** The original name of the media file. */
		originalName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreateMediaObjectjsonld_getFormGroup() {
		return new FormGroup<MediaObjectjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			contentUrl: new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fileSize: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			keywords: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			mimeType: new FormControl<string | null | undefined>(undefined),
			originalName: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_get {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings?: boolean | null;

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist?: boolean | null;

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText?: string | null;

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl?: string | null;

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds?: number | null;

		/** The expected ping / run interval of this monitor in human readable form. */
		humanizedInterval?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services. */
		internalMonitorName?: string | null;

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays?: number | null;

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours?: number | null;

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes?: number | null;

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths?: number | null;

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds?: number | null;

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears?: number | null;

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused?: boolean | null;

		/** When the last ping was received. This date-time is in the UTC timezone. */
		lastPingAt?: Date | null;

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: string;

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes?: string | null;

		/** The status of the monitor. */
		monitorStatusCode?: string | null;

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: string;

		/** When the next ping is expected. This date-time is in the UTC timezone. */
		nextPingAt?: Date | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header. */
		pingSecret?: string | null;

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt?: Date | null;

		/** The startMonitorAt date-time in the UTC timezone. */
		startMonitorAtUtc?: Date | null;

		/** Service notes regarding the resource. */
		systemMessages?: Array<string>;

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: string;

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit?: number | null;

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl?: string | null;
	}

	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_getFormProperties {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended: FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort: FormControl<string | null | undefined>,

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings: FormControl<boolean | null | undefined>,

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist: FormControl<boolean | null | undefined>,

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText: FormControl<string | null | undefined>,

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl: FormControl<string | null | undefined>,

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds: FormControl<number | null | undefined>,

		/** The expected ping / run interval of this monitor in human readable form. */
		humanizedInterval: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services. */
		internalMonitorName: FormControl<string | null | undefined>,

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays: FormControl<number | null | undefined>,

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours: FormControl<number | null | undefined>,

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes: FormControl<number | null | undefined>,

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths: FormControl<number | null | undefined>,

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears: FormControl<number | null | undefined>,

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused: FormControl<boolean | null | undefined>,

		/** When the last ping was received. This date-time is in the UTC timezone. */
		lastPingAt: FormControl<Date | null | undefined>,

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: FormControl<string | null | undefined>,

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes: FormControl<string | null | undefined>,

		/** The status of the monitor. */
		monitorStatusCode: FormControl<string | null | undefined>,

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: FormControl<string | null | undefined>,

		/** When the next ping is expected. This date-time is in the UTC timezone. */
		nextPingAt: FormControl<Date | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header. */
		pingSecret: FormControl<string | null | undefined>,

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt: FormControl<Date | null | undefined>,

		/** The startMonitorAt date-time in the UTC timezone. */
		startMonitorAtUtc: FormControl<Date | null | undefined>,

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: FormControl<string | null | undefined>,

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit: FormControl<number | null | undefined>,

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl: FormControl<string | null | undefined>,
	}
	export function CreateMonitor_getFormGroup() {
		return new FormGroup<Monitor_getFormProperties>({
			alertPayloadExtended: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2100000)]),
			alertPayloadShort: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			allowUnauthenticatedPings: new FormControl<boolean | null | undefined>(undefined),
			contentCheckMustNotExist: new FormControl<boolean | null | undefined>(undefined),
			contentCheckText: new FormControl<string | null | undefined>(undefined),
			contentCheckUrl: new FormControl<string | null | undefined>(undefined),
			contentCheckXpathFilter: new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			graceSeconds: new FormControl<number | null | undefined>(undefined),
			humanizedInterval: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			internalMonitorName: new FormControl<string | null | undefined>(undefined),
			intervalDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalHours: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMonths: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalSeconds: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalYears: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			isMonitorPaused: new FormControl<boolean | null | undefined>(undefined),
			lastPingAt: new FormControl<Date | null | undefined>(undefined),
			monitorName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			monitorNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			monitorStatusCode: new FormControl<string | null | undefined>(undefined),
			monitorTypeCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			nextPingAt: new FormControl<Date | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pingSecret: new FormControl<string | null | undefined>(undefined),
			publicDescription: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			startMonitorAt: new FormControl<Date | null | undefined>(undefined),
			startMonitorAtUtc: new FormControl<Date | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webResponseSecondsLimit: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			webResponseUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_patch {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings?: boolean | null;

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist?: boolean | null;

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText?: string | null;

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl?: string | null;

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds?: number | null;

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays?: number | null;

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours?: number | null;

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes?: number | null;

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths?: number | null;

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds?: number | null;

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears?: number | null;

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused?: boolean | null;

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: string;

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes?: string | null;

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription?: string | null;

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt?: Date | null;

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: string;

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit?: number | null;

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl?: string | null;
	}

	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_patchFormProperties {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended: FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort: FormControl<string | null | undefined>,

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings: FormControl<boolean | null | undefined>,

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist: FormControl<boolean | null | undefined>,

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText: FormControl<string | null | undefined>,

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl: FormControl<string | null | undefined>,

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays: FormControl<number | null | undefined>,

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours: FormControl<number | null | undefined>,

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes: FormControl<number | null | undefined>,

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths: FormControl<number | null | undefined>,

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears: FormControl<number | null | undefined>,

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused: FormControl<boolean | null | undefined>,

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: FormControl<string | null | undefined>,

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes: FormControl<string | null | undefined>,

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription: FormControl<string | null | undefined>,

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt: FormControl<Date | null | undefined>,

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: FormControl<string | null | undefined>,

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit: FormControl<number | null | undefined>,

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl: FormControl<string | null | undefined>,
	}
	export function CreateMonitor_patchFormGroup() {
		return new FormGroup<Monitor_patchFormProperties>({
			alertPayloadExtended: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2100000)]),
			alertPayloadShort: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			allowUnauthenticatedPings: new FormControl<boolean | null | undefined>(undefined),
			contentCheckMustNotExist: new FormControl<boolean | null | undefined>(undefined),
			contentCheckText: new FormControl<string | null | undefined>(undefined),
			contentCheckUrl: new FormControl<string | null | undefined>(undefined),
			contentCheckXpathFilter: new FormControl<string | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			graceSeconds: new FormControl<number | null | undefined>(undefined),
			intervalDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalHours: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMonths: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalSeconds: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalYears: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			isMonitorPaused: new FormControl<boolean | null | undefined>(undefined),
			monitorName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			monitorNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			publicDescription: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			startMonitorAt: new FormControl<Date | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webResponseSecondsLimit: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			webResponseUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_post {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings?: boolean | null;

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist?: boolean | null;

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText?: string | null;

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl?: string | null;

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds?: number | null;

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays?: number | null;

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours?: number | null;

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes?: number | null;

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths?: number | null;

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds?: number | null;

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears?: number | null;

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused?: boolean | null;

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: string;

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes?: string | null;

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription?: string | null;

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt?: Date | null;

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: string;

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit?: number | null;

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl?: string | null;
	}

	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_postFormProperties {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended: FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort: FormControl<string | null | undefined>,

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings: FormControl<boolean | null | undefined>,

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist: FormControl<boolean | null | undefined>,

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText: FormControl<string | null | undefined>,

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl: FormControl<string | null | undefined>,

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays: FormControl<number | null | undefined>,

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours: FormControl<number | null | undefined>,

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes: FormControl<number | null | undefined>,

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths: FormControl<number | null | undefined>,

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears: FormControl<number | null | undefined>,

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused: FormControl<boolean | null | undefined>,

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: FormControl<string | null | undefined>,

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes: FormControl<string | null | undefined>,

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription: FormControl<string | null | undefined>,

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt: FormControl<Date | null | undefined>,

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: FormControl<string | null | undefined>,

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit: FormControl<number | null | undefined>,

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl: FormControl<string | null | undefined>,
	}
	export function CreateMonitor_postFormGroup() {
		return new FormGroup<Monitor_postFormProperties>({
			alertPayloadExtended: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2100000)]),
			alertPayloadShort: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			allowUnauthenticatedPings: new FormControl<boolean | null | undefined>(undefined),
			contentCheckMustNotExist: new FormControl<boolean | null | undefined>(undefined),
			contentCheckText: new FormControl<string | null | undefined>(undefined),
			contentCheckUrl: new FormControl<string | null | undefined>(undefined),
			contentCheckXpathFilter: new FormControl<string | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			graceSeconds: new FormControl<number | null | undefined>(undefined),
			intervalDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalHours: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMonths: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalSeconds: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalYears: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			isMonitorPaused: new FormControl<boolean | null | undefined>(undefined),
			monitorName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			monitorNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			monitorTypeCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			publicDescription: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			startMonitorAt: new FormControl<Date | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webResponseSecondsLimit: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			webResponseUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_put {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings?: boolean | null;

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist?: boolean | null;

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText?: string | null;

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl?: string | null;

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds?: number | null;

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays?: number | null;

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours?: number | null;

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes?: number | null;

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths?: number | null;

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds?: number | null;

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears?: number | null;

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused?: boolean | null;

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: string;

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes?: string | null;

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription?: string | null;

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt?: Date | null;

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: string;

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit?: number | null;

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl?: string | null;
	}

	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitor_putFormProperties {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended: FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort: FormControl<string | null | undefined>,

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings: FormControl<boolean | null | undefined>,

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist: FormControl<boolean | null | undefined>,

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText: FormControl<string | null | undefined>,

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl: FormControl<string | null | undefined>,

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays: FormControl<number | null | undefined>,

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours: FormControl<number | null | undefined>,

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes: FormControl<number | null | undefined>,

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths: FormControl<number | null | undefined>,

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears: FormControl<number | null | undefined>,

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused: FormControl<boolean | null | undefined>,

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: FormControl<string | null | undefined>,

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes: FormControl<string | null | undefined>,

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription: FormControl<string | null | undefined>,

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt: FormControl<Date | null | undefined>,

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: FormControl<string | null | undefined>,

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit: FormControl<number | null | undefined>,

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl: FormControl<string | null | undefined>,
	}
	export function CreateMonitor_putFormGroup() {
		return new FormGroup<Monitor_putFormProperties>({
			alertPayloadExtended: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2100000)]),
			alertPayloadShort: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			allowUnauthenticatedPings: new FormControl<boolean | null | undefined>(undefined),
			contentCheckMustNotExist: new FormControl<boolean | null | undefined>(undefined),
			contentCheckText: new FormControl<string | null | undefined>(undefined),
			contentCheckUrl: new FormControl<string | null | undefined>(undefined),
			contentCheckXpathFilter: new FormControl<string | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			graceSeconds: new FormControl<number | null | undefined>(undefined),
			intervalDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalHours: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMonths: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalSeconds: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalYears: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			isMonitorPaused: new FormControl<boolean | null | undefined>(undefined),
			monitorName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			monitorNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			publicDescription: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			startMonitorAt: new FormControl<Date | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webResponseSecondsLimit: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			webResponseUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitorjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings?: boolean | null;

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist?: boolean | null;

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText?: string | null;

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl?: string | null;

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds?: number | null;

		/** The expected ping / run interval of this monitor in human readable form. */
		humanizedInterval?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services. */
		internalMonitorName?: string | null;

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays?: number | null;

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours?: number | null;

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes?: number | null;

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths?: number | null;

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds?: number | null;

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears?: number | null;

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused?: boolean | null;

		/** When the last ping was received. This date-time is in the UTC timezone. */
		lastPingAt?: Date | null;

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: string;

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes?: string | null;

		/** The status of the monitor. */
		monitorStatusCode?: string | null;

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: string;

		/** When the next ping is expected. This date-time is in the UTC timezone. */
		nextPingAt?: Date | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header. */
		pingSecret?: string | null;

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt?: Date | null;

		/** The startMonitorAt date-time in the UTC timezone. */
		startMonitorAtUtc?: Date | null;

		/** Service notes regarding the resource. */
		systemMessages?: Array<string>;

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: string;

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit?: number | null;

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl?: string | null;
	}

	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitorjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended: FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort: FormControl<string | null | undefined>,

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings: FormControl<boolean | null | undefined>,

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist: FormControl<boolean | null | undefined>,

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText: FormControl<string | null | undefined>,

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl: FormControl<string | null | undefined>,

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds: FormControl<number | null | undefined>,

		/** The expected ping / run interval of this monitor in human readable form. */
		humanizedInterval: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services. */
		internalMonitorName: FormControl<string | null | undefined>,

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays: FormControl<number | null | undefined>,

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours: FormControl<number | null | undefined>,

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes: FormControl<number | null | undefined>,

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths: FormControl<number | null | undefined>,

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears: FormControl<number | null | undefined>,

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused: FormControl<boolean | null | undefined>,

		/** When the last ping was received. This date-time is in the UTC timezone. */
		lastPingAt: FormControl<Date | null | undefined>,

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: FormControl<string | null | undefined>,

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes: FormControl<string | null | undefined>,

		/** The status of the monitor. */
		monitorStatusCode: FormControl<string | null | undefined>,

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: FormControl<string | null | undefined>,

		/** When the next ping is expected. This date-time is in the UTC timezone. */
		nextPingAt: FormControl<Date | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header. */
		pingSecret: FormControl<string | null | undefined>,

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt: FormControl<Date | null | undefined>,

		/** The startMonitorAt date-time in the UTC timezone. */
		startMonitorAtUtc: FormControl<Date | null | undefined>,

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: FormControl<string | null | undefined>,

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit: FormControl<number | null | undefined>,

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl: FormControl<string | null | undefined>,
	}
	export function CreateMonitorjsonld_getFormGroup() {
		return new FormGroup<Monitorjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			alertPayloadExtended: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2100000)]),
			alertPayloadShort: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			allowUnauthenticatedPings: new FormControl<boolean | null | undefined>(undefined),
			contentCheckMustNotExist: new FormControl<boolean | null | undefined>(undefined),
			contentCheckText: new FormControl<string | null | undefined>(undefined),
			contentCheckUrl: new FormControl<string | null | undefined>(undefined),
			contentCheckXpathFilter: new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			graceSeconds: new FormControl<number | null | undefined>(undefined),
			humanizedInterval: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			internalMonitorName: new FormControl<string | null | undefined>(undefined),
			intervalDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalHours: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMonths: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalSeconds: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalYears: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			isMonitorPaused: new FormControl<boolean | null | undefined>(undefined),
			lastPingAt: new FormControl<Date | null | undefined>(undefined),
			monitorName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			monitorNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			monitorStatusCode: new FormControl<string | null | undefined>(undefined),
			monitorTypeCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			nextPingAt: new FormControl<Date | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pingSecret: new FormControl<string | null | undefined>(undefined),
			publicDescription: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			startMonitorAt: new FormControl<Date | null | undefined>(undefined),
			startMonitorAtUtc: new FormControl<Date | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webResponseSecondsLimit: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			webResponseUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitorjsonld_post {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings?: boolean | null;

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist?: boolean | null;

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText?: string | null;

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl?: string | null;

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds?: number | null;

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays?: number | null;

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours?: number | null;

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes?: number | null;

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths?: number | null;

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds?: number | null;

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears?: number | null;

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused?: boolean | null;

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: string;

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes?: string | null;

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription?: string | null;

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt?: Date | null;

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: string;

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit?: number | null;

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl?: string | null;
	}

	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitorjsonld_postFormProperties {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended: FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort: FormControl<string | null | undefined>,

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings: FormControl<boolean | null | undefined>,

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist: FormControl<boolean | null | undefined>,

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText: FormControl<string | null | undefined>,

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl: FormControl<string | null | undefined>,

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays: FormControl<number | null | undefined>,

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours: FormControl<number | null | undefined>,

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes: FormControl<number | null | undefined>,

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths: FormControl<number | null | undefined>,

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears: FormControl<number | null | undefined>,

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused: FormControl<boolean | null | undefined>,

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: FormControl<string | null | undefined>,

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes: FormControl<string | null | undefined>,

		/**
		 * The type of the monitor.
		 * Required
		 */
		monitorTypeCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription: FormControl<string | null | undefined>,

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt: FormControl<Date | null | undefined>,

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: FormControl<string | null | undefined>,

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit: FormControl<number | null | undefined>,

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl: FormControl<string | null | undefined>,
	}
	export function CreateMonitorjsonld_postFormGroup() {
		return new FormGroup<Monitorjsonld_postFormProperties>({
			alertPayloadExtended: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2100000)]),
			alertPayloadShort: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			allowUnauthenticatedPings: new FormControl<boolean | null | undefined>(undefined),
			contentCheckMustNotExist: new FormControl<boolean | null | undefined>(undefined),
			contentCheckText: new FormControl<string | null | undefined>(undefined),
			contentCheckUrl: new FormControl<string | null | undefined>(undefined),
			contentCheckXpathFilter: new FormControl<string | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			graceSeconds: new FormControl<number | null | undefined>(undefined),
			intervalDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalHours: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMonths: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalSeconds: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalYears: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			isMonitorPaused: new FormControl<boolean | null | undefined>(undefined),
			monitorName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			monitorNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			monitorTypeCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			publicDescription: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			startMonitorAt: new FormControl<Date | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webResponseSecondsLimit: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			webResponseUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitorjsonld_put {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended?: string | null;

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings?: boolean | null;

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist?: boolean | null;

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText?: string | null;

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl?: string | null;

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds?: number | null;

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays?: number | null;

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours?: number | null;

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes?: number | null;

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths?: number | null;

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds?: number | null;

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears?: number | null;

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused?: boolean | null;

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: string;

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes?: string | null;

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription?: string | null;

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt?: Date | null;

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: string;

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit?: number | null;

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl?: string | null;
	}

	/** The Monitor resource is a collection of services that monitor the presence and/or absence of pings, and follow sets of rules to dispatch or not dispatch alerts. */
	export interface Monitorjsonld_putFormProperties {

		/**
		 * Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.
		 * Max length: 2100000
		 */
		alertPayloadExtended: FormControl<string | null | undefined>,

		/**
		 * Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.
		 * Max length: 100
		 */
		alertPayloadShort: FormControl<string | null | undefined>,

		/** Indicates that the monitor will accept pings that are not OAuth authenticated. */
		allowUnauthenticatedPings: FormControl<boolean | null | undefined>,

		/** Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent. */
		contentCheckMustNotExist: FormControl<boolean | null | undefined>,

		/** The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated. */
		contentCheckText: FormControl<string | null | undefined>,

		/** The URL that the Web Content monitor type must evaluate for the specified conditions. */
		contentCheckUrl: FormControl<string | null | undefined>,

		/** The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated. */
		contentCheckXpathFilter: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly. */
		graceSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalDays: FormControl<number | null | undefined>,

		/**
		 * The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalHours: FormControl<number | null | undefined>,

		/**
		 * The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMinutes: FormControl<number | null | undefined>,

		/**
		 * The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalMonths: FormControl<number | null | undefined>,

		/**
		 * The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalSeconds: FormControl<number | null | undefined>,

		/**
		 * The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.
		 * Minimum: 0
		 */
		intervalYears: FormControl<number | null | undefined>,

		/** Indicates that the monitor is paused and will not send alerts. */
		isMonitorPaused: FormControl<boolean | null | undefined>,

		/**
		 * The name of the monitor. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		monitorName: FormControl<string | null | undefined>,

		/**
		 * Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		monitorNotes: FormControl<string | null | undefined>,

		/**
		 * A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		publicDescription: FormControl<string | null | undefined>,

		/** When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. */
		startMonitorAt: FormControl<Date | null | undefined>,

		/**
		 * The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.
		 * Required
		 */
		timezoneCode: FormControl<string | null | undefined>,

		/**
		 * The time in seconds that the Web Response monitor type must allow for the web page to respond.
		 * Minimum: 0
		 */
		webResponseSecondsLimit: FormControl<number | null | undefined>,

		/** The URL that the Web Response monitor type must evaluate for the specified conditions. */
		webResponseUrl: FormControl<string | null | undefined>,
	}
	export function CreateMonitorjsonld_putFormGroup() {
		return new FormGroup<Monitorjsonld_putFormProperties>({
			alertPayloadExtended: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(2100000)]),
			alertPayloadShort: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(100)]),
			allowUnauthenticatedPings: new FormControl<boolean | null | undefined>(undefined),
			contentCheckMustNotExist: new FormControl<boolean | null | undefined>(undefined),
			contentCheckText: new FormControl<string | null | undefined>(undefined),
			contentCheckUrl: new FormControl<string | null | undefined>(undefined),
			contentCheckXpathFilter: new FormControl<string | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			graceSeconds: new FormControl<number | null | undefined>(undefined),
			intervalDays: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalHours: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalMonths: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalSeconds: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			intervalYears: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			isMonitorPaused: new FormControl<boolean | null | undefined>(undefined),
			monitorName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			monitorNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			publicDescription: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			startMonitorAt: new FormControl<Date | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			webResponseSecondsLimit: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			webResponseUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MonitorStatusCode resource is a set of codes that describes the possible statuses of a monitor. */
	export interface MonitorStatusCode_get {
		codeDescription?: string | null;
		id?: string | null;
	}

	/** The MonitorStatusCode resource is a set of codes that describes the possible statuses of a monitor. */
	export interface MonitorStatusCode_getFormProperties {
		codeDescription: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateMonitorStatusCode_getFormGroup() {
		return new FormGroup<MonitorStatusCode_getFormProperties>({
			codeDescription: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MonitorStatusCode resource is a set of codes that describes the possible statuses of a monitor. */
	export interface MonitorStatusCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;
		codeDescription?: string | null;
		id?: string | null;
	}

	/** The MonitorStatusCode resource is a set of codes that describes the possible statuses of a monitor. */
	export interface MonitorStatusCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,
		codeDescription: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateMonitorStatusCodejsonld_getFormGroup() {
		return new FormGroup<MonitorStatusCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeDescription: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MonitorStatusLog resource is a chronological record of all the changes in status that monitors have undergone. */
	export interface MonitorStatusLog_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The monitor that is related to this resource instance. */
		monitor?: string | null;

		/** The status of the monitor. */
		monitorStatusCode?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The ping that triggered this resource instance. */
		ping?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
	}

	/** The MonitorStatusLog resource is a chronological record of all the changes in status that monitors have undergone. */
	export interface MonitorStatusLog_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The monitor that is related to this resource instance. */
		monitor: FormControl<string | null | undefined>,

		/** The status of the monitor. */
		monitorStatusCode: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The ping that triggered this resource instance. */
		ping: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreateMonitorStatusLog_getFormGroup() {
		return new FormGroup<MonitorStatusLog_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined),
			monitorStatusCode: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			ping: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MonitorStatusLog resource is a chronological record of all the changes in status that monitors have undergone. */
	export interface MonitorStatusLogjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The monitor that is related to this resource instance. */
		monitor?: string | null;

		/** The status of the monitor. */
		monitorStatusCode?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The ping that triggered this resource instance. */
		ping?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
	}

	/** The MonitorStatusLog resource is a chronological record of all the changes in status that monitors have undergone. */
	export interface MonitorStatusLogjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The monitor that is related to this resource instance. */
		monitor: FormControl<string | null | undefined>,

		/** The status of the monitor. */
		monitorStatusCode: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The ping that triggered this resource instance. */
		ping: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreateMonitorStatusLogjsonld_getFormGroup() {
		return new FormGroup<MonitorStatusLogjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined),
			monitorStatusCode: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			ping: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MonitorTypeCode resource is a set of codes that describes the different types of monitors that are available. */
	export interface MonitorTypeCode_get {
		codeDescription?: string | null;
		codeDescriptionExpanded?: string | null;
		id?: string | null;
	}

	/** The MonitorTypeCode resource is a set of codes that describes the different types of monitors that are available. */
	export interface MonitorTypeCode_getFormProperties {
		codeDescription: FormControl<string | null | undefined>,
		codeDescriptionExpanded: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateMonitorTypeCode_getFormGroup() {
		return new FormGroup<MonitorTypeCode_getFormProperties>({
			codeDescription: new FormControl<string | null | undefined>(undefined),
			codeDescriptionExpanded: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The MonitorTypeCode resource is a set of codes that describes the different types of monitors that are available. */
	export interface MonitorTypeCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;
		codeDescription?: string | null;
		codeDescriptionExpanded?: string | null;
		id?: string | null;
	}

	/** The MonitorTypeCode resource is a set of codes that describes the different types of monitors that are available. */
	export interface MonitorTypeCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,
		codeDescription: FormControl<string | null | undefined>,
		codeDescriptionExpanded: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateMonitorTypeCodejsonld_getFormGroup() {
		return new FormGroup<MonitorTypeCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeDescription: new FormControl<string | null | undefined>(undefined),
			codeDescriptionExpanded: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_get {

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The monitors that are associated with this partition. */
		monitors?: Array<string>;

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: string;

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** The team invitations that are related to this resource. */
		teamInvitations?: Array<string>;

		/** The team members of this resource. */
		teamMembers?: Array<string>;
	}

	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: FormControl<string | null | undefined>,

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreatePartition_getFormGroup() {
		return new FormGroup<Partition_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partitionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partitionNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: string;

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes?: string | null;
	}

	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: FormControl<string | null | undefined>,

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes: FormControl<string | null | undefined>,
	}
	export function CreatePartition_patchFormGroup() {
		return new FormGroup<Partition_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partitionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partitionNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
		});

	}


	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: string;

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes?: string | null;
	}

	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: FormControl<string | null | undefined>,

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes: FormControl<string | null | undefined>,
	}
	export function CreatePartition_postFormGroup() {
		return new FormGroup<Partition_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partitionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partitionNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
		});

	}


	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: string;

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes?: string | null;
	}

	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partition_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: FormControl<string | null | undefined>,

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes: FormControl<string | null | undefined>,
	}
	export function CreatePartition_putFormGroup() {
		return new FormGroup<Partition_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partitionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partitionNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
		});

	}


	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partitionjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** The alert services that are related to this resource. */
		alertServices?: Array<string>;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The monitors that are associated with this partition. */
		monitors?: Array<string>;

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: string;

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** The team invitations that are related to this resource. */
		teamInvitations?: Array<string>;

		/** The team members of this resource. */
		teamMembers?: Array<string>;
	}

	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partitionjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: FormControl<string | null | undefined>,

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreatePartitionjsonld_getFormGroup() {
		return new FormGroup<Partitionjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partitionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partitionNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partitionjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: string;

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes?: string | null;
	}

	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partitionjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: FormControl<string | null | undefined>,

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes: FormControl<string | null | undefined>,
	}
	export function CreatePartitionjsonld_postFormGroup() {
		return new FormGroup<Partitionjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partitionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partitionNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
		});

	}


	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partitionjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: string;

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes?: string | null;
	}

	/** The Partition resource is a collection of siloed monitor and alert environments in the user account. */
	export interface Partitionjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the partition. Max 255 characters.
		 * Required
		 * Max length: 255
		 */
		partitionName: FormControl<string | null | undefined>,

		/**
		 * Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.
		 * Max length: 10000
		 */
		partitionNotes: FormControl<string | null | undefined>,
	}
	export function CreatePartitionjsonld_putFormGroup() {
		return new FormGroup<Partitionjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partitionName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partitionNotes: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(10000)]),
		});

	}


	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Ping_get {

		/** The alert logs that are related to this resource instance. */
		alertLogs?: Array<string>;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode?: string | null;

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt?: Date | null;

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch?: number | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The IP address where this resource originated. */
		ipAddress?: string | null;

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: string;

		/** The monitor status that resulted from the ping. */
		monitorStatusLog?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode?: string | null;

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload?: string | null;

		/** The method of the ping. */
		pingMethodCode?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
	}

	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Ping_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt: FormControl<Date | null | undefined>,

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch: FormControl<number | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The IP address where this resource originated. */
		ipAddress: FormControl<string | null | undefined>,

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: FormControl<string | null | undefined>,

		/** The monitor status that resulted from the ping. */
		monitorStatusLog: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode: FormControl<string | null | undefined>,

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload: FormControl<string | null | undefined>,

		/** The method of the ping. */
		pingMethodCode: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreatePing_getFormGroup() {
		return new FormGroup<Ping_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined),
			expectNextPingAt: new FormControl<Date | null | undefined>(undefined),
			expectNextPingAtEpoch: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			monitorStatusLog: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			pingCustomCode: new FormControl<string | null | undefined>(undefined),
			pingCustomPayload: new FormControl<string | null | undefined>(undefined),
			pingMethodCode: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Ping_post {

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt?: Date | null;

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch?: number | null;

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: string;

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode?: string | null;

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload?: string | null;
	}

	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Ping_postFormProperties {

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt: FormControl<Date | null | undefined>,

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch: FormControl<number | null | undefined>,

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: FormControl<string | null | undefined>,

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode: FormControl<string | null | undefined>,

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload: FormControl<string | null | undefined>,
	}
	export function CreatePing_postFormGroup() {
		return new FormGroup<Ping_postFormProperties>({
			expectNextPingAt: new FormControl<Date | null | undefined>(undefined),
			expectNextPingAtEpoch: new FormControl<number | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pingCustomCode: new FormControl<string | null | undefined>(undefined),
			pingCustomPayload: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Pingjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** The alert logs that are related to this resource instance. */
		alertLogs?: Array<string>;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode?: string | null;

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt?: Date | null;

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch?: number | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The IP address where this resource originated. */
		ipAddress?: string | null;

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: string;

		/** The monitor status that resulted from the ping. */
		monitorStatusLog?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode?: string | null;

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload?: string | null;

		/** The method of the ping. */
		pingMethodCode?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;
	}

	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Pingjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/** User-provided string on which to segment and filter data. Max 50 characters. */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt: FormControl<Date | null | undefined>,

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch: FormControl<number | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The IP address where this resource originated. */
		ipAddress: FormControl<string | null | undefined>,

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: FormControl<string | null | undefined>,

		/** The monitor status that resulted from the ping. */
		monitorStatusLog: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode: FormControl<string | null | undefined>,

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload: FormControl<string | null | undefined>,

		/** The method of the ping. */
		pingMethodCode: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,
	}
	export function CreatePingjsonld_getFormGroup() {
		return new FormGroup<Pingjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined),
			expectNextPingAt: new FormControl<Date | null | undefined>(undefined),
			expectNextPingAtEpoch: new FormControl<number | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			ipAddress: new FormControl<string | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			monitorStatusLog: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			pingCustomCode: new FormControl<string | null | undefined>(undefined),
			pingCustomPayload: new FormControl<string | null | undefined>(undefined),
			pingMethodCode: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Pingjsonld_post {

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt?: Date | null;

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch?: number | null;

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: string;

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode?: string | null;

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload?: string | null;
	}

	/** The Ping resource is a collection of pings that have been sent to monitors in the user account. */
	export interface Pingjsonld_postFormProperties {

		/** When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAt: FormControl<Date | null | undefined>,

		/** When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types. */
		expectNextPingAtEpoch: FormControl<number | null | undefined>,

		/**
		 * The monitor that is related to this resource instance.
		 * Required
		 */
		monitor: FormControl<string | null | undefined>,

		/** The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved. */
		pingCustomCode: FormControl<string | null | undefined>,

		/** The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert. */
		pingCustomPayload: FormControl<string | null | undefined>,
	}
	export function CreatePingjsonld_postFormGroup() {
		return new FormGroup<Pingjsonld_postFormProperties>({
			expectNextPingAt: new FormControl<Date | null | undefined>(undefined),
			expectNextPingAtEpoch: new FormControl<number | null | undefined>(undefined),
			monitor: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pingCustomCode: new FormControl<string | null | undefined>(undefined),
			pingCustomPayload: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The PingMethodCode resource is a set of codes that describes the different methods of sending pings. */
	export interface PingMethodCode_get {
		codeName?: string | null;
		id?: string | null;
	}

	/** The PingMethodCode resource is a set of codes that describes the different methods of sending pings. */
	export interface PingMethodCode_getFormProperties {
		codeName: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreatePingMethodCode_getFormGroup() {
		return new FormGroup<PingMethodCode_getFormProperties>({
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The PingMethodCode resource is a set of codes that describes the different methods of sending pings. */
	export interface PingMethodCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;
		codeName?: string | null;
		id?: string | null;
	}

	/** The PingMethodCode resource is a set of codes that describes the different methods of sending pings. */
	export interface PingMethodCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,
		codeName: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreatePingMethodCodejsonld_getFormGroup() {
		return new FormGroup<PingMethodCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitation_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: string;

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: string;

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** When the current status too effect. This date-time is in the UTC timezone. */
		statusAt?: Date | null;

		/** The current status of the invitation. */
		teamInvitationStatus?: string | null;

		/** The role of the team member on the team. */
		teamMemberRoleCode?: string | null;
	}

	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitation_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: FormControl<string | null | undefined>,

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: FormControl<string | null | undefined>,

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/** When the current status too effect. This date-time is in the UTC timezone. */
		statusAt: FormControl<Date | null | undefined>,

		/** The current status of the invitation. */
		teamInvitationStatus: FormControl<string | null | undefined>,

		/** The role of the team member on the team. */
		teamMemberRoleCode: FormControl<string | null | undefined>,
	}
	export function CreateTeamInvitation_getFormGroup() {
		return new FormGroup<TeamInvitation_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			inviteeEmail: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeFirstName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeLastName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			statusAt: new FormControl<Date | null | undefined>(undefined),
			teamInvitationStatus: new FormControl<string | null | undefined>(undefined),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitation_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: string;

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: string;

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The role of the team member on the team. */
		teamMemberRoleCode?: string | null;
	}

	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitation_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: FormControl<string | null | undefined>,

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: FormControl<string | null | undefined>,

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The role of the team member on the team. */
		teamMemberRoleCode: FormControl<string | null | undefined>,
	}
	export function CreateTeamInvitation_postFormGroup() {
		return new FormGroup<TeamInvitation_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			inviteeEmail: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeFirstName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeLastName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitationjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: string;

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: string;

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/** When the current status too effect. This date-time is in the UTC timezone. */
		statusAt?: Date | null;

		/** The current status of the invitation. */
		teamInvitationStatus?: string | null;

		/** The role of the team member on the team. */
		teamMemberRoleCode?: string | null;
	}

	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitationjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: FormControl<string | null | undefined>,

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: FormControl<string | null | undefined>,

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/** When the current status too effect. This date-time is in the UTC timezone. */
		statusAt: FormControl<Date | null | undefined>,

		/** The current status of the invitation. */
		teamInvitationStatus: FormControl<string | null | undefined>,

		/** The role of the team member on the team. */
		teamMemberRoleCode: FormControl<string | null | undefined>,
	}
	export function CreateTeamInvitationjsonld_getFormGroup() {
		return new FormGroup<TeamInvitationjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			inviteeEmail: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeFirstName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeLastName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			statusAt: new FormControl<Date | null | undefined>(undefined),
			teamInvitationStatus: new FormControl<string | null | undefined>(undefined),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitationjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: string;

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: string;

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The role of the team member on the team. */
		teamMemberRoleCode?: string | null;
	}

	/** The TeamInvitation resource is a collection of invitations that have been sent to people to become team members of partitions. */
	export interface TeamInvitationjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The email address of the person that is being invited.
		 * Required
		 */
		inviteeEmail: FormControl<string | null | undefined>,

		/**
		 * The first name of the person that is being invited.
		 * Required
		 */
		inviteeFirstName: FormControl<string | null | undefined>,

		/**
		 * The last name of the person that is being invited.
		 * Required
		 */
		inviteeLastName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The role of the team member on the team. */
		teamMemberRoleCode: FormControl<string | null | undefined>,
	}
	export function CreateTeamInvitationjsonld_postFormGroup() {
		return new FormGroup<TeamInvitationjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			inviteeEmail: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeFirstName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			inviteeLastName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMember_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: string;

		/** The user account that is related to this resource. */
		userAccount?: string | null;
	}

	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMember_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: FormControl<string | null | undefined>,

		/** The user account that is related to this resource. */
		userAccount: FormControl<string | null | undefined>,
	}
	export function CreateTeamMember_getFormGroup() {
		return new FormGroup<TeamMember_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			userAccount: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMember_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: string;
	}

	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMember_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: FormControl<string | null | undefined>,
	}
	export function CreateTeamMember_patchFormGroup() {
		return new FormGroup<TeamMember_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMember_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: string;
	}

	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMember_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: FormControl<string | null | undefined>,
	}
	export function CreateTeamMember_putFormGroup() {
		return new FormGroup<TeamMember_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMemberjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: string;

		/** The user account that is related to this resource. */
		userAccount?: string | null;
	}

	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMemberjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The partition that contains this resource instance. The resource cannot be moved to another partition. */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: FormControl<string | null | undefined>,

		/** The user account that is related to this resource. */
		userAccount: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberjsonld_getFormGroup() {
		return new FormGroup<TeamMemberjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			userAccount: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMemberjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: string;
	}

	/** The TeamMember resource is a collection of active team members of the partitions in a user account. */
	export interface TeamMemberjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The role of the team member on the team.
		 * Required
		 */
		teamMemberRoleCode: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberjsonld_putFormGroup() {
		return new FormGroup<TeamMemberjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			teamMemberRoleCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The TeamMemberRoleCode resource is a set of codes that describes the different roles that can be assigned to team members of partitions. */
	export interface TeamMemberRoleCode_get {
		codeDescription?: string | null;
		id?: string | null;
	}

	/** The TeamMemberRoleCode resource is a set of codes that describes the different roles that can be assigned to team members of partitions. */
	export interface TeamMemberRoleCode_getFormProperties {
		codeDescription: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberRoleCode_getFormGroup() {
		return new FormGroup<TeamMemberRoleCode_getFormProperties>({
			codeDescription: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TeamMemberRoleCode resource is a set of codes that describes the different roles that can be assigned to team members of partitions. */
	export interface TeamMemberRoleCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;
		codeDescription?: string | null;
		id?: string | null;
	}

	/** The TeamMemberRoleCode resource is a set of codes that describes the different roles that can be assigned to team members of partitions. */
	export interface TeamMemberRoleCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,
		codeDescription: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateTeamMemberRoleCodejsonld_getFormGroup() {
		return new FormGroup<TeamMemberRoleCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeDescription: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TimezoneCode resource is a set of codes that describes the different international timezones. */
	export interface TimezoneCode_get {

		/** The name of the code. */
		codeName?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The numeric offset from the UTC timezone. */
		offsetFromUtc?: number | null;

		/** The text offset from the UTC timezone that forms part of the ISO 8601 date time format. */
		timezoneDateString?: string | null;
	}

	/** The TimezoneCode resource is a set of codes that describes the different international timezones. */
	export interface TimezoneCode_getFormProperties {

		/** The name of the code. */
		codeName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The numeric offset from the UTC timezone. */
		offsetFromUtc: FormControl<number | null | undefined>,

		/** The text offset from the UTC timezone that forms part of the ISO 8601 date time format. */
		timezoneDateString: FormControl<string | null | undefined>,
	}
	export function CreateTimezoneCode_getFormGroup() {
		return new FormGroup<TimezoneCode_getFormProperties>({
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			offsetFromUtc: new FormControl<number | null | undefined>(undefined),
			timezoneDateString: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TimezoneCode resource is a set of codes that describes the different international timezones. */
	export interface TimezoneCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** The name of the code. */
		codeName?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** The numeric offset from the UTC timezone. */
		offsetFromUtc?: number | null;

		/** The text offset from the UTC timezone that forms part of the ISO 8601 date time format. */
		timezoneDateString?: string | null;
	}

	/** The TimezoneCode resource is a set of codes that describes the different international timezones. */
	export interface TimezoneCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** The name of the code. */
		codeName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** The numeric offset from the UTC timezone. */
		offsetFromUtc: FormControl<number | null | undefined>,

		/** The text offset from the UTC timezone that forms part of the ISO 8601 date time format. */
		timezoneDateString: FormControl<string | null | undefined>,
	}
	export function CreateTimezoneCodejsonld_getFormGroup() {
		return new FormGroup<TimezoneCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			offsetFromUtc: new FormControl<number | null | undefined>(undefined),
			timezoneDateString: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_get {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: string;

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate?: string | null;

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment?: string | null;

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: string;

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup?: string | null;

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: string;

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin?: string | null;

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: string;

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService?: string | null;

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity?: string | null;

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus?: string | null;

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags?: string | null;

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_getFormProperties {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate: FormControl<string | null | undefined>,

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment: FormControl<string | null | undefined>,

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: FormControl<string | null | undefined>,

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup: FormControl<string | null | undefined>,

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: FormControl<string | null | undefined>,

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin: FormControl<string | null | undefined>,

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService: FormControl<string | null | undefined>,

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity: FormControl<string | null | undefined>,

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags: FormControl<string | null | undefined>,

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAlerta_getFormGroup() {
		return new FormGroup<TransportAlerta_getFormProperties>({
			alertaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			alertaCorrelate: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEnvironment: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEvent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			alertaOrigin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaResource: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaService: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaStatus: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaTags: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_patch {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: string;

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate?: string | null;

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment?: string | null;

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: string;

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup?: string | null;

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: string;

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin?: string | null;

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: string;

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService?: string | null;

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity?: string | null;

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus?: string | null;

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags?: string | null;

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_patchFormProperties {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate: FormControl<string | null | undefined>,

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment: FormControl<string | null | undefined>,

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: FormControl<string | null | undefined>,

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup: FormControl<string | null | undefined>,

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: FormControl<string | null | undefined>,

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin: FormControl<string | null | undefined>,

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService: FormControl<string | null | undefined>,

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity: FormControl<string | null | undefined>,

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags: FormControl<string | null | undefined>,

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAlerta_patchFormGroup() {
		return new FormGroup<TransportAlerta_patchFormProperties>({
			alertaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			alertaCorrelate: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEnvironment: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEvent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			alertaOrigin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaResource: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaService: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaStatus: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaTags: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_post {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: string;

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate?: string | null;

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment?: string | null;

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: string;

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup?: string | null;

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: string;

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin?: string | null;

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: string;

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService?: string | null;

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity?: string | null;

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus?: string | null;

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags?: string | null;

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_postFormProperties {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate: FormControl<string | null | undefined>,

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment: FormControl<string | null | undefined>,

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: FormControl<string | null | undefined>,

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup: FormControl<string | null | undefined>,

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: FormControl<string | null | undefined>,

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin: FormControl<string | null | undefined>,

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService: FormControl<string | null | undefined>,

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity: FormControl<string | null | undefined>,

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags: FormControl<string | null | undefined>,

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAlerta_postFormGroup() {
		return new FormGroup<TransportAlerta_postFormProperties>({
			alertaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			alertaCorrelate: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEnvironment: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEvent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			alertaOrigin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaResource: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaService: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaStatus: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaTags: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_put {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: string;

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate?: string | null;

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment?: string | null;

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: string;

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup?: string | null;

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: string;

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin?: string | null;

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: string;

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService?: string | null;

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity?: string | null;

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus?: string | null;

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags?: string | null;

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlerta_putFormProperties {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate: FormControl<string | null | undefined>,

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment: FormControl<string | null | undefined>,

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: FormControl<string | null | undefined>,

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup: FormControl<string | null | undefined>,

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: FormControl<string | null | undefined>,

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin: FormControl<string | null | undefined>,

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService: FormControl<string | null | undefined>,

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity: FormControl<string | null | undefined>,

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags: FormControl<string | null | undefined>,

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAlerta_putFormGroup() {
		return new FormGroup<TransportAlerta_putFormProperties>({
			alertaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			alertaCorrelate: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEnvironment: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEvent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			alertaOrigin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaResource: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaService: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaStatus: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaTags: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlertajsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: string;

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate?: string | null;

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment?: string | null;

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: string;

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup?: string | null;

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: string;

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin?: string | null;

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: string;

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService?: string | null;

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity?: string | null;

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus?: string | null;

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags?: string | null;

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlertajsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate: FormControl<string | null | undefined>,

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment: FormControl<string | null | undefined>,

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: FormControl<string | null | undefined>,

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup: FormControl<string | null | undefined>,

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: FormControl<string | null | undefined>,

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin: FormControl<string | null | undefined>,

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService: FormControl<string | null | undefined>,

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity: FormControl<string | null | undefined>,

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags: FormControl<string | null | undefined>,

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAlertajsonld_getFormGroup() {
		return new FormGroup<TransportAlertajsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			alertaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			alertaCorrelate: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEnvironment: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEvent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			alertaOrigin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaResource: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaService: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaStatus: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaTags: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlertajsonld_post {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: string;

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate?: string | null;

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment?: string | null;

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: string;

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup?: string | null;

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: string;

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin?: string | null;

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: string;

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService?: string | null;

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity?: string | null;

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus?: string | null;

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags?: string | null;

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlertajsonld_postFormProperties {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate: FormControl<string | null | undefined>,

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment: FormControl<string | null | undefined>,

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: FormControl<string | null | undefined>,

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup: FormControl<string | null | undefined>,

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: FormControl<string | null | undefined>,

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin: FormControl<string | null | undefined>,

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService: FormControl<string | null | undefined>,

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity: FormControl<string | null | undefined>,

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags: FormControl<string | null | undefined>,

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAlertajsonld_postFormGroup() {
		return new FormGroup<TransportAlertajsonld_postFormProperties>({
			alertaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			alertaCorrelate: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEnvironment: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEvent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			alertaOrigin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaResource: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaService: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaStatus: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaTags: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlertajsonld_put {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: string;

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate?: string | null;

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment?: string | null;

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: string;

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup?: string | null;

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: string;

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin?: string | null;

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: string;

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService?: string | null;

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity?: string | null;

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus?: string | null;

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags?: string | null;

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service. */
	export interface TransportAlertajsonld_putFormProperties {

		/**
		 * The API key for the Alerta service.
		 * Required
		 * Max length: 1000
		 */
		alertaApiKey: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of related event names for the Alerta service.
		 * Max length: 255
		 */
		alertaCorrelate: FormControl<string | null | undefined>,

		/**
		 * The environment value for the Alerta service.
		 * Max length: 255
		 */
		alertaEnvironment: FormControl<string | null | undefined>,

		/**
		 * The event value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaEvent: FormControl<string | null | undefined>,

		/**
		 * The group value for the Alerta service.
		 * Max length: 255
		 */
		alertaGroup: FormControl<string | null | undefined>,

		/**
		 * The host name for the Alerta service (omit the "https://" part).
		 * Required
		 */
		alertaHost: FormControl<string | null | undefined>,

		/**
		 * The origin value for the Alerta service.
		 * Max length: 255
		 */
		alertaOrigin: FormControl<string | null | undefined>,

		/**
		 * The resource value for the Alerta service.
		 * Required
		 * Max length: 255
		 */
		alertaResource: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of affected services for the Alerta service.
		 * Max length: 255
		 */
		alertaService: FormControl<string | null | undefined>,

		/**
		 * The severity value for the Alerta service.
		 * Max length: 255
		 */
		alertaSeverity: FormControl<string | null | undefined>,

		/**
		 * The status value for the Alerta service.
		 * Max length: 255
		 */
		alertaStatus: FormControl<string | null | undefined>,

		/**
		 * The comma-separated list of tags for the Alerta service.
		 * Max length: 255
		 */
		alertaTags: FormControl<string | null | undefined>,

		/**
		 * The type value for the Alerta service.
		 * Max length: 255
		 */
		alertaType: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAlertajsonld_putFormGroup() {
		return new FormGroup<TransportAlertajsonld_putFormProperties>({
			alertaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			alertaCorrelate: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEnvironment: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaEvent: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			alertaOrigin: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaResource: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			alertaService: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaStatus: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaTags: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			alertaType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_get {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: string;

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom?: string | null;

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_getFormProperties {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAllMySms_getFormGroup() {
		return new FormGroup<TransportAllMySms_getFormProperties>({
			allMySmsApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			allMySmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			allMySmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_patch {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: string;

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom?: string | null;

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_patchFormProperties {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAllMySms_patchFormGroup() {
		return new FormGroup<TransportAllMySms_patchFormProperties>({
			allMySmsApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			allMySmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			allMySmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_post {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: string;

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom?: string | null;

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_postFormProperties {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAllMySms_postFormGroup() {
		return new FormGroup<TransportAllMySms_postFormProperties>({
			allMySmsApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			allMySmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			allMySmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_put {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: string;

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom?: string | null;

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySms_putFormProperties {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAllMySms_putFormGroup() {
		return new FormGroup<TransportAllMySms_putFormProperties>({
			allMySmsApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			allMySmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			allMySmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySmsjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: string;

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom?: string | null;

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySmsjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAllMySmsjsonld_getFormGroup() {
		return new FormGroup<TransportAllMySmsjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			allMySmsApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			allMySmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			allMySmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySmsjsonld_post {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: string;

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom?: string | null;

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySmsjsonld_postFormProperties {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAllMySmsjsonld_postFormGroup() {
		return new FormGroup<TransportAllMySmsjsonld_postFormProperties>({
			allMySmsApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			allMySmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			allMySmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySmsjsonld_put {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: string;

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom?: string | null;

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAllMySms resource is a collection of transports that carry dispatched alerts to the external Allmysms service. */
	export interface TransportAllMySmsjsonld_putFormProperties {

		/**
		 * The API key for the Allmysms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		allMySmsApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value (default 36180) for the Allmysms service.
		 * Max length: 255
		 */
		allMySmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login credential for the Allmysms service.
		 * Required
		 * Max length: 255
		 */
		allMySmsLogin: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAllMySmsjsonld_putFormGroup() {
		return new FormGroup<TransportAllMySmsjsonld_putFormProperties>({
			allMySmsApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			allMySmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			allMySmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_get {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: string;

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: string;

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_getFormProperties {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: FormControl<string | null | undefined>,

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: FormControl<string | null | undefined>,

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAmazonSns_getFormGroup() {
		return new FormGroup<TransportAmazonSns_getFormProperties>({
			amazonSnsAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsRegion: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsSecretKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_patch {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: string;

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: string;

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_patchFormProperties {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: FormControl<string | null | undefined>,

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: FormControl<string | null | undefined>,

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAmazonSns_patchFormGroup() {
		return new FormGroup<TransportAmazonSns_patchFormProperties>({
			amazonSnsAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsRegion: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsSecretKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_post {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: string;

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: string;

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_postFormProperties {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: FormControl<string | null | undefined>,

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: FormControl<string | null | undefined>,

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAmazonSns_postFormGroup() {
		return new FormGroup<TransportAmazonSns_postFormProperties>({
			amazonSnsAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsRegion: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsSecretKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_put {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: string;

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: string;

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSns_putFormProperties {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: FormControl<string | null | undefined>,

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: FormControl<string | null | undefined>,

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAmazonSns_putFormGroup() {
		return new FormGroup<TransportAmazonSns_putFormProperties>({
			amazonSnsAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsRegion: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsSecretKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSnsjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: string;

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: string;

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSnsjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: FormControl<string | null | undefined>,

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: FormControl<string | null | undefined>,

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAmazonSnsjsonld_getFormGroup() {
		return new FormGroup<TransportAmazonSnsjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			amazonSnsAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsRegion: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsSecretKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSnsjsonld_post {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: string;

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: string;

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSnsjsonld_postFormProperties {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: FormControl<string | null | undefined>,

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: FormControl<string | null | undefined>,

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAmazonSnsjsonld_postFormGroup() {
		return new FormGroup<TransportAmazonSnsjsonld_postFormProperties>({
			amazonSnsAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsRegion: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsSecretKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSnsjsonld_put {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: string;

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: string;

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportAmazonSns resource is a collection of transports that carry dispatched alerts to the external Amazon SNS service. */
	export interface TransportAmazonSnsjsonld_putFormProperties {

		/**
		 * The access key for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsAccessKey: FormControl<string | null | undefined>,

		/**
		 * The region for the Amazon SNS service.
		 * Required
		 * Max length: 255
		 */
		amazonSnsRegion: FormControl<string | null | undefined>,

		/**
		 * The secret key for the Amazon SNS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		amazonSnsSecretKey: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportAmazonSnsjsonld_putFormGroup() {
		return new FormGroup<TransportAmazonSnsjsonld_putFormProperties>({
			amazonSnsAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsRegion: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			amazonSnsSecretKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_get {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: string;

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: string;

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: string;

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: string;

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_getFormProperties {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: FormControl<string | null | undefined>,

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: FormControl<string | null | undefined>,

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportBandwidth_getFormGroup() {
		return new FormGroup<TransportBandwidth_getFormProperties>({
			bandwidthAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthApplicationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			bandwidthUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_patch {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: string;

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: string;

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: string;

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: string;

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_patchFormProperties {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: FormControl<string | null | undefined>,

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: FormControl<string | null | undefined>,

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportBandwidth_patchFormGroup() {
		return new FormGroup<TransportBandwidth_patchFormProperties>({
			bandwidthAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthApplicationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			bandwidthUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_post {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: string;

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: string;

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: string;

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: string;

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_postFormProperties {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: FormControl<string | null | undefined>,

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: FormControl<string | null | undefined>,

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportBandwidth_postFormGroup() {
		return new FormGroup<TransportBandwidth_postFormProperties>({
			bandwidthAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthApplicationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			bandwidthUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_put {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: string;

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: string;

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: string;

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: string;

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidth_putFormProperties {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: FormControl<string | null | undefined>,

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: FormControl<string | null | undefined>,

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportBandwidth_putFormGroup() {
		return new FormGroup<TransportBandwidth_putFormProperties>({
			bandwidthAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthApplicationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			bandwidthUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidthjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: string;

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: string;

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: string;

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: string;

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidthjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: FormControl<string | null | undefined>,

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: FormControl<string | null | undefined>,

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportBandwidthjsonld_getFormGroup() {
		return new FormGroup<TransportBandwidthjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			bandwidthAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthApplicationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			bandwidthUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidthjsonld_post {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: string;

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: string;

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: string;

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: string;

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidthjsonld_postFormProperties {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: FormControl<string | null | undefined>,

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: FormControl<string | null | undefined>,

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportBandwidthjsonld_postFormGroup() {
		return new FormGroup<TransportBandwidthjsonld_postFormProperties>({
			bandwidthAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthApplicationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			bandwidthUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidthjsonld_put {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: string;

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: string;

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: string;

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: string;

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportBandwidth resource is a collection of transports that carry dispatched alerts to the external Bandwidth service. */
	export interface TransportBandwidthjsonld_putFormProperties {

		/**
		 * The account ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthAccountId: FormControl<string | null | undefined>,

		/**
		 * The application ID value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthApplicationId: FormControl<string | null | undefined>,

		/**
		 * The from value for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Bandwidth service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		bandwidthPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Bandwidth service.
		 * Required
		 * Max length: 255
		 */
		bandwidthUsername: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportBandwidthjsonld_putFormGroup() {
		return new FormGroup<TransportBandwidthjsonld_putFormProperties>({
			bandwidthAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthApplicationId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			bandwidthPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			bandwidthUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_get {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: string;

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_getFormProperties {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportChatwork_getFormGroup() {
		return new FormGroup<TransportChatwork_getFormProperties>({
			chatworkApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			chatworkRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_patch {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: string;

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_patchFormProperties {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportChatwork_patchFormGroup() {
		return new FormGroup<TransportChatwork_patchFormProperties>({
			chatworkApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			chatworkRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_post {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: string;

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_postFormProperties {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportChatwork_postFormGroup() {
		return new FormGroup<TransportChatwork_postFormProperties>({
			chatworkApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			chatworkRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_put {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: string;

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatwork_putFormProperties {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportChatwork_putFormGroup() {
		return new FormGroup<TransportChatwork_putFormProperties>({
			chatworkApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			chatworkRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatworkjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: string;

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatworkjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportChatworkjsonld_getFormGroup() {
		return new FormGroup<TransportChatworkjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			chatworkApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			chatworkRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatworkjsonld_post {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: string;

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatworkjsonld_postFormProperties {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportChatworkjsonld_postFormGroup() {
		return new FormGroup<TransportChatworkjsonld_postFormProperties>({
			chatworkApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			chatworkRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatworkjsonld_put {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: string;

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportChatwork resource is a collection of transports that carry dispatched alerts to the external Chatwork service. */
	export interface TransportChatworkjsonld_putFormProperties {

		/**
		 * The API token for the Chatwork service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		chatworkApiToken: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Chatwork service.
		 * Required
		 * Max length: 255
		 */
		chatworkRoomId: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportChatworkjsonld_putFormGroup() {
		return new FormGroup<TransportChatworkjsonld_putFormProperties>({
			chatworkApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			chatworkRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_get {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: string;

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: string;

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom?: string | null;

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail?: string | null;

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId?: string | null;

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_getFormProperties {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: FormControl<string | null | undefined>,

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: FormControl<string | null | undefined>,

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom: FormControl<string | null | undefined>,

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail: FormControl<string | null | undefined>,

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId: FormControl<string | null | undefined>,

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickSend_getFormGroup() {
		return new FormGroup<TransportClickSend_getFormProperties>({
			clickSendApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickSendApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			clickSendFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendFromEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendListId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_patch {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: string;

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: string;

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom?: string | null;

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail?: string | null;

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId?: string | null;

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_patchFormProperties {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: FormControl<string | null | undefined>,

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: FormControl<string | null | undefined>,

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom: FormControl<string | null | undefined>,

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail: FormControl<string | null | undefined>,

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId: FormControl<string | null | undefined>,

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickSend_patchFormGroup() {
		return new FormGroup<TransportClickSend_patchFormProperties>({
			clickSendApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickSendApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			clickSendFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendFromEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendListId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_post {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: string;

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: string;

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom?: string | null;

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail?: string | null;

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId?: string | null;

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_postFormProperties {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: FormControl<string | null | undefined>,

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: FormControl<string | null | undefined>,

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom: FormControl<string | null | undefined>,

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail: FormControl<string | null | undefined>,

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId: FormControl<string | null | undefined>,

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickSend_postFormGroup() {
		return new FormGroup<TransportClickSend_postFormProperties>({
			clickSendApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickSendApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			clickSendFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendFromEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendListId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_put {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: string;

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: string;

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom?: string | null;

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail?: string | null;

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId?: string | null;

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSend_putFormProperties {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: FormControl<string | null | undefined>,

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: FormControl<string | null | undefined>,

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom: FormControl<string | null | undefined>,

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail: FormControl<string | null | undefined>,

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId: FormControl<string | null | undefined>,

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickSend_putFormGroup() {
		return new FormGroup<TransportClickSend_putFormProperties>({
			clickSendApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickSendApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			clickSendFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendFromEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendListId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSendjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: string;

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: string;

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom?: string | null;

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail?: string | null;

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId?: string | null;

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSendjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: FormControl<string | null | undefined>,

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: FormControl<string | null | undefined>,

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom: FormControl<string | null | undefined>,

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail: FormControl<string | null | undefined>,

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId: FormControl<string | null | undefined>,

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickSendjsonld_getFormGroup() {
		return new FormGroup<TransportClickSendjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			clickSendApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickSendApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			clickSendFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendFromEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendListId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSendjsonld_post {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: string;

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: string;

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom?: string | null;

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail?: string | null;

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId?: string | null;

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSendjsonld_postFormProperties {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: FormControl<string | null | undefined>,

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: FormControl<string | null | undefined>,

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom: FormControl<string | null | undefined>,

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail: FormControl<string | null | undefined>,

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId: FormControl<string | null | undefined>,

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickSendjsonld_postFormGroup() {
		return new FormGroup<TransportClickSendjsonld_postFormProperties>({
			clickSendApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickSendApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			clickSendFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendFromEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendListId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSendjsonld_put {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: string;

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: string;

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom?: string | null;

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail?: string | null;

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId?: string | null;

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource?: string | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickSend resource is a collection of transports that carry dispatched alerts to the external ClickSend service. */
	export interface TransportClickSendjsonld_putFormProperties {

		/**
		 * The API key for the ClickSend service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickSendApiKey: FormControl<string | null | undefined>,

		/**
		 * The API username for the ClickSend service.
		 * Required
		 * Max length: 255
		 */
		clickSendApiUsername: FormControl<string | null | undefined>,

		/**
		 * The from value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFrom: FormControl<string | null | undefined>,

		/**
		 * The from email value where replies must be emailed for the ClickSend service.
		 * Max length: 255
		 */
		clickSendFromEmail: FormControl<string | null | undefined>,

		/**
		 * The recipient list ID value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendListId: FormControl<string | null | undefined>,

		/**
		 * The source method of sending value for the ClickSend service.
		 * Max length: 255
		 */
		clickSendSource: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickSendjsonld_putFormGroup() {
		return new FormGroup<TransportClickSendjsonld_putFormProperties>({
			clickSendApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickSendApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			clickSendFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendFromEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendListId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			clickSendSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_get {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: string;

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_getFormProperties {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: FormControl<string | null | undefined>,

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickatell_getFormGroup() {
		return new FormGroup<TransportClickatell_getFormProperties>({
			clickatellAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickatellFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_patch {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: string;

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_patchFormProperties {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: FormControl<string | null | undefined>,

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickatell_patchFormGroup() {
		return new FormGroup<TransportClickatell_patchFormProperties>({
			clickatellAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickatellFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_post {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: string;

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_postFormProperties {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: FormControl<string | null | undefined>,

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickatell_postFormGroup() {
		return new FormGroup<TransportClickatell_postFormProperties>({
			clickatellAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickatellFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_put {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: string;

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatell_putFormProperties {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: FormControl<string | null | undefined>,

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickatell_putFormGroup() {
		return new FormGroup<TransportClickatell_putFormProperties>({
			clickatellAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickatellFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatelljsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: string;

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatelljsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: FormControl<string | null | undefined>,

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickatelljsonld_getFormGroup() {
		return new FormGroup<TransportClickatelljsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			clickatellAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickatellFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatelljsonld_post {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: string;

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatelljsonld_postFormProperties {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: FormControl<string | null | undefined>,

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickatelljsonld_postFormGroup() {
		return new FormGroup<TransportClickatelljsonld_postFormProperties>({
			clickatellAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickatellFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatelljsonld_put {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: string;

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportClickatell resource is a collection of transports that carry dispatched alerts to the external Clickatell service. */
	export interface TransportClickatelljsonld_putFormProperties {

		/**
		 * The access token for the Clickatell service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		clickatellAccessToken: FormControl<string | null | undefined>,

		/**
		 * The from value for the Clickatell service.
		 * Required
		 * Max length: 255
		 */
		clickatellFrom: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportClickatelljsonld_putFormGroup() {
		return new FormGroup<TransportClickatelljsonld_putFormProperties>({
			clickatellAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			clickatellFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_get {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory?: string | null;

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName?: string | null;

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_getFormProperties {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory: FormControl<string | null | undefined>,

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName: FormControl<string | null | undefined>,

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportContactEveryone_getFormGroup() {
		return new FormGroup<TransportContactEveryone_getFormProperties>({
			contactEveryoneCategory: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneDiffusionName: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_patch {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory?: string | null;

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName?: string | null;

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_patchFormProperties {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory: FormControl<string | null | undefined>,

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName: FormControl<string | null | undefined>,

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportContactEveryone_patchFormGroup() {
		return new FormGroup<TransportContactEveryone_patchFormProperties>({
			contactEveryoneCategory: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneDiffusionName: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_post {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory?: string | null;

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName?: string | null;

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_postFormProperties {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory: FormControl<string | null | undefined>,

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName: FormControl<string | null | undefined>,

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportContactEveryone_postFormGroup() {
		return new FormGroup<TransportContactEveryone_postFormProperties>({
			contactEveryoneCategory: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneDiffusionName: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_put {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory?: string | null;

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName?: string | null;

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryone_putFormProperties {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory: FormControl<string | null | undefined>,

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName: FormControl<string | null | undefined>,

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportContactEveryone_putFormGroup() {
		return new FormGroup<TransportContactEveryone_putFormProperties>({
			contactEveryoneCategory: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneDiffusionName: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryonejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory?: string | null;

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName?: string | null;

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: string;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryonejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory: FormControl<string | null | undefined>,

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName: FormControl<string | null | undefined>,

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportContactEveryonejsonld_getFormGroup() {
		return new FormGroup<TransportContactEveryonejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			contactEveryoneCategory: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneDiffusionName: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryonejsonld_post {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory?: string | null;

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName?: string | null;

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryonejsonld_postFormProperties {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory: FormControl<string | null | undefined>,

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName: FormControl<string | null | undefined>,

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportContactEveryonejsonld_postFormGroup() {
		return new FormGroup<TransportContactEveryonejsonld_postFormProperties>({
			contactEveryoneCategory: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneDiffusionName: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryonejsonld_put {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory?: string | null;

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName?: string | null;

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: string;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportContactEveryone resource is a collection of transports that carry dispatched alerts to the external Contact Everyone service. */
	export interface TransportContactEveryonejsonld_putFormProperties {

		/**
		 * The label of the category that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneCategory: FormControl<string | null | undefined>,

		/**
		 * The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.
		 * Max length: 255
		 */
		contactEveryoneDiffusionName: FormControl<string | null | undefined>,

		/**
		 * The token for the Contact Everyone service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		contactEveryoneToken: FormControl<string | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportContactEveryonejsonld_putFormGroup() {
		return new FormGroup<TransportContactEveryonejsonld_putFormProperties>({
			contactEveryoneCategory: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneDiffusionName: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			contactEveryoneToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: string;

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: FormControl<string | null | undefined>,

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportDiscord_getFormGroup() {
		return new FormGroup<TransportDiscord_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			discordToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			discordWebhookId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: string;

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: FormControl<string | null | undefined>,

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportDiscord_patchFormGroup() {
		return new FormGroup<TransportDiscord_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			discordToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			discordWebhookId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: string;

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: FormControl<string | null | undefined>,

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportDiscord_postFormGroup() {
		return new FormGroup<TransportDiscord_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			discordToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			discordWebhookId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: string;

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscord_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: FormControl<string | null | undefined>,

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportDiscord_putFormGroup() {
		return new FormGroup<TransportDiscord_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			discordToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			discordWebhookId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscordjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: string;

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscordjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: FormControl<string | null | undefined>,

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportDiscordjsonld_getFormGroup() {
		return new FormGroup<TransportDiscordjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			discordToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			discordWebhookId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscordjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: string;

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscordjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: FormControl<string | null | undefined>,

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportDiscordjsonld_postFormGroup() {
		return new FormGroup<TransportDiscordjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			discordToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			discordWebhookId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscordjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: string;

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportDiscord resource is a collection of transports that carry dispatched alerts to the external Discord service. */
	export interface TransportDiscordjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Discord service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		discordToken: FormControl<string | null | undefined>,

		/**
		 * The webhook ID for the Discord service.
		 * Required
		 * Max length: 255
		 */
		discordWebhookId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportDiscordjsonld_putFormGroup() {
		return new FormGroup<TransportDiscordjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			discordToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			discordWebhookId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: string;

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: string;

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: string;

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: number;

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: string;

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: FormControl<string | null | undefined>,

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: FormControl<string | null | undefined>,

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: FormControl<number | null | undefined>,

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: FormControl<string | null | undefined>,

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEmail_getFormGroup() {
		return new FormGroup<TransportEmail_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			emailFromAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailFromName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			emailPort: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			emailServer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: string;

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: string;

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: string;

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: number;

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: string;

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: FormControl<string | null | undefined>,

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: FormControl<string | null | undefined>,

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: FormControl<number | null | undefined>,

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: FormControl<string | null | undefined>,

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEmail_patchFormGroup() {
		return new FormGroup<TransportEmail_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			emailFromAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailFromName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			emailPort: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			emailServer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: string;

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: string;

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: string;

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: number;

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: string;

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: FormControl<string | null | undefined>,

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: FormControl<string | null | undefined>,

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: FormControl<number | null | undefined>,

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: FormControl<string | null | undefined>,

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEmail_postFormGroup() {
		return new FormGroup<TransportEmail_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			emailFromAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailFromName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			emailPort: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			emailServer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: string;

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: string;

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: string;

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: number;

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: string;

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmail_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: FormControl<string | null | undefined>,

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: FormControl<string | null | undefined>,

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: FormControl<number | null | undefined>,

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: FormControl<string | null | undefined>,

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEmail_putFormGroup() {
		return new FormGroup<TransportEmail_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			emailFromAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailFromName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			emailPort: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			emailServer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmailjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: string;

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: string;

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: string;

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: number;

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: string;

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmailjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: FormControl<string | null | undefined>,

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: FormControl<string | null | undefined>,

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: FormControl<number | null | undefined>,

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: FormControl<string | null | undefined>,

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEmailjsonld_getFormGroup() {
		return new FormGroup<TransportEmailjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			emailFromAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailFromName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			emailPort: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			emailServer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmailjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: string;

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: string;

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: string;

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: number;

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: string;

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmailjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: FormControl<string | null | undefined>,

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: FormControl<string | null | undefined>,

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: FormControl<number | null | undefined>,

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: FormControl<string | null | undefined>,

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEmailjsonld_postFormGroup() {
		return new FormGroup<TransportEmailjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			emailFromAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailFromName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			emailPort: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			emailServer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmailjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: string;

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: string;

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: string;

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: number;

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: string;

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEmail resource is a collection of transports that carry dispatched alerts to external SMTP email services. */
	export interface TransportEmailjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender email address for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromAddress: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailFromName: FormControl<string | null | undefined>,

		/**
		 * The password for the SMTP Email service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		emailPassword: FormControl<string | null | undefined>,

		/**
		 * The port for the SMTP Email service.
		 * Required
		 * Minimum: 0
		 */
		emailPort: FormControl<number | null | undefined>,

		/**
		 * The server for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailServer: FormControl<string | null | undefined>,

		/**
		 * The username for the SMTP Email service.
		 * Required
		 * Max length: 255
		 */
		emailUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEmailjsonld_putFormGroup() {
		return new FormGroup<TransportEmailjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			emailFromAddress: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailFromName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			emailPort: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(0)]),
			emailServer: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			emailUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: string;

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: FormControl<string | null | undefined>,

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEngagespot_getFormGroup() {
		return new FormGroup<TransportEngagespot_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			engagespotApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			engagespotCampaignName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: string;

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: FormControl<string | null | undefined>,

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEngagespot_patchFormGroup() {
		return new FormGroup<TransportEngagespot_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			engagespotApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			engagespotCampaignName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: string;

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: FormControl<string | null | undefined>,

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEngagespot_postFormGroup() {
		return new FormGroup<TransportEngagespot_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			engagespotApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			engagespotCampaignName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: string;

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespot_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: FormControl<string | null | undefined>,

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEngagespot_putFormGroup() {
		return new FormGroup<TransportEngagespot_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			engagespotApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			engagespotCampaignName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespotjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: string;

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespotjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: FormControl<string | null | undefined>,

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEngagespotjsonld_getFormGroup() {
		return new FormGroup<TransportEngagespotjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			engagespotApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			engagespotCampaignName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespotjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: string;

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespotjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: FormControl<string | null | undefined>,

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEngagespotjsonld_postFormGroup() {
		return new FormGroup<TransportEngagespotjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			engagespotApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			engagespotCampaignName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespotjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: string;

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEngagespot resource is a collection of transports that carry dispatched alerts to the external EngageSpot service. */
	export interface TransportEngagespotjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the EngageSpot service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		engagespotApiKey: FormControl<string | null | undefined>,

		/**
		 * The campaign name for the EngageSpot service.
		 * Required
		 * Max length: 255
		 */
		engagespotCampaignName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEngagespotjsonld_putFormGroup() {
		return new FormGroup<TransportEngagespotjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			engagespotApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			engagespotCampaignName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: string;

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: string;

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: FormControl<string | null | undefined>,

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: FormControl<string | null | undefined>,

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEsendex_getFormGroup() {
		return new FormGroup<TransportEsendex_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			esendexAccountReference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			esendexUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: string;

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: string;

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: FormControl<string | null | undefined>,

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: FormControl<string | null | undefined>,

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEsendex_patchFormGroup() {
		return new FormGroup<TransportEsendex_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			esendexAccountReference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			esendexUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: string;

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: string;

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: FormControl<string | null | undefined>,

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: FormControl<string | null | undefined>,

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEsendex_postFormGroup() {
		return new FormGroup<TransportEsendex_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			esendexAccountReference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			esendexUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: string;

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: string;

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendex_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: FormControl<string | null | undefined>,

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: FormControl<string | null | undefined>,

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEsendex_putFormGroup() {
		return new FormGroup<TransportEsendex_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			esendexAccountReference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			esendexUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendexjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: string;

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: string;

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendexjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: FormControl<string | null | undefined>,

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: FormControl<string | null | undefined>,

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEsendexjsonld_getFormGroup() {
		return new FormGroup<TransportEsendexjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			esendexAccountReference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			esendexUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendexjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: string;

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: string;

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendexjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: FormControl<string | null | undefined>,

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: FormControl<string | null | undefined>,

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEsendexjsonld_postFormGroup() {
		return new FormGroup<TransportEsendexjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			esendexAccountReference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			esendexUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendexjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: string;

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: string;

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service. */
	export interface TransportEsendexjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The account reference that the message should be sent from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexAccountReference: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexFrom: FormControl<string | null | undefined>,

		/**
		 * The API password for the Esendex service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		esendexPassword: FormControl<string | null | undefined>,

		/**
		 * The account email for the Esendex service.
		 * Required
		 * Max length: 255
		 */
		esendexUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportEsendexjsonld_putFormGroup() {
		return new FormGroup<TransportEsendexjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			esendexAccountReference: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			esendexPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			esendexUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportExpo_getFormGroup() {
		return new FormGroup<TransportExpo_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expoToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportExpo_patchFormGroup() {
		return new FormGroup<TransportExpo_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expoToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportExpo_postFormGroup() {
		return new FormGroup<TransportExpo_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expoToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpo_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportExpo_putFormGroup() {
		return new FormGroup<TransportExpo_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expoToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpojsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpojsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportExpojsonld_getFormGroup() {
		return new FormGroup<TransportExpojsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expoToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpojsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpojsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportExpojsonld_postFormGroup() {
		return new FormGroup<TransportExpojsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expoToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpojsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportExpo resource is a collection of transports that carry dispatched alerts to the external Expo service. */
	export interface TransportExpojsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The token for the Expo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		expoToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportExpojsonld_putFormGroup() {
		return new FormGroup<TransportExpojsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			expoToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: string;

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFirebase_getFormGroup() {
		return new FormGroup<TransportFirebase_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			firebasePassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firebaseUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: string;

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFirebase_patchFormGroup() {
		return new FormGroup<TransportFirebase_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			firebasePassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firebaseUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: string;

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFirebase_postFormGroup() {
		return new FormGroup<TransportFirebase_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			firebasePassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firebaseUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: string;

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebase_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFirebase_putFormGroup() {
		return new FormGroup<TransportFirebase_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			firebasePassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firebaseUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebasejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: string;

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebasejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFirebasejsonld_getFormGroup() {
		return new FormGroup<TransportFirebasejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			firebasePassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firebaseUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebasejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: string;

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebasejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFirebasejsonld_postFormGroup() {
		return new FormGroup<TransportFirebasejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			firebasePassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firebaseUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebasejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: string;

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFirebase resource is a collection of transports that carry dispatched alerts to the external Firebase service. */
	export interface TransportFirebasejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The password for the Firebase service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		firebasePassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Firebase service.
		 * Required
		 * Max length: 255
		 */
		firebaseUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFirebasejsonld_putFormGroup() {
		return new FormGroup<TransportFirebasejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			firebasePassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			firebaseUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: string;

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: FormControl<string | null | undefined>,

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFortySixElks_getFormGroup() {
		return new FormGroup<TransportFortySixElks_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fortySixElksApiPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			fortySixElksApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			fortySixElksFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: string;

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: FormControl<string | null | undefined>,

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFortySixElks_patchFormGroup() {
		return new FormGroup<TransportFortySixElks_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fortySixElksApiPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			fortySixElksApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			fortySixElksFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: string;

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: FormControl<string | null | undefined>,

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFortySixElks_postFormGroup() {
		return new FormGroup<TransportFortySixElks_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fortySixElksApiPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			fortySixElksApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			fortySixElksFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: string;

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElks_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: FormControl<string | null | undefined>,

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFortySixElks_putFormGroup() {
		return new FormGroup<TransportFortySixElks_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fortySixElksApiPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			fortySixElksApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			fortySixElksFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElksjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: string;

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElksjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: FormControl<string | null | undefined>,

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFortySixElksjsonld_getFormGroup() {
		return new FormGroup<TransportFortySixElksjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fortySixElksApiPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			fortySixElksApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			fortySixElksFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElksjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: string;

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElksjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: FormControl<string | null | undefined>,

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFortySixElksjsonld_postFormGroup() {
		return new FormGroup<TransportFortySixElksjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fortySixElksApiPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			fortySixElksApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			fortySixElksFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElksjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: string;

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: string;

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFortySixElks resource is a collection of transports that carry dispatched alerts to the external 46elks service. */
	export interface TransportFortySixElksjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API password for the 46elks service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		fortySixElksApiPassword: FormControl<string | null | undefined>,

		/**
		 * The API username for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksApiUsername: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric originator for the message to appear to originate from for the 46elks service.
		 * Required
		 * Max length: 255
		 */
		fortySixElksFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFortySixElksjsonld_putFormGroup() {
		return new FormGroup<TransportFortySixElksjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			fortySixElksApiPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			fortySixElksApiUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			fortySixElksFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: string;

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: string;

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: FormControl<string | null | undefined>,

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: FormControl<string | null | undefined>,

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreeMobile_getFormGroup() {
		return new FormGroup<TransportFreeMobile_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freeMobileApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freeMobileLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freeMobilePhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: string;

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: string;

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: FormControl<string | null | undefined>,

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: FormControl<string | null | undefined>,

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreeMobile_patchFormGroup() {
		return new FormGroup<TransportFreeMobile_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freeMobileApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freeMobileLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freeMobilePhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: string;

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: string;

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: FormControl<string | null | undefined>,

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: FormControl<string | null | undefined>,

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreeMobile_postFormGroup() {
		return new FormGroup<TransportFreeMobile_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freeMobileApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freeMobileLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freeMobilePhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: string;

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: string;

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobile_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: FormControl<string | null | undefined>,

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: FormControl<string | null | undefined>,

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreeMobile_putFormGroup() {
		return new FormGroup<TransportFreeMobile_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freeMobileApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freeMobileLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freeMobilePhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobilejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: string;

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: string;

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobilejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: FormControl<string | null | undefined>,

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: FormControl<string | null | undefined>,

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreeMobilejsonld_getFormGroup() {
		return new FormGroup<TransportFreeMobilejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freeMobileApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freeMobileLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freeMobilePhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobilejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: string;

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: string;

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobilejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: FormControl<string | null | undefined>,

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: FormControl<string | null | undefined>,

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreeMobilejsonld_postFormGroup() {
		return new FormGroup<TransportFreeMobilejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freeMobileApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freeMobileLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freeMobilePhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobilejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: string;

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: string;

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreeMobile resource is a collection of transports that carry dispatched alerts to the external Free Mobile service. */
	export interface TransportFreeMobilejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Free Mobile service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freeMobileApiKey: FormControl<string | null | undefined>,

		/**
		 * The login for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobileLogin: FormControl<string | null | undefined>,

		/**
		 * The phone number for the Free Mobile service.
		 * Required
		 * Max length: 255
		 */
		freeMobilePhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreeMobilejsonld_putFormGroup() {
		return new FormGroup<TransportFreeMobilejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freeMobileApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freeMobileLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freeMobilePhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: string;

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: string;

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: string;

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority?: string | null;

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: FormControl<string | null | undefined>,

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: FormControl<string | null | undefined>,

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority: FormControl<string | null | undefined>,

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreshdesk_getFormGroup() {
		return new FormGroup<TransportFreshdesk_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freshdeskApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freshdeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskPriority: new FormControl<string | null | undefined>(undefined),
			freshdeskType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: string;

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: string;

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: string;

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority?: string | null;

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: FormControl<string | null | undefined>,

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: FormControl<string | null | undefined>,

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority: FormControl<string | null | undefined>,

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreshdesk_patchFormGroup() {
		return new FormGroup<TransportFreshdesk_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freshdeskApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freshdeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskPriority: new FormControl<string | null | undefined>(undefined),
			freshdeskType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: string;

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: string;

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: string;

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority?: string | null;

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: FormControl<string | null | undefined>,

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: FormControl<string | null | undefined>,

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority: FormControl<string | null | undefined>,

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreshdesk_postFormGroup() {
		return new FormGroup<TransportFreshdesk_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freshdeskApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freshdeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskPriority: new FormControl<string | null | undefined>(undefined),
			freshdeskType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: string;

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: string;

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: string;

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority?: string | null;

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdesk_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: FormControl<string | null | undefined>,

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: FormControl<string | null | undefined>,

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority: FormControl<string | null | undefined>,

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreshdesk_putFormGroup() {
		return new FormGroup<TransportFreshdesk_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freshdeskApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freshdeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskPriority: new FormControl<string | null | undefined>(undefined),
			freshdeskType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdeskjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: string;

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: string;

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: string;

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority?: string | null;

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdeskjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: FormControl<string | null | undefined>,

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: FormControl<string | null | undefined>,

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority: FormControl<string | null | undefined>,

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreshdeskjsonld_getFormGroup() {
		return new FormGroup<TransportFreshdeskjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freshdeskApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freshdeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskPriority: new FormControl<string | null | undefined>(undefined),
			freshdeskType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdeskjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: string;

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: string;

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: string;

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority?: string | null;

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdeskjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: FormControl<string | null | undefined>,

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: FormControl<string | null | undefined>,

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority: FormControl<string | null | undefined>,

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreshdeskjsonld_postFormGroup() {
		return new FormGroup<TransportFreshdeskjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freshdeskApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freshdeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskPriority: new FormControl<string | null | undefined>(undefined),
			freshdeskType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdeskjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: string;

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: string;

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: string;

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority?: string | null;

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportFreshdesk resource is a collection of transports that carry dispatched alerts to the external Freshdesk service. */
	export interface TransportFreshdeskjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Freshdesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		freshdeskApiKey: FormControl<string | null | undefined>,

		/**
		 * The requester email address for the Freshdesk service.
		 * Required
		 * Max length: 255
		 */
		freshdeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Freshdesk service (domain.freshdesk.com).
		 * Required
		 * Max length: 255
		 */
		freshdeskHost: FormControl<string | null | undefined>,

		/** The ticket priority for the Freshdesk service. */
		freshdeskPriority: FormControl<string | null | undefined>,

		/**
		 * The ticket type for the Freshdesk service.
		 * Max length: 255
		 */
		freshdeskType: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportFreshdeskjsonld_putFormGroup() {
		return new FormGroup<TransportFreshdeskjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			freshdeskApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			freshdeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			freshdeskPriority: new FormControl<string | null | undefined>(undefined),
			freshdeskType: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: string;

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGatewayApi_getFormGroup() {
		return new FormGroup<TransportGatewayApi_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gatewayApiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gatewayApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: string;

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGatewayApi_patchFormGroup() {
		return new FormGroup<TransportGatewayApi_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gatewayApiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gatewayApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: string;

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGatewayApi_postFormGroup() {
		return new FormGroup<TransportGatewayApi_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gatewayApiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gatewayApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: string;

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApi_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGatewayApi_putFormGroup() {
		return new FormGroup<TransportGatewayApi_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gatewayApiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gatewayApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApijsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: string;

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApijsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGatewayApijsonld_getFormGroup() {
		return new FormGroup<TransportGatewayApijsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gatewayApiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gatewayApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApijsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: string;

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApijsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGatewayApijsonld_postFormGroup() {
		return new FormGroup<TransportGatewayApijsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gatewayApiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gatewayApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApijsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: string;

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGatewayApi resource is a collection of transports that carry dispatched alerts to the external GatewayAPI service. */
	export interface TransportGatewayApijsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Gateway API service.
		 * Required
		 * Max length: 255
		 */
		gatewayApiFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the Gateway API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gatewayApiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGatewayApijsonld_putFormGroup() {
		return new FormGroup<TransportGatewayApijsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gatewayApiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gatewayApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: string;

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: FormControl<string | null | undefined>,

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGitter_getFormGroup() {
		return new FormGroup<TransportGitter_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gitterRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gitterToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: string;

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: FormControl<string | null | undefined>,

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGitter_patchFormGroup() {
		return new FormGroup<TransportGitter_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gitterRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gitterToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: string;

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: FormControl<string | null | undefined>,

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGitter_postFormGroup() {
		return new FormGroup<TransportGitter_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gitterRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gitterToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: string;

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitter_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: FormControl<string | null | undefined>,

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGitter_putFormGroup() {
		return new FormGroup<TransportGitter_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gitterRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gitterToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitterjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: string;

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitterjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: FormControl<string | null | undefined>,

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGitterjsonld_getFormGroup() {
		return new FormGroup<TransportGitterjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gitterRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gitterToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitterjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: string;

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitterjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: FormControl<string | null | undefined>,

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGitterjsonld_postFormGroup() {
		return new FormGroup<TransportGitterjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gitterRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gitterToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitterjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: string;

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGitter resource is a collection of transports that carry dispatched alerts to the external Gitter service. */
	export interface TransportGitterjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The room ID for the Gitter service.
		 * Required
		 * Max length: 255
		 */
		gitterRoomId: FormControl<string | null | undefined>,

		/**
		 * The token for the Gitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gitterToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGitterjsonld_putFormGroup() {
		return new FormGroup<TransportGitterjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gitterRoomId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gitterToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: string;

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: string;

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: string;

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: FormControl<string | null | undefined>,

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: FormControl<string | null | undefined>,

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: FormControl<string | null | undefined>,

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGoogleChat_getFormGroup() {
		return new FormGroup<TransportGoogleChat_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			googleChatAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			googleChatSpace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatThreadKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: string;

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: string;

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: string;

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: FormControl<string | null | undefined>,

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: FormControl<string | null | undefined>,

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: FormControl<string | null | undefined>,

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGoogleChat_patchFormGroup() {
		return new FormGroup<TransportGoogleChat_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			googleChatAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			googleChatSpace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatThreadKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: string;

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: string;

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: string;

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: FormControl<string | null | undefined>,

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: FormControl<string | null | undefined>,

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: FormControl<string | null | undefined>,

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGoogleChat_postFormGroup() {
		return new FormGroup<TransportGoogleChat_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			googleChatAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			googleChatSpace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatThreadKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: string;

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: string;

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: string;

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChat_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: FormControl<string | null | undefined>,

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: FormControl<string | null | undefined>,

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: FormControl<string | null | undefined>,

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGoogleChat_putFormGroup() {
		return new FormGroup<TransportGoogleChat_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			googleChatAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			googleChatSpace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatThreadKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChatjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: string;

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: string;

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: string;

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChatjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: FormControl<string | null | undefined>,

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: FormControl<string | null | undefined>,

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: FormControl<string | null | undefined>,

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGoogleChatjsonld_getFormGroup() {
		return new FormGroup<TransportGoogleChatjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			googleChatAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			googleChatSpace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatThreadKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChatjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: string;

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: string;

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: string;

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChatjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: FormControl<string | null | undefined>,

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: FormControl<string | null | undefined>,

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: FormControl<string | null | undefined>,

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGoogleChatjsonld_postFormGroup() {
		return new FormGroup<TransportGoogleChatjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			googleChatAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			googleChatSpace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatThreadKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChatjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: string;

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: string;

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: string;

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGoogleChat resource is a collection of transports that carry dispatched alerts to the external Google Chat service. */
	export interface TransportGoogleChatjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access key for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatAccessKey: FormControl<string | null | undefined>,

		/**
		 * The access token for the Google Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		googleChatAccessToken: FormControl<string | null | undefined>,

		/**
		 * The space name for the Google Chat service.
		 * Required
		 * Max length: 255
		 */
		googleChatSpace: FormControl<string | null | undefined>,

		/**
		 * The optional thread key for the Google Chat service.
		 * Max length: 255
		 */
		googleChatThreadKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGoogleChatjsonld_putFormGroup() {
		return new FormGroup<TransportGoogleChatjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			googleChatAccessKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			googleChatSpace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			googleChatThreadKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: string;

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: string;

		/** The priority for the Gotify service. */
		gotifyPriority?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: FormControl<string | null | undefined>,

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: FormControl<string | null | undefined>,

		/** The priority for the Gotify service. */
		gotifyPriority: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGotify_getFormGroup() {
		return new FormGroup<TransportGotify_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gotifyApiUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gotifyAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			gotifyPriority: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: string;

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: string;

		/** The priority for the Gotify service. */
		gotifyPriority?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: FormControl<string | null | undefined>,

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: FormControl<string | null | undefined>,

		/** The priority for the Gotify service. */
		gotifyPriority: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGotify_patchFormGroup() {
		return new FormGroup<TransportGotify_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gotifyApiUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gotifyAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			gotifyPriority: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: string;

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: string;

		/** The priority for the Gotify service. */
		gotifyPriority?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: FormControl<string | null | undefined>,

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: FormControl<string | null | undefined>,

		/** The priority for the Gotify service. */
		gotifyPriority: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGotify_postFormGroup() {
		return new FormGroup<TransportGotify_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gotifyApiUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gotifyAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			gotifyPriority: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: string;

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: string;

		/** The priority for the Gotify service. */
		gotifyPriority?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotify_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: FormControl<string | null | undefined>,

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: FormControl<string | null | undefined>,

		/** The priority for the Gotify service. */
		gotifyPriority: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGotify_putFormGroup() {
		return new FormGroup<TransportGotify_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gotifyApiUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gotifyAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			gotifyPriority: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotifyjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: string;

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: string;

		/** The priority for the Gotify service. */
		gotifyPriority?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotifyjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: FormControl<string | null | undefined>,

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: FormControl<string | null | undefined>,

		/** The priority for the Gotify service. */
		gotifyPriority: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGotifyjsonld_getFormGroup() {
		return new FormGroup<TransportGotifyjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gotifyApiUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gotifyAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			gotifyPriority: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotifyjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: string;

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: string;

		/** The priority for the Gotify service. */
		gotifyPriority?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotifyjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: FormControl<string | null | undefined>,

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: FormControl<string | null | undefined>,

		/** The priority for the Gotify service. */
		gotifyPriority: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGotifyjsonld_postFormGroup() {
		return new FormGroup<TransportGotifyjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gotifyApiUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gotifyAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			gotifyPriority: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotifyjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: string;

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: string;

		/** The priority for the Gotify service. */
		gotifyPriority?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportGotify resource is a collection of transports that carry dispatched alerts to the external Gotify service. */
	export interface TransportGotifyjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).
		 * Required
		 * Max length: 255
		 */
		gotifyApiUrl: FormControl<string | null | undefined>,

		/**
		 * The app token for the Gotify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		gotifyAppToken: FormControl<string | null | undefined>,

		/** The priority for the Gotify service. */
		gotifyPriority: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportGotifyjsonld_putFormGroup() {
		return new FormGroup<TransportGotifyjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			gotifyApiUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			gotifyAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			gotifyPriority: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: string;

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId?: number | null;

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: FormControl<string | null | undefined>,

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId: FormControl<number | null | undefined>,

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportHelpScout_getFormGroup() {
		return new FormGroup<TransportHelpScout_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			helpScoutCustomerEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			helpScoutMailboxId: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			helpScoutOauthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: string;

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId?: number | null;

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: FormControl<string | null | undefined>,

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId: FormControl<number | null | undefined>,

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportHelpScout_patchFormGroup() {
		return new FormGroup<TransportHelpScout_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			helpScoutCustomerEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			helpScoutMailboxId: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			helpScoutOauthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: string;

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId?: number | null;

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: FormControl<string | null | undefined>,

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId: FormControl<number | null | undefined>,

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportHelpScout_postFormGroup() {
		return new FormGroup<TransportHelpScout_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			helpScoutCustomerEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			helpScoutMailboxId: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			helpScoutOauthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: string;

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId?: number | null;

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScout_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: FormControl<string | null | undefined>,

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId: FormControl<number | null | undefined>,

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportHelpScout_putFormGroup() {
		return new FormGroup<TransportHelpScout_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			helpScoutCustomerEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			helpScoutMailboxId: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			helpScoutOauthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScoutjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: string;

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId?: number | null;

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScoutjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: FormControl<string | null | undefined>,

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId: FormControl<number | null | undefined>,

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportHelpScoutjsonld_getFormGroup() {
		return new FormGroup<TransportHelpScoutjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			helpScoutCustomerEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			helpScoutMailboxId: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			helpScoutOauthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScoutjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: string;

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId?: number | null;

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScoutjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: FormControl<string | null | undefined>,

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId: FormControl<number | null | undefined>,

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportHelpScoutjsonld_postFormGroup() {
		return new FormGroup<TransportHelpScoutjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			helpScoutCustomerEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			helpScoutMailboxId: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			helpScoutOauthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScoutjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: string;

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId?: number | null;

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportHelpScout resource is a collection of transports that carry dispatched alerts to the external HelpScout service. */
	export interface TransportHelpScoutjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The requester customer email address for the HelpScout service.
		 * Required
		 * Max length: 255
		 */
		helpScoutCustomerEmail: FormControl<string | null | undefined>,

		/**
		 * The mailbox ID for the HelpScout service.
		 * Minimum: 0
		 */
		helpScoutMailboxId: FormControl<number | null | undefined>,

		/**
		 * The OAuth token for the HelpScout service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		helpScoutOauthToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportHelpScoutjsonld_putFormGroup() {
		return new FormGroup<TransportHelpScoutjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			helpScoutCustomerEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			helpScoutMailboxId: new FormControl<number | null | undefined>(undefined, [Validators.min(0)]),
			helpScoutOauthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: string;

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: string;

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: FormControl<string | null | undefined>,

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportInfobip_getFormGroup() {
		return new FormGroup<TransportInfobip_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			infobipAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			infobipFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			infobipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: string;

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: string;

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: FormControl<string | null | undefined>,

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportInfobip_patchFormGroup() {
		return new FormGroup<TransportInfobip_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			infobipAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			infobipFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			infobipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: string;

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: string;

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: FormControl<string | null | undefined>,

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportInfobip_postFormGroup() {
		return new FormGroup<TransportInfobip_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			infobipAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			infobipFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			infobipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: string;

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: string;

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobip_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: FormControl<string | null | undefined>,

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportInfobip_putFormGroup() {
		return new FormGroup<TransportInfobip_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			infobipAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			infobipFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			infobipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobipjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: string;

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: string;

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobipjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: FormControl<string | null | undefined>,

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportInfobipjsonld_getFormGroup() {
		return new FormGroup<TransportInfobipjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			infobipAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			infobipFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			infobipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobipjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: string;

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: string;

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobipjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: FormControl<string | null | undefined>,

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportInfobipjsonld_postFormGroup() {
		return new FormGroup<TransportInfobipjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			infobipAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			infobipFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			infobipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobipjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: string;

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: string;

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportInfobip resource is a collection of transports that carry dispatched alerts to the external Infobip service. */
	export interface TransportInfobipjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Infobip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		infobipAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipFrom: FormControl<string | null | undefined>,

		/**
		 * The host for the Infobip service.
		 * Required
		 * Max length: 255
		 */
		infobipHost: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportInfobipjsonld_putFormGroup() {
		return new FormGroup<TransportInfobipjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			infobipAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			infobipFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			infobipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: string;

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: string;

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: FormControl<string | null | undefined>,

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportIqsms_getFormGroup() {
		return new FormGroup<TransportIqsms_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			iqsmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: string;

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: string;

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: FormControl<string | null | undefined>,

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportIqsms_patchFormGroup() {
		return new FormGroup<TransportIqsms_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			iqsmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: string;

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: string;

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: FormControl<string | null | undefined>,

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportIqsms_postFormGroup() {
		return new FormGroup<TransportIqsms_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			iqsmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: string;

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: string;

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsms_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: FormControl<string | null | undefined>,

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportIqsms_putFormGroup() {
		return new FormGroup<TransportIqsms_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			iqsmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsmsjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: string;

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: string;

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsmsjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: FormControl<string | null | undefined>,

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportIqsmsjsonld_getFormGroup() {
		return new FormGroup<TransportIqsmsjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			iqsmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsmsjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: string;

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: string;

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsmsjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: FormControl<string | null | undefined>,

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportIqsmsjsonld_postFormGroup() {
		return new FormGroup<TransportIqsmsjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			iqsmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsmsjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: string;

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: string;

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportIqsms resource is a collection of transports that carry dispatched alerts to the external Iqsms service. */
	export interface TransportIqsmsjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Iqsms service.
		 * Required
		 * Max length: 255
		 */
		iqsmsLogin: FormControl<string | null | undefined>,

		/**
		 * The password for the Iqsms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		iqsmsPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportIqsmsjsonld_putFormGroup() {
		return new FormGroup<TransportIqsmsjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			iqsmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			iqsmsPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: string;

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: string;

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportKazInfoTeh_getFormGroup() {
		return new FormGroup<TransportKazInfoTeh_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			kazInfoTehFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			kazInfoTehPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			kazInfoTehUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: string;

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: string;

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportKazInfoTeh_patchFormGroup() {
		return new FormGroup<TransportKazInfoTeh_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			kazInfoTehFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			kazInfoTehPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			kazInfoTehUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: string;

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: string;

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportKazInfoTeh_postFormGroup() {
		return new FormGroup<TransportKazInfoTeh_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			kazInfoTehFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			kazInfoTehPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			kazInfoTehUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: string;

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: string;

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTeh_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportKazInfoTeh_putFormGroup() {
		return new FormGroup<TransportKazInfoTeh_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			kazInfoTehFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			kazInfoTehPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			kazInfoTehUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTehjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: string;

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: string;

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTehjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportKazInfoTehjsonld_getFormGroup() {
		return new FormGroup<TransportKazInfoTehjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			kazInfoTehFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			kazInfoTehPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			kazInfoTehUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTehjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: string;

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: string;

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTehjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportKazInfoTehjsonld_postFormGroup() {
		return new FormGroup<TransportKazInfoTehjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			kazInfoTehFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			kazInfoTehPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			kazInfoTehUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTehjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: string;

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: string;

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportKazInfoTeh resource is a collection of transports that carry dispatched alerts to the external KazInfoTeh service. */
	export interface TransportKazInfoTehjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The from value for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the KazInfoTeh service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		kazInfoTehPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the KazInfoTeh service.
		 * Required
		 * Max length: 255
		 */
		kazInfoTehUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportKazInfoTehjsonld_putFormGroup() {
		return new FormGroup<TransportKazInfoTehjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			kazInfoTehFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			kazInfoTehPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			kazInfoTehUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: string;

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: string;

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: FormControl<string | null | undefined>,

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLightSms_getFormGroup() {
		return new FormGroup<TransportLightSms_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			lightSmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: string;

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: string;

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: FormControl<string | null | undefined>,

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLightSms_patchFormGroup() {
		return new FormGroup<TransportLightSms_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lightSmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: string;

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: string;

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: FormControl<string | null | undefined>,

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLightSms_postFormGroup() {
		return new FormGroup<TransportLightSms_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lightSmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: string;

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: string;

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSms_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: FormControl<string | null | undefined>,

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLightSms_putFormGroup() {
		return new FormGroup<TransportLightSms_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lightSmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSmsjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: string;

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: string;

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSmsjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: FormControl<string | null | undefined>,

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLightSmsjsonld_getFormGroup() {
		return new FormGroup<TransportLightSmsjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			lightSmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSmsjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: string;

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: string;

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSmsjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: FormControl<string | null | undefined>,

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLightSmsjsonld_postFormGroup() {
		return new FormGroup<TransportLightSmsjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lightSmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSmsjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: string;

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: string;

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLightSms resource is a collection of transports that carry dispatched alerts to the external LightSMS service. */
	export interface TransportLightSmsjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The login for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsLogin: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the LightSMS service.
		 * Required
		 * Max length: 255
		 */
		lightSmsPhone: FormControl<string | null | undefined>,

		/**
		 * The token for the LightSMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lightSmsToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLightSmsjsonld_putFormGroup() {
		return new FormGroup<TransportLightSmsjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lightSmsLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			lightSmsToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: string;

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId?: string | null;

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: FormControl<string | null | undefined>,

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId: FormControl<string | null | undefined>,

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLineNotify_getFormGroup() {
		return new FormGroup<TransportLineNotify_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			lineNotifyAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			lineNotifyStickerId: new FormControl<string | null | undefined>(undefined),
			lineNotifyStickerPackageId: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: string;

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId?: string | null;

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: FormControl<string | null | undefined>,

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId: FormControl<string | null | undefined>,

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLineNotify_patchFormGroup() {
		return new FormGroup<TransportLineNotify_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lineNotifyAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			lineNotifyStickerId: new FormControl<string | null | undefined>(undefined),
			lineNotifyStickerPackageId: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: string;

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId?: string | null;

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: FormControl<string | null | undefined>,

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId: FormControl<string | null | undefined>,

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLineNotify_postFormGroup() {
		return new FormGroup<TransportLineNotify_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lineNotifyAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			lineNotifyStickerId: new FormControl<string | null | undefined>(undefined),
			lineNotifyStickerPackageId: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: string;

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId?: string | null;

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotify_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: FormControl<string | null | undefined>,

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId: FormControl<string | null | undefined>,

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLineNotify_putFormGroup() {
		return new FormGroup<TransportLineNotify_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lineNotifyAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			lineNotifyStickerId: new FormControl<string | null | undefined>(undefined),
			lineNotifyStickerPackageId: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotifyjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: string;

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId?: string | null;

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotifyjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: FormControl<string | null | undefined>,

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId: FormControl<string | null | undefined>,

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLineNotifyjsonld_getFormGroup() {
		return new FormGroup<TransportLineNotifyjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			lineNotifyAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			lineNotifyStickerId: new FormControl<string | null | undefined>(undefined),
			lineNotifyStickerPackageId: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotifyjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: string;

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId?: string | null;

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotifyjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: FormControl<string | null | undefined>,

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId: FormControl<string | null | undefined>,

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLineNotifyjsonld_postFormGroup() {
		return new FormGroup<TransportLineNotifyjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lineNotifyAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			lineNotifyStickerId: new FormControl<string | null | undefined>(undefined),
			lineNotifyStickerPackageId: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotifyjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: string;

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId?: string | null;

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLineNotify resource is a collection of transports that carry dispatched alerts to the external LINE Notify service. */
	export interface TransportLineNotifyjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LINE Notify service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		lineNotifyAccessToken: FormControl<string | null | undefined>,

		/** The sticker ID value for the LINE Notify service. */
		lineNotifyStickerId: FormControl<string | null | undefined>,

		/** The sticker package ID value for the LINE Notify service. */
		lineNotifyStickerPackageId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLineNotifyjsonld_putFormGroup() {
		return new FormGroup<TransportLineNotifyjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			lineNotifyAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			lineNotifyStickerId: new FormControl<string | null | undefined>(undefined),
			lineNotifyStickerPackageId: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: string;

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: FormControl<string | null | undefined>,

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLinkedIn_getFormGroup() {
		return new FormGroup<TransportLinkedIn_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			linkedInToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			linkedInUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: string;

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: FormControl<string | null | undefined>,

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLinkedIn_patchFormGroup() {
		return new FormGroup<TransportLinkedIn_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			linkedInToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			linkedInUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: string;

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: FormControl<string | null | undefined>,

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLinkedIn_postFormGroup() {
		return new FormGroup<TransportLinkedIn_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			linkedInToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			linkedInUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: string;

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedIn_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: FormControl<string | null | undefined>,

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLinkedIn_putFormGroup() {
		return new FormGroup<TransportLinkedIn_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			linkedInToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			linkedInUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedInjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: string;

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedInjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: FormControl<string | null | undefined>,

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLinkedInjsonld_getFormGroup() {
		return new FormGroup<TransportLinkedInjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			linkedInToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			linkedInUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedInjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: string;

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedInjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: FormControl<string | null | undefined>,

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLinkedInjsonld_postFormGroup() {
		return new FormGroup<TransportLinkedInjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			linkedInToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			linkedInUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedInjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: string;

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportLinkedIn resource is a collection of transports that carry dispatched alerts to the external LinkedIn service. */
	export interface TransportLinkedInjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the LinkedIn service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		linkedInToken: FormControl<string | null | undefined>,

		/**
		 * The user ID for the LinkedIn service.
		 * Required
		 * Max length: 255
		 */
		linkedInUserId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportLinkedInjsonld_putFormGroup() {
		return new FormGroup<TransportLinkedInjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			linkedInToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			linkedInUserId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: string;

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMailjet_getFormGroup() {
		return new FormGroup<TransportMailjet_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mailjetFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mailjetToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: string;

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMailjet_patchFormGroup() {
		return new FormGroup<TransportMailjet_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mailjetFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mailjetToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: string;

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMailjet_postFormGroup() {
		return new FormGroup<TransportMailjet_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mailjetFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mailjetToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: string;

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjet_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMailjet_putFormGroup() {
		return new FormGroup<TransportMailjet_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mailjetFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mailjetToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjetjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: string;

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjetjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMailjetjsonld_getFormGroup() {
		return new FormGroup<TransportMailjetjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mailjetFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mailjetToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjetjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: string;

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjetjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMailjetjsonld_postFormGroup() {
		return new FormGroup<TransportMailjetjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mailjetFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mailjetToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjetjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: string;

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMailjet resource is a collection of transports that carry dispatched alerts to the external MailJet service. */
	export interface TransportMailjetjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alphanumeric sender ID for the MailJet service.
		 * Required
		 * Max length: 255
		 */
		mailjetFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS auth token for the MailJet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mailjetToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMailjetjsonld_putFormGroup() {
		return new FormGroup<TransportMailjetjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mailjetFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mailjetToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: string;

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: FormControl<string | null | undefined>,

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMastodon_getFormGroup() {
		return new FormGroup<TransportMastodon_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mastodonAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mastodonHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: string;

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: FormControl<string | null | undefined>,

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMastodon_patchFormGroup() {
		return new FormGroup<TransportMastodon_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mastodonAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mastodonHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: string;

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: FormControl<string | null | undefined>,

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMastodon_postFormGroup() {
		return new FormGroup<TransportMastodon_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mastodonAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mastodonHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: string;

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodon_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: FormControl<string | null | undefined>,

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMastodon_putFormGroup() {
		return new FormGroup<TransportMastodon_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mastodonAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mastodonHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodonjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: string;

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodonjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: FormControl<string | null | undefined>,

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMastodonjsonld_getFormGroup() {
		return new FormGroup<TransportMastodonjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mastodonAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mastodonHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodonjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: string;

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodonjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: FormControl<string | null | undefined>,

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMastodonjsonld_postFormGroup() {
		return new FormGroup<TransportMastodonjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mastodonAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mastodonHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodonjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: string;

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMastodon resource is a collection of transports that carry dispatched alerts to the external Mastodon service. */
	export interface TransportMastodonjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mastodon service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mastodonAccessToken: FormControl<string | null | undefined>,

		/**
		 * The host name for the Mastodon service (omit the "https://" part).
		 * Required
		 */
		mastodonHost: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMastodonjsonld_putFormGroup() {
		return new FormGroup<TransportMastodonjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mastodonAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mastodonHost: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: string;

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: string;

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: string;

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: FormControl<string | null | undefined>,

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: FormControl<string | null | undefined>,

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: FormControl<string | null | undefined>,

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMattermost_getFormGroup() {
		return new FormGroup<TransportMattermost_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mattermostAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mattermostChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostPath: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: string;

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: string;

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: string;

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: FormControl<string | null | undefined>,

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: FormControl<string | null | undefined>,

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: FormControl<string | null | undefined>,

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMattermost_patchFormGroup() {
		return new FormGroup<TransportMattermost_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mattermostAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mattermostChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostPath: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: string;

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: string;

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: string;

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: FormControl<string | null | undefined>,

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: FormControl<string | null | undefined>,

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: FormControl<string | null | undefined>,

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMattermost_postFormGroup() {
		return new FormGroup<TransportMattermost_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mattermostAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mattermostChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostPath: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: string;

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: string;

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: string;

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermost_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: FormControl<string | null | undefined>,

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: FormControl<string | null | undefined>,

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: FormControl<string | null | undefined>,

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMattermost_putFormGroup() {
		return new FormGroup<TransportMattermost_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mattermostAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mattermostChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostPath: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermostjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: string;

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: string;

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: string;

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermostjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: FormControl<string | null | undefined>,

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: FormControl<string | null | undefined>,

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: FormControl<string | null | undefined>,

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMattermostjsonld_getFormGroup() {
		return new FormGroup<TransportMattermostjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mattermostAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mattermostChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostPath: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermostjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: string;

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: string;

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: string;

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermostjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: FormControl<string | null | undefined>,

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: FormControl<string | null | undefined>,

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: FormControl<string | null | undefined>,

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMattermostjsonld_postFormGroup() {
		return new FormGroup<TransportMattermostjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mattermostAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mattermostChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostPath: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermostjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: string;

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: string;

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: string;

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMattermost resource is a collection of transports that carry dispatched alerts to the external Mattermost service. */
	export interface TransportMattermostjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mattermost service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mattermostAccessToken: FormControl<string | null | undefined>,

		/**
		 * The default channel ID for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostChannel: FormControl<string | null | undefined>,

		/**
		 * The host for the Mattermost service.
		 * Required
		 * Max length: 255
		 */
		mattermostHost: FormControl<string | null | undefined>,

		/**
		 * The optional path for the Mattermost service.
		 * Max length: 255
		 */
		mattermostPath: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMattermostjsonld_putFormGroup() {
		return new FormGroup<TransportMattermostjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mattermostAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mattermostChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mattermostPath: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: string;

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl?: string | null;

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: FormControl<string | null | undefined>,

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl: FormControl<string | null | undefined>,

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMercure_getFormGroup() {
		return new FormGroup<TransportMercure_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mercureHubJwtToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mercureHubUrl: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			mercureTopic: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: string;

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl?: string | null;

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: FormControl<string | null | undefined>,

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl: FormControl<string | null | undefined>,

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMercure_patchFormGroup() {
		return new FormGroup<TransportMercure_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mercureHubJwtToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mercureHubUrl: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			mercureTopic: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: string;

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl?: string | null;

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: FormControl<string | null | undefined>,

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl: FormControl<string | null | undefined>,

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMercure_postFormGroup() {
		return new FormGroup<TransportMercure_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mercureHubJwtToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mercureHubUrl: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			mercureTopic: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: string;

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl?: string | null;

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercure_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: FormControl<string | null | undefined>,

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl: FormControl<string | null | undefined>,

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMercure_putFormGroup() {
		return new FormGroup<TransportMercure_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mercureHubJwtToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mercureHubUrl: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			mercureTopic: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercurejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: string;

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl?: string | null;

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercurejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: FormControl<string | null | undefined>,

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl: FormControl<string | null | undefined>,

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMercurejsonld_getFormGroup() {
		return new FormGroup<TransportMercurejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mercureHubJwtToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mercureHubUrl: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			mercureTopic: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercurejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: string;

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl?: string | null;

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercurejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: FormControl<string | null | undefined>,

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl: FormControl<string | null | undefined>,

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMercurejsonld_postFormGroup() {
		return new FormGroup<TransportMercurejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mercureHubJwtToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mercureHubUrl: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			mercureTopic: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercurejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: string;

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl?: string | null;

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMercure resource is a collection of transports that carry dispatched alerts to the external Mercure service. */
	export interface TransportMercurejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The JWT token for the hub for the Mercure service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mercureHubJwtToken: FormControl<string | null | undefined>,

		/**
		 * The URL for the hub for the Mercure service.
		 * Max length: 255
		 */
		mercureHubUrl: FormControl<string | null | undefined>,

		/**
		 * The optional topic for the Mercure service.
		 * Max length: 255
		 */
		mercureTopic: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMercurejsonld_putFormGroup() {
		return new FormGroup<TransportMercurejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mercureHubJwtToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mercureHubUrl: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			mercureTopic: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: string;

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageBird_getFormGroup() {
		return new FormGroup<TransportMessageBird_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			messageBirdFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageBirdToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: string;

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageBird_patchFormGroup() {
		return new FormGroup<TransportMessageBird_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageBirdFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageBirdToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: string;

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageBird_postFormGroup() {
		return new FormGroup<TransportMessageBird_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageBirdFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageBirdToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: string;

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBird_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageBird_putFormGroup() {
		return new FormGroup<TransportMessageBird_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageBirdFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageBirdToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBirdjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: string;

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBirdjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageBirdjsonld_getFormGroup() {
		return new FormGroup<TransportMessageBirdjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			messageBirdFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageBirdToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBirdjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: string;

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBirdjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageBirdjsonld_postFormGroup() {
		return new FormGroup<TransportMessageBirdjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageBirdFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageBirdToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBirdjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: string;

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageBird resource is a collection of transports that carry dispatched alerts to the external MessageBird service. */
	export interface TransportMessageBirdjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender value for the MessageBird service.
		 * Required
		 * Max length: 255
		 */
		messageBirdFrom: FormControl<string | null | undefined>,

		/**
		 * The token for the MessageBird service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageBirdToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageBirdjsonld_putFormGroup() {
		return new FormGroup<TransportMessageBirdjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageBirdFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageBirdToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: string;

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: string;

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: FormControl<string | null | undefined>,

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: FormControl<string | null | undefined>,

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageMedia_getFormGroup() {
		return new FormGroup<TransportMessageMedia_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			messageMediaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageMediaApiSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			messageMediaFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: string;

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: string;

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: FormControl<string | null | undefined>,

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: FormControl<string | null | undefined>,

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageMedia_patchFormGroup() {
		return new FormGroup<TransportMessageMedia_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageMediaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageMediaApiSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			messageMediaFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: string;

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: string;

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: FormControl<string | null | undefined>,

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: FormControl<string | null | undefined>,

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageMedia_postFormGroup() {
		return new FormGroup<TransportMessageMedia_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageMediaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageMediaApiSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			messageMediaFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: string;

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: string;

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMedia_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: FormControl<string | null | undefined>,

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: FormControl<string | null | undefined>,

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageMedia_putFormGroup() {
		return new FormGroup<TransportMessageMedia_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageMediaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageMediaApiSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			messageMediaFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMediajsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: string;

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: string;

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMediajsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: FormControl<string | null | undefined>,

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: FormControl<string | null | undefined>,

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageMediajsonld_getFormGroup() {
		return new FormGroup<TransportMessageMediajsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			messageMediaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageMediaApiSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			messageMediaFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMediajsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: string;

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: string;

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMediajsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: FormControl<string | null | undefined>,

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: FormControl<string | null | undefined>,

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageMediajsonld_postFormGroup() {
		return new FormGroup<TransportMessageMediajsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageMediaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageMediaApiSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			messageMediaFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMediajsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: string;

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: string;

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMessageMedia resource is a collection of transports that carry dispatched alerts to the external MessageMedia service. */
	export interface TransportMessageMediajsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the MessageMedia service.
		 * Required
		 * Max length: 255
		 */
		messageMediaApiKey: FormControl<string | null | undefined>,

		/**
		 * The API secret for the MessageMedia service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		messageMediaApiSecret: FormControl<string | null | undefined>,

		/**
		 * The optional registered sender ID for the MessageMedia service.
		 * Max length: 255
		 */
		messageMediaFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMessageMediajsonld_putFormGroup() {
		return new FormGroup<TransportMessageMediajsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			messageMediaApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			messageMediaApiSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			messageMediaFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMicrosoftTeams_getFormGroup() {
		return new FormGroup<TransportMicrosoftTeams_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			microsoftTeamsPath: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMicrosoftTeams_patchFormGroup() {
		return new FormGroup<TransportMicrosoftTeams_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			microsoftTeamsPath: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMicrosoftTeams_postFormGroup() {
		return new FormGroup<TransportMicrosoftTeams_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			microsoftTeamsPath: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeams_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMicrosoftTeams_putFormGroup() {
		return new FormGroup<TransportMicrosoftTeams_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			microsoftTeamsPath: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeamsjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeamsjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMicrosoftTeamsjsonld_getFormGroup() {
		return new FormGroup<TransportMicrosoftTeamsjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			microsoftTeamsPath: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeamsjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeamsjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMicrosoftTeamsjsonld_postFormGroup() {
		return new FormGroup<TransportMicrosoftTeamsjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			microsoftTeamsPath: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeamsjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMicrosoftTeams resource is a collection of transports that carry dispatched alerts to the external Microsoft Teams service. */
	export interface TransportMicrosoftTeamsjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		microsoftTeamsPath: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMicrosoftTeamsjsonld_putFormGroup() {
		return new FormGroup<TransportMicrosoftTeamsjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			microsoftTeamsPath: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: string;

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: string;

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: string;

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: FormControl<string | null | undefined>,

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: FormControl<string | null | undefined>,

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMobyt_getFormGroup() {
		return new FormGroup<TransportMobyt_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mobytAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mobytFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytTypeQuality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: string;

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: string;

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: string;

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: FormControl<string | null | undefined>,

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: FormControl<string | null | undefined>,

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMobyt_patchFormGroup() {
		return new FormGroup<TransportMobyt_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mobytAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mobytFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytTypeQuality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: string;

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: string;

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: string;

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: FormControl<string | null | undefined>,

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: FormControl<string | null | undefined>,

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMobyt_postFormGroup() {
		return new FormGroup<TransportMobyt_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mobytAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mobytFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytTypeQuality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: string;

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: string;

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: string;

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobyt_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: FormControl<string | null | undefined>,

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: FormControl<string | null | undefined>,

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMobyt_putFormGroup() {
		return new FormGroup<TransportMobyt_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mobytAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mobytFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytTypeQuality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobytjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: string;

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: string;

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: string;

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobytjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: FormControl<string | null | undefined>,

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: FormControl<string | null | undefined>,

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMobytjsonld_getFormGroup() {
		return new FormGroup<TransportMobytjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			mobytAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mobytFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytTypeQuality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobytjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: string;

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: string;

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: string;

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobytjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: FormControl<string | null | undefined>,

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: FormControl<string | null | undefined>,

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMobytjsonld_postFormGroup() {
		return new FormGroup<TransportMobytjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mobytAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mobytFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytTypeQuality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobytjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: string;

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: string;

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: string;

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportMobyt resource is a collection of transports that carry dispatched alerts to the external Mobyt service. */
	export interface TransportMobytjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Mobyt service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		mobytAccessToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytFrom: FormControl<string | null | undefined>,

		/**
		 * The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytTypeQuality: FormControl<string | null | undefined>,

		/**
		 * The user key for the Mobyt service.
		 * Required
		 * Max length: 255
		 */
		mobytUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportMobytjsonld_putFormGroup() {
		return new FormGroup<TransportMobytjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			mobytAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			mobytFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytTypeQuality: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			mobytUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: string;

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: string;

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: string;

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: FormControl<string | null | undefined>,

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOctopush_getFormGroup() {
		return new FormGroup<TransportOctopush_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			octopushApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			octopushFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushUserLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: string;

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: string;

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: string;

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: FormControl<string | null | undefined>,

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOctopush_patchFormGroup() {
		return new FormGroup<TransportOctopush_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			octopushApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			octopushFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushUserLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: string;

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: string;

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: string;

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: FormControl<string | null | undefined>,

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOctopush_postFormGroup() {
		return new FormGroup<TransportOctopush_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			octopushApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			octopushFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushUserLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: string;

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: string;

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: string;

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopush_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: FormControl<string | null | undefined>,

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOctopush_putFormGroup() {
		return new FormGroup<TransportOctopush_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			octopushApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			octopushFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushUserLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopushjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: string;

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: string;

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: string;

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopushjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: FormControl<string | null | undefined>,

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOctopushjsonld_getFormGroup() {
		return new FormGroup<TransportOctopushjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			octopushApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			octopushFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushUserLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopushjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: string;

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: string;

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: string;

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopushjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: FormControl<string | null | undefined>,

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOctopushjsonld_postFormGroup() {
		return new FormGroup<TransportOctopushjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			octopushApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			octopushFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushUserLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopushjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: string;

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: string;

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: string;

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOctopush resource is a collection of transports that carry dispatched alerts to the external Octopush service. */
	export interface TransportOctopushjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Octopush service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		octopushApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushFrom: FormControl<string | null | undefined>,

		/**
		 * The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushType: FormControl<string | null | undefined>,

		/**
		 * The user login (email) for the Octopush service.
		 * Required
		 * Max length: 255
		 */
		octopushUserLogin: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOctopushjsonld_putFormGroup() {
		return new FormGroup<TransportOctopushjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			octopushApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			octopushFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			octopushUserLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: string;

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: string;

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: FormControl<string | null | undefined>,

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: FormControl<string | null | undefined>,

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOneSignal_getFormGroup() {
		return new FormGroup<TransportOneSignal_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			oneSignalApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			oneSignalAppId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			oneSignalDefaultRecipientId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: string;

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: string;

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: FormControl<string | null | undefined>,

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: FormControl<string | null | undefined>,

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOneSignal_patchFormGroup() {
		return new FormGroup<TransportOneSignal_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			oneSignalApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			oneSignalAppId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			oneSignalDefaultRecipientId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: string;

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: string;

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: FormControl<string | null | undefined>,

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: FormControl<string | null | undefined>,

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOneSignal_postFormGroup() {
		return new FormGroup<TransportOneSignal_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			oneSignalApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			oneSignalAppId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			oneSignalDefaultRecipientId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: string;

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: string;

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignal_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: FormControl<string | null | undefined>,

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: FormControl<string | null | undefined>,

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOneSignal_putFormGroup() {
		return new FormGroup<TransportOneSignal_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			oneSignalApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			oneSignalAppId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			oneSignalDefaultRecipientId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignaljsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: string;

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: string;

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignaljsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: FormControl<string | null | undefined>,

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: FormControl<string | null | undefined>,

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOneSignaljsonld_getFormGroup() {
		return new FormGroup<TransportOneSignaljsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			oneSignalApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			oneSignalAppId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			oneSignalDefaultRecipientId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignaljsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: string;

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: string;

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignaljsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: FormControl<string | null | undefined>,

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: FormControl<string | null | undefined>,

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOneSignaljsonld_postFormGroup() {
		return new FormGroup<TransportOneSignaljsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			oneSignalApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			oneSignalAppId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			oneSignalDefaultRecipientId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignaljsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: string;

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: string;

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service. */
	export interface TransportOneSignaljsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API (auth) key for the One Signal service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		oneSignalApiKey: FormControl<string | null | undefined>,

		/**
		 * The App ID for the One Signal service.
		 * Required
		 * Max length: 255
		 */
		oneSignalAppId: FormControl<string | null | undefined>,

		/**
		 * The optional default recipient ID for the One Signal service.
		 * Max length: 255
		 */
		oneSignalDefaultRecipientId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOneSignaljsonld_putFormGroup() {
		return new FormGroup<TransportOneSignaljsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			oneSignalApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			oneSignalAppId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			oneSignalDefaultRecipientId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias?: string | null;

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: string;

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity?: string | null;

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote?: string | null;

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority?: string | null;

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias: FormControl<string | null | undefined>,

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: FormControl<string | null | undefined>,

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity: FormControl<string | null | undefined>,

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote: FormControl<string | null | undefined>,

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority: FormControl<string | null | undefined>,

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOpsgenie_getFormGroup() {
		return new FormGroup<TransportOpsgenie_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			opsgenieAlias: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			opsgenieEntity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieNote: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgeniePriority: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieUser: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias?: string | null;

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: string;

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity?: string | null;

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote?: string | null;

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority?: string | null;

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias: FormControl<string | null | undefined>,

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: FormControl<string | null | undefined>,

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity: FormControl<string | null | undefined>,

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote: FormControl<string | null | undefined>,

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority: FormControl<string | null | undefined>,

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOpsgenie_patchFormGroup() {
		return new FormGroup<TransportOpsgenie_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			opsgenieAlias: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			opsgenieEntity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieNote: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgeniePriority: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieUser: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias?: string | null;

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: string;

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity?: string | null;

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote?: string | null;

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority?: string | null;

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias: FormControl<string | null | undefined>,

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: FormControl<string | null | undefined>,

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity: FormControl<string | null | undefined>,

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote: FormControl<string | null | undefined>,

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority: FormControl<string | null | undefined>,

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOpsgenie_postFormGroup() {
		return new FormGroup<TransportOpsgenie_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			opsgenieAlias: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			opsgenieEntity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieNote: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgeniePriority: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieUser: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias?: string | null;

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: string;

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity?: string | null;

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote?: string | null;

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority?: string | null;

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgenie_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias: FormControl<string | null | undefined>,

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: FormControl<string | null | undefined>,

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity: FormControl<string | null | undefined>,

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote: FormControl<string | null | undefined>,

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority: FormControl<string | null | undefined>,

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOpsgenie_putFormGroup() {
		return new FormGroup<TransportOpsgenie_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			opsgenieAlias: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			opsgenieEntity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieNote: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgeniePriority: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieUser: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgeniejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias?: string | null;

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: string;

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity?: string | null;

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote?: string | null;

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority?: string | null;

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgeniejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias: FormControl<string | null | undefined>,

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: FormControl<string | null | undefined>,

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity: FormControl<string | null | undefined>,

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote: FormControl<string | null | undefined>,

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority: FormControl<string | null | undefined>,

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOpsgeniejsonld_getFormGroup() {
		return new FormGroup<TransportOpsgeniejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			opsgenieAlias: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			opsgenieEntity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieNote: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgeniePriority: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieUser: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgeniejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias?: string | null;

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: string;

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity?: string | null;

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote?: string | null;

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority?: string | null;

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgeniejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias: FormControl<string | null | undefined>,

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: FormControl<string | null | undefined>,

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity: FormControl<string | null | undefined>,

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote: FormControl<string | null | undefined>,

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority: FormControl<string | null | undefined>,

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOpsgeniejsonld_postFormGroup() {
		return new FormGroup<TransportOpsgeniejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			opsgenieAlias: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			opsgenieEntity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieNote: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgeniePriority: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieUser: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgeniejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias?: string | null;

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: string;

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity?: string | null;

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote?: string | null;

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority?: string | null;

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOpsgenie resource is a collection of transports that carry dispatched alerts to the external Opsgenie service. */
	export interface TransportOpsgeniejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The alias for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieAlias: FormControl<string | null | undefined>,

		/**
		 * The API key for the Opsgenie service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		opsgenieApiKey: FormControl<string | null | undefined>,

		/**
		 * The entity for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieEntity: FormControl<string | null | undefined>,

		/**
		 * The note for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieNote: FormControl<string | null | undefined>,

		/**
		 * The priority for the Opsgenie service.
		 * Max length: 255
		 */
		opsgeniePriority: FormControl<string | null | undefined>,

		/**
		 * The user for the Opsgenie service.
		 * Max length: 255
		 */
		opsgenieUser: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOpsgeniejsonld_putFormGroup() {
		return new FormGroup<TransportOpsgeniejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			opsgenieAlias: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			opsgenieEntity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieNote: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgeniePriority: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			opsgenieUser: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: string;

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: string;

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: string;

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: FormControl<string | null | undefined>,

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOrangeSms_getFormGroup() {
		return new FormGroup<TransportOrangeSms_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			orangeSmsClientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			orangeSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsSenderName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: string;

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: string;

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: string;

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: FormControl<string | null | undefined>,

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOrangeSms_patchFormGroup() {
		return new FormGroup<TransportOrangeSms_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			orangeSmsClientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			orangeSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsSenderName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: string;

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: string;

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: string;

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: FormControl<string | null | undefined>,

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOrangeSms_postFormGroup() {
		return new FormGroup<TransportOrangeSms_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			orangeSmsClientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			orangeSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsSenderName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: string;

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: string;

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: string;

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSms_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: FormControl<string | null | undefined>,

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOrangeSms_putFormGroup() {
		return new FormGroup<TransportOrangeSms_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			orangeSmsClientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			orangeSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsSenderName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSmsjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: string;

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: string;

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: string;

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSmsjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: FormControl<string | null | undefined>,

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOrangeSmsjsonld_getFormGroup() {
		return new FormGroup<TransportOrangeSmsjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			orangeSmsClientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			orangeSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsSenderName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSmsjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: string;

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: string;

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: string;

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSmsjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: FormControl<string | null | undefined>,

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOrangeSmsjsonld_postFormGroup() {
		return new FormGroup<TransportOrangeSmsjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			orangeSmsClientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			orangeSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsSenderName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSmsjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: string;

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: string;

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: string;

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOrangeSms resource is a collection of transports that carry dispatched alerts to the external Orange SMS service. */
	export interface TransportOrangeSmsjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app client ID for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsClientId: FormControl<string | null | undefined>,

		/**
		 * The app client secret for the Orange SMS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		orangeSmsClientSecret: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsFrom: FormControl<string | null | undefined>,

		/**
		 * The sender name for the Orange SMS service.
		 * Required
		 * Max length: 255
		 */
		orangeSmsSenderName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOrangeSmsjsonld_putFormGroup() {
		return new FormGroup<TransportOrangeSmsjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			orangeSmsClientId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			orangeSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			orangeSmsSenderName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: string;

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: string;

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: string;

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender?: string | null;

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: FormControl<string | null | undefined>,

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: FormControl<string | null | undefined>,

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender: FormControl<string | null | undefined>,

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOvhCloud_getFormGroup() {
		return new FormGroup<TransportOvhCloud_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			ovhCloudApplicationKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudApplicationSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ovhCloudConsumerKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudSender: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ovhCloudServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: string;

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: string;

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: string;

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender?: string | null;

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: FormControl<string | null | undefined>,

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: FormControl<string | null | undefined>,

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender: FormControl<string | null | undefined>,

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOvhCloud_patchFormGroup() {
		return new FormGroup<TransportOvhCloud_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ovhCloudApplicationKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudApplicationSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ovhCloudConsumerKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudSender: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ovhCloudServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: string;

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: string;

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: string;

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender?: string | null;

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: FormControl<string | null | undefined>,

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: FormControl<string | null | undefined>,

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender: FormControl<string | null | undefined>,

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOvhCloud_postFormGroup() {
		return new FormGroup<TransportOvhCloud_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ovhCloudApplicationKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudApplicationSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ovhCloudConsumerKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudSender: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ovhCloudServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: string;

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: string;

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: string;

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender?: string | null;

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloud_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: FormControl<string | null | undefined>,

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: FormControl<string | null | undefined>,

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender: FormControl<string | null | undefined>,

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOvhCloud_putFormGroup() {
		return new FormGroup<TransportOvhCloud_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ovhCloudApplicationKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudApplicationSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ovhCloudConsumerKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudSender: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ovhCloudServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloudjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: string;

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: string;

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: string;

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender?: string | null;

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloudjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: FormControl<string | null | undefined>,

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: FormControl<string | null | undefined>,

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender: FormControl<string | null | undefined>,

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOvhCloudjsonld_getFormGroup() {
		return new FormGroup<TransportOvhCloudjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			ovhCloudApplicationKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudApplicationSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ovhCloudConsumerKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudSender: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ovhCloudServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloudjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: string;

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: string;

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: string;

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender?: string | null;

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloudjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: FormControl<string | null | undefined>,

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: FormControl<string | null | undefined>,

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender: FormControl<string | null | undefined>,

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOvhCloudjsonld_postFormGroup() {
		return new FormGroup<TransportOvhCloudjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ovhCloudApplicationKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudApplicationSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ovhCloudConsumerKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudSender: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ovhCloudServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloudjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: string;

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: string;

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: string;

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender?: string | null;

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportOvhCloud resource is a collection of transports that carry dispatched alerts to the external OVHcloud service. */
	export interface TransportOvhCloudjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The application key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudApplicationKey: FormControl<string | null | undefined>,

		/**
		 * The application secret for the OVHcloud service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ovhCloudApplicationSecret: FormControl<string | null | undefined>,

		/**
		 * The consumer key for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudConsumerKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the OVHcloud service.
		 * Max length: 255
		 */
		ovhCloudSender: FormControl<string | null | undefined>,

		/**
		 * The service name for the OVHcloud service.
		 * Required
		 * Max length: 255
		 */
		ovhCloudServiceName: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportOvhCloudjsonld_putFormGroup() {
		return new FormGroup<TransportOvhCloudjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ovhCloudApplicationKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudApplicationSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ovhCloudConsumerKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			ovhCloudSender: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			ovhCloudServiceName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: string;

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey?: string | null;

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: string;

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass?: string | null;

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent?: string | null;

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup?: string | null;

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity?: string | null;

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource?: string | null;

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: FormControl<string | null | undefined>,

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey: FormControl<string | null | undefined>,

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: FormControl<string | null | undefined>,

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass: FormControl<string | null | undefined>,

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent: FormControl<string | null | undefined>,

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup: FormControl<string | null | undefined>,

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity: FormControl<string | null | undefined>,

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource: FormControl<string | null | undefined>,

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerDuty_getFormGroup() {
		return new FormGroup<TransportPagerDuty_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			pagerDutyApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerDutyDedupKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyEventAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pagerDutyPayloadClass: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadComponent: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyRoutingKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: string;

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey?: string | null;

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: string;

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass?: string | null;

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent?: string | null;

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup?: string | null;

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity?: string | null;

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource?: string | null;

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: FormControl<string | null | undefined>,

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey: FormControl<string | null | undefined>,

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: FormControl<string | null | undefined>,

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass: FormControl<string | null | undefined>,

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent: FormControl<string | null | undefined>,

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup: FormControl<string | null | undefined>,

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity: FormControl<string | null | undefined>,

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource: FormControl<string | null | undefined>,

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerDuty_patchFormGroup() {
		return new FormGroup<TransportPagerDuty_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerDutyApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerDutyDedupKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyEventAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pagerDutyPayloadClass: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadComponent: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyRoutingKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: string;

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey?: string | null;

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: string;

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass?: string | null;

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent?: string | null;

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup?: string | null;

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity?: string | null;

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource?: string | null;

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: FormControl<string | null | undefined>,

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey: FormControl<string | null | undefined>,

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: FormControl<string | null | undefined>,

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass: FormControl<string | null | undefined>,

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent: FormControl<string | null | undefined>,

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup: FormControl<string | null | undefined>,

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity: FormControl<string | null | undefined>,

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource: FormControl<string | null | undefined>,

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerDuty_postFormGroup() {
		return new FormGroup<TransportPagerDuty_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerDutyApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerDutyDedupKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyEventAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pagerDutyPayloadClass: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadComponent: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyRoutingKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: string;

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey?: string | null;

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: string;

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass?: string | null;

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent?: string | null;

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup?: string | null;

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity?: string | null;

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource?: string | null;

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDuty_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: FormControl<string | null | undefined>,

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey: FormControl<string | null | undefined>,

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: FormControl<string | null | undefined>,

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass: FormControl<string | null | undefined>,

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent: FormControl<string | null | undefined>,

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup: FormControl<string | null | undefined>,

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity: FormControl<string | null | undefined>,

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource: FormControl<string | null | undefined>,

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerDuty_putFormGroup() {
		return new FormGroup<TransportPagerDuty_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerDutyApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerDutyDedupKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyEventAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pagerDutyPayloadClass: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadComponent: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyRoutingKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDutyjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: string;

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey?: string | null;

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: string;

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass?: string | null;

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent?: string | null;

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup?: string | null;

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity?: string | null;

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource?: string | null;

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDutyjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: FormControl<string | null | undefined>,

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey: FormControl<string | null | undefined>,

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: FormControl<string | null | undefined>,

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass: FormControl<string | null | undefined>,

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent: FormControl<string | null | undefined>,

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup: FormControl<string | null | undefined>,

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity: FormControl<string | null | undefined>,

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource: FormControl<string | null | undefined>,

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerDutyjsonld_getFormGroup() {
		return new FormGroup<TransportPagerDutyjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			pagerDutyApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerDutyDedupKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyEventAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pagerDutyPayloadClass: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadComponent: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyRoutingKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDutyjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: string;

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey?: string | null;

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: string;

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass?: string | null;

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent?: string | null;

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup?: string | null;

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity?: string | null;

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource?: string | null;

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDutyjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: FormControl<string | null | undefined>,

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey: FormControl<string | null | undefined>,

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: FormControl<string | null | undefined>,

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass: FormControl<string | null | undefined>,

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent: FormControl<string | null | undefined>,

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup: FormControl<string | null | undefined>,

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity: FormControl<string | null | undefined>,

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource: FormControl<string | null | undefined>,

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerDutyjsonld_postFormGroup() {
		return new FormGroup<TransportPagerDutyjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerDutyApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerDutyDedupKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyEventAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pagerDutyPayloadClass: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadComponent: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyRoutingKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDutyjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: string;

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey?: string | null;

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: string;

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass?: string | null;

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent?: string | null;

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup?: string | null;

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity?: string | null;

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource?: string | null;

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerDuty resource is a collection of transports that carry dispatched alerts to the external Pager Duty service. */
	export interface TransportPagerDutyjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Pager Duty service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerDutyApiToken: FormControl<string | null | undefined>,

		/**
		 * The dedup key for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyDedupKey: FormControl<string | null | undefined>,

		/**
		 * The event action for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyEventAction: FormControl<string | null | undefined>,

		/**
		 * The payload class for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadClass: FormControl<string | null | undefined>,

		/**
		 * The payload component for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadComponent: FormControl<string | null | undefined>,

		/**
		 * The payload group for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadGroup: FormControl<string | null | undefined>,

		/**
		 * The payload severity for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSeverity: FormControl<string | null | undefined>,

		/**
		 * The payload source for the Pager Duty service.
		 * Max length: 255
		 */
		pagerDutyPayloadSource: FormControl<string | null | undefined>,

		/**
		 * The routing key for the Pager Duty service.
		 * Required
		 * Max length: 255
		 */
		pagerDutyRoutingKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerDutyjsonld_putFormGroup() {
		return new FormGroup<TransportPagerDutyjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerDutyApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerDutyDedupKey: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyEventAction: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			pagerDutyPayloadClass: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadComponent: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadGroup: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSeverity: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyPayloadSource: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerDutyRoutingKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: string;

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId?: string | null;

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId?: string | null;

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId?: string | null;

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: FormControl<string | null | undefined>,

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId: FormControl<string | null | undefined>,

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId: FormControl<string | null | undefined>,

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId: FormControl<string | null | undefined>,

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerTree_getFormGroup() {
		return new FormGroup<TransportPagerTree_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			pagerTreeAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerTreeAccountUserId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeRouterId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeTeamId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeUrgency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: string;

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId?: string | null;

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId?: string | null;

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId?: string | null;

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: FormControl<string | null | undefined>,

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId: FormControl<string | null | undefined>,

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId: FormControl<string | null | undefined>,

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId: FormControl<string | null | undefined>,

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerTree_patchFormGroup() {
		return new FormGroup<TransportPagerTree_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerTreeAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerTreeAccountUserId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeRouterId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeTeamId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeUrgency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: string;

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId?: string | null;

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId?: string | null;

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId?: string | null;

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: FormControl<string | null | undefined>,

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId: FormControl<string | null | undefined>,

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId: FormControl<string | null | undefined>,

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId: FormControl<string | null | undefined>,

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerTree_postFormGroup() {
		return new FormGroup<TransportPagerTree_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerTreeAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerTreeAccountUserId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeRouterId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeTeamId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeUrgency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: string;

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId?: string | null;

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId?: string | null;

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId?: string | null;

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTree_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: FormControl<string | null | undefined>,

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId: FormControl<string | null | undefined>,

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId: FormControl<string | null | undefined>,

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId: FormControl<string | null | undefined>,

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerTree_putFormGroup() {
		return new FormGroup<TransportPagerTree_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerTreeAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerTreeAccountUserId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeRouterId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeTeamId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeUrgency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTreejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: string;

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId?: string | null;

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId?: string | null;

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId?: string | null;

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTreejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: FormControl<string | null | undefined>,

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId: FormControl<string | null | undefined>,

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId: FormControl<string | null | undefined>,

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId: FormControl<string | null | undefined>,

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerTreejsonld_getFormGroup() {
		return new FormGroup<TransportPagerTreejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			pagerTreeAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerTreeAccountUserId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeRouterId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeTeamId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeUrgency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTreejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: string;

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId?: string | null;

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId?: string | null;

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId?: string | null;

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: string;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTreejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: FormControl<string | null | undefined>,

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId: FormControl<string | null | undefined>,

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId: FormControl<string | null | undefined>,

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId: FormControl<string | null | undefined>,

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerTreejsonld_postFormGroup() {
		return new FormGroup<TransportPagerTreejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerTreeAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerTreeAccountUserId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeRouterId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeTeamId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeUrgency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTreejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: string;

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId?: string | null;

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId?: string | null;

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId?: string | null;

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPagerTree resource is a collection of transports that carry dispatched alerts to the external Pager Tree service. */
	export interface TransportPagerTreejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pager Tree service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pagerTreeAccessToken: FormControl<string | null | undefined>,

		/**
		 * The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeAccountUserId: FormControl<string | null | undefined>,

		/**
		 * The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeRouterId: FormControl<string | null | undefined>,

		/**
		 * The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)
		 * Max length: 255
		 */
		pagerTreeTeamId: FormControl<string | null | undefined>,

		/**
		 * The urgency for the Pager Tree service.
		 * Required
		 * Max length: 255
		 */
		pagerTreeUrgency: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPagerTreejsonld_putFormGroup() {
		return new FormGroup<TransportPagerTreejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pagerTreeAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pagerTreeAccountUserId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeRouterId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeTeamId: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			pagerTreeUrgency: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: string;

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: string;

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPlivo_getFormGroup() {
		return new FormGroup<TransportPlivo_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			plivoAuthId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			plivoAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			plivoFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: string;

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: string;

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPlivo_patchFormGroup() {
		return new FormGroup<TransportPlivo_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			plivoAuthId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			plivoAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			plivoFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: string;

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: string;

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPlivo_postFormGroup() {
		return new FormGroup<TransportPlivo_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			plivoAuthId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			plivoAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			plivoFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: string;

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: string;

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivo_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPlivo_putFormGroup() {
		return new FormGroup<TransportPlivo_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			plivoAuthId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			plivoAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			plivoFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivojsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: string;

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: string;

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivojsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPlivojsonld_getFormGroup() {
		return new FormGroup<TransportPlivojsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			plivoAuthId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			plivoAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			plivoFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivojsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: string;

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: string;

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivojsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPlivojsonld_postFormGroup() {
		return new FormGroup<TransportPlivojsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			plivoAuthId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			plivoAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			plivoFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivojsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: string;

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: string;

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPlivo resource is a collection of transports that carry dispatched alerts to the external Plivo service. */
	export interface TransportPlivojsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth ID for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoAuthId: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Plivo service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		plivoAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Plivo service.
		 * Required
		 * Max length: 255
		 */
		plivoFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPlivojsonld_putFormGroup() {
		return new FormGroup<TransportPlivojsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			plivoAuthId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			plivoAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			plivoFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: string;

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: FormControl<string | null | undefined>,

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushbullet_getFormGroup() {
		return new FormGroup<TransportPushbullet_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushbulletAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushbulletEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: string;

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: FormControl<string | null | undefined>,

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushbullet_patchFormGroup() {
		return new FormGroup<TransportPushbullet_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushbulletAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushbulletEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: string;

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: FormControl<string | null | undefined>,

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushbullet_postFormGroup() {
		return new FormGroup<TransportPushbullet_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushbulletAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushbulletEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: string;

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbullet_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: FormControl<string | null | undefined>,

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushbullet_putFormGroup() {
		return new FormGroup<TransportPushbullet_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushbulletAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushbulletEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbulletjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: string;

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail?: string | null;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbulletjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: FormControl<string | null | undefined>,

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushbulletjsonld_getFormGroup() {
		return new FormGroup<TransportPushbulletjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushbulletAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushbulletEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbulletjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: string;

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbulletjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: FormControl<string | null | undefined>,

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushbulletjsonld_postFormGroup() {
		return new FormGroup<TransportPushbulletjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushbulletAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushbulletEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbulletjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: string;

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushbullet resource is a collection of transports that carry dispatched alerts to the external Pushbullet service. */
	export interface TransportPushbulletjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The access token for the Pushbullet service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushbulletAccessToken: FormControl<string | null | undefined>,

		/**
		 * The recipient email for the Pushbullet service.
		 * Max length: 255
		 */
		pushbulletEmail: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushbulletjsonld_putFormGroup() {
		return new FormGroup<TransportPushbulletjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushbulletAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushbulletEmail: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: string;

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: FormControl<string | null | undefined>,

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushover_getFormGroup() {
		return new FormGroup<TransportPushover_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushoverAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushoverUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: string;

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: FormControl<string | null | undefined>,

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushover_patchFormGroup() {
		return new FormGroup<TransportPushover_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushoverAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushoverUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: string;

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: FormControl<string | null | undefined>,

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushover_postFormGroup() {
		return new FormGroup<TransportPushover_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushoverAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushoverUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: string;

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushover_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: FormControl<string | null | undefined>,

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushover_putFormGroup() {
		return new FormGroup<TransportPushover_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushoverAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushoverUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushoverjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: string;

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushoverjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: FormControl<string | null | undefined>,

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushoverjsonld_getFormGroup() {
		return new FormGroup<TransportPushoverjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushoverAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushoverUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushoverjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: string;

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushoverjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: FormControl<string | null | undefined>,

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushoverjsonld_postFormGroup() {
		return new FormGroup<TransportPushoverjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushoverAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushoverUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushoverjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: string;

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushover resource is a collection of transports that carry dispatched alerts to the external Pushover service. */
	export interface TransportPushoverjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The app token for the Pushover service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushoverAppToken: FormControl<string | null | undefined>,

		/**
		 * The user key for the Pushover service.
		 * Required
		 * Max length: 255
		 */
		pushoverUserKey: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushoverjsonld_putFormGroup() {
		return new FormGroup<TransportPushoverjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushoverAppToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushoverUserKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: string;

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: FormControl<string | null | undefined>,

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushy_getFormGroup() {
		return new FormGroup<TransportPushy_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushyApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushyTo: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: string;

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: FormControl<string | null | undefined>,

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushy_patchFormGroup() {
		return new FormGroup<TransportPushy_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushyApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushyTo: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: string;

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: FormControl<string | null | undefined>,

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushy_postFormGroup() {
		return new FormGroup<TransportPushy_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushyApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushyTo: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: string;

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushy_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: FormControl<string | null | undefined>,

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushy_putFormGroup() {
		return new FormGroup<TransportPushy_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushyApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushyTo: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushyjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: string;

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushyjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: FormControl<string | null | undefined>,

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushyjsonld_getFormGroup() {
		return new FormGroup<TransportPushyjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushyApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushyTo: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushyjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: string;

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushyjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: FormControl<string | null | undefined>,

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushyjsonld_postFormGroup() {
		return new FormGroup<TransportPushyjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			pushyApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushyTo: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushyjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: string;

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportPushy resource is a collection of transports that carry dispatched alerts to the external Pushy service. */
	export interface TransportPushyjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Pushy service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		pushyApiKey: FormControl<string | null | undefined>,

		/**
		 * The recipient ID for the Pushy service.
		 * Required
		 * Max length: 255
		 */
		pushyTo: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportPushyjsonld_putFormGroup() {
		return new FormGroup<TransportPushyjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			pushyApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			pushyTo: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: string;

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRingCentral_getFormGroup() {
		return new FormGroup<TransportRingCentral_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			ringCentralApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ringCentralFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: string;

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRingCentral_patchFormGroup() {
		return new FormGroup<TransportRingCentral_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ringCentralApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ringCentralFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: string;

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRingCentral_postFormGroup() {
		return new FormGroup<TransportRingCentral_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ringCentralApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ringCentralFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: string;

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentral_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRingCentral_putFormGroup() {
		return new FormGroup<TransportRingCentral_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ringCentralApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ringCentralFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentraljsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: string;

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentraljsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRingCentraljsonld_getFormGroup() {
		return new FormGroup<TransportRingCentraljsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			ringCentralApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ringCentralFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentraljsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: string;

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentraljsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRingCentraljsonld_postFormGroup() {
		return new FormGroup<TransportRingCentraljsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ringCentralApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ringCentralFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentraljsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: string;

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRingCentral resource is a collection of transports that carry dispatched alerts to the external Ring Central service. */
	export interface TransportRingCentraljsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API token for the Ring Central service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		ringCentralApiToken: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Ring Central service.
		 * Required
		 * Max length: 255
		 */
		ringCentralFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRingCentraljsonld_putFormGroup() {
		return new FormGroup<TransportRingCentraljsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			ringCentralApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			ringCentralFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: string;

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: FormControl<string | null | undefined>,

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRocketChat_getFormGroup() {
		return new FormGroup<TransportRocketChat_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			rocketChatChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			rocketChatToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: string;

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: FormControl<string | null | undefined>,

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRocketChat_patchFormGroup() {
		return new FormGroup<TransportRocketChat_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			rocketChatChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			rocketChatToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: string;

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: FormControl<string | null | undefined>,

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRocketChat_postFormGroup() {
		return new FormGroup<TransportRocketChat_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rocketChatChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			rocketChatToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: string;

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChat_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: FormControl<string | null | undefined>,

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRocketChat_putFormGroup() {
		return new FormGroup<TransportRocketChat_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			rocketChatChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			rocketChatToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChatjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: string;

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChatjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: FormControl<string | null | undefined>,

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRocketChatjsonld_getFormGroup() {
		return new FormGroup<TransportRocketChatjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			rocketChatChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			rocketChatToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChatjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: string;

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChatjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: FormControl<string | null | undefined>,

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRocketChatjsonld_postFormGroup() {
		return new FormGroup<TransportRocketChatjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			rocketChatChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			rocketChatToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChatjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: string;

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportRocketChat resource is a collection of transports that carry dispatched alerts to the external Rocket Chat service. */
	export interface TransportRocketChatjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The channel for the Rocket Chat service.
		 * Required
		 * Max length: 255
		 */
		rocketChatChannel: FormControl<string | null | undefined>,

		/**
		 * The access token for the Rocket Chat service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		rocketChatToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportRocketChatjsonld_putFormGroup() {
		return new FormGroup<TransportRocketChatjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			rocketChatChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			rocketChatToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: string;

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: string;

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: string;

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: FormControl<string | null | undefined>,

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendberry_getFormGroup() {
		return new FormGroup<TransportSendberry_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sendberryAuthKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendberryUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: string;

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: string;

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: string;

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: FormControl<string | null | undefined>,

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendberry_patchFormGroup() {
		return new FormGroup<TransportSendberry_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sendberryAuthKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendberryUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: string;

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: string;

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: string;

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: FormControl<string | null | undefined>,

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendberry_postFormGroup() {
		return new FormGroup<TransportSendberry_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sendberryAuthKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendberryUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: string;

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: string;

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: string;

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberry_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: FormControl<string | null | undefined>,

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendberry_putFormGroup() {
		return new FormGroup<TransportSendberry_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sendberryAuthKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendberryUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberryjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: string;

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: string;

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: string;

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberryjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: FormControl<string | null | undefined>,

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendberryjsonld_getFormGroup() {
		return new FormGroup<TransportSendberryjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sendberryAuthKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendberryUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberryjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: string;

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: string;

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: string;

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberryjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: FormControl<string | null | undefined>,

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendberryjsonld_postFormGroup() {
		return new FormGroup<TransportSendberryjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sendberryAuthKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendberryUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberryjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: string;

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: string;

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: string;

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendberry resource is a collection of transports that carry dispatched alerts to the external Sendberry service. */
	export interface TransportSendberryjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth key for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryAuthKey: FormControl<string | null | undefined>,

		/**
		 * The sender name or phone number for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryFrom: FormControl<string | null | undefined>,

		/**
		 * The password for the Sendberry service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendberryPassword: FormControl<string | null | undefined>,

		/**
		 * The username for the Sendberry service.
		 * Required
		 * Max length: 255
		 */
		sendberryUsername: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendberryjsonld_putFormGroup() {
		return new FormGroup<TransportSendberryjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sendberryAuthKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sendberryPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendberryUsername: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: string;

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendinblue_getFormGroup() {
		return new FormGroup<TransportSendinblue_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sendinblueApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendinblueSenderPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: string;

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendinblue_patchFormGroup() {
		return new FormGroup<TransportSendinblue_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sendinblueApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendinblueSenderPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: string;

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendinblue_postFormGroup() {
		return new FormGroup<TransportSendinblue_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sendinblueApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendinblueSenderPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: string;

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinblue_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendinblue_putFormGroup() {
		return new FormGroup<TransportSendinblue_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sendinblueApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendinblueSenderPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinbluejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: string;

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinbluejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendinbluejsonld_getFormGroup() {
		return new FormGroup<TransportSendinbluejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sendinblueApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendinblueSenderPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinbluejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: string;

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinbluejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendinbluejsonld_postFormGroup() {
		return new FormGroup<TransportSendinbluejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sendinblueApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendinblueSenderPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinbluejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: string;

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSendinblue resource is a collection of transports that carry dispatched alerts to the external Sendinblue service. */
	export interface TransportSendinbluejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sendinblue service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sendinblueApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender phone number for the Sendinblue service.
		 * Required
		 * Max length: 255
		 */
		sendinblueSenderPhone: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSendinbluejsonld_putFormGroup() {
		return new FormGroup<TransportSendinbluejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sendinblueApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sendinblueSenderPhone: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: string;

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSimpleTextin_getFormGroup() {
		return new FormGroup<TransportSimpleTextin_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			simpleTextinApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			simpleTextinFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: string;

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSimpleTextin_patchFormGroup() {
		return new FormGroup<TransportSimpleTextin_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			simpleTextinApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			simpleTextinFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: string;

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSimpleTextin_postFormGroup() {
		return new FormGroup<TransportSimpleTextin_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			simpleTextinApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			simpleTextinFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: string;

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextin_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSimpleTextin_putFormGroup() {
		return new FormGroup<TransportSimpleTextin_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			simpleTextinApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			simpleTextinFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextinjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: string;

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextinjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSimpleTextinjsonld_getFormGroup() {
		return new FormGroup<TransportSimpleTextinjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			simpleTextinApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			simpleTextinFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextinjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: string;

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextinjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSimpleTextinjsonld_postFormGroup() {
		return new FormGroup<TransportSimpleTextinjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			simpleTextinApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			simpleTextinFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextinjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: string;

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSimpleTextin resource is a collection of transports that carry dispatched alerts to the external SimpleTextin service. */
	export interface TransportSimpleTextinjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the SimpleTextin service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		simpleTextinApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the SimpleTextin service.
		 * Max length: 255
		 */
		simpleTextinFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSimpleTextinjsonld_putFormGroup() {
		return new FormGroup<TransportSimpleTextinjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			simpleTextinApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			simpleTextinFrom: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: string;

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: string;

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: FormControl<string | null | undefined>,

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSinch_getFormGroup() {
		return new FormGroup<TransportSinch_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sinchAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sinchFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sinchServicePlanId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: string;

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: string;

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: FormControl<string | null | undefined>,

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSinch_patchFormGroup() {
		return new FormGroup<TransportSinch_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sinchAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sinchFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sinchServicePlanId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: string;

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: string;

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: FormControl<string | null | undefined>,

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSinch_postFormGroup() {
		return new FormGroup<TransportSinch_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sinchAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sinchFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sinchServicePlanId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: string;

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: string;

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinch_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: FormControl<string | null | undefined>,

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSinch_putFormGroup() {
		return new FormGroup<TransportSinch_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sinchAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sinchFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sinchServicePlanId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinchjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: string;

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: string;

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinchjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: FormControl<string | null | undefined>,

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSinchjsonld_getFormGroup() {
		return new FormGroup<TransportSinchjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sinchAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sinchFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sinchServicePlanId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinchjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: string;

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: string;

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinchjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: FormControl<string | null | undefined>,

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSinchjsonld_postFormGroup() {
		return new FormGroup<TransportSinchjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sinchAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sinchFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sinchServicePlanId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinchjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: string;

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: string;

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSinch resource is a collection of transports that carry dispatched alerts to the external Sinch service. */
	export interface TransportSinchjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The auth token for the Sinch service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sinchAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchFrom: FormControl<string | null | undefined>,

		/**
		 * The service plan ID for the Sinch service.
		 * Required
		 * Max length: 255
		 */
		sinchServicePlanId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSinchjsonld_putFormGroup() {
		return new FormGroup<TransportSinchjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sinchAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sinchFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			sinchServicePlanId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: string;

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: FormControl<string | null | undefined>,

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSlack_getFormGroup() {
		return new FormGroup<TransportSlack_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			slackChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			slackToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: string;

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: FormControl<string | null | undefined>,

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSlack_patchFormGroup() {
		return new FormGroup<TransportSlack_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			slackChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			slackToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: string;

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: FormControl<string | null | undefined>,

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSlack_postFormGroup() {
		return new FormGroup<TransportSlack_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			slackChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			slackToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: string;

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlack_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: FormControl<string | null | undefined>,

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSlack_putFormGroup() {
		return new FormGroup<TransportSlack_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			slackChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			slackToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlackjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: string;

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlackjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: FormControl<string | null | undefined>,

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSlackjsonld_getFormGroup() {
		return new FormGroup<TransportSlackjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			slackChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			slackToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlackjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: string;

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlackjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: FormControl<string | null | undefined>,

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSlackjsonld_postFormGroup() {
		return new FormGroup<TransportSlackjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			slackChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			slackToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlackjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: string;

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSlack resource is a collection of transports that carry dispatched alerts to the external Slack service. */
	export interface TransportSlackjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.
		 * Required
		 * Max length: 255
		 */
		slackChannel: FormControl<string | null | undefined>,

		/**
		 * The token for the Slack service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		slackToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSlackjsonld_putFormGroup() {
		return new FormGroup<TransportSlackjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			slackChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			slackToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: string;

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSms77_getFormGroup() {
		return new FormGroup<TransportSms77_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sms77ApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sms77From: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: string;

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSms77_patchFormGroup() {
		return new FormGroup<TransportSms77_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sms77ApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sms77From: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: string;

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSms77_postFormGroup() {
		return new FormGroup<TransportSms77_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sms77ApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sms77From: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: string;

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSms77_putFormGroup() {
		return new FormGroup<TransportSms77_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sms77ApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sms77From: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77jsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: string;

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77jsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSms77jsonld_getFormGroup() {
		return new FormGroup<TransportSms77jsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			sms77ApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sms77From: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77jsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: string;

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77jsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSms77jsonld_postFormGroup() {
		return new FormGroup<TransportSms77jsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			sms77ApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sms77From: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77jsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: string;

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSms77 resource is a collection of transports that carry dispatched alerts to the external sms77 service. */
	export interface TransportSms77jsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Sms77 service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		sms77ApiKey: FormControl<string | null | undefined>,

		/**
		 * The optional sender for the Sms77 service.
		 * Max length: 255
		 */
		sms77From: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSms77jsonld_putFormGroup() {
		return new FormGroup<TransportSms77jsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			sms77ApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			sms77From: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: string;

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: string;

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: FormControl<string | null | undefined>,

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsBiuras_getFormGroup() {
		return new FormGroup<TransportSmsBiuras_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsBiurasApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsBiurasFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsBiurasUid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: string;

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: string;

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: FormControl<string | null | undefined>,

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsBiuras_patchFormGroup() {
		return new FormGroup<TransportSmsBiuras_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsBiurasApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsBiurasFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsBiurasUid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: string;

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: string;

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: FormControl<string | null | undefined>,

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsBiuras_postFormGroup() {
		return new FormGroup<TransportSmsBiuras_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsBiurasApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsBiurasFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsBiurasUid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: string;

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: string;

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiuras_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: FormControl<string | null | undefined>,

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsBiuras_putFormGroup() {
		return new FormGroup<TransportSmsBiuras_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsBiurasApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsBiurasFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsBiurasUid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiurasjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: string;

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: string;

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiurasjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: FormControl<string | null | undefined>,

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsBiurasjsonld_getFormGroup() {
		return new FormGroup<TransportSmsBiurasjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsBiurasApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsBiurasFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsBiurasUid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiurasjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: string;

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: string;

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiurasjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: FormControl<string | null | undefined>,

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsBiurasjsonld_postFormGroup() {
		return new FormGroup<TransportSmsBiurasjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsBiurasApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsBiurasFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsBiurasUid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiurasjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: string;

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: string;

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsBiuras resource is a collection of transports that carry dispatched alerts to the external SMSBIURAS service. */
	export interface TransportSmsBiurasjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the SMSBIURAS service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsBiurasApiKey: FormControl<string | null | undefined>,

		/**
		 * The sender for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasFrom: FormControl<string | null | undefined>,

		/**
		 * The client code for the SMSBIURAS service.
		 * Required
		 * Max length: 255
		 */
		smsBiurasUid: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsBiurasjsonld_putFormGroup() {
		return new FormGroup<TransportSmsBiurasjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsBiurasApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsBiurasFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsBiurasUid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: string;

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: string;

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: FormControl<string | null | undefined>,

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: FormControl<string | null | undefined>,

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsFactor_getFormGroup() {
		return new FormGroup<TransportSmsFactor_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsFactorPushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorSender: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: string;

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: string;

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: FormControl<string | null | undefined>,

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: FormControl<string | null | undefined>,

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsFactor_patchFormGroup() {
		return new FormGroup<TransportSmsFactor_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsFactorPushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorSender: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: string;

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: string;

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: FormControl<string | null | undefined>,

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: FormControl<string | null | undefined>,

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsFactor_postFormGroup() {
		return new FormGroup<TransportSmsFactor_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsFactorPushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorSender: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: string;

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: string;

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactor_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: FormControl<string | null | undefined>,

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: FormControl<string | null | undefined>,

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsFactor_putFormGroup() {
		return new FormGroup<TransportSmsFactor_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsFactorPushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorSender: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactorjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: string;

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: string;

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactorjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: FormControl<string | null | undefined>,

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: FormControl<string | null | undefined>,

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsFactorjsonld_getFormGroup() {
		return new FormGroup<TransportSmsFactorjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsFactorPushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorSender: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactorjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: string;

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: string;

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactorjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: FormControl<string | null | undefined>,

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: FormControl<string | null | undefined>,

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsFactorjsonld_postFormGroup() {
		return new FormGroup<TransportSmsFactorjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsFactorPushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorSender: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactorjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: string;

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: string;

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsFactor resource is a collection of transports that carry dispatched alerts to the external SMSFactor service. */
	export interface TransportSmsFactorjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The push type for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorPushType: FormControl<string | null | undefined>,

		/**
		 * The sender value for the SMSFactor service.
		 * Required
		 * Max length: 255
		 */
		smsFactorSender: FormControl<string | null | undefined>,

		/**
		 * The token for the SMSFactor service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsFactorToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsFactorjsonld_putFormGroup() {
		return new FormGroup<TransportSmsFactorjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsFactorPushType: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorSender: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsFactorToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: string;

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsapi_getFormGroup() {
		return new FormGroup<TransportSmsapi_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsapiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsapiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: string;

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsapi_patchFormGroup() {
		return new FormGroup<TransportSmsapi_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsapiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsapiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: string;

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsapi_postFormGroup() {
		return new FormGroup<TransportSmsapi_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsapiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsapiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: string;

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapi_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsapi_putFormGroup() {
		return new FormGroup<TransportSmsapi_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsapiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsapiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapijsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: string;

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapijsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsapijsonld_getFormGroup() {
		return new FormGroup<TransportSmsapijsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsapiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsapiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapijsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: string;

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapijsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsapijsonld_postFormGroup() {
		return new FormGroup<TransportSmsapijsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsapiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsapiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapijsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: string;

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsapi resource is a collection of transports that carry dispatched alerts to the external SMS API service. */
	export interface TransportSmsapijsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender name for the SMS API service.
		 * Required
		 * Max length: 255
		 */
		smsapiFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the SMS API service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsapiToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsapijsonld_putFormGroup() {
		return new FormGroup<TransportSmsapijsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsapiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smsapiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: string;

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: string;

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: FormControl<string | null | undefined>,

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsc_getFormGroup() {
		return new FormGroup<TransportSmsc_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smscFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: string;

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: string;

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: FormControl<string | null | undefined>,

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsc_patchFormGroup() {
		return new FormGroup<TransportSmsc_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smscFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: string;

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: string;

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: FormControl<string | null | undefined>,

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsc_postFormGroup() {
		return new FormGroup<TransportSmsc_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smscFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: string;

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: string;

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmsc_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: FormControl<string | null | undefined>,

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsc_putFormGroup() {
		return new FormGroup<TransportSmsc_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smscFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmscjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: string;

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: string;

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmscjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: FormControl<string | null | undefined>,

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmscjsonld_getFormGroup() {
		return new FormGroup<TransportSmscjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smscFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmscjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: string;

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: string;

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmscjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: FormControl<string | null | undefined>,

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmscjsonld_postFormGroup() {
		return new FormGroup<TransportSmscjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smscFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmscjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: string;

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: string;

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsc resource is a collection of transports that carry dispatched alerts to the external Smsc service. */
	export interface TransportSmscjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender (NB: text identity, not a phone number) for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscFrom: FormControl<string | null | undefined>,

		/**
		 * The login for the Smsc service.
		 * Required
		 * Max length: 255
		 */
		smscLogin: FormControl<string | null | undefined>,

		/**
		 * The API password for the Smsc service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smscPassword: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmscjsonld_putFormGroup() {
		return new FormGroup<TransportSmscjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smscFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscLogin: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			smscPassword: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: string;

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsmode_getFormGroup() {
		return new FormGroup<TransportSmsmode_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsmodeApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsmodeFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: string;

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsmode_patchFormGroup() {
		return new FormGroup<TransportSmsmode_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsmodeApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsmodeFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: string;

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsmode_postFormGroup() {
		return new FormGroup<TransportSmsmode_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsmodeApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsmodeFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: string;

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmode_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsmode_putFormGroup() {
		return new FormGroup<TransportSmsmode_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsmodeApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsmodeFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: string;

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsmodejsonld_getFormGroup() {
		return new FormGroup<TransportSmsmodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			smsmodeApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsmodeFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmodejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: string;

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmodejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsmodejsonld_postFormGroup() {
		return new FormGroup<TransportSmsmodejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			smsmodeApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsmodeFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmodejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: string;

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSmsmode resource is a collection of transports that carry dispatched alerts to the external Smsmode service. */
	export interface TransportSmsmodejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Smsmode service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		smsmodeApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Smsmode service.
		 * Required
		 * Max length: 255
		 */
		smsmodeFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSmsmodejsonld_putFormGroup() {
		return new FormGroup<TransportSmsmodejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			smsmodeApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			smsmodeFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: string;

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSpotHit_getFormGroup() {
		return new FormGroup<TransportSpotHit_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			spotHitFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			spotHitToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: string;

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSpotHit_patchFormGroup() {
		return new FormGroup<TransportSpotHit_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			spotHitFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			spotHitToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: string;

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSpotHit_postFormGroup() {
		return new FormGroup<TransportSpotHit_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			spotHitFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			spotHitToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: string;

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHit_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSpotHit_putFormGroup() {
		return new FormGroup<TransportSpotHit_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			spotHitFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			spotHitToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHitjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: string;

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHitjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSpotHitjsonld_getFormGroup() {
		return new FormGroup<TransportSpotHitjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			spotHitFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			spotHitToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHitjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: string;

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHitjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSpotHitjsonld_postFormGroup() {
		return new FormGroup<TransportSpotHitjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			spotHitFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			spotHitToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHitjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: string;

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportSpotHit resource is a collection of transports that carry dispatched alerts to the external Spot-Hit service. */
	export interface TransportSpotHitjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.
		 * Required
		 * Max length: 255
		 */
		spotHitFrom: FormControl<string | null | undefined>,

		/**
		 * The API token for the Spot-Hit service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		spotHitToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportSpotHitjsonld_putFormGroup() {
		return new FormGroup<TransportSpotHitjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			spotHitFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			spotHitToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: string;

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: FormControl<string | null | undefined>,

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelegram_getFormGroup() {
		return new FormGroup<TransportTelegram_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			telegramChatId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telegramToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: string;

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: FormControl<string | null | undefined>,

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelegram_patchFormGroup() {
		return new FormGroup<TransportTelegram_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			telegramChatId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telegramToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: string;

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: FormControl<string | null | undefined>,

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelegram_postFormGroup() {
		return new FormGroup<TransportTelegram_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			telegramChatId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telegramToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: string;

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegram_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: FormControl<string | null | undefined>,

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelegram_putFormGroup() {
		return new FormGroup<TransportTelegram_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			telegramChatId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telegramToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegramjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: string;

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegramjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: FormControl<string | null | undefined>,

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelegramjsonld_getFormGroup() {
		return new FormGroup<TransportTelegramjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			telegramChatId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telegramToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegramjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: string;

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegramjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: FormControl<string | null | undefined>,

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelegramjsonld_postFormGroup() {
		return new FormGroup<TransportTelegramjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			telegramChatId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telegramToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegramjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: string;

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelegram resource is a collection of transports that carry dispatched alerts to the external Telegram service. */
	export interface TransportTelegramjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The chat ID for the Telegram service.
		 * Required
		 * Max length: 255
		 */
		telegramChatId: FormControl<string | null | undefined>,

		/**
		 * The token for the Telegram service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telegramToken: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelegramjsonld_putFormGroup() {
		return new FormGroup<TransportTelegramjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			telegramChatId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telegramToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: string;

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: string;

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: FormControl<string | null | undefined>,

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelnyx_getFormGroup() {
		return new FormGroup<TransportTelnyx_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			telnyxApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			telnyxFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telnyxMessagingProfileId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: string;

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: string;

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: FormControl<string | null | undefined>,

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelnyx_patchFormGroup() {
		return new FormGroup<TransportTelnyx_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			telnyxApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			telnyxFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telnyxMessagingProfileId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: string;

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: string;

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: FormControl<string | null | undefined>,

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelnyx_postFormGroup() {
		return new FormGroup<TransportTelnyx_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			telnyxApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			telnyxFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telnyxMessagingProfileId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: string;

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: string;

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyx_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: FormControl<string | null | undefined>,

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelnyx_putFormGroup() {
		return new FormGroup<TransportTelnyx_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			telnyxApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			telnyxFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telnyxMessagingProfileId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyxjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: string;

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: string;

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyxjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: FormControl<string | null | undefined>,

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelnyxjsonld_getFormGroup() {
		return new FormGroup<TransportTelnyxjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			telnyxApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			telnyxFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telnyxMessagingProfileId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyxjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: string;

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: string;

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyxjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: FormControl<string | null | undefined>,

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelnyxjsonld_postFormGroup() {
		return new FormGroup<TransportTelnyxjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			telnyxApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			telnyxFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telnyxMessagingProfileId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyxjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: string;

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: string;

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTelnyx resource is a collection of transports that carry dispatched alerts to the external Telnyx service. */
	export interface TransportTelnyxjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Telnyx service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		telnyxApiKey: FormControl<string | null | undefined>,

		/**
		 * The from value for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxFrom: FormControl<string | null | undefined>,

		/**
		 * The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.
		 * Required
		 * Max length: 255
		 */
		telnyxMessagingProfileId: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTelnyxjsonld_putFormGroup() {
		return new FormGroup<TransportTelnyxjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			telnyxApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			telnyxFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			telnyxMessagingProfileId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: string;

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: string;

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: FormControl<string | null | undefined>,

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTermii_getFormGroup() {
		return new FormGroup<TransportTermii_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			termiiApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			termiiChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			termiiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: string;

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: string;

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: FormControl<string | null | undefined>,

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTermii_patchFormGroup() {
		return new FormGroup<TransportTermii_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			termiiApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			termiiChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			termiiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: string;

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: string;

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: FormControl<string | null | undefined>,

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTermii_postFormGroup() {
		return new FormGroup<TransportTermii_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			termiiApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			termiiChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			termiiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: string;

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: string;

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermii_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: FormControl<string | null | undefined>,

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTermii_putFormGroup() {
		return new FormGroup<TransportTermii_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			termiiApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			termiiChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			termiiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermiijsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: string;

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: string;

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermiijsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: FormControl<string | null | undefined>,

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTermiijsonld_getFormGroup() {
		return new FormGroup<TransportTermiijsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			termiiApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			termiiChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			termiiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermiijsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: string;

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: string;

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermiijsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: FormControl<string | null | undefined>,

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTermiijsonld_postFormGroup() {
		return new FormGroup<TransportTermiijsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			termiiApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			termiiChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			termiiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermiijsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: string;

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: string;

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;
	}

	/** The TransportTermii resource is a collection of transports that carry dispatched alerts to the external Termii service. */
	export interface TransportTermiijsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The API key for the Termii service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		termiiApiKey: FormControl<string | null | undefined>,

		/**
		 * The channel for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiChannel: FormControl<string | null | undefined>,

		/**
		 * The sender value for the Termii service.
		 * Required
		 * Max length: 255
		 */
		termiiFrom: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,
	}
	export function CreateTransportTermiijsonld_putFormGroup() {
		return new FormGroup<TransportTermiijsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			termiiApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			termiiChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			termiiFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: string;

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: string;

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: string;
	}

	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: FormControl<string | null | undefined>,

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: FormControl<string | null | undefined>,

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: FormControl<string | null | undefined>,
	}
	export function CreateTransportTrello_getFormGroup() {
		return new FormGroup<TransportTrello_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			trelloListId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: string;

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: string;

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: string;
	}

	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: FormControl<string | null | undefined>,

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: FormControl<string | null | undefined>,

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: FormControl<string | null | undefined>,
	}
	export function CreateTransportTrello_patchFormGroup() {
		return new FormGroup<TransportTrello_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			trelloListId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: string;

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: string;

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: string;
	}

	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: FormControl<string | null | undefined>,

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: FormControl<string | null | undefined>,

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: FormControl<string | null | undefined>,
	}
	export function CreateTransportTrello_postFormGroup() {
		return new FormGroup<TransportTrello_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			trelloListId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: string;

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: string;

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: string;
	}

	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrello_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: FormControl<string | null | undefined>,

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: FormControl<string | null | undefined>,

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: FormControl<string | null | undefined>,
	}
	export function CreateTransportTrello_putFormGroup() {
		return new FormGroup<TransportTrello_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			trelloListId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrellojsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: string;

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: string;

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: string;
	}

	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrellojsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: FormControl<string | null | undefined>,

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: FormControl<string | null | undefined>,

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: FormControl<string | null | undefined>,
	}
	export function CreateTransportTrellojsonld_getFormGroup() {
		return new FormGroup<TransportTrellojsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			trelloListId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrellojsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: string;

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: string;

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: string;
	}

	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrellojsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: FormControl<string | null | undefined>,

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: FormControl<string | null | undefined>,

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: FormControl<string | null | undefined>,
	}
	export function CreateTransportTrellojsonld_postFormGroup() {
		return new FormGroup<TransportTrellojsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			trelloListId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrellojsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: string;

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: string;

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: string;
	}

	/** The TransportTrello resource is a collection of transports that carry dispatched alerts to the external Trello service. */
	export interface TransportTrellojsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloApiKey: FormControl<string | null | undefined>,

		/**
		 * The API token for the Trello service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		trelloApiToken: FormControl<string | null | undefined>,

		/**
		 * The list ID for the Trello service.
		 * Required
		 * Max length: 255
		 */
		trelloListId: FormControl<string | null | undefined>,
	}
	export function CreateTransportTrellojsonld_putFormGroup() {
		return new FormGroup<TransportTrellojsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			trelloApiToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			trelloListId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: string;

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: string;
	}

	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: FormControl<string | null | undefined>,
	}
	export function CreateTransportTurboSms_getFormGroup() {
		return new FormGroup<TransportTurboSms_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			turboSmsAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			turboSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: string;

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: string;
	}

	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: FormControl<string | null | undefined>,
	}
	export function CreateTransportTurboSms_patchFormGroup() {
		return new FormGroup<TransportTurboSms_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			turboSmsAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			turboSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: string;

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: string;
	}

	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: FormControl<string | null | undefined>,
	}
	export function CreateTransportTurboSms_postFormGroup() {
		return new FormGroup<TransportTurboSms_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			turboSmsAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			turboSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: string;

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: string;
	}

	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSms_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: FormControl<string | null | undefined>,
	}
	export function CreateTransportTurboSms_putFormGroup() {
		return new FormGroup<TransportTurboSms_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			turboSmsAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			turboSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSmsjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: string;

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: string;
	}

	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSmsjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: FormControl<string | null | undefined>,
	}
	export function CreateTransportTurboSmsjsonld_getFormGroup() {
		return new FormGroup<TransportTurboSmsjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			turboSmsAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			turboSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSmsjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: string;

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: string;
	}

	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSmsjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: FormControl<string | null | undefined>,
	}
	export function CreateTransportTurboSmsjsonld_postFormGroup() {
		return new FormGroup<TransportTurboSmsjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			turboSmsAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			turboSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSmsjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: string;

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: string;
	}

	/** The TransportTurboSms resource is a collection of transports that carry dispatched alerts to the external TurboSms service. */
	export interface TransportTurboSmsjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The auth token for the TurboSms service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		turboSmsAuthToken: FormControl<string | null | undefined>,

		/**
		 * The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.
		 * Required
		 * Max length: 255
		 */
		turboSmsFrom: FormControl<string | null | undefined>,
	}
	export function CreateTransportTurboSmsjsonld_putFormGroup() {
		return new FormGroup<TransportTurboSmsjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			turboSmsAuthToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
			turboSmsFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
		});

	}


	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: string;

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: string;

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: string;
	}

	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: FormControl<string | null | undefined>,

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: FormControl<string | null | undefined>,

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwilio_getFormGroup() {
		return new FormGroup<TransportTwilio_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioSid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: string;

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: string;

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: string;
	}

	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: FormControl<string | null | undefined>,

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: FormControl<string | null | undefined>,

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwilio_patchFormGroup() {
		return new FormGroup<TransportTwilio_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioSid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: string;

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: string;

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: string;
	}

	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: FormControl<string | null | undefined>,

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: FormControl<string | null | undefined>,

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwilio_postFormGroup() {
		return new FormGroup<TransportTwilio_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioSid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: string;

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: string;

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: string;
	}

	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwilio_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: FormControl<string | null | undefined>,

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: FormControl<string | null | undefined>,

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwilio_putFormGroup() {
		return new FormGroup<TransportTwilio_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioSid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwiliojsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: string;

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: string;

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: string;
	}

	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwiliojsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: FormControl<string | null | undefined>,

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: FormControl<string | null | undefined>,

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwiliojsonld_getFormGroup() {
		return new FormGroup<TransportTwiliojsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioSid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwiliojsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: string;

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: string;

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: string;
	}

	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwiliojsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: FormControl<string | null | undefined>,

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: FormControl<string | null | undefined>,

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwiliojsonld_postFormGroup() {
		return new FormGroup<TransportTwiliojsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioSid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwiliojsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: string;

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: string;

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: string;
	}

	/** The TransportTwilio resource is a collection of transports that carry dispatched alerts to the external Twilio service. */
	export interface TransportTwiliojsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioFrom: FormControl<string | null | undefined>,

		/**
		 * The SID for the Twilio service.
		 * Required
		 * Max length: 255
		 */
		twilioSid: FormControl<string | null | undefined>,

		/**
		 * The token for the Twilio service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twilioToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwiliojsonld_putFormGroup() {
		return new FormGroup<TransportTwiliojsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioSid: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twilioToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: string;
	}

	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwitter_getFormGroup() {
		return new FormGroup<TransportTwitter_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twitterAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: string;
	}

	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwitter_patchFormGroup() {
		return new FormGroup<TransportTwitter_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twitterAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: string;
	}

	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwitter_postFormGroup() {
		return new FormGroup<TransportTwitter_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twitterAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: string;
	}

	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitter_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwitter_putFormGroup() {
		return new FormGroup<TransportTwitter_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twitterAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitterjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: string;
	}

	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitterjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwitterjsonld_getFormGroup() {
		return new FormGroup<TransportTwitterjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twitterAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitterjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: string;
	}

	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitterjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwitterjsonld_postFormGroup() {
		return new FormGroup<TransportTwitterjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twitterAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitterjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: string;
	}

	/** The TransportTwitter resource is a collection of transports that carry dispatched alerts to the external Twitter service. */
	export interface TransportTwitterjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The access token for the Twitter service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		twitterAccessToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportTwitterjsonld_putFormGroup() {
		return new FormGroup<TransportTwitterjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			twitterAccessToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: string;

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: string;

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: string;
	}

	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: FormControl<string | null | undefined>,

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: FormControl<string | null | undefined>,

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: FormControl<string | null | undefined>,
	}
	export function CreateTransportVonage_getFormGroup() {
		return new FormGroup<TransportVonage_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: string;

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: string;

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: string;
	}

	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: FormControl<string | null | undefined>,

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: FormControl<string | null | undefined>,

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: FormControl<string | null | undefined>,
	}
	export function CreateTransportVonage_patchFormGroup() {
		return new FormGroup<TransportVonage_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: string;

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: string;

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: string;
	}

	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: FormControl<string | null | undefined>,

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: FormControl<string | null | undefined>,

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: FormControl<string | null | undefined>,
	}
	export function CreateTransportVonage_postFormGroup() {
		return new FormGroup<TransportVonage_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: string;

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: string;

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: string;
	}

	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonage_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: FormControl<string | null | undefined>,

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: FormControl<string | null | undefined>,

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: FormControl<string | null | undefined>,
	}
	export function CreateTransportVonage_putFormGroup() {
		return new FormGroup<TransportVonage_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonagejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: string;

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: string;

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: string;
	}

	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonagejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: FormControl<string | null | undefined>,

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: FormControl<string | null | undefined>,

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: FormControl<string | null | undefined>,
	}
	export function CreateTransportVonagejsonld_getFormGroup() {
		return new FormGroup<TransportVonagejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonagejsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: string;

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: string;

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: string;
	}

	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonagejsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: FormControl<string | null | undefined>,

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: FormControl<string | null | undefined>,

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: FormControl<string | null | undefined>,
	}
	export function CreateTransportVonagejsonld_postFormGroup() {
		return new FormGroup<TransportVonagejsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonagejsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: string;

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: string;

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: string;
	}

	/** The TransportVonage resource is a collection of transports that carry dispatched alerts to the external Vonage service. */
	export interface TransportVonagejsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The sender for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageFrom: FormControl<string | null | undefined>,

		/**
		 * The key for the Vonage service.
		 * Required
		 * Max length: 255
		 */
		vonageKey: FormControl<string | null | undefined>,

		/**
		 * The secret for the Vonage service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		vonageSecret: FormControl<string | null | undefined>,
	}
	export function CreateTransportVonagejsonld_putFormGroup() {
		return new FormGroup<TransportVonagejsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageFrom: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			vonageSecret: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/** The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE. */
		webhookHeaders?: Array<string>;

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: string;
	}

	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: FormControl<string | null | undefined>,
	}
	export function CreateTransportWebhook_getFormGroup() {
		return new FormGroup<TransportWebhook_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			httpMethodCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined),
			mustBeEncryptedValue: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			webhookUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: string;

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/** The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE. */
		webhookHeaders?: Array<string>;

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: string;
	}

	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: FormControl<string | null | undefined>,

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: FormControl<string | null | undefined>,
	}
	export function CreateTransportWebhook_patchFormGroup() {
		return new FormGroup<TransportWebhook_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			httpMethodCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mustBeEncryptedValue: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			webhookUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: string;

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/** The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE. */
		webhookHeaders?: Array<string>;

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: string;
	}

	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: FormControl<string | null | undefined>,

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: FormControl<string | null | undefined>,
	}
	export function CreateTransportWebhook_postFormGroup() {
		return new FormGroup<TransportWebhook_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			httpMethodCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mustBeEncryptedValue: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			webhookUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: string;

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/** The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE. */
		webhookHeaders?: Array<string>;

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: string;
	}

	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhook_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: FormControl<string | null | undefined>,

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: FormControl<string | null | undefined>,
	}
	export function CreateTransportWebhook_putFormGroup() {
		return new FormGroup<TransportWebhook_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			httpMethodCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mustBeEncryptedValue: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			webhookUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhookjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: string;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/** The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE. */
		webhookHeaders?: Array<string>;

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: string;
	}

	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhookjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: FormControl<string | null | undefined>,
	}
	export function CreateTransportWebhookjsonld_getFormGroup() {
		return new FormGroup<TransportWebhookjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			httpMethodCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			id: new FormControl<string | null | undefined>(undefined),
			mustBeEncryptedValue: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			webhookUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhookjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: string;

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/** The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE. */
		webhookHeaders?: Array<string>;

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: string;
	}

	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhookjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: FormControl<string | null | undefined>,

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: FormControl<string | null | undefined>,
	}
	export function CreateTransportWebhookjsonld_postFormGroup() {
		return new FormGroup<TransportWebhookjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			httpMethodCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mustBeEncryptedValue: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			webhookUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhookjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: string;

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/** The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE. */
		webhookHeaders?: Array<string>;

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: string;
	}

	/** The TransportWebhook resource is a collection of transports that carry dispatched alerts to any external webhook destination. */
	export interface TransportWebhookjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The HTTP request method that must be used.
		 * Required
		 */
		httpMethodCode: FormControl<string | null | undefined>,

		/**
		 * An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.
		 * Max length: 1000
		 */
		mustBeEncryptedValue: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The URL for the Webhook service.
		 * Required
		 * Max length: 1000
		 */
		webhookUrl: FormControl<string | null | undefined>,
	}
	export function CreateTransportWebhookjsonld_putFormGroup() {
		return new FormGroup<TransportWebhookjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			httpMethodCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			mustBeEncryptedValue: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(1000)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			webhookUrl: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: string;
	}

	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: FormControl<string | null | undefined>,
	}
	export function CreateTransportYunpian_getFormGroup() {
		return new FormGroup<TransportYunpian_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			yunpianApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: string;
	}

	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: FormControl<string | null | undefined>,
	}
	export function CreateTransportYunpian_patchFormGroup() {
		return new FormGroup<TransportYunpian_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			yunpianApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: string;
	}

	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: FormControl<string | null | undefined>,
	}
	export function CreateTransportYunpian_postFormGroup() {
		return new FormGroup<TransportYunpian_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			yunpianApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: string;
	}

	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpian_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: FormControl<string | null | undefined>,
	}
	export function CreateTransportYunpian_putFormGroup() {
		return new FormGroup<TransportYunpian_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			yunpianApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpianjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: string;
	}

	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpianjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: FormControl<string | null | undefined>,
	}
	export function CreateTransportYunpianjsonld_getFormGroup() {
		return new FormGroup<TransportYunpianjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			yunpianApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpianjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: string;
	}

	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpianjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: FormControl<string | null | undefined>,
	}
	export function CreateTransportYunpianjsonld_postFormGroup() {
		return new FormGroup<TransportYunpianjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			yunpianApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpianjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: string;
	}

	/** The TransportYunpian resource is a collection of transports that carry dispatched alerts to the external Yunpian service. */
	export interface TransportYunpianjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The API key for the Yunpian service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		yunpianApiKey: FormControl<string | null | undefined>,
	}
	export function CreateTransportYunpianjsonld_putFormGroup() {
		return new FormGroup<TransportYunpianjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			yunpianApiKey: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: string;

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: string;

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: string;
	}

	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZendesk_getFormGroup() {
		return new FormGroup<TransportZendesk_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: string;

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: string;

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: string;
	}

	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZendesk_patchFormGroup() {
		return new FormGroup<TransportZendesk_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: string;

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: string;

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: string;
	}

	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZendesk_postFormGroup() {
		return new FormGroup<TransportZendesk_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: string;

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: string;

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: string;
	}

	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendesk_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZendesk_putFormGroup() {
		return new FormGroup<TransportZendesk_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendeskjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: string;

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: string;

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: string;
	}

	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendeskjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZendeskjsonld_getFormGroup() {
		return new FormGroup<TransportZendeskjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendeskjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: string;

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: string;

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: string;
	}

	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendeskjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZendeskjsonld_postFormGroup() {
		return new FormGroup<TransportZendeskjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendeskjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: string;

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: string;

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: string;
	}

	/** The TransportZendesk resource is a collection of transports that carry dispatched alerts to the external Zendesk service. */
	export interface TransportZendeskjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The login email address for the Zendesk service.
		 * Required
		 * Max length: 255
		 */
		zendeskEmail: FormControl<string | null | undefined>,

		/**
		 * The host name for the Zendesk service (domain.zendesk.com).
		 * Required
		 * Max length: 255
		 */
		zendeskHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zendesk service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zendeskToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZendeskjsonld_putFormGroup() {
		return new FormGroup<TransportZendeskjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zendeskToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_get {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: string;

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: string;

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: string;

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: string;
	}

	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_getFormProperties {

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: FormControl<string | null | undefined>,

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: FormControl<string | null | undefined>,

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZulip_getFormGroup() {
		return new FormGroup<TransportZulip_getFormProperties>({
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_patch {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: string;

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: string;

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: string;

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: string;
	}

	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_patchFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: FormControl<string | null | undefined>,

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: FormControl<string | null | undefined>,

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZulip_patchFormGroup() {
		return new FormGroup<TransportZulip_patchFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: string;

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: string;

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: string;

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: string;
	}

	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: FormControl<string | null | undefined>,

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: FormControl<string | null | undefined>,

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZulip_postFormGroup() {
		return new FormGroup<TransportZulip_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: string;

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: string;

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: string;

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: string;
	}

	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulip_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: FormControl<string | null | undefined>,

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: FormControl<string | null | undefined>,

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZulip_putFormGroup() {
		return new FormGroup<TransportZulip_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulipjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt?: Date | null;

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/** The name of the person who owns this resource. */
		resourceOwner?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: string;

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: string;

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: string;

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: string;
	}

	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulipjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** When the resource instance was created. This date-time is in the UTC timezone. */
		createdAt: FormControl<Date | null | undefined>,

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/** The name of the person who owns this resource. */
		resourceOwner: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: FormControl<string | null | undefined>,

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: FormControl<string | null | undefined>,

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZulipjsonld_getFormGroup() {
		return new FormGroup<TransportZulipjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			createdAt: new FormControl<Date | null | undefined>(undefined),
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			id: new FormControl<string | null | undefined>(undefined),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			resourceOwner: new FormControl<string | null | undefined>(undefined),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulipjsonld_post {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: string;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: string;

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: string;

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: string;

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: string;
	}

	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulipjsonld_postFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The partition that contains this resource instance. The resource cannot be moved to another partition.
		 * Required
		 */
		partition: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: FormControl<string | null | undefined>,

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: FormControl<string | null | undefined>,

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZulipjsonld_postFormGroup() {
		return new FormGroup<TransportZulipjsonld_postFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			partition: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulipjsonld_put {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode?: string | null;

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: string;

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: string;

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: string;

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: string;

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: string;
	}

	/** The TransportZulip resource is a collection of transports that carry dispatched alerts to the external Zulip service. */
	export interface TransportZulipjsonld_putFormProperties {

		/**
		 * User-provided string on which to segment and filter data. Max 50 characters.
		 * Max length: 50
		 */
		dataSegmentCode: FormControl<string | null | undefined>,

		/**
		 * The name of the transport.
		 * Required
		 * Max length: 255
		 */
		transportName: FormControl<string | null | undefined>,

		/**
		 * The channel for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipChannel: FormControl<string | null | undefined>,

		/**
		 * The email for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipEmail: FormControl<string | null | undefined>,

		/**
		 * The host for the Zulip service.
		 * Required
		 * Max length: 255
		 */
		zulipHost: FormControl<string | null | undefined>,

		/**
		 * The token for the Zulip service. Stored in encrypted format.
		 * Required
		 * Max length: 1000
		 */
		zulipToken: FormControl<string | null | undefined>,
	}
	export function CreateTransportZulipjsonld_putFormGroup() {
		return new FormGroup<TransportZulipjsonld_putFormProperties>({
			dataSegmentCode: new FormControl<string | null | undefined>(undefined, [Validators.maxLength(50)]),
			transportName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipChannel: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipEmail: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipHost: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(255)]),
			zulipToken: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(1000)]),
		});

	}


	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccount_get {

		/** The account level of the user. */
		accountLevelCode?: string | null;

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch?: number | null;

		/** The email address of the user. */
		email?: string | null;

		/** The first name of the user. */
		firstName?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** Whether the user account has overdue payments. */
		isDelinquent?: boolean | null;

		/** The last name of the user. */
		lastName?: string | null;

		/** The timezone of the user. */
		timezoneCode?: string | null;
	}

	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccount_getFormProperties {

		/** The account level of the user. */
		accountLevelCode: FormControl<string | null | undefined>,

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch: FormControl<number | null | undefined>,

		/** The email address of the user. */
		email: FormControl<string | null | undefined>,

		/** The first name of the user. */
		firstName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** Whether the user account has overdue payments. */
		isDelinquent: FormControl<boolean | null | undefined>,

		/** The last name of the user. */
		lastName: FormControl<string | null | undefined>,

		/** The timezone of the user. */
		timezoneCode: FormControl<string | null | undefined>,
	}
	export function CreateUserAccount_getFormGroup() {
		return new FormGroup<UserAccount_getFormProperties>({
			accountLevelCode: new FormControl<string | null | undefined>(undefined),
			creditsOveragePercentTripSwitch: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(1000)]),
			email: new FormControl<string | null | undefined>(undefined),
			firstName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			isDelinquent: new FormControl<boolean | null | undefined>(undefined),
			lastName: new FormControl<string | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccount_patch {

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch?: number | null;
	}

	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccount_patchFormProperties {

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch: FormControl<number | null | undefined>,
	}
	export function CreateUserAccount_patchFormGroup() {
		return new FormGroup<UserAccount_patchFormProperties>({
			creditsOveragePercentTripSwitch: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(1000)]),
		});

	}


	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccount_put {

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch?: number | null;
	}

	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccount_putFormProperties {

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch: FormControl<number | null | undefined>,
	}
	export function CreateUserAccount_putFormGroup() {
		return new FormGroup<UserAccount_putFormProperties>({
			creditsOveragePercentTripSwitch: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(1000)]),
		});

	}


	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccountjsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;

		/** The account level of the user. */
		accountLevelCode?: string | null;

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch?: number | null;

		/** The email address of the user. */
		email?: string | null;

		/** The first name of the user. */
		firstName?: string | null;

		/** The unique identifier of the resource instance. */
		id?: string | null;

		/** Whether the user account has overdue payments. */
		isDelinquent?: boolean | null;

		/** The last name of the user. */
		lastName?: string | null;

		/** The timezone of the user. */
		timezoneCode?: string | null;
	}

	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccountjsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,

		/** The account level of the user. */
		accountLevelCode: FormControl<string | null | undefined>,

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch: FormControl<number | null | undefined>,

		/** The email address of the user. */
		email: FormControl<string | null | undefined>,

		/** The first name of the user. */
		firstName: FormControl<string | null | undefined>,

		/** The unique identifier of the resource instance. */
		id: FormControl<string | null | undefined>,

		/** Whether the user account has overdue payments. */
		isDelinquent: FormControl<boolean | null | undefined>,

		/** The last name of the user. */
		lastName: FormControl<string | null | undefined>,

		/** The timezone of the user. */
		timezoneCode: FormControl<string | null | undefined>,
	}
	export function CreateUserAccountjsonld_getFormGroup() {
		return new FormGroup<UserAccountjsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			accountLevelCode: new FormControl<string | null | undefined>(undefined),
			creditsOveragePercentTripSwitch: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(1000)]),
			email: new FormControl<string | null | undefined>(undefined),
			firstName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
			isDelinquent: new FormControl<boolean | null | undefined>(undefined),
			lastName: new FormControl<string | null | undefined>(undefined),
			timezoneCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccountjsonld_put {

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch?: number | null;
	}

	/** The UserAccount resource contains basic information regarding the authenticated user account. */
	export interface UserAccountjsonld_putFormProperties {

		/**
		 * If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.
		 * Minimum: 1
		 * Maximum: 1000
		 */
		creditsOveragePercentTripSwitch: FormControl<number | null | undefined>,
	}
	export function CreateUserAccountjsonld_putFormGroup() {
		return new FormGroup<UserAccountjsonld_putFormProperties>({
			creditsOveragePercentTripSwitch: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(1000)]),
		});

	}


	/** The UserAccountLevelCode resource is a set of codes that describes the different levels that can be assigned to user accounts. */
	export interface UserAccountLevelCode_get {
		codeName?: string | null;
		id?: string | null;
	}

	/** The UserAccountLevelCode resource is a set of codes that describes the different levels that can be assigned to user accounts. */
	export interface UserAccountLevelCode_getFormProperties {
		codeName: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateUserAccountLevelCode_getFormGroup() {
		return new FormGroup<UserAccountLevelCode_getFormProperties>({
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The UserAccountLevelCode resource is a set of codes that describes the different levels that can be assigned to user accounts. */
	export interface UserAccountLevelCodejsonld_get {
		'@context'?: string;
		'@id'?: string | null;
		'@type'?: string | null;
		codeName?: string | null;
		id?: string | null;
	}

	/** The UserAccountLevelCode resource is a set of codes that describes the different levels that can be assigned to user accounts. */
	export interface UserAccountLevelCodejsonld_getFormProperties {
		'@context': FormControl<string | null | undefined>,
		'@id': FormControl<string | null | undefined>,
		'@type': FormControl<string | null | undefined>,
		codeName: FormControl<string | null | undefined>,
		id: FormControl<string | null | undefined>,
	}
	export function CreateUserAccountLevelCodejsonld_getFormGroup() {
		return new FormGroup<UserAccountLevelCodejsonld_getFormProperties>({
			'@context': new FormControl<string | null | undefined>(undefined),
			'@id': new FormControl<string | null | undefined>(undefined),
			'@type': new FormControl<string | null | undefined>(undefined),
			codeName: new FormControl<string | null | undefined>(undefined),
			id: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Retrieves the collection of AlertLog resources.
		 * Retrieves the collection of AlertLog resources.
		 * Get api/alert-log
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<AlertLog_get>} AlertLog collection
		 */
		Api_alert_log_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, monitor: string | null | undefined, monitor_: Array<string> | null | undefined, alertService: string | null | undefined, alertService_: Array<string> | null | undefined, alertLogStatusCode: string | null | undefined, alertLogStatusCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<AlertLog_get>> {
			return this.http.get<Array<AlertLog_get>>(this.baseUri + 'api/alert-log?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&monitor=' + (monitor == null ? '' : encodeURIComponent(monitor)) + '&' + monitor_?.map(z => `monitor[]=${encodeURIComponent(z)}`).join('&') + '&alertService=' + (alertService == null ? '' : encodeURIComponent(alertService)) + '&' + alertService_?.map(z => `alertService[]=${encodeURIComponent(z)}`).join('&') + '&alertLogStatusCode=' + (alertLogStatusCode == null ? '' : encodeURIComponent(alertLogStatusCode)) + '&' + alertLogStatusCode_?.map(z => `alertLogStatusCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves the collection of AlertLogStatusCode resources.
		 * Retrieves the collection of AlertLogStatusCode resources.
		 * Get api/alert-log-status-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<AlertLogStatusCode_get>} AlertLogStatusCode collection
		 */
		Api_alert_log_status_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<AlertLogStatusCode_get>> {
			return this.http.get<Array<AlertLogStatusCode_get>>(this.baseUri + 'api/alert-log-status-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a AlertLogStatusCode resource.
		 * Retrieves a AlertLogStatusCode resource.
		 * Get api/alert-log-status-code/{id}
		 * @param {string} id AlertLogStatusCode identifier
		 * @return {AlertLogStatusCode_get} AlertLogStatusCode resource
		 */
		Api_alert_log_status_code_id_get(id: string): Observable<AlertLogStatusCode_get> {
			return this.http.get<AlertLogStatusCode_get>(this.baseUri + 'api/alert-log-status-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves a AlertLog resource.
		 * Retrieves a AlertLog resource.
		 * Get api/alert-log/{id}
		 * @param {string} id AlertLog identifier
		 * @return {AlertLog_get} AlertLog resource
		 */
		Api_alert_log_id_get(id: string): Observable<AlertLog_get> {
			return this.http.get<AlertLog_get>(this.baseUri + 'api/alert-log/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of AlertService resources.
		 * Retrieves the collection of AlertService resources.
		 * Get api/alert-service
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<AlertService_get>} AlertService collection
		 */
		Api_alert_service_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<AlertService_get>> {
			return this.http.get<Array<AlertService_get>>(this.baseUri + 'api/alert-service?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a AlertService resource.
		 * Creates a AlertService resource.
		 * Post api/alert-service
		 * @param {AlertService_post} requestBody The new AlertService resource
		 * @return {void} 
		 */
		Api_alert_service_post(requestBody: AlertService_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/alert-service', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the collection of AlertServiceTransportCode resources.
		 * Retrieves the collection of AlertServiceTransportCode resources.
		 * Get api/alert-service-transport-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<AlertServiceTransportCode_get>} AlertServiceTransportCode collection
		 */
		Api_alert_service_transport_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<AlertServiceTransportCode_get>> {
			return this.http.get<Array<AlertServiceTransportCode_get>>(this.baseUri + 'api/alert-service-transport-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a AlertServiceTransportCode resource.
		 * Retrieves a AlertServiceTransportCode resource.
		 * Get api/alert-service-transport-code/{id}
		 * @param {string} id AlertServiceTransportCode identifier
		 * @return {AlertServiceTransportCode_get} AlertServiceTransportCode resource
		 */
		Api_alert_service_transport_code_id_get(id: string): Observable<AlertServiceTransportCode_get> {
			return this.http.get<AlertServiceTransportCode_get>(this.baseUri + 'api/alert-service-transport-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Removes the AlertService resource.
		 * Removes the AlertService resource.
		 * Delete api/alert-service/{id}
		 * @param {string} id AlertService identifier
		 * @return {void} 
		 */
		Api_alert_service_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/alert-service/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a AlertService resource.
		 * Retrieves a AlertService resource.
		 * Get api/alert-service/{id}
		 * @param {string} id AlertService identifier
		 * @return {AlertService_get} AlertService resource
		 */
		Api_alert_service_id_get(id: string): Observable<AlertService_get> {
			return this.http.get<AlertService_get>(this.baseUri + 'api/alert-service/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the AlertService resource.
		 * Replaces the AlertService resource.
		 * Put api/alert-service/{id}
		 * @param {string} id AlertService identifier
		 * @param {AlertService_put} requestBody The updated AlertService resource
		 * @return {AlertService_get} AlertService resource updated
		 */
		Api_alert_service_id_put(id: string, requestBody: AlertService_put): Observable<AlertService_get> {
			return this.http.put<AlertService_get>(this.baseUri + 'api/alert-service/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of CreditsConsumption resources.
		 * Retrieves the collection of CreditsConsumption resources.
		 * Get api/credits-consumption
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<CreditsConsumption_get>} CreditsConsumption collection
		 */
		Api_credits_consumption_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<CreditsConsumption_get>> {
			return this.http.get<Array<CreditsConsumption_get>>(this.baseUri + 'api/credits-consumption?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a CreditsConsumption resource.
		 * Retrieves a CreditsConsumption resource.
		 * Get api/credits-consumption/{id}
		 * @param {string} id CreditsConsumption identifier
		 * @return {CreditsConsumption_get} CreditsConsumption resource
		 */
		Api_credits_consumption_id_get(id: string): Observable<CreditsConsumption_get> {
			return this.http.get<CreditsConsumption_get>(this.baseUri + 'api/credits-consumption/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of HttpMethodCode resources.
		 * Retrieves the collection of HttpMethodCode resources.
		 * Get api/http-method-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<HttpMethodCode_get>} HttpMethodCode collection
		 */
		Api_http_method_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<HttpMethodCode_get>> {
			return this.http.get<Array<HttpMethodCode_get>>(this.baseUri + 'api/http-method-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a HttpMethodCode resource.
		 * Retrieves a HttpMethodCode resource.
		 * Get api/http-method-code/{id}
		 * @param {string} id HttpMethodCode identifier
		 * @return {HttpMethodCode_get} HttpMethodCode resource
		 */
		Api_http_method_code_id_get(id: string): Observable<HttpMethodCode_get> {
			return this.http.get<HttpMethodCode_get>(this.baseUri + 'api/http-method-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of MediaObject resources.
		 * Retrieves the collection of MediaObject resources.
		 * Get api/media-object
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<MediaObject_get>} MediaObject collection
		 */
		Api_media_object_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<MediaObject_get>> {
			return this.http.get<Array<MediaObject_get>>(this.baseUri + 'api/media-object?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Removes the MediaObject resource.
		 * Removes the MediaObject resource.
		 * Delete api/media-object/{id}
		 * @param {string} id MediaObject identifier
		 * @return {void} 
		 */
		Api_media_object_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/media-object/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a MediaObject resource.
		 * Retrieves a MediaObject resource.
		 * Get api/media-object/{id}
		 * @param {string} id MediaObject identifier
		 * @return {MediaObject_get} MediaObject resource
		 */
		Api_media_object_id_get(id: string): Observable<MediaObject_get> {
			return this.http.get<MediaObject_get>(this.baseUri + 'api/media-object/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of Monitor resources.
		 * Retrieves the collection of Monitor resources.
		 * Get api/monitor
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<Monitor_get>} Monitor collection
		 */
		Api_monitor_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<Monitor_get>> {
			return this.http.get<Array<Monitor_get>>(this.baseUri + 'api/monitor?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a Monitor resource.
		 * Creates a Monitor resource.
		 * Post api/monitor
		 * @param {Monitor_post} requestBody The new Monitor resource
		 * @return {void} 
		 */
		Api_monitor_post(requestBody: Monitor_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/monitor', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the collection of MonitorStatusCode resources.
		 * Retrieves the collection of MonitorStatusCode resources.
		 * Get api/monitor-status-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<MonitorStatusCode_get>} MonitorStatusCode collection
		 */
		Api_monitor_status_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<MonitorStatusCode_get>> {
			return this.http.get<Array<MonitorStatusCode_get>>(this.baseUri + 'api/monitor-status-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a MonitorStatusCode resource.
		 * Retrieves a MonitorStatusCode resource.
		 * Get api/monitor-status-code/{id}
		 * @param {string} id MonitorStatusCode identifier
		 * @return {MonitorStatusCode_get} MonitorStatusCode resource
		 */
		Api_monitor_status_code_id_get(id: string): Observable<MonitorStatusCode_get> {
			return this.http.get<MonitorStatusCode_get>(this.baseUri + 'api/monitor-status-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of MonitorStatusLog resources.
		 * Retrieves the collection of MonitorStatusLog resources.
		 * Get api/monitor-status-log
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<MonitorStatusLog_get>} MonitorStatusLog collection
		 */
		Api_monitor_status_log_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, monitor: string | null | undefined, monitor_: Array<string> | null | undefined, monitorStatusCode: string | null | undefined, monitorStatusCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<MonitorStatusLog_get>> {
			return this.http.get<Array<MonitorStatusLog_get>>(this.baseUri + 'api/monitor-status-log?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&monitor=' + (monitor == null ? '' : encodeURIComponent(monitor)) + '&' + monitor_?.map(z => `monitor[]=${encodeURIComponent(z)}`).join('&') + '&monitorStatusCode=' + (monitorStatusCode == null ? '' : encodeURIComponent(monitorStatusCode)) + '&' + monitorStatusCode_?.map(z => `monitorStatusCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a MonitorStatusLog resource.
		 * Retrieves a MonitorStatusLog resource.
		 * Get api/monitor-status-log/{id}
		 * @param {string} id MonitorStatusLog identifier
		 * @return {MonitorStatusLog_get} MonitorStatusLog resource
		 */
		Api_monitor_status_log_id_get(id: string): Observable<MonitorStatusLog_get> {
			return this.http.get<MonitorStatusLog_get>(this.baseUri + 'api/monitor-status-log/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of MonitorTypeCode resources.
		 * Retrieves the collection of MonitorTypeCode resources.
		 * Get api/monitor-type-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<MonitorTypeCode_get>} MonitorTypeCode collection
		 */
		Api_monitor_type_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<MonitorTypeCode_get>> {
			return this.http.get<Array<MonitorTypeCode_get>>(this.baseUri + 'api/monitor-type-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a MonitorTypeCode resource.
		 * Retrieves a MonitorTypeCode resource.
		 * Get api/monitor-type-code/{id}
		 * @param {string} id MonitorTypeCode identifier
		 * @return {MonitorTypeCode_get} MonitorTypeCode resource
		 */
		Api_monitor_type_code_id_get(id: string): Observable<MonitorTypeCode_get> {
			return this.http.get<MonitorTypeCode_get>(this.baseUri + 'api/monitor-type-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Removes the Monitor resource.
		 * Removes the Monitor resource.
		 * Delete api/monitor/{id}
		 * @param {string} id Monitor identifier
		 * @return {void} 
		 */
		Api_monitor_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/monitor/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a Monitor resource.
		 * Retrieves a Monitor resource.
		 * Get api/monitor/{id}
		 * @param {string} id Monitor identifier
		 * @return {Monitor_get} Monitor resource
		 */
		Api_monitor_id_get(id: string): Observable<Monitor_get> {
			return this.http.get<Monitor_get>(this.baseUri + 'api/monitor/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the Monitor resource.
		 * Replaces the Monitor resource.
		 * Put api/monitor/{id}
		 * @param {string} id Monitor identifier
		 * @param {Monitor_put} requestBody The updated Monitor resource
		 * @return {Monitor_get} Monitor resource updated
		 */
		Api_monitor_id_put(id: string, requestBody: Monitor_put): Observable<Monitor_get> {
			return this.http.put<Monitor_get>(this.baseUri + 'api/monitor/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of Partition resources.
		 * Retrieves the collection of Partition resources.
		 * Get api/partition
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<Partition_get>} Partition collection
		 */
		Api_partition_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<Partition_get>> {
			return this.http.get<Array<Partition_get>>(this.baseUri + 'api/partition?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a Partition resource.
		 * Creates a Partition resource.
		 * Post api/partition
		 * @param {Partition_post} requestBody The new Partition resource
		 * @return {void} 
		 */
		Api_partition_post(requestBody: Partition_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/partition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the Partition resource.
		 * Removes the Partition resource.
		 * Delete api/partition/{id}
		 * @param {string} id Partition identifier
		 * @return {void} 
		 */
		Api_partition_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/partition/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a Partition resource.
		 * Retrieves a Partition resource.
		 * Get api/partition/{id}
		 * @param {string} id Partition identifier
		 * @return {Partition_get} Partition resource
		 */
		Api_partition_id_get(id: string): Observable<Partition_get> {
			return this.http.get<Partition_get>(this.baseUri + 'api/partition/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the Partition resource.
		 * Replaces the Partition resource.
		 * Put api/partition/{id}
		 * @param {string} id Partition identifier
		 * @param {Partition_put} requestBody The updated Partition resource
		 * @return {Partition_get} Partition resource updated
		 */
		Api_partition_id_put(id: string, requestBody: Partition_put): Observable<Partition_get> {
			return this.http.put<Partition_get>(this.baseUri + 'api/partition/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of Ping resources.
		 * Retrieves the collection of Ping resources.
		 * Get api/ping
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<Ping_get>} Ping collection
		 */
		Api_ping_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, monitor: string | null | undefined, monitor_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<Ping_get>> {
			return this.http.get<Array<Ping_get>>(this.baseUri + 'api/ping?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&monitor=' + (monitor == null ? '' : encodeURIComponent(monitor)) + '&' + monitor_?.map(z => `monitor[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a Ping resource.
		 * Creates a Ping resource.
		 * Post api/ping
		 * @param {Ping_post} requestBody The new Ping resource
		 * @return {void} 
		 */
		Api_ping_post(requestBody: Ping_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/ping', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves the collection of PingMethodCode resources.
		 * Retrieves the collection of PingMethodCode resources.
		 * Get api/ping-method-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<PingMethodCode_get>} PingMethodCode collection
		 */
		Api_ping_method_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<PingMethodCode_get>> {
			return this.http.get<Array<PingMethodCode_get>>(this.baseUri + 'api/ping-method-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a PingMethodCode resource.
		 * Retrieves a PingMethodCode resource.
		 * Get api/ping-method-code/{id}
		 * @param {string} id PingMethodCode identifier
		 * @return {PingMethodCode_get} PingMethodCode resource
		 */
		Api_ping_method_code_id_get(id: string): Observable<PingMethodCode_get> {
			return this.http.get<PingMethodCode_get>(this.baseUri + 'api/ping-method-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves a Ping resource.
		 * Retrieves a Ping resource.
		 * Get api/ping/{id}
		 * @param {string} id Ping identifier
		 * @return {Ping_get} Ping resource
		 */
		Api_ping_id_get(id: string): Observable<Ping_get> {
			return this.http.get<Ping_get>(this.baseUri + 'api/ping/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of TeamInvitation resources.
		 * Retrieves the collection of TeamInvitation resources.
		 * Get api/team-invitation
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TeamInvitation_get>} TeamInvitation collection
		 */
		Api_team_invitation_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, inviteeEmail: string | null | undefined, inviteeEmail_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TeamInvitation_get>> {
			return this.http.get<Array<TeamInvitation_get>>(this.baseUri + 'api/team-invitation?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&inviteeEmail=' + (inviteeEmail == null ? '' : encodeURIComponent(inviteeEmail)) + '&' + inviteeEmail_?.map(z => `inviteeEmail[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TeamInvitation resource.
		 * Creates a TeamInvitation resource.
		 * Post api/team-invitation
		 * @param {TeamInvitation_post} requestBody The new TeamInvitation resource
		 * @return {void} 
		 */
		Api_team_invitation_post(requestBody: TeamInvitation_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/team-invitation', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TeamInvitation resource.
		 * Removes the TeamInvitation resource.
		 * Delete api/team-invitation/{id}
		 * @param {string} id TeamInvitation identifier
		 * @return {void} 
		 */
		Api_team_invitation_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/team-invitation/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TeamInvitation resource.
		 * Retrieves a TeamInvitation resource.
		 * Get api/team-invitation/{id}
		 * @param {string} id TeamInvitation identifier
		 * @return {TeamInvitation_get} TeamInvitation resource
		 */
		Api_team_invitation_id_get(id: string): Observable<TeamInvitation_get> {
			return this.http.get<TeamInvitation_get>(this.baseUri + 'api/team-invitation/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of TeamMember resources.
		 * Retrieves the collection of TeamMember resources.
		 * Get api/team-member
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TeamMember_get>} TeamMember collection
		 */
		Api_team_member_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, userAccount: string | null | undefined, userAccount_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TeamMember_get>> {
			return this.http.get<Array<TeamMember_get>>(this.baseUri + 'api/team-member?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&userAccount=' + (userAccount == null ? '' : encodeURIComponent(userAccount)) + '&' + userAccount_?.map(z => `userAccount[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves the collection of TeamMemberRoleCode resources.
		 * Retrieves the collection of TeamMemberRoleCode resources.
		 * Get api/team-member-role-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TeamMemberRoleCode_get>} TeamMemberRoleCode collection
		 */
		Api_team_member_role_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TeamMemberRoleCode_get>> {
			return this.http.get<Array<TeamMemberRoleCode_get>>(this.baseUri + 'api/team-member-role-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a TeamMemberRoleCode resource.
		 * Retrieves a TeamMemberRoleCode resource.
		 * Get api/team-member-role-code/{id}
		 * @param {string} id TeamMemberRoleCode identifier
		 * @return {TeamMemberRoleCode_get} TeamMemberRoleCode resource
		 */
		Api_team_member_role_code_id_get(id: string): Observable<TeamMemberRoleCode_get> {
			return this.http.get<TeamMemberRoleCode_get>(this.baseUri + 'api/team-member-role-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Removes the TeamMember resource.
		 * Removes the TeamMember resource.
		 * Delete api/team-member/{id}
		 * @param {string} id TeamMember identifier
		 * @return {void} 
		 */
		Api_team_member_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/team-member/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TeamMember resource.
		 * Retrieves a TeamMember resource.
		 * Get api/team-member/{id}
		 * @param {string} id TeamMember identifier
		 * @return {TeamMember_get} TeamMember resource
		 */
		Api_team_member_id_get(id: string): Observable<TeamMember_get> {
			return this.http.get<TeamMember_get>(this.baseUri + 'api/team-member/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TeamMember resource.
		 * Replaces the TeamMember resource.
		 * Put api/team-member/{id}
		 * @param {string} id TeamMember identifier
		 * @param {TeamMember_put} requestBody The updated TeamMember resource
		 * @return {TeamMember_get} TeamMember resource updated
		 */
		Api_team_member_id_put(id: string, requestBody: TeamMember_put): Observable<TeamMember_get> {
			return this.http.put<TeamMember_get>(this.baseUri + 'api/team-member/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TimezoneCode resources.
		 * Retrieves the collection of TimezoneCode resources.
		 * Get api/timezone-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TimezoneCode_get>} TimezoneCode collection
		 */
		Api_timezone_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TimezoneCode_get>> {
			return this.http.get<Array<TimezoneCode_get>>(this.baseUri + 'api/timezone-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a TimezoneCode resource.
		 * Retrieves a TimezoneCode resource.
		 * Get api/timezone-code/{id}
		 * @param {string} id TimezoneCode identifier
		 * @return {TimezoneCode_get} TimezoneCode resource
		 */
		Api_timezone_code_id_get(id: string): Observable<TimezoneCode_get> {
			return this.http.get<TimezoneCode_get>(this.baseUri + 'api/timezone-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves the collection of TransportAlerta resources.
		 * Retrieves the collection of TransportAlerta resources.
		 * Get api/transport-alerta
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportAlerta_get>} TransportAlerta collection
		 */
		Api_transport_alerta_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportAlerta_get>> {
			return this.http.get<Array<TransportAlerta_get>>(this.baseUri + 'api/transport-alerta?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportAlerta resource.
		 * Creates a TransportAlerta resource.
		 * Post api/transport-alerta
		 * @param {TransportAlerta_post} requestBody The new TransportAlerta resource
		 * @return {void} 
		 */
		Api_transport_alerta_post(requestBody: TransportAlerta_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-alerta', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportAlerta resource.
		 * Removes the TransportAlerta resource.
		 * Delete api/transport-alerta/{id}
		 * @param {string} id TransportAlerta identifier
		 * @return {void} 
		 */
		Api_transport_alerta_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-alerta/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportAlerta resource.
		 * Retrieves a TransportAlerta resource.
		 * Get api/transport-alerta/{id}
		 * @param {string} id TransportAlerta identifier
		 * @return {TransportAlerta_get} TransportAlerta resource
		 */
		Api_transport_alerta_id_get(id: string): Observable<TransportAlerta_get> {
			return this.http.get<TransportAlerta_get>(this.baseUri + 'api/transport-alerta/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportAlerta resource.
		 * Replaces the TransportAlerta resource.
		 * Put api/transport-alerta/{id}
		 * @param {string} id TransportAlerta identifier
		 * @param {TransportAlerta_put} requestBody The updated TransportAlerta resource
		 * @return {TransportAlerta_get} TransportAlerta resource updated
		 */
		Api_transport_alerta_id_put(id: string, requestBody: TransportAlerta_put): Observable<TransportAlerta_get> {
			return this.http.put<TransportAlerta_get>(this.baseUri + 'api/transport-alerta/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportAllMySms resources.
		 * Retrieves the collection of TransportAllMySms resources.
		 * Get api/transport-all-my-sms
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportAllMySms_get>} TransportAllMySms collection
		 */
		Api_transport_all_my_sms_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportAllMySms_get>> {
			return this.http.get<Array<TransportAllMySms_get>>(this.baseUri + 'api/transport-all-my-sms?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportAllMySms resource.
		 * Creates a TransportAllMySms resource.
		 * Post api/transport-all-my-sms
		 * @param {TransportAllMySms_post} requestBody The new TransportAllMySms resource
		 * @return {void} 
		 */
		Api_transport_all_my_sms_post(requestBody: TransportAllMySms_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-all-my-sms', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportAllMySms resource.
		 * Removes the TransportAllMySms resource.
		 * Delete api/transport-all-my-sms/{id}
		 * @param {string} id TransportAllMySms identifier
		 * @return {void} 
		 */
		Api_transport_all_my_sms_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-all-my-sms/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportAllMySms resource.
		 * Retrieves a TransportAllMySms resource.
		 * Get api/transport-all-my-sms/{id}
		 * @param {string} id TransportAllMySms identifier
		 * @return {TransportAllMySms_get} TransportAllMySms resource
		 */
		Api_transport_all_my_sms_id_get(id: string): Observable<TransportAllMySms_get> {
			return this.http.get<TransportAllMySms_get>(this.baseUri + 'api/transport-all-my-sms/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportAllMySms resource.
		 * Replaces the TransportAllMySms resource.
		 * Put api/transport-all-my-sms/{id}
		 * @param {string} id TransportAllMySms identifier
		 * @param {TransportAllMySms_put} requestBody The updated TransportAllMySms resource
		 * @return {TransportAllMySms_get} TransportAllMySms resource updated
		 */
		Api_transport_all_my_sms_id_put(id: string, requestBody: TransportAllMySms_put): Observable<TransportAllMySms_get> {
			return this.http.put<TransportAllMySms_get>(this.baseUri + 'api/transport-all-my-sms/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportAmazonSns resources.
		 * Retrieves the collection of TransportAmazonSns resources.
		 * Get api/transport-amazon-sns
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportAmazonSns_get>} TransportAmazonSns collection
		 */
		Api_transport_amazon_sns_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportAmazonSns_get>> {
			return this.http.get<Array<TransportAmazonSns_get>>(this.baseUri + 'api/transport-amazon-sns?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportAmazonSns resource.
		 * Creates a TransportAmazonSns resource.
		 * Post api/transport-amazon-sns
		 * @param {TransportAmazonSns_post} requestBody The new TransportAmazonSns resource
		 * @return {void} 
		 */
		Api_transport_amazon_sns_post(requestBody: TransportAmazonSns_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-amazon-sns', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportAmazonSns resource.
		 * Removes the TransportAmazonSns resource.
		 * Delete api/transport-amazon-sns/{id}
		 * @param {string} id TransportAmazonSns identifier
		 * @return {void} 
		 */
		Api_transport_amazon_sns_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-amazon-sns/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportAmazonSns resource.
		 * Retrieves a TransportAmazonSns resource.
		 * Get api/transport-amazon-sns/{id}
		 * @param {string} id TransportAmazonSns identifier
		 * @return {TransportAmazonSns_get} TransportAmazonSns resource
		 */
		Api_transport_amazon_sns_id_get(id: string): Observable<TransportAmazonSns_get> {
			return this.http.get<TransportAmazonSns_get>(this.baseUri + 'api/transport-amazon-sns/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportAmazonSns resource.
		 * Replaces the TransportAmazonSns resource.
		 * Put api/transport-amazon-sns/{id}
		 * @param {string} id TransportAmazonSns identifier
		 * @param {TransportAmazonSns_put} requestBody The updated TransportAmazonSns resource
		 * @return {TransportAmazonSns_get} TransportAmazonSns resource updated
		 */
		Api_transport_amazon_sns_id_put(id: string, requestBody: TransportAmazonSns_put): Observable<TransportAmazonSns_get> {
			return this.http.put<TransportAmazonSns_get>(this.baseUri + 'api/transport-amazon-sns/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportBandwidth resources.
		 * Retrieves the collection of TransportBandwidth resources.
		 * Get api/transport-bandwidth
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportBandwidth_get>} TransportBandwidth collection
		 */
		Api_transport_bandwidth_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportBandwidth_get>> {
			return this.http.get<Array<TransportBandwidth_get>>(this.baseUri + 'api/transport-bandwidth?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportBandwidth resource.
		 * Creates a TransportBandwidth resource.
		 * Post api/transport-bandwidth
		 * @param {TransportBandwidth_post} requestBody The new TransportBandwidth resource
		 * @return {void} 
		 */
		Api_transport_bandwidth_post(requestBody: TransportBandwidth_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-bandwidth', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportBandwidth resource.
		 * Removes the TransportBandwidth resource.
		 * Delete api/transport-bandwidth/{id}
		 * @param {string} id TransportBandwidth identifier
		 * @return {void} 
		 */
		Api_transport_bandwidth_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-bandwidth/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportBandwidth resource.
		 * Retrieves a TransportBandwidth resource.
		 * Get api/transport-bandwidth/{id}
		 * @param {string} id TransportBandwidth identifier
		 * @return {TransportBandwidth_get} TransportBandwidth resource
		 */
		Api_transport_bandwidth_id_get(id: string): Observable<TransportBandwidth_get> {
			return this.http.get<TransportBandwidth_get>(this.baseUri + 'api/transport-bandwidth/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportBandwidth resource.
		 * Replaces the TransportBandwidth resource.
		 * Put api/transport-bandwidth/{id}
		 * @param {string} id TransportBandwidth identifier
		 * @param {TransportBandwidth_put} requestBody The updated TransportBandwidth resource
		 * @return {TransportBandwidth_get} TransportBandwidth resource updated
		 */
		Api_transport_bandwidth_id_put(id: string, requestBody: TransportBandwidth_put): Observable<TransportBandwidth_get> {
			return this.http.put<TransportBandwidth_get>(this.baseUri + 'api/transport-bandwidth/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportChatwork resources.
		 * Retrieves the collection of TransportChatwork resources.
		 * Get api/transport-chatwork
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportChatwork_get>} TransportChatwork collection
		 */
		Api_transport_chatwork_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportChatwork_get>> {
			return this.http.get<Array<TransportChatwork_get>>(this.baseUri + 'api/transport-chatwork?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportChatwork resource.
		 * Creates a TransportChatwork resource.
		 * Post api/transport-chatwork
		 * @param {TransportChatwork_post} requestBody The new TransportChatwork resource
		 * @return {void} 
		 */
		Api_transport_chatwork_post(requestBody: TransportChatwork_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-chatwork', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportChatwork resource.
		 * Removes the TransportChatwork resource.
		 * Delete api/transport-chatwork/{id}
		 * @param {string} id TransportChatwork identifier
		 * @return {void} 
		 */
		Api_transport_chatwork_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-chatwork/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportChatwork resource.
		 * Retrieves a TransportChatwork resource.
		 * Get api/transport-chatwork/{id}
		 * @param {string} id TransportChatwork identifier
		 * @return {TransportChatwork_get} TransportChatwork resource
		 */
		Api_transport_chatwork_id_get(id: string): Observable<TransportChatwork_get> {
			return this.http.get<TransportChatwork_get>(this.baseUri + 'api/transport-chatwork/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportChatwork resource.
		 * Replaces the TransportChatwork resource.
		 * Put api/transport-chatwork/{id}
		 * @param {string} id TransportChatwork identifier
		 * @param {TransportChatwork_put} requestBody The updated TransportChatwork resource
		 * @return {TransportChatwork_get} TransportChatwork resource updated
		 */
		Api_transport_chatwork_id_put(id: string, requestBody: TransportChatwork_put): Observable<TransportChatwork_get> {
			return this.http.put<TransportChatwork_get>(this.baseUri + 'api/transport-chatwork/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportClickSend resources.
		 * Retrieves the collection of TransportClickSend resources.
		 * Get api/transport-click-send
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportClickSend_get>} TransportClickSend collection
		 */
		Api_transport_click_send_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportClickSend_get>> {
			return this.http.get<Array<TransportClickSend_get>>(this.baseUri + 'api/transport-click-send?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportClickSend resource.
		 * Creates a TransportClickSend resource.
		 * Post api/transport-click-send
		 * @param {TransportClickSend_post} requestBody The new TransportClickSend resource
		 * @return {void} 
		 */
		Api_transport_click_send_post(requestBody: TransportClickSend_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-click-send', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportClickSend resource.
		 * Removes the TransportClickSend resource.
		 * Delete api/transport-click-send/{id}
		 * @param {string} id TransportClickSend identifier
		 * @return {void} 
		 */
		Api_transport_click_send_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-click-send/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportClickSend resource.
		 * Retrieves a TransportClickSend resource.
		 * Get api/transport-click-send/{id}
		 * @param {string} id TransportClickSend identifier
		 * @return {TransportClickSend_get} TransportClickSend resource
		 */
		Api_transport_click_send_id_get(id: string): Observable<TransportClickSend_get> {
			return this.http.get<TransportClickSend_get>(this.baseUri + 'api/transport-click-send/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportClickSend resource.
		 * Replaces the TransportClickSend resource.
		 * Put api/transport-click-send/{id}
		 * @param {string} id TransportClickSend identifier
		 * @param {TransportClickSend_put} requestBody The updated TransportClickSend resource
		 * @return {TransportClickSend_get} TransportClickSend resource updated
		 */
		Api_transport_click_send_id_put(id: string, requestBody: TransportClickSend_put): Observable<TransportClickSend_get> {
			return this.http.put<TransportClickSend_get>(this.baseUri + 'api/transport-click-send/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportClickatell resources.
		 * Retrieves the collection of TransportClickatell resources.
		 * Get api/transport-clickatell
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportClickatell_get>} TransportClickatell collection
		 */
		Api_transport_clickatell_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportClickatell_get>> {
			return this.http.get<Array<TransportClickatell_get>>(this.baseUri + 'api/transport-clickatell?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportClickatell resource.
		 * Creates a TransportClickatell resource.
		 * Post api/transport-clickatell
		 * @param {TransportClickatell_post} requestBody The new TransportClickatell resource
		 * @return {void} 
		 */
		Api_transport_clickatell_post(requestBody: TransportClickatell_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-clickatell', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportClickatell resource.
		 * Removes the TransportClickatell resource.
		 * Delete api/transport-clickatell/{id}
		 * @param {string} id TransportClickatell identifier
		 * @return {void} 
		 */
		Api_transport_clickatell_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-clickatell/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportClickatell resource.
		 * Retrieves a TransportClickatell resource.
		 * Get api/transport-clickatell/{id}
		 * @param {string} id TransportClickatell identifier
		 * @return {TransportClickatell_get} TransportClickatell resource
		 */
		Api_transport_clickatell_id_get(id: string): Observable<TransportClickatell_get> {
			return this.http.get<TransportClickatell_get>(this.baseUri + 'api/transport-clickatell/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportClickatell resource.
		 * Replaces the TransportClickatell resource.
		 * Put api/transport-clickatell/{id}
		 * @param {string} id TransportClickatell identifier
		 * @param {TransportClickatell_put} requestBody The updated TransportClickatell resource
		 * @return {TransportClickatell_get} TransportClickatell resource updated
		 */
		Api_transport_clickatell_id_put(id: string, requestBody: TransportClickatell_put): Observable<TransportClickatell_get> {
			return this.http.put<TransportClickatell_get>(this.baseUri + 'api/transport-clickatell/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportContactEveryone resources.
		 * Retrieves the collection of TransportContactEveryone resources.
		 * Get api/transport-contact-everyone
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportContactEveryone_get>} TransportContactEveryone collection
		 */
		Api_transport_contact_everyone_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportContactEveryone_get>> {
			return this.http.get<Array<TransportContactEveryone_get>>(this.baseUri + 'api/transport-contact-everyone?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportContactEveryone resource.
		 * Creates a TransportContactEveryone resource.
		 * Post api/transport-contact-everyone
		 * @param {TransportContactEveryone_post} requestBody The new TransportContactEveryone resource
		 * @return {void} 
		 */
		Api_transport_contact_everyone_post(requestBody: TransportContactEveryone_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-contact-everyone', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportContactEveryone resource.
		 * Removes the TransportContactEveryone resource.
		 * Delete api/transport-contact-everyone/{id}
		 * @param {string} id TransportContactEveryone identifier
		 * @return {void} 
		 */
		Api_transport_contact_everyone_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-contact-everyone/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportContactEveryone resource.
		 * Retrieves a TransportContactEveryone resource.
		 * Get api/transport-contact-everyone/{id}
		 * @param {string} id TransportContactEveryone identifier
		 * @return {TransportContactEveryone_get} TransportContactEveryone resource
		 */
		Api_transport_contact_everyone_id_get(id: string): Observable<TransportContactEveryone_get> {
			return this.http.get<TransportContactEveryone_get>(this.baseUri + 'api/transport-contact-everyone/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportContactEveryone resource.
		 * Replaces the TransportContactEveryone resource.
		 * Put api/transport-contact-everyone/{id}
		 * @param {string} id TransportContactEveryone identifier
		 * @param {TransportContactEveryone_put} requestBody The updated TransportContactEveryone resource
		 * @return {TransportContactEveryone_get} TransportContactEveryone resource updated
		 */
		Api_transport_contact_everyone_id_put(id: string, requestBody: TransportContactEveryone_put): Observable<TransportContactEveryone_get> {
			return this.http.put<TransportContactEveryone_get>(this.baseUri + 'api/transport-contact-everyone/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportDiscord resources.
		 * Retrieves the collection of TransportDiscord resources.
		 * Get api/transport-discord
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportDiscord_get>} TransportDiscord collection
		 */
		Api_transport_discord_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportDiscord_get>> {
			return this.http.get<Array<TransportDiscord_get>>(this.baseUri + 'api/transport-discord?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportDiscord resource.
		 * Creates a TransportDiscord resource.
		 * Post api/transport-discord
		 * @param {TransportDiscord_post} requestBody The new TransportDiscord resource
		 * @return {void} 
		 */
		Api_transport_discord_post(requestBody: TransportDiscord_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-discord', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportDiscord resource.
		 * Removes the TransportDiscord resource.
		 * Delete api/transport-discord/{id}
		 * @param {string} id TransportDiscord identifier
		 * @return {void} 
		 */
		Api_transport_discord_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-discord/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportDiscord resource.
		 * Retrieves a TransportDiscord resource.
		 * Get api/transport-discord/{id}
		 * @param {string} id TransportDiscord identifier
		 * @return {TransportDiscord_get} TransportDiscord resource
		 */
		Api_transport_discord_id_get(id: string): Observable<TransportDiscord_get> {
			return this.http.get<TransportDiscord_get>(this.baseUri + 'api/transport-discord/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportDiscord resource.
		 * Replaces the TransportDiscord resource.
		 * Put api/transport-discord/{id}
		 * @param {string} id TransportDiscord identifier
		 * @param {TransportDiscord_put} requestBody The updated TransportDiscord resource
		 * @return {TransportDiscord_get} TransportDiscord resource updated
		 */
		Api_transport_discord_id_put(id: string, requestBody: TransportDiscord_put): Observable<TransportDiscord_get> {
			return this.http.put<TransportDiscord_get>(this.baseUri + 'api/transport-discord/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportEmail resources.
		 * Retrieves the collection of TransportEmail resources.
		 * Get api/transport-email
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportEmail_get>} TransportEmail collection
		 */
		Api_transport_email_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportEmail_get>> {
			return this.http.get<Array<TransportEmail_get>>(this.baseUri + 'api/transport-email?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportEmail resource.
		 * Creates a TransportEmail resource.
		 * Post api/transport-email
		 * @param {TransportEmail_post} requestBody The new TransportEmail resource
		 * @return {void} 
		 */
		Api_transport_email_post(requestBody: TransportEmail_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-email', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportEmail resource.
		 * Removes the TransportEmail resource.
		 * Delete api/transport-email/{id}
		 * @param {string} id TransportEmail identifier
		 * @return {void} 
		 */
		Api_transport_email_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-email/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportEmail resource.
		 * Retrieves a TransportEmail resource.
		 * Get api/transport-email/{id}
		 * @param {string} id TransportEmail identifier
		 * @return {TransportEmail_get} TransportEmail resource
		 */
		Api_transport_email_id_get(id: string): Observable<TransportEmail_get> {
			return this.http.get<TransportEmail_get>(this.baseUri + 'api/transport-email/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportEmail resource.
		 * Replaces the TransportEmail resource.
		 * Put api/transport-email/{id}
		 * @param {string} id TransportEmail identifier
		 * @param {TransportEmail_put} requestBody The updated TransportEmail resource
		 * @return {TransportEmail_get} TransportEmail resource updated
		 */
		Api_transport_email_id_put(id: string, requestBody: TransportEmail_put): Observable<TransportEmail_get> {
			return this.http.put<TransportEmail_get>(this.baseUri + 'api/transport-email/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportEngagespot resources.
		 * Retrieves the collection of TransportEngagespot resources.
		 * Get api/transport-engagespot
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportEngagespot_get>} TransportEngagespot collection
		 */
		Api_transport_engagespot_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportEngagespot_get>> {
			return this.http.get<Array<TransportEngagespot_get>>(this.baseUri + 'api/transport-engagespot?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportEngagespot resource.
		 * Creates a TransportEngagespot resource.
		 * Post api/transport-engagespot
		 * @param {TransportEngagespot_post} requestBody The new TransportEngagespot resource
		 * @return {void} 
		 */
		Api_transport_engagespot_post(requestBody: TransportEngagespot_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-engagespot', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportEngagespot resource.
		 * Removes the TransportEngagespot resource.
		 * Delete api/transport-engagespot/{id}
		 * @param {string} id TransportEngagespot identifier
		 * @return {void} 
		 */
		Api_transport_engagespot_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-engagespot/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportEngagespot resource.
		 * Retrieves a TransportEngagespot resource.
		 * Get api/transport-engagespot/{id}
		 * @param {string} id TransportEngagespot identifier
		 * @return {TransportEngagespot_get} TransportEngagespot resource
		 */
		Api_transport_engagespot_id_get(id: string): Observable<TransportEngagespot_get> {
			return this.http.get<TransportEngagespot_get>(this.baseUri + 'api/transport-engagespot/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportEngagespot resource.
		 * Replaces the TransportEngagespot resource.
		 * Put api/transport-engagespot/{id}
		 * @param {string} id TransportEngagespot identifier
		 * @param {TransportEngagespot_put} requestBody The updated TransportEngagespot resource
		 * @return {TransportEngagespot_get} TransportEngagespot resource updated
		 */
		Api_transport_engagespot_id_put(id: string, requestBody: TransportEngagespot_put): Observable<TransportEngagespot_get> {
			return this.http.put<TransportEngagespot_get>(this.baseUri + 'api/transport-engagespot/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportEsendex resources.
		 * Retrieves the collection of TransportEsendex resources.
		 * Get api/transport-esendex
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportEsendex_get>} TransportEsendex collection
		 */
		Api_transport_esendex_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportEsendex_get>> {
			return this.http.get<Array<TransportEsendex_get>>(this.baseUri + 'api/transport-esendex?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportEsendex resource.
		 * Creates a TransportEsendex resource.
		 * Post api/transport-esendex
		 * @param {TransportEsendex_post} requestBody The new TransportEsendex resource
		 * @return {void} 
		 */
		Api_transport_esendex_post(requestBody: TransportEsendex_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-esendex', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportEsendex resource.
		 * Removes the TransportEsendex resource.
		 * Delete api/transport-esendex/{id}
		 * @param {string} id TransportEsendex identifier
		 * @return {void} 
		 */
		Api_transport_esendex_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-esendex/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportEsendex resource.
		 * Retrieves a TransportEsendex resource.
		 * Get api/transport-esendex/{id}
		 * @param {string} id TransportEsendex identifier
		 * @return {TransportEsendex_get} TransportEsendex resource
		 */
		Api_transport_esendex_id_get(id: string): Observable<TransportEsendex_get> {
			return this.http.get<TransportEsendex_get>(this.baseUri + 'api/transport-esendex/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportEsendex resource.
		 * Replaces the TransportEsendex resource.
		 * Put api/transport-esendex/{id}
		 * @param {string} id TransportEsendex identifier
		 * @param {TransportEsendex_put} requestBody The updated TransportEsendex resource
		 * @return {TransportEsendex_get} TransportEsendex resource updated
		 */
		Api_transport_esendex_id_put(id: string, requestBody: TransportEsendex_put): Observable<TransportEsendex_get> {
			return this.http.put<TransportEsendex_get>(this.baseUri + 'api/transport-esendex/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportExpo resources.
		 * Retrieves the collection of TransportExpo resources.
		 * Get api/transport-expo
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportExpo_get>} TransportExpo collection
		 */
		Api_transport_expo_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportExpo_get>> {
			return this.http.get<Array<TransportExpo_get>>(this.baseUri + 'api/transport-expo?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportExpo resource.
		 * Creates a TransportExpo resource.
		 * Post api/transport-expo
		 * @param {TransportExpo_post} requestBody The new TransportExpo resource
		 * @return {void} 
		 */
		Api_transport_expo_post(requestBody: TransportExpo_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-expo', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportExpo resource.
		 * Removes the TransportExpo resource.
		 * Delete api/transport-expo/{id}
		 * @param {string} id TransportExpo identifier
		 * @return {void} 
		 */
		Api_transport_expo_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-expo/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportExpo resource.
		 * Retrieves a TransportExpo resource.
		 * Get api/transport-expo/{id}
		 * @param {string} id TransportExpo identifier
		 * @return {TransportExpo_get} TransportExpo resource
		 */
		Api_transport_expo_id_get(id: string): Observable<TransportExpo_get> {
			return this.http.get<TransportExpo_get>(this.baseUri + 'api/transport-expo/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportExpo resource.
		 * Replaces the TransportExpo resource.
		 * Put api/transport-expo/{id}
		 * @param {string} id TransportExpo identifier
		 * @param {TransportExpo_put} requestBody The updated TransportExpo resource
		 * @return {TransportExpo_get} TransportExpo resource updated
		 */
		Api_transport_expo_id_put(id: string, requestBody: TransportExpo_put): Observable<TransportExpo_get> {
			return this.http.put<TransportExpo_get>(this.baseUri + 'api/transport-expo/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportFirebase resources.
		 * Retrieves the collection of TransportFirebase resources.
		 * Get api/transport-firebase
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportFirebase_get>} TransportFirebase collection
		 */
		Api_transport_firebase_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportFirebase_get>> {
			return this.http.get<Array<TransportFirebase_get>>(this.baseUri + 'api/transport-firebase?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportFirebase resource.
		 * Creates a TransportFirebase resource.
		 * Post api/transport-firebase
		 * @param {TransportFirebase_post} requestBody The new TransportFirebase resource
		 * @return {void} 
		 */
		Api_transport_firebase_post(requestBody: TransportFirebase_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-firebase', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportFirebase resource.
		 * Removes the TransportFirebase resource.
		 * Delete api/transport-firebase/{id}
		 * @param {string} id TransportFirebase identifier
		 * @return {void} 
		 */
		Api_transport_firebase_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-firebase/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportFirebase resource.
		 * Retrieves a TransportFirebase resource.
		 * Get api/transport-firebase/{id}
		 * @param {string} id TransportFirebase identifier
		 * @return {TransportFirebase_get} TransportFirebase resource
		 */
		Api_transport_firebase_id_get(id: string): Observable<TransportFirebase_get> {
			return this.http.get<TransportFirebase_get>(this.baseUri + 'api/transport-firebase/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportFirebase resource.
		 * Replaces the TransportFirebase resource.
		 * Put api/transport-firebase/{id}
		 * @param {string} id TransportFirebase identifier
		 * @param {TransportFirebase_put} requestBody The updated TransportFirebase resource
		 * @return {TransportFirebase_get} TransportFirebase resource updated
		 */
		Api_transport_firebase_id_put(id: string, requestBody: TransportFirebase_put): Observable<TransportFirebase_get> {
			return this.http.put<TransportFirebase_get>(this.baseUri + 'api/transport-firebase/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportFortySixElks resources.
		 * Retrieves the collection of TransportFortySixElks resources.
		 * Get api/transport-forty-six-elks
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportFortySixElks_get>} TransportFortySixElks collection
		 */
		Api_transport_forty_six_elks_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportFortySixElks_get>> {
			return this.http.get<Array<TransportFortySixElks_get>>(this.baseUri + 'api/transport-forty-six-elks?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportFortySixElks resource.
		 * Creates a TransportFortySixElks resource.
		 * Post api/transport-forty-six-elks
		 * @param {TransportFortySixElks_post} requestBody The new TransportFortySixElks resource
		 * @return {void} 
		 */
		Api_transport_forty_six_elks_post(requestBody: TransportFortySixElks_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-forty-six-elks', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportFortySixElks resource.
		 * Removes the TransportFortySixElks resource.
		 * Delete api/transport-forty-six-elks/{id}
		 * @param {string} id TransportFortySixElks identifier
		 * @return {void} 
		 */
		Api_transport_forty_six_elks_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-forty-six-elks/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportFortySixElks resource.
		 * Retrieves a TransportFortySixElks resource.
		 * Get api/transport-forty-six-elks/{id}
		 * @param {string} id TransportFortySixElks identifier
		 * @return {TransportFortySixElks_get} TransportFortySixElks resource
		 */
		Api_transport_forty_six_elks_id_get(id: string): Observable<TransportFortySixElks_get> {
			return this.http.get<TransportFortySixElks_get>(this.baseUri + 'api/transport-forty-six-elks/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportFortySixElks resource.
		 * Replaces the TransportFortySixElks resource.
		 * Put api/transport-forty-six-elks/{id}
		 * @param {string} id TransportFortySixElks identifier
		 * @param {TransportFortySixElks_put} requestBody The updated TransportFortySixElks resource
		 * @return {TransportFortySixElks_get} TransportFortySixElks resource updated
		 */
		Api_transport_forty_six_elks_id_put(id: string, requestBody: TransportFortySixElks_put): Observable<TransportFortySixElks_get> {
			return this.http.put<TransportFortySixElks_get>(this.baseUri + 'api/transport-forty-six-elks/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportFreeMobile resources.
		 * Retrieves the collection of TransportFreeMobile resources.
		 * Get api/transport-free-mobile
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportFreeMobile_get>} TransportFreeMobile collection
		 */
		Api_transport_free_mobile_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportFreeMobile_get>> {
			return this.http.get<Array<TransportFreeMobile_get>>(this.baseUri + 'api/transport-free-mobile?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportFreeMobile resource.
		 * Creates a TransportFreeMobile resource.
		 * Post api/transport-free-mobile
		 * @param {TransportFreeMobile_post} requestBody The new TransportFreeMobile resource
		 * @return {void} 
		 */
		Api_transport_free_mobile_post(requestBody: TransportFreeMobile_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-free-mobile', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportFreeMobile resource.
		 * Removes the TransportFreeMobile resource.
		 * Delete api/transport-free-mobile/{id}
		 * @param {string} id TransportFreeMobile identifier
		 * @return {void} 
		 */
		Api_transport_free_mobile_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-free-mobile/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportFreeMobile resource.
		 * Retrieves a TransportFreeMobile resource.
		 * Get api/transport-free-mobile/{id}
		 * @param {string} id TransportFreeMobile identifier
		 * @return {TransportFreeMobile_get} TransportFreeMobile resource
		 */
		Api_transport_free_mobile_id_get(id: string): Observable<TransportFreeMobile_get> {
			return this.http.get<TransportFreeMobile_get>(this.baseUri + 'api/transport-free-mobile/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportFreeMobile resource.
		 * Replaces the TransportFreeMobile resource.
		 * Put api/transport-free-mobile/{id}
		 * @param {string} id TransportFreeMobile identifier
		 * @param {TransportFreeMobile_put} requestBody The updated TransportFreeMobile resource
		 * @return {TransportFreeMobile_get} TransportFreeMobile resource updated
		 */
		Api_transport_free_mobile_id_put(id: string, requestBody: TransportFreeMobile_put): Observable<TransportFreeMobile_get> {
			return this.http.put<TransportFreeMobile_get>(this.baseUri + 'api/transport-free-mobile/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportFreshdesk resources.
		 * Retrieves the collection of TransportFreshdesk resources.
		 * Get api/transport-freshdesk
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportFreshdesk_get>} TransportFreshdesk collection
		 */
		Api_transport_freshdesk_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportFreshdesk_get>> {
			return this.http.get<Array<TransportFreshdesk_get>>(this.baseUri + 'api/transport-freshdesk?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportFreshdesk resource.
		 * Creates a TransportFreshdesk resource.
		 * Post api/transport-freshdesk
		 * @param {TransportFreshdesk_post} requestBody The new TransportFreshdesk resource
		 * @return {void} 
		 */
		Api_transport_freshdesk_post(requestBody: TransportFreshdesk_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-freshdesk', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportFreshdesk resource.
		 * Removes the TransportFreshdesk resource.
		 * Delete api/transport-freshdesk/{id}
		 * @param {string} id TransportFreshdesk identifier
		 * @return {void} 
		 */
		Api_transport_freshdesk_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-freshdesk/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportFreshdesk resource.
		 * Retrieves a TransportFreshdesk resource.
		 * Get api/transport-freshdesk/{id}
		 * @param {string} id TransportFreshdesk identifier
		 * @return {TransportFreshdesk_get} TransportFreshdesk resource
		 */
		Api_transport_freshdesk_id_get(id: string): Observable<TransportFreshdesk_get> {
			return this.http.get<TransportFreshdesk_get>(this.baseUri + 'api/transport-freshdesk/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportFreshdesk resource.
		 * Replaces the TransportFreshdesk resource.
		 * Put api/transport-freshdesk/{id}
		 * @param {string} id TransportFreshdesk identifier
		 * @param {TransportFreshdesk_put} requestBody The updated TransportFreshdesk resource
		 * @return {TransportFreshdesk_get} TransportFreshdesk resource updated
		 */
		Api_transport_freshdesk_id_put(id: string, requestBody: TransportFreshdesk_put): Observable<TransportFreshdesk_get> {
			return this.http.put<TransportFreshdesk_get>(this.baseUri + 'api/transport-freshdesk/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportGatewayApi resources.
		 * Retrieves the collection of TransportGatewayApi resources.
		 * Get api/transport-gateway-api
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportGatewayApi_get>} TransportGatewayApi collection
		 */
		Api_transport_gateway_api_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportGatewayApi_get>> {
			return this.http.get<Array<TransportGatewayApi_get>>(this.baseUri + 'api/transport-gateway-api?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportGatewayApi resource.
		 * Creates a TransportGatewayApi resource.
		 * Post api/transport-gateway-api
		 * @param {TransportGatewayApi_post} requestBody The new TransportGatewayApi resource
		 * @return {void} 
		 */
		Api_transport_gateway_api_post(requestBody: TransportGatewayApi_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-gateway-api', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportGatewayApi resource.
		 * Removes the TransportGatewayApi resource.
		 * Delete api/transport-gateway-api/{id}
		 * @param {string} id TransportGatewayApi identifier
		 * @return {void} 
		 */
		Api_transport_gateway_api_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-gateway-api/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportGatewayApi resource.
		 * Retrieves a TransportGatewayApi resource.
		 * Get api/transport-gateway-api/{id}
		 * @param {string} id TransportGatewayApi identifier
		 * @return {TransportGatewayApi_get} TransportGatewayApi resource
		 */
		Api_transport_gateway_api_id_get(id: string): Observable<TransportGatewayApi_get> {
			return this.http.get<TransportGatewayApi_get>(this.baseUri + 'api/transport-gateway-api/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportGatewayApi resource.
		 * Replaces the TransportGatewayApi resource.
		 * Put api/transport-gateway-api/{id}
		 * @param {string} id TransportGatewayApi identifier
		 * @param {TransportGatewayApi_put} requestBody The updated TransportGatewayApi resource
		 * @return {TransportGatewayApi_get} TransportGatewayApi resource updated
		 */
		Api_transport_gateway_api_id_put(id: string, requestBody: TransportGatewayApi_put): Observable<TransportGatewayApi_get> {
			return this.http.put<TransportGatewayApi_get>(this.baseUri + 'api/transport-gateway-api/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportGitter resources.
		 * Retrieves the collection of TransportGitter resources.
		 * Get api/transport-gitter
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportGitter_get>} TransportGitter collection
		 */
		Api_transport_gitter_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportGitter_get>> {
			return this.http.get<Array<TransportGitter_get>>(this.baseUri + 'api/transport-gitter?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportGitter resource.
		 * Creates a TransportGitter resource.
		 * Post api/transport-gitter
		 * @param {TransportGitter_post} requestBody The new TransportGitter resource
		 * @return {void} 
		 */
		Api_transport_gitter_post(requestBody: TransportGitter_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-gitter', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportGitter resource.
		 * Removes the TransportGitter resource.
		 * Delete api/transport-gitter/{id}
		 * @param {string} id TransportGitter identifier
		 * @return {void} 
		 */
		Api_transport_gitter_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-gitter/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportGitter resource.
		 * Retrieves a TransportGitter resource.
		 * Get api/transport-gitter/{id}
		 * @param {string} id TransportGitter identifier
		 * @return {TransportGitter_get} TransportGitter resource
		 */
		Api_transport_gitter_id_get(id: string): Observable<TransportGitter_get> {
			return this.http.get<TransportGitter_get>(this.baseUri + 'api/transport-gitter/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportGitter resource.
		 * Replaces the TransportGitter resource.
		 * Put api/transport-gitter/{id}
		 * @param {string} id TransportGitter identifier
		 * @param {TransportGitter_put} requestBody The updated TransportGitter resource
		 * @return {TransportGitter_get} TransportGitter resource updated
		 */
		Api_transport_gitter_id_put(id: string, requestBody: TransportGitter_put): Observable<TransportGitter_get> {
			return this.http.put<TransportGitter_get>(this.baseUri + 'api/transport-gitter/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportGoogleChat resources.
		 * Retrieves the collection of TransportGoogleChat resources.
		 * Get api/transport-google-chat
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportGoogleChat_get>} TransportGoogleChat collection
		 */
		Api_transport_google_chat_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportGoogleChat_get>> {
			return this.http.get<Array<TransportGoogleChat_get>>(this.baseUri + 'api/transport-google-chat?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportGoogleChat resource.
		 * Creates a TransportGoogleChat resource.
		 * Post api/transport-google-chat
		 * @param {TransportGoogleChat_post} requestBody The new TransportGoogleChat resource
		 * @return {void} 
		 */
		Api_transport_google_chat_post(requestBody: TransportGoogleChat_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-google-chat', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportGoogleChat resource.
		 * Removes the TransportGoogleChat resource.
		 * Delete api/transport-google-chat/{id}
		 * @param {string} id TransportGoogleChat identifier
		 * @return {void} 
		 */
		Api_transport_google_chat_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-google-chat/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportGoogleChat resource.
		 * Retrieves a TransportGoogleChat resource.
		 * Get api/transport-google-chat/{id}
		 * @param {string} id TransportGoogleChat identifier
		 * @return {TransportGoogleChat_get} TransportGoogleChat resource
		 */
		Api_transport_google_chat_id_get(id: string): Observable<TransportGoogleChat_get> {
			return this.http.get<TransportGoogleChat_get>(this.baseUri + 'api/transport-google-chat/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportGoogleChat resource.
		 * Replaces the TransportGoogleChat resource.
		 * Put api/transport-google-chat/{id}
		 * @param {string} id TransportGoogleChat identifier
		 * @param {TransportGoogleChat_put} requestBody The updated TransportGoogleChat resource
		 * @return {TransportGoogleChat_get} TransportGoogleChat resource updated
		 */
		Api_transport_google_chat_id_put(id: string, requestBody: TransportGoogleChat_put): Observable<TransportGoogleChat_get> {
			return this.http.put<TransportGoogleChat_get>(this.baseUri + 'api/transport-google-chat/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportGotify resources.
		 * Retrieves the collection of TransportGotify resources.
		 * Get api/transport-gotify
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportGotify_get>} TransportGotify collection
		 */
		Api_transport_gotify_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportGotify_get>> {
			return this.http.get<Array<TransportGotify_get>>(this.baseUri + 'api/transport-gotify?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportGotify resource.
		 * Creates a TransportGotify resource.
		 * Post api/transport-gotify
		 * @param {TransportGotify_post} requestBody The new TransportGotify resource
		 * @return {void} 
		 */
		Api_transport_gotify_post(requestBody: TransportGotify_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-gotify', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportGotify resource.
		 * Removes the TransportGotify resource.
		 * Delete api/transport-gotify/{id}
		 * @param {string} id TransportGotify identifier
		 * @return {void} 
		 */
		Api_transport_gotify_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-gotify/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportGotify resource.
		 * Retrieves a TransportGotify resource.
		 * Get api/transport-gotify/{id}
		 * @param {string} id TransportGotify identifier
		 * @return {TransportGotify_get} TransportGotify resource
		 */
		Api_transport_gotify_id_get(id: string): Observable<TransportGotify_get> {
			return this.http.get<TransportGotify_get>(this.baseUri + 'api/transport-gotify/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportGotify resource.
		 * Replaces the TransportGotify resource.
		 * Put api/transport-gotify/{id}
		 * @param {string} id TransportGotify identifier
		 * @param {TransportGotify_put} requestBody The updated TransportGotify resource
		 * @return {TransportGotify_get} TransportGotify resource updated
		 */
		Api_transport_gotify_id_put(id: string, requestBody: TransportGotify_put): Observable<TransportGotify_get> {
			return this.http.put<TransportGotify_get>(this.baseUri + 'api/transport-gotify/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportHelpScout resources.
		 * Retrieves the collection of TransportHelpScout resources.
		 * Get api/transport-help-scout
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportHelpScout_get>} TransportHelpScout collection
		 */
		Api_transport_help_scout_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportHelpScout_get>> {
			return this.http.get<Array<TransportHelpScout_get>>(this.baseUri + 'api/transport-help-scout?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportHelpScout resource.
		 * Creates a TransportHelpScout resource.
		 * Post api/transport-help-scout
		 * @param {TransportHelpScout_post} requestBody The new TransportHelpScout resource
		 * @return {void} 
		 */
		Api_transport_help_scout_post(requestBody: TransportHelpScout_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-help-scout', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportHelpScout resource.
		 * Removes the TransportHelpScout resource.
		 * Delete api/transport-help-scout/{id}
		 * @param {string} id TransportHelpScout identifier
		 * @return {void} 
		 */
		Api_transport_help_scout_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-help-scout/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportHelpScout resource.
		 * Retrieves a TransportHelpScout resource.
		 * Get api/transport-help-scout/{id}
		 * @param {string} id TransportHelpScout identifier
		 * @return {TransportHelpScout_get} TransportHelpScout resource
		 */
		Api_transport_help_scout_id_get(id: string): Observable<TransportHelpScout_get> {
			return this.http.get<TransportHelpScout_get>(this.baseUri + 'api/transport-help-scout/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportHelpScout resource.
		 * Replaces the TransportHelpScout resource.
		 * Put api/transport-help-scout/{id}
		 * @param {string} id TransportHelpScout identifier
		 * @param {TransportHelpScout_put} requestBody The updated TransportHelpScout resource
		 * @return {TransportHelpScout_get} TransportHelpScout resource updated
		 */
		Api_transport_help_scout_id_put(id: string, requestBody: TransportHelpScout_put): Observable<TransportHelpScout_get> {
			return this.http.put<TransportHelpScout_get>(this.baseUri + 'api/transport-help-scout/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportInfobip resources.
		 * Retrieves the collection of TransportInfobip resources.
		 * Get api/transport-infobip
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportInfobip_get>} TransportInfobip collection
		 */
		Api_transport_infobip_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportInfobip_get>> {
			return this.http.get<Array<TransportInfobip_get>>(this.baseUri + 'api/transport-infobip?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportInfobip resource.
		 * Creates a TransportInfobip resource.
		 * Post api/transport-infobip
		 * @param {TransportInfobip_post} requestBody The new TransportInfobip resource
		 * @return {void} 
		 */
		Api_transport_infobip_post(requestBody: TransportInfobip_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-infobip', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportInfobip resource.
		 * Removes the TransportInfobip resource.
		 * Delete api/transport-infobip/{id}
		 * @param {string} id TransportInfobip identifier
		 * @return {void} 
		 */
		Api_transport_infobip_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-infobip/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportInfobip resource.
		 * Retrieves a TransportInfobip resource.
		 * Get api/transport-infobip/{id}
		 * @param {string} id TransportInfobip identifier
		 * @return {TransportInfobip_get} TransportInfobip resource
		 */
		Api_transport_infobip_id_get(id: string): Observable<TransportInfobip_get> {
			return this.http.get<TransportInfobip_get>(this.baseUri + 'api/transport-infobip/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportInfobip resource.
		 * Replaces the TransportInfobip resource.
		 * Put api/transport-infobip/{id}
		 * @param {string} id TransportInfobip identifier
		 * @param {TransportInfobip_put} requestBody The updated TransportInfobip resource
		 * @return {TransportInfobip_get} TransportInfobip resource updated
		 */
		Api_transport_infobip_id_put(id: string, requestBody: TransportInfobip_put): Observable<TransportInfobip_get> {
			return this.http.put<TransportInfobip_get>(this.baseUri + 'api/transport-infobip/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportIqsms resources.
		 * Retrieves the collection of TransportIqsms resources.
		 * Get api/transport-iqsms
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportIqsms_get>} TransportIqsms collection
		 */
		Api_transport_iqsms_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportIqsms_get>> {
			return this.http.get<Array<TransportIqsms_get>>(this.baseUri + 'api/transport-iqsms?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportIqsms resource.
		 * Creates a TransportIqsms resource.
		 * Post api/transport-iqsms
		 * @param {TransportIqsms_post} requestBody The new TransportIqsms resource
		 * @return {void} 
		 */
		Api_transport_iqsms_post(requestBody: TransportIqsms_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-iqsms', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportIqsms resource.
		 * Removes the TransportIqsms resource.
		 * Delete api/transport-iqsms/{id}
		 * @param {string} id TransportIqsms identifier
		 * @return {void} 
		 */
		Api_transport_iqsms_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-iqsms/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportIqsms resource.
		 * Retrieves a TransportIqsms resource.
		 * Get api/transport-iqsms/{id}
		 * @param {string} id TransportIqsms identifier
		 * @return {TransportIqsms_get} TransportIqsms resource
		 */
		Api_transport_iqsms_id_get(id: string): Observable<TransportIqsms_get> {
			return this.http.get<TransportIqsms_get>(this.baseUri + 'api/transport-iqsms/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportIqsms resource.
		 * Replaces the TransportIqsms resource.
		 * Put api/transport-iqsms/{id}
		 * @param {string} id TransportIqsms identifier
		 * @param {TransportIqsms_put} requestBody The updated TransportIqsms resource
		 * @return {TransportIqsms_get} TransportIqsms resource updated
		 */
		Api_transport_iqsms_id_put(id: string, requestBody: TransportIqsms_put): Observable<TransportIqsms_get> {
			return this.http.put<TransportIqsms_get>(this.baseUri + 'api/transport-iqsms/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportKazInfoTeh resources.
		 * Retrieves the collection of TransportKazInfoTeh resources.
		 * Get api/transport-kaz-info-teh
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportKazInfoTeh_get>} TransportKazInfoTeh collection
		 */
		Api_transport_kaz_info_teh_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportKazInfoTeh_get>> {
			return this.http.get<Array<TransportKazInfoTeh_get>>(this.baseUri + 'api/transport-kaz-info-teh?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportKazInfoTeh resource.
		 * Creates a TransportKazInfoTeh resource.
		 * Post api/transport-kaz-info-teh
		 * @param {TransportKazInfoTeh_post} requestBody The new TransportKazInfoTeh resource
		 * @return {void} 
		 */
		Api_transport_kaz_info_teh_post(requestBody: TransportKazInfoTeh_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-kaz-info-teh', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportKazInfoTeh resource.
		 * Removes the TransportKazInfoTeh resource.
		 * Delete api/transport-kaz-info-teh/{id}
		 * @param {string} id TransportKazInfoTeh identifier
		 * @return {void} 
		 */
		Api_transport_kaz_info_teh_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-kaz-info-teh/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportKazInfoTeh resource.
		 * Retrieves a TransportKazInfoTeh resource.
		 * Get api/transport-kaz-info-teh/{id}
		 * @param {string} id TransportKazInfoTeh identifier
		 * @return {TransportKazInfoTeh_get} TransportKazInfoTeh resource
		 */
		Api_transport_kaz_info_teh_id_get(id: string): Observable<TransportKazInfoTeh_get> {
			return this.http.get<TransportKazInfoTeh_get>(this.baseUri + 'api/transport-kaz-info-teh/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportKazInfoTeh resource.
		 * Replaces the TransportKazInfoTeh resource.
		 * Put api/transport-kaz-info-teh/{id}
		 * @param {string} id TransportKazInfoTeh identifier
		 * @param {TransportKazInfoTeh_put} requestBody The updated TransportKazInfoTeh resource
		 * @return {TransportKazInfoTeh_get} TransportKazInfoTeh resource updated
		 */
		Api_transport_kaz_info_teh_id_put(id: string, requestBody: TransportKazInfoTeh_put): Observable<TransportKazInfoTeh_get> {
			return this.http.put<TransportKazInfoTeh_get>(this.baseUri + 'api/transport-kaz-info-teh/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportLightSms resources.
		 * Retrieves the collection of TransportLightSms resources.
		 * Get api/transport-light-sms
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportLightSms_get>} TransportLightSms collection
		 */
		Api_transport_light_sms_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportLightSms_get>> {
			return this.http.get<Array<TransportLightSms_get>>(this.baseUri + 'api/transport-light-sms?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportLightSms resource.
		 * Creates a TransportLightSms resource.
		 * Post api/transport-light-sms
		 * @param {TransportLightSms_post} requestBody The new TransportLightSms resource
		 * @return {void} 
		 */
		Api_transport_light_sms_post(requestBody: TransportLightSms_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-light-sms', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportLightSms resource.
		 * Removes the TransportLightSms resource.
		 * Delete api/transport-light-sms/{id}
		 * @param {string} id TransportLightSms identifier
		 * @return {void} 
		 */
		Api_transport_light_sms_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-light-sms/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportLightSms resource.
		 * Retrieves a TransportLightSms resource.
		 * Get api/transport-light-sms/{id}
		 * @param {string} id TransportLightSms identifier
		 * @return {TransportLightSms_get} TransportLightSms resource
		 */
		Api_transport_light_sms_id_get(id: string): Observable<TransportLightSms_get> {
			return this.http.get<TransportLightSms_get>(this.baseUri + 'api/transport-light-sms/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportLightSms resource.
		 * Replaces the TransportLightSms resource.
		 * Put api/transport-light-sms/{id}
		 * @param {string} id TransportLightSms identifier
		 * @param {TransportLightSms_put} requestBody The updated TransportLightSms resource
		 * @return {TransportLightSms_get} TransportLightSms resource updated
		 */
		Api_transport_light_sms_id_put(id: string, requestBody: TransportLightSms_put): Observable<TransportLightSms_get> {
			return this.http.put<TransportLightSms_get>(this.baseUri + 'api/transport-light-sms/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportLineNotify resources.
		 * Retrieves the collection of TransportLineNotify resources.
		 * Get api/transport-line-notify
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportLineNotify_get>} TransportLineNotify collection
		 */
		Api_transport_line_notify_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportLineNotify_get>> {
			return this.http.get<Array<TransportLineNotify_get>>(this.baseUri + 'api/transport-line-notify?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportLineNotify resource.
		 * Creates a TransportLineNotify resource.
		 * Post api/transport-line-notify
		 * @param {TransportLineNotify_post} requestBody The new TransportLineNotify resource
		 * @return {void} 
		 */
		Api_transport_line_notify_post(requestBody: TransportLineNotify_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-line-notify', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportLineNotify resource.
		 * Removes the TransportLineNotify resource.
		 * Delete api/transport-line-notify/{id}
		 * @param {string} id TransportLineNotify identifier
		 * @return {void} 
		 */
		Api_transport_line_notify_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-line-notify/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportLineNotify resource.
		 * Retrieves a TransportLineNotify resource.
		 * Get api/transport-line-notify/{id}
		 * @param {string} id TransportLineNotify identifier
		 * @return {TransportLineNotify_get} TransportLineNotify resource
		 */
		Api_transport_line_notify_id_get(id: string): Observable<TransportLineNotify_get> {
			return this.http.get<TransportLineNotify_get>(this.baseUri + 'api/transport-line-notify/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportLineNotify resource.
		 * Replaces the TransportLineNotify resource.
		 * Put api/transport-line-notify/{id}
		 * @param {string} id TransportLineNotify identifier
		 * @param {TransportLineNotify_put} requestBody The updated TransportLineNotify resource
		 * @return {TransportLineNotify_get} TransportLineNotify resource updated
		 */
		Api_transport_line_notify_id_put(id: string, requestBody: TransportLineNotify_put): Observable<TransportLineNotify_get> {
			return this.http.put<TransportLineNotify_get>(this.baseUri + 'api/transport-line-notify/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportLinkedIn resources.
		 * Retrieves the collection of TransportLinkedIn resources.
		 * Get api/transport-linked-in
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportLinkedIn_get>} TransportLinkedIn collection
		 */
		Api_transport_linked_in_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportLinkedIn_get>> {
			return this.http.get<Array<TransportLinkedIn_get>>(this.baseUri + 'api/transport-linked-in?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportLinkedIn resource.
		 * Creates a TransportLinkedIn resource.
		 * Post api/transport-linked-in
		 * @param {TransportLinkedIn_post} requestBody The new TransportLinkedIn resource
		 * @return {void} 
		 */
		Api_transport_linked_in_post(requestBody: TransportLinkedIn_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-linked-in', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportLinkedIn resource.
		 * Removes the TransportLinkedIn resource.
		 * Delete api/transport-linked-in/{id}
		 * @param {string} id TransportLinkedIn identifier
		 * @return {void} 
		 */
		Api_transport_linked_in_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-linked-in/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportLinkedIn resource.
		 * Retrieves a TransportLinkedIn resource.
		 * Get api/transport-linked-in/{id}
		 * @param {string} id TransportLinkedIn identifier
		 * @return {TransportLinkedIn_get} TransportLinkedIn resource
		 */
		Api_transport_linked_in_id_get(id: string): Observable<TransportLinkedIn_get> {
			return this.http.get<TransportLinkedIn_get>(this.baseUri + 'api/transport-linked-in/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportLinkedIn resource.
		 * Replaces the TransportLinkedIn resource.
		 * Put api/transport-linked-in/{id}
		 * @param {string} id TransportLinkedIn identifier
		 * @param {TransportLinkedIn_put} requestBody The updated TransportLinkedIn resource
		 * @return {TransportLinkedIn_get} TransportLinkedIn resource updated
		 */
		Api_transport_linked_in_id_put(id: string, requestBody: TransportLinkedIn_put): Observable<TransportLinkedIn_get> {
			return this.http.put<TransportLinkedIn_get>(this.baseUri + 'api/transport-linked-in/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMailjet resources.
		 * Retrieves the collection of TransportMailjet resources.
		 * Get api/transport-mailjet
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMailjet_get>} TransportMailjet collection
		 */
		Api_transport_mailjet_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMailjet_get>> {
			return this.http.get<Array<TransportMailjet_get>>(this.baseUri + 'api/transport-mailjet?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMailjet resource.
		 * Creates a TransportMailjet resource.
		 * Post api/transport-mailjet
		 * @param {TransportMailjet_post} requestBody The new TransportMailjet resource
		 * @return {void} 
		 */
		Api_transport_mailjet_post(requestBody: TransportMailjet_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-mailjet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMailjet resource.
		 * Removes the TransportMailjet resource.
		 * Delete api/transport-mailjet/{id}
		 * @param {string} id TransportMailjet identifier
		 * @return {void} 
		 */
		Api_transport_mailjet_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-mailjet/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMailjet resource.
		 * Retrieves a TransportMailjet resource.
		 * Get api/transport-mailjet/{id}
		 * @param {string} id TransportMailjet identifier
		 * @return {TransportMailjet_get} TransportMailjet resource
		 */
		Api_transport_mailjet_id_get(id: string): Observable<TransportMailjet_get> {
			return this.http.get<TransportMailjet_get>(this.baseUri + 'api/transport-mailjet/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMailjet resource.
		 * Replaces the TransportMailjet resource.
		 * Put api/transport-mailjet/{id}
		 * @param {string} id TransportMailjet identifier
		 * @param {TransportMailjet_put} requestBody The updated TransportMailjet resource
		 * @return {TransportMailjet_get} TransportMailjet resource updated
		 */
		Api_transport_mailjet_id_put(id: string, requestBody: TransportMailjet_put): Observable<TransportMailjet_get> {
			return this.http.put<TransportMailjet_get>(this.baseUri + 'api/transport-mailjet/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMastodon resources.
		 * Retrieves the collection of TransportMastodon resources.
		 * Get api/transport-mastodon
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMastodon_get>} TransportMastodon collection
		 */
		Api_transport_mastodon_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMastodon_get>> {
			return this.http.get<Array<TransportMastodon_get>>(this.baseUri + 'api/transport-mastodon?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMastodon resource.
		 * Creates a TransportMastodon resource.
		 * Post api/transport-mastodon
		 * @param {TransportMastodon_post} requestBody The new TransportMastodon resource
		 * @return {void} 
		 */
		Api_transport_mastodon_post(requestBody: TransportMastodon_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-mastodon', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMastodon resource.
		 * Removes the TransportMastodon resource.
		 * Delete api/transport-mastodon/{id}
		 * @param {string} id TransportMastodon identifier
		 * @return {void} 
		 */
		Api_transport_mastodon_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-mastodon/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMastodon resource.
		 * Retrieves a TransportMastodon resource.
		 * Get api/transport-mastodon/{id}
		 * @param {string} id TransportMastodon identifier
		 * @return {TransportMastodon_get} TransportMastodon resource
		 */
		Api_transport_mastodon_id_get(id: string): Observable<TransportMastodon_get> {
			return this.http.get<TransportMastodon_get>(this.baseUri + 'api/transport-mastodon/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMastodon resource.
		 * Replaces the TransportMastodon resource.
		 * Put api/transport-mastodon/{id}
		 * @param {string} id TransportMastodon identifier
		 * @param {TransportMastodon_put} requestBody The updated TransportMastodon resource
		 * @return {TransportMastodon_get} TransportMastodon resource updated
		 */
		Api_transport_mastodon_id_put(id: string, requestBody: TransportMastodon_put): Observable<TransportMastodon_get> {
			return this.http.put<TransportMastodon_get>(this.baseUri + 'api/transport-mastodon/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMattermost resources.
		 * Retrieves the collection of TransportMattermost resources.
		 * Get api/transport-mattermost
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMattermost_get>} TransportMattermost collection
		 */
		Api_transport_mattermost_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMattermost_get>> {
			return this.http.get<Array<TransportMattermost_get>>(this.baseUri + 'api/transport-mattermost?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMattermost resource.
		 * Creates a TransportMattermost resource.
		 * Post api/transport-mattermost
		 * @param {TransportMattermost_post} requestBody The new TransportMattermost resource
		 * @return {void} 
		 */
		Api_transport_mattermost_post(requestBody: TransportMattermost_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-mattermost', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMattermost resource.
		 * Removes the TransportMattermost resource.
		 * Delete api/transport-mattermost/{id}
		 * @param {string} id TransportMattermost identifier
		 * @return {void} 
		 */
		Api_transport_mattermost_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-mattermost/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMattermost resource.
		 * Retrieves a TransportMattermost resource.
		 * Get api/transport-mattermost/{id}
		 * @param {string} id TransportMattermost identifier
		 * @return {TransportMattermost_get} TransportMattermost resource
		 */
		Api_transport_mattermost_id_get(id: string): Observable<TransportMattermost_get> {
			return this.http.get<TransportMattermost_get>(this.baseUri + 'api/transport-mattermost/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMattermost resource.
		 * Replaces the TransportMattermost resource.
		 * Put api/transport-mattermost/{id}
		 * @param {string} id TransportMattermost identifier
		 * @param {TransportMattermost_put} requestBody The updated TransportMattermost resource
		 * @return {TransportMattermost_get} TransportMattermost resource updated
		 */
		Api_transport_mattermost_id_put(id: string, requestBody: TransportMattermost_put): Observable<TransportMattermost_get> {
			return this.http.put<TransportMattermost_get>(this.baseUri + 'api/transport-mattermost/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMercure resources.
		 * Retrieves the collection of TransportMercure resources.
		 * Get api/transport-mercure
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMercure_get>} TransportMercure collection
		 */
		Api_transport_mercure_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMercure_get>> {
			return this.http.get<Array<TransportMercure_get>>(this.baseUri + 'api/transport-mercure?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMercure resource.
		 * Creates a TransportMercure resource.
		 * Post api/transport-mercure
		 * @param {TransportMercure_post} requestBody The new TransportMercure resource
		 * @return {void} 
		 */
		Api_transport_mercure_post(requestBody: TransportMercure_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-mercure', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMercure resource.
		 * Removes the TransportMercure resource.
		 * Delete api/transport-mercure/{id}
		 * @param {string} id TransportMercure identifier
		 * @return {void} 
		 */
		Api_transport_mercure_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-mercure/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMercure resource.
		 * Retrieves a TransportMercure resource.
		 * Get api/transport-mercure/{id}
		 * @param {string} id TransportMercure identifier
		 * @return {TransportMercure_get} TransportMercure resource
		 */
		Api_transport_mercure_id_get(id: string): Observable<TransportMercure_get> {
			return this.http.get<TransportMercure_get>(this.baseUri + 'api/transport-mercure/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMercure resource.
		 * Replaces the TransportMercure resource.
		 * Put api/transport-mercure/{id}
		 * @param {string} id TransportMercure identifier
		 * @param {TransportMercure_put} requestBody The updated TransportMercure resource
		 * @return {TransportMercure_get} TransportMercure resource updated
		 */
		Api_transport_mercure_id_put(id: string, requestBody: TransportMercure_put): Observable<TransportMercure_get> {
			return this.http.put<TransportMercure_get>(this.baseUri + 'api/transport-mercure/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMessageBird resources.
		 * Retrieves the collection of TransportMessageBird resources.
		 * Get api/transport-message-bird
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMessageBird_get>} TransportMessageBird collection
		 */
		Api_transport_message_bird_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMessageBird_get>> {
			return this.http.get<Array<TransportMessageBird_get>>(this.baseUri + 'api/transport-message-bird?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMessageBird resource.
		 * Creates a TransportMessageBird resource.
		 * Post api/transport-message-bird
		 * @param {TransportMessageBird_post} requestBody The new TransportMessageBird resource
		 * @return {void} 
		 */
		Api_transport_message_bird_post(requestBody: TransportMessageBird_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-message-bird', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMessageBird resource.
		 * Removes the TransportMessageBird resource.
		 * Delete api/transport-message-bird/{id}
		 * @param {string} id TransportMessageBird identifier
		 * @return {void} 
		 */
		Api_transport_message_bird_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-message-bird/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMessageBird resource.
		 * Retrieves a TransportMessageBird resource.
		 * Get api/transport-message-bird/{id}
		 * @param {string} id TransportMessageBird identifier
		 * @return {TransportMessageBird_get} TransportMessageBird resource
		 */
		Api_transport_message_bird_id_get(id: string): Observable<TransportMessageBird_get> {
			return this.http.get<TransportMessageBird_get>(this.baseUri + 'api/transport-message-bird/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMessageBird resource.
		 * Replaces the TransportMessageBird resource.
		 * Put api/transport-message-bird/{id}
		 * @param {string} id TransportMessageBird identifier
		 * @param {TransportMessageBird_put} requestBody The updated TransportMessageBird resource
		 * @return {TransportMessageBird_get} TransportMessageBird resource updated
		 */
		Api_transport_message_bird_id_put(id: string, requestBody: TransportMessageBird_put): Observable<TransportMessageBird_get> {
			return this.http.put<TransportMessageBird_get>(this.baseUri + 'api/transport-message-bird/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMessageMedia resources.
		 * Retrieves the collection of TransportMessageMedia resources.
		 * Get api/transport-message-media
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMessageMedia_get>} TransportMessageMedia collection
		 */
		Api_transport_message_media_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMessageMedia_get>> {
			return this.http.get<Array<TransportMessageMedia_get>>(this.baseUri + 'api/transport-message-media?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMessageMedia resource.
		 * Creates a TransportMessageMedia resource.
		 * Post api/transport-message-media
		 * @param {TransportMessageMedia_post} requestBody The new TransportMessageMedia resource
		 * @return {void} 
		 */
		Api_transport_message_media_post(requestBody: TransportMessageMedia_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-message-media', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMessageMedia resource.
		 * Removes the TransportMessageMedia resource.
		 * Delete api/transport-message-media/{id}
		 * @param {string} id TransportMessageMedia identifier
		 * @return {void} 
		 */
		Api_transport_message_media_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-message-media/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMessageMedia resource.
		 * Retrieves a TransportMessageMedia resource.
		 * Get api/transport-message-media/{id}
		 * @param {string} id TransportMessageMedia identifier
		 * @return {TransportMessageMedia_get} TransportMessageMedia resource
		 */
		Api_transport_message_media_id_get(id: string): Observable<TransportMessageMedia_get> {
			return this.http.get<TransportMessageMedia_get>(this.baseUri + 'api/transport-message-media/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMessageMedia resource.
		 * Replaces the TransportMessageMedia resource.
		 * Put api/transport-message-media/{id}
		 * @param {string} id TransportMessageMedia identifier
		 * @param {TransportMessageMedia_put} requestBody The updated TransportMessageMedia resource
		 * @return {TransportMessageMedia_get} TransportMessageMedia resource updated
		 */
		Api_transport_message_media_id_put(id: string, requestBody: TransportMessageMedia_put): Observable<TransportMessageMedia_get> {
			return this.http.put<TransportMessageMedia_get>(this.baseUri + 'api/transport-message-media/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMicrosoftTeams resources.
		 * Retrieves the collection of TransportMicrosoftTeams resources.
		 * Get api/transport-microsoft-teams
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMicrosoftTeams_get>} TransportMicrosoftTeams collection
		 */
		Api_transport_microsoft_teams_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMicrosoftTeams_get>> {
			return this.http.get<Array<TransportMicrosoftTeams_get>>(this.baseUri + 'api/transport-microsoft-teams?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMicrosoftTeams resource.
		 * Creates a TransportMicrosoftTeams resource.
		 * Post api/transport-microsoft-teams
		 * @param {TransportMicrosoftTeams_post} requestBody The new TransportMicrosoftTeams resource
		 * @return {void} 
		 */
		Api_transport_microsoft_teams_post(requestBody: TransportMicrosoftTeams_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-microsoft-teams', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMicrosoftTeams resource.
		 * Removes the TransportMicrosoftTeams resource.
		 * Delete api/transport-microsoft-teams/{id}
		 * @param {string} id TransportMicrosoftTeams identifier
		 * @return {void} 
		 */
		Api_transport_microsoft_teams_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-microsoft-teams/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMicrosoftTeams resource.
		 * Retrieves a TransportMicrosoftTeams resource.
		 * Get api/transport-microsoft-teams/{id}
		 * @param {string} id TransportMicrosoftTeams identifier
		 * @return {TransportMicrosoftTeams_get} TransportMicrosoftTeams resource
		 */
		Api_transport_microsoft_teams_id_get(id: string): Observable<TransportMicrosoftTeams_get> {
			return this.http.get<TransportMicrosoftTeams_get>(this.baseUri + 'api/transport-microsoft-teams/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMicrosoftTeams resource.
		 * Replaces the TransportMicrosoftTeams resource.
		 * Put api/transport-microsoft-teams/{id}
		 * @param {string} id TransportMicrosoftTeams identifier
		 * @param {TransportMicrosoftTeams_put} requestBody The updated TransportMicrosoftTeams resource
		 * @return {TransportMicrosoftTeams_get} TransportMicrosoftTeams resource updated
		 */
		Api_transport_microsoft_teams_id_put(id: string, requestBody: TransportMicrosoftTeams_put): Observable<TransportMicrosoftTeams_get> {
			return this.http.put<TransportMicrosoftTeams_get>(this.baseUri + 'api/transport-microsoft-teams/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportMobyt resources.
		 * Retrieves the collection of TransportMobyt resources.
		 * Get api/transport-mobyt
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportMobyt_get>} TransportMobyt collection
		 */
		Api_transport_mobyt_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportMobyt_get>> {
			return this.http.get<Array<TransportMobyt_get>>(this.baseUri + 'api/transport-mobyt?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportMobyt resource.
		 * Creates a TransportMobyt resource.
		 * Post api/transport-mobyt
		 * @param {TransportMobyt_post} requestBody The new TransportMobyt resource
		 * @return {void} 
		 */
		Api_transport_mobyt_post(requestBody: TransportMobyt_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-mobyt', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportMobyt resource.
		 * Removes the TransportMobyt resource.
		 * Delete api/transport-mobyt/{id}
		 * @param {string} id TransportMobyt identifier
		 * @return {void} 
		 */
		Api_transport_mobyt_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-mobyt/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportMobyt resource.
		 * Retrieves a TransportMobyt resource.
		 * Get api/transport-mobyt/{id}
		 * @param {string} id TransportMobyt identifier
		 * @return {TransportMobyt_get} TransportMobyt resource
		 */
		Api_transport_mobyt_id_get(id: string): Observable<TransportMobyt_get> {
			return this.http.get<TransportMobyt_get>(this.baseUri + 'api/transport-mobyt/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportMobyt resource.
		 * Replaces the TransportMobyt resource.
		 * Put api/transport-mobyt/{id}
		 * @param {string} id TransportMobyt identifier
		 * @param {TransportMobyt_put} requestBody The updated TransportMobyt resource
		 * @return {TransportMobyt_get} TransportMobyt resource updated
		 */
		Api_transport_mobyt_id_put(id: string, requestBody: TransportMobyt_put): Observable<TransportMobyt_get> {
			return this.http.put<TransportMobyt_get>(this.baseUri + 'api/transport-mobyt/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportOctopush resources.
		 * Retrieves the collection of TransportOctopush resources.
		 * Get api/transport-octopush
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportOctopush_get>} TransportOctopush collection
		 */
		Api_transport_octopush_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportOctopush_get>> {
			return this.http.get<Array<TransportOctopush_get>>(this.baseUri + 'api/transport-octopush?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportOctopush resource.
		 * Creates a TransportOctopush resource.
		 * Post api/transport-octopush
		 * @param {TransportOctopush_post} requestBody The new TransportOctopush resource
		 * @return {void} 
		 */
		Api_transport_octopush_post(requestBody: TransportOctopush_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-octopush', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportOctopush resource.
		 * Removes the TransportOctopush resource.
		 * Delete api/transport-octopush/{id}
		 * @param {string} id TransportOctopush identifier
		 * @return {void} 
		 */
		Api_transport_octopush_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-octopush/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportOctopush resource.
		 * Retrieves a TransportOctopush resource.
		 * Get api/transport-octopush/{id}
		 * @param {string} id TransportOctopush identifier
		 * @return {TransportOctopush_get} TransportOctopush resource
		 */
		Api_transport_octopush_id_get(id: string): Observable<TransportOctopush_get> {
			return this.http.get<TransportOctopush_get>(this.baseUri + 'api/transport-octopush/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportOctopush resource.
		 * Replaces the TransportOctopush resource.
		 * Put api/transport-octopush/{id}
		 * @param {string} id TransportOctopush identifier
		 * @param {TransportOctopush_put} requestBody The updated TransportOctopush resource
		 * @return {TransportOctopush_get} TransportOctopush resource updated
		 */
		Api_transport_octopush_id_put(id: string, requestBody: TransportOctopush_put): Observable<TransportOctopush_get> {
			return this.http.put<TransportOctopush_get>(this.baseUri + 'api/transport-octopush/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportOneSignal resources.
		 * Retrieves the collection of TransportOneSignal resources.
		 * Get api/transport-one-signal
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportOneSignal_get>} TransportOneSignal collection
		 */
		Api_transport_one_signal_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportOneSignal_get>> {
			return this.http.get<Array<TransportOneSignal_get>>(this.baseUri + 'api/transport-one-signal?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportOneSignal resource.
		 * Creates a TransportOneSignal resource.
		 * Post api/transport-one-signal
		 * @param {TransportOneSignal_post} requestBody The new TransportOneSignal resource
		 * @return {void} 
		 */
		Api_transport_one_signal_post(requestBody: TransportOneSignal_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-one-signal', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportOneSignal resource.
		 * Removes the TransportOneSignal resource.
		 * Delete api/transport-one-signal/{id}
		 * @param {string} id TransportOneSignal identifier
		 * @return {void} 
		 */
		Api_transport_one_signal_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-one-signal/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportOneSignal resource.
		 * Retrieves a TransportOneSignal resource.
		 * Get api/transport-one-signal/{id}
		 * @param {string} id TransportOneSignal identifier
		 * @return {TransportOneSignal_get} TransportOneSignal resource
		 */
		Api_transport_one_signal_id_get(id: string): Observable<TransportOneSignal_get> {
			return this.http.get<TransportOneSignal_get>(this.baseUri + 'api/transport-one-signal/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportOneSignal resource.
		 * Replaces the TransportOneSignal resource.
		 * Put api/transport-one-signal/{id}
		 * @param {string} id TransportOneSignal identifier
		 * @param {TransportOneSignal_put} requestBody The updated TransportOneSignal resource
		 * @return {TransportOneSignal_get} TransportOneSignal resource updated
		 */
		Api_transport_one_signal_id_put(id: string, requestBody: TransportOneSignal_put): Observable<TransportOneSignal_get> {
			return this.http.put<TransportOneSignal_get>(this.baseUri + 'api/transport-one-signal/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportOpsgenie resources.
		 * Retrieves the collection of TransportOpsgenie resources.
		 * Get api/transport-opsgenie
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportOpsgenie_get>} TransportOpsgenie collection
		 */
		Api_transport_opsgenie_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportOpsgenie_get>> {
			return this.http.get<Array<TransportOpsgenie_get>>(this.baseUri + 'api/transport-opsgenie?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportOpsgenie resource.
		 * Creates a TransportOpsgenie resource.
		 * Post api/transport-opsgenie
		 * @param {TransportOpsgenie_post} requestBody The new TransportOpsgenie resource
		 * @return {void} 
		 */
		Api_transport_opsgenie_post(requestBody: TransportOpsgenie_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-opsgenie', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportOpsgenie resource.
		 * Removes the TransportOpsgenie resource.
		 * Delete api/transport-opsgenie/{id}
		 * @param {string} id TransportOpsgenie identifier
		 * @return {void} 
		 */
		Api_transport_opsgenie_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-opsgenie/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportOpsgenie resource.
		 * Retrieves a TransportOpsgenie resource.
		 * Get api/transport-opsgenie/{id}
		 * @param {string} id TransportOpsgenie identifier
		 * @return {TransportOpsgenie_get} TransportOpsgenie resource
		 */
		Api_transport_opsgenie_id_get(id: string): Observable<TransportOpsgenie_get> {
			return this.http.get<TransportOpsgenie_get>(this.baseUri + 'api/transport-opsgenie/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportOpsgenie resource.
		 * Replaces the TransportOpsgenie resource.
		 * Put api/transport-opsgenie/{id}
		 * @param {string} id TransportOpsgenie identifier
		 * @param {TransportOpsgenie_put} requestBody The updated TransportOpsgenie resource
		 * @return {TransportOpsgenie_get} TransportOpsgenie resource updated
		 */
		Api_transport_opsgenie_id_put(id: string, requestBody: TransportOpsgenie_put): Observable<TransportOpsgenie_get> {
			return this.http.put<TransportOpsgenie_get>(this.baseUri + 'api/transport-opsgenie/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportOrangeSms resources.
		 * Retrieves the collection of TransportOrangeSms resources.
		 * Get api/transport-orange-sms
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportOrangeSms_get>} TransportOrangeSms collection
		 */
		Api_transport_orange_sms_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportOrangeSms_get>> {
			return this.http.get<Array<TransportOrangeSms_get>>(this.baseUri + 'api/transport-orange-sms?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportOrangeSms resource.
		 * Creates a TransportOrangeSms resource.
		 * Post api/transport-orange-sms
		 * @param {TransportOrangeSms_post} requestBody The new TransportOrangeSms resource
		 * @return {void} 
		 */
		Api_transport_orange_sms_post(requestBody: TransportOrangeSms_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-orange-sms', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportOrangeSms resource.
		 * Removes the TransportOrangeSms resource.
		 * Delete api/transport-orange-sms/{id}
		 * @param {string} id TransportOrangeSms identifier
		 * @return {void} 
		 */
		Api_transport_orange_sms_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-orange-sms/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportOrangeSms resource.
		 * Retrieves a TransportOrangeSms resource.
		 * Get api/transport-orange-sms/{id}
		 * @param {string} id TransportOrangeSms identifier
		 * @return {TransportOrangeSms_get} TransportOrangeSms resource
		 */
		Api_transport_orange_sms_id_get(id: string): Observable<TransportOrangeSms_get> {
			return this.http.get<TransportOrangeSms_get>(this.baseUri + 'api/transport-orange-sms/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportOrangeSms resource.
		 * Replaces the TransportOrangeSms resource.
		 * Put api/transport-orange-sms/{id}
		 * @param {string} id TransportOrangeSms identifier
		 * @param {TransportOrangeSms_put} requestBody The updated TransportOrangeSms resource
		 * @return {TransportOrangeSms_get} TransportOrangeSms resource updated
		 */
		Api_transport_orange_sms_id_put(id: string, requestBody: TransportOrangeSms_put): Observable<TransportOrangeSms_get> {
			return this.http.put<TransportOrangeSms_get>(this.baseUri + 'api/transport-orange-sms/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportOvhCloud resources.
		 * Retrieves the collection of TransportOvhCloud resources.
		 * Get api/transport-ovh-cloud
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportOvhCloud_get>} TransportOvhCloud collection
		 */
		Api_transport_ovh_cloud_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportOvhCloud_get>> {
			return this.http.get<Array<TransportOvhCloud_get>>(this.baseUri + 'api/transport-ovh-cloud?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportOvhCloud resource.
		 * Creates a TransportOvhCloud resource.
		 * Post api/transport-ovh-cloud
		 * @param {TransportOvhCloud_post} requestBody The new TransportOvhCloud resource
		 * @return {void} 
		 */
		Api_transport_ovh_cloud_post(requestBody: TransportOvhCloud_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-ovh-cloud', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportOvhCloud resource.
		 * Removes the TransportOvhCloud resource.
		 * Delete api/transport-ovh-cloud/{id}
		 * @param {string} id TransportOvhCloud identifier
		 * @return {void} 
		 */
		Api_transport_ovh_cloud_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-ovh-cloud/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportOvhCloud resource.
		 * Retrieves a TransportOvhCloud resource.
		 * Get api/transport-ovh-cloud/{id}
		 * @param {string} id TransportOvhCloud identifier
		 * @return {TransportOvhCloud_get} TransportOvhCloud resource
		 */
		Api_transport_ovh_cloud_id_get(id: string): Observable<TransportOvhCloud_get> {
			return this.http.get<TransportOvhCloud_get>(this.baseUri + 'api/transport-ovh-cloud/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportOvhCloud resource.
		 * Replaces the TransportOvhCloud resource.
		 * Put api/transport-ovh-cloud/{id}
		 * @param {string} id TransportOvhCloud identifier
		 * @param {TransportOvhCloud_put} requestBody The updated TransportOvhCloud resource
		 * @return {TransportOvhCloud_get} TransportOvhCloud resource updated
		 */
		Api_transport_ovh_cloud_id_put(id: string, requestBody: TransportOvhCloud_put): Observable<TransportOvhCloud_get> {
			return this.http.put<TransportOvhCloud_get>(this.baseUri + 'api/transport-ovh-cloud/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportPagerDuty resources.
		 * Retrieves the collection of TransportPagerDuty resources.
		 * Get api/transport-pager-duty
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportPagerDuty_get>} TransportPagerDuty collection
		 */
		Api_transport_pager_duty_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportPagerDuty_get>> {
			return this.http.get<Array<TransportPagerDuty_get>>(this.baseUri + 'api/transport-pager-duty?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportPagerDuty resource.
		 * Creates a TransportPagerDuty resource.
		 * Post api/transport-pager-duty
		 * @param {TransportPagerDuty_post} requestBody The new TransportPagerDuty resource
		 * @return {void} 
		 */
		Api_transport_pager_duty_post(requestBody: TransportPagerDuty_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-pager-duty', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportPagerDuty resource.
		 * Removes the TransportPagerDuty resource.
		 * Delete api/transport-pager-duty/{id}
		 * @param {string} id TransportPagerDuty identifier
		 * @return {void} 
		 */
		Api_transport_pager_duty_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-pager-duty/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportPagerDuty resource.
		 * Retrieves a TransportPagerDuty resource.
		 * Get api/transport-pager-duty/{id}
		 * @param {string} id TransportPagerDuty identifier
		 * @return {TransportPagerDuty_get} TransportPagerDuty resource
		 */
		Api_transport_pager_duty_id_get(id: string): Observable<TransportPagerDuty_get> {
			return this.http.get<TransportPagerDuty_get>(this.baseUri + 'api/transport-pager-duty/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportPagerDuty resource.
		 * Replaces the TransportPagerDuty resource.
		 * Put api/transport-pager-duty/{id}
		 * @param {string} id TransportPagerDuty identifier
		 * @param {TransportPagerDuty_put} requestBody The updated TransportPagerDuty resource
		 * @return {TransportPagerDuty_get} TransportPagerDuty resource updated
		 */
		Api_transport_pager_duty_id_put(id: string, requestBody: TransportPagerDuty_put): Observable<TransportPagerDuty_get> {
			return this.http.put<TransportPagerDuty_get>(this.baseUri + 'api/transport-pager-duty/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportPagerTree resources.
		 * Retrieves the collection of TransportPagerTree resources.
		 * Get api/transport-pager-tree
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportPagerTree_get>} TransportPagerTree collection
		 */
		Api_transport_pager_tree_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportPagerTree_get>> {
			return this.http.get<Array<TransportPagerTree_get>>(this.baseUri + 'api/transport-pager-tree?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportPagerTree resource.
		 * Creates a TransportPagerTree resource.
		 * Post api/transport-pager-tree
		 * @param {TransportPagerTree_post} requestBody The new TransportPagerTree resource
		 * @return {void} 
		 */
		Api_transport_pager_tree_post(requestBody: TransportPagerTree_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-pager-tree', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportPagerTree resource.
		 * Removes the TransportPagerTree resource.
		 * Delete api/transport-pager-tree/{id}
		 * @param {string} id TransportPagerTree identifier
		 * @return {void} 
		 */
		Api_transport_pager_tree_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-pager-tree/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportPagerTree resource.
		 * Retrieves a TransportPagerTree resource.
		 * Get api/transport-pager-tree/{id}
		 * @param {string} id TransportPagerTree identifier
		 * @return {TransportPagerTree_get} TransportPagerTree resource
		 */
		Api_transport_pager_tree_id_get(id: string): Observable<TransportPagerTree_get> {
			return this.http.get<TransportPagerTree_get>(this.baseUri + 'api/transport-pager-tree/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportPagerTree resource.
		 * Replaces the TransportPagerTree resource.
		 * Put api/transport-pager-tree/{id}
		 * @param {string} id TransportPagerTree identifier
		 * @param {TransportPagerTree_put} requestBody The updated TransportPagerTree resource
		 * @return {TransportPagerTree_get} TransportPagerTree resource updated
		 */
		Api_transport_pager_tree_id_put(id: string, requestBody: TransportPagerTree_put): Observable<TransportPagerTree_get> {
			return this.http.put<TransportPagerTree_get>(this.baseUri + 'api/transport-pager-tree/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportPlivo resources.
		 * Retrieves the collection of TransportPlivo resources.
		 * Get api/transport-plivo
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportPlivo_get>} TransportPlivo collection
		 */
		Api_transport_plivo_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportPlivo_get>> {
			return this.http.get<Array<TransportPlivo_get>>(this.baseUri + 'api/transport-plivo?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportPlivo resource.
		 * Creates a TransportPlivo resource.
		 * Post api/transport-plivo
		 * @param {TransportPlivo_post} requestBody The new TransportPlivo resource
		 * @return {void} 
		 */
		Api_transport_plivo_post(requestBody: TransportPlivo_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-plivo', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportPlivo resource.
		 * Removes the TransportPlivo resource.
		 * Delete api/transport-plivo/{id}
		 * @param {string} id TransportPlivo identifier
		 * @return {void} 
		 */
		Api_transport_plivo_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-plivo/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportPlivo resource.
		 * Retrieves a TransportPlivo resource.
		 * Get api/transport-plivo/{id}
		 * @param {string} id TransportPlivo identifier
		 * @return {TransportPlivo_get} TransportPlivo resource
		 */
		Api_transport_plivo_id_get(id: string): Observable<TransportPlivo_get> {
			return this.http.get<TransportPlivo_get>(this.baseUri + 'api/transport-plivo/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportPlivo resource.
		 * Replaces the TransportPlivo resource.
		 * Put api/transport-plivo/{id}
		 * @param {string} id TransportPlivo identifier
		 * @param {TransportPlivo_put} requestBody The updated TransportPlivo resource
		 * @return {TransportPlivo_get} TransportPlivo resource updated
		 */
		Api_transport_plivo_id_put(id: string, requestBody: TransportPlivo_put): Observable<TransportPlivo_get> {
			return this.http.put<TransportPlivo_get>(this.baseUri + 'api/transport-plivo/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportPushbullet resources.
		 * Retrieves the collection of TransportPushbullet resources.
		 * Get api/transport-pushbullet
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportPushbullet_get>} TransportPushbullet collection
		 */
		Api_transport_pushbullet_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportPushbullet_get>> {
			return this.http.get<Array<TransportPushbullet_get>>(this.baseUri + 'api/transport-pushbullet?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportPushbullet resource.
		 * Creates a TransportPushbullet resource.
		 * Post api/transport-pushbullet
		 * @param {TransportPushbullet_post} requestBody The new TransportPushbullet resource
		 * @return {void} 
		 */
		Api_transport_pushbullet_post(requestBody: TransportPushbullet_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-pushbullet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportPushbullet resource.
		 * Removes the TransportPushbullet resource.
		 * Delete api/transport-pushbullet/{id}
		 * @param {string} id TransportPushbullet identifier
		 * @return {void} 
		 */
		Api_transport_pushbullet_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-pushbullet/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportPushbullet resource.
		 * Retrieves a TransportPushbullet resource.
		 * Get api/transport-pushbullet/{id}
		 * @param {string} id TransportPushbullet identifier
		 * @return {TransportPushbullet_get} TransportPushbullet resource
		 */
		Api_transport_pushbullet_id_get(id: string): Observable<TransportPushbullet_get> {
			return this.http.get<TransportPushbullet_get>(this.baseUri + 'api/transport-pushbullet/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportPushbullet resource.
		 * Replaces the TransportPushbullet resource.
		 * Put api/transport-pushbullet/{id}
		 * @param {string} id TransportPushbullet identifier
		 * @param {TransportPushbullet_put} requestBody The updated TransportPushbullet resource
		 * @return {TransportPushbullet_get} TransportPushbullet resource updated
		 */
		Api_transport_pushbullet_id_put(id: string, requestBody: TransportPushbullet_put): Observable<TransportPushbullet_get> {
			return this.http.put<TransportPushbullet_get>(this.baseUri + 'api/transport-pushbullet/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportPushover resources.
		 * Retrieves the collection of TransportPushover resources.
		 * Get api/transport-pushover
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportPushover_get>} TransportPushover collection
		 */
		Api_transport_pushover_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportPushover_get>> {
			return this.http.get<Array<TransportPushover_get>>(this.baseUri + 'api/transport-pushover?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportPushover resource.
		 * Creates a TransportPushover resource.
		 * Post api/transport-pushover
		 * @param {TransportPushover_post} requestBody The new TransportPushover resource
		 * @return {void} 
		 */
		Api_transport_pushover_post(requestBody: TransportPushover_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-pushover', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportPushover resource.
		 * Removes the TransportPushover resource.
		 * Delete api/transport-pushover/{id}
		 * @param {string} id TransportPushover identifier
		 * @return {void} 
		 */
		Api_transport_pushover_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-pushover/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportPushover resource.
		 * Retrieves a TransportPushover resource.
		 * Get api/transport-pushover/{id}
		 * @param {string} id TransportPushover identifier
		 * @return {TransportPushover_get} TransportPushover resource
		 */
		Api_transport_pushover_id_get(id: string): Observable<TransportPushover_get> {
			return this.http.get<TransportPushover_get>(this.baseUri + 'api/transport-pushover/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportPushover resource.
		 * Replaces the TransportPushover resource.
		 * Put api/transport-pushover/{id}
		 * @param {string} id TransportPushover identifier
		 * @param {TransportPushover_put} requestBody The updated TransportPushover resource
		 * @return {TransportPushover_get} TransportPushover resource updated
		 */
		Api_transport_pushover_id_put(id: string, requestBody: TransportPushover_put): Observable<TransportPushover_get> {
			return this.http.put<TransportPushover_get>(this.baseUri + 'api/transport-pushover/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportPushy resources.
		 * Retrieves the collection of TransportPushy resources.
		 * Get api/transport-pushy
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportPushy_get>} TransportPushy collection
		 */
		Api_transport_pushy_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportPushy_get>> {
			return this.http.get<Array<TransportPushy_get>>(this.baseUri + 'api/transport-pushy?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportPushy resource.
		 * Creates a TransportPushy resource.
		 * Post api/transport-pushy
		 * @param {TransportPushy_post} requestBody The new TransportPushy resource
		 * @return {void} 
		 */
		Api_transport_pushy_post(requestBody: TransportPushy_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-pushy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportPushy resource.
		 * Removes the TransportPushy resource.
		 * Delete api/transport-pushy/{id}
		 * @param {string} id TransportPushy identifier
		 * @return {void} 
		 */
		Api_transport_pushy_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-pushy/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportPushy resource.
		 * Retrieves a TransportPushy resource.
		 * Get api/transport-pushy/{id}
		 * @param {string} id TransportPushy identifier
		 * @return {TransportPushy_get} TransportPushy resource
		 */
		Api_transport_pushy_id_get(id: string): Observable<TransportPushy_get> {
			return this.http.get<TransportPushy_get>(this.baseUri + 'api/transport-pushy/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportPushy resource.
		 * Replaces the TransportPushy resource.
		 * Put api/transport-pushy/{id}
		 * @param {string} id TransportPushy identifier
		 * @param {TransportPushy_put} requestBody The updated TransportPushy resource
		 * @return {TransportPushy_get} TransportPushy resource updated
		 */
		Api_transport_pushy_id_put(id: string, requestBody: TransportPushy_put): Observable<TransportPushy_get> {
			return this.http.put<TransportPushy_get>(this.baseUri + 'api/transport-pushy/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportRingCentral resources.
		 * Retrieves the collection of TransportRingCentral resources.
		 * Get api/transport-ring-central
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportRingCentral_get>} TransportRingCentral collection
		 */
		Api_transport_ring_central_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportRingCentral_get>> {
			return this.http.get<Array<TransportRingCentral_get>>(this.baseUri + 'api/transport-ring-central?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportRingCentral resource.
		 * Creates a TransportRingCentral resource.
		 * Post api/transport-ring-central
		 * @param {TransportRingCentral_post} requestBody The new TransportRingCentral resource
		 * @return {void} 
		 */
		Api_transport_ring_central_post(requestBody: TransportRingCentral_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-ring-central', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportRingCentral resource.
		 * Removes the TransportRingCentral resource.
		 * Delete api/transport-ring-central/{id}
		 * @param {string} id TransportRingCentral identifier
		 * @return {void} 
		 */
		Api_transport_ring_central_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-ring-central/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportRingCentral resource.
		 * Retrieves a TransportRingCentral resource.
		 * Get api/transport-ring-central/{id}
		 * @param {string} id TransportRingCentral identifier
		 * @return {TransportRingCentral_get} TransportRingCentral resource
		 */
		Api_transport_ring_central_id_get(id: string): Observable<TransportRingCentral_get> {
			return this.http.get<TransportRingCentral_get>(this.baseUri + 'api/transport-ring-central/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportRingCentral resource.
		 * Replaces the TransportRingCentral resource.
		 * Put api/transport-ring-central/{id}
		 * @param {string} id TransportRingCentral identifier
		 * @param {TransportRingCentral_put} requestBody The updated TransportRingCentral resource
		 * @return {TransportRingCentral_get} TransportRingCentral resource updated
		 */
		Api_transport_ring_central_id_put(id: string, requestBody: TransportRingCentral_put): Observable<TransportRingCentral_get> {
			return this.http.put<TransportRingCentral_get>(this.baseUri + 'api/transport-ring-central/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportRocketChat resources.
		 * Retrieves the collection of TransportRocketChat resources.
		 * Get api/transport-rocket-chat
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportRocketChat_get>} TransportRocketChat collection
		 */
		Api_transport_rocket_chat_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportRocketChat_get>> {
			return this.http.get<Array<TransportRocketChat_get>>(this.baseUri + 'api/transport-rocket-chat?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportRocketChat resource.
		 * Creates a TransportRocketChat resource.
		 * Post api/transport-rocket-chat
		 * @param {TransportRocketChat_post} requestBody The new TransportRocketChat resource
		 * @return {void} 
		 */
		Api_transport_rocket_chat_post(requestBody: TransportRocketChat_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-rocket-chat', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportRocketChat resource.
		 * Removes the TransportRocketChat resource.
		 * Delete api/transport-rocket-chat/{id}
		 * @param {string} id TransportRocketChat identifier
		 * @return {void} 
		 */
		Api_transport_rocket_chat_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-rocket-chat/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportRocketChat resource.
		 * Retrieves a TransportRocketChat resource.
		 * Get api/transport-rocket-chat/{id}
		 * @param {string} id TransportRocketChat identifier
		 * @return {TransportRocketChat_get} TransportRocketChat resource
		 */
		Api_transport_rocket_chat_id_get(id: string): Observable<TransportRocketChat_get> {
			return this.http.get<TransportRocketChat_get>(this.baseUri + 'api/transport-rocket-chat/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportRocketChat resource.
		 * Replaces the TransportRocketChat resource.
		 * Put api/transport-rocket-chat/{id}
		 * @param {string} id TransportRocketChat identifier
		 * @param {TransportRocketChat_put} requestBody The updated TransportRocketChat resource
		 * @return {TransportRocketChat_get} TransportRocketChat resource updated
		 */
		Api_transport_rocket_chat_id_put(id: string, requestBody: TransportRocketChat_put): Observable<TransportRocketChat_get> {
			return this.http.put<TransportRocketChat_get>(this.baseUri + 'api/transport-rocket-chat/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSendberry resources.
		 * Retrieves the collection of TransportSendberry resources.
		 * Get api/transport-sendberry
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSendberry_get>} TransportSendberry collection
		 */
		Api_transport_sendberry_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSendberry_get>> {
			return this.http.get<Array<TransportSendberry_get>>(this.baseUri + 'api/transport-sendberry?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSendberry resource.
		 * Creates a TransportSendberry resource.
		 * Post api/transport-sendberry
		 * @param {TransportSendberry_post} requestBody The new TransportSendberry resource
		 * @return {void} 
		 */
		Api_transport_sendberry_post(requestBody: TransportSendberry_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-sendberry', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSendberry resource.
		 * Removes the TransportSendberry resource.
		 * Delete api/transport-sendberry/{id}
		 * @param {string} id TransportSendberry identifier
		 * @return {void} 
		 */
		Api_transport_sendberry_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-sendberry/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSendberry resource.
		 * Retrieves a TransportSendberry resource.
		 * Get api/transport-sendberry/{id}
		 * @param {string} id TransportSendberry identifier
		 * @return {TransportSendberry_get} TransportSendberry resource
		 */
		Api_transport_sendberry_id_get(id: string): Observable<TransportSendberry_get> {
			return this.http.get<TransportSendberry_get>(this.baseUri + 'api/transport-sendberry/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSendberry resource.
		 * Replaces the TransportSendberry resource.
		 * Put api/transport-sendberry/{id}
		 * @param {string} id TransportSendberry identifier
		 * @param {TransportSendberry_put} requestBody The updated TransportSendberry resource
		 * @return {TransportSendberry_get} TransportSendberry resource updated
		 */
		Api_transport_sendberry_id_put(id: string, requestBody: TransportSendberry_put): Observable<TransportSendberry_get> {
			return this.http.put<TransportSendberry_get>(this.baseUri + 'api/transport-sendberry/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSendinblue resources.
		 * Retrieves the collection of TransportSendinblue resources.
		 * Get api/transport-sendinblue
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSendinblue_get>} TransportSendinblue collection
		 */
		Api_transport_sendinblue_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSendinblue_get>> {
			return this.http.get<Array<TransportSendinblue_get>>(this.baseUri + 'api/transport-sendinblue?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSendinblue resource.
		 * Creates a TransportSendinblue resource.
		 * Post api/transport-sendinblue
		 * @param {TransportSendinblue_post} requestBody The new TransportSendinblue resource
		 * @return {void} 
		 */
		Api_transport_sendinblue_post(requestBody: TransportSendinblue_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-sendinblue', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSendinblue resource.
		 * Removes the TransportSendinblue resource.
		 * Delete api/transport-sendinblue/{id}
		 * @param {string} id TransportSendinblue identifier
		 * @return {void} 
		 */
		Api_transport_sendinblue_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-sendinblue/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSendinblue resource.
		 * Retrieves a TransportSendinblue resource.
		 * Get api/transport-sendinblue/{id}
		 * @param {string} id TransportSendinblue identifier
		 * @return {TransportSendinblue_get} TransportSendinblue resource
		 */
		Api_transport_sendinblue_id_get(id: string): Observable<TransportSendinblue_get> {
			return this.http.get<TransportSendinblue_get>(this.baseUri + 'api/transport-sendinblue/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSendinblue resource.
		 * Replaces the TransportSendinblue resource.
		 * Put api/transport-sendinblue/{id}
		 * @param {string} id TransportSendinblue identifier
		 * @param {TransportSendinblue_put} requestBody The updated TransportSendinblue resource
		 * @return {TransportSendinblue_get} TransportSendinblue resource updated
		 */
		Api_transport_sendinblue_id_put(id: string, requestBody: TransportSendinblue_put): Observable<TransportSendinblue_get> {
			return this.http.put<TransportSendinblue_get>(this.baseUri + 'api/transport-sendinblue/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSimpleTextin resources.
		 * Retrieves the collection of TransportSimpleTextin resources.
		 * Get api/transport-simple-textin
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSimpleTextin_get>} TransportSimpleTextin collection
		 */
		Api_transport_simple_textin_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSimpleTextin_get>> {
			return this.http.get<Array<TransportSimpleTextin_get>>(this.baseUri + 'api/transport-simple-textin?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSimpleTextin resource.
		 * Creates a TransportSimpleTextin resource.
		 * Post api/transport-simple-textin
		 * @param {TransportSimpleTextin_post} requestBody The new TransportSimpleTextin resource
		 * @return {void} 
		 */
		Api_transport_simple_textin_post(requestBody: TransportSimpleTextin_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-simple-textin', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSimpleTextin resource.
		 * Removes the TransportSimpleTextin resource.
		 * Delete api/transport-simple-textin/{id}
		 * @param {string} id TransportSimpleTextin identifier
		 * @return {void} 
		 */
		Api_transport_simple_textin_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-simple-textin/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSimpleTextin resource.
		 * Retrieves a TransportSimpleTextin resource.
		 * Get api/transport-simple-textin/{id}
		 * @param {string} id TransportSimpleTextin identifier
		 * @return {TransportSimpleTextin_get} TransportSimpleTextin resource
		 */
		Api_transport_simple_textin_id_get(id: string): Observable<TransportSimpleTextin_get> {
			return this.http.get<TransportSimpleTextin_get>(this.baseUri + 'api/transport-simple-textin/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSimpleTextin resource.
		 * Replaces the TransportSimpleTextin resource.
		 * Put api/transport-simple-textin/{id}
		 * @param {string} id TransportSimpleTextin identifier
		 * @param {TransportSimpleTextin_put} requestBody The updated TransportSimpleTextin resource
		 * @return {TransportSimpleTextin_get} TransportSimpleTextin resource updated
		 */
		Api_transport_simple_textin_id_put(id: string, requestBody: TransportSimpleTextin_put): Observable<TransportSimpleTextin_get> {
			return this.http.put<TransportSimpleTextin_get>(this.baseUri + 'api/transport-simple-textin/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSinch resources.
		 * Retrieves the collection of TransportSinch resources.
		 * Get api/transport-sinch
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSinch_get>} TransportSinch collection
		 */
		Api_transport_sinch_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSinch_get>> {
			return this.http.get<Array<TransportSinch_get>>(this.baseUri + 'api/transport-sinch?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSinch resource.
		 * Creates a TransportSinch resource.
		 * Post api/transport-sinch
		 * @param {TransportSinch_post} requestBody The new TransportSinch resource
		 * @return {void} 
		 */
		Api_transport_sinch_post(requestBody: TransportSinch_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-sinch', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSinch resource.
		 * Removes the TransportSinch resource.
		 * Delete api/transport-sinch/{id}
		 * @param {string} id TransportSinch identifier
		 * @return {void} 
		 */
		Api_transport_sinch_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-sinch/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSinch resource.
		 * Retrieves a TransportSinch resource.
		 * Get api/transport-sinch/{id}
		 * @param {string} id TransportSinch identifier
		 * @return {TransportSinch_get} TransportSinch resource
		 */
		Api_transport_sinch_id_get(id: string): Observable<TransportSinch_get> {
			return this.http.get<TransportSinch_get>(this.baseUri + 'api/transport-sinch/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSinch resource.
		 * Replaces the TransportSinch resource.
		 * Put api/transport-sinch/{id}
		 * @param {string} id TransportSinch identifier
		 * @param {TransportSinch_put} requestBody The updated TransportSinch resource
		 * @return {TransportSinch_get} TransportSinch resource updated
		 */
		Api_transport_sinch_id_put(id: string, requestBody: TransportSinch_put): Observable<TransportSinch_get> {
			return this.http.put<TransportSinch_get>(this.baseUri + 'api/transport-sinch/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSlack resources.
		 * Retrieves the collection of TransportSlack resources.
		 * Get api/transport-slack
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSlack_get>} TransportSlack collection
		 */
		Api_transport_slack_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSlack_get>> {
			return this.http.get<Array<TransportSlack_get>>(this.baseUri + 'api/transport-slack?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSlack resource.
		 * Creates a TransportSlack resource.
		 * Post api/transport-slack
		 * @param {TransportSlack_post} requestBody The new TransportSlack resource
		 * @return {void} 
		 */
		Api_transport_slack_post(requestBody: TransportSlack_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-slack', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSlack resource.
		 * Removes the TransportSlack resource.
		 * Delete api/transport-slack/{id}
		 * @param {string} id TransportSlack identifier
		 * @return {void} 
		 */
		Api_transport_slack_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-slack/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSlack resource.
		 * Retrieves a TransportSlack resource.
		 * Get api/transport-slack/{id}
		 * @param {string} id TransportSlack identifier
		 * @return {TransportSlack_get} TransportSlack resource
		 */
		Api_transport_slack_id_get(id: string): Observable<TransportSlack_get> {
			return this.http.get<TransportSlack_get>(this.baseUri + 'api/transport-slack/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSlack resource.
		 * Replaces the TransportSlack resource.
		 * Put api/transport-slack/{id}
		 * @param {string} id TransportSlack identifier
		 * @param {TransportSlack_put} requestBody The updated TransportSlack resource
		 * @return {TransportSlack_get} TransportSlack resource updated
		 */
		Api_transport_slack_id_put(id: string, requestBody: TransportSlack_put): Observable<TransportSlack_get> {
			return this.http.put<TransportSlack_get>(this.baseUri + 'api/transport-slack/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSmsBiuras resources.
		 * Retrieves the collection of TransportSmsBiuras resources.
		 * Get api/transport-sms-biuras
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSmsBiuras_get>} TransportSmsBiuras collection
		 */
		Api_transport_sms_biuras_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSmsBiuras_get>> {
			return this.http.get<Array<TransportSmsBiuras_get>>(this.baseUri + 'api/transport-sms-biuras?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSmsBiuras resource.
		 * Creates a TransportSmsBiuras resource.
		 * Post api/transport-sms-biuras
		 * @param {TransportSmsBiuras_post} requestBody The new TransportSmsBiuras resource
		 * @return {void} 
		 */
		Api_transport_sms_biuras_post(requestBody: TransportSmsBiuras_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-sms-biuras', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSmsBiuras resource.
		 * Removes the TransportSmsBiuras resource.
		 * Delete api/transport-sms-biuras/{id}
		 * @param {string} id TransportSmsBiuras identifier
		 * @return {void} 
		 */
		Api_transport_sms_biuras_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-sms-biuras/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSmsBiuras resource.
		 * Retrieves a TransportSmsBiuras resource.
		 * Get api/transport-sms-biuras/{id}
		 * @param {string} id TransportSmsBiuras identifier
		 * @return {TransportSmsBiuras_get} TransportSmsBiuras resource
		 */
		Api_transport_sms_biuras_id_get(id: string): Observable<TransportSmsBiuras_get> {
			return this.http.get<TransportSmsBiuras_get>(this.baseUri + 'api/transport-sms-biuras/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSmsBiuras resource.
		 * Replaces the TransportSmsBiuras resource.
		 * Put api/transport-sms-biuras/{id}
		 * @param {string} id TransportSmsBiuras identifier
		 * @param {TransportSmsBiuras_put} requestBody The updated TransportSmsBiuras resource
		 * @return {TransportSmsBiuras_get} TransportSmsBiuras resource updated
		 */
		Api_transport_sms_biuras_id_put(id: string, requestBody: TransportSmsBiuras_put): Observable<TransportSmsBiuras_get> {
			return this.http.put<TransportSmsBiuras_get>(this.baseUri + 'api/transport-sms-biuras/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSmsFactor resources.
		 * Retrieves the collection of TransportSmsFactor resources.
		 * Get api/transport-sms-factor
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSmsFactor_get>} TransportSmsFactor collection
		 */
		Api_transport_sms_factor_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSmsFactor_get>> {
			return this.http.get<Array<TransportSmsFactor_get>>(this.baseUri + 'api/transport-sms-factor?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSmsFactor resource.
		 * Creates a TransportSmsFactor resource.
		 * Post api/transport-sms-factor
		 * @param {TransportSmsFactor_post} requestBody The new TransportSmsFactor resource
		 * @return {void} 
		 */
		Api_transport_sms_factor_post(requestBody: TransportSmsFactor_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-sms-factor', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSmsFactor resource.
		 * Removes the TransportSmsFactor resource.
		 * Delete api/transport-sms-factor/{id}
		 * @param {string} id TransportSmsFactor identifier
		 * @return {void} 
		 */
		Api_transport_sms_factor_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-sms-factor/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSmsFactor resource.
		 * Retrieves a TransportSmsFactor resource.
		 * Get api/transport-sms-factor/{id}
		 * @param {string} id TransportSmsFactor identifier
		 * @return {TransportSmsFactor_get} TransportSmsFactor resource
		 */
		Api_transport_sms_factor_id_get(id: string): Observable<TransportSmsFactor_get> {
			return this.http.get<TransportSmsFactor_get>(this.baseUri + 'api/transport-sms-factor/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSmsFactor resource.
		 * Replaces the TransportSmsFactor resource.
		 * Put api/transport-sms-factor/{id}
		 * @param {string} id TransportSmsFactor identifier
		 * @param {TransportSmsFactor_put} requestBody The updated TransportSmsFactor resource
		 * @return {TransportSmsFactor_get} TransportSmsFactor resource updated
		 */
		Api_transport_sms_factor_id_put(id: string, requestBody: TransportSmsFactor_put): Observable<TransportSmsFactor_get> {
			return this.http.put<TransportSmsFactor_get>(this.baseUri + 'api/transport-sms-factor/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSms77 resources.
		 * Retrieves the collection of TransportSms77 resources.
		 * Get api/transport-sms77
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSms77_get>} TransportSms77 collection
		 */
		Api_transport_sms77_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSms77_get>> {
			return this.http.get<Array<TransportSms77_get>>(this.baseUri + 'api/transport-sms77?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSms77 resource.
		 * Creates a TransportSms77 resource.
		 * Post api/transport-sms77
		 * @param {TransportSms77_post} requestBody The new TransportSms77 resource
		 * @return {void} 
		 */
		Api_transport_sms77_post(requestBody: TransportSms77_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-sms77', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSms77 resource.
		 * Removes the TransportSms77 resource.
		 * Delete api/transport-sms77/{id}
		 * @param {string} id TransportSms77 identifier
		 * @return {void} 
		 */
		Api_transport_sms77_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-sms77/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSms77 resource.
		 * Retrieves a TransportSms77 resource.
		 * Get api/transport-sms77/{id}
		 * @param {string} id TransportSms77 identifier
		 * @return {TransportSms77_get} TransportSms77 resource
		 */
		Api_transport_sms77_id_get(id: string): Observable<TransportSms77_get> {
			return this.http.get<TransportSms77_get>(this.baseUri + 'api/transport-sms77/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSms77 resource.
		 * Replaces the TransportSms77 resource.
		 * Put api/transport-sms77/{id}
		 * @param {string} id TransportSms77 identifier
		 * @param {TransportSms77_put} requestBody The updated TransportSms77 resource
		 * @return {TransportSms77_get} TransportSms77 resource updated
		 */
		Api_transport_sms77_id_put(id: string, requestBody: TransportSms77_put): Observable<TransportSms77_get> {
			return this.http.put<TransportSms77_get>(this.baseUri + 'api/transport-sms77/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSmsapi resources.
		 * Retrieves the collection of TransportSmsapi resources.
		 * Get api/transport-smsapi
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSmsapi_get>} TransportSmsapi collection
		 */
		Api_transport_smsapi_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSmsapi_get>> {
			return this.http.get<Array<TransportSmsapi_get>>(this.baseUri + 'api/transport-smsapi?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSmsapi resource.
		 * Creates a TransportSmsapi resource.
		 * Post api/transport-smsapi
		 * @param {TransportSmsapi_post} requestBody The new TransportSmsapi resource
		 * @return {void} 
		 */
		Api_transport_smsapi_post(requestBody: TransportSmsapi_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-smsapi', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSmsapi resource.
		 * Removes the TransportSmsapi resource.
		 * Delete api/transport-smsapi/{id}
		 * @param {string} id TransportSmsapi identifier
		 * @return {void} 
		 */
		Api_transport_smsapi_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-smsapi/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSmsapi resource.
		 * Retrieves a TransportSmsapi resource.
		 * Get api/transport-smsapi/{id}
		 * @param {string} id TransportSmsapi identifier
		 * @return {TransportSmsapi_get} TransportSmsapi resource
		 */
		Api_transport_smsapi_id_get(id: string): Observable<TransportSmsapi_get> {
			return this.http.get<TransportSmsapi_get>(this.baseUri + 'api/transport-smsapi/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSmsapi resource.
		 * Replaces the TransportSmsapi resource.
		 * Put api/transport-smsapi/{id}
		 * @param {string} id TransportSmsapi identifier
		 * @param {TransportSmsapi_put} requestBody The updated TransportSmsapi resource
		 * @return {TransportSmsapi_get} TransportSmsapi resource updated
		 */
		Api_transport_smsapi_id_put(id: string, requestBody: TransportSmsapi_put): Observable<TransportSmsapi_get> {
			return this.http.put<TransportSmsapi_get>(this.baseUri + 'api/transport-smsapi/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSmsc resources.
		 * Retrieves the collection of TransportSmsc resources.
		 * Get api/transport-smsc
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSmsc_get>} TransportSmsc collection
		 */
		Api_transport_smsc_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSmsc_get>> {
			return this.http.get<Array<TransportSmsc_get>>(this.baseUri + 'api/transport-smsc?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSmsc resource.
		 * Creates a TransportSmsc resource.
		 * Post api/transport-smsc
		 * @param {TransportSmsc_post} requestBody The new TransportSmsc resource
		 * @return {void} 
		 */
		Api_transport_smsc_post(requestBody: TransportSmsc_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-smsc', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSmsc resource.
		 * Removes the TransportSmsc resource.
		 * Delete api/transport-smsc/{id}
		 * @param {string} id TransportSmsc identifier
		 * @return {void} 
		 */
		Api_transport_smsc_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-smsc/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSmsc resource.
		 * Retrieves a TransportSmsc resource.
		 * Get api/transport-smsc/{id}
		 * @param {string} id TransportSmsc identifier
		 * @return {TransportSmsc_get} TransportSmsc resource
		 */
		Api_transport_smsc_id_get(id: string): Observable<TransportSmsc_get> {
			return this.http.get<TransportSmsc_get>(this.baseUri + 'api/transport-smsc/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSmsc resource.
		 * Replaces the TransportSmsc resource.
		 * Put api/transport-smsc/{id}
		 * @param {string} id TransportSmsc identifier
		 * @param {TransportSmsc_put} requestBody The updated TransportSmsc resource
		 * @return {TransportSmsc_get} TransportSmsc resource updated
		 */
		Api_transport_smsc_id_put(id: string, requestBody: TransportSmsc_put): Observable<TransportSmsc_get> {
			return this.http.put<TransportSmsc_get>(this.baseUri + 'api/transport-smsc/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSmsmode resources.
		 * Retrieves the collection of TransportSmsmode resources.
		 * Get api/transport-smsmode
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSmsmode_get>} TransportSmsmode collection
		 */
		Api_transport_smsmode_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSmsmode_get>> {
			return this.http.get<Array<TransportSmsmode_get>>(this.baseUri + 'api/transport-smsmode?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSmsmode resource.
		 * Creates a TransportSmsmode resource.
		 * Post api/transport-smsmode
		 * @param {TransportSmsmode_post} requestBody The new TransportSmsmode resource
		 * @return {void} 
		 */
		Api_transport_smsmode_post(requestBody: TransportSmsmode_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-smsmode', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSmsmode resource.
		 * Removes the TransportSmsmode resource.
		 * Delete api/transport-smsmode/{id}
		 * @param {string} id TransportSmsmode identifier
		 * @return {void} 
		 */
		Api_transport_smsmode_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-smsmode/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSmsmode resource.
		 * Retrieves a TransportSmsmode resource.
		 * Get api/transport-smsmode/{id}
		 * @param {string} id TransportSmsmode identifier
		 * @return {TransportSmsmode_get} TransportSmsmode resource
		 */
		Api_transport_smsmode_id_get(id: string): Observable<TransportSmsmode_get> {
			return this.http.get<TransportSmsmode_get>(this.baseUri + 'api/transport-smsmode/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSmsmode resource.
		 * Replaces the TransportSmsmode resource.
		 * Put api/transport-smsmode/{id}
		 * @param {string} id TransportSmsmode identifier
		 * @param {TransportSmsmode_put} requestBody The updated TransportSmsmode resource
		 * @return {TransportSmsmode_get} TransportSmsmode resource updated
		 */
		Api_transport_smsmode_id_put(id: string, requestBody: TransportSmsmode_put): Observable<TransportSmsmode_get> {
			return this.http.put<TransportSmsmode_get>(this.baseUri + 'api/transport-smsmode/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportSpotHit resources.
		 * Retrieves the collection of TransportSpotHit resources.
		 * Get api/transport-spot-hit
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportSpotHit_get>} TransportSpotHit collection
		 */
		Api_transport_spot_hit_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportSpotHit_get>> {
			return this.http.get<Array<TransportSpotHit_get>>(this.baseUri + 'api/transport-spot-hit?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportSpotHit resource.
		 * Creates a TransportSpotHit resource.
		 * Post api/transport-spot-hit
		 * @param {TransportSpotHit_post} requestBody The new TransportSpotHit resource
		 * @return {void} 
		 */
		Api_transport_spot_hit_post(requestBody: TransportSpotHit_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-spot-hit', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportSpotHit resource.
		 * Removes the TransportSpotHit resource.
		 * Delete api/transport-spot-hit/{id}
		 * @param {string} id TransportSpotHit identifier
		 * @return {void} 
		 */
		Api_transport_spot_hit_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-spot-hit/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportSpotHit resource.
		 * Retrieves a TransportSpotHit resource.
		 * Get api/transport-spot-hit/{id}
		 * @param {string} id TransportSpotHit identifier
		 * @return {TransportSpotHit_get} TransportSpotHit resource
		 */
		Api_transport_spot_hit_id_get(id: string): Observable<TransportSpotHit_get> {
			return this.http.get<TransportSpotHit_get>(this.baseUri + 'api/transport-spot-hit/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportSpotHit resource.
		 * Replaces the TransportSpotHit resource.
		 * Put api/transport-spot-hit/{id}
		 * @param {string} id TransportSpotHit identifier
		 * @param {TransportSpotHit_put} requestBody The updated TransportSpotHit resource
		 * @return {TransportSpotHit_get} TransportSpotHit resource updated
		 */
		Api_transport_spot_hit_id_put(id: string, requestBody: TransportSpotHit_put): Observable<TransportSpotHit_get> {
			return this.http.put<TransportSpotHit_get>(this.baseUri + 'api/transport-spot-hit/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportTelegram resources.
		 * Retrieves the collection of TransportTelegram resources.
		 * Get api/transport-telegram
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportTelegram_get>} TransportTelegram collection
		 */
		Api_transport_telegram_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportTelegram_get>> {
			return this.http.get<Array<TransportTelegram_get>>(this.baseUri + 'api/transport-telegram?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportTelegram resource.
		 * Creates a TransportTelegram resource.
		 * Post api/transport-telegram
		 * @param {TransportTelegram_post} requestBody The new TransportTelegram resource
		 * @return {void} 
		 */
		Api_transport_telegram_post(requestBody: TransportTelegram_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-telegram', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportTelegram resource.
		 * Removes the TransportTelegram resource.
		 * Delete api/transport-telegram/{id}
		 * @param {string} id TransportTelegram identifier
		 * @return {void} 
		 */
		Api_transport_telegram_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-telegram/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportTelegram resource.
		 * Retrieves a TransportTelegram resource.
		 * Get api/transport-telegram/{id}
		 * @param {string} id TransportTelegram identifier
		 * @return {TransportTelegram_get} TransportTelegram resource
		 */
		Api_transport_telegram_id_get(id: string): Observable<TransportTelegram_get> {
			return this.http.get<TransportTelegram_get>(this.baseUri + 'api/transport-telegram/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportTelegram resource.
		 * Replaces the TransportTelegram resource.
		 * Put api/transport-telegram/{id}
		 * @param {string} id TransportTelegram identifier
		 * @param {TransportTelegram_put} requestBody The updated TransportTelegram resource
		 * @return {TransportTelegram_get} TransportTelegram resource updated
		 */
		Api_transport_telegram_id_put(id: string, requestBody: TransportTelegram_put): Observable<TransportTelegram_get> {
			return this.http.put<TransportTelegram_get>(this.baseUri + 'api/transport-telegram/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportTelnyx resources.
		 * Retrieves the collection of TransportTelnyx resources.
		 * Get api/transport-telnyx
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportTelnyx_get>} TransportTelnyx collection
		 */
		Api_transport_telnyx_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportTelnyx_get>> {
			return this.http.get<Array<TransportTelnyx_get>>(this.baseUri + 'api/transport-telnyx?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportTelnyx resource.
		 * Creates a TransportTelnyx resource.
		 * Post api/transport-telnyx
		 * @param {TransportTelnyx_post} requestBody The new TransportTelnyx resource
		 * @return {void} 
		 */
		Api_transport_telnyx_post(requestBody: TransportTelnyx_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-telnyx', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportTelnyx resource.
		 * Removes the TransportTelnyx resource.
		 * Delete api/transport-telnyx/{id}
		 * @param {string} id TransportTelnyx identifier
		 * @return {void} 
		 */
		Api_transport_telnyx_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-telnyx/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportTelnyx resource.
		 * Retrieves a TransportTelnyx resource.
		 * Get api/transport-telnyx/{id}
		 * @param {string} id TransportTelnyx identifier
		 * @return {TransportTelnyx_get} TransportTelnyx resource
		 */
		Api_transport_telnyx_id_get(id: string): Observable<TransportTelnyx_get> {
			return this.http.get<TransportTelnyx_get>(this.baseUri + 'api/transport-telnyx/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportTelnyx resource.
		 * Replaces the TransportTelnyx resource.
		 * Put api/transport-telnyx/{id}
		 * @param {string} id TransportTelnyx identifier
		 * @param {TransportTelnyx_put} requestBody The updated TransportTelnyx resource
		 * @return {TransportTelnyx_get} TransportTelnyx resource updated
		 */
		Api_transport_telnyx_id_put(id: string, requestBody: TransportTelnyx_put): Observable<TransportTelnyx_get> {
			return this.http.put<TransportTelnyx_get>(this.baseUri + 'api/transport-telnyx/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportTermii resources.
		 * Retrieves the collection of TransportTermii resources.
		 * Get api/transport-termii
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportTermii_get>} TransportTermii collection
		 */
		Api_transport_termii_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportTermii_get>> {
			return this.http.get<Array<TransportTermii_get>>(this.baseUri + 'api/transport-termii?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportTermii resource.
		 * Creates a TransportTermii resource.
		 * Post api/transport-termii
		 * @param {TransportTermii_post} requestBody The new TransportTermii resource
		 * @return {void} 
		 */
		Api_transport_termii_post(requestBody: TransportTermii_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-termii', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportTermii resource.
		 * Removes the TransportTermii resource.
		 * Delete api/transport-termii/{id}
		 * @param {string} id TransportTermii identifier
		 * @return {void} 
		 */
		Api_transport_termii_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-termii/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportTermii resource.
		 * Retrieves a TransportTermii resource.
		 * Get api/transport-termii/{id}
		 * @param {string} id TransportTermii identifier
		 * @return {TransportTermii_get} TransportTermii resource
		 */
		Api_transport_termii_id_get(id: string): Observable<TransportTermii_get> {
			return this.http.get<TransportTermii_get>(this.baseUri + 'api/transport-termii/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportTermii resource.
		 * Replaces the TransportTermii resource.
		 * Put api/transport-termii/{id}
		 * @param {string} id TransportTermii identifier
		 * @param {TransportTermii_put} requestBody The updated TransportTermii resource
		 * @return {TransportTermii_get} TransportTermii resource updated
		 */
		Api_transport_termii_id_put(id: string, requestBody: TransportTermii_put): Observable<TransportTermii_get> {
			return this.http.put<TransportTermii_get>(this.baseUri + 'api/transport-termii/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportTrello resources.
		 * Retrieves the collection of TransportTrello resources.
		 * Get api/transport-trello
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportTrello_get>} TransportTrello collection
		 */
		Api_transport_trello_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportTrello_get>> {
			return this.http.get<Array<TransportTrello_get>>(this.baseUri + 'api/transport-trello?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportTrello resource.
		 * Creates a TransportTrello resource.
		 * Post api/transport-trello
		 * @param {TransportTrello_post} requestBody The new TransportTrello resource
		 * @return {void} 
		 */
		Api_transport_trello_post(requestBody: TransportTrello_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-trello', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportTrello resource.
		 * Removes the TransportTrello resource.
		 * Delete api/transport-trello/{id}
		 * @param {string} id TransportTrello identifier
		 * @return {void} 
		 */
		Api_transport_trello_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-trello/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportTrello resource.
		 * Retrieves a TransportTrello resource.
		 * Get api/transport-trello/{id}
		 * @param {string} id TransportTrello identifier
		 * @return {TransportTrello_get} TransportTrello resource
		 */
		Api_transport_trello_id_get(id: string): Observable<TransportTrello_get> {
			return this.http.get<TransportTrello_get>(this.baseUri + 'api/transport-trello/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportTrello resource.
		 * Replaces the TransportTrello resource.
		 * Put api/transport-trello/{id}
		 * @param {string} id TransportTrello identifier
		 * @param {TransportTrello_put} requestBody The updated TransportTrello resource
		 * @return {TransportTrello_get} TransportTrello resource updated
		 */
		Api_transport_trello_id_put(id: string, requestBody: TransportTrello_put): Observable<TransportTrello_get> {
			return this.http.put<TransportTrello_get>(this.baseUri + 'api/transport-trello/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportTurboSms resources.
		 * Retrieves the collection of TransportTurboSms resources.
		 * Get api/transport-turbo-sms
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportTurboSms_get>} TransportTurboSms collection
		 */
		Api_transport_turbo_sms_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportTurboSms_get>> {
			return this.http.get<Array<TransportTurboSms_get>>(this.baseUri + 'api/transport-turbo-sms?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportTurboSms resource.
		 * Creates a TransportTurboSms resource.
		 * Post api/transport-turbo-sms
		 * @param {TransportTurboSms_post} requestBody The new TransportTurboSms resource
		 * @return {void} 
		 */
		Api_transport_turbo_sms_post(requestBody: TransportTurboSms_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-turbo-sms', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportTurboSms resource.
		 * Removes the TransportTurboSms resource.
		 * Delete api/transport-turbo-sms/{id}
		 * @param {string} id TransportTurboSms identifier
		 * @return {void} 
		 */
		Api_transport_turbo_sms_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-turbo-sms/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportTurboSms resource.
		 * Retrieves a TransportTurboSms resource.
		 * Get api/transport-turbo-sms/{id}
		 * @param {string} id TransportTurboSms identifier
		 * @return {TransportTurboSms_get} TransportTurboSms resource
		 */
		Api_transport_turbo_sms_id_get(id: string): Observable<TransportTurboSms_get> {
			return this.http.get<TransportTurboSms_get>(this.baseUri + 'api/transport-turbo-sms/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportTurboSms resource.
		 * Replaces the TransportTurboSms resource.
		 * Put api/transport-turbo-sms/{id}
		 * @param {string} id TransportTurboSms identifier
		 * @param {TransportTurboSms_put} requestBody The updated TransportTurboSms resource
		 * @return {TransportTurboSms_get} TransportTurboSms resource updated
		 */
		Api_transport_turbo_sms_id_put(id: string, requestBody: TransportTurboSms_put): Observable<TransportTurboSms_get> {
			return this.http.put<TransportTurboSms_get>(this.baseUri + 'api/transport-turbo-sms/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportTwilio resources.
		 * Retrieves the collection of TransportTwilio resources.
		 * Get api/transport-twilio
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportTwilio_get>} TransportTwilio collection
		 */
		Api_transport_twilio_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportTwilio_get>> {
			return this.http.get<Array<TransportTwilio_get>>(this.baseUri + 'api/transport-twilio?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportTwilio resource.
		 * Creates a TransportTwilio resource.
		 * Post api/transport-twilio
		 * @param {TransportTwilio_post} requestBody The new TransportTwilio resource
		 * @return {void} 
		 */
		Api_transport_twilio_post(requestBody: TransportTwilio_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-twilio', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportTwilio resource.
		 * Removes the TransportTwilio resource.
		 * Delete api/transport-twilio/{id}
		 * @param {string} id TransportTwilio identifier
		 * @return {void} 
		 */
		Api_transport_twilio_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-twilio/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportTwilio resource.
		 * Retrieves a TransportTwilio resource.
		 * Get api/transport-twilio/{id}
		 * @param {string} id TransportTwilio identifier
		 * @return {TransportTwilio_get} TransportTwilio resource
		 */
		Api_transport_twilio_id_get(id: string): Observable<TransportTwilio_get> {
			return this.http.get<TransportTwilio_get>(this.baseUri + 'api/transport-twilio/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportTwilio resource.
		 * Replaces the TransportTwilio resource.
		 * Put api/transport-twilio/{id}
		 * @param {string} id TransportTwilio identifier
		 * @param {TransportTwilio_put} requestBody The updated TransportTwilio resource
		 * @return {TransportTwilio_get} TransportTwilio resource updated
		 */
		Api_transport_twilio_id_put(id: string, requestBody: TransportTwilio_put): Observable<TransportTwilio_get> {
			return this.http.put<TransportTwilio_get>(this.baseUri + 'api/transport-twilio/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportTwitter resources.
		 * Retrieves the collection of TransportTwitter resources.
		 * Get api/transport-twitter
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportTwitter_get>} TransportTwitter collection
		 */
		Api_transport_twitter_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportTwitter_get>> {
			return this.http.get<Array<TransportTwitter_get>>(this.baseUri + 'api/transport-twitter?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportTwitter resource.
		 * Creates a TransportTwitter resource.
		 * Post api/transport-twitter
		 * @param {TransportTwitter_post} requestBody The new TransportTwitter resource
		 * @return {void} 
		 */
		Api_transport_twitter_post(requestBody: TransportTwitter_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-twitter', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportTwitter resource.
		 * Removes the TransportTwitter resource.
		 * Delete api/transport-twitter/{id}
		 * @param {string} id TransportTwitter identifier
		 * @return {void} 
		 */
		Api_transport_twitter_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-twitter/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportTwitter resource.
		 * Retrieves a TransportTwitter resource.
		 * Get api/transport-twitter/{id}
		 * @param {string} id TransportTwitter identifier
		 * @return {TransportTwitter_get} TransportTwitter resource
		 */
		Api_transport_twitter_id_get(id: string): Observable<TransportTwitter_get> {
			return this.http.get<TransportTwitter_get>(this.baseUri + 'api/transport-twitter/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportTwitter resource.
		 * Replaces the TransportTwitter resource.
		 * Put api/transport-twitter/{id}
		 * @param {string} id TransportTwitter identifier
		 * @param {TransportTwitter_put} requestBody The updated TransportTwitter resource
		 * @return {TransportTwitter_get} TransportTwitter resource updated
		 */
		Api_transport_twitter_id_put(id: string, requestBody: TransportTwitter_put): Observable<TransportTwitter_get> {
			return this.http.put<TransportTwitter_get>(this.baseUri + 'api/transport-twitter/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportVonage resources.
		 * Retrieves the collection of TransportVonage resources.
		 * Get api/transport-vonage
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportVonage_get>} TransportVonage collection
		 */
		Api_transport_vonage_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportVonage_get>> {
			return this.http.get<Array<TransportVonage_get>>(this.baseUri + 'api/transport-vonage?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportVonage resource.
		 * Creates a TransportVonage resource.
		 * Post api/transport-vonage
		 * @param {TransportVonage_post} requestBody The new TransportVonage resource
		 * @return {void} 
		 */
		Api_transport_vonage_post(requestBody: TransportVonage_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-vonage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportVonage resource.
		 * Removes the TransportVonage resource.
		 * Delete api/transport-vonage/{id}
		 * @param {string} id TransportVonage identifier
		 * @return {void} 
		 */
		Api_transport_vonage_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-vonage/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportVonage resource.
		 * Retrieves a TransportVonage resource.
		 * Get api/transport-vonage/{id}
		 * @param {string} id TransportVonage identifier
		 * @return {TransportVonage_get} TransportVonage resource
		 */
		Api_transport_vonage_id_get(id: string): Observable<TransportVonage_get> {
			return this.http.get<TransportVonage_get>(this.baseUri + 'api/transport-vonage/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportVonage resource.
		 * Replaces the TransportVonage resource.
		 * Put api/transport-vonage/{id}
		 * @param {string} id TransportVonage identifier
		 * @param {TransportVonage_put} requestBody The updated TransportVonage resource
		 * @return {TransportVonage_get} TransportVonage resource updated
		 */
		Api_transport_vonage_id_put(id: string, requestBody: TransportVonage_put): Observable<TransportVonage_get> {
			return this.http.put<TransportVonage_get>(this.baseUri + 'api/transport-vonage/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportWebhook resources.
		 * Retrieves the collection of TransportWebhook resources.
		 * Get api/transport-webhook
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportWebhook_get>} TransportWebhook collection
		 */
		Api_transport_webhook_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportWebhook_get>> {
			return this.http.get<Array<TransportWebhook_get>>(this.baseUri + 'api/transport-webhook?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportWebhook resource.
		 * Creates a TransportWebhook resource.
		 * Post api/transport-webhook
		 * @param {TransportWebhook_post} requestBody The new TransportWebhook resource
		 * @return {void} 
		 */
		Api_transport_webhook_post(requestBody: TransportWebhook_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-webhook', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportWebhook resource.
		 * Removes the TransportWebhook resource.
		 * Delete api/transport-webhook/{id}
		 * @param {string} id TransportWebhook identifier
		 * @return {void} 
		 */
		Api_transport_webhook_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-webhook/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportWebhook resource.
		 * Retrieves a TransportWebhook resource.
		 * Get api/transport-webhook/{id}
		 * @param {string} id TransportWebhook identifier
		 * @return {TransportWebhook_get} TransportWebhook resource
		 */
		Api_transport_webhook_id_get(id: string): Observable<TransportWebhook_get> {
			return this.http.get<TransportWebhook_get>(this.baseUri + 'api/transport-webhook/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportWebhook resource.
		 * Replaces the TransportWebhook resource.
		 * Put api/transport-webhook/{id}
		 * @param {string} id TransportWebhook identifier
		 * @param {TransportWebhook_put} requestBody The updated TransportWebhook resource
		 * @return {TransportWebhook_get} TransportWebhook resource updated
		 */
		Api_transport_webhook_id_put(id: string, requestBody: TransportWebhook_put): Observable<TransportWebhook_get> {
			return this.http.put<TransportWebhook_get>(this.baseUri + 'api/transport-webhook/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportYunpian resources.
		 * Retrieves the collection of TransportYunpian resources.
		 * Get api/transport-yunpian
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportYunpian_get>} TransportYunpian collection
		 */
		Api_transport_yunpian_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportYunpian_get>> {
			return this.http.get<Array<TransportYunpian_get>>(this.baseUri + 'api/transport-yunpian?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportYunpian resource.
		 * Creates a TransportYunpian resource.
		 * Post api/transport-yunpian
		 * @param {TransportYunpian_post} requestBody The new TransportYunpian resource
		 * @return {void} 
		 */
		Api_transport_yunpian_post(requestBody: TransportYunpian_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-yunpian', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportYunpian resource.
		 * Removes the TransportYunpian resource.
		 * Delete api/transport-yunpian/{id}
		 * @param {string} id TransportYunpian identifier
		 * @return {void} 
		 */
		Api_transport_yunpian_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-yunpian/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportYunpian resource.
		 * Retrieves a TransportYunpian resource.
		 * Get api/transport-yunpian/{id}
		 * @param {string} id TransportYunpian identifier
		 * @return {TransportYunpian_get} TransportYunpian resource
		 */
		Api_transport_yunpian_id_get(id: string): Observable<TransportYunpian_get> {
			return this.http.get<TransportYunpian_get>(this.baseUri + 'api/transport-yunpian/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportYunpian resource.
		 * Replaces the TransportYunpian resource.
		 * Put api/transport-yunpian/{id}
		 * @param {string} id TransportYunpian identifier
		 * @param {TransportYunpian_put} requestBody The updated TransportYunpian resource
		 * @return {TransportYunpian_get} TransportYunpian resource updated
		 */
		Api_transport_yunpian_id_put(id: string, requestBody: TransportYunpian_put): Observable<TransportYunpian_get> {
			return this.http.put<TransportYunpian_get>(this.baseUri + 'api/transport-yunpian/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportZendesk resources.
		 * Retrieves the collection of TransportZendesk resources.
		 * Get api/transport-zendesk
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportZendesk_get>} TransportZendesk collection
		 */
		Api_transport_zendesk_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportZendesk_get>> {
			return this.http.get<Array<TransportZendesk_get>>(this.baseUri + 'api/transport-zendesk?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportZendesk resource.
		 * Creates a TransportZendesk resource.
		 * Post api/transport-zendesk
		 * @param {TransportZendesk_post} requestBody The new TransportZendesk resource
		 * @return {void} 
		 */
		Api_transport_zendesk_post(requestBody: TransportZendesk_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-zendesk', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportZendesk resource.
		 * Removes the TransportZendesk resource.
		 * Delete api/transport-zendesk/{id}
		 * @param {string} id TransportZendesk identifier
		 * @return {void} 
		 */
		Api_transport_zendesk_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-zendesk/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportZendesk resource.
		 * Retrieves a TransportZendesk resource.
		 * Get api/transport-zendesk/{id}
		 * @param {string} id TransportZendesk identifier
		 * @return {TransportZendesk_get} TransportZendesk resource
		 */
		Api_transport_zendesk_id_get(id: string): Observable<TransportZendesk_get> {
			return this.http.get<TransportZendesk_get>(this.baseUri + 'api/transport-zendesk/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportZendesk resource.
		 * Replaces the TransportZendesk resource.
		 * Put api/transport-zendesk/{id}
		 * @param {string} id TransportZendesk identifier
		 * @param {TransportZendesk_put} requestBody The updated TransportZendesk resource
		 * @return {TransportZendesk_get} TransportZendesk resource updated
		 */
		Api_transport_zendesk_id_put(id: string, requestBody: TransportZendesk_put): Observable<TransportZendesk_get> {
			return this.http.put<TransportZendesk_get>(this.baseUri + 'api/transport-zendesk/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of TransportZulip resources.
		 * Retrieves the collection of TransportZulip resources.
		 * Get api/transport-zulip
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<TransportZulip_get>} TransportZulip collection
		 */
		Api_transport_zulip_get_collection(page: number | null | undefined, dataSegmentCode: string | null | undefined, dataSegmentCode_: Array<string> | null | undefined, partition: string | null | undefined, partition_: Array<string> | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<TransportZulip_get>> {
			return this.http.get<Array<TransportZulip_get>>(this.baseUri + 'api/transport-zulip?page=' + page + '&dataSegmentCode=' + (dataSegmentCode == null ? '' : encodeURIComponent(dataSegmentCode)) + '&' + dataSegmentCode_?.map(z => `dataSegmentCode[]=${encodeURIComponent(z)}`).join('&') + '&partition=' + (partition == null ? '' : encodeURIComponent(partition)) + '&' + partition_?.map(z => `partition[]=${encodeURIComponent(z)}`).join('&') + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Creates a TransportZulip resource.
		 * Creates a TransportZulip resource.
		 * Post api/transport-zulip
		 * @param {TransportZulip_post} requestBody The new TransportZulip resource
		 * @return {void} 
		 */
		Api_transport_zulip_post(requestBody: TransportZulip_post): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + 'api/transport-zulip', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Removes the TransportZulip resource.
		 * Removes the TransportZulip resource.
		 * Delete api/transport-zulip/{id}
		 * @param {string} id TransportZulip identifier
		 * @return {void} 
		 */
		Api_transport_zulip_id_delete(id: string): Observable<HttpResponse<string>> {
			return this.http.delete(this.baseUri + 'api/transport-zulip/' + (id == null ? '' : encodeURIComponent(id)), { observe: 'response', responseType: 'text' });
		}

		/**
		 * Retrieves a TransportZulip resource.
		 * Retrieves a TransportZulip resource.
		 * Get api/transport-zulip/{id}
		 * @param {string} id TransportZulip identifier
		 * @return {TransportZulip_get} TransportZulip resource
		 */
		Api_transport_zulip_id_get(id: string): Observable<TransportZulip_get> {
			return this.http.get<TransportZulip_get>(this.baseUri + 'api/transport-zulip/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the TransportZulip resource.
		 * Replaces the TransportZulip resource.
		 * Put api/transport-zulip/{id}
		 * @param {string} id TransportZulip identifier
		 * @param {TransportZulip_put} requestBody The updated TransportZulip resource
		 * @return {TransportZulip_get} TransportZulip resource updated
		 */
		Api_transport_zulip_id_put(id: string, requestBody: TransportZulip_put): Observable<TransportZulip_get> {
			return this.http.put<TransportZulip_get>(this.baseUri + 'api/transport-zulip/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retrieves the collection of UserAccount resources.
		 * Retrieves the collection of UserAccount resources.
		 * Get api/user-account
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<UserAccount_get>} UserAccount collection
		 */
		Api_user_account_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<UserAccount_get>> {
			return this.http.get<Array<UserAccount_get>>(this.baseUri + 'api/user-account?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves the collection of UserAccountLevelCode resources.
		 * Retrieves the collection of UserAccountLevelCode resources.
		 * Get api/user-account-level-code
		 * @param {number} page The collection page number
		 * @param {Array<string>} properties_ Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]={propertyName}&properties[]={anotherPropertyName}&properties[{nestedPropertyParent}][]={nestedProperty}
		 * @return {Array<UserAccountLevelCode_get>} UserAccountLevelCode collection
		 */
		Api_user_account_level_code_get_collection(page: number | null | undefined, properties_: Array<string> | null | undefined): Observable<Array<UserAccountLevelCode_get>> {
			return this.http.get<Array<UserAccountLevelCode_get>>(this.baseUri + 'api/user-account-level-code?page=' + page + '&' + properties_?.map(z => `properties[]=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Retrieves a UserAccountLevelCode resource.
		 * Retrieves a UserAccountLevelCode resource.
		 * Get api/user-account-level-code/{id}
		 * @param {string} id UserAccountLevelCode identifier
		 * @return {UserAccountLevelCode_get} UserAccountLevelCode resource
		 */
		Api_user_account_level_code_id_get(id: string): Observable<UserAccountLevelCode_get> {
			return this.http.get<UserAccountLevelCode_get>(this.baseUri + 'api/user-account-level-code/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Retrieves a UserAccount resource.
		 * Retrieves a UserAccount resource.
		 * Get api/user-account/{id}
		 * @param {string} id UserAccount identifier
		 * @return {UserAccount_get} UserAccount resource
		 */
		Api_user_account_id_get(id: string): Observable<UserAccount_get> {
			return this.http.get<UserAccount_get>(this.baseUri + 'api/user-account/' + (id == null ? '' : encodeURIComponent(id)), {});
		}

		/**
		 * Replaces the UserAccount resource.
		 * Replaces the UserAccount resource.
		 * Put api/user-account/{id}
		 * @param {string} id UserAccount identifier
		 * @param {UserAccount_put} requestBody The updated UserAccount resource
		 * @return {UserAccount_get} UserAccount resource updated
		 */
		Api_user_account_id_put(id: string, requestBody: UserAccount_put): Observable<UserAccount_get> {
			return this.http.put<UserAccount_get>(this.baseUri + 'api/user-account/' + (id == null ? '' : encodeURIComponent(id)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

}

