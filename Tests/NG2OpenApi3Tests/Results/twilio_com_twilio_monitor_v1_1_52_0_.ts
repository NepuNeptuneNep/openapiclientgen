import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {
	export interface Monitorv1alert {

		/**
		 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		account_sid?: string | null;

		/** The text of the alert. */
		alert_text?: string | null;

		/** The API version used when the alert was generated.  Can be empty for events that don't have a specific API version. */
		api_version?: string | null;

		/** The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_created?: Date | null;

		/** The date and time in GMT when the alert was generated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.  Due to buffering, this can be different than `date_created`. */
		date_generated?: Date | null;

		/** The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_updated?: Date | null;

		/** The error code for the condition that generated the alert. See the [Error Dictionary](https://www.twilio.com/docs/api/errors) for possible causes and solutions to the error. */
		error_code?: string | null;

		/** The log level.  Can be: `error`, `warning`, `notice`, or `debug`. */
		log_level?: string | null;

		/** The URL of the page in our [Error Dictionary](https://www.twilio.com/docs/api/errors) with more information about the error condition. */
		more_info?: string | null;

		/** The method used by the request that generated the alert. If the alert was generated by a request we made to your server, this is the method we used. If the alert was generated by a request from your application to our API, this is the method your application used. */
		request_method?: Monitorv1alertRequest_method | null;

		/** The URL of the request that generated the alert. If the alert was generated by a request we made to your server, this is the URL on your server that generated the alert. If the alert was generated by a request from your application to our API, this is the URL of the resource requested. */
		request_url?: string | null;

		/**
		 * The SID of the resource for which the alert was generated.  For instance, if your server failed to respond to an HTTP request during the flow of a particular call, this value would be the SID of the server.  This value is empty if the alert was not generated for a particular resource.
		 * Max length: 34
		 * Min length: 34
		 */
		resource_sid?: string | null;

		/**
		 * The SID of the service or resource that generated the alert. Can be `null`.
		 * Max length: 34
		 * Min length: 34
		 */
		service_sid?: string | null;

		/**
		 * The unique string that we created to identify the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		sid?: string | null;

		/** The absolute URL of the Alert resource. */
		url?: string | null;
	}
	export interface Monitorv1alertFormProperties {

		/**
		 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		account_sid: FormControl<string | null | undefined>,

		/** The text of the alert. */
		alert_text: FormControl<string | null | undefined>,

		/** The API version used when the alert was generated.  Can be empty for events that don't have a specific API version. */
		api_version: FormControl<string | null | undefined>,

		/** The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_created: FormControl<Date | null | undefined>,

		/** The date and time in GMT when the alert was generated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.  Due to buffering, this can be different than `date_created`. */
		date_generated: FormControl<Date | null | undefined>,

		/** The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_updated: FormControl<Date | null | undefined>,

		/** The error code for the condition that generated the alert. See the [Error Dictionary](https://www.twilio.com/docs/api/errors) for possible causes and solutions to the error. */
		error_code: FormControl<string | null | undefined>,

		/** The log level.  Can be: `error`, `warning`, `notice`, or `debug`. */
		log_level: FormControl<string | null | undefined>,

		/** The URL of the page in our [Error Dictionary](https://www.twilio.com/docs/api/errors) with more information about the error condition. */
		more_info: FormControl<string | null | undefined>,

		/** The method used by the request that generated the alert. If the alert was generated by a request we made to your server, this is the method we used. If the alert was generated by a request from your application to our API, this is the method your application used. */
		request_method: FormControl<Monitorv1alertRequest_method | null | undefined>,

		/** The URL of the request that generated the alert. If the alert was generated by a request we made to your server, this is the URL on your server that generated the alert. If the alert was generated by a request from your application to our API, this is the URL of the resource requested. */
		request_url: FormControl<string | null | undefined>,

		/**
		 * The SID of the resource for which the alert was generated.  For instance, if your server failed to respond to an HTTP request during the flow of a particular call, this value would be the SID of the server.  This value is empty if the alert was not generated for a particular resource.
		 * Max length: 34
		 * Min length: 34
		 */
		resource_sid: FormControl<string | null | undefined>,

		/**
		 * The SID of the service or resource that generated the alert. Can be `null`.
		 * Max length: 34
		 * Min length: 34
		 */
		service_sid: FormControl<string | null | undefined>,

		/**
		 * The unique string that we created to identify the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		sid: FormControl<string | null | undefined>,

		/** The absolute URL of the Alert resource. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateMonitorv1alertFormGroup() {
		return new FormGroup<Monitorv1alertFormProperties>({
			account_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^AC[0-9a-fA-F]{32}$')]),
			alert_text: new FormControl<string | null | undefined>(undefined),
			api_version: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			date_generated: new FormControl<Date | null | undefined>(undefined),
			date_updated: new FormControl<Date | null | undefined>(undefined),
			error_code: new FormControl<string | null | undefined>(undefined),
			log_level: new FormControl<string | null | undefined>(undefined),
			more_info: new FormControl<string | null | undefined>(undefined),
			request_method: new FormControl<Monitorv1alertRequest_method | null | undefined>(undefined),
			request_url: new FormControl<string | null | undefined>(undefined),
			resource_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^[a-zA-Z]{2}[0-9a-fA-F]{32}$')]),
			service_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^[a-zA-Z]{2}[0-9a-fA-F]{32}$')]),
			sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^NO[0-9a-fA-F]{32}$')]),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Monitorv1alertRequest_method { HEAD = 'HEAD', GET = 'GET', POST = 'POST', PATCH = 'PATCH', PUT = 'PUT', DELETE = 'DELETE' }

	export interface Monitorv1alert_instance {

		/**
		 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		account_sid?: string | null;

		/** The text of the alert. */
		alert_text?: string | null;

		/** The API version used when the alert was generated.  Can be empty for events that don't have a specific API version. */
		api_version?: string | null;

		/** The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_created?: Date | null;

		/** The date and time in GMT when the alert was generated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.  Due to buffering, this can be different than `date_created`. */
		date_generated?: Date | null;

		/** The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_updated?: Date | null;

		/** The error code for the condition that generated the alert. See the [Error Dictionary](https://www.twilio.com/docs/api/errors) for possible causes and solutions to the error. */
		error_code?: string | null;

		/** The log level.  Can be: `error`, `warning`, `notice`, or `debug`. */
		log_level?: string | null;

		/** The URL of the page in our [Error Dictionary](https://www.twilio.com/docs/api/errors) with more information about the error condition. */
		more_info?: string | null;

		/** The request headers of the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		request_headers?: string | null;

		/** The method used by the request that generated the alert. If the alert was generated by a request we made to your server, this is the method we used. If the alert was generated by a request from your application to our API, this is the method your application used. */
		request_method?: Monitorv1alertRequest_method | null;

		/** The URL of the request that generated the alert. If the alert was generated by a request we made to your server, this is the URL on your server that generated the alert. If the alert was generated by a request from your application to our API, this is the URL of the resource requested. */
		request_url?: string | null;

		/** The variables passed in the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		request_variables?: string | null;

		/**
		 * The SID of the resource for which the alert was generated.  For instance, if your server failed to respond to an HTTP request during the flow of a particular call, this value would be the SID of the server.  This value is empty if the alert was not generated for a particular resource.
		 * Max length: 34
		 * Min length: 34
		 */
		resource_sid?: string | null;

		/** The response body of the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		response_body?: string | null;

		/** The response headers of the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		response_headers?: string | null;

		/**
		 * The SID of the service or resource that generated the alert. Can be `null`.
		 * Max length: 34
		 * Min length: 34
		 */
		service_sid?: string | null;

		/**
		 * The unique string that we created to identify the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		sid?: string | null;

		/** The absolute URL of the Alert resource. */
		url?: string | null;
	}
	export interface Monitorv1alert_instanceFormProperties {

		/**
		 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		account_sid: FormControl<string | null | undefined>,

		/** The text of the alert. */
		alert_text: FormControl<string | null | undefined>,

		/** The API version used when the alert was generated.  Can be empty for events that don't have a specific API version. */
		api_version: FormControl<string | null | undefined>,

		/** The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_created: FormControl<Date | null | undefined>,

		/** The date and time in GMT when the alert was generated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.  Due to buffering, this can be different than `date_created`. */
		date_generated: FormControl<Date | null | undefined>,

		/** The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		date_updated: FormControl<Date | null | undefined>,

		/** The error code for the condition that generated the alert. See the [Error Dictionary](https://www.twilio.com/docs/api/errors) for possible causes and solutions to the error. */
		error_code: FormControl<string | null | undefined>,

		/** The log level.  Can be: `error`, `warning`, `notice`, or `debug`. */
		log_level: FormControl<string | null | undefined>,

		/** The URL of the page in our [Error Dictionary](https://www.twilio.com/docs/api/errors) with more information about the error condition. */
		more_info: FormControl<string | null | undefined>,

		/** The request headers of the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		request_headers: FormControl<string | null | undefined>,

		/** The method used by the request that generated the alert. If the alert was generated by a request we made to your server, this is the method we used. If the alert was generated by a request from your application to our API, this is the method your application used. */
		request_method: FormControl<Monitorv1alertRequest_method | null | undefined>,

		/** The URL of the request that generated the alert. If the alert was generated by a request we made to your server, this is the URL on your server that generated the alert. If the alert was generated by a request from your application to our API, this is the URL of the resource requested. */
		request_url: FormControl<string | null | undefined>,

		/** The variables passed in the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		request_variables: FormControl<string | null | undefined>,

		/**
		 * The SID of the resource for which the alert was generated.  For instance, if your server failed to respond to an HTTP request during the flow of a particular call, this value would be the SID of the server.  This value is empty if the alert was not generated for a particular resource.
		 * Max length: 34
		 * Min length: 34
		 */
		resource_sid: FormControl<string | null | undefined>,

		/** The response body of the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		response_body: FormControl<string | null | undefined>,

		/** The response headers of the request that generated the alert. This value is only returned when a single Alert resource is fetched. */
		response_headers: FormControl<string | null | undefined>,

		/**
		 * The SID of the service or resource that generated the alert. Can be `null`.
		 * Max length: 34
		 * Min length: 34
		 */
		service_sid: FormControl<string | null | undefined>,

		/**
		 * The unique string that we created to identify the Alert resource.
		 * Max length: 34
		 * Min length: 34
		 */
		sid: FormControl<string | null | undefined>,

		/** The absolute URL of the Alert resource. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateMonitorv1alert_instanceFormGroup() {
		return new FormGroup<Monitorv1alert_instanceFormProperties>({
			account_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^AC[0-9a-fA-F]{32}$')]),
			alert_text: new FormControl<string | null | undefined>(undefined),
			api_version: new FormControl<string | null | undefined>(undefined),
			date_created: new FormControl<Date | null | undefined>(undefined),
			date_generated: new FormControl<Date | null | undefined>(undefined),
			date_updated: new FormControl<Date | null | undefined>(undefined),
			error_code: new FormControl<string | null | undefined>(undefined),
			log_level: new FormControl<string | null | undefined>(undefined),
			more_info: new FormControl<string | null | undefined>(undefined),
			request_headers: new FormControl<string | null | undefined>(undefined),
			request_method: new FormControl<Monitorv1alertRequest_method | null | undefined>(undefined),
			request_url: new FormControl<string | null | undefined>(undefined),
			request_variables: new FormControl<string | null | undefined>(undefined),
			resource_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^[a-zA-Z]{2}[0-9a-fA-F]{32}$')]),
			response_body: new FormControl<string | null | undefined>(undefined),
			response_headers: new FormControl<string | null | undefined>(undefined),
			service_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^[a-zA-Z]{2}[0-9a-fA-F]{32}$')]),
			sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^NO[0-9a-fA-F]{32}$')]),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface Monitorv1event {

		/**
		 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.
		 * Max length: 34
		 * Min length: 34
		 */
		account_sid?: string | null;

		/**
		 * The SID of the actor that caused the event, if available. Can be `null`.
		 * Max length: 34
		 * Min length: 34
		 */
		actor_sid?: string | null;

		/** The type of actor that caused the event. Can be: `user` for a change made by a logged-in user in the Twilio Console, `account` for an event caused by an API request by an authenticating Account, `twilio-admin` for an event caused by a Twilio employee, and so on. */
		actor_type?: string | null;

		/** A description of the event. Can be `null`. */
		description?: string | null;

		/** An object with additional data about the event. The  contents depend on `event_type`. For example, event-types of the form `RESOURCE.updated`, this value contains a `resource_properties` dictionary that describes the previous and updated properties of the resource. */
		event_data?: any;

		/** The date and time in GMT when the event was recorded specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		event_date?: Date | null;

		/** The event's type. Event-types are typically in the form: `RESOURCE_TYPE.ACTION`, where `RESOURCE_TYPE` is the type of resource that was affected and `ACTION` is what happened to it. For example, `phone-number.created`. For a full list of all event-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types). */
		event_type?: string | null;

		/** The absolute URLs of related resources. */
		links?: string | null;

		/**
		 * The SID of the resource that was affected.
		 * Max length: 34
		 * Min length: 34
		 */
		resource_sid?: string | null;

		/** The type of resource that was affected. For a full list of all resource-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types). */
		resource_type?: string | null;

		/**
		 * The unique string that we created to identify the Event resource.
		 * Max length: 34
		 * Min length: 34
		 */
		sid?: string | null;

		/** The originating system or interface that caused the event.  Can be: `web` for events caused by user action in the Twilio Console, `api` for events caused by a request to our API, or   `twilio` for events caused by an automated or internal Twilio system. */
		source?: string | null;

		/** The IP address of the source, if the source is outside the Twilio cloud. This value is `null` for events with `source` of `twilio` */
		source_ip_address?: string | null;

		/** The absolute URL of the resource that was affected. Can be `null`. */
		url?: string | null;
	}
	export interface Monitorv1eventFormProperties {

		/**
		 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.
		 * Max length: 34
		 * Min length: 34
		 */
		account_sid: FormControl<string | null | undefined>,

		/**
		 * The SID of the actor that caused the event, if available. Can be `null`.
		 * Max length: 34
		 * Min length: 34
		 */
		actor_sid: FormControl<string | null | undefined>,

		/** The type of actor that caused the event. Can be: `user` for a change made by a logged-in user in the Twilio Console, `account` for an event caused by an API request by an authenticating Account, `twilio-admin` for an event caused by a Twilio employee, and so on. */
		actor_type: FormControl<string | null | undefined>,

		/** A description of the event. Can be `null`. */
		description: FormControl<string | null | undefined>,

		/** An object with additional data about the event. The  contents depend on `event_type`. For example, event-types of the form `RESOURCE.updated`, this value contains a `resource_properties` dictionary that describes the previous and updated properties of the resource. */
		event_data: FormControl<any | null | undefined>,

		/** The date and time in GMT when the event was recorded specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. */
		event_date: FormControl<Date | null | undefined>,

		/** The event's type. Event-types are typically in the form: `RESOURCE_TYPE.ACTION`, where `RESOURCE_TYPE` is the type of resource that was affected and `ACTION` is what happened to it. For example, `phone-number.created`. For a full list of all event-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types). */
		event_type: FormControl<string | null | undefined>,

		/** The absolute URLs of related resources. */
		links: FormControl<string | null | undefined>,

		/**
		 * The SID of the resource that was affected.
		 * Max length: 34
		 * Min length: 34
		 */
		resource_sid: FormControl<string | null | undefined>,

		/** The type of resource that was affected. For a full list of all resource-types, see the [Monitor Event Types](https://www.twilio.com/docs/usage/monitor-events#event-types). */
		resource_type: FormControl<string | null | undefined>,

		/**
		 * The unique string that we created to identify the Event resource.
		 * Max length: 34
		 * Min length: 34
		 */
		sid: FormControl<string | null | undefined>,

		/** The originating system or interface that caused the event.  Can be: `web` for events caused by user action in the Twilio Console, `api` for events caused by a request to our API, or   `twilio` for events caused by an automated or internal Twilio system. */
		source: FormControl<string | null | undefined>,

		/** The IP address of the source, if the source is outside the Twilio cloud. This value is `null` for events with `source` of `twilio` */
		source_ip_address: FormControl<string | null | undefined>,

		/** The absolute URL of the resource that was affected. Can be `null`. */
		url: FormControl<string | null | undefined>,
	}
	export function CreateMonitorv1eventFormGroup() {
		return new FormGroup<Monitorv1eventFormProperties>({
			account_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^AC[0-9a-fA-F]{32}$')]),
			actor_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^US[0-9a-fA-F]{32}$')]),
			actor_type: new FormControl<string | null | undefined>(undefined),
			description: new FormControl<string | null | undefined>(undefined),
			event_data: new FormControl<any | null | undefined>(undefined),
			event_date: new FormControl<Date | null | undefined>(undefined),
			event_type: new FormControl<string | null | undefined>(undefined),
			links: new FormControl<string | null | undefined>(undefined),
			resource_sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^[a-zA-Z]{2}[0-9a-fA-F]{32}$')]),
			resource_type: new FormControl<string | null | undefined>(undefined),
			sid: new FormControl<string | null | undefined>(undefined, [Validators.minLength(34), Validators.maxLength(34), Validators.pattern('^AE[0-9a-fA-F]{32}$')]),
			source: new FormControl<string | null | undefined>(undefined),
			source_ip_address: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Get v1/Alerts
		 * @param {string} LogLevel Only show alerts for this log-level.  Can be: `error`, `warning`, `notice`, or `debug`.
		 * @param {Date} StartDate Only include alerts that occurred on or after this date and time. Specify the date and time in GMT and format as `YYYY-MM-DD` or `YYYY-MM-DDThh:mm:ssZ`. Queries for alerts older than 30 days are not supported.
		 * @param {Date} EndDate Only include alerts that occurred on or before this date and time. Specify the date and time in GMT and format as `YYYY-MM-DD` or `YYYY-MM-DDThh:mm:ssZ`. Queries for alerts older than 30 days are not supported.
		 * @param {number} PageSize How many resources to return in each list page. The default is 50, and the maximum is 1000.
		 * @param {number} Page The page index. This value is simply for client state.
		 * @param {string} PageToken The page token. This is provided by the API.
		 * @return {ListAlertReturn} OK
		 */
		ListAlert(LogLevel: string | null | undefined, StartDate: Date | null | undefined, EndDate: Date | null | undefined, PageSize: number | null | undefined, Page: number | null | undefined, PageToken: string | null | undefined): Observable<ListAlertReturn> {
			return this.http.get<ListAlertReturn>(this.baseUri + 'v1/Alerts?LogLevel=' + (LogLevel == null ? '' : encodeURIComponent(LogLevel)) + '&StartDate=' + StartDate?.toISOString() + '&EndDate=' + EndDate?.toISOString() + '&PageSize=' + PageSize + '&Page=' + Page + '&PageToken=' + (PageToken == null ? '' : encodeURIComponent(PageToken)), {});
		}

		/**
		 * Get v1/Alerts/{Sid}
		 * @param {string} Sid The SID of the Alert resource to fetch.
		 * @return {Monitorv1alert_instance} OK
		 */
		FetchAlert(Sid: string): Observable<Monitorv1alert_instance> {
			return this.http.get<Monitorv1alert_instance>(this.baseUri + 'v1/Alerts/' + (Sid == null ? '' : encodeURIComponent(Sid)), {});
		}

		/**
		 * Returns a list of events in the account, sorted by event-date.
		 * Get v1/Events
		 * @param {string} ActorSid Only include events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials.
		 * @param {string} EventType Only include events of this [Event Type](https://www.twilio.com/docs/usage/monitor-events#event-types).
		 * @param {string} ResourceSid Only include events that refer to this resource. Useful for discovering the history of a specific resource.
		 * @param {string} SourceIpAddress Only include events that originated from this IP address. Useful for tracking suspicious activity originating from the API or the Twilio Console.
		 * @param {Date} StartDate Only include events that occurred on or after this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		 * @param {Date} EndDate Only include events that occurred on or before this date. Specify the date in GMT and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		 * @param {number} PageSize How many resources to return in each list page. The default is 50, and the maximum is 1000.
		 * @param {number} Page The page index. This value is simply for client state.
		 * @param {string} PageToken The page token. This is provided by the API.
		 * @return {ListEventReturn} OK
		 */
		ListEvent(ActorSid: string | null | undefined, EventType: string | null | undefined, ResourceSid: string | null | undefined, SourceIpAddress: string | null | undefined, StartDate: Date | null | undefined, EndDate: Date | null | undefined, PageSize: number | null | undefined, Page: number | null | undefined, PageToken: string | null | undefined): Observable<ListEventReturn> {
			return this.http.get<ListEventReturn>(this.baseUri + 'v1/Events?ActorSid=' + (ActorSid == null ? '' : encodeURIComponent(ActorSid)) + '&EventType=' + (EventType == null ? '' : encodeURIComponent(EventType)) + '&ResourceSid=' + (ResourceSid == null ? '' : encodeURIComponent(ResourceSid)) + '&SourceIpAddress=' + (SourceIpAddress == null ? '' : encodeURIComponent(SourceIpAddress)) + '&StartDate=' + StartDate?.toISOString() + '&EndDate=' + EndDate?.toISOString() + '&PageSize=' + PageSize + '&Page=' + Page + '&PageToken=' + (PageToken == null ? '' : encodeURIComponent(PageToken)), {});
		}

		/**
		 * Get v1/Events/{Sid}
		 * @param {string} Sid The SID of the Event resource to fetch.
		 * @return {Monitorv1event} OK
		 */
		FetchEvent(Sid: string): Observable<Monitorv1event> {
			return this.http.get<Monitorv1event>(this.baseUri + 'v1/Events/' + (Sid == null ? '' : encodeURIComponent(Sid)), {});
		}
	}

	export interface ListAlertReturn {
		alerts?: Array<Monitorv1alert>;
		meta?: ListAlertReturnMeta;
	}
	export interface ListAlertReturnFormProperties {
	}
	export function CreateListAlertReturnFormGroup() {
		return new FormGroup<ListAlertReturnFormProperties>({
		});

	}

	export interface ListAlertReturnMeta {
		first_page_url?: string | null;
		key?: string | null;
		next_page_url?: string | null;
		page?: number | null;
		page_size?: number | null;
		previous_page_url?: string | null;
		url?: string | null;
	}
	export interface ListAlertReturnMetaFormProperties {
		first_page_url: FormControl<string | null | undefined>,
		key: FormControl<string | null | undefined>,
		next_page_url: FormControl<string | null | undefined>,
		page: FormControl<number | null | undefined>,
		page_size: FormControl<number | null | undefined>,
		previous_page_url: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateListAlertReturnMetaFormGroup() {
		return new FormGroup<ListAlertReturnMetaFormProperties>({
			first_page_url: new FormControl<string | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined),
			next_page_url: new FormControl<string | null | undefined>(undefined),
			page: new FormControl<number | null | undefined>(undefined),
			page_size: new FormControl<number | null | undefined>(undefined),
			previous_page_url: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListEventReturn {
		events?: Array<Monitorv1event>;
		meta?: ListEventReturnMeta;
	}
	export interface ListEventReturnFormProperties {
	}
	export function CreateListEventReturnFormGroup() {
		return new FormGroup<ListEventReturnFormProperties>({
		});

	}

	export interface ListEventReturnMeta {
		first_page_url?: string | null;
		key?: string | null;
		next_page_url?: string | null;
		page?: number | null;
		page_size?: number | null;
		previous_page_url?: string | null;
		url?: string | null;
	}
	export interface ListEventReturnMetaFormProperties {
		first_page_url: FormControl<string | null | undefined>,
		key: FormControl<string | null | undefined>,
		next_page_url: FormControl<string | null | undefined>,
		page: FormControl<number | null | undefined>,
		page_size: FormControl<number | null | undefined>,
		previous_page_url: FormControl<string | null | undefined>,
		url: FormControl<string | null | undefined>,
	}
	export function CreateListEventReturnMetaFormGroup() {
		return new FormGroup<ListEventReturnMetaFormProperties>({
			first_page_url: new FormControl<string | null | undefined>(undefined),
			key: new FormControl<string | null | undefined>(undefined),
			next_page_url: new FormControl<string | null | undefined>(undefined),
			page: new FormControl<number | null | undefined>(undefined),
			page_size: new FormControl<number | null | undefined>(undefined),
			previous_page_url: new FormControl<string | null | undefined>(undefined),
			url: new FormControl<string | null | undefined>(undefined),
		});

	}

}

